esphome:
  name: hempy
  friendly_name: Hempy
  build_path: "../config/esphome/build"
  on_boot:
    priority: 10
    then:
      - rtttl.play:
          rtttl: "start:d=4,o=5,b=100:16e6,16e6,32p,8e6,16c6,8e6,8g6,8p" #Play startup tone on buzzer

rp2040:
  board: rpipicow

logger:
  level: DEBUG # For calibrating the weight sensors: Shows raw weight sensor readings
  #level: INFO # After calibrating the weight sensors

debug:
  update_interval: 60s

external_components:
  #- source: # Use this to load the hempy module from the \components folder (for code customization)
  #    type: local
  #    path: components
  - source: # Use this to load the hempy module from GitHub (https://github.com/growboxguy/Gbox420/tree/master/ESPHome/components/hempy)
      type: git
      url: https://github.com/Growboxguy/Gbox420
      ref: master
      path: ESPHome/components
    components: [hempy]
    refresh: 1d #How often to check the GitHub repo for updates. Default 1d

rtttl: #Ring Tone Text Transfer Language -
  id: buzzer_rtttl
  output: buzzer

text_sensor:
  - platform: debug
    device:
      name: "Device info"
    reset_reason:
      name: "Reset reason"
  - platform: template
    id: bucket1_state_sensor
    name: "Bucket1 State"
    icon: "mdi:state-machine"
    filters:
      - lambda: |-
          static std::string bucker1_last_state = "unknown";
          if (bucker1_last_state != x) {
            bucker1_last_state = x;
            return x;
          }
          return {};
    on_value:
      then:
        - lambda: |-
            id(buzzer_rtttl).play("change:d=16,o=6,b=120:e,g,b");
  - platform: template
    id: bucket2_state_sensor
    name: "Bucket2 State"
    icon: "mdi:state-machine"
    filters:
      - lambda: |-
          static std::string bucker2_last_state = "unknown";
          if (bucker2_last_state != x) {
            bucker2_last_state = x;
            return x;
          }
          return {};
    on_value:
      then:
        - lambda: |-
            id(buzzer_rtttl).play("change:d=16,o=6,b=120:e,g,b");

interval:
  - interval: 30s # Beep when any of the bucket's are DRY
    then:
      - if:
          condition: # Is more than one one bucket is DRY, the Bucket 1 beeps will be played only
            lambda: |
              return (id(bucket1_state_sensor).state == "DRY");
          then:
            - rtttl.play: "alert:d=,o=6,b=120:e,p,e,p,e,p,p,e" # 3 beeps +  pause + 1 beep
      - if:
          condition:
            lambda: |
              return (id(bucket2_state_sensor).state == "DRY");
          then:
            - rtttl.play: "alert:d=,o=6,b=120:e,p,e,p,e,p,p,e,p,e" # 3 beeps + pause + 2 beeps

  - interval: 2s #Heart beat - Blink built-in LED every 2sec
    then:
      - output.turn_on: led
      - delay: 1s
      - output.turn_off: led

# Enable Home Assistant API
api:
  encryption:
    key: !secret hempy_encryption_key
  services:
    #Bucket 1
    - service: bucket1_start_watering #Triggers watering (re-enables watering logic)
      then:
        - lambda: |-
            id(bucket1).start_watering();
    - service: bucket1_stop_watering #Stops watering (re-enables watering logic)
      then:
        - lambda: |-
            id(bucket1).stop_watering();
    - service: bucket1_disable_watering #Disable watering logic
      then:
        - lambda: |-
            id(bucket1).disable_watering();
    - service: bucket1_toggle_watering #Triggers watering (re-enables watering logic), or stops watering if it is already in progress
      then:
        - lambda: |-
            id(bucket1).toggle_watering();
    - service: bucket1_refresh #Triggers reading the bucket weight and reevaluate watering conditions
      then:
        - lambda: |-
            id(bucket1).refresh();
    #Bucket 2
    - service: bucket2_start_watering #Triggers watering (re-enables watering logic)
      then:
        - lambda: |-
            id(bucket2).start_watering();
    - service: bucket2_stop_watering #Stops watering (re-enables watering logic)
      then:
        - lambda: |-
            id(bucket2).stop_watering();
    - service: bucket2_disable_watering #Disable watering logic
      then:
        - lambda: |-
            id(bucket2).disable_watering();
    - service: bucket2_toggle_watering #Triggers watering (re-enables watering logic), or stops watering if it is already in progress
      then:
        - lambda: |-
            id(bucket2).toggle_watering();
    - service: bucket2_refresh #Triggers reading the bucket weight and reevaluate watering conditions
      then:
        - lambda: |-
            id(bucket2).refresh();

# Enable Over The Air updates
ota:
  - platform: esphome
    password: !secret hempy_ota_password

# Setup WiFi connection
wifi:
  ssid: !secret hempy_wifi_ssid
  password: !secret hempy_wifi_password

  # Enable fallback hotspot in case WiFi connection fails
  ap:
    ssid: "Hempy Fallback Hotspot"
    password: !secret hempy_wifi_password

output:
  - platform: gpio # Pico W built-in LED
    id: led
    pin: 32
  - platform: rp2040_pwm # Buzzer. For ESP chips use platform: esp8266_pwm
    id: buzzer
    pin: 2
  - platform: gpio # Relay to power water pump for Bucket 1
    id: bucket1_relay
    pin: 10 # Relay's IN pin
    inverted: true # Negative logic (false turns it on)
  - platform: gpio # Relay to power water pump for Bucket 1
    id: bucket2_relay
    pin: 11 # Relay's IN pin
    inverted: true # Negative logic (false turns it on)

switch:
  #Bucket1
  - platform: output # Reference to the relay controlling the water pump
    id: bucket1_waterpump
    name: "Bucket1 Pump"
    output: bucket1_relay
    on_turn_on:
      - rtttl.play:
          rtttl: "on:d=16,o=6,b=120:e,p,g" # Play sound when turning on
    on_turn_off:
      - rtttl.play:
          rtttl: "off:d=16,o=6,b=120:g,p,e" # Play sound when turning off
  - platform: template # Enable/Disable watering logic
    name: "Bucket1 Watering logic"
    id: bucket1_watering_logic
    icon: "mdi:water-check"
    optimistic: true
    restore_mode: RESTORE_DEFAULT_ON
    lambda: |-
      return id(bucket1).is_watering_active();
    turn_on_action:
      - rtttl.play:
          rtttl: "on:d=16,o=6,b=120:e,p,g"
      - lambda: |-
          id(bucket1).toggle_watering_logic(true);
    turn_off_action:
      - rtttl.play:
          rtttl: "off:d=16,o=6,b=120:g,p,e"
      - lambda: |-
          id(bucket1).toggle_watering_logic(false);
  #Bucket2
  - platform: output # Reference to the relay controlling the water pump
    id: bucket2_waterpump
    name: "Bucket2 Pump"
    output: bucket2_relay
    on_turn_on:
      - rtttl.play:
          rtttl: "on:d=16,o=6,b=120:e,p,g" # Play sound when turning on
    on_turn_off:
      - rtttl.play:
          rtttl: "off:d=16,o=6,b=120:g,p,e" # Play sound when turning off
  - platform: template # Enable/Disable watering logic
    name: "Bucket2 Watering logic"
    id: bucket2_watering_logic
    icon: "mdi:water-check"
    optimistic: true
    restore_mode: RESTORE_DEFAULT_ON
    lambda: |-
      return id(bucket2).is_watering_active();
    turn_on_action:
      - rtttl.play:
          rtttl: "on:d=16,o=6,b=120:e,p,g"
      - lambda: |-
          id(bucket2).toggle_watering_logic(true);
    turn_off_action:
      - rtttl.play:
          rtttl: "off:d=16,o=6,b=120:g,p,e"
      - lambda: |-
          id(bucket2).toggle_watering_logic(false);

sensor:
  #Debug
  - platform: debug
    loop_time:
      name: "Loop Time"
  #Bucket 1
  - platform: template
    id: bucket1_dry_weight
    name: "Bucket1 Dry weight"
    unit_of_measurement: "kg"
    accuracy_decimals: 2
    icon: "mdi:cup-outline"
    filters:
      - round: 2
  - platform: template
    id: bucket1_wet_weight
    name: "Bucket1 Wet weight"
    unit_of_measurement: "kg"
    accuracy_decimals: 2
    icon: "mdi:cup"
    filters:
      - round: 2
  - platform: hx711
    id: bucket1_weight_sensor
    name: "Bucket1 Weight"
    unit_of_measurement: "kg"
    icon: "mdi:weight-kilogram"
    dout_pin: 7
    clk_pin: 6
    gain: 128
    update_interval: 1s #Overwritten by the Hempy bucket's dynamic update_interval
    accuracy_decimals: 2
    filters:
      - round: 2
      - calibrate_linear:
          - -117400 -> 0 #Raw reading when the weight sensor has no weight on it
          - -498723 -> 3 #Raw reading of an object with a known wight
      - delta: 0.05 # Only update if the change is greater than 0.05 kg
  - platform: template #How much water is remaining in the bucket  (Weight - DRY weight)
    id: bucket1_remaining_weight
    name: "Bucket1 Remaining Weight"
    unit_of_measurement: "kg"
    accuracy_decimals: 2
    icon: "mdi:water-sync"
    lambda: |-
      return id(bucket1_weight_sensor).state - id(bucket1_dry_weight).state;
    update_interval: 5s
    filters:
      - delta: 0.1 # Only update if the change is greater than 0.1 kg
      - round: 2
  #Bucket 2
  - platform: template
    id: bucket2_dry_weight
    name: "Bucket2 Dry weight"
    unit_of_measurement: "kg"
    accuracy_decimals: 2
    icon: "mdi:cup-outline"
    filters:
      - round: 2
  - platform: template
    id: bucket2_wet_weight
    name: "Bucket2 Wet weight"
    unit_of_measurement: "kg"
    accuracy_decimals: 2
    icon: "mdi:cup"
    filters:
      - round: 2
  - platform: hx711
    id: bucket2_weight_sensor
    name: "Bucket2 Weight"
    unit_of_measurement: "kg"
    icon: "mdi:weight-kilogram"
    dout_pin: 9
    clk_pin: 8
    gain: 128
    update_interval: 1s #Overwritten by the Hempy bucket's dynamic update_interval
    accuracy_decimals: 2
    filters:
      - round: 2
      - calibrate_linear:
          - 43700 -> 0 #Raw reading when the weight sensor has no weight on it
          - -294500 -> 3 #Raw reading of an object with a known wight
      - delta: 0.05 # Only update if the change is greater than 0.05 kg
  - platform: template
    id: bucket2_remaining_weight
    name: "Bucket2 Remaining Weight"
    unit_of_measurement: "kg"
    icon: "mdi:water-sync"
    lambda: |-
      return id(bucket2_weight_sensor).state - id(bucket2_dry_weight).state;
    update_interval: 5s
    filters:
      - delta: 0.1 # Only update if the change is greater than 0.1 kg
      - round: 2 # Only use 2 decimals (for Displaying and Storing)
  #Internal temperature sensor
  - platform: internal_temperature
    name: "Internal temp"
    unit_of_measurement: "°C"
    icon: "mdi:thermometer"
    device_class: "temperature"
    state_class: "measurement"
    update_interval: 60s
    filters:
      - delta: 0.1 # Only update if the change is greater than 0.1 °C
      - round: 2 # Only use 2 decimals (for Displaying and Storing)
      - calibrate_linear: # Calibrate internal temp reading to ambient temperature, Sensor reading at two different known ambient temps, large temperature difference is best)
          - 21.5 -> 7.0
          - 24.3 -> 20.1
    #  - sliding_window_moving_average:
    #      window_size: 15
    #      send_every: 15
    #   - median:
    #     window_size: 10 #calculate median based on the last 10 readings

number:
  #Bucket1
  - platform: template
    id: bucket1_start_watering_weight # When the bucket weight drops below this -> Start the watering process
    name: "Bucket1 Start watering weight"
    unit_of_measurement: "kg"
    icon: "mdi:watering-can"
    min_value: 0
    max_value: 25
    step: 0.05
    optimistic: true
    restore_value: true # Restore the value from flash storage
    initial_value: 13.0 # Set default value if no value is stored
    on_value:
      - lambda: |-
          id(bucket1).update_next_watering_weight(id(bucket1_start_watering_weight).state);
  - platform: template
    id: bucket1_watering_increments # How much water to pump in one cycle, then wait for DrainWaitTime seconds before either starting a new pump cycle (DrainTargetWeight not reached) or considering the watering done (DrainTargetWeight reached)
    name: "Bucket1 Watering increments"
    unit_of_measurement: "kg"
    icon: "mdi:water-plus"
    min_value: 0
    max_value: 1
    step: 0.05
    optimistic: true
    restore_value: true # Restore the value from flash storage
    initial_value: 0.2 # (0.2 liter) Set default value if no value is stored
  - platform: template
    id: bucket1_max_watering_weight # Safety limit: Disable watering when bucket weight goes above this -> Consider the drain hose clogged and disable the watering logic
    name: "Bucket1 Max watering weight"
    unit_of_measurement: "kg"
    icon: "mdi:beaker-alert"
    min_value: 0
    max_value: 25
    step: 0.1
    optimistic: true
    restore_value: true # Restore the value from flash storage
    initial_value: 16 # Set default value if no value is stored
    on_value:
      then:
        - script.execute: check_wet_weight
  - platform: template
    id: bucket1_manual_watering_time # Maximum time in seconds a manual watering should take
    name: "Bucket1 Manual watering time"
    unit_of_measurement: "sec"
    icon: "mdi:timer-refresh-outline"
    min_value: 0
    max_value: 60
    step: 1
    optimistic: true
    restore_value: true # Restore the value from flash storage
    initial_value: 30 # Set default value if no value is stored
  - platform: template
    id: bucket1_pump_timeout # Safety limit: Maximum total time the pump can run during watering. If the drain target is not hit before the timeout -> Consider the pump broken and disable the watering logic
    name: "Bucket1 pump timeout"
    unit_of_measurement: "sec"
    icon: "mdi:timer-alert-outline"
    min_value: 0
    max_value: 120
    step: 1
    optimistic: true
    restore_value: true # Restore the value from flash storage
    initial_value: 60 # Set default value if no value is stored
  - platform: template
    id: bucket1_drain_wait_time # How long to wait between watering cycles for the water to drain in to the waste reservoir
    name: "Bucket1 Drain wait time"
    unit_of_measurement: "sec"
    icon: "mdi:timer-pause"
    min_value: 0
    max_value: 600
    step: 5
    optimistic: true
    restore_value: true # Restore the value from flash storage
    initial_value: 60 # Set default value if no value is stored
  - platform: template
    id: bucket1_drain_target_weight # How much water should drain before considering the watering done (drain to waste)
    name: "Bucket1 Drain target weight"
    unit_of_measurement: "kg"
    icon: "mdi:water-minus"
    min_value: 0
    max_value: 1
    step: 0.05
    optimistic: true
    restore_value: true # Restore the value from flash storage
    initial_value: 0.1 # Set default value if no value is stored
  - platform: template
    id: bucket1_evaporation_target_weight # How much weight should the bucket lose before starting another watering. When a watering is complete the wet weight - Evaporation target will give the next start watering weight.
    name: "Bucket1 Evaporation target weight"
    unit_of_measurement: "kg"
    icon: "mdi:waves-arrow-up"
    min_value: 0
    max_value: 5
    step: 0.1
    optimistic: true
    restore_value: false # Do not restore the value from flash storage - Calculated after every watering. After boot, before the first watering "start_watering_weight" is used.
    initial_value: 0.4 # Set default value if no value is stored
    on_value:
      - lambda: |-
          id(bucket1).update_evaporation_target(id(bucket1_evaporation_target_weight).state);
  # Bucket2
  - platform: template
    id: bucket2_start_watering_weight # When the bucket weight drops below this -> Start the watering process
    name: "Bucket2 Start watering weight"
    unit_of_measurement: "kg"
    icon: "mdi:watering-can"
    min_value: 0
    max_value: 25
    step: 0.05
    optimistic: true
    restore_value: true # Restore the value from flash storage
    initial_value: 13.0 # Set default value if no value is stored
    on_value:
      - lambda: |-
          id(bucket2).update_next_watering_weight(id(bucket2_start_watering_weight).state);
  - platform: template
    id: bucket2_watering_increments
    name: "Bucket2 Watering increments" # How much water to pump in one cycle, then wait for DrainWaitTime seconds before either starting a new pump cycle (DrainTargetWeight not reached) or considering the watering done (DrainTargetWeight reached)
    unit_of_measurement: "kg"
    icon: "mdi:water-plus"
    min_value: 0
    max_value: 1
    step: 0.05
    optimistic: true
    restore_value: true # Restore the value from flash storage
    initial_value: 0.2 # (0.2 liter) Set default value if no value is stored
  - platform: template
    id: bucket2_max_watering_weight # Safety limit: Disable watering when bucket weight goes above this -> Consider the drain hose clogged and disable the watering logic
    name: "Bucket2 Max watering weight"
    unit_of_measurement: "kg"
    icon: "mdi:beaker-alert"
    min_value: 0
    max_value: 25
    step: 0.1
    optimistic: true
    restore_value: true # Restore the value from flash storage
    initial_value: 16 # (0.2 liter) Set default value if no value is stored
    on_value:
      then:
        - script.execute: check_wet_weight
  - platform: template
    id: bucket2_manual_watering_time # Maximum time in seconds a manual watering should take
    name: "Bucket2 Manual watering time"
    unit_of_measurement: "sec"
    icon: "mdi:timer-refresh-outline"
    min_value: 0
    max_value: 60
    step: 1
    optimistic: true
    restore_value: true # Restore the value from flash storage
    initial_value: 30 # Set default value if no value is stored
  - platform: template
    id: bucket2_pump_timeout # Safety limit: Maximum total time the pump can run during watering. If the drain target is not hit before the timeout -> Consider the pump broken and disable the watering logic
    name: "Bucket2 pump timeout"
    unit_of_measurement: "sec"
    icon: "mdi:timer-alert-outline"
    min_value: 0
    max_value: 120
    step: 1
    optimistic: true
    restore_value: true # Restore the value from flash storage
    initial_value: 60 # Set default value if no value is stored
  - platform: template
    id: bucket2_drain_wait_time # How long to wait between watering cycles for the water to drain in to the waste reservoir
    name: "Bucket2 Drain wait time"
    unit_of_measurement: "sec"
    icon: "mdi:timer-pause"
    min_value: 0
    max_value: 600
    step: 5
    optimistic: true
    restore_value: true # Restore the value from flash storage
    initial_value: 60 # Set default value if no value is stored
  - platform: template
    id: bucket2_drain_target_weight # How much water should drain before considering the watering done (drain to waste)
    name: "Bucket2 Drain target weight"
    unit_of_measurement: "kg"
    icon: "mdi:water-minus"
    min_value: 0
    max_value: 1
    step: 0.05
    optimistic: true
    restore_value: true # Restore the value from flash storage
    initial_value: 0.1 # Set default value if no value is stored
  - platform: template
    id: bucket2_evaporation_target_weight # How much weight should the bucket lose before starting another watering. When a watering is complete the wet weight - Evaporation target will give the next start watering weight.
    name: "Bucket2 Evaporation target weight"
    unit_of_measurement: "kg"
    icon: "mdi:waves-arrow-up"
    min_value: 0
    max_value: 5
    step: 0.1
    optimistic: true
    restore_value: false # Do not restore the value from flash storage - Calculated after every watering. After boot, before the first watering "start_watering_weight" is used.
    initial_value: 0.4 # Set default value if no value is stored
    on_value:
      - lambda: |-
          id(bucket2).update_evaporation_target(id(bucket2_evaporation_target_weight).state);

script:
  - id: check_wet_weight
    then:
      # Check bucket1 wet weight against its max weight
      - if:
          condition:
            lambda: 'return id(bucket1_wet_weight).state > id(bucket1_max_watering_weight).state;'
          then:
            - lambda: 'id(bucket1_wet_weight).publish_state(id(bucket1_max_watering_weight).state);'

      # Check bucket2 wet weight against its max weight
      - if:
          condition:
            lambda: 'return id(bucket2_wet_weight).state > id(bucket2_max_watering_weight).state;'
          then:
            - lambda: 'id(bucket2_wet_weight).publish_state(id(bucket2_max_watering_weight).state);'

hempy:
  #active_waterings_limit : 1   #Max number of pumps allowed to run at the same time (Increase only if power supply allows)
  buckets:
    - id: bucket1
      name: Bucket1
      state_sensor: bucket1_state_sensor
      weight_sensor: bucket1_weight_sensor
      start_watering_weight: bucket1_start_watering_weight
      watering_increments: bucket1_watering_increments
      max_watering_weight: bucket1_max_watering_weight
      manual_watering_time: bucket1_manual_watering_time
      pump_timeout: bucket1_pump_timeout
      drain_wait_time: bucket1_drain_wait_time
      drain_target_weight: bucket1_drain_target_weight
      evaporation_target_weight: bucket1_evaporation_target_weight
      dry_weight: bucket1_dry_weight
      wet_weight: bucket1_wet_weight
      waterpump: bucket1_waterpump
      update_interval: 20s #How often to call update. During WATERING and DRAINING state this is dynamically set to 1sec.
    - id: bucket2
      name: Bucket2
      state_sensor: bucket2_state_sensor
      weight_sensor: bucket2_weight_sensor
      start_watering_weight: bucket2_start_watering_weight
      watering_increments: bucket2_watering_increments
      max_watering_weight: bucket2_max_watering_weight
      manual_watering_time: bucket2_manual_watering_time
      pump_timeout: bucket2_pump_timeout
      drain_wait_time: bucket2_drain_wait_time
      drain_target_weight: bucket2_drain_target_weight
      evaporation_target_weight: bucket2_evaporation_target_weight
      dry_weight: bucket2_dry_weight
      wet_weight: bucket2_wet_weight
      waterpump: bucket2_waterpump
      update_interval: 20s #How often to call update. During WATERING and DRAINING state this is dynamically set to 1sec.
