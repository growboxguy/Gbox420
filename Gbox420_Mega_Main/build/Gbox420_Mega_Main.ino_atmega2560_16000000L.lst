
b:\Gbox420\Gbox420\Gbox420_Mega_Main\build/Gbox420_Mega_Main.ino.elf:     file format elf32-avr


Disassembly of section .text:

00000000 <__vectors>:
__vector_default():
       0:	0c 94 e2 10 	jmp	0x21c4	; 0x21c4 <__ctors_end>
       4:	0c 94 c4 83 	jmp	0x10788	; 0x10788 <__vector_1>
       8:	0c 94 ef 83 	jmp	0x107de	; 0x107de <__vector_2>
       c:	0c 94 1a 84 	jmp	0x10834	; 0x10834 <__vector_3>
      10:	0c 94 45 84 	jmp	0x1088a	; 0x1088a <__vector_4>
      14:	0c 94 70 84 	jmp	0x108e0	; 0x108e0 <__vector_5>
      18:	0c 94 9b 84 	jmp	0x10936	; 0x10936 <__vector_6>
      1c:	0c 94 c6 84 	jmp	0x1098c	; 0x1098c <__vector_7>
      20:	0c 94 f1 84 	jmp	0x109e2	; 0x109e2 <__vector_8>
      24:	0c 94 47 83 	jmp	0x1068e	; 0x1068e <__vector_10>
      28:	0c 94 47 83 	jmp	0x1068e	; 0x1068e <__vector_10>
      2c:	0c 94 47 83 	jmp	0x1068e	; 0x1068e <__vector_10>
      30:	0c 94 13 11 	jmp	0x2226	; 0x2226 <__bad_interrupt>
      34:	0c 94 13 11 	jmp	0x2226	; 0x2226 <__bad_interrupt>
      38:	0c 94 13 11 	jmp	0x2226	; 0x2226 <__bad_interrupt>
      3c:	0c 94 13 11 	jmp	0x2226	; 0x2226 <__bad_interrupt>
      40:	0c 94 13 11 	jmp	0x2226	; 0x2226 <__bad_interrupt>
      44:	0c 94 13 11 	jmp	0x2226	; 0x2226 <__bad_interrupt>
      48:	0c 94 13 11 	jmp	0x2226	; 0x2226 <__bad_interrupt>
      4c:	0c 94 13 11 	jmp	0x2226	; 0x2226 <__bad_interrupt>
      50:	0c 94 13 11 	jmp	0x2226	; 0x2226 <__bad_interrupt>
      54:	0c 94 13 11 	jmp	0x2226	; 0x2226 <__bad_interrupt>
      58:	0c 94 13 11 	jmp	0x2226	; 0x2226 <__bad_interrupt>
      5c:	0c 94 1d 85 	jmp	0x10a3a	; 0x10a3a <__vector_23>
      60:	0c 94 13 11 	jmp	0x2226	; 0x2226 <__bad_interrupt>
      64:	0c 94 6b 89 	jmp	0x112d6	; 0x112d6 <__vector_25>
      68:	0c 94 a1 89 	jmp	0x11342	; 0x11342 <__vector_26>
      6c:	0c 94 13 11 	jmp	0x2226	; 0x2226 <__bad_interrupt>
      70:	0c 94 13 11 	jmp	0x2226	; 0x2226 <__bad_interrupt>
      74:	0c 94 13 11 	jmp	0x2226	; 0x2226 <__bad_interrupt>
      78:	0c 94 13 11 	jmp	0x2226	; 0x2226 <__bad_interrupt>
      7c:	0c 94 13 11 	jmp	0x2226	; 0x2226 <__bad_interrupt>
      80:	0c 94 13 11 	jmp	0x2226	; 0x2226 <__bad_interrupt>
      84:	0c 94 13 11 	jmp	0x2226	; 0x2226 <__bad_interrupt>
      88:	0c 94 13 11 	jmp	0x2226	; 0x2226 <__bad_interrupt>
      8c:	0c 94 83 6c 	jmp	0xd906	; 0xd906 <__vector_35>
      90:	0c 94 13 11 	jmp	0x2226	; 0x2226 <__bad_interrupt>
      94:	0c 94 13 11 	jmp	0x2226	; 0x2226 <__bad_interrupt>
      98:	0c 94 13 11 	jmp	0x2226	; 0x2226 <__bad_interrupt>
      9c:	0c 94 13 11 	jmp	0x2226	; 0x2226 <__bad_interrupt>
      a0:	0c 94 13 11 	jmp	0x2226	; 0x2226 <__bad_interrupt>
      a4:	0c 94 13 11 	jmp	0x2226	; 0x2226 <__bad_interrupt>
      a8:	0c 94 13 11 	jmp	0x2226	; 0x2226 <__bad_interrupt>
      ac:	0c 94 13 11 	jmp	0x2226	; 0x2226 <__bad_interrupt>
      b0:	0c 94 13 11 	jmp	0x2226	; 0x2226 <__bad_interrupt>
      b4:	0c 94 13 11 	jmp	0x2226	; 0x2226 <__bad_interrupt>
      b8:	0c 94 13 11 	jmp	0x2226	; 0x2226 <__bad_interrupt>
      bc:	0c 94 13 11 	jmp	0x2226	; 0x2226 <__bad_interrupt>
      c0:	0c 94 13 11 	jmp	0x2226	; 0x2226 <__bad_interrupt>
      c4:	0c 94 13 11 	jmp	0x2226	; 0x2226 <__bad_interrupt>
      c8:	0c 94 13 11 	jmp	0x2226	; 0x2226 <__bad_interrupt>
      cc:	0c 94 02 8a 	jmp	0x11404	; 0x11404 <__vector_51>
      d0:	0c 94 38 8a 	jmp	0x11470	; 0x11470 <__vector_52>
      d4:	0c 94 13 11 	jmp	0x2226	; 0x2226 <__bad_interrupt>
      d8:	0c 94 99 8a 	jmp	0x11532	; 0x11532 <__vector_54>
      dc:	0c 94 cf 8a 	jmp	0x1159e	; 0x1159e <__vector_55>
      e0:	0c 94 13 11 	jmp	0x2226	; 0x2226 <__bad_interrupt>

000000e4 <__trampolines_start>:
__trampolines_start():
      e4:	0c 94 e8 86 	jmp	0x10dd0	; 0x10dd0 <analogWrite+0x140>
      e8:	0c 94 4f 41 	jmp	0x829e	; 0x829e <AeroModule_Web::refresh_Minute()>
      ec:	0c 94 11 43 	jmp	0x8622	; 0x8622 <AeroModule_Web::commandEvent(char*, char*)>
      f0:	0c 94 03 8b 	jmp	0x11606	; 0x11606 <_GLOBAL__sub_I___vector_54>
      f4:	0c 94 57 28 	jmp	0x50ae	; 0x50ae <Lights::refresh_Minute()>
      f8:	0c 94 cb 89 	jmp	0x11396	; 0x11396 <Serial0_available()>
      fc:	0c 94 f6 2b 	jmp	0x57ec	; 0x57ec <Sound::report(bool)>
     100:	0c 94 47 2c 	jmp	0x588e	; 0x588e <AirPump_Web::websiteEvent_Refresh(char*)>
     104:	0c 94 9a 7a 	jmp	0xf534	; 0xf534 <Thread::run()>
     108:	0c 94 c5 86 	jmp	0x10d8a	; 0x10d8a <analogWrite+0xfa>
     10c:	0c 94 68 4b 	jmp	0x96d0	; 0x96d0 <AeroModule_Web::report(bool)>
     110:	0c 94 1d 11 	jmp	0x223a	; 0x223a <runFiveSec()>
     114:	0c 94 97 86 	jmp	0x10d2e	; 0x10d2e <analogWrite+0x9e>
     118:	0c 94 53 12 	jmp	0x24a6	; 0x24a6 <settingsRefreshCallback(char*)>
     11c:	0c 94 9f 60 	jmp	0xc13e	; 0xc13e <ReservoirModule_Web::commandEvent(char*, char*)>
     120:	0c 94 3a 53 	jmp	0xa674	; 0xa674 <virtual thunk to HempyModule_Web::commandEvent(char*, char*)>
     124:	0c 94 d5 89 	jmp	0x113aa	; 0x113aa <_GLOBAL__sub_I___vector_25>
     128:	0c 94 77 58 	jmp	0xb0ee	; 0xb0ee <HempyModule_Web::refresh_FiveSec()>
     12c:	0c 94 6d 2e 	jmp	0x5cda	; 0x5cda <LightSensor_Web::commandEvent(char*, char*)>
     130:	0c 94 e2 22 	jmp	0x45c4	; 0x45c4 <LightSensor::refresh_FiveSec()>
     134:	0c 94 2f 21 	jmp	0x425e	; 0x425e <virtual thunk to Fan::report(bool)>
     138:	0c 94 c3 83 	jmp	0x10786	; 0x10786 <nothing>
     13c:	0c 94 55 58 	jmp	0xb0aa	; 0xb0aa <HempyModule_Web::refresh_Sec()>
     140:	0c 94 91 5f 	jmp	0xbf22	; 0xbf22 <MainModule::report(bool)>
     144:	0c 94 ab 2c 	jmp	0x5956	; 0x5956 <virtual thunk to AirPump_Web::commandEvent(char*, char*)>
     148:	0c 94 7f 87 	jmp	0x10efe	; 0x10efe <turnOffPWM+0xc0>
     14c:	0c 94 47 87 	jmp	0x10e8e	; 0x10e8e <turnOffPWM+0x50>
     150:	0c 94 26 32 	jmp	0x644c	; 0x644c <virtual thunk to Sound_Web::commandEvent(char*, char*)>
     154:	0c 94 83 87 	jmp	0x10f06	; 0x10f06 <turnOffPWM+0xc8>
     158:	0c 94 26 2c 	jmp	0x584c	; 0x584c <Sound::refresh_Sec()>
     15c:	0c 94 ac 35 	jmp	0x6b58	; 0x6b58 <toText_aeroTankState(AeroTankStates)+0x52>
     160:	0c 94 d7 60 	jmp	0xc1ae	; 0xc1ae <virtual thunk to ReservoirModule_Web::commandEvent(char*, char*)>
     164:	0c 94 ab 86 	jmp	0x10d56	; 0x10d56 <analogWrite+0xc6>
     168:	0c 94 e0 73 	jmp	0xe7c0	; 0xe7c0 <ELClientRest::restCallback(void*)>
     16c:	0c 94 a1 2d 	jmp	0x5b42	; 0x5b42 <Fan_Web::commandEvent(char*, char*)>
     170:	0c 94 67 2c 	jmp	0x58ce	; 0x58ce <AirPump_Web::commandEvent(char*, char*)>
     174:	0c 94 5c 65 	jmp	0xcab8	; 0xcab8 <virtual thunk to ReservoirModule_Web::report(bool)>
     178:	0c 94 75 2f 	jmp	0x5eea	; 0x5eea <Lights_Web::websiteEvent_Refresh(char*)>
     17c:	0c 94 43 5c 	jmp	0xb886	; 0xb886 <virtual thunk to MainModule::refresh_Minute()>
     180:	0c 94 0f 4d 	jmp	0x9a1e	; 0x9a1e <virtual thunk to AeroModule_Web::report(bool)>
     184:	0c 94 4d 23 	jmp	0x469a	; 0x469a <virtual thunk to LightSensor::report(bool)>
     188:	0c 94 3c 28 	jmp	0x5078	; 0x5078 <Lights::refresh_Sec()>
     18c:	0c 94 10 87 	jmp	0x10e20	; 0x10e20 <analogWrite+0x190>
     190:	0c 94 0d 23 	jmp	0x461a	; 0x461a <virtual thunk to LightSensor::refresh_FiveSec()>
     194:	0c 94 55 87 	jmp	0x10eaa	; 0x10eaa <turnOffPWM+0x6c>
     198:	0c 94 18 11 	jmp	0x2230	; 0x2230 <mqttPublished(void*)>
     19c:	0c 94 70 1f 	jmp	0x3ee0	; 0x3ee0 <virtual thunk to DHTSensor::report(bool)>
     1a0:	0c 94 bd 2a 	jmp	0x557a	; 0x557a <virtual thunk to PowerSensorV3::report(bool)>
     1a4:	0c 94 59 41 	jmp	0x82b2	; 0x82b2 <virtual thunk to AeroModule_Web::refresh_Minute()>
     1a8:	0c 94 50 1a 	jmp	0x34a0	; 0x34a0 <Module::addToLog(char const*, unsigned char)>
     1ac:	0c 94 8e 15 	jmp	0x2b1c	; 0x2b1c <settingsButtonCallback(char*)>
     1b0:	0c 94 8e 2e 	jmp	0x5d1c	; 0x5d1c <virtual thunk to LightSensor_Web::commandEvent(char*, char*)>
     1b4:	0c 94 cf 86 	jmp	0x10d9e	; 0x10d9e <analogWrite+0x10e>
     1b8:	0c 94 e2 18 	jmp	0x31c4	; 0x31c4 <Common::refresh_Minute()>
     1bc:	0c 94 25 64 	jmp	0xc84a	; 0xc84a <virtual thunk to ReservoirModule_Web::refresh_Sec()>
     1c0:	0c 94 e8 4a 	jmp	0x95d0	; 0x95d0 <virtual thunk to AeroModule_Web::refresh_FiveSec()>
     1c4:	0c 94 b3 86 	jmp	0x10d66	; 0x10d66 <analogWrite+0xd6>
     1c8:	0c 94 63 87 	jmp	0x10ec6	; 0x10ec6 <turnOffPWM+0x88>
     1cc:	0c 94 7a 35 	jmp	0x6af4	; 0x6af4 <toText_pressurePumpState(PressurePumpStates)+0x52>
     1d0:	0c 94 1c 2c 	jmp	0x5838	; 0x5838 <virtual thunk to Sound::report(bool)>
     1d4:	0c 94 80 86 	jmp	0x10d00	; 0x10d00 <analogWrite+0x70>
     1d8:	0c 94 5f 87 	jmp	0x10ebe	; 0x10ebe <turnOffPWM+0x80>
     1dc:	0c 94 47 88 	jmp	0x1108e	; 0x1108e <HardwareSerial::availableForWrite()>
     1e0:	0c 94 5a 33 	jmp	0x66b4	; 0x66b4 <virtual thunk to Sound_Web::refresh_Sec()>
     1e4:	0c 94 b6 18 	jmp	0x316c	; 0x316c <Common::commandEvent(char*, char*)>
     1e8:	0c 94 8b 1f 	jmp	0x3f16	; 0x3f16 <virtual thunk to DHTSensor::refresh_FiveSec()>
     1ec:	0c 94 0d 64 	jmp	0xc81a	; 0xc81a <ReservoirModule_Web::refresh_Sec()>
     1f0:	0c 94 77 7a 	jmp	0xf4ee	; 0xf4ee <Thread::setInterval(unsigned long)>
     1f4:	0c 94 d5 15 	jmp	0x2baa	; 0x2baa <settingsFieldCallback(char*)>
     1f8:	0c 94 48 15 	jmp	0x2a90	; 0x2a90 <runMinute()>
     1fc:	0c 94 bb 86 	jmp	0x10d76	; 0x10d76 <analogWrite+0xe6>
     200:	0c 94 80 35 	jmp	0x6b00	; 0x6b00 <toText_pressurePumpState(PressurePumpStates)+0x5e>
     204:	0c 94 83 1e 	jmp	0x3d06	; 0x3d06 <AirPump::refresh_Minute()>
     208:	0c 94 dc 2d 	jmp	0x5bb8	; 0x5bb8 <virtual thunk to Fan_Web::commandEvent(char*, char*)>
     20c:	0c 94 f2 31 	jmp	0x63e4	; 0x63e4 <Sound_Web::commandEvent(char*, char*)>
     210:	0c 94 33 88 	jmp	0x11066	; 0x11066 <HardwareSerial::read()>
     214:	0c 94 1a 87 	jmp	0x10e34	; 0x10e34 <analogWrite+0x1a4>
     218:	0c 94 8d 86 	jmp	0x10d1a	; 0x10d1a <analogWrite+0x8a>
     21c:	0c 94 dd 5f 	jmp	0xbfba	; 0xbfba <ReservoirModule_Web::websiteEvent_Load(char*)>
     220:	0c 94 f9 8a 	jmp	0x115f2	; 0x115f2 <Serial3_available()>
     224:	0c 94 cc 88 	jmp	0x11198	; 0x11198 <HardwareSerial::write(unsigned char)>
     228:	0c 94 39 5c 	jmp	0xb872	; 0xb872 <MainModule::refresh_Minute()>
     22c:	0c 94 a8 4e 	jmp	0x9d50	; 0x9d50 <HempyModule_Web::websiteEvent_Refresh(char*)>
     230:	0c 94 3d 77 	jmp	0xee7a	; 0xee7a <ELClientWebServer::webServerPacketHandler(void*)>
     234:	0c 94 a6 36 	jmp	0x6d4c	; 0x6d4c <virtual thunk to Module_Web::addToLog(__FlashStringHelper const*, unsigned char)>
     238:	0c 94 25 88 	jmp	0x1104a	; 0x1104a <HardwareSerial::peek()>
     23c:	0c 94 38 59 	jmp	0xb270	; 0xb270 <HempyModule_Web::report(bool)>
     240:	0c 94 ed 20 	jmp	0x41da	; 0x41da <Fan::refresh_Minute()>
     244:	0c 94 2f 64 	jmp	0xc85e	; 0xc85e <ReservoirModule_Web::refresh_FiveSec()>
     248:	0c 94 c2 13 	jmp	0x2784	; 0x2784 <runSec()>
     24c:	0c 94 ee 11 	jmp	0x23dc	; 0x23dc <buttonCallback(char*)>
     250:	0c 94 c9 2f 	jmp	0x5f92	; 0x5f92 <Lights_Web::commandEvent(char*, char*)>
     254:	0c 94 b6 40 	jmp	0x816c	; 0x816c <virtual thunk to Module_Web::refresh_FiveSec()>
     258:	0c 94 d3 5f 	jmp	0xbfa6	; 0xbfa6 <virtual thunk to MainModule::report(bool)>
     25c:	0c 94 b2 35 	jmp	0x6b64	; 0x6b64 <toText_aeroTankState(AeroTankStates)+0x5e>
     260:	0c 94 4a 64 	jmp	0xc894	; 0xc894 <_GLOBAL__sub_I_ReservoirModuleCommand1ToSend>
     264:	0c 94 d9 86 	jmp	0x10db2	; 0x10db2 <analogWrite+0x122>
     268:	0c 94 3b 1f 	jmp	0x3e76	; 0x3e76 <DHTSensor::report(bool)>
     26c:	0c 94 7b 87 	jmp	0x10ef6	; 0x10ef6 <turnOffPWM+0xb8>
     270:	0c 94 43 2c 	jmp	0x5886	; 0x5886 <Common_Web::commandEvent(char*, char*)>
     274:	0c 94 37 2c 	jmp	0x586e	; 0x586e <virtual thunk to Sound::refresh_Sec()>
     278:	0c 94 74 35 	jmp	0x6ae8	; 0x6ae8 <toText_pressurePumpState(PressurePumpStates)+0x46>
     27c:	0c 94 2f 5c 	jmp	0xb85e	; 0xb85e <virtual thunk to MainModule::refresh_FiveSec()>
     280:	0c 94 de 5b 	jmp	0xb7bc	; 0xb7bc <MainModule::websiteEvent_Load(char*)>
     284:	0c 94 6d 87 	jmp	0x10eda	; 0x10eda <turnOffPWM+0x9c>
     288:	0c 94 fc 86 	jmp	0x10df8	; 0x10df8 <analogWrite+0x168>
     28c:	0c 94 82 87 	jmp	0x10f04	; 0x10f04 <turnOffPWM+0xc6>
     290:	0c 94 fe 20 	jmp	0x41fc	; 0x41fc <virtual thunk to Fan::refresh_Minute()>
     294:	0c 94 1a 12 	jmp	0x2434	; 0x2434 <fieldCallback(char*)>
     298:	0c 94 92 58 	jmp	0xb124	; 0xb124 <_GLOBAL__sub_I_HempyModuleCommand1ToSend>
     29c:	0c 94 4d 5c 	jmp	0xb89a	; 0xb89a <virtual thunk to MainModule::refresh_Minute()>
     2a0:	0c 94 22 1a 	jmp	0x3444	; 0x3444 <Module::addToLog(__FlashStringHelper const*, unsigned char)>
     2a4:	0c 94 1c 42 	jmp	0x8438	; 0x8438 <AeroModule_Web::websiteEvent_Load(char*)>
     2a8:	0c 94 03 2a 	jmp	0x5406	; 0x5406 <PowerSensorV3::refresh_FiveSec()>
     2ac:	0c 94 19 11 	jmp	0x2232	; 0x2232 <processTimeCriticalStuff()>
     2b0:	0c 94 d7 4a 	jmp	0x95ae	; 0x95ae <AeroModule_Web::refresh_FiveSec()>
     2b4:	0c 94 65 35 	jmp	0x6aca	; 0x6aca <toText_pressurePumpState(PressurePumpStates)+0x28>
     2b8:	0c 94 14 3d 	jmp	0x7a28	; 0x7a28 <virtual thunk to Module_Web::refresh_Minute()>
     2bc:	0c 94 c0 12 	jmp	0x2580	; 0x2580 <ignoreCallback(char*)>
     2c0:	0c 94 f2 4a 	jmp	0x95e4	; 0x95e4 <_GLOBAL__sub_I_AeroModuleCommand1ToSend>
     2c4:	0c 94 57 33 	jmp	0x66ae	; 0x66ae <non-virtual thunk to Sound_Web::refresh_Sec()>
     2c8:	0c 94 a0 35 	jmp	0x6b40	; 0x6b40 <toText_aeroTankState(AeroTankStates)+0x3a>
     2cc:	0c 94 41 2c 	jmp	0x5882	; 0x5882 <Common_Web::websiteEvent_Load(char*)>
     2d0:	0c 94 08 21 	jmp	0x4210	; 0x4210 <Fan::report(bool)>
     2d4:	0c 94 89 7a 	jmp	0xf512	; 0xf512 <Thread::shouldRun(unsigned long)>
     2d8:	0c 94 88 86 	jmp	0x10d10	; 0x10d10 <analogWrite+0x80>
     2dc:	0c 94 ce 11 	jmp	0x239c	; 0x239c <loadCallback(char*)>
     2e0:	0c 94 a3 30 	jmp	0x6146	; 0x6146 <virtual thunk to Lights_Web::commandEvent(char*, char*)>
     2e4:	0c 94 1a 37 	jmp	0x6e34	; 0x6e34 <virtual thunk to Module_Web::addToLog(char const*, unsigned char)>
     2e8:	0c 94 78 13 	jmp	0x26f0	; 0x26f0 <StaticThreadController<3>::run()>
     2ec:	0c 94 5b 87 	jmp	0x10eb6	; 0x10eb6 <turnOffPWM+0x78>
     2f0:	0c 94 94 1e 	jmp	0x3d28	; 0x3d28 <virtual thunk to AirPump::refresh_Minute()>
     2f4:	0c 94 de 5f 	jmp	0xbfbc	; 0xbfbc <ReservoirModule_Web::websiteEvent_Refresh(char*)>
     2f8:	0c 94 6b 28 	jmp	0x50d6	; 0x50d6 <virtual thunk to Lights::refresh_Minute()>
     2fc:	0c 94 97 35 	jmp	0x6b2e	; 0x6b2e <toText_aeroTankState(AeroTankStates)+0x28>
     300:	0c 94 cd 4a 	jmp	0x959a	; 0x959a <virtual thunk to AeroModule_Web::refresh_Sec()>
     304:	0c 94 af 35 	jmp	0x6b5e	; 0x6b5e <toText_aeroTankState(AeroTankStates)+0x58>
     308:	0c 94 77 35 	jmp	0x6aee	; 0x6aee <toText_pressurePumpState(PressurePumpStates)+0x4c>
     30c:	0c 94 db 4f 	jmp	0x9fb6	; 0x9fb6 <HempyModule_Web::commandEvent(char*, char*)>
     310:	0c 94 fa 30 	jmp	0x61f4	; 0x61f4 <PowerSensorV3_Web::websiteEvent_Refresh(char*)>
     314:	0c 94 df 5b 	jmp	0xb7be	; 0xb7be <MainModule::websiteEvent_Refresh(char*)>
     318:	0c 94 79 16 	jmp	0x2cf2	; 0x2cf2 <serial_putc(char, __file*)>
     31c:	0c 94 71 87 	jmp	0x10ee2	; 0x10ee2 <turnOffPWM+0xa4>
     320:	0c 94 7d 35 	jmp	0x6afa	; 0x6afa <toText_pressurePumpState(PressurePumpStates)+0x58>
     324:	0c 94 81 2d 	jmp	0x5b02	; 0x5b02 <Fan_Web::websiteEvent_Refresh(char*)>
     328:	0c 94 63 12 	jmp	0x24c6	; 0x24c6 <getNtpTime()>
     32c:	0c 94 de 11 	jmp	0x23bc	; 0x23bc <refreshCallback(char*)>
     330:	0c 94 43 87 	jmp	0x10e86	; 0x10e86 <turnOffPWM+0x48>
     334:	0c 94 75 28 	jmp	0x50ea	; 0x50ea <Lights::report(bool)>
     338:	0c 94 84 45 	jmp	0x8b08	; 0x8b08 <virtual thunk to AeroModule_Web::commandEvent(char*, char*)>
     33c:	0c 94 17 23 	jmp	0x462e	; 0x462e <LightSensor::report(bool)>
     340:	0c 94 d4 5b 	jmp	0xb7a8	; 0xb7a8 <virtual thunk to HempyModule_Web::report(bool)>
     344:	0c 94 b5 4a 	jmp	0x956a	; 0x956a <AeroModule_Web::refresh_Sec()>
     348:	0c 94 4c 2a 	jmp	0x5498	; 0x5498 <PowerSensorV3::report(bool)>
     34c:	0c 94 52 1e 	jmp	0x3ca4	; 0x3ca4 <AirPump::report(bool)>
     350:	0c 94 19 88 	jmp	0x11032	; 0x11032 <HardwareSerial::available()>
     354:	0c 94 5b 8f 	jmp	0x11eb6	; 0x11eb6 <__cxa_pure_virtual>
     358:	0c 94 02 3d 	jmp	0x7a04	; 0x7a04 <Module_Web::refresh_Minute()>
     35c:	0c 94 1b 5c 	jmp	0xb836	; 0xb836 <MainModule::refresh_FiveSec()>
     360:	0c 94 40 64 	jmp	0xc880	; 0xc880 <virtual thunk to ReservoirModule_Web::refresh_FiveSec()>
     364:	0c 94 e5 28 	jmp	0x51ca	; 0x51ca <virtual thunk to Lights::report(bool)>
     368:	0c 94 43 12 	jmp	0x2486	; 0x2486 <settingsLoadCallback(char*)>
     36c:	0c 94 fe 2c 	jmp	0x59fc	; 0x59fc <DHTSensor_Web::websiteEvent_Refresh(char*)>
     370:	0c 94 23 4d 	jmp	0x9a46	; 0x9a46 <virtual thunk to HempyModule_Web::refresh_Minute()>
     374:	0c 94 6c 8a 	jmp	0x114d8	; 0x114d8 <_GLOBAL__sub_I___vector_51>
     378:	0c 94 4b 87 	jmp	0x10e96	; 0x10e96 <turnOffPWM+0x58>
     37c:	0c 94 7a 1f 	jmp	0x3ef4	; 0x3ef4 <DHTSensor::refresh_FiveSec()>
     380:	0c 94 6e 35 	jmp	0x6adc	; 0x6adc <toText_pressurePumpState(PressurePumpStates)+0x3a>
     384:	0c 94 a9 35 	jmp	0x6b52	; 0x6b52 <toText_aeroTankState(AeroTankStates)+0x4c>
     388:	0c 94 42 2a 	jmp	0x5484	; 0x5484 <virtual thunk to PowerSensorV3::refresh_FiveSec()>
     38c:	0c 94 14 16 	jmp	0x2c28	; 0x2c28 <_GLOBAL__sub_I__Z11serial_putccP6(float, int, long,...)>
     390:	0c 94 69 87 	jmp	0x10ed2	; 0x10ed2 <turnOffPWM+0x94>
     394:	0c 94 11 5c 	jmp	0xb822	; 0xb822 <virtual thunk to MainModule::commandEvent(char*, char*)>
     398:	0c 94 19 4d 	jmp	0x9a32	; 0x9a32 <HempyModule_Web::refresh_Minute()>
     39c:	0c 94 d8 31 	jmp	0x63b0	; 0x63b0 <Sound_Web::websiteEvent_Load(char*)>
     3a0:	0c 94 2f 2e 	jmp	0x5c5e	; 0x5c5e <LightSensor_Web::websiteEvent_Refresh(char*)>
     3a4:	0c 94 25 5c 	jmp	0xb84a	; 0xb84a <virtual thunk to MainModule::refresh_FiveSec()>
     3a8:	0c 94 71 35 	jmp	0x6ae2	; 0x6ae2 <toText_pressurePumpState(PressurePumpStates)+0x40>
     3ac:	0c 94 b0 36 	jmp	0x6d60	; 0x6d60 <Module_Web::addToLog(char const*, unsigned char)>
     3b0:	0c 94 88 58 	jmp	0xb110	; 0xb110 <virtual thunk to HempyModule_Web::refresh_FiveSec()>
     3b4:	0c 94 bf 11 	jmp	0x237e	; 0x237e <mqttConnected(void*)>
     3b8:	0c 94 b8 18 	jmp	0x3170	; 0x3170 <Common::refresh_Sec()>
     3bc:	0c 94 16 41 	jmp	0x822c	; 0x822c <_GLOBAL__sub_I_ACMotorModuleCommand1ToSend>
     3c0:	0c 94 90 64 	jmp	0xc920	; 0xc920 <ReservoirModule_Web::report(bool)>
     3c4:	0c 94 eb 2e 	jmp	0x5dd6	; 0x5dd6 <Lights_Web::websiteEvent_Load(char*)>
     3c8:	0c 94 62 8a 	jmp	0x114c4	; 0x114c4 <Serial2_available()>
     3cc:	0c 94 a1 86 	jmp	0x10d42	; 0x10d42 <analogWrite+0xb2>
     3d0:	0c 94 2d 4d 	jmp	0x9a5a	; 0x9a5a <HempyModule_Web::websiteEvent_Load(char*)>
     3d4:	0c 94 51 87 	jmp	0x10ea2	; 0x10ea2 <turnOffPWM+0x64>
     3d8:	0c 94 07 5c 	jmp	0xb80e	; 0xb80e <MainModule::commandEvent(char*, char*)>
     3dc:	0c 94 41 36 	jmp	0x6c82	; 0x6c82 <Module_Web::addToLog(__FlashStringHelper const*, unsigned char)>
     3e0:	0c 94 c1 12 	jmp	0x2582	; 0x2582 <mqttReceived(void*)>
     3e4:	0c 94 30 8b 	jmp	0x11660	; 0x11660 <Print::write(unsigned char const*, unsigned int)>
     3e8:	0c 94 4d 28 	jmp	0x509a	; 0x509a <virtual thunk to Lights::refresh_Sec()>
     3ec:	0c 94 3d 87 	jmp	0x10e7a	; 0x10e7a <turnOffPWM+0x3c>
     3f0:	0c 94 57 40 	jmp	0x80ae	; 0x80ae <Module_Web::refresh_FiveSec()>
     3f4:	0c 94 63 41 	jmp	0x82c6	; 0x82c6 <AeroModule_Web::websiteEvent_Refresh(char*)>
     3f8:	0c 94 15 11 	jmp	0x222a	; 0x222a <mqttDisconnected(void*)>
     3fc:	0c 94 a6 35 	jmp	0x6b4c	; 0x6b4c <toText_aeroTankState(AeroTankStates)+0x46>
     400:	0c 94 f2 86 	jmp	0x10de4	; 0x10de4 <analogWrite+0x154>
     404:	0c 94 45 33 	jmp	0x668a	; 0x668a <Sound_Web::refresh_Sec()>
     408:	0c 94 45 2c 	jmp	0x588a	; 0x588a <virtual thunk to Common_Web::commandEvent(char*, char*)>
     40c:	0c 94 cd 18 	jmp	0x319a	; 0x319a <Common::refresh_FiveSec()>
     410:	0c 94 a3 35 	jmp	0x6b46	; 0x6b46 <toText_aeroTankState(AeroTankStates)+0x40>
     414:	0c 94 79 1e 	jmp	0x3cf2	; 0x3cf2 <virtual thunk to AirPump::report(bool)>
     418:	0c 94 6d 58 	jmp	0xb0da	; 0xb0da <virtual thunk to HempyModule_Web::refresh_Sec()>
     41c:	0c 94 06 87 	jmp	0x10e0c	; 0x10e0c <analogWrite+0x17c>
     420:	0c 94 77 87 	jmp	0x10eee	; 0x10eee <turnOffPWM+0xb0>
     424:	0c 94 56 88 	jmp	0x110ac	; 0x110ac <serialEventRun()>
     428:	0c 94 2c 11 	jmp	0x2258	; 0x2258 <resetWebServer()>
     42c:	0c 94 42 2c 	jmp	0x5884	; 0x5884 <Common_Web::websiteEvent_Refresh(char*)>
     430:	0c 94 ac 88 	jmp	0x11158	; 0x11158 <HardwareSerial::flush()>

00000434 <__trampolines_end>:
__trampolines_end():
     434:	4e 41       	sbci	r20, 0x1E	; 30
     436:	4e 49       	Address 0x00000436 is out of bounds.
.word	0xffff	; ????

00000437 <pstr_inity>:
     437:	49 4e 49 54 59                                      INITY

0000043c <pstr_inf>:
     43c:	49 4e 46                                            INF

0000043f <pwr_m10>:
     43f:	cd cc cc 3d 0a d7 23 3c 17 b7 d1 38 77 cc 2b 32     ...=..#<...8w.+2
     44f:	95 95 e6 24 1f b1 4f 0a                             ...$..O.

00000457 <pwr_p10>:
     457:	00 00 20 41 00 00 c8 42 00 40 1c 46 20 bc be 4c     .. A...B.@.F ..L
     467:	ca 1b 0e 5a ae c5 9d 74 00 40 7a 10 f3 5a 00 a0     ...Z...t.@z..Z..
     477:	72 4e 18 09 00 10 a5 d4 e8 00 00 e8 76 48 17 00     rN..........vH..
     487:	00 e4 0b 54 02 00 00 ca 9a 3b 00 00 00 e1 f5 05     ...T.....;......
     497:	00 00 80 96 98 00 00 00 40 42 0f 00 00 00 a0 86     ........@B......
     4a7:	01 00 00 00 10 27 00 00 00 00 e8 03 00 00 00 00     .....'..........
     4b7:	64 00 00 00 00 00 0a 00 00 00 00 00 01 00 00 00     d...............
     4c7:	00 00 2c 76 d8 88 dc 67 4f 08 23 df c1 df ae 59     ..,v...gO.#....Y
     4d7:	e1 b1 b7 96 e5 e3 e4 53 c6 3a e6 51 99 76 96 e8     .......S.:.Q.v..
     4e7:	e6 c2 84 26 eb 89 8c 9b 62 ed 40 7c 6f fc ef bc     ...&....b.@|o...
     4f7:	9c 9f 40 f2 ba a5 6f a5 f4 90 05 5a 2a f7 5c 93     ..@...o....Z*.\.
     507:	6b 6c f9 67 6d c1 1b fc e0 e4 0d 47 fe f5 20 e6     kl.gm......G.. .
     517:	b5 00 d0 ed 90 2e 03 00 94 35 77 05 00 80 84 1e     .........5w.....
     527:	08 00 00 20 4e 0a 00 00 00 c8 0c 33 33 33 33 0f     ... N......3333.
     537:	98 6e 12 83 11 41 ef 8d 21 14 89 3b e6 55 16 cf     .n...A..!..;.U..
     547:	fe e6 db 18 d1 84 4b 38 1b f7 7c 1d 90 1d a4 bb     ......K8..|.....
     557:	e4 24 20 32 84 72 5e 22 81 00 c9 f1 24 ec a1 e5     .$ 2.r^"....$...
     567:	3d 27                                               ='

00000569 <void logToSerials<char*>(char**, bool, unsigned char)::__c>:
     569:	20 00                                                .

0000056b <void logToSerials<char*>(char**, bool, unsigned char)::__c>:
     56b:	20 00                                                .

0000056d <void logToSerials<String>(String*, bool, unsigned char)::__c>:
     56d:	20 00                                                .

0000056f <void logToSerials<String>(String*, bool, unsigned char)::__c>:
     56f:	20 00                                                .

00000571 <getWirelessStatus()::__c>:
	...

00000572 <getWirelessStatus()::__c>:
     572:	57 69 72 65 6c 65 73 73 20 72 65 70 6f 72 74 3a     Wireless report:
	...

00000583 <settingsFieldCallback(char*)::__c>:
     583:	53 65 74 74 69 6e 67 73 20 66 69 65 6c 64 3a 00     Settings field:.

00000593 <settingsButtonCallback(char*)::__c>:
     593:	52 65 73 74 6f 72 65 44 65 66 00                    RestoreDef.

0000059e <settingsButtonCallback(char*)::__c>:
     59e:	53 65 74 74 69 6e 67 73 20 62 75 74 74 6f 6e 3a     Settings button:
	...

000005af <fieldCallback(char*)::__c>:
     5af:	45 53 50 20 66 69 65 6c 64 3a 00                    ESP field:.

000005ba <buttonCallback(char*)::__c>:
     5ba:	52 65 73 74 6f 72 65 44 65 66 00                    RestoreDef.

000005c5 <buttonCallback(char*)::__c>:
     5c5:	45 53 50 20 62 75 74 74 6f 6e 3a 00                 ESP button:.

000005d1 <getNtpTime()::__c>:
     5d1:	73 79 6e 63 68 72 6f 6e 69 7a 65 64 00              synchronized.

000005de <getNtpTime()::__c>:
     5de:	73 79 6e 63 20 66 61 69 6c 65 64 00                 sync failed.

000005ea <getNtpTime()::__c>:
     5ea:	2e 00                                               ..

000005ec <getNtpTime()::__c>:
     5ec:	57 61 69 74 69 6e 67 20 66 6f 72 20 4e 54 50 20     Waiting for NTP 
     5fc:	74 69 6d 65 00                                      time.

00000601 <mqttReceived(void*)::__c>:
     601:	4d 51 54 54 00                                      MQTT.

00000606 <resetWebServer()::__c>:
     606:	45 53 50 2d 6c 69 6e 6b 20 72 65 61 64 79 00        ESP-link ready.

00000615 <resetWebServer()::__c>:
     615:	50 75 73 68 69 6e 67 42 6f 78 20 52 65 73 74 41     PushingBox RestA
     625:	50 49 20 66 61 69 6c 65 64 00                       PI failed.

0000062f <resetWebServer()::__c>:
     62f:	50 75 73 68 69 6e 67 42 6f 78 20 52 65 73 74 41     PushingBox RestA
     63f:	50 49 20 72 65 61 64 79 00                          PI ready.

00000648 <resetWebServer()::__c>:
	...

00000649 <resetWebServer()::__c>:
     649:	2e 00                                               ..

0000064b <resetWebServer()::__c>:
     64b:	28 72 65 29 43 6f 6e 6e 65 63 74 69 6e 67 20 45     (re)Connecting E
     65b:	53 50 2d 6c 69 6e 6b 00                             SP-link.

00000663 <_ZZ5setupE3__c__11_>:
     663:	53 65 74 75 70 20 72 65 61 64 79 2c 20 73 74 61     Setup ready, sta
     673:	72 74 69 6e 67 20 6c 6f 6f 70 73 3a 00              rting loops:.

00000680 <_ZZ5setupE3__c__10_>:
     680:	4d 61 69 6e 31 00                                   Main1.

00000686 <setup::__c>:
     686:	43 72 65 61 74 69 6e 67 20 4d 61 69 6e 20 6d 6f     Creating Main mo
     696:	64 75 6c 65 00                                      dule.

0000069b <setup::__c>:
     69b:	64 6f 6e 65 00                                      done.

000006a0 <setup::__c>:
     6a0:	53 65 74 74 69 6e 67 20 75 70 20 77 69 72 65 6c     Setting up wirel
     6b0:	65 73 73 20 74 72 61 6e 73 63 65 69 76 65 72 00     ess transceiver.

000006c0 <setup::__c>:
     6c0:	64 6f 6e 65 00                                      done.

000006c5 <setup::__c>:
     6c5:	53 65 74 74 69 6e 67 20 75 70 20 69 6e 74 65 72     Setting up inter
     6d5:	72 75 70 74 20 68 61 6e 64 6c 65 72 00              rupt handler.

000006e2 <setup::__c>:
     6e2:	64 6f 6e 65 00                                      done.

000006e7 <setup::__c>:
     6e7:	53 65 74 74 69 6e 67 20 75 70 20 72 65 66 72 65     Setting up refre
     6f7:	73 68 20 74 68 72 65 61 64 73 00                    sh threads.

00000702 <setup::__c>:
     702:	53 65 74 74 69 6e 67 20 75 70 20 45 53 50 2d 6c     Setting up ESP-l
     712:	69 6e 6b 20 63 6f 6e 6e 65 63 74 69 6f 6e 00        ink connection.

00000721 <setup::__c>:
     721:	4c 6f 61 64 69 6e 67 20 73 65 74 74 69 6e 67 73     Loading settings
	...

00000732 <setup::__c>:
     732:	4d 61 69 6e 20 6d 6f 64 75 6c 65 20 69 6e 69 74     Main module init
     742:	69 61 6c 69 7a 69 6e 67 00                          ializing.

0000074b <setup::__c>:
	...

0000074c <logToSerials(__FlashStringHelper const*, bool, unsigned char)::__c>:
     74c:	20 00                                                .

0000074e <logToSerials(__FlashStringHelper const*, bool, unsigned char)::__c>:
     74e:	20 00                                                .

00000750 <void logToSerials<unsigned char>(unsigned char&, bool, unsigned char)::__c>:
     750:	20 00                                                .

00000752 <void logToSerials<unsigned char>(unsigned char&, bool, unsigned char)::__c>:
     752:	20 00                                                .

00000754 <restoreDefaults()::__c>:
     754:	52 65 73 65 74 69 6e 67 20 74 68 65 20 73 6b 65     Reseting the ske
     764:	74 63 68 00                                         tch.

00000768 <restoreDefaults()::__c>:
     768:	46 6f 72 63 69 6e 67 20 73 65 74 74 69 6e 67 73     Forcing settings
     778:	20 75 70 64 61 74 65 20 61 74 20 6e 65 78 74 20      update at next 
     788:	72 65 73 74 61 72 74 00                             restart.

00000790 <loadSettings(bool)::__c>:
     790:	56 65 72 73 69 6f 6e 00                             Version.

00000798 <loadSettings(bool)::__c>:
     798:	41 70 70 6c 79 69 6e 67 20 45 45 50 52 4f 4d 20     Applying EEPROM 
     7a8:	73 65 74 74 69 6e 67 73 00                          settings.

000007b1 <loadSettings(bool)::__c>:
     7b1:	55 70 64 61 74 69 6e 67 20 45 45 50 52 4f 4d 00     Updating EEPROM.

000007c1 <void logToSerials<char const>(char const*, bool, unsigned char)::__c>:
     7c1:	20 00                                                .

000007c3 <void logToSerials<char const>(char const*, bool, unsigned char)::__c>:
     7c3:	20 00                                                .

000007c5 <Common::getName(char*, bool)::__c>:
     7c5:	20 00                                                .

000007c7 <Common::getName(char*, bool)::__c>:
     7c7:	5f 00                                               _.

000007c9 <Common::getName(__FlashStringHelper const*, bool)::__c>:
     7c9:	20 00                                                .

000007cb <Common::getName(__FlashStringHelper const*, bool)::__c>:
     7cb:	5f 00                                               _.

000007cd <Common::isThisMine(char const*)::__c>:
     7cd:	54 6f 6f 20 6c 6f 6e 67 3a 00                       Too long:.

000007d7 <Common::refresh_Minute()::__c>:
     7d7:	2d 20 31 6d 69 6e 00                                - 1min.

000007de <Common::refresh_FiveSec()::__c>:
     7de:	2d 20 35 73 65 63 00                                - 5sec.

000007e5 <Common::refresh_Sec()::__c>:
     7e5:	2d 20 31 73 65 63 00                                - 1sec.

000007ec <Common::report(bool)::__c>:
     7ec:	22 3a 7b 00                                         ":{.

000007f0 <Common::report(bool)::__c>:
     7f0:	22 00                                               ".

000007f2 <Common::Common(__FlashStringHelper const*)::__c>:
     7f2:	49 6e 69 74 69 61 6c 69 7a 69 6e 67 00              Initializing.

000007ff <void logToSerials<__FlashStringHelper const*>(__FlashStringHelper const**, bool, unsigned char)::__c>:
     7ff:	20 00                                                .

00000801 <void logToSerials<__FlashStringHelper const*>(__FlashStringHelper const**, bool, unsigned char)::__c>:
     801:	20 00                                                .

00000803 <void logToSerials<char const*>(char const**, bool, unsigned char)::__c>:
     803:	20 00                                                .

00000805 <void logToSerials<char const*>(char const**, bool, unsigned char)::__c>:
     805:	20 00                                                .

00000807 <void logToSerials<char [1024]>(char (*) [1024], bool, unsigned char)::__c>:
     807:	20 00                                                .

00000809 <void logToSerials<char [1024]>(char (*) [1024], bool, unsigned char)::__c>:
     809:	20 00                                                .

0000080b <Module::addToRefreshQueue_Minute(Common*)::__c>:
     80b:	52 65 66 72 65 73 68 20 31 6d 20 4f 46 00           Refresh 1m OF.

00000819 <Module::addToRefreshQueue_FiveSec(Common*)::__c>:
     819:	52 65 66 72 65 73 68 20 35 73 20 4f 46 00           Refresh 5s OF.

00000827 <Module::addToRefreshQueue_Sec(Common*)::__c>:
     827:	52 65 66 72 65 73 68 20 31 73 20 4f 46 00           Refresh 1s OF.

00000835 <Module::addToReportQueue(Common*)::__c>:
     835:	52 65 70 6f 72 74 20 4f 46 00                       Report OF.

0000083f <Module::runMinute()::__c>:
     83f:	31 6d 69 6e 00                                      1min.

00000844 <Module::runFiveSec()::__c>:
     844:	35 73 65 63 00                                      5sec.

00000849 <Module::runSec()::__c>:
     849:	31 73 65 63 00                                      1sec.

0000084e <Module::runReport(bool, bool, bool, bool)::__c>:
     84e:	7d 7d 00                                            }}.

00000851 <Module::runReport(bool, bool, bool, bool)::__c>:
     851:	2c 00                                               ,.

00000853 <Module::runReport(bool, bool, bool, bool)::__c>:
     853:	7b 22 4c 6f 67 22 3a 7b 00                          {"Log":{.

0000085c <AirPump::report(bool)::__c>:
     85c:	22 7d 00                                            "}.

0000085f <AirPump::report(bool)::__c>:
     85f:	22 53 22 3a 22 00                                   "S":".

00000865 <AirPump::AirPump(__FlashStringHelper const*, Module*, Settings::AirPumpSettings*)::__c>:
     865:	41 69 72 50 75 6d 70 20 72 65 61 64 79 00           AirPump ready.

00000873 <DHTSensor::report(bool)::__c>:
     873:	22 7d 00                                            "}.

00000876 <DHTSensor::report(bool)::__c>:
     876:	22 2c 22 48 22 3a 22 00                             ","H":".

0000087e <DHTSensor::report(bool)::__c>:
     87e:	22 54 22 3a 22 00                                   "T":".

00000884 <DHTSensor::DHTSensor(__FlashStringHelper const*, Module*, Settings::DHTSensorSettings*)::__c>:
     884:	44 48 54 53 65 6e 73 6f 72 20 72 65 61 64 79 00     DHTSensor ready.

00000894 <Fan::report(bool)::__c>:
     894:	22 7d 00                                            "}.

00000897 <Fan::report(bool)::__c>:
     897:	22 53 22 3a 22 00                                   "S":".

0000089d <Fan::Fan(__FlashStringHelper const*, Module*, Settings::FanSettings*)::__c>:
     89d:	46 61 6e 20 72 65 61 64 79 00                       Fan ready.

000008a7 <LightSensor::getReadingText(bool)::__c>:
     8a7:	2d 44 41 59 00                                      -DAY.

000008ac <LightSensor::getReadingText(bool)::__c>:
     8ac:	2d 4e 49 47 48 54 00                                -NIGHT.

000008b3 <LightSensor::getCalibrationReadings()::__c>:
     8b3:	7d 00                                               }.

000008b5 <LightSensor::getCalibrationReadings()::__c>:
     8b5:	2c 00                                               ,.

000008b7 <LightSensor::getCalibrationReadings()::__c>:
     8b7:	7b 22 52 65 61 64 69 6e 67 73 22 3a 5b 00           {"Readings":[.

000008c5 <LightSensor::calibrate(bool)::__c>:
     8c5:	63 61 6c 69 62 72 61 74 65 64 00                    calibrated.

000008d0 <LightSensor::triggerCalibration()::__c>:
     8d0:	63 61 6c 69 62 72 61 74 69 6e 67 00                 calibrating.

000008dc <LightSensor::report(bool)::__c>:
     8dc:	22 7d 00                                            "}.

000008df <LightSensor::report(bool)::__c>:
     8df:	22 2c 22 44 22 3a 22 00                             ","D":".

000008e7 <LightSensor::report(bool)::__c>:
     8e7:	22 52 22 3a 22 00                                   "R":".

000008ed <LightSensor::LightSensor(__FlashStringHelper const*, Module*, Settings::LightSensorSettings*, Lights*)::__c>:
     8ed:	4c 69 67 68 74 53 65 6e 73 6f 72 20 72 65 61 64     LightSensor read
     8fd:	79 00                                               y.

000008ff <Lights::setOffMinute(unsigned char)::__c>:
     8ff:	4f 46 46 20 74 69 6d 65 20 75 70 64 61 74 65 64     OFF time updated
	...

00000910 <Lights::setOnMinute(unsigned char)::__c>:
     910:	4f 4e 20 74 69 6d 65 20 75 70 64 61 74 65 64 00     ON time updated.

00000920 <Lights::setTimerOnOff(bool)::__c>:
     920:	74 69 6d 65 72 20 4f 46 46 00                       timer OFF.

0000092a <Lights::setTimerOnOff(bool)::__c>:
     92a:	74 69 6d 65 72 20 4f 4e 00                          timer ON.

00000933 <Lights::getCurrentBrightnessText(bool)::__c>:
     933:	25 00                                               %.

00000935 <Lights::getBrightnessText(bool)::__c>:
     935:	25 00                                               %.

00000937 <Lights::setDimDuration(int)::__c>:
     937:	64 69 6d 6d 69 6e 67 20 75 70 64 61 74 65 64 00     dimming updated.

00000947 <Lights::setBrightness(unsigned char, bool, bool)::__c>:
     947:	62 72 69 67 68 74 6e 65 73 73 20 75 70 64 61 74     brightness updat
     957:	65 64 00                                            ed.

0000095a <Lights::dimLightsOnOff()::__c>:
     95a:	64 69 6d 6d 69 6e 67 20 4f 4e 00                    dimming ON.

00000965 <Lights::dimLightsOnOff()::__c>:
     965:	64 69 6d 6d 69 6e 67 20 4f 46 46 00                 dimming OFF.

00000971 <Lights::report(bool)::__c>:
     971:	22 7d 00                                            "}.

00000974 <Lights::report(bool)::__c>:
     974:	22 2c 22 4f 66 22 3a 22 00                          ","Of":".

0000097d <Lights::report(bool)::__c>:
     97d:	22 2c 22 4f 6e 22 3a 22 00                          ","On":".

00000986 <Lights::report(bool)::__c>:
     986:	22 2c 22 54 22 3a 22 00                             ","T":".

0000098e <Lights::report(bool)::__c>:
     98e:	22 2c 22 42 22 3a 22 00                             ","B":".

00000996 <Lights::report(bool)::__c>:
     996:	22 2c 22 43 42 22 3a 22 00                          ","CB":".

0000099f <Lights::report(bool)::__c>:
     99f:	22 53 22 3a 22 00                                   "S":".

000009a5 <Lights::Lights(__FlashStringHelper const*, Module*, Settings::LightsSettings*)::__c>:
     9a5:	4c 69 67 68 74 73 20 72 65 61 64 79 00              Lights ready.

000009b2 <PowerSensorV3::getFrequencyText(bool)::__c>:
     9b2:	48 7a 00                                            Hz.

000009b5 <PowerSensorV3::getCurrentText(bool)::__c>:
     9b5:	41 00                                               A.

000009b7 <PowerSensorV3::getVoltageText(bool)::__c>:
     9b7:	56 00                                               V.

000009b9 <PowerSensorV3::getEnergyText(bool)::__c>:
     9b9:	6b 57 68 00                                         kWh.

000009bd <PowerSensorV3::getPowerText(bool)::__c>:
     9bd:	57 00                                               W.

000009bf <PowerSensorV3::report(bool)::__c>:
     9bf:	22 7d 00                                            "}.

000009c2 <PowerSensorV3::report(bool)::__c>:
     9c2:	22 2c 22 50 46 22 3a 22 00                          ","PF":".

000009cb <PowerSensorV3::report(bool)::__c>:
     9cb:	22 2c 22 46 22 3a 22 00                             ","F":".

000009d3 <PowerSensorV3::report(bool)::__c>:
     9d3:	22 2c 22 43 22 3a 22 00                             ","C":".

000009db <PowerSensorV3::report(bool)::__c>:
     9db:	22 2c 22 56 22 3a 22 00                             ","V":".

000009e3 <PowerSensorV3::report(bool)::__c>:
     9e3:	22 2c 22 45 22 3a 22 00                             ","E":".

000009eb <PowerSensorV3::report(bool)::__c>:
     9eb:	22 50 22 3a 22 00                                   "P":".

000009f1 <PowerSensorV3::PowerSensorV3(__FlashStringHelper const*, Module*, HardwareSerial*)::__c>:
     9f1:	50 6f 77 65 72 53 65 6e 73 6f 72 56 33 20 72 65     PowerSensorV3 re
     a01:	61 64 79 00                                         ady.

00000a05 <Sound::report(bool)::__c>:
     a05:	22 7d 00                                            "}.

00000a08 <Sound::report(bool)::__c>:
     a08:	22 53 22 3a 22 00                                   "S":".

00000a0e <Sound::Sound(__FlashStringHelper const*, Module*, Settings::SoundSettings*)::__c>:
     a0e:	53 6f 75 6e 64 20 72 65 61 64 79 00                 Sound ready.

00000a1a <AirPump_Web::commandEvent(char*, char*)::__c>:
     a1a:	53 00                                               S.

00000a1c <AirPump_Web::commandEvent(char*, char*)::__c>:
     a1c:	4f 66 00                                            Of.

00000a1f <AirPump_Web::commandEvent(char*, char*)::__c>:
     a1f:	4f 6e 00                                            On.

00000a22 <AirPump_Web::websiteEvent_Refresh(char*)::__c>:
     a22:	53 00                                               S.

00000a24 <DHTSensor_Web::websiteEvent_Refresh(char*)::__c>:
     a24:	48 00                                               H.

00000a26 <DHTSensor_Web::websiteEvent_Refresh(char*)::__c>:
     a26:	54 00                                               T.

00000a28 <Fan_Web::commandEvent(char*, char*)::__c>:
     a28:	48 00                                               H.

00000a2a <Fan_Web::commandEvent(char*, char*)::__c>:
     a2a:	4c 00                                               L.

00000a2c <Fan_Web::commandEvent(char*, char*)::__c>:
     a2c:	4f 00                                               O.

00000a2e <Fan_Web::websiteEvent_Refresh(char*)::__c>:
     a2e:	53 00                                               S.

00000a30 <LightSensor_Web::commandEvent(char*, char*)::__c>:
     a30:	43 00                                               C.

00000a32 <LightSensor_Web::websiteEvent_Refresh(char*)::__c>:
     a32:	52 00                                               R.

00000a34 <LightSensor_Web::websiteEvent_Refresh(char*)::__c>:
     a34:	44 00                                               D.

00000a36 <_ZZN10Lights_Web12commandEventEPcS0_E3__c__11_>:
     a36:	44 44 00                                            DD.

00000a39 <_ZZN10Lights_Web12commandEventEPcS0_E3__c__10_>:
     a39:	4f 66 4d 00                                         OfM.

00000a3d <Lights_Web::commandEvent(char*, char*)::__c>:
     a3d:	4f 66 48 00                                         OfH.

00000a41 <Lights_Web::commandEvent(char*, char*)::__c>:
     a41:	4f 6e 4d 00                                         OnM.

00000a45 <Lights_Web::commandEvent(char*, char*)::__c>:
     a45:	4f 6e 48 00                                         OnH.

00000a49 <Lights_Web::commandEvent(char*, char*)::__c>:
     a49:	42 00                                               B.

00000a4b <Lights_Web::commandEvent(char*, char*)::__c>:
     a4b:	44 00                                               D.

00000a4d <Lights_Web::commandEvent(char*, char*)::__c>:
     a4d:	54 00                                               T.

00000a4f <Lights_Web::commandEvent(char*, char*)::__c>:
     a4f:	54 4f 66 00                                         TOf.

00000a53 <Lights_Web::commandEvent(char*, char*)::__c>:
     a53:	54 4f 6e 00                                         TOn.

00000a57 <Lights_Web::commandEvent(char*, char*)::__c>:
     a57:	53 00                                               S.

00000a59 <Lights_Web::commandEvent(char*, char*)::__c>:
     a59:	4f 66 00                                            Of.

00000a5c <Lights_Web::commandEvent(char*, char*)::__c>:
     a5c:	4f 6e 00                                            On.

00000a5f <Lights_Web::websiteEvent_Refresh(char*)::__c>:
     a5f:	54 00                                               T.

00000a61 <Lights_Web::websiteEvent_Refresh(char*)::__c>:
     a61:	42 72 00                                            Br.

00000a64 <Lights_Web::websiteEvent_Refresh(char*)::__c>:
     a64:	53 00                                               S.

00000a66 <Lights_Web::websiteEvent_Load(char*)::__c>:
     a66:	42 00                                               B.

00000a68 <Lights_Web::websiteEvent_Load(char*)::__c>:
     a68:	4f 66 4d 00                                         OfM.

00000a6c <Lights_Web::websiteEvent_Load(char*)::__c>:
     a6c:	4f 66 48 00                                         OfH.

00000a70 <Lights_Web::websiteEvent_Load(char*)::__c>:
     a70:	4f 6e 4d 00                                         OnM.

00000a74 <Lights_Web::websiteEvent_Load(char*)::__c>:
     a74:	4f 6e 48 00                                         OnH.

00000a78 <PowerSensorV3_Web::websiteEvent_Refresh(char*)::__c>:
     a78:	50 46 00                                            PF.

00000a7b <PowerSensorV3_Web::websiteEvent_Refresh(char*)::__c>:
     a7b:	46 00                                               F.

00000a7d <PowerSensorV3_Web::websiteEvent_Refresh(char*)::__c>:
     a7d:	43 00                                               C.

00000a7f <PowerSensorV3_Web::websiteEvent_Refresh(char*)::__c>:
     a7f:	56 00                                               V.

00000a81 <PowerSensorV3_Web::websiteEvent_Refresh(char*)::__c>:
     a81:	45 00                                               E.

00000a83 <PowerSensorV3_Web::websiteEvent_Refresh(char*)::__c>:
     a83:	50 00                                               P.

00000a85 <Sound_Web::tempo>:
     a85:	0c 0c 0c 0c 0c 0c 0c 0c 0c 0c 0c 0c 0c 0c 0c 0c     ................
     a95:	0c 0c 0c 0c 0c 0c 0c 0c 0c 0c 0c 0c 0c 0c 0c 0c     ................
     aa5:	09 09 09 0c 0c 0c 0c 0c 0c 0c 0c 0c 0c 0c 0c 0c     ................
     ab5:	0c 0c 0c 0c 0c 0c 0c 0c 0c 0c 0c 0c 0c 0c 0c 09     ................
     ac5:	09 09 0c 0c 0c 0c 0c 0c 0c 0c 0c 0c 0c 0c 1e 1e     ................
     ad5:	1e 0c 0c 0c 0c 0c 0c 06 03 0c 0c 0c 0c 0c 0c 06     ................
     ae5:	03 0c 0c 0c 0c 0c 0c 06 03 0c 0c 0c 0c 0c 0c 06     ................
     af5:	06 12 12 12 06 06 06 06 06 06 12 12 12 12 12 12     ................
     b05:	0a 0a 0a 0a 0a 0a                                   ......

00000b0b <Sound_Web::melody>:
     b0b:	4d 0a 4d 0a 00 00 4d 0a 00 00 2d 08 4d 0a 00 00     M.M...M...-.M...
     b1b:	40 0c 00 00 00 00 00 00 20 06 00 00 00 00 00 00     @....... .......
     b2b:	2d 08 00 00 00 00 20 06 00 00 00 00 27 05 00 00     -..... .....'...
     b3b:	00 00 e0 06 00 00 b8 07 00 00 49 07 e0 06 00 00     ..........I.....
     b4b:	20 06 4d 0a 40 0c c0 0d 00 00 ea 0a 40 0c 00 00      .M.@.......@...
     b5b:	4d 0a 00 00 2d 08 2d 09 b8 07 00 00 00 00 2d 08     M...-.-.......-.
     b6b:	00 00 00 00 20 06 00 00 00 00 27 05 00 00 00 00     .... .....'.....
     b7b:	e0 06 00 00 b8 07 00 00 49 07 e0 06 00 00 20 06     ........I..... .
     b8b:	4d 0a 40 0c c0 0d 00 00 ea 0a 40 0c 00 00 4d 0a     M.@.......@...M.
     b9b:	00 00 2d 08 2d 09 b8 07 00 00 00 00 00 00 00 00     ..-.-...........
     bab:	00 00 06 01 0b 02 dc 00 b8 01 e9 00 d2 01 00 00     ................
     bbb:	00 00 06 01 0b 02 dc 00 b8 01 e9 00 d2 01 00 00     ................
     bcb:	00 00 af 00 5d 01 93 00 26 01 9c 00 37 01 00 00     ....]...&...7...
     bdb:	00 00 af 00 5d 01 93 00 26 01 9c 00 37 01 00 00     ....]...&...7...
     beb:	00 00 37 01 15 01 26 01 15 01 37 01 37 01 d0 00     ..7...&...7.7...
     bfb:	c4 00 15 01 06 01 72 01 5d 01 a5 00 d2 01 b8 01     ......r.].......
     c0b:	9f 01 37 01 f7 00 e9 00 dc 00 d0 00                 ..7.........

00000c17 <Sound_Web::EE()::__c>:
     c17:	e2 99 ac 45 61 73 74 65 72 20 65 67 67 e2 99 ac     ...Easter egg...
	...

00000c28 <Sound_Web::commandEvent(char*, char*)::__c>:
     c28:	45 65 00                                            Ee.

00000c2b <Sound_Web::commandEvent(char*, char*)::__c>:
     c2b:	45 00                                               E.

00000c2d <Sound_Web::websiteEvent_Load(char*)::__c>:
     c2d:	45 00                                               E.

00000c2f <void logToSerials<char [128]>(char (*) [128], bool, unsigned char)::__c>:
     c2f:	20 00                                                .

00000c31 <void logToSerials<char [128]>(char (*) [128], bool, unsigned char)::__c>:
     c31:	20 00                                                .

00000c33 <toText_lightState(LightStates)::__c>:
     c33:	3f 00                                               ?.

00000c35 <toText_lightState(LightStates)::__c>:
     c35:	44 49 4d 4d 45 44 00                                DIMMED.

00000c3c <toText_lightState(LightStates)::__c>:
     c3c:	46 41 44 45 4f 55 54 00                             FADEOUT.

00000c44 <toText_lightState(LightStates)::__c>:
     c44:	46 41 44 45 49 4e 00                                FADEIN.

00000c4b <toText_lightState(LightStates)::__c>:
     c4b:	4f 4e 00                                            ON.

00000c4e <toText_lightState(LightStates)::__c>:
     c4e:	4f 46 46 00                                         OFF.

00000c52 <toText_hempyState(HempyStates)::__c>:
     c52:	3f 00                                               ?.

00000c54 <toText_hempyState(HempyStates)::__c>:
     c54:	44 52 41 49 4e 49 4e 47 00                          DRAINING.

00000c5d <toText_hempyState(HempyStates)::__c>:
     c5d:	57 41 54 45 52 49 4e 47 00                          WATERING.

00000c66 <toText_hempyState(HempyStates)::__c>:
     c66:	49 44 4c 45 00                                      IDLE.

00000c6b <toText_hempyState(HempyStates)::__c>:
     c6b:	44 49 53 41 42 4c 45 44 00                          DISABLED.

00000c74 <toText_aeroNoTankState(AeroNoTankStates)::__c>:
     c74:	3f 00                                               ?.

00000c76 <toText_aeroNoTankState(AeroNoTankStates)::__c>:
     c76:	4d 49 58 00                                         MIX.

00000c7a <toText_aeroNoTankState(AeroNoTankStates)::__c>:
     c7a:	52 45 4c 45 41 53 45 00                             RELEASE.

00000c82 <toText_aeroNoTankState(AeroNoTankStates)::__c>:
     c82:	53 50 52 41 59 00                                   SPRAY.

00000c88 <toText_aeroNoTankState(AeroNoTankStates)::__c>:
     c88:	49 44 4c 45 00                                      IDLE.

00000c8d <toText_aeroNoTankState(AeroNoTankStates)::__c>:
     c8d:	50 52 49 4d 49 4e 47 00                             PRIMING.

00000c95 <toText_aeroNoTankState(AeroNoTankStates)::__c>:
     c95:	44 49 53 41 42 4c 45 44 00                          DISABLED.

00000c9e <toText_aeroTankState(AeroTankStates)::__c>:
     c9e:	3f 00                                               ?.

00000ca0 <toText_aeroTankState(AeroTankStates)::__c>:
     ca0:	4d 49 58 00                                         MIX.

00000ca4 <toText_aeroTankState(AeroTankStates)::__c>:
     ca4:	44 52 41 49 4e 00                                   DRAIN.

00000caa <toText_aeroTankState(AeroTankStates)::__c>:
     caa:	52 45 46 49 4c 4c 00                                REFILL.

00000cb1 <toText_aeroTankState(AeroTankStates)::__c>:
     cb1:	52 45 4c 45 41 53 45 00                             RELEASE.

00000cb9 <toText_aeroTankState(AeroTankStates)::__c>:
     cb9:	53 54 4f 50 53 50 52 41 59 00                       STOPSPRAY.

00000cc3 <toText_aeroTankState(AeroTankStates)::__c>:
     cc3:	53 50 52 41 59 00                                   SPRAY.

00000cc9 <toText_aeroTankState(AeroTankStates)::__c>:
     cc9:	49 44 4c 45 00                                      IDLE.

00000cce <toText_aeroTankState(AeroTankStates)::__c>:
     cce:	44 49 53 41 42 4c 45 44 00                          DISABLED.

00000cd7 <toText_pressurePumpState(PressurePumpStates)::__c>:
     cd7:	3f 00                                               ?.

00000cd9 <toText_pressurePumpState(PressurePumpStates)::__c>:
     cd9:	42 59 50 41 53 53 4f 50 45 4e 00                    BYPASSOPEN.

00000ce4 <toText_pressurePumpState(PressurePumpStates)::__c>:
     ce4:	42 59 50 41 53 53 43 4c 4f 53 45 00                 BYPASSCLOSE.

00000cf0 <toText_pressurePumpState(PressurePumpStates)::__c>:
     cf0:	4d 49 58 00                                         MIX.

00000cf4 <toText_pressurePumpState(PressurePumpStates)::__c>:
     cf4:	42 4c 4f 57 4f 46 46 00                             BLOWOFF.

00000cfc <toText_pressurePumpState(PressurePumpStates)::__c>:
     cfc:	52 55 4e 4e 49 4e 47 00                             RUNNING.

00000d04 <toText_pressurePumpState(PressurePumpStates)::__c>:
     d04:	50 52 49 4d 49 4e 47 00                             PRIMING.

00000d0c <toText_pressurePumpState(PressurePumpStates)::__c>:
     d0c:	49 44 4c 45 00                                      IDLE.

00000d11 <toText_pressurePumpState(PressurePumpStates)::__c>:
     d11:	44 49 53 41 42 4c 45 44 00                          DISABLED.

00000d1a <toText_waterPumpState(WaterPumpStates)::__c>:
     d1a:	3f 00                                               ?.

00000d1c <toText_waterPumpState(WaterPumpStates)::__c>:
     d1c:	52 55 4e 4e 49 4e 47 00                             RUNNING.

00000d24 <toText_waterPumpState(WaterPumpStates)::__c>:
     d24:	49 44 4c 45 00                                      IDLE.

00000d29 <toText_waterPumpState(WaterPumpStates)::__c>:
     d29:	44 49 53 41 42 4c 45 44 00                          DISABLED.

00000d32 <toBool(char*)::__c>:
     d32:	79 65 73 00                                         yes.

00000d36 <toBool(char*)::__c>:
     d36:	74 72 75 65 00                                      true.

00000d3b <toBool(char*)::__c>:
     d3b:	31 00                                               1.

00000d3d <toBool(char*)::__c>:
     d3d:	6f 6e 00                                            on.

00000d40 <toText_onlineStatus(bool)::__c>:
     d40:	4f 46 46 4c 49 4e 45 00                             OFFLINE.

00000d48 <toText_onlineStatus(bool)::__c>:
     d48:	4f 4e 4c 49 4e 45 00                                ONLINE.

00000d4f <toText_onOff(bool)::__c>:
     d4f:	4f 46 46 00                                         OFF.

00000d53 <toText_onOff(bool)::__c>:
     d53:	4f 4e 00                                            ON.

00000d56 <toText_enabledDisabled(bool)::__c>:
     d56:	44 49 53 41 42 4c 45 44 00                          DISABLED.

00000d5f <toText_enabledDisabled(bool)::__c>:
     d5f:	45 4e 41 42 4c 45 44 00                             ENABLED.

00000d67 <toText_yesNo(bool)::__c>:
     d67:	4e 4f 00                                            NO.

00000d6a <toText_yesNo(bool)::__c>:
     d6a:	59 45 53 00                                         YES.

00000d6e <toText_TDS(float)::__c>:
     d6e:	70 70 6d 00                                         ppm.

00000d72 <toText_second(int)::__c>:
     d72:	73 65 63 00                                         sec.

00000d76 <toText_percentage(float)::__c>:
     d76:	25 00                                               %.

00000d78 <toText_weight(float)::__c>:
     d78:	6c 62 73 00                                         lbs.

00000d7c <toText_weight(float)::__c>:
     d7c:	6b 67 00                                            kg.

00000d7f <toText_pressure(float)::__c>:
     d7f:	70 73 69 00                                         psi.

00000d83 <toText_pressure(float)::__c>:
     d83:	62 61 72 00                                         bar.

00000d87 <toText_temp(float)::__c>:
     d87:	c2 b0 46 00                                         ..F.

00000d8b <toText_temp(float)::__c>:
     d8b:	c2 b0 43 00                                         ..C.

00000d8f <getFreeMemory()::__c>:
     d8f:	46 72 65 65 20 62 79 74 65 73 3a 00                 Free bytes:.

00000d9b <Module_Web::setMQTTLWTMessage(char const*)::__c>:
     d9b:	4c 57 54 20 6d 65 73 73 61 67 65 20 75 70 64 61     LWT message upda
     dab:	74 65 64 00                                         ted.

00000daf <Module_Web::setMQTTLWTTopic(char const*)::__c>:
     daf:	4c 57 54 20 74 6f 70 69 63 20 75 70 64 61 74 65     LWT topic update
     dbf:	64 00                                               d.

00000dc1 <Module_Web::setMqttSubscribeTopic(char const*)::__c>:
     dc1:	4d 51 54 54 20 73 75 62 73 63 72 69 62 65 20 75     MQTT subscribe u
     dd1:	70 64 61 74 65 64 00                                pdated.

00000dd8 <Module_Web::setMqttPublishTopic(char const*)::__c>:
     dd8:	4d 51 54 54 20 70 75 62 6c 69 73 68 20 75 70 64     MQTT publish upd
     de8:	61 74 65 64 00                                      ated.

00000ded <Module_Web::setMQTTReportingFrequency(unsigned int)::__c>:
     ded:	4d 51 54 54 20 66 72 65 71 65 6e 63 79 20 75 70     MQTT freqency up
     dfd:	64 61 74 65 64 00                                   dated.

00000e03 <Module_Web::setMQTTReportingOnOff(bool)::__c>:
     e03:	4d 51 54 54 20 4f 46 46 00                          MQTT OFF.

00000e0c <Module_Web::setMQTTReportingOnOff(bool)::__c>:
     e0c:	4d 51 54 54 20 4f 4e 00                             MQTT ON.

00000e14 <Module_Web::setPushingBoxLogRelayID(char const*)::__c>:
     e14:	53 68 65 65 74 73 20 6c 6f 67 20 72 65 6c 61 79     Sheets log relay
     e24:	20 49 44 20 75 70 64 61 74 65 64 00                  ID updated.

00000e30 <Module_Web::setSheetsReportingFrequency(unsigned int)::__c>:
     e30:	53 68 65 65 74 73 20 66 72 65 71 65 6e 63 79 20     Sheets freqency 
     e40:	75 70 64 61 74 65 64 00                             updated.

00000e48 <Module_Web::setSheetsReportingOnOff(bool)::__c>:
     e48:	53 68 65 65 74 73 20 4f 46 46 00                    Sheets OFF.

00000e53 <Module_Web::setSheetsReportingOnOff(bool)::__c>:
     e53:	53 68 65 65 74 73 20 4f 4e 00                       Sheets ON.

00000e5d <Module_Web::setMetric(bool)::__c>:
     e5d:	55 73 69 6e 67 20 49 6d 70 65 72 69 61 6c 20 75     Using Imperial u
     e6d:	6e 69 74 73 00                                      nits.

00000e72 <Module_Web::setMetric(bool)::__c>:
     e72:	55 73 69 6e 67 20 4d 65 74 72 69 63 20 75 6e 69     Using Metric uni
     e82:	74 73 00                                            ts.

00000e85 <Module_Web::setDebug(bool)::__c>:
     e85:	44 65 62 75 67 20 4f 46 46 00                       Debug OFF.

00000e8f <Module_Web::setDebug(bool)::__c>:
     e8f:	44 65 62 75 67 20 4f 4e 00                          Debug ON.

00000e98 <Module_Web::mqttPublish(char (*) [1024])::__c>:
     e98:	4d 51 54 54 20 62 72 6f 6b 65 72 20 6e 6f 74 20     MQTT broker not 
     ea8:	63 6f 6e 6e 65 63 74 65 64 00                       connected.

00000eb2 <Module_Web::mqttPublish(char (*) [1024])::__c>:
     eb2:	4d 51 54 54 20 72 65 70 6f 72 74 69 6e 67 3a 00     MQTT reporting:.

00000ec2 <Module_Web::relayToGoogleSheets(char (*) [1024])::__c>:
     ec2:	52 45 53 54 20 41 50 49 20 72 65 70 6f 72 74 69     REST API reporti
     ed2:	6e 67 3a 20 61 70 69 2e 70 75 73 68 69 6e 67 62     ng: api.pushingb
     ee2:	6f 78 2e 63 6f 6d 00                                ox.com.

00000ee9 <Module_Web::addPushingBoxLogRelayID()::__c>:
     ee9:	26 42 6f 78 44 61 74 61 3d 00                       &BoxData=.

00000ef3 <Module_Web::addPushingBoxLogRelayID()::__c>:
     ef3:	2f 70 75 73 68 69 6e 67 62 6f 78 3f 64 65 76 69     /pushingbox?devi
     f03:	64 3d 00                                            d=.

00000f06 <_ZZN10Module_Web21settingsEvent_CommandEPcS0_E3__c__25_>:
     f06:	45 65 00                                            Ee.

00000f09 <_ZZN10Module_Web21settingsEvent_CommandEPcS0_E3__c__24_>:
     f09:	45 00                                               E.

00000f0b <_ZZN10Module_Web21settingsEvent_CommandEPcS0_E3__c__23_>:
     f0b:	4d 4c 4d 00                                         MLM.

00000f0f <_ZZN10Module_Web21settingsEvent_CommandEPcS0_E3__c__22_>:
     f0f:	4d 4c 54 00                                         MLT.

00000f13 <_ZZN10Module_Web21settingsEvent_CommandEPcS0_E3__c__21_>:
     f13:	4d 53 54 00                                         MST.

00000f17 <_ZZN10Module_Web21settingsEvent_CommandEPcS0_E3__c__20_>:
     f17:	4d 50 54 00                                         MPT.

00000f1b <_ZZN10Module_Web21settingsEvent_CommandEPcS0_E3__c__19_>:
     f1b:	4d 51 54 54 46 00                                   MQTTF.

00000f21 <_ZZN10Module_Web21settingsEvent_CommandEPcS0_E3__c__18_>:
     f21:	4d 51 54 54 00                                      MQTT.

00000f26 <_ZZN10Module_Web21settingsEvent_CommandEPcS0_E3__c__17_>:
     f26:	52 65 6c 61 79 00                                   Relay.

00000f2c <_ZZN10Module_Web21settingsEvent_CommandEPcS0_E3__c__16_>:
     f2c:	53 68 65 65 74 73 46 00                             SheetsF.

00000f34 <_ZZN10Module_Web21settingsEvent_CommandEPcS0_E3__c__15_>:
     f34:	53 68 65 65 74 73 00                                Sheets.

00000f3b <_ZZN10Module_Web21settingsEvent_CommandEPcS0_E3__c__14_>:
     f3b:	57 69 72 65 00                                      Wire.

00000f40 <_ZZN10Module_Web21settingsEvent_CommandEPcS0_E3__c__13_>:
     f40:	4a 53 4f 4e 46 00                                   JSONF.

00000f46 <_ZZN10Module_Web21settingsEvent_CommandEPcS0_E3__c__12_>:
     f46:	4a 53 4f 4e 00                                      JSON.

00000f4b <_ZZN10Module_Web21settingsEvent_CommandEPcS0_E3__c__11_>:
     f4b:	4d 65 6d 00                                         Mem.

00000f4f <_ZZN10Module_Web21settingsEvent_CommandEPcS0_E3__c__10_>:
     f4f:	44 61 74 65 00                                      Date.

00000f54 <Module_Web::settingsEvent_Command(char*, char*)::__c>:
     f54:	53 65 72 69 61 6c 46 00                             SerialF.

00000f5c <Module_Web::settingsEvent_Command(char*, char*)::__c>:
     f5c:	4d 65 74 72 69 63 00                                Metric.

00000f63 <Module_Web::settingsEvent_Command(char*, char*)::__c>:
     f63:	44 65 62 75 67 00                                   Debug.

00000f69 <Module_Web::settingsEvent_Command(char*, char*)::__c>:
     f69:	52 65 66 72 65 73 68 69 6e 67 00                    Refreshing.

00000f74 <Module_Web::settingsEvent_Command(char*, char*)::__c>:
     f74:	52 65 66 72 65 73 68 00                             Refresh.

00000f7c <Module_Web::settingsEvent_Command(char*, char*)::__c>:
     f7c:	52 65 70 6f 72 74 69 6e 67 20 74 6f 20 4d 51 54     Reporting to MQT
     f8c:	54 00                                               T.

00000f8e <Module_Web::settingsEvent_Command(char*, char*)::__c>:
     f8e:	4d 51 54 54 52 65 70 00                             MQTTRep.

00000f96 <Module_Web::settingsEvent_Command(char*, char*)::__c>:
     f96:	52 65 70 6f 72 74 69 6e 67 20 74 6f 20 53 65 72     Reporting to Ser
     fa6:	69 61 6c 00                                         ial.

00000faa <Module_Web::settingsEvent_Command(char*, char*)::__c>:
     faa:	53 65 72 69 61 6c 52 65 70 00                       SerialRep.

00000fb4 <Module_Web::settingsEvent_Command(char*, char*)::__c>:
     fb4:	52 65 70 6f 72 74 69 6e 67 20 74 6f 20 53 68 65     Reporting to She
     fc4:	65 74 73 00                                         ets.

00000fc8 <Module_Web::settingsEvent_Command(char*, char*)::__c>:
     fc8:	53 68 65 65 74 73 52 65 70 00                       SheetsRep.

00000fd2 <Module_Web::settingsEvent_Refresh(char*)::__c>:
     fd2:	4c 6f 67 00                                         Log.

00000fd6 <Module_Web::settingsEvent_Refresh(char*)::__c>:
     fd6:	54 69 6d 65 00                                      Time.

00000fdb <_ZZN10Module_Web18settingsEvent_LoadEPcE3__c__16_>:
     fdb:	45 00                                               E.

00000fdd <_ZZN10Module_Web18settingsEvent_LoadEPcE3__c__15_>:
     fdd:	4d 4c 4d 00                                         MLM.

00000fe1 <_ZZN10Module_Web18settingsEvent_LoadEPcE3__c__14_>:
     fe1:	4d 4c 54 00                                         MLT.

00000fe5 <_ZZN10Module_Web18settingsEvent_LoadEPcE3__c__13_>:
     fe5:	4d 53 54 00                                         MST.

00000fe9 <_ZZN10Module_Web18settingsEvent_LoadEPcE3__c__12_>:
     fe9:	4d 50 54 00                                         MPT.

00000fed <_ZZN10Module_Web18settingsEvent_LoadEPcE3__c__11_>:
     fed:	4d 51 54 54 46 00                                   MQTTF.

00000ff3 <_ZZN10Module_Web18settingsEvent_LoadEPcE3__c__10_>:
     ff3:	4d 51 54 54 00                                      MQTT.

00000ff8 <Module_Web::settingsEvent_Load(char*)::__c>:
     ff8:	52 65 6c 61 79 00                                   Relay.

00000ffe <Module_Web::settingsEvent_Load(char*)::__c>:
     ffe:	53 68 65 65 74 73 46 00                             SheetsF.

00001006 <Module_Web::settingsEvent_Load(char*)::__c>:
    1006:	53 68 65 65 74 73 00                                Sheets.

0000100d <Module_Web::settingsEvent_Load(char*)::__c>:
    100d:	57 69 72 65 00                                      Wire.

00001012 <Module_Web::settingsEvent_Load(char*)::__c>:
    1012:	4a 53 4f 4e 46 00                                   JSONF.

00001018 <Module_Web::settingsEvent_Load(char*)::__c>:
    1018:	4a 53 4f 4e 00                                      JSON.

0000101d <Module_Web::settingsEvent_Load(char*)::__c>:
    101d:	4d 65 6d 00                                         Mem.

00001021 <Module_Web::settingsEvent_Load(char*)::__c>:
    1021:	44 61 74 65 00                                      Date.

00001026 <Module_Web::settingsEvent_Load(char*)::__c>:
    1026:	53 65 72 69 61 6c 46 00                             SerialF.

0000102e <Module_Web::settingsEvent_Load(char*)::__c>:
    102e:	4d 65 74 72 69 63 00                                Metric.

00001035 <Module_Web::settingsEvent_Load(char*)::__c>:
    1035:	44 65 62 75 67 00                                   Debug.

0000103b <_ZZN10Module_Web14settingsToJSONEvE3__c__17_>:
    103b:	22 7d 7d 00                                         "}}.

0000103f <_ZZN10Module_Web14settingsToJSONEvE3__c__16_>:
    103f:	22 2c 22 4d 4c 4d 22 3a 22 00                       ","MLM":".

00001049 <_ZZN10Module_Web14settingsToJSONEvE3__c__15_>:
    1049:	22 2c 22 4d 4c 54 22 3a 22 00                       ","MLT":".

00001053 <_ZZN10Module_Web14settingsToJSONEvE3__c__14_>:
    1053:	22 2c 22 4d 53 54 22 3a 22 00                       ","MST":".

0000105d <_ZZN10Module_Web14settingsToJSONEvE3__c__13_>:
    105d:	22 2c 22 4d 50 54 22 3a 22 00                       ","MPT":".

00001067 <_ZZN10Module_Web14settingsToJSONEvE3__c__12_>:
    1067:	22 2c 22 4d 51 54 54 46 22 3a 22 00                 ","MQTTF":".

00001073 <_ZZN10Module_Web14settingsToJSONEvE3__c__11_>:
    1073:	22 2c 22 4d 51 54 54 22 3a 22 00                    ","MQTT":".

0000107e <_ZZN10Module_Web14settingsToJSONEvE3__c__10_>:
    107e:	22 2c 22 52 65 6c 61 79 22 3a 22 00                 ","Relay":".

0000108a <Module_Web::settingsToJSON()::__c>:
    108a:	22 2c 22 53 68 65 65 74 73 46 22 3a 22 00           ","SheetsF":".

00001098 <Module_Web::settingsToJSON()::__c>:
    1098:	22 2c 22 53 68 65 65 74 73 22 3a 22 00              ","Sheets":".

000010a5 <Module_Web::settingsToJSON()::__c>:
    10a5:	22 2c 22 57 69 72 65 22 3a 22 00                    ","Wire":".

000010b0 <Module_Web::settingsToJSON()::__c>:
    10b0:	22 2c 22 4a 53 4f 4e 46 22 3a 22 00                 ","JSONF":".

000010bc <Module_Web::settingsToJSON()::__c>:
    10bc:	22 2c 22 4a 53 4f 4e 22 3a 22 00                    ","JSON":".

000010c7 <Module_Web::settingsToJSON()::__c>:
    10c7:	22 2c 22 4d 65 6d 22 3a 22 00                       ","Mem":".

000010d1 <Module_Web::settingsToJSON()::__c>:
    10d1:	22 2c 22 44 61 74 65 22 3a 22 00                    ","Date":".

000010dc <Module_Web::settingsToJSON()::__c>:
    10dc:	22 2c 22 53 65 72 69 61 6c 46 22 3a 22 00           ","SerialF":".

000010ea <Module_Web::settingsToJSON()::__c>:
    10ea:	22 2c 22 4d 65 74 72 69 63 22 3a 22 00              ","Metric":".

000010f7 <Module_Web::settingsToJSON()::__c>:
    10f7:	22 44 65 62 75 67 22 3a 22 00                       "Debug":".

00001101 <Module_Web::settingsToJSON()::__c>:
    1101:	7b 22 53 65 74 74 69 6e 67 73 22 3a 7b 00           {"Settings":{.

0000110f <Module_Web::eventLogToJSON(bool, bool)::__c>:
    110f:	7d 00                                               }.

00001111 <Module_Web::eventLogToJSON(bool, bool)::__c>:
    1111:	2c 00                                               ,.

00001113 <Module_Web::eventLogToJSON(bool, bool)::__c>:
    1113:	22 00                                               ".

00001115 <Module_Web::eventLogToJSON(bool, bool)::__c>:
    1115:	22 00                                               ".

00001117 <Module_Web::eventLogToJSON(bool, bool)::__c>:
    1117:	5b 00                                               [.

00001119 <Module_Web::eventLogToJSON(bool, bool)::__c>:
    1119:	7b 22 45 76 65 6e 74 4c 6f 67 22 3a 00              {"EventLog":.

00001126 <Module_Web::addToCommandQueue(Common_Web*)::__c>:
    1126:	43 6f 6d 6d 61 6e 64 51 75 65 75 65 20 6f 76 65     CommandQueue ove
    1136:	72 66 6c 6f 77 21 00                                rflow!.

0000113d <Module_Web::addToWebsiteQueue_Refresh(Common_Web*)::__c>:
    113d:	57 65 62 73 69 74 65 51 75 65 75 65 5f 52 65 66     WebsiteQueue_Ref
    114d:	72 65 73 68 20 6f 76 65 72 66 6c 6f 77 21 00        resh overflow!.

0000115c <Module_Web::addToWebsiteQueue_Load(Common_Web*)::__c>:
    115c:	57 65 62 73 69 74 65 51 75 65 75 65 5f 4c 6f 61     WebsiteQueue_Loa
    116c:	64 20 6f 76 65 72 66 6c 6f 77 21 00                 d overflow!.

00001178 <void logToSerials<float>(float&, bool, unsigned char)::__c>:
    1178:	20 00                                                .

0000117a <void logToSerials<float>(float&, bool, unsigned char)::__c>:
    117a:	20 00                                                .

0000117c <void logToSerials<char>(char*, bool, unsigned char)::__c>:
    117c:	20 00                                                .

0000117e <void logToSerials<char>(char*, bool, unsigned char)::__c>:
    117e:	20 00                                                .

00001180 <void logToSerials<bool>(bool&, bool, unsigned char)::__c>:
    1180:	20 00                                                .

00001182 <void logToSerials<bool>(bool&, bool, unsigned char)::__c>:
    1182:	20 00                                                .

00001184 <AeroModule_Web::sendCommand(void*)::__c>:
    1184:	3b 20 4e 6f 20 72 65 73 70 6f 6e 73 65 00           ; No response.

00001192 <AeroModule_Web::sendCommand(void*)::__c>:
    1192:	3b 20 41 63 6b 20 72 65 63 65 69 76 65 64 20 77     ; Ack received w
    11a2:	69 74 68 6f 75 74 20 64 61 74 61 00                 ithout data.

000011ae <AeroModule_Web::sendCommand(void*)::__c>:
    11ae:	53 65 71 75 65 6e 63 65 49 44 20 75 6e 6b 6e 6f     SequenceID unkno
    11be:	77 6e 00                                            wn.

000011c1 <AeroModule_Web::sendCommand(void*)::__c>:
    11c1:	2d 00                                               -.

000011c3 <AeroModule_Web::sendCommand(void*)::__c>:
    11c3:	3b 20 44 61 74 61 3a 00                             ; Data:.

000011cb <AeroModule_Web::sendCommand(void*)::__c>:
    11cb:	3b 20 52 65 73 70 6f 6e 73 65 3a 00                 ; Response:.

000011d7 <AeroModule_Web::sendCommand(void*)::__c>:
    11d7:	53 65 6e 64 69 6e 67 3a 00                          Sending:.

000011e0 <AeroModule_Web::sendMessages()::__c>:
    11e0:	4d 65 73 73 61 67 65 20 65 78 63 68 61 6e 67 65     Message exchange
    11f0:	20 66 69 6e 69 73 68 65 64 00                        finished.

000011fa <_ZZN14AeroModule_Web12commandEventEPcS0_E3__c__36_>:
    11fa:	50 72 65 73 73 75 72 65 20 6c 69 6d 69 74 73 20     Pressure limits 
    120a:	75 70 64 61 74 65 64 00                             updated.

00001212 <_ZZN14AeroModule_Web12commandEventEPcS0_E3__c__35_>:
    1212:	50 4d 78 00                                         PMx.

00001216 <_ZZN14AeroModule_Web12commandEventEPcS0_E3__c__34_>:
    1216:	50 4d 6e 00                                         PMn.

0000121a <_ZZN14AeroModule_Web12commandEventEPcS0_E3__c__33_>:
    121a:	50 72 69 6d 69 6e 67 20 74 69 6d 65 20 75 70 64     Priming time upd
    122a:	61 74 65 64 00                                      ated.

0000122f <_ZZN14AeroModule_Web12commandEventEPcS0_E3__c__32_>:
    122f:	50 50 54 00                                         PPT.

00001233 <_ZZN14AeroModule_Web12commandEventEPcS0_E3__c__31_>:
    1233:	50 75 6d 70 20 74 69 6d 65 6f 75 74 20 75 70 64     Pump timeout upd
    1243:	61 74 65 64 00                                      ated.

00001248 <_ZZN14AeroModule_Web12commandEventEPcS0_E3__c__30_>:
    1248:	50 54 00                                            PT.

0000124b <_ZZN14AeroModule_Web12commandEventEPcS0_E3__c__29_>:
    124b:	50 75 6d 70 20 73 70 65 65 64 20 75 70 64 61 74     Pump speed updat
    125b:	65 64 00                                            ed.

0000125e <_ZZN14AeroModule_Web12commandEventEPcS0_E3__c__28_>:
    125e:	50 53 00                                            PS.

00001261 <_ZZN14AeroModule_Web12commandEventEPcS0_E3__c__27_>:
    1261:	53 70 72 61 79 20 69 6e 74 65 72 76 61 6c 20 75     Spray interval u
    1271:	70 64 61 74 65 64 00                                pdated.

00001278 <_ZZN14AeroModule_Web12commandEventEPcS0_E3__c__26_>:
    1278:	4e 49 6e 74 00                                      NInt.

0000127d <_ZZN14AeroModule_Web12commandEventEPcS0_E3__c__25_>:
    127d:	44 49 6e 74 00                                      DInt.

00001282 <_ZZN14AeroModule_Web12commandEventEPcS0_E3__c__24_>:
    1282:	53 70 72 61 79 20 64 75 72 61 74 69 6f 6e 20 75     Spray duration u
    1292:	70 64 61 74 65 64 00                                pdated.

00001299 <_ZZN14AeroModule_Web12commandEventEPcS0_E3__c__23_>:
    1299:	44 75 72 00                                         Dur.

0000129d <_ZZN14AeroModule_Web12commandEventEPcS0_E3__c__22_>:
    129d:	50 72 65 73 73 75 72 65 20 74 61 6e 6b 20 6e 6f     Pressure tank no
    12ad:	74 20 61 76 61 69 6c 61 62 6c 65 00                 t available.

000012b9 <_ZZN14AeroModule_Web12commandEventEPcS0_E3__c__21_>:
    12b9:	44 72 61 69 6e 69 6e 67 20 74 61 6e 6b 00           Draining tank.

000012c7 <_ZZN14AeroModule_Web12commandEventEPcS0_E3__c__20_>:
    12c7:	44 72 61 69 6e 00                                   Drain.

000012cd <_ZZN14AeroModule_Web12commandEventEPcS0_E3__c__19_>:
    12cd:	50 72 65 73 73 75 72 65 20 74 61 6e 6b 20 6e 6f     Pressure tank no
    12dd:	74 20 61 76 61 69 6c 61 62 6c 65 00                 t available.

000012e9 <_ZZN14AeroModule_Web12commandEventEPcS0_E3__c__18_>:
    12e9:	52 65 66 69 6c 6c 69 6e 67 20 74 61 6e 6b 00        Refilling tank.

000012f8 <_ZZN14AeroModule_Web12commandEventEPcS0_E3__c__17_>:
    12f8:	52 65 66 69 6c 6c 00                                Refill.

000012ff <_ZZN14AeroModule_Web12commandEventEPcS0_E3__c__16_>:
    12ff:	54 61 72 69 6e 67 20 61 65 72 6f 20 73 63 61 6c     Taring aero scal
    130f:	65 00                                               e.

00001311 <_ZZN14AeroModule_Web12commandEventEPcS0_E3__c__15_>:
    1311:	54 00                                               T.

00001313 <_ZZN14AeroModule_Web12commandEventEPcS0_E3__c__14_>:
    1313:	4d 69 78 69 6e 67 20 72 65 73 65 72 76 6f 69 72     Mixing reservoir
	...

00001324 <_ZZN14AeroModule_Web12commandEventEPcS0_E3__c__13_>:
    1324:	4d 69 78 00                                         Mix.

00001328 <_ZZN14AeroModule_Web12commandEventEPcS0_E3__c__12_>:
    1328:	41 65 72 6f 20 70 75 6d 70 20 64 69 73 61 62 6c     Aero pump disabl
    1338:	65 64 00                                            ed.

0000133b <_ZZN14AeroModule_Web12commandEventEPcS0_E3__c__11_>:
    133b:	50 75 6d 70 44 69 73 00                             PumpDis.

00001343 <_ZZN14AeroModule_Web12commandEventEPcS0_E3__c__10_>:
    1343:	41 65 72 6f 20 70 75 6d 70 20 49 44 4c 45 00        Aero pump IDLE.

00001352 <AeroModule_Web::commandEvent(char*, char*)::__c>:
    1352:	50 75 6d 70 4f 66 66 00                             PumpOff.

0000135a <AeroModule_Web::commandEvent(char*, char*)::__c>:
    135a:	41 65 72 6f 20 70 75 6d 70 20 4f 4e 00              Aero pump ON.

00001367 <AeroModule_Web::commandEvent(char*, char*)::__c>:
    1367:	50 75 6d 70 4f 6e 00                                PumpOn.

0000136e <AeroModule_Web::commandEvent(char*, char*)::__c>:
    136e:	53 74 6f 70 20 73 70 72 61 79 00                    Stop spray.

00001379 <AeroModule_Web::commandEvent(char*, char*)::__c>:
    1379:	53 70 72 61 79 4f 66 66 00                          SprayOff.

00001382 <AeroModule_Web::commandEvent(char*, char*)::__c>:
    1382:	53 74 61 72 74 69 6e 67 20 73 70 72 61 79 00        Starting spray.

00001391 <AeroModule_Web::commandEvent(char*, char*)::__c>:
    1391:	53 70 72 61 79 4e 6f 77 00                          SprayNow.

0000139a <AeroModule_Web::commandEvent(char*, char*)::__c>:
    139a:	53 70 72 61 79 20 64 69 73 61 62 6c 65 64 00        Spray disabled.

000013a9 <AeroModule_Web::commandEvent(char*, char*)::__c>:
    13a9:	53 70 72 61 79 44 69 73 00                          SprayDis.

000013b2 <AeroModule_Web::commandEvent(char*, char*)::__c>:
    13b2:	53 70 72 61 79 20 65 6e 61 62 6c 65 64 00           Spray enabled.

000013c0 <AeroModule_Web::commandEvent(char*, char*)::__c>:
    13c0:	53 70 72 61 79 45 6e 00                             SprayEn.

000013c8 <AeroModule_Web::websiteEvent_Refresh(char*)::__c>:
    13c8:	57 00                                               W.

000013ca <AeroModule_Web::websiteEvent_Refresh(char*)::__c>:
    13ca:	4c 53 50 00                                         LSP.

000013ce <AeroModule_Web::websiteEvent_Refresh(char*)::__c>:
    13ce:	50 72 00                                            Pr.

000013d1 <AeroModule_Web::websiteEvent_Refresh(char*)::__c>:
    13d1:	50 00                                               P.

000013d3 <AeroModule_Web::websiteEvent_Refresh(char*)::__c>:
    13d3:	41 53 00                                            AS.

000013d6 <AeroModule_Web::websiteEvent_Refresh(char*)::__c>:
    13d6:	41 53 00                                            AS.

000013d9 <AeroModule_Web::websiteEvent_Refresh(char*)::__c>:
    13d9:	53 00                                               S.

000013db <AeroModule_Web::websiteEvent_Load(char*)::__c>:
    13db:	50 50 54 00                                         PPT.

000013df <AeroModule_Web::websiteEvent_Load(char*)::__c>:
    13df:	50 54 00                                            PT.

000013e2 <AeroModule_Web::websiteEvent_Load(char*)::__c>:
    13e2:	50 53 00                                            PS.

000013e5 <AeroModule_Web::websiteEvent_Load(char*)::__c>:
    13e5:	50 4d 6e 00                                         PMn.

000013e9 <AeroModule_Web::websiteEvent_Load(char*)::__c>:
    13e9:	50 4d 78 00                                         PMx.

000013ed <AeroModule_Web::websiteEvent_Load(char*)::__c>:
    13ed:	4e 49 6e 74 00                                      NInt.

000013f2 <AeroModule_Web::websiteEvent_Load(char*)::__c>:
    13f2:	44 49 6e 74 00                                      DInt.

000013f7 <AeroModule_Web::websiteEvent_Load(char*)::__c>:
    13f7:	44 75 72 00                                         Dur.

000013fb <AeroModule_Web::websiteEvent_Load(char*)::__c>:
    13fb:	54 61 6e 6b 00                                      Tank.

00001400 <_ZZN14AeroModule_Web6reportEbE3__c__15_>:
    1400:	22 7d 00                                            "}.

00001403 <_ZZN14AeroModule_Web6reportEbE3__c__14_>:
    1403:	22 2c 22 4e 49 22 3a 22 00                          ","NI":".

0000140c <_ZZN14AeroModule_Web6reportEbE3__c__13_>:
    140c:	22 2c 22 44 49 22 3a 22 00                          ","DI":".

00001415 <_ZZN14AeroModule_Web6reportEbE3__c__12_>:
    1415:	22 2c 22 44 22 3a 22 00                             ","D":".

0000141d <_ZZN14AeroModule_Web6reportEbE3__c__11_>:
    141d:	22 2c 22 53 45 22 3a 22 00                          ","SE":".

00001426 <_ZZN14AeroModule_Web6reportEbE3__c__10_>:
    1426:	22 2c 22 50 50 22 3a 22 00                          ","PP":".

0000142f <AeroModule_Web::report(bool)::__c>:
    142f:	22 2c 22 50 54 22 3a 22 00                          ","PT":".

00001438 <AeroModule_Web::report(bool)::__c>:
    1438:	22 2c 22 50 53 22 3a 22 00                          ","PS":".

00001441 <AeroModule_Web::report(bool)::__c>:
    1441:	22 2c 22 50 53 74 22 3a 22 00                       ","PSt":".

0000144b <AeroModule_Web::report(bool)::__c>:
    144b:	22 2c 22 4c 53 22 3a 22 00                          ","LS":".

00001454 <AeroModule_Web::report(bool)::__c>:
    1454:	22 2c 22 41 53 22 3a 22 00                          ","AS":".

0000145d <AeroModule_Web::report(bool)::__c>:
    145d:	22 2c 22 41 53 22 3a 22 00                          ","AS":".

00001466 <AeroModule_Web::report(bool)::__c>:
    1466:	22 2c 22 4d 69 22 3a 22 00                          ","Mi":".

0000146f <AeroModule_Web::report(bool)::__c>:
    146f:	22 2c 22 4d 61 22 3a 22 00                          ","Ma":".

00001478 <AeroModule_Web::report(bool)::__c>:
    1478:	22 2c 22 57 22 3a 22 00                             ","W":".

00001480 <AeroModule_Web::report(bool)::__c>:
    1480:	22 2c 22 50 22 3a 22 00                             ","P":".

00001488 <AeroModule_Web::report(bool)::__c>:
    1488:	22 53 22 3a 22 00                                   "S":".

0000148e <AeroModule_Web::AeroModule_Web(__FlashStringHelper const*, MainModule*, Settings::AeroModuleSettings*)::__c>:
    148e:	41 65 72 6f 4d 6f 64 75 6c 65 5f 57 65 62 20 72     AeroModule_Web r
    149e:	65 61 64 79 00                                      eady.

000014a3 <toText_aeroSequenceID(unsigned char)::__c>:
    14a3:	3f 00                                               ?.

000014a5 <toText_aeroSequenceID(unsigned char)::__c>:
    14a5:	41 52 00                                            AR.

000014a8 <toText_aeroSequenceID(unsigned char)::__c>:
    14a8:	41 52 32 00                                         AR2.

000014ac <toText_aeroSequenceID(unsigned char)::__c>:
    14ac:	41 43 32 00                                         AC2.

000014b0 <toText_aeroSequenceID(unsigned char)::__c>:
    14b0:	41 52 31 00                                         AR1.

000014b4 <toText_aeroSequenceID(unsigned char)::__c>:
    14b4:	41 43 31 00                                         AC1.

000014b8 <toText_aeroSequenceID(unsigned char)::__c>:
    14b8:	41 4d 52 31 00                                      AMR1.

000014bd <toText_aeroSequenceID(unsigned char)::__c>:
    14bd:	41 4d 43 31 00                                      AMC1.

000014c2 <HempyModule_Web::sendCommand(void*)::__c>:
    14c2:	3b 20 4e 6f 20 72 65 73 70 6f 6e 73 65 00           ; No response.

000014d0 <HempyModule_Web::sendCommand(void*)::__c>:
    14d0:	3b 20 41 63 6b 20 72 65 63 65 69 76 65 64 20 77     ; Ack received w
    14e0:	69 74 68 6f 75 74 20 64 61 74 61 00                 ithout data.

000014ec <HempyModule_Web::sendCommand(void*)::__c>:
    14ec:	53 65 71 75 65 6e 63 65 49 44 20 75 6e 6b 6e 6f     SequenceID unkno
    14fc:	77 6e 00                                            wn.

000014ff <HempyModule_Web::sendCommand(void*)::__c>:
    14ff:	2d 00                                               -.

00001501 <HempyModule_Web::sendCommand(void*)::__c>:
    1501:	3b 20 44 61 74 61 3a 00                             ; Data:.

00001509 <HempyModule_Web::sendCommand(void*)::__c>:
    1509:	3b 20 52 65 73 70 6f 6e 73 65 3a 00                 ; Response:.

00001515 <HempyModule_Web::sendCommand(void*)::__c>:
    1515:	53 65 6e 64 69 6e 67 3a 00                          Sending:.

0000151e <HempyModule_Web::sendMessages()::__c>:
    151e:	4d 65 73 73 61 67 65 20 65 78 63 68 61 6e 67 65     Message exchange
    152e:	20 66 69 6e 69 73 68 65 64 00                        finished.

00001538 <_ZZN15HempyModule_Web12commandEventEPcS0_E3__c__48_>:
    1538:	42 32 20 64 72 79 20 77 65 69 67 68 74 20 75 70     B2 dry weight up
    1548:	64 61 74 65 64 00                                   dated.

0000154e <_ZZN15HempyModule_Web12commandEventEPcS0_E3__c__47_>:
    154e:	42 32 44 57 00                                      B2DW.

00001553 <_ZZN15HempyModule_Web12commandEventEPcS0_E3__c__46_>:
    1553:	42 32 20 44 72 61 69 6e 20 77 61 69 74 20 75 70     B2 Drain wait up
    1563:	64 61 74 65 64 00                                   dated.

00001569 <_ZZN15HempyModule_Web12commandEventEPcS0_E3__c__45_>:
    1569:	42 32 44 00                                         B2D.

0000156d <_ZZN15HempyModule_Web12commandEventEPcS0_E3__c__44_>:
    156d:	50 75 6d 70 20 32 20 74 69 6d 65 6f 75 74 20 75     Pump 2 timeout u
    157d:	70 64 61 74 65 64 00                                pdated.

00001584 <_ZZN15HempyModule_Web12commandEventEPcS0_E3__c__43_>:
    1584:	42 32 54 00                                         B2T.

00001588 <_ZZN15HempyModule_Web12commandEventEPcS0_E3__c__42_>:
    1588:	50 75 6d 70 20 32 20 73 70 65 65 64 20 75 70 64     Pump 2 speed upd
    1598:	61 74 65 64 00                                      ated.

0000159d <_ZZN15HempyModule_Web12commandEventEPcS0_E3__c__41_>:
    159d:	42 32 50 53 00                                      B2PS.

000015a2 <_ZZN15HempyModule_Web12commandEventEPcS0_E3__c__40_>:
    15a2:	42 75 63 6b 65 74 20 32 20 77 61 73 74 65 20 6c     Bucket 2 waste l
    15b2:	69 6d 69 74 20 75 70 64 61 74 65 64 00              imit updated.

000015bf <_ZZN15HempyModule_Web12commandEventEPcS0_E3__c__39_>:
    15bf:	42 32 57 4c 00                                      B2WL.

000015c4 <_ZZN15HempyModule_Web12commandEventEPcS0_E3__c__38_>:
    15c4:	42 75 63 6b 65 74 20 32 20 74 61 72 67 65 74 73     Bucket 2 targets
    15d4:	20 75 70 64 61 74 65 64 00                           updated.

000015dd <_ZZN15HempyModule_Web12commandEventEPcS0_E3__c__37_>:
    15dd:	42 32 4f 46 00                                      B2OF.

000015e2 <_ZZN15HempyModule_Web12commandEventEPcS0_E3__c__36_>:
    15e2:	42 32 45 54 00                                      B2ET.

000015e7 <_ZZN15HempyModule_Web12commandEventEPcS0_E3__c__35_>:
    15e7:	54 61 72 69 6e 67 20 42 75 63 6b 65 74 20 32 20     Taring Bucket 2 
    15f7:	77 61 73 74 65 20 73 63 61 6c 65 00                 waste scale.

00001603 <_ZZN15HempyModule_Web12commandEventEPcS0_E3__c__34_>:
    1603:	42 32 54 61 72 65 57 52 00                          B2TareWR.

0000160c <_ZZN15HempyModule_Web12commandEventEPcS0_E3__c__33_>:
    160c:	54 61 72 69 6e 67 20 42 75 63 6b 65 74 20 32 20     Taring Bucket 2 
    161c:	44 72 79 2f 57 65 74 00                             Dry/Wet.

00001624 <_ZZN15HempyModule_Web12commandEventEPcS0_E3__c__32_>:
    1624:	42 32 54 61 72 65 44 57 00                          B2TareDW.

0000162d <_ZZN15HempyModule_Web12commandEventEPcS0_E3__c__31_>:
    162d:	54 61 72 69 6e 67 20 42 75 63 6b 65 74 20 32 20     Taring Bucket 2 
    163d:	73 63 61 6c 65 00                                   scale.

00001643 <_ZZN15HempyModule_Web12commandEventEPcS0_E3__c__30_>:
    1643:	42 32 54 61 72 65 42 00                             B2TareB.

0000164b <_ZZN15HempyModule_Web12commandEventEPcS0_E3__c__29_>:
    164b:	44 69 73 61 62 6c 65 64 20 48 65 6d 70 79 42 75     Disabled HempyBu
    165b:	63 6b 65 74 20 32 00                                cket 2.

00001662 <_ZZN15HempyModule_Web12commandEventEPcS0_E3__c__28_>:
    1662:	42 32 44 69 73 00                                   B2Dis.

00001668 <_ZZN15HempyModule_Web12commandEventEPcS0_E3__c__27_>:
    1668:	53 74 6f 70 20 77 61 74 65 72 69 6e 67 20 48 65     Stop watering He
    1678:	6d 70 79 42 75 63 6b 65 74 20 32 00                 mpyBucket 2.

00001684 <_ZZN15HempyModule_Web12commandEventEPcS0_E3__c__26_>:
    1684:	42 32 4f 66 66 00                                   B2Off.

0000168a <_ZZN15HempyModule_Web12commandEventEPcS0_E3__c__25_>:
    168a:	57 61 74 65 72 69 6e 67 20 48 65 6d 70 79 42 75     Watering HempyBu
    169a:	63 6b 65 74 20 32 00                                cket 2.

000016a1 <_ZZN15HempyModule_Web12commandEventEPcS0_E3__c__24_>:
    16a1:	42 32 4f 6e 00                                      B2On.

000016a6 <_ZZN15HempyModule_Web12commandEventEPcS0_E3__c__23_>:
    16a6:	42 31 20 64 72 79 20 77 65 69 67 68 74 20 75 70     B1 dry weight up
    16b6:	64 61 74 65 64 00                                   dated.

000016bc <_ZZN15HempyModule_Web12commandEventEPcS0_E3__c__22_>:
    16bc:	42 31 44 57 00                                      B1DW.

000016c1 <_ZZN15HempyModule_Web12commandEventEPcS0_E3__c__21_>:
    16c1:	42 31 20 44 72 61 69 6e 20 77 61 69 74 20 75 70     B1 Drain wait up
    16d1:	64 61 74 65 64 00                                   dated.

000016d7 <_ZZN15HempyModule_Web12commandEventEPcS0_E3__c__20_>:
    16d7:	42 31 44 00                                         B1D.

000016db <_ZZN15HempyModule_Web12commandEventEPcS0_E3__c__19_>:
    16db:	50 75 6d 70 20 31 20 74 69 6d 65 6f 75 74 20 75     Pump 1 timeout u
    16eb:	70 64 61 74 65 64 00                                pdated.

000016f2 <_ZZN15HempyModule_Web12commandEventEPcS0_E3__c__18_>:
    16f2:	42 31 54 00                                         B1T.

000016f6 <_ZZN15HempyModule_Web12commandEventEPcS0_E3__c__17_>:
    16f6:	50 75 6d 70 20 31 20 73 70 65 65 64 20 75 70 64     Pump 1 speed upd
    1706:	61 74 65 64 00                                      ated.

0000170b <_ZZN15HempyModule_Web12commandEventEPcS0_E3__c__16_>:
    170b:	42 31 50 53 00                                      B1PS.

00001710 <_ZZN15HempyModule_Web12commandEventEPcS0_E3__c__15_>:
    1710:	42 75 63 6b 65 74 20 31 20 77 61 73 74 65 20 6c     Bucket 1 waste l
    1720:	69 6d 69 74 20 75 70 64 61 74 65 64 00              imit updated.

0000172d <_ZZN15HempyModule_Web12commandEventEPcS0_E3__c__14_>:
    172d:	42 31 57 4c 00                                      B1WL.

00001732 <_ZZN15HempyModule_Web12commandEventEPcS0_E3__c__13_>:
    1732:	42 75 63 6b 65 74 20 31 20 74 61 72 67 65 74 73     Bucket 1 targets
    1742:	20 75 70 64 61 74 65 64 00                           updated.

0000174b <_ZZN15HempyModule_Web12commandEventEPcS0_E3__c__12_>:
    174b:	42 31 4f 46 00                                      B1OF.

00001750 <_ZZN15HempyModule_Web12commandEventEPcS0_E3__c__11_>:
    1750:	42 31 45 54 00                                      B1ET.

00001755 <_ZZN15HempyModule_Web12commandEventEPcS0_E3__c__10_>:
    1755:	54 61 72 69 6e 67 20 42 75 63 6b 65 74 20 31 20     Taring Bucket 1 
    1765:	77 61 73 74 65 20 73 63 61 6c 65 00                 waste scale.

00001771 <HempyModule_Web::commandEvent(char*, char*)::__c>:
    1771:	42 31 54 61 72 65 57 52 00                          B1TareWR.

0000177a <HempyModule_Web::commandEvent(char*, char*)::__c>:
    177a:	54 61 72 69 6e 67 20 42 75 63 6b 65 74 20 31 20     Taring Bucket 1 
    178a:	44 72 79 2f 57 65 74 00                             Dry/Wet.

00001792 <HempyModule_Web::commandEvent(char*, char*)::__c>:
    1792:	42 31 54 61 72 65 44 57 00                          B1TareDW.

0000179b <HempyModule_Web::commandEvent(char*, char*)::__c>:
    179b:	54 61 72 69 6e 67 20 42 75 63 6b 65 74 20 31 20     Taring Bucket 1 
    17ab:	73 63 61 6c 65 00                                   scale.

000017b1 <HempyModule_Web::commandEvent(char*, char*)::__c>:
    17b1:	42 31 54 61 72 65 42 00                             B1TareB.

000017b9 <HempyModule_Web::commandEvent(char*, char*)::__c>:
    17b9:	44 69 73 61 62 6c 65 64 20 48 65 6d 70 79 42 75     Disabled HempyBu
    17c9:	63 6b 65 74 20 31 00                                cket 1.

000017d0 <HempyModule_Web::commandEvent(char*, char*)::__c>:
    17d0:	42 31 44 69 73 00                                   B1Dis.

000017d6 <HempyModule_Web::commandEvent(char*, char*)::__c>:
    17d6:	53 74 6f 70 20 77 61 74 65 72 69 6e 67 20 48 65     Stop watering He
    17e6:	6d 70 79 42 75 63 6b 65 74 20 31 00                 mpyBucket 1.

000017f2 <HempyModule_Web::commandEvent(char*, char*)::__c>:
    17f2:	42 31 4f 66 66 00                                   B1Off.

000017f8 <HempyModule_Web::commandEvent(char*, char*)::__c>:
    17f8:	57 61 74 65 72 69 6e 67 20 48 65 6d 70 79 42 75     Watering HempyBu
    1808:	63 6b 65 74 20 31 00                                cket 1.

0000180f <HempyModule_Web::commandEvent(char*, char*)::__c>:
    180f:	42 31 4f 6e 00                                      B1On.

00001814 <HempyModule_Web::websiteEvent_Refresh(char*)::__c>:
    1814:	42 32 50 00                                         B2P.

00001818 <HempyModule_Web::websiteEvent_Refresh(char*)::__c>:
    1818:	42 32 53 00                                         B2S.

0000181c <HempyModule_Web::websiteEvent_Refresh(char*)::__c>:
    181c:	42 32 44 57 57 00                                   B2DWW.

00001822 <HempyModule_Web::websiteEvent_Refresh(char*)::__c>:
    1822:	42 32 57 52 00                                      B2WR.

00001827 <HempyModule_Web::websiteEvent_Refresh(char*)::__c>:
    1827:	42 32 57 00                                         B2W.

0000182b <HempyModule_Web::websiteEvent_Refresh(char*)::__c>:
    182b:	42 31 50 00                                         B1P.

0000182f <HempyModule_Web::websiteEvent_Refresh(char*)::__c>:
    182f:	42 31 53 00                                         B1S.

00001833 <HempyModule_Web::websiteEvent_Refresh(char*)::__c>:
    1833:	42 31 44 57 57 00                                   B1DWW.

00001839 <HempyModule_Web::websiteEvent_Refresh(char*)::__c>:
    1839:	42 31 57 52 00                                      B1WR.

0000183e <HempyModule_Web::websiteEvent_Refresh(char*)::__c>:
    183e:	42 31 57 00                                         B1W.

00001842 <HempyModule_Web::websiteEvent_Refresh(char*)::__c>:
    1842:	53 00                                               S.

00001844 <_ZZN15HempyModule_Web17websiteEvent_LoadEPcE3__c__12_>:
    1844:	42 32 44 57 00                                      B2DW.

00001849 <_ZZN15HempyModule_Web17websiteEvent_LoadEPcE3__c__11_>:
    1849:	42 32 44 00                                         B2D.

0000184d <_ZZN15HempyModule_Web17websiteEvent_LoadEPcE3__c__10_>:
    184d:	42 32 54 00                                         B2T.

00001851 <HempyModule_Web::websiteEvent_Load(char*)::__c>:
    1851:	42 32 50 53 00                                      B2PS.

00001856 <HempyModule_Web::websiteEvent_Load(char*)::__c>:
    1856:	42 32 57 4c 00                                      B2WL.

0000185b <HempyModule_Web::websiteEvent_Load(char*)::__c>:
    185b:	42 32 4f 46 00                                      B2OF.

00001860 <HempyModule_Web::websiteEvent_Load(char*)::__c>:
    1860:	42 32 45 54 00                                      B2ET.

00001865 <HempyModule_Web::websiteEvent_Load(char*)::__c>:
    1865:	42 31 44 57 00                                      B1DW.

0000186a <HempyModule_Web::websiteEvent_Load(char*)::__c>:
    186a:	42 31 44 00                                         B1D.

0000186e <HempyModule_Web::websiteEvent_Load(char*)::__c>:
    186e:	42 31 54 00                                         B1T.

00001872 <HempyModule_Web::websiteEvent_Load(char*)::__c>:
    1872:	42 31 50 53 00                                      B1PS.

00001877 <HempyModule_Web::websiteEvent_Load(char*)::__c>:
    1877:	42 31 57 4c 00                                      B1WL.

0000187c <HempyModule_Web::websiteEvent_Load(char*)::__c>:
    187c:	42 31 4f 46 00                                      B1OF.

00001881 <HempyModule_Web::websiteEvent_Load(char*)::__c>:
    1881:	42 31 45 54 00                                      B1ET.

00001886 <_ZZN15HempyModule_Web6reportEbE3__c__24_>:
    1886:	22 7d 00                                            "}.

00001889 <_ZZN15HempyModule_Web6reportEbE3__c__23_>:
    1889:	22 2c 22 57 4c 32 22 3a 22 00                       ","WL2":".

00001893 <_ZZN15HempyModule_Web6reportEbE3__c__22_>:
    1893:	22 2c 22 4f 54 32 22 3a 22 00                       ","OT2":".

0000189d <_ZZN15HempyModule_Web6reportEbE3__c__21_>:
    189d:	22 2c 22 45 54 32 22 3a 22 00                       ","ET2":".

000018a7 <_ZZN15HempyModule_Web6reportEbE3__c__20_>:
    18a7:	22 2c 22 57 57 32 22 3a 22 00                       ","WW2":".

000018b1 <_ZZN15HempyModule_Web6reportEbE3__c__19_>:
    18b1:	22 2c 22 44 57 32 22 3a 22 00                       ","DW2":".

000018bb <_ZZN15HempyModule_Web6reportEbE3__c__18_>:
    18bb:	22 2c 22 57 52 32 22 3a 22 00                       ","WR2":".

000018c5 <_ZZN15HempyModule_Web6reportEbE3__c__17_>:
    18c5:	22 2c 22 57 42 32 22 3a 22 00                       ","WB2":".

000018cf <_ZZN15HempyModule_Web6reportEbE3__c__16_>:
    18cf:	22 2c 22 44 54 32 22 3a 22 00                       ","DT2":".

000018d9 <_ZZN15HempyModule_Web6reportEbE3__c__15_>:
    18d9:	22 2c 22 50 54 32 22 3a 22 00                       ","PT2":".

000018e3 <_ZZN15HempyModule_Web6reportEbE3__c__14_>:
    18e3:	22 2c 22 50 53 32 22 3a 22 00                       ","PS2":".

000018ed <_ZZN15HempyModule_Web6reportEbE3__c__13_>:
    18ed:	22 2c 22 50 32 22 3a 22 00                          ","P2":".

000018f6 <_ZZN15HempyModule_Web6reportEbE3__c__12_>:
    18f6:	22 2c 22 48 32 22 3a 22 00                          ","H2":".

000018ff <_ZZN15HempyModule_Web6reportEbE3__c__11_>:
    18ff:	22 2c 22 57 4c 31 22 3a 22 00                       ","WL1":".

00001909 <_ZZN15HempyModule_Web6reportEbE3__c__10_>:
    1909:	22 2c 22 4f 54 31 22 3a 22 00                       ","OT1":".

00001913 <HempyModule_Web::report(bool)::__c>:
    1913:	22 2c 22 45 54 31 22 3a 22 00                       ","ET1":".

0000191d <HempyModule_Web::report(bool)::__c>:
    191d:	22 2c 22 57 57 31 22 3a 22 00                       ","WW1":".

00001927 <HempyModule_Web::report(bool)::__c>:
    1927:	22 2c 22 44 57 31 22 3a 22 00                       ","DW1":".

00001931 <HempyModule_Web::report(bool)::__c>:
    1931:	22 2c 22 57 52 31 22 3a 22 00                       ","WR1":".

0000193b <HempyModule_Web::report(bool)::__c>:
    193b:	22 2c 22 57 42 31 22 3a 22 00                       ","WB1":".

00001945 <HempyModule_Web::report(bool)::__c>:
    1945:	22 2c 22 44 54 31 22 3a 22 00                       ","DT1":".

0000194f <HempyModule_Web::report(bool)::__c>:
    194f:	22 2c 22 50 54 31 22 3a 22 00                       ","PT1":".

00001959 <HempyModule_Web::report(bool)::__c>:
    1959:	22 2c 22 50 53 31 22 3a 22 00                       ","PS1":".

00001963 <HempyModule_Web::report(bool)::__c>:
    1963:	22 2c 22 50 31 22 3a 22 00                          ","P1":".

0000196c <HempyModule_Web::report(bool)::__c>:
    196c:	22 2c 22 48 31 22 3a 22 00                          ","H1":".

00001975 <HempyModule_Web::report(bool)::__c>:
    1975:	22 53 22 3a 22 00                                   "S":".

0000197b <HempyModule_Web::HempyModule_Web(__FlashStringHelper const*, MainModule*, Settings::HempyModuleSettings*)::__c>:
    197b:	48 65 6d 70 79 4d 6f 64 75 6c 65 5f 57 65 62 20     HempyModule_Web 
    198b:	72 65 61 64 79 00                                   ready.

00001991 <toText_hempySequenceID(unsigned char)::__c>:
    1991:	3f 00                                               ?.

00001993 <toText_hempySequenceID(unsigned char)::__c>:
    1993:	48 52 00                                            HR.

00001996 <toText_hempySequenceID(unsigned char)::__c>:
    1996:	48 52 32 00                                         HR2.

0000199a <toText_hempySequenceID(unsigned char)::__c>:
    199a:	48 43 32 00                                         HC2.

0000199e <toText_hempySequenceID(unsigned char)::__c>:
    199e:	48 52 31 00                                         HR1.

000019a2 <toText_hempySequenceID(unsigned char)::__c>:
    19a2:	48 43 31 00                                         HC1.

000019a6 <toText_hempySequenceID(unsigned char)::__c>:
    19a6:	48 4d 52 31 00                                      HMR1.

000019ab <toText_hempySequenceID(unsigned char)::__c>:
    19ab:	48 4d 43 31 00                                      HMC1.

000019b0 <MainModule::websiteEvent_Refresh(char*)::__c>:
    19b0:	4c 6f 67 00                                         Log.

000019b4 <MainModule::websiteEvent_Refresh(char*)::__c>:
    19b4:	54 69 6d 65 00                                      Time.

000019b9 <MainModule::report(bool)::__c>:
    19b9:	22 7d 00                                            "}.

000019bc <MainModule::report(bool)::__c>:
    19bc:	22 2c 22 44 22 3a 22 00                             ","D":".

000019c4 <MainModule::report(bool)::__c>:
    19c4:	22 4d 22 3a 22 00                                   "M":".

000019ca <_ZZN10MainModuleC4EPK19__FlashStringHelperPN8Settings18MainModuleSettingsEP4RF24E3__c__13_>:
    19ca:	72 65 66 72 65 73 68 69 6e 67 00                    refreshing.

000019d5 <_ZZN10MainModuleC4EPK19__FlashStringHelperPN8Settings18MainModuleSettingsEP4RF24E3__c__12_>:
    19d5:	4d 61 69 6e 4d 6f 64 75 6c 65 20 69 6e 69 74 69     MainModule initi
    19e5:	61 6c 69 7a 65 64 00                                alized.

000019ec <_ZZN10MainModuleC4EPK19__FlashStringHelperPN8Settings18MainModuleSettingsEP4RF24E3__c__11_>:
    19ec:	52 65 73 31 00                                      Res1.

000019f1 <_ZZN10MainModuleC4EPK19__FlashStringHelperPN8Settings18MainModuleSettingsEP4RF24E3__c__10_>:
    19f1:	41 65 72 6f 31 00                                   Aero1.

000019f7 <MainModule::MainModule(__FlashStringHelper const*, Settings::MainModuleSettings*, RF24*)::__c>:
    19f7:	48 65 6d 70 31 00                                   Hemp1.

000019fd <MainModule::MainModule(__FlashStringHelper const*, Settings::MainModuleSettings*, RF24*)::__c>:
    19fd:	50 6f 77 31 00                                      Pow1.

00001a02 <MainModule::MainModule(__FlashStringHelper const*, Settings::MainModuleSettings*, RF24*)::__c>:
    1a02:	44 48 54 31 00                                      DHT1.

00001a07 <MainModule::MainModule(__FlashStringHelper const*, Settings::MainModuleSettings*, RF24*)::__c>:
    1a07:	4c 73 31 00                                         Ls1.

00001a0b <MainModule::MainModule(__FlashStringHelper const*, Settings::MainModuleSettings*, RF24*)::__c>:
    1a0b:	4c 74 32 00                                         Lt2.

00001a0f <MainModule::MainModule(__FlashStringHelper const*, Settings::MainModuleSettings*, RF24*)::__c>:
    1a0f:	4c 74 31 00                                         Lt1.

00001a13 <MainModule::MainModule(__FlashStringHelper const*, Settings::MainModuleSettings*, RF24*)::__c>:
    1a13:	41 70 31 00                                         Ap1.

00001a17 <MainModule::MainModule(__FlashStringHelper const*, Settings::MainModuleSettings*, RF24*)::__c>:
    1a17:	46 61 6e 45 00                                      FanE.

00001a1c <MainModule::MainModule(__FlashStringHelper const*, Settings::MainModuleSettings*, RF24*)::__c>:
    1a1c:	46 61 6e 49 00                                      FanI.

00001a21 <MainModule::MainModule(__FlashStringHelper const*, Settings::MainModuleSettings*, RF24*)::__c>:
    1a21:	53 6f 75 6e 64 31 00                                Sound1.

00001a28 <MainModule::MainModule(__FlashStringHelper const*, Settings::MainModuleSettings*, RF24*)::__c>:
	...

00001a29 <ReservoirModule_Web::sendCommand(void*)::__c>:
    1a29:	3b 20 4e 6f 20 72 65 73 70 6f 6e 73 65 00           ; No response.

00001a37 <ReservoirModule_Web::sendCommand(void*)::__c>:
    1a37:	3b 20 41 63 6b 20 72 65 63 65 69 76 65 64 20 77     ; Ack received w
    1a47:	69 74 68 6f 75 74 20 64 61 74 61 00                 ithout data.

00001a53 <ReservoirModule_Web::sendCommand(void*)::__c>:
    1a53:	53 65 71 75 65 6e 63 65 49 44 20 75 6e 6b 6e 6f     SequenceID unkno
    1a63:	77 6e 00                                            wn.

00001a66 <ReservoirModule_Web::sendCommand(void*)::__c>:
    1a66:	2d 00                                               -.

00001a68 <ReservoirModule_Web::sendCommand(void*)::__c>:
    1a68:	3b 20 44 61 74 61 3a 00                             ; Data:.

00001a70 <ReservoirModule_Web::sendCommand(void*)::__c>:
    1a70:	3b 20 52 65 73 70 6f 6e 73 65 3a 00                 ; Response:.

00001a7c <ReservoirModule_Web::sendCommand(void*)::__c>:
    1a7c:	53 65 6e 64 69 6e 67 3a 00                          Sending:.

00001a85 <ReservoirModule_Web::sendMessages()::__c>:
    1a85:	4d 65 73 73 61 67 65 20 65 78 63 68 61 6e 67 65     Message exchange
    1a95:	20 66 69 6e 69 73 68 65 64 00                        finished.

00001a9f <ReservoirModule_Web::commandEvent(char*, char*)::__c>:
    1a9f:	54 61 72 69 6e 67 20 72 65 73 65 72 76 6f 69 72     Taring reservoir
    1aaf:	20 73 63 61 6c 65 00                                 scale.

00001ab6 <ReservoirModule_Web::commandEvent(char*, char*)::__c>:
    1ab6:	54 00                                               T.

00001ab8 <ReservoirModule_Web::websiteEvent_Refresh(char*)::__c>:
    1ab8:	48 00                                               H.

00001aba <ReservoirModule_Web::websiteEvent_Refresh(char*)::__c>:
    1aba:	41 54 00                                            AT.

00001abd <ReservoirModule_Web::websiteEvent_Refresh(char*)::__c>:
    1abd:	57 54 00                                            WT.

00001ac0 <ReservoirModule_Web::websiteEvent_Refresh(char*)::__c>:
    1ac0:	57 00                                               W.

00001ac2 <ReservoirModule_Web::websiteEvent_Refresh(char*)::__c>:
    1ac2:	54 44 53 00                                         TDS.

00001ac6 <ReservoirModule_Web::websiteEvent_Refresh(char*)::__c>:
    1ac6:	50 48 00                                            PH.

00001ac9 <ReservoirModule_Web::websiteEvent_Refresh(char*)::__c>:
    1ac9:	53 00                                               S.

00001acb <ReservoirModule_Web::report(bool)::__c>:
    1acb:	22 7d 00                                            "}.

00001ace <ReservoirModule_Web::report(bool)::__c>:
    1ace:	22 2c 22 48 22 3a 22 00                             ","H":".

00001ad6 <ReservoirModule_Web::report(bool)::__c>:
    1ad6:	22 2c 22 41 54 22 3a 22 00                          ","AT":".

00001adf <ReservoirModule_Web::report(bool)::__c>:
    1adf:	22 2c 22 57 54 22 3a 22 00                          ","WT":".

00001ae8 <ReservoirModule_Web::report(bool)::__c>:
    1ae8:	22 2c 22 57 22 3a 22 00                             ","W":".

00001af0 <ReservoirModule_Web::report(bool)::__c>:
    1af0:	22 2c 22 54 22 3a 22 00                             ","T":".

00001af8 <ReservoirModule_Web::report(bool)::__c>:
    1af8:	22 2c 22 50 22 3a 22 00                             ","P":".

00001b00 <ReservoirModule_Web::report(bool)::__c>:
    1b00:	22 53 22 3a 22 00                                   "S":".

00001b06 <ReservoirModule_Web::ReservoirModule_Web(__FlashStringHelper const*, MainModule*, Settings::ReservoirModuleSettings*)::__c>:
    1b06:	52 65 73 65 72 76 6f 69 72 4d 6f 64 75 6c 65 5f     ReservoirModule_
    1b16:	57 65 62 20 72 65 61 64 79 00                       Web ready.

00001b20 <toText_reservoirSequenceID(unsigned char)::__c>:
    1b20:	3f 00                                               ?.

00001b22 <toText_reservoirSequenceID(unsigned char)::__c>:
    1b22:	52 52 00                                            RR.

00001b25 <toText_reservoirSequenceID(unsigned char)::__c>:
    1b25:	52 52 31 00                                         RR1.

00001b29 <toText_reservoirSequenceID(unsigned char)::__c>:
    1b29:	52 43 31 00                                         RC1.

00001b2d <toText_reservoirSequenceID(unsigned char)::__c>:
    1b2d:	52 4d 52 31 00                                      RMR1.

00001b32 <toText_reservoirSequenceID(unsigned char)::__c>:
    1b32:	52 4d 43 31 00                                      RMC1.

00001b37 <child_pipe_enable>:
    1b37:	00 01 02 03 04 05                                   ......

00001b3d <_ZZN4RF2418printPrettyDetailsEvE3__c__20_>:
	...

00001b3e <_ZZN4RF2418printPrettyDetailsEvE3__c__19_>:
	...

00001b3f <_ZZN4RF2418printPrettyDetailsEvE3__c__18_>:
    1b3f:	70 69 70 65 20 25 75 20 28 25 53 29 20 62 6f 75     pipe %u (%S) bou
    1b4f:	6e 64 00                                            nd.

00001b52 <_ZZN4RF2418printPrettyDetailsEvE3__c__17_>:
    1b52:	54 58 20 61 64 64 72 65 73 73 09 00                 TX address..

00001b5e <_ZZN4RF2418printPrettyDetailsEvE3__c__16_>:
    1b5e:	50 72 69 6d 61 72 79 20 4d 6f 64 65 09 09 3d 20     Primary Mode..= 
    1b6e:	25 63 58 0d 0a 00                                   %cX...

00001b74 <_ZZN4RF2418printPrettyDetailsEvE3__c__15_>:
    1b74:	41 75 74 6f 20 41 63 6b 6e 6f 77 6c 65 64 67 6d     Auto Acknowledgm
    1b84:	65 6e 74 09 3d 20 30 62 25 63 25 63 25 63 25 63     ent.= 0b%c%c%c%c
    1b94:	25 63 25 63 0d 0a 00                                %c%c...

00001b9b <_ZZN4RF2418printPrettyDetailsEvE3__c__14_>:
    1b9b:	41 75 74 6f 20 41 63 6b 6e 6f 77 6c 65 64 67 6d     Auto Acknowledgm
    1bab:	65 6e 74 09 25 53 0d 0a 00                          ent.%S...

00001bb4 <_ZZN4RF2418printPrettyDetailsEvE3__c__13_>:
    1bb4:	44 79 6e 61 6d 69 63 20 50 61 79 6c 6f 61 64 73     Dynamic Payloads
    1bc4:	09 25 53 0d 0a 00                                   .%S...

00001bca <_ZZN4RF2418printPrettyDetailsEvE3__c__12_>:
    1bca:	43 75 73 74 6f 6d 20 41 43 4b 20 50 61 79 6c 6f     Custom ACK Paylo
    1bda:	61 64 09 25 53 0d 0a 00                             ad.%S...

00001be2 <_ZZN4RF2418printPrettyDetailsEvE3__c__11_>:
    1be2:	4d 75 6c 74 69 63 61 73 74 09 09 25 53 0d 0a 00     Multicast..%S...

00001bf2 <_ZZN4RF2418printPrettyDetailsEvE3__c__10_>:
    1bf2:	52 65 74 72 79 20 61 74 74 65 6d 70 74 73 20 6d     Retry attempts m
    1c02:	61 64 65 20 66 6f 72 0a 20 20 20 20 6c 61 73 74     ade for.    last
    1c12:	20 74 72 61 6e 73 6d 69 73 73 69 6f 6e 09 3d 20      transmission.= 
    1c22:	25 64 0d 0a 00                                      %d...

00001c27 <RF24::printPrettyDetails()::__c>:
    1c27:	50 61 63 6b 65 74 73 20 6c 6f 73 74 20 6f 6e 0a     Packets lost on.
    1c37:	20 20 20 20 63 75 72 72 65 6e 74 20 63 68 61 6e         current chan
    1c47:	6e 65 6c 09 3d 20 25 64 0d 0a 00                    nel.= %d...

00001c52 <RF24::printPrettyDetails()::__c>:
    1c52:	41 75 74 6f 20 52 65 74 72 79 20 41 74 74 65 6d     Auto Retry Attem
    1c62:	70 74 73 09 3d 20 25 64 20 6d 61 78 69 6d 75 6d     pts.= %d maximum
    1c72:	0d 0a 00                                            ...

00001c75 <RF24::printPrettyDetails()::__c>:
    1c75:	41 75 74 6f 20 52 65 74 72 79 20 44 65 6c 61 79     Auto Retry Delay
    1c85:	09 3d 20 25 64 20 6d 69 63 72 6f 73 65 63 6f 6e     .= %d microsecon
    1c95:	64 73 0d 0a 00                                      ds...

00001c9a <RF24::printPrettyDetails()::__c>:
    1c9a:	53 74 61 74 69 63 20 50 61 79 6c 6f 61 64 20 4c     Static Payload L
    1caa:	65 6e 67 74 68 09 3d 20 25 64 20 62 79 74 65 73     ength.= %d bytes
    1cba:	0d 0a 00                                            ...

00001cbd <RF24::printPrettyDetails()::__c>:
    1cbd:	41 64 64 72 65 73 73 20 4c 65 6e 67 74 68 09 09     Address Length..
    1ccd:	3d 20 25 64 20 62 79 74 65 73 0d 0a 00              = %d bytes...

00001cda <RF24::printPrettyDetails()::__c>:
    1cda:	43 52 43 20 4c 65 6e 67 74 68 09 09 25 53 0d 0a     CRC Length..%S..
	...

00001ceb <RF24::printPrettyDetails()::__c>:
    1ceb:	52 46 20 4c 6f 77 20 4e 6f 69 73 65 20 41 6d 70     RF Low Noise Amp
    1cfb:	6c 69 66 69 65 72 09 25 53 0d 0a 00                 lifier.%S...

00001d07 <RF24::printPrettyDetails()::__c>:
    1d07:	52 46 20 50 6f 77 65 72 20 41 6d 70 6c 69 66 69     RF Power Amplifi
    1d17:	65 72 09 25 53 0d 0a 00                             er.%S...

00001d1f <RF24::printPrettyDetails()::__c>:
    1d1f:	52 46 20 44 61 74 61 20 52 61 74 65 09 09 25 53     RF Data Rate..%S
    1d2f:	0d 0a 00                                            ...

00001d32 <RF24::printPrettyDetails()::__c>:
    1d32:	43 68 61 6e 6e 65 6c 09 09 09 3d 20 25 75 20 28     Channel...= %u (
    1d42:	7e 20 25 75 20 4d 48 7a 29 0d 0a 00                 ~ %u MHz)...

00001d4e <RF24::printPrettyDetails()::__c>:
    1d4e:	53 50 49 20 46 72 65 71 75 65 6e 63 79 09 09 3d     SPI Frequency..=
    1d5e:	20 25 64 20 4d 68 7a 0a 00                           %d Mhz..

00001d67 <rf24_feature_e_str_P>:
    1d67:	d9 1d 89 1d 7f 1d 71 1d 78 1d                       ......q.x.

00001d71 <rf24_feature_e_str_closed>:
    1d71:	63 6c 6f 73 65 64 00                                closed.

00001d78 <rf24_feature_e_str_open>:
    1d78:	20 6f 70 65 6e 20 00                                 open .

00001d7f <rf24_feature_e_str_allowed>:
    1d7f:	3d 20 41 6c 6c 6f 77 65 64 00                       = Allowed.

00001d89 <rf24_feature_e_str_on>:
    1d89:	3d 20 45 6e 61 62 6c 65 64 00                       = Enabled.

00001d93 <rf24_pa_dbm_e_str_P>:
    1d93:	b7 1d ae 1d a4 1d 9b 1d                             ........

00001d9b <rf24_pa_dbm_e_str_3>:
    1d9b:	3d 20 50 41 5f 4d 41 58 00                          = PA_MAX.

00001da4 <rf24_pa_dbm_e_str_2>:
    1da4:	3d 20 50 41 5f 48 49 47 48 00                       = PA_HIGH.

00001dae <rf24_pa_dbm_e_str_1>:
    1dae:	3d 20 50 41 5f 4c 4f 57 00                          = PA_LOW.

00001db7 <rf24_pa_dbm_e_str_0>:
    1db7:	3d 20 50 41 5f 4d 49 4e 00                          = PA_MIN.

00001dc0 <rf24_crclength_e_str_P>:
    1dc0:	d9 1d d0 1d c6 1d                                   ......

00001dc6 <rf24_crclength_e_str_2>:
    1dc6:	3d 20 31 36 20 62 69 74 73 00                       = 16 bits.

00001dd0 <rf24_crclength_e_str_1>:
    1dd0:	3d 20 38 20 62 69 74 73 00                          = 8 bits.

00001dd9 <rf24_crclength_e_str_0>:
    1dd9:	3d 20 44 69 73 61 62 6c 65 64 00                    = Disabled.

00001de4 <rf24_datarate_e_str_P>:
    1de4:	fe 1d f5 1d ea 1d                                   ......

00001dea <rf24_datarate_e_str_2>:
    1dea:	3d 20 32 35 30 20 4b 42 50 53 00                    = 250 KBPS.

00001df5 <rf24_datarate_e_str_1>:
    1df5:	3d 20 32 20 4d 42 50 53 00                          = 2 MBPS.

00001dfe <rf24_datarate_e_str_0>:
    1dfe:	3d 20 31 20 4d 42 50 53 00                          = 1 MBPS.

00001e07 <RF24::print_address_register(char const*, unsigned char, unsigned char)::__c>:
    1e07:	0d 0a 00                                            ...

00001e0a <RF24::print_address_register(char const*, unsigned char, unsigned char)::__c>:
    1e0a:	25 30 32 78 00                                      %02x.

00001e0f <RF24::print_address_register(char const*, unsigned char, unsigned char)::__c>:
    1e0f:	20 30 78 00                                          0x.

00001e13 <RF24::print_address_register(char const*, unsigned char, unsigned char)::__c>:
    1e13:	25 53 09 3d 00                                      %S.=.

00001e18 <RF24::print_byte_register(char const*, unsigned char, unsigned char)::__c>:
    1e18:	0d 0a 00                                            ...

00001e1b <RF24::print_byte_register(char const*, unsigned char, unsigned char)::__c>:
    1e1b:	20 30 78 25 30 32 78 00                              0x%02x.

00001e23 <RF24::print_byte_register(char const*, unsigned char, unsigned char)::__c>:
    1e23:	25 53 09 3d 00                                      %S.=.

00001e28 <ELClientMqtt::setup()::__c>:
    1e28:	43 6f 6e 6e 65 63 74 65 64 43 42 20 69 73 20 30     ConnectedCB is 0
    1e38:	78 00                                               x.

00001e3a <ELClientWebServer::getArgBoolean()::__c>:
    1e3a:	31 00                                               1.

00001e3c <ELClientWebServer::getArgBoolean()::__c>:
    1e3c:	79 65 73 00                                         yes.

00001e40 <ELClientWebServer::getArgBoolean()::__c>:
    1e40:	74 72 75 65 00                                      true.

00001e45 <ELClientWebServer::getArgBoolean()::__c>:
    1e45:	6f 6e 00                                            on.

00001e48 <ELClientWebServer::processResponse(ELClientResponse*)::__c>:
    1e48:	48 61 6e 64 6c 65 72 20 6e 6f 74 20 66 6f 75 6e     Handler not foun
    1e58:	64 20 66 6f 72 20 55 52 4c 3a 00                    d for URL:.

00001e63 <crcTable>:
    1e63:	00 00 c1 c0 81 c1 40 01 01 c3 c0 03 80 02 41 c2     ......@.......A.
    1e73:	01 c6 c0 06 80 07 41 c7 00 05 c1 c5 81 c4 40 04     ......A.......@.
    1e83:	01 cc c0 0c 80 0d 41 cd 00 0f c1 cf 81 ce 40 0e     ......A.......@.
    1e93:	00 0a c1 ca 81 cb 40 0b 01 c9 c0 09 80 08 41 c8     ......@.......A.
    1ea3:	01 d8 c0 18 80 19 41 d9 00 1b c1 db 81 da 40 1a     ......A.......@.
    1eb3:	00 1e c1 de 81 df 40 1f 01 dd c0 1d 80 1c 41 dc     ......@.......A.
    1ec3:	00 14 c1 d4 81 d5 40 15 01 d7 c0 17 80 16 41 d6     ......@.......A.
    1ed3:	01 d2 c0 12 80 13 41 d3 00 11 c1 d1 81 d0 40 10     ......A.......@.
    1ee3:	01 f0 c0 30 80 31 41 f1 00 33 c1 f3 81 f2 40 32     ...0.1A..3....@2
    1ef3:	00 36 c1 f6 81 f7 40 37 01 f5 c0 35 80 34 41 f4     .6....@7...5.4A.
    1f03:	00 3c c1 fc 81 fd 40 3d 01 ff c0 3f 80 3e 41 fe     .<....@=...?.>A.
    1f13:	01 fa c0 3a 80 3b 41 fb 00 39 c1 f9 81 f8 40 38     ...:.;A..9....@8
    1f23:	00 28 c1 e8 81 e9 40 29 01 eb c0 2b 80 2a 41 ea     .(....@)...+.*A.
    1f33:	01 ee c0 2e 80 2f 41 ef 00 2d c1 ed 81 ec 40 2c     ...../A..-....@,
    1f43:	01 e4 c0 24 80 25 41 e5 00 27 c1 e7 81 e6 40 26     ...$.%A..'....@&
    1f53:	00 22 c1 e2 81 e3 40 23 01 e1 c0 21 80 20 41 e0     ."....@#...!. A.
    1f63:	01 a0 c0 60 80 61 41 a1 00 63 c1 a3 81 a2 40 62     ...`.aA..c....@b
    1f73:	00 66 c1 a6 81 a7 40 67 01 a5 c0 65 80 64 41 a4     .f....@g...e.dA.
    1f83:	00 6c c1 ac 81 ad 40 6d 01 af c0 6f 80 6e 41 ae     .l....@m...o.nA.
    1f93:	01 aa c0 6a 80 6b 41 ab 00 69 c1 a9 81 a8 40 68     ...j.kA..i....@h
    1fa3:	00 78 c1 b8 81 b9 40 79 01 bb c0 7b 80 7a 41 ba     .x....@y...{.zA.
    1fb3:	01 be c0 7e 80 7f 41 bf 00 7d c1 bd 81 bc 40 7c     ...~..A..}....@|
    1fc3:	01 b4 c0 74 80 75 41 b5 00 77 c1 b7 81 b6 40 76     ...t.uA..w....@v
    1fd3:	00 72 c1 b2 81 b3 40 73 01 b1 c0 71 80 70 41 b0     .r....@s...q.pA.
    1fe3:	00 50 c1 90 81 91 40 51 01 93 c0 53 80 52 41 92     .P....@Q...S.RA.
    1ff3:	01 96 c0 56 80 57 41 97 00 55 c1 95 81 94 40 54     ...V.WA..U....@T
    2003:	01 9c c0 5c 80 5d 41 9d 00 5f c1 9f 81 9e 40 5e     ...\.]A.._....@^
    2013:	00 5a c1 9a 81 9b 40 5b 01 99 c0 59 80 58 41 98     .Z....@[...Y.XA.
    2023:	01 88 c0 48 80 49 41 89 00 4b c1 8b 81 8a 40 4a     ...H.IA..K....@J
    2033:	00 4e c1 8e 81 8f 40 4f 01 8d c0 4d 80 4c 41 8c     .N....@O...M.LA.
    2043:	00 44 c1 84 81 85 40 45 01 87 c0 47 80 46 41 86     .D....@E...G.FA.
    2053:	01 82 c0 42 80 43 41 83 00 41 c1 81 81 80 40 40     ...B.CA..A....@@

00002063 <digital_pin_to_timer_PGM>:
    2063:	00 00 0b 0c 03 0a 0d 0e 0f 09 08 04 05 02 00 00     ................
	...
    208f:	13 12 11 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
	...

000020b9 <digital_pin_to_bit_mask_PGM>:
    20b9:	01 02 10 20 20 08 08 10 20 40 10 20 40 80 02 01     ...  ... @. @...
    20c9:	02 01 08 04 02 01 01 02 04 08 10 20 40 80 80 40     ........... @..@
    20d9:	20 10 08 04 02 01 80 04 02 01 80 40 20 10 08 04      ..........@ ...
    20e9:	02 01 08 04 02 01 01 02 04 08 10 20 40 80 01 02     ........... @...
    20f9:	04 08 10 20 40 80 04 40 80 04 80 08 10 10 20 40     ... @..@...... @
    2109:	04 08 10 20 40 80                                   ... @.

0000210f <digital_pin_to_port_PGM>:
    210f:	05 05 05 05 07 05 08 08 08 08 02 02 02 02 0a 0a     ................
    211f:	08 08 04 04 04 04 01 01 01 01 01 01 01 01 03 03     ................
    212f:	03 03 03 03 03 03 04 07 07 07 0c 0c 0c 0c 0c 0c     ................
    213f:	0c 0c 02 02 02 02 06 06 06 06 06 06 06 06 0b 0b     ................
    214f:	0b 0b 0b 0b 0b 0b 05 05 05 08 08 07 07 04 04 04     ................
    215f:	0a 0a 0a 0a 0a 0a                                   ......

00002165 <port_to_input_PGM>:
    2165:	00 00 20 00 23 00 26 00 29 00 2c 00 2f 00 32 00     .. .#.&.).,./.2.
    2175:	00 01 00 00 03 01 06 01 09 01                       ..........

0000217f <port_to_output_PGM>:
    217f:	00 00 22 00 25 00 28 00 2b 00 2e 00 31 00 34 00     ..".%.(.+...1.4.
    218f:	02 01 00 00 05 01 08 01 0b 01                       ..........

00002199 <port_to_mode_PGM>:
    2199:	00 00 21 00 24 00 27 00 2a 00 2d 00 30 00 33 00     ..!.$.'.*.-.0.3.
    21a9:	01 01 00 00 04 01 07 01 0a 01 00                    ...........

000021b4 <__ctors_start>:
__ctors_start():
    21b4:	14 16       	cp	r1, r20
    21b6:	16 41       	sbci	r17, 0x16	; 22
    21b8:	f2 4a       	sbci	r31, 0xA2	; 162
    21ba:	92 58       	subi	r25, 0x82	; 130
    21bc:	4a 64       	ori	r20, 0x4A	; 74
    21be:	d5 89       	ldd	r29, Z+21	; 0x15
    21c0:	6c 8a       	std	Y+20, r6	; 0x14
    21c2:	03 8b       	std	Z+19, r16	; 0x13

000021c4 <__ctors_end>:
__ctors_end():
    21c4:	11 24       	eor	r1, r1
    21c6:	1f be       	out	0x3f, r1	; 63
    21c8:	cf ef       	ldi	r28, 0xFF	; 255
    21ca:	d1 e2       	ldi	r29, 0x21	; 33
    21cc:	de bf       	out	0x3e, r29	; 62
    21ce:	cd bf       	out	0x3d, r28	; 61
    21d0:	00 e0       	ldi	r16, 0x00	; 0
    21d2:	0c bf       	out	0x3c, r16	; 60

000021d4 <__do_copy_data>:
__do_copy_data():
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2373
    21d4:	1b e0       	ldi	r17, 0x0B	; 11
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2374
    21d6:	a0 e0       	ldi	r26, 0x00	; 0
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2375
    21d8:	b2 e0       	ldi	r27, 0x02	; 2
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2376
    21da:	ea e8       	ldi	r30, 0x8A	; 138
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2377
    21dc:	fa e3       	ldi	r31, 0x3A	; 58
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2378
    21de:	01 e0       	ldi	r16, 0x01	; 1
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2379
    21e0:	0b bf       	out	0x3b, r16	; 59
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2380
    21e2:	02 c0       	rjmp	.+4      	; 0x21e8 <__do_copy_data+0x14>
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2382
    21e4:	07 90       	elpm	r0, Z+
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2383
    21e6:	0d 92       	st	X+, r0
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2385
    21e8:	a8 33       	cpi	r26, 0x38	; 56
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2386
    21ea:	b1 07       	cpc	r27, r17
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2387
    21ec:	d9 f7       	brne	.-10     	; 0x21e4 <__do_copy_data+0x10>

000021ee <__do_clear_bss>:
__do_clear_bss():
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2441
    21ee:	27 e1       	ldi	r18, 0x17	; 23
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2442
    21f0:	a8 e3       	ldi	r26, 0x38	; 56
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2443
    21f2:	bb e0       	ldi	r27, 0x0B	; 11
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2444
    21f4:	01 c0       	rjmp	.+2      	; 0x21f8 <.do_clear_bss_start>

000021f6 <.do_clear_bss_loop>:
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2446
    21f6:	1d 92       	st	X+, r1

000021f8 <.do_clear_bss_start>:
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2448
    21f8:	a7 33       	cpi	r26, 0x37	; 55
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2449
    21fa:	b2 07       	cpc	r27, r18
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2450
    21fc:	e1 f7       	brne	.-8      	; 0x21f6 <.do_clear_bss_loop>

000021fe <__do_global_ctors>:
__do_global_ctors():
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2466
    21fe:	10 e1       	ldi	r17, 0x10	; 16
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2467
    2200:	c2 ee       	ldi	r28, 0xE2	; 226
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2468
    2202:	d0 e1       	ldi	r29, 0x10	; 16
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2470
    2204:	00 e0       	ldi	r16, 0x00	; 0
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2472
    2206:	06 c0       	rjmp	.+12     	; 0x2214 <__stack+0x15>
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2474
    2208:	21 97       	sbiw	r28, 0x01	; 1
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2476
    220a:	01 09       	sbc	r16, r1
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2477
    220c:	80 2f       	mov	r24, r16
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2480
    220e:	fe 01       	movw	r30, r28
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2481
    2210:	0e 94 2b 92 	call	0x12456	; 0x12456 <__tablejump2__>
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2483
    2214:	ca 3d       	cpi	r28, 0xDA	; 218
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2484
    2216:	d1 07       	cpc	r29, r17
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2486
    2218:	80 e0       	ldi	r24, 0x00	; 0
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2487
    221a:	08 07       	cpc	r16, r24
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2489
    221c:	a9 f7       	brne	.-22     	; 0x2208 <__stack+0x9>
    221e:	0e 94 5e 8f 	call	0x11ebc	; 0x11ebc <main>
    2222:	0c 94 43 9d 	jmp	0x13a86	; 0x13a86 <_exit>

00002226 <__bad_interrupt>:
__vector_30():
    2226:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000222a <mqttDisconnected(void*)>:
_Z16mqttDisconnectedPv():
b:\Gbox420\Gbox420\Gbox420_Mega_Main/Gbox420_Mega_Main.ino:226
}

void mqttDisconnected(__attribute__((unused)) void *response)
{
  //if(*Debug) logToSerials(F("MQTT disconnected"), true);
  MqttConnected = false;
    222a:	10 92 b4 0c 	sts	0x0CB4, r1	; 0x800cb4 <MqttConnected>
b:\Gbox420\Gbox420\Gbox420_Mega_Main/Gbox420_Mega_Main.ino:227
}
    222e:	08 95       	ret

00002230 <mqttPublished(void*)>:
_Z13mqttPublishedPv():
b:\Gbox420\Gbox420\Gbox420_Mega_Main/Gbox420_Mega_Main.ino:232

void mqttPublished(__attribute__((unused)) void *response)
{
  //if(*Debug) logToSerials(F("MQTT published"), true);
}
    2230:	08 95       	ret

00002232 <processTimeCriticalStuff()>:
_Z24processTimeCriticalStuffv():
b:\Gbox420\Gbox420\Gbox420_Mega_Main/Gbox420_Mega_Main.ino:126
  ThreadControl.run(); ///< loop only checks if it's time to trigger one of the threads (runSec(), runFiveSec(),runMinute()..etc)
}

void processTimeCriticalStuff()
{
  ESPLink.Process(); ///< Interrupt calls this every 0.5 sec to process any request coming from the ESP-Link hosted webpage. Uses Serial Line Internet Protocol (SLIP)
    2232:	8b ef       	ldi	r24, 0xFB	; 251
    2234:	9c e0       	ldi	r25, 0x0C	; 12
    2236:	0c 94 4d 6f 	jmp	0xde9a	; 0xde9a <ELClient::Process()>

0000223a <runFiveSec()>:
_Z10runFiveSecv():
b:\Gbox420\Gbox420\Gbox420_Mega_Main/Gbox420_Mega_Main.ino:140
  Main1->runSec();
}

void runFiveSec()
{
  wdt_reset();
    223a:	a8 95       	wdr
b:\Gbox420\Gbox420\Gbox420_Mega_Main/Gbox420_Mega_Main.ino:141
  Main1->runFiveSec();
    223c:	a0 91 b2 0c 	lds	r26, 0x0CB2	; 0x800cb2 <Main1>
    2240:	b0 91 b3 0c 	lds	r27, 0x0CB3	; 0x800cb3 <Main1+0x1>
    2244:	ed 91       	ld	r30, X+
    2246:	fc 91       	ld	r31, X
    2248:	11 97       	sbiw	r26, 0x01	; 1
    224a:	72 97       	sbiw	r30, 0x12	; 18
    224c:	80 81       	ld	r24, Z
    224e:	91 81       	ldd	r25, Z+1	; 0x01
    2250:	8a 0f       	add	r24, r26
    2252:	9b 1f       	adc	r25, r27
    2254:	0c 94 93 1a 	jmp	0x3526	; 0x3526 <Module::runFiveSec()>

00002258 <resetWebServer()>:
_Z14resetWebServerv():
b:\Gbox420\Gbox420\Gbox420_Mega_Main/Gbox420_Mega_Main.ino:167

/**
  \brief (re-)Initialize the ESP-link connection
*/
void resetWebServer()
{ ///<  Callback made from esp-link to notify that it has just come out of a reset
    2258:	cf 93       	push	r28
    225a:	df 93       	push	r29
b:\Gbox420\Gbox420\Gbox420_Mega_Main/Gbox420_Mega_Main.ino:168
  logToSerials(F("(re)Connecting ESP-link"), false, 1);
    225c:	41 e0       	ldi	r20, 0x01	; 1
    225e:	60 e0       	ldi	r22, 0x00	; 0
    2260:	8b e4       	ldi	r24, 0x4B	; 75
    2262:	96 e0       	ldi	r25, 0x06	; 6
    2264:	0e 94 85 16 	call	0x2d0a	; 0x2d0a <logToSerials(__FlashStringHelper const*, bool, unsigned char)>
b:\Gbox420\Gbox420\Gbox420_Mega_Main/Gbox420_Mega_Main.ino:169
  while (!ESPLink.Sync())
    2268:	40 ed       	ldi	r20, 0xD0	; 208
    226a:	57 e0       	ldi	r21, 0x07	; 7
    226c:	60 e0       	ldi	r22, 0x00	; 0
    226e:	70 e0       	ldi	r23, 0x00	; 0
    2270:	8b ef       	ldi	r24, 0xFB	; 251
    2272:	9c e0       	ldi	r25, 0x0C	; 12
    2274:	0e 94 b3 70 	call	0xe166	; 0xe166 <ELClient::Sync(unsigned long)>
b:\Gbox420\Gbox420\Gbox420_Mega_Main/Gbox420_Mega_Main.ino:171
  {
    logToSerials(F("."), false, 0);
    2278:	40 e0       	ldi	r20, 0x00	; 0
b:\Gbox420\Gbox420\Gbox420_Mega_Main/Gbox420_Mega_Main.ino:169
  \brief (re-)Initialize the ESP-link connection
*/
void resetWebServer()
{ ///<  Callback made from esp-link to notify that it has just come out of a reset
  logToSerials(F("(re)Connecting ESP-link"), false, 1);
  while (!ESPLink.Sync())
    227a:	81 11       	cpse	r24, r1
    227c:	0c c0       	rjmp	.+24     	; 0x2296 <resetWebServer()+0x3e>
b:\Gbox420\Gbox420\Gbox420_Mega_Main/Gbox420_Mega_Main.ino:171
  {
    logToSerials(F("."), false, 0);
    227e:	60 e0       	ldi	r22, 0x00	; 0
    2280:	89 e4       	ldi	r24, 0x49	; 73
    2282:	96 e0       	ldi	r25, 0x06	; 6
    2284:	0e 94 85 16 	call	0x2d0a	; 0x2d0a <logToSerials(__FlashStringHelper const*, bool, unsigned char)>
b:\Gbox420\Gbox420\Gbox420_Mega_Main/Gbox420_Mega_Main.ino:172
    delay(1000);
    2288:	68 ee       	ldi	r22, 0xE8	; 232
    228a:	73 e0       	ldi	r23, 0x03	; 3
    228c:	80 e0       	ldi	r24, 0x00	; 0
    228e:	90 e0       	ldi	r25, 0x00	; 0
    2290:	0e 94 98 85 	call	0x10b30	; 0x10b30 <delay>
b:\Gbox420\Gbox420\Gbox420_Mega_Main/Gbox420_Mega_Main.ino:169
  \brief (re-)Initialize the ESP-link connection
*/
void resetWebServer()
{ ///<  Callback made from esp-link to notify that it has just come out of a reset
  logToSerials(F("(re)Connecting ESP-link"), false, 1);
  while (!ESPLink.Sync())
    2294:	e9 cf       	rjmp	.-46     	; 0x2268 <resetWebServer()+0x10>
b:\Gbox420\Gbox420\Gbox420_Mega_Main/Gbox420_Mega_Main.ino:174
  {
    logToSerials(F("."), false, 0);
    delay(1000);
  };
  logToSerials(F(""), true, 0);                           ///< line break
    2296:	61 e0       	ldi	r22, 0x01	; 1
    2298:	88 e4       	ldi	r24, 0x48	; 72
    229a:	96 e0       	ldi	r25, 0x06	; 6
    229c:	0e 94 85 16 	call	0x2d0a	; 0x2d0a <logToSerials(__FlashStringHelper const*, bool, unsigned char)>
b:\Gbox420\Gbox420\Gbox420_Mega_Main/Gbox420_Mega_Main.ino:175
  if (PushingBoxRestAPI.begin("api.pushingbox.com") == 0) ///< Pre-setup relay to Google Sheets
    22a0:	20 e0       	ldi	r18, 0x00	; 0
    22a2:	40 e5       	ldi	r20, 0x50	; 80
    22a4:	50 e0       	ldi	r21, 0x00	; 0
    22a6:	6b ed       	ldi	r22, 0xDB	; 219
    22a8:	73 e0       	ldi	r23, 0x03	; 3
    22aa:	85 ed       	ldi	r24, 0xD5	; 213
    22ac:	9c e0       	ldi	r25, 0x0C	; 12
    22ae:	0e 94 2a 74 	call	0xe854	; 0xe854 <ELClientRest::begin(char const*, unsigned int, bool)>
b:\Gbox420\Gbox420\Gbox420_Mega_Main/Gbox420_Mega_Main.ino:177
  {
    logToSerials(F("PushingBox RestAPI ready"), true, 2);
    22b2:	42 e0       	ldi	r20, 0x02	; 2
    22b4:	61 e0       	ldi	r22, 0x01	; 1
b:\Gbox420\Gbox420\Gbox420_Mega_Main/Gbox420_Mega_Main.ino:175
  {
    logToSerials(F("."), false, 0);
    delay(1000);
  };
  logToSerials(F(""), true, 0);                           ///< line break
  if (PushingBoxRestAPI.begin("api.pushingbox.com") == 0) ///< Pre-setup relay to Google Sheets
    22b6:	89 2b       	or	r24, r25
    22b8:	09 f0       	breq	.+2      	; 0x22bc <resetWebServer()+0x64>
    22ba:	5e c0       	rjmp	.+188    	; 0x2378 <resetWebServer()+0x120>
b:\Gbox420\Gbox420\Gbox420_Mega_Main/Gbox420_Mega_Main.ino:177
  {
    logToSerials(F("PushingBox RestAPI ready"), true, 2);
    22bc:	8f e2       	ldi	r24, 0x2F	; 47
    22be:	96 e0       	ldi	r25, 0x06	; 6
b:\Gbox420\Gbox420\Gbox420_Mega_Main/Gbox420_Mega_Main.ino:180
  }
  else
    logToSerials(F("PushingBox RestAPI failed"), true, 2); ///< If begin returns a negative number the initialization failed
    22c0:	0e 94 85 16 	call	0x2d0a	; 0x2d0a <logToSerials(__FlashStringHelper const*, bool, unsigned char)>
b:\Gbox420\Gbox420\Gbox420_Mega_Main/Gbox420_Mega_Main.ino:181
  WebServer.setup();
    22c4:	89 ee       	ldi	r24, 0xE9	; 233
    22c6:	9c e0       	ldi	r25, 0x0C	; 12
    22c8:	0e 94 a0 75 	call	0xeb40	; 0xeb40 <ELClientWebServer::setup()>
b:\Gbox420\Gbox420\Gbox420_Mega_Main/Gbox420_Mega_Main.ino:182
  URLHandler *GrowBoxHandler = WebServer.createURLHandler("/Main.html.json");      ///< setup handling request from GrowBox.html
    22cc:	6e ee       	ldi	r22, 0xEE	; 238
    22ce:	73 e0       	ldi	r23, 0x03	; 3
    22d0:	89 ee       	ldi	r24, 0xE9	; 233
    22d2:	9c e0       	ldi	r25, 0x0C	; 12
    22d4:	0e 94 7c 75 	call	0xeaf8	; 0xeaf8 <ELClientWebServer::createURLHandler(char const*)>
    22d8:	ec 01       	movw	r28, r24
b:\Gbox420\Gbox420\Gbox420_Mega_Main/Gbox420_Mega_Main.ino:183
  GrowBoxHandler->loadCb.attach(&loadCallback);                                    ///< GrowBox tab - Called then the website loads initially
    22da:	6e ec       	ldi	r22, 0xCE	; 206
    22dc:	71 e1       	ldi	r23, 0x11	; 17
    22de:	06 96       	adiw	r24, 0x06	; 6
    22e0:	0e 94 0d 7a 	call	0xf41a	; 0xf41a <FP<void, char*>::attach(void (*)(char*))>
b:\Gbox420\Gbox420\Gbox420_Mega_Main/Gbox420_Mega_Main.ino:184
  GrowBoxHandler->refreshCb.attach(&refreshCallback);                              ///< GrowBox tab - Called periodically to refresh website content
    22e4:	6e ed       	ldi	r22, 0xDE	; 222
    22e6:	71 e1       	ldi	r23, 0x11	; 17
    22e8:	ce 01       	movw	r24, r28
    22ea:	0c 96       	adiw	r24, 0x0c	; 12
    22ec:	0e 94 0d 7a 	call	0xf41a	; 0xf41a <FP<void, char*>::attach(void (*)(char*))>
b:\Gbox420\Gbox420\Gbox420_Mega_Main/Gbox420_Mega_Main.ino:185
  GrowBoxHandler->buttonCb.attach(&buttonCallback);                                ///< GrowBox tab - Called when a button is pressed on the website
    22f0:	6e ee       	ldi	r22, 0xEE	; 238
    22f2:	71 e1       	ldi	r23, 0x11	; 17
    22f4:	ce 01       	movw	r24, r28
    22f6:	48 96       	adiw	r24, 0x18	; 24
    22f8:	0e 94 0d 7a 	call	0xf41a	; 0xf41a <FP<void, char*>::attach(void (*)(char*))>
b:\Gbox420\Gbox420\Gbox420_Mega_Main/Gbox420_Mega_Main.ino:186
  GrowBoxHandler->setFieldCb.attach(&fieldCallback);                               ///< GrowBox tab - Called when a field is changed on the website
    22fc:	6a e1       	ldi	r22, 0x1A	; 26
    22fe:	72 e1       	ldi	r23, 0x12	; 18
    2300:	ce 01       	movw	r24, r28
    2302:	42 96       	adiw	r24, 0x12	; 18
    2304:	0e 94 0d 7a 	call	0xf41a	; 0xf41a <FP<void, char*>::attach(void (*)(char*))>
b:\Gbox420\Gbox420\Gbox420_Mega_Main/Gbox420_Mega_Main.ino:187
  URLHandler *SettingsHandler = WebServer.createURLHandler("/Settings.html.json"); ///< setup handling request from Settings.html
    2308:	6e ef       	ldi	r22, 0xFE	; 254
    230a:	73 e0       	ldi	r23, 0x03	; 3
    230c:	89 ee       	ldi	r24, 0xE9	; 233
    230e:	9c e0       	ldi	r25, 0x0C	; 12
    2310:	0e 94 7c 75 	call	0xeaf8	; 0xeaf8 <ELClientWebServer::createURLHandler(char const*)>
    2314:	ec 01       	movw	r28, r24
b:\Gbox420\Gbox420\Gbox420_Mega_Main/Gbox420_Mega_Main.ino:188
  SettingsHandler->loadCb.attach(&settingsLoadCallback);                           ///< Settings tab - Called then the website loads initially
    2316:	63 e4       	ldi	r22, 0x43	; 67
    2318:	72 e1       	ldi	r23, 0x12	; 18
    231a:	06 96       	adiw	r24, 0x06	; 6
    231c:	0e 94 0d 7a 	call	0xf41a	; 0xf41a <FP<void, char*>::attach(void (*)(char*))>
b:\Gbox420\Gbox420\Gbox420_Mega_Main/Gbox420_Mega_Main.ino:189
  SettingsHandler->refreshCb.attach(&settingsRefreshCallback);                     ///< Settings tab - Called periodically to refresh website content
    2320:	63 e5       	ldi	r22, 0x53	; 83
    2322:	72 e1       	ldi	r23, 0x12	; 18
    2324:	ce 01       	movw	r24, r28
    2326:	0c 96       	adiw	r24, 0x0c	; 12
    2328:	0e 94 0d 7a 	call	0xf41a	; 0xf41a <FP<void, char*>::attach(void (*)(char*))>
b:\Gbox420\Gbox420\Gbox420_Mega_Main/Gbox420_Mega_Main.ino:190
  SettingsHandler->buttonCb.attach(&settingsButtonCallback);                       ///< Settings tab - Called when a button is pressed on the website
    232c:	6e e8       	ldi	r22, 0x8E	; 142
    232e:	75 e1       	ldi	r23, 0x15	; 21
    2330:	ce 01       	movw	r24, r28
    2332:	48 96       	adiw	r24, 0x18	; 24
    2334:	0e 94 0d 7a 	call	0xf41a	; 0xf41a <FP<void, char*>::attach(void (*)(char*))>
b:\Gbox420\Gbox420\Gbox420_Mega_Main/Gbox420_Mega_Main.ino:191
  SettingsHandler->setFieldCb.attach(&settingsFieldCallback);                      ///< Settings tab - Called when a field is changed on the website
    2338:	65 ed       	ldi	r22, 0xD5	; 213
    233a:	75 e1       	ldi	r23, 0x15	; 21
    233c:	ce 01       	movw	r24, r28
    233e:	42 96       	adiw	r24, 0x12	; 18
    2340:	0e 94 0d 7a 	call	0xf41a	; 0xf41a <FP<void, char*>::attach(void (*)(char*))>
b:\Gbox420\Gbox420\Gbox420_Mega_Main/Gbox420_Mega_Main.ino:192
  URLHandler *HempyHandler = WebServer.createURLHandler("/Hempy.html.json");       ///< setup handling request from Hempy.html (embeds the Stand-alone Hempy module's web interface)
    2344:	62 e1       	ldi	r22, 0x12	; 18
    2346:	74 e0       	ldi	r23, 0x04	; 4
    2348:	89 ee       	ldi	r24, 0xE9	; 233
    234a:	9c e0       	ldi	r25, 0x0C	; 12
    234c:	0e 94 7c 75 	call	0xeaf8	; 0xeaf8 <ELClientWebServer::createURLHandler(char const*)>
    2350:	ec 01       	movw	r28, r24
b:\Gbox420\Gbox420\Gbox420_Mega_Main/Gbox420_Mega_Main.ino:193
  HempyHandler->loadCb.attach(&ignoreCallback);                                    ///< Ignore event, handled by the Stand-alone Hempy module
    2352:	60 ec       	ldi	r22, 0xC0	; 192
    2354:	72 e1       	ldi	r23, 0x12	; 18
    2356:	06 96       	adiw	r24, 0x06	; 6
    2358:	0e 94 0d 7a 	call	0xf41a	; 0xf41a <FP<void, char*>::attach(void (*)(char*))>
b:\Gbox420\Gbox420\Gbox420_Mega_Main/Gbox420_Mega_Main.ino:194
  HempyHandler->refreshCb.attach(&ignoreCallback);                                 ///< Ignore event, handled by the Stand-alone Hempy module
    235c:	60 ec       	ldi	r22, 0xC0	; 192
    235e:	72 e1       	ldi	r23, 0x12	; 18
    2360:	ce 01       	movw	r24, r28
    2362:	0c 96       	adiw	r24, 0x0c	; 12
    2364:	0e 94 0d 7a 	call	0xf41a	; 0xf41a <FP<void, char*>::attach(void (*)(char*))>
b:\Gbox420\Gbox420\Gbox420_Mega_Main/Gbox420_Mega_Main.ino:196

  logToSerials(F("ESP-link ready"), true, 1);
    2368:	41 e0       	ldi	r20, 0x01	; 1
    236a:	61 e0       	ldi	r22, 0x01	; 1
    236c:	86 e0       	ldi	r24, 0x06	; 6
    236e:	96 e0       	ldi	r25, 0x06	; 6
b:\Gbox420\Gbox420\Gbox420_Mega_Main/Gbox420_Mega_Main.ino:197
}
    2370:	df 91       	pop	r29
    2372:	cf 91       	pop	r28
b:\Gbox420\Gbox420\Gbox420_Mega_Main/Gbox420_Mega_Main.ino:196
  SettingsHandler->setFieldCb.attach(&settingsFieldCallback);                      ///< Settings tab - Called when a field is changed on the website
  URLHandler *HempyHandler = WebServer.createURLHandler("/Hempy.html.json");       ///< setup handling request from Hempy.html (embeds the Stand-alone Hempy module's web interface)
  HempyHandler->loadCb.attach(&ignoreCallback);                                    ///< Ignore event, handled by the Stand-alone Hempy module
  HempyHandler->refreshCb.attach(&ignoreCallback);                                 ///< Ignore event, handled by the Stand-alone Hempy module

  logToSerials(F("ESP-link ready"), true, 1);
    2374:	0c 94 85 16 	jmp	0x2d0a	; 0x2d0a <logToSerials(__FlashStringHelper const*, bool, unsigned char)>
b:\Gbox420\Gbox420\Gbox420_Mega_Main/Gbox420_Mega_Main.ino:180
  if (PushingBoxRestAPI.begin("api.pushingbox.com") == 0) ///< Pre-setup relay to Google Sheets
  {
    logToSerials(F("PushingBox RestAPI ready"), true, 2);
  }
  else
    logToSerials(F("PushingBox RestAPI failed"), true, 2); ///< If begin returns a negative number the initialization failed
    2378:	85 e1       	ldi	r24, 0x15	; 21
    237a:	96 e0       	ldi	r25, 0x06	; 6
    237c:	a1 cf       	rjmp	.-190    	; 0x22c0 <resetWebServer()+0x68>

0000237e <mqttConnected(void*)>:
_Z13mqttConnectedPv():
b:\Gbox420\Gbox420\Gbox420_Mega_Main/Gbox420_Mega_Main.ino:218
  MqttAPI.setup();
}

void mqttConnected(__attribute__((unused)) void *response)
{
  MqttAPI.subscribe(ModuleSettings->MqttSubTopic);
    237e:	60 91 b9 0c 	lds	r22, 0x0CB9	; 0x800cb9 <ModuleSettings>
    2382:	70 91 ba 0c 	lds	r23, 0x0CBA	; 0x800cba <ModuleSettings+0x1>
    2386:	6e 55       	subi	r22, 0x5E	; 94
    2388:	7f 4f       	sbci	r23, 0xFF	; 255
    238a:	40 e0       	ldi	r20, 0x00	; 0
    238c:	8b eb       	ldi	r24, 0xBB	; 187
    238e:	9c e0       	ldi	r25, 0x0C	; 12
    2390:	0e 94 65 72 	call	0xe4ca	; 0xe4ca <ELClientMqtt::subscribe(char const*, unsigned char)>
b:\Gbox420\Gbox420\Gbox420_Mega_Main/Gbox420_Mega_Main.ino:219
  MqttConnected = true;
    2394:	81 e0       	ldi	r24, 0x01	; 1
    2396:	80 93 b4 0c 	sts	0x0CB4, r24	; 0x800cb4 <MqttConnected>
b:\Gbox420\Gbox420\Gbox420_Mega_Main/Gbox420_Mega_Main.ino:221
  //if(*Debug) logToSerials(F("MQTT connected"), true);
}
    239a:	08 95       	ret

0000239c <loadCallback(char*)>:
_Z12loadCallbackPc():
b:\Gbox420\Gbox420\Gbox420_Mega_Main/Gbox420_Mega_Main.ino:288
  \brief Called when a website is loading on the ESP-link webserver
  \param Url - HTML filename that is getting loaded
*/
void loadCallback(__attribute__((unused)) char *Url)
{
  Main1->websiteLoadEventTrigger(Url); //Runs through all components that are subscribed to this event
    239c:	a0 91 b2 0c 	lds	r26, 0x0CB2	; 0x800cb2 <Main1>
    23a0:	b0 91 b3 0c 	lds	r27, 0x0CB3	; 0x800cb3 <Main1+0x1>
    23a4:	ed 91       	ld	r30, X+
    23a6:	fc 91       	ld	r31, X
    23a8:	11 97       	sbiw	r26, 0x01	; 1
    23aa:	70 97       	sbiw	r30, 0x10	; 16
    23ac:	20 81       	ld	r18, Z
    23ae:	31 81       	ldd	r19, Z+1	; 0x01
    23b0:	bc 01       	movw	r22, r24
    23b2:	cd 01       	movw	r24, r26
    23b4:	82 0f       	add	r24, r18
    23b6:	93 1f       	adc	r25, r19
    23b8:	0c 94 d1 37 	jmp	0x6fa2	; 0x6fa2 <Module_Web::websiteLoadEventTrigger(char*)>

000023bc <refreshCallback(char*)>:
_Z15refreshCallbackPc():
b:\Gbox420\Gbox420\Gbox420_Mega_Main/Gbox420_Mega_Main.ino:297
  \brief Called when a website is refreshing on the ESP-link webserver
  \param Url - HTML filename that is refreshinging
*/
void refreshCallback(__attribute__((unused)) char *Url)
{
  Main1->websiteRefreshEventTrigger(Url);
    23bc:	a0 91 b2 0c 	lds	r26, 0x0CB2	; 0x800cb2 <Main1>
    23c0:	b0 91 b3 0c 	lds	r27, 0x0CB3	; 0x800cb3 <Main1+0x1>
    23c4:	ed 91       	ld	r30, X+
    23c6:	fc 91       	ld	r31, X
    23c8:	11 97       	sbiw	r26, 0x01	; 1
    23ca:	70 97       	sbiw	r30, 0x10	; 16
    23cc:	20 81       	ld	r18, Z
    23ce:	31 81       	ldd	r19, Z+1	; 0x01
    23d0:	bc 01       	movw	r22, r24
    23d2:	cd 01       	movw	r24, r26
    23d4:	82 0f       	add	r24, r18
    23d6:	93 1f       	adc	r25, r19
    23d8:	0c 94 00 38 	jmp	0x7000	; 0x7000 <Module_Web::websiteRefreshEventTrigger(char*)>

000023dc <buttonCallback(char*)>:
_Z14buttonCallbackPc():
b:\Gbox420\Gbox420\Gbox420_Mega_Main/Gbox420_Mega_Main.ino:305
/**
  \brief Called when a button is pressed.
  \param Button - ID of the button HTML element
*/
void buttonCallback(char *Button)
{
    23dc:	cf 93       	push	r28
    23de:	df 93       	push	r29
    23e0:	ec 01       	movw	r28, r24
b:\Gbox420\Gbox420\Gbox420_Mega_Main/Gbox420_Mega_Main.ino:306
  logToSerials(F("ESP button:"), false, 0);
    23e2:	40 e0       	ldi	r20, 0x00	; 0
    23e4:	60 e0       	ldi	r22, 0x00	; 0
    23e6:	85 ec       	ldi	r24, 0xC5	; 197
    23e8:	95 e0       	ldi	r25, 0x05	; 5
    23ea:	0e 94 85 16 	call	0x2d0a	; 0x2d0a <logToSerials(__FlashStringHelper const*, bool, unsigned char)>
b:\Gbox420\Gbox420\Gbox420_Mega_Main/Gbox420_Mega_Main.ino:307
  if (strcmp_P(Button, (PGM_P)F("RestoreDef")) == 0)
    23ee:	6a eb       	ldi	r22, 0xBA	; 186
    23f0:	75 e0       	ldi	r23, 0x05	; 5
    23f2:	ce 01       	movw	r24, r28
    23f4:	0e 94 e5 94 	call	0x129ca	; 0x129ca <strcmp_P>
    23f8:	89 2b       	or	r24, r25
    23fa:	51 f4       	brne	.+20     	; 0x2410 <buttonCallback(char*)+0x34>
b:\Gbox420\Gbox420\Gbox420_Mega_Main/Gbox420_Mega_Main.ino:309
  {
    restoreDefaults();
    23fc:	0e 94 a4 18 	call	0x3148	; 0x3148 <restoreDefaults()>
b:\Gbox420\Gbox420\Gbox420_Mega_Main/Gbox420_Mega_Main.ino:315
  }
  else
  {
    Main1->commandEventTrigger(Button, NULL);
  }
  saveSettings(ModuleSettings);
    2400:	80 91 b9 0c 	lds	r24, 0x0CB9	; 0x800cb9 <ModuleSettings>
    2404:	90 91 ba 0c 	lds	r25, 0x0CBA	; 0x800cba <ModuleSettings+0x1>
b:\Gbox420\Gbox420\Gbox420_Mega_Main/Gbox420_Mega_Main.ino:316
}
    2408:	df 91       	pop	r29
    240a:	cf 91       	pop	r28
b:\Gbox420\Gbox420\Gbox420_Mega_Main/Gbox420_Mega_Main.ino:315
  }
  else
  {
    Main1->commandEventTrigger(Button, NULL);
  }
  saveSettings(ModuleSettings);
    240c:	0c 94 c6 16 	jmp	0x2d8c	; 0x2d8c <saveSettings(Settings*)>
b:\Gbox420\Gbox420\Gbox420_Mega_Main/Gbox420_Mega_Main.ino:313
  {
    restoreDefaults();
  }
  else
  {
    Main1->commandEventTrigger(Button, NULL);
    2410:	a0 91 b2 0c 	lds	r26, 0x0CB2	; 0x800cb2 <Main1>
    2414:	b0 91 b3 0c 	lds	r27, 0x0CB3	; 0x800cb3 <Main1+0x1>
    2418:	ed 91       	ld	r30, X+
    241a:	fc 91       	ld	r31, X
    241c:	11 97       	sbiw	r26, 0x01	; 1
    241e:	70 97       	sbiw	r30, 0x10	; 16
    2420:	80 81       	ld	r24, Z
    2422:	91 81       	ldd	r25, Z+1	; 0x01
    2424:	50 e0       	ldi	r21, 0x00	; 0
    2426:	40 e0       	ldi	r20, 0x00	; 0
    2428:	be 01       	movw	r22, r28
    242a:	8a 0f       	add	r24, r26
    242c:	9b 1f       	adc	r25, r27
    242e:	0e 94 c0 40 	call	0x8180	; 0x8180 <Module_Web::commandEventTrigger(char*, char*)>
    2432:	e6 cf       	rjmp	.-52     	; 0x2400 <buttonCallback(char*)+0x24>

00002434 <fieldCallback(char*)>:
_Z13fieldCallbackPc():
b:\Gbox420\Gbox420\Gbox420_Mega_Main/Gbox420_Mega_Main.ino:323
/**
  \brief Called when a field on the website is submitted
  \param Field - Name of the input HTML element
*/
void fieldCallback(char *Field)
{ ///< Called when any field on the website is updated.
    2434:	0f 93       	push	r16
    2436:	1f 93       	push	r17
    2438:	cf 93       	push	r28
    243a:	df 93       	push	r29
    243c:	8c 01       	movw	r16, r24
b:\Gbox420\Gbox420\Gbox420_Mega_Main/Gbox420_Mega_Main.ino:324
  logToSerials(F("ESP field:"), false, 0);
    243e:	40 e0       	ldi	r20, 0x00	; 0
    2440:	60 e0       	ldi	r22, 0x00	; 0
    2442:	8f ea       	ldi	r24, 0xAF	; 175
    2444:	95 e0       	ldi	r25, 0x05	; 5
    2446:	0e 94 85 16 	call	0x2d0a	; 0x2d0a <logToSerials(__FlashStringHelper const*, bool, unsigned char)>
b:\Gbox420\Gbox420\Gbox420_Mega_Main/Gbox420_Mega_Main.ino:325
  Main1->commandEventTrigger(Field, WebServer.getArgString());
    244a:	e0 91 b2 0c 	lds	r30, 0x0CB2	; 0x800cb2 <Main1>
    244e:	f0 91 b3 0c 	lds	r31, 0x0CB3	; 0x800cb3 <Main1+0x1>
    2452:	a0 81       	ld	r26, Z
    2454:	b1 81       	ldd	r27, Z+1	; 0x01
    2456:	50 97       	sbiw	r26, 0x10	; 16
    2458:	cd 91       	ld	r28, X+
    245a:	dc 91       	ld	r29, X
    245c:	ce 0f       	add	r28, r30
    245e:	df 1f       	adc	r29, r31
    2460:	89 ee       	ldi	r24, 0xE9	; 233
    2462:	9c e0       	ldi	r25, 0x0C	; 12
    2464:	0e 94 da 79 	call	0xf3b4	; 0xf3b4 <ELClientWebServer::getArgString()>
    2468:	ac 01       	movw	r20, r24
    246a:	b8 01       	movw	r22, r16
    246c:	ce 01       	movw	r24, r28
    246e:	0e 94 c0 40 	call	0x8180	; 0x8180 <Module_Web::commandEventTrigger(char*, char*)>
b:\Gbox420\Gbox420\Gbox420_Mega_Main/Gbox420_Mega_Main.ino:326
  saveSettings(ModuleSettings);
    2472:	80 91 b9 0c 	lds	r24, 0x0CB9	; 0x800cb9 <ModuleSettings>
    2476:	90 91 ba 0c 	lds	r25, 0x0CBA	; 0x800cba <ModuleSettings+0x1>
b:\Gbox420\Gbox420\Gbox420_Mega_Main/Gbox420_Mega_Main.ino:327
}
    247a:	df 91       	pop	r29
    247c:	cf 91       	pop	r28
    247e:	1f 91       	pop	r17
    2480:	0f 91       	pop	r16
b:\Gbox420\Gbox420\Gbox420_Mega_Main/Gbox420_Mega_Main.ino:326
*/
void fieldCallback(char *Field)
{ ///< Called when any field on the website is updated.
  logToSerials(F("ESP field:"), false, 0);
  Main1->commandEventTrigger(Field, WebServer.getArgString());
  saveSettings(ModuleSettings);
    2482:	0c 94 c6 16 	jmp	0x2d8c	; 0x2d8c <saveSettings(Settings*)>

00002486 <settingsLoadCallback(char*)>:
_Z20settingsLoadCallbackPc():
b:\Gbox420\Gbox420\Gbox420_Mega_Main/Gbox420_Mega_Main.ino:334
/**
  \brief Called when the /Settings.html website is loading on the ESP-link webserver
*/
void settingsLoadCallback(__attribute__((unused)) char *Url)
{
  Main1->settingsEvent_Load(Url); //Runs through all components that are subscribed to this event
    2486:	a0 91 b2 0c 	lds	r26, 0x0CB2	; 0x800cb2 <Main1>
    248a:	b0 91 b3 0c 	lds	r27, 0x0CB3	; 0x800cb3 <Main1+0x1>
    248e:	ed 91       	ld	r30, X+
    2490:	fc 91       	ld	r31, X
    2492:	11 97       	sbiw	r26, 0x01	; 1
    2494:	70 97       	sbiw	r30, 0x10	; 16
    2496:	20 81       	ld	r18, Z
    2498:	31 81       	ldd	r19, Z+1	; 0x01
    249a:	bc 01       	movw	r22, r24
    249c:	cd 01       	movw	r24, r26
    249e:	82 0f       	add	r24, r18
    24a0:	93 1f       	adc	r25, r19
    24a2:	0c 94 0b 3a 	jmp	0x7416	; 0x7416 <Module_Web::settingsEvent_Load(char*)>

000024a6 <settingsRefreshCallback(char*)>:
_Z23settingsRefreshCallbackPc():
b:\Gbox420\Gbox420\Gbox420_Mega_Main/Gbox420_Mega_Main.ino:342
/**
  \brief Called when the /Settings.html website is refreshing on the ESP-link webserver
*/
void settingsRefreshCallback(__attribute__((unused)) char *Url)
{
  Main1->settingsEvent_Refresh(Url);
    24a6:	a0 91 b2 0c 	lds	r26, 0x0CB2	; 0x800cb2 <Main1>
    24aa:	b0 91 b3 0c 	lds	r27, 0x0CB3	; 0x800cb3 <Main1+0x1>
    24ae:	ed 91       	ld	r30, X+
    24b0:	fc 91       	ld	r31, X
    24b2:	11 97       	sbiw	r26, 0x01	; 1
    24b4:	70 97       	sbiw	r30, 0x10	; 16
    24b6:	20 81       	ld	r18, Z
    24b8:	31 81       	ldd	r19, Z+1	; 0x01
    24ba:	bc 01       	movw	r22, r24
    24bc:	cd 01       	movw	r24, r26
    24be:	82 0f       	add	r24, r18
    24c0:	93 1f       	adc	r25, r19
    24c2:	0c 94 40 3b 	jmp	0x7680	; 0x7680 <Module_Web::settingsEvent_Refresh(char*)>

000024c6 <getNtpTime()>:
_Z10getNtpTimev():
b:\Gbox420\Gbox420\Gbox420_Mega_Main/Gbox420_Mega_Main.ino:257

/**
  \brief Update the time over ESP-link using NTP (Network Time Protocol)
*/
time_t getNtpTime()
{
    24c6:	8f 92       	push	r8
    24c8:	9f 92       	push	r9
    24ca:	af 92       	push	r10
    24cc:	bf 92       	push	r11
    24ce:	cf 92       	push	r12
    24d0:	df 92       	push	r13
    24d2:	ef 92       	push	r14
    24d4:	ff 92       	push	r15
b:\Gbox420\Gbox420\Gbox420_Mega_Main/Gbox420_Mega_Main.ino:259
  time_t NTPResponse = 0;
  if (!SyncInProgress)
    24d6:	80 91 38 0b 	lds	r24, 0x0B38	; 0x800b38 <__data_end>
b:\Gbox420\Gbox420\Gbox420_Mega_Main/Gbox420_Mega_Main.ino:258
/**
  \brief Update the time over ESP-link using NTP (Network Time Protocol)
*/
time_t getNtpTime()
{
  time_t NTPResponse = 0;
    24da:	c1 2c       	mov	r12, r1
    24dc:	d1 2c       	mov	r13, r1
    24de:	76 01       	movw	r14, r12
b:\Gbox420\Gbox420\Gbox420_Mega_Main/Gbox420_Mega_Main.ino:259
  if (!SyncInProgress)
    24e0:	81 11       	cpse	r24, r1
    24e2:	3f c0       	rjmp	.+126    	; 0x2562 <getNtpTime()+0x9c>
b:\Gbox420\Gbox420\Gbox420_Mega_Main/Gbox420_Mega_Main.ino:261
  { // block calling the sync again inside an interrupt while already waiting for a sync to finish
    SyncInProgress = true;
    24e4:	81 e0       	ldi	r24, 0x01	; 1
    24e6:	80 93 38 0b 	sts	0x0B38, r24	; 0x800b38 <__data_end>
b:\Gbox420\Gbox420\Gbox420_Mega_Main/Gbox420_Mega_Main.ino:262
    uint32_t LastRefresh = millis();
    24ea:	0e 94 67 85 	call	0x10ace	; 0x10ace <millis>
    24ee:	4b 01       	movw	r8, r22
    24f0:	5c 01       	movw	r10, r24
b:\Gbox420\Gbox420\Gbox420_Mega_Main/Gbox420_Mega_Main.ino:263
    logToSerials(F("Waiting for NTP time"), false, 0);
    24f2:	40 e0       	ldi	r20, 0x00	; 0
    24f4:	60 e0       	ldi	r22, 0x00	; 0
    24f6:	8c ee       	ldi	r24, 0xEC	; 236
    24f8:	95 e0       	ldi	r25, 0x05	; 5
    24fa:	0e 94 85 16 	call	0x2d0a	; 0x2d0a <logToSerials(__FlashStringHelper const*, bool, unsigned char)>
b:\Gbox420\Gbox420\Gbox420_Mega_Main/Gbox420_Mega_Main.ino:264
    while (NTPResponse == 0 && millis() - LastRefresh < 15000)
    24fe:	0e 94 67 85 	call	0x10ace	; 0x10ace <millis>
    2502:	68 19       	sub	r22, r8
    2504:	79 09       	sbc	r23, r9
    2506:	8a 09       	sbc	r24, r10
    2508:	9b 09       	sbc	r25, r11
    250a:	68 39       	cpi	r22, 0x98	; 152
    250c:	7a 43       	sbci	r23, 0x3A	; 58
    250e:	81 05       	cpc	r24, r1
    2510:	91 05       	cpc	r25, r1
    2512:	90 f5       	brcc	.+100    	; 0x2578 <getNtpTime()+0xb2>
b:\Gbox420\Gbox420\Gbox420_Mega_Main/Gbox420_Mega_Main.ino:266
    {
      NTPResponse = ESPCmd.GetTime();
    2514:	87 ee       	ldi	r24, 0xE7	; 231
    2516:	9c e0       	ldi	r25, 0x0C	; 12
    2518:	0e 94 31 71 	call	0xe262	; 0xe262 <ELClientCmd::GetTime()>
    251c:	6b 01       	movw	r12, r22
    251e:	7c 01       	movw	r14, r24
b:\Gbox420\Gbox420\Gbox420_Mega_Main/Gbox420_Mega_Main.ino:267
      delay(1000);
    2520:	68 ee       	ldi	r22, 0xE8	; 232
    2522:	73 e0       	ldi	r23, 0x03	; 3
    2524:	80 e0       	ldi	r24, 0x00	; 0
    2526:	90 e0       	ldi	r25, 0x00	; 0
    2528:	0e 94 98 85 	call	0x10b30	; 0x10b30 <delay>
b:\Gbox420\Gbox420\Gbox420_Mega_Main/Gbox420_Mega_Main.ino:268
      logToSerials(F("."), false, 0);
    252c:	40 e0       	ldi	r20, 0x00	; 0
    252e:	60 e0       	ldi	r22, 0x00	; 0
    2530:	8a ee       	ldi	r24, 0xEA	; 234
    2532:	95 e0       	ldi	r25, 0x05	; 5
    2534:	0e 94 85 16 	call	0x2d0a	; 0x2d0a <logToSerials(__FlashStringHelper const*, bool, unsigned char)>
b:\Gbox420\Gbox420\Gbox420_Mega_Main/Gbox420_Mega_Main.ino:269
      wdt_reset(); ///reset watchdog timeout
    2538:	a8 95       	wdr
b:\Gbox420\Gbox420\Gbox420_Mega_Main/Gbox420_Mega_Main.ino:264
  if (!SyncInProgress)
  { // block calling the sync again inside an interrupt while already waiting for a sync to finish
    SyncInProgress = true;
    uint32_t LastRefresh = millis();
    logToSerials(F("Waiting for NTP time"), false, 0);
    while (NTPResponse == 0 && millis() - LastRefresh < 15000)
    253a:	c1 14       	cp	r12, r1
    253c:	d1 04       	cpc	r13, r1
    253e:	e1 04       	cpc	r14, r1
    2540:	f1 04       	cpc	r15, r1
    2542:	e9 f2       	breq	.-70     	; 0x24fe <getNtpTime()+0x38>
b:\Gbox420\Gbox420\Gbox420_Mega_Main/Gbox420_Mega_Main.ino:271
      NTPResponse = ESPCmd.GetTime();
      delay(1000);
      logToSerials(F("."), false, 0);
      wdt_reset(); ///reset watchdog timeout
    }
    SyncInProgress = false;
    2544:	10 92 38 0b 	sts	0x0B38, r1	; 0x800b38 <__data_end>
b:\Gbox420\Gbox420\Gbox420_Mega_Main/Gbox420_Mega_Main.ino:274
    if (NTPResponse == 0)
    {
      logToSerials(F("sync failed"), true, 3);
    2548:	43 e0       	ldi	r20, 0x03	; 3
    254a:	61 e0       	ldi	r22, 0x01	; 1
    254c:	8e ed       	ldi	r24, 0xDE	; 222
    254e:	95 e0       	ldi	r25, 0x05	; 5
b:\Gbox420\Gbox420\Gbox420_Mega_Main/Gbox420_Mega_Main.ino:272
      delay(1000);
      logToSerials(F("."), false, 0);
      wdt_reset(); ///reset watchdog timeout
    }
    SyncInProgress = false;
    if (NTPResponse == 0)
    2550:	c1 14       	cp	r12, r1
    2552:	d1 04       	cpc	r13, r1
    2554:	e1 04       	cpc	r14, r1
    2556:	f1 04       	cpc	r15, r1
    2558:	11 f0       	breq	.+4      	; 0x255e <getNtpTime()+0x98>
b:\Gbox420\Gbox420\Gbox420_Mega_Main/Gbox420_Mega_Main.ino:277
    {
      logToSerials(F("sync failed"), true, 3);
    }
    else
      logToSerials(F("synchronized"), true, 3);
    255a:	81 ed       	ldi	r24, 0xD1	; 209
    255c:	95 e0       	ldi	r25, 0x05	; 5
    255e:	0e 94 85 16 	call	0x2d0a	; 0x2d0a <logToSerials(__FlashStringHelper const*, bool, unsigned char)>
b:\Gbox420\Gbox420\Gbox420_Mega_Main/Gbox420_Mega_Main.ino:280
  }
  return NTPResponse;
}
    2562:	c7 01       	movw	r24, r14
    2564:	b6 01       	movw	r22, r12
    2566:	ff 90       	pop	r15
    2568:	ef 90       	pop	r14
    256a:	df 90       	pop	r13
    256c:	cf 90       	pop	r12
    256e:	bf 90       	pop	r11
    2570:	af 90       	pop	r10
    2572:	9f 90       	pop	r9
    2574:	8f 90       	pop	r8
    2576:	08 95       	ret
b:\Gbox420\Gbox420\Gbox420_Mega_Main/Gbox420_Mega_Main.ino:264
  if (!SyncInProgress)
  { // block calling the sync again inside an interrupt while already waiting for a sync to finish
    SyncInProgress = true;
    uint32_t LastRefresh = millis();
    logToSerials(F("Waiting for NTP time"), false, 0);
    while (NTPResponse == 0 && millis() - LastRefresh < 15000)
    2578:	c1 2c       	mov	r12, r1
    257a:	d1 2c       	mov	r13, r1
    257c:	76 01       	movw	r14, r12
    257e:	e2 cf       	rjmp	.-60     	; 0x2544 <getNtpTime()+0x7e>

00002580 <ignoreCallback(char*)>:
_Z14ignoreCallbackPc():
    2580:	08 95       	ret

00002582 <mqttReceived(void*)>:
_Z12mqttReceivedPv():
b:\Gbox420\Gbox420\Gbox420_Mega_Main/Gbox420_Mega_Main.ino:235
{
  //if(*Debug) logToSerials(F("MQTT published"), true);
}

void mqttReceived(void *response)
{
    2582:	0f 93       	push	r16
    2584:	1f 93       	push	r17
    2586:	cf 93       	push	r28
    2588:	df 93       	push	r29
    258a:	cd b7       	in	r28, 0x3d	; 61
    258c:	de b7       	in	r29, 0x3e	; 62
    258e:	2c 97       	sbiw	r28, 0x0c	; 12
    2590:	0f b6       	in	r0, 0x3f	; 63
    2592:	f8 94       	cli
    2594:	de bf       	out	0x3e, r29	; 62
    2596:	0f be       	out	0x3f, r0	; 63
    2598:	cd bf       	out	0x3d, r28	; 61
    259a:	8c 01       	movw	r16, r24
b:\Gbox420\Gbox420\Gbox420_Mega_Main/Gbox420_Mega_Main.ino:236
  static uint8_t MqttSubTopicLength = strlen(ModuleSettings->MqttSubTopic) - 1; //Get length of the command topic
    259c:	80 91 39 0c 	lds	r24, 0x0C39	; 0x800c39 <guard variable for mqttReceived(void*)::MqttSubTopicLength>
    25a0:	81 11       	cpse	r24, r1
    25a2:	11 c0       	rjmp	.+34     	; 0x25c6 <mqttReceived(void*)+0x44>
b:\Gbox420\Gbox420\Gbox420_Mega_Main/Gbox420_Mega_Main.ino:236 (discriminator 1)
    25a4:	a0 91 b9 0c 	lds	r26, 0x0CB9	; 0x800cb9 <ModuleSettings>
    25a8:	b0 91 ba 0c 	lds	r27, 0x0CBA	; 0x800cba <ModuleSettings+0x1>
    25ac:	ae 55       	subi	r26, 0x5E	; 94
    25ae:	bf 4f       	sbci	r27, 0xFF	; 255
    25b0:	fd 01       	movw	r30, r26
    25b2:	01 90       	ld	r0, Z+
    25b4:	00 20       	and	r0, r0
    25b6:	e9 f7       	brne	.-6      	; 0x25b2 <mqttReceived(void*)+0x30>
    25b8:	ea 1b       	sub	r30, r26
    25ba:	e2 50       	subi	r30, 0x02	; 2
    25bc:	e0 93 41 0c 	sts	0x0C41, r30	; 0x800c41 <mqttReceived(void*)::MqttSubTopicLength>
    25c0:	81 e0       	ldi	r24, 0x01	; 1
    25c2:	80 93 39 0c 	sts	0x0C39, r24	; 0x800c39 <guard variable for mqttReceived(void*)::MqttSubTopicLength>
b:\Gbox420\Gbox420\Gbox420_Mega_Main/Gbox420_Mega_Main.ino:240
  static char command[MaxShotTextLength];
  static char data[MaxShotTextLength];
  ELClientResponse *res = (ELClientResponse *)response;
  String mqttTopic = (*res).popString();
    25c6:	b8 01       	movw	r22, r16
    25c8:	ce 01       	movw	r24, r28
    25ca:	07 96       	adiw	r24, 0x07	; 7
    25cc:	0e 94 a0 73 	call	0xe740	; 0xe740 <ELClientResponse::popString()>
b:\Gbox420\Gbox420\Gbox420_Mega_Main/Gbox420_Mega_Main.ino:241
  String mqttData = (*res).popString();
    25d0:	b8 01       	movw	r22, r16
    25d2:	ce 01       	movw	r24, r28
    25d4:	01 96       	adiw	r24, 0x01	; 1
    25d6:	0e 94 a0 73 	call	0xe740	; 0xe740 <ELClientResponse::popString()>
b:\Gbox420\Gbox420\Gbox420_Mega_Main/Gbox420_Mega_Main.ino:242
  logToSerials(F("MQTT"), false, 0);
    25da:	40 e0       	ldi	r20, 0x00	; 0
    25dc:	60 e0       	ldi	r22, 0x00	; 0
    25de:	81 e0       	ldi	r24, 0x01	; 1
    25e0:	96 e0       	ldi	r25, 0x06	; 6
    25e2:	0e 94 85 16 	call	0x2d0a	; 0x2d0a <logToSerials(__FlashStringHelper const*, bool, unsigned char)>
_Z12logToSerialsI6StringEvPT_bh():
b:\Gbox420\Gbox420\Gbox420_Mega_Main\build\sketch/SerialLog.h:20
template <class logLine>
void logToSerials(logLine *ToPrint, bool BreakLine = true, uint8_t Indent = 3)
{
  while (Indent > 0)
  {
    ArduinoSerial.print(F(" "));
    25e6:	6f e6       	ldi	r22, 0x6F	; 111
    25e8:	75 e0       	ldi	r23, 0x05	; 5
    25ea:	84 e5       	ldi	r24, 0x54	; 84
    25ec:	95 e1       	ldi	r25, 0x15	; 21
    25ee:	0e 94 6c 8b 	call	0x116d8	; 0x116d8 <Print::print(__FlashStringHelper const*)>
b:\Gbox420\Gbox420\Gbox420_Mega_Main\build\sketch/SerialLog.h:21
    ESPSerial.print(F(" "));
    25f2:	6d e6       	ldi	r22, 0x6D	; 109
    25f4:	75 e0       	ldi	r23, 0x05	; 5
    25f6:	8e e8       	ldi	r24, 0x8E	; 142
    25f8:	96 e1       	ldi	r25, 0x16	; 22
    25fa:	0e 94 6c 8b 	call	0x116d8	; 0x116d8 <Print::print(__FlashStringHelper const*)>
b:\Gbox420\Gbox420\Gbox420_Mega_Main\build\sketch/SerialLog.h:31
    ArduinoSerial.println((*ToPrint));
    ESPSerial.println((*ToPrint));
  }
  else
  {
    ArduinoSerial.print((*ToPrint));
    25fe:	be 01       	movw	r22, r28
    2600:	69 5f       	subi	r22, 0xF9	; 249
    2602:	7f 4f       	sbci	r23, 0xFF	; 255
    2604:	84 e5       	ldi	r24, 0x54	; 84
    2606:	95 e1       	ldi	r25, 0x15	; 21
    2608:	0e 94 90 8b 	call	0x11720	; 0x11720 <Print::print(String const&)>
b:\Gbox420\Gbox420\Gbox420_Mega_Main\build\sketch/SerialLog.h:32
    ESPSerial.print((*ToPrint));
    260c:	be 01       	movw	r22, r28
    260e:	69 5f       	subi	r22, 0xF9	; 249
    2610:	7f 4f       	sbci	r23, 0xFF	; 255
    2612:	8e e8       	ldi	r24, 0x8E	; 142
    2614:	96 e1       	ldi	r25, 0x16	; 22
    2616:	0e 94 90 8b 	call	0x11720	; 0x11720 <Print::print(String const&)>
_Z12mqttReceivedPv():
b:\Gbox420\Gbox420\Gbox420_Mega_Main/Gbox420_Mega_Main.ino:244
  logToSerials(&mqttTopic, false, 1);
  mqttTopic.remove(0, MqttSubTopicLength); //Cut the known command topic from the arrived topic
    261a:	40 91 41 0c 	lds	r20, 0x0C41	; 0x800c41 <mqttReceived(void*)::MqttSubTopicLength>
    261e:	50 e0       	ldi	r21, 0x00	; 0
    2620:	70 e0       	ldi	r23, 0x00	; 0
    2622:	60 e0       	ldi	r22, 0x00	; 0
    2624:	ce 01       	movw	r24, r28
    2626:	07 96       	adiw	r24, 0x07	; 7
    2628:	0e 94 2a 8f 	call	0x11e54	; 0x11e54 <String::remove(unsigned int, unsigned int)>
_ZNK6String11toCharArrayEPcjj():
C:\Users\bitmu\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/WString.h:162
  void setCharAt(unsigned int index, char c);
  char operator [] (unsigned int index) const;
  char& operator [] (unsigned int index);
  void getBytes(unsigned char *buf, unsigned int bufsize, unsigned int index=0) const;
  void toCharArray(char *buf, unsigned int bufsize, unsigned int index=0) const
    { getBytes((unsigned char *)buf, bufsize, index); }
    262c:	30 e0       	ldi	r19, 0x00	; 0
    262e:	20 e0       	ldi	r18, 0x00	; 0
    2630:	40 e8       	ldi	r20, 0x80	; 128
    2632:	50 e0       	ldi	r21, 0x00	; 0
    2634:	69 eb       	ldi	r22, 0xB9	; 185
    2636:	7b e0       	ldi	r23, 0x0B	; 11
    2638:	ce 01       	movw	r24, r28
    263a:	07 96       	adiw	r24, 0x07	; 7
    263c:	0e 94 fd 8e 	call	0x11dfa	; 0x11dfa <String::getBytes(unsigned char*, unsigned int, unsigned int) const>
    2640:	30 e0       	ldi	r19, 0x00	; 0
    2642:	20 e0       	ldi	r18, 0x00	; 0
    2644:	40 e8       	ldi	r20, 0x80	; 128
    2646:	50 e0       	ldi	r21, 0x00	; 0
    2648:	69 e3       	ldi	r22, 0x39	; 57
    264a:	7b e0       	ldi	r23, 0x0B	; 11
    264c:	ce 01       	movw	r24, r28
    264e:	01 96       	adiw	r24, 0x01	; 1
    2650:	0e 94 fd 8e 	call	0x11dfa	; 0x11dfa <String::getBytes(unsigned char*, unsigned int, unsigned int) const>
_Z12mqttReceivedPv():
b:\Gbox420\Gbox420\Gbox420_Mega_Main/Gbox420_Mega_Main.ino:247
  mqttTopic.toCharArray(command, MaxShotTextLength);
  mqttData.toCharArray(data, MaxShotTextLength);
  Main1->commandEventTrigger(command, data);
    2654:	a0 91 b2 0c 	lds	r26, 0x0CB2	; 0x800cb2 <Main1>
    2658:	b0 91 b3 0c 	lds	r27, 0x0CB3	; 0x800cb3 <Main1+0x1>
    265c:	ed 91       	ld	r30, X+
    265e:	fc 91       	ld	r31, X
    2660:	11 97       	sbiw	r26, 0x01	; 1
    2662:	70 97       	sbiw	r30, 0x10	; 16
    2664:	80 81       	ld	r24, Z
    2666:	91 81       	ldd	r25, Z+1	; 0x01
    2668:	49 e3       	ldi	r20, 0x39	; 57
    266a:	5b e0       	ldi	r21, 0x0B	; 11
    266c:	69 eb       	ldi	r22, 0xB9	; 185
    266e:	7b e0       	ldi	r23, 0x0B	; 11
    2670:	8a 0f       	add	r24, r26
    2672:	9b 1f       	adc	r25, r27
    2674:	0e 94 c0 40 	call	0x8180	; 0x8180 <Module_Web::commandEventTrigger(char*, char*)>
b:\Gbox420\Gbox420\Gbox420_Mega_Main/Gbox420_Mega_Main.ino:248
  Main1->reportToMQTTTrigger(true); //send out a fresh report
    2678:	a0 91 b2 0c 	lds	r26, 0x0CB2	; 0x800cb2 <Main1>
    267c:	b0 91 b3 0c 	lds	r27, 0x0CB3	; 0x800cb3 <Main1+0x1>
    2680:	ed 91       	ld	r30, X+
    2682:	fc 91       	ld	r31, X
    2684:	11 97       	sbiw	r26, 0x01	; 1
    2686:	70 97       	sbiw	r30, 0x10	; 16
    2688:	80 81       	ld	r24, Z
    268a:	91 81       	ldd	r25, Z+1	; 0x01
    268c:	61 e0       	ldi	r22, 0x01	; 1
    268e:	8a 0f       	add	r24, r26
    2690:	9b 1f       	adc	r25, r27
    2692:	0e 94 04 40 	call	0x8008	; 0x8008 <Module_Web::reportToMQTTTrigger(bool)>
b:\Gbox420\Gbox420\Gbox420_Mega_Main/Gbox420_Mega_Main.ino:241
  static uint8_t MqttSubTopicLength = strlen(ModuleSettings->MqttSubTopic) - 1; //Get length of the command topic
  static char command[MaxShotTextLength];
  static char data[MaxShotTextLength];
  ELClientResponse *res = (ELClientResponse *)response;
  String mqttTopic = (*res).popString();
  String mqttData = (*res).popString();
    2696:	ce 01       	movw	r24, r28
    2698:	01 96       	adiw	r24, 0x01	; 1
    269a:	0e 94 22 8e 	call	0x11c44	; 0x11c44 <String::~String()>
b:\Gbox420\Gbox420\Gbox420_Mega_Main/Gbox420_Mega_Main.ino:240
{
  static uint8_t MqttSubTopicLength = strlen(ModuleSettings->MqttSubTopic) - 1; //Get length of the command topic
  static char command[MaxShotTextLength];
  static char data[MaxShotTextLength];
  ELClientResponse *res = (ELClientResponse *)response;
  String mqttTopic = (*res).popString();
    269e:	ce 01       	movw	r24, r28
    26a0:	07 96       	adiw	r24, 0x07	; 7
    26a2:	0e 94 22 8e 	call	0x11c44	; 0x11c44 <String::~String()>
b:\Gbox420\Gbox420\Gbox420_Mega_Main/Gbox420_Mega_Main.ino:249
  mqttTopic.remove(0, MqttSubTopicLength); //Cut the known command topic from the arrived topic
  mqttTopic.toCharArray(command, MaxShotTextLength);
  mqttData.toCharArray(data, MaxShotTextLength);
  Main1->commandEventTrigger(command, data);
  Main1->reportToMQTTTrigger(true); //send out a fresh report
}
    26a6:	2c 96       	adiw	r28, 0x0c	; 12
    26a8:	0f b6       	in	r0, 0x3f	; 63
    26aa:	f8 94       	cli
    26ac:	de bf       	out	0x3e, r29	; 62
    26ae:	0f be       	out	0x3f, r0	; 63
    26b0:	cd bf       	out	0x3d, r28	; 61
    26b2:	df 91       	pop	r29
    26b4:	cf 91       	pop	r28
    26b6:	1f 91       	pop	r17
    26b8:	0f 91       	pop	r16
    26ba:	08 95       	ret

000026bc <printf_begin()>:
_Z12printf_beginv():
C:\Program Files (x86)\Arduino\libraries\RF24-master/printf.h:32
#endif

void printf_begin(void)
{
    #if defined(ARDUINO_ARCH_AVR)
    fdevopen(&serial_putc, 0);
    26bc:	70 e0       	ldi	r23, 0x00	; 0
    26be:	60 e0       	ldi	r22, 0x00	; 0
    26c0:	89 e7       	ldi	r24, 0x79	; 121
    26c2:	96 e1       	ldi	r25, 0x16	; 22
    26c4:	0c 94 8f 95 	jmp	0x12b1e	; 0x12b1e <fdevopen>

000026c8 <Thread::shouldRun()>:
_ZN6Thread9shouldRunEv():
C:\Program Files (x86)\Arduino\libraries\ArduinoThread-master/Thread.h:80

	// Return if the Thread should be runned or not
	virtual bool shouldRun(unsigned long time);

	// Default is to check whether it should run "now"
	bool shouldRun() { return shouldRun(millis()); }
    26c8:	0f 93       	push	r16
    26ca:	1f 93       	push	r17
    26cc:	cf 93       	push	r28
    26ce:	df 93       	push	r29
    26d0:	ec 01       	movw	r28, r24
    26d2:	e8 81       	ld	r30, Y
    26d4:	f9 81       	ldd	r31, Y+1	; 0x01
    26d6:	02 81       	ldd	r16, Z+2	; 0x02
    26d8:	13 81       	ldd	r17, Z+3	; 0x03
    26da:	0e 94 67 85 	call	0x10ace	; 0x10ace <millis>
    26de:	ab 01       	movw	r20, r22
    26e0:	bc 01       	movw	r22, r24
    26e2:	ce 01       	movw	r24, r28
    26e4:	f8 01       	movw	r30, r16
    26e6:	df 91       	pop	r29
    26e8:	cf 91       	pop	r28
    26ea:	1f 91       	pop	r17
    26ec:	0f 91       	pop	r16
    26ee:	19 94       	eijmp

000026f0 <StaticThreadController<3>::run()>:
_ZN22StaticThreadControllerILi3EE3runEv():
C:\Program Files (x86)\Arduino\libraries\ArduinoThread-master/StaticThreadController.h:41
		ThreadName = ThreadName + ThreadID;
	#endif
	};

	// run() Method is overrided
	void run() override
    26f0:	ef 92       	push	r14
    26f2:	ff 92       	push	r15
    26f4:	0f 93       	push	r16
    26f6:	1f 93       	push	r17
    26f8:	cf 93       	push	r28
    26fa:	df 93       	push	r29
    26fc:	ec 01       	movw	r28, r24
C:\Program Files (x86)\Arduino\libraries\ArduinoThread-master/StaticThreadController.h:44
	{
		// Run this thread before
		if(_onRun != nullptr && shouldRun())
    26fe:	8e 85       	ldd	r24, Y+14	; 0x0e
    2700:	9f 85       	ldd	r25, Y+15	; 0x0f
    2702:	89 2b       	or	r24, r25
    2704:	41 f0       	breq	.+16     	; 0x2716 <StaticThreadController<3>::run()+0x26>
C:\Program Files (x86)\Arduino\libraries\ArduinoThread-master/StaticThreadController.h:44 (discriminator 1)
    2706:	ce 01       	movw	r24, r28
    2708:	0e 94 64 13 	call	0x26c8	; 0x26c8 <Thread::shouldRun()>
    270c:	88 23       	and	r24, r24
    270e:	19 f0       	breq	.+6      	; 0x2716 <StaticThreadController<3>::run()+0x26>
C:\Program Files (x86)\Arduino\libraries\ArduinoThread-master/StaticThreadController.h:45
			_onRun();
    2710:	ee 85       	ldd	r30, Y+14	; 0x0e
    2712:	ff 85       	ldd	r31, Y+15	; 0x0f
    2714:	19 95       	eicall
    2716:	8e 01       	movw	r16, r28
    2718:	0d 5e       	subi	r16, 0xED	; 237
    271a:	1f 4f       	sbci	r17, 0xFF	; 255
    271c:	7e 01       	movw	r14, r28
    271e:	89 e1       	ldi	r24, 0x19	; 25
    2720:	e8 0e       	add	r14, r24
    2722:	f1 1c       	adc	r15, r1
C:\Program Files (x86)\Arduino\libraries\ArduinoThread-master/StaticThreadController.h:49

		for(int i = 0; i < N; i++){
			// Is enabled? Timeout exceeded?
			if(thread[i]->shouldRun()){
    2724:	d8 01       	movw	r26, r16
    2726:	8d 91       	ld	r24, X+
    2728:	9d 91       	ld	r25, X+
    272a:	8d 01       	movw	r16, r26
    272c:	0e 94 64 13 	call	0x26c8	; 0x26c8 <Thread::shouldRun()>
    2730:	88 23       	and	r24, r24
    2732:	59 f0       	breq	.+22     	; 0x274a <StaticThreadController<3>::run()+0x5a>
C:\Program Files (x86)\Arduino\libraries\ArduinoThread-master/StaticThreadController.h:50
				thread[i]->run();
    2734:	f8 01       	movw	r30, r16
    2736:	32 97       	sbiw	r30, 0x02	; 2
    2738:	80 81       	ld	r24, Z
    273a:	91 81       	ldd	r25, Z+1	; 0x01
    273c:	dc 01       	movw	r26, r24
    273e:	ed 91       	ld	r30, X+
    2740:	fc 91       	ld	r31, X
    2742:	04 80       	ldd	r0, Z+4	; 0x04
    2744:	f5 81       	ldd	r31, Z+5	; 0x05
    2746:	e0 2d       	mov	r30, r0
    2748:	19 95       	eicall
C:\Program Files (x86)\Arduino\libraries\ArduinoThread-master/StaticThreadController.h:47 (discriminator 2)
	{
		// Run this thread before
		if(_onRun != nullptr && shouldRun())
			_onRun();

		for(int i = 0; i < N; i++){
    274a:	0e 15       	cp	r16, r14
    274c:	1f 05       	cpc	r17, r15
    274e:	51 f7       	brne	.-44     	; 0x2724 <StaticThreadController<3>::run()+0x34>
_ZN6Thread6runnedEv():
C:\Program Files (x86)\Arduino\libraries\ArduinoThread-master/Thread.h:53
		this class and implementing run() method
	*/
	void runned(unsigned long time);

	// Default is to mark it runned "now"
	void runned() { runned(millis()); }
    2750:	0e 94 67 85 	call	0x10ace	; 0x10ace <millis>
    2754:	ab 01       	movw	r20, r22
    2756:	bc 01       	movw	r22, r24
    2758:	ce 01       	movw	r24, r28
_ZN22StaticThreadControllerILi3EE3runEv():
C:\Program Files (x86)\Arduino\libraries\ArduinoThread-master/StaticThreadController.h:56
			}
		}

		// StaticThreadController extends Thread, so we should flag as runned thread
		runned();
	}
    275a:	df 91       	pop	r29
    275c:	cf 91       	pop	r28
    275e:	1f 91       	pop	r17
    2760:	0f 91       	pop	r16
    2762:	ff 90       	pop	r15
    2764:	ef 90       	pop	r14
_ZN6Thread6runnedEv():
C:\Program Files (x86)\Arduino\libraries\ArduinoThread-master/Thread.h:53
    2766:	0c 94 ed 7a 	jmp	0xf5da	; 0xf5da <Thread::runned(unsigned long)>

0000276a <loop>:
loop():
b:\Gbox420\Gbox420\Gbox420_Mega_Main/Gbox420_Mega_Main.ino:121
  logToSerials(F("Setup ready, starting loops:"), true, 0);
}

void loop()
{
  ThreadControl.run(); ///< loop only checks if it's time to trigger one of the threads (runSec(), runFiveSec(),runMinute()..etc)
    276a:	83 e4       	ldi	r24, 0x43	; 67
    276c:	9c e0       	ldi	r25, 0x0C	; 12
    276e:	0c 94 78 13 	jmp	0x26f0	; 0x26f0 <StaticThreadController<3>::run()>

00002772 <HeartBeat()>:
_Z9HeartBeatv():
b:\Gbox420\Gbox420\Gbox420_Mega_Main/Gbox420_Mega_Main.ino:157
  \brief Turns the integrated LED on the Arduino board ON/OFF 
*/
void HeartBeat()
{
  static bool ledStatus;
  ledStatus = !ledStatus;
    2772:	60 91 42 0c 	lds	r22, 0x0C42	; 0x800c42 <HeartBeat()::ledStatus>
    2776:	81 e0       	ldi	r24, 0x01	; 1
    2778:	68 27       	eor	r22, r24
    277a:	60 93 42 0c 	sts	0x0C42, r22	; 0x800c42 <HeartBeat()::ledStatus>
b:\Gbox420\Gbox420\Gbox420_Mega_Main/Gbox420_Mega_Main.ino:158
  digitalWrite(LED_BUILTIN, ledStatus);
    277e:	8d e0       	ldi	r24, 0x0D	; 13
    2780:	0c 94 c2 87 	jmp	0x10f84	; 0x10f84 <digitalWrite>

00002784 <runSec()>:
_Z6runSecv():
b:\Gbox420\Gbox420\Gbox420_Mega_Main/Gbox420_Mega_Main.ino:133

// Threads

void runSec()
{
  wdt_reset(); ///< reset watchdog timeout
    2784:	a8 95       	wdr
b:\Gbox420\Gbox420\Gbox420_Mega_Main/Gbox420_Mega_Main.ino:134
  HeartBeat(); ///< Blinks built-in led
    2786:	0e 94 b9 13 	call	0x2772	; 0x2772 <HeartBeat()>
b:\Gbox420\Gbox420\Gbox420_Mega_Main/Gbox420_Mega_Main.ino:135
  Main1->runSec();
    278a:	a0 91 b2 0c 	lds	r26, 0x0CB2	; 0x800cb2 <Main1>
    278e:	b0 91 b3 0c 	lds	r27, 0x0CB3	; 0x800cb3 <Main1+0x1>
    2792:	ed 91       	ld	r30, X+
    2794:	fc 91       	ld	r31, X
    2796:	11 97       	sbiw	r26, 0x01	; 1
    2798:	72 97       	sbiw	r30, 0x12	; 18
    279a:	80 81       	ld	r24, Z
    279c:	91 81       	ldd	r25, Z+1	; 0x01
    279e:	8a 0f       	add	r24, r26
    27a0:	9b 1f       	adc	r25, r27
    27a2:	0c 94 11 1b 	jmp	0x3622	; 0x3622 <Module::runSec()>

000027a6 <setupMqtt()>:
_Z9setupMqttv():
b:\Gbox420\Gbox420\Gbox420_Mega_Main/Gbox420_Mega_Main.ino:203

/**
  \brief Sets up the MQTT relay
*/
void setupMqtt()
{
    27a6:	0f 93       	push	r16
    27a8:	cf 93       	push	r28
    27aa:	df 93       	push	r29
b:\Gbox420\Gbox420\Gbox420_Mega_Main/Gbox420_Mega_Main.ino:205

  MqttAPI.connectedCb.attach(mqttConnected);
    27ac:	6f eb       	ldi	r22, 0xBF	; 191
    27ae:	71 e1       	ldi	r23, 0x11	; 17
    27b0:	8b eb       	ldi	r24, 0xBB	; 187
    27b2:	9c e0       	ldi	r25, 0x0C	; 12
    27b4:	0e 94 3e 7a 	call	0xf47c	; 0xf47c <FP<void, void*>::attach(void (*)(void*))>
b:\Gbox420\Gbox420\Gbox420_Mega_Main/Gbox420_Mega_Main.ino:206
  MqttAPI.disconnectedCb.attach(mqttDisconnected);
    27b8:	65 e1       	ldi	r22, 0x15	; 21
    27ba:	71 e1       	ldi	r23, 0x11	; 17
    27bc:	81 ec       	ldi	r24, 0xC1	; 193
    27be:	9c e0       	ldi	r25, 0x0C	; 12
    27c0:	0e 94 3e 7a 	call	0xf47c	; 0xf47c <FP<void, void*>::attach(void (*)(void*))>
b:\Gbox420\Gbox420\Gbox420_Mega_Main/Gbox420_Mega_Main.ino:207
  MqttAPI.publishedCb.attach(mqttPublished);
    27c4:	68 e1       	ldi	r22, 0x18	; 24
    27c6:	71 e1       	ldi	r23, 0x11	; 17
    27c8:	87 ec       	ldi	r24, 0xC7	; 199
    27ca:	9c e0       	ldi	r25, 0x0C	; 12
    27cc:	0e 94 3e 7a 	call	0xf47c	; 0xf47c <FP<void, void*>::attach(void (*)(void*))>
b:\Gbox420\Gbox420\Gbox420_Mega_Main/Gbox420_Mega_Main.ino:208
  MqttAPI.dataCb.attach(mqttReceived);
    27d0:	61 ec       	ldi	r22, 0xC1	; 193
    27d2:	72 e1       	ldi	r23, 0x12	; 18
    27d4:	8d ec       	ldi	r24, 0xCD	; 205
    27d6:	9c e0       	ldi	r25, 0x0C	; 12
    27d8:	0e 94 3e 7a 	call	0xf47c	; 0xf47c <FP<void, void*>::attach(void (*)(void*))>
b:\Gbox420\Gbox420\Gbox420_Mega_Main/Gbox420_Mega_Main.ino:210

  memset(&ShortMessage[0], 0, MaxShotTextLength); //reset variable to store the Publish to path
    27dc:	e1 eb       	ldi	r30, 0xB1	; 177
    27de:	fd e0       	ldi	r31, 0x0D	; 13
    27e0:	80 e8       	ldi	r24, 0x80	; 128
    27e2:	df 01       	movw	r26, r30
    27e4:	1d 92       	st	X+, r1
    27e6:	8a 95       	dec	r24
    27e8:	e9 f7       	brne	.-6      	; 0x27e4 <setupMqtt()+0x3e>
b:\Gbox420\Gbox420\Gbox420_Mega_Main/Gbox420_Mega_Main.ino:211
  strcat(ShortMessage, ModuleSettings->MqttLwtTopic);
    27ea:	c0 91 b9 0c 	lds	r28, 0x0CB9	; 0x800cb9 <ModuleSettings>
    27ee:	d0 91 ba 0c 	lds	r29, 0x0CBA	; 0x800cba <ModuleSettings+0x1>
    27f2:	be 01       	movw	r22, r28
    27f4:	6e 5d       	subi	r22, 0xDE	; 222
    27f6:	7e 4f       	sbci	r23, 0xFE	; 254
    27f8:	cf 01       	movw	r24, r30
    27fa:	0e 94 23 95 	call	0x12a46	; 0x12a46 <strcat>
b:\Gbox420\Gbox420\Gbox420_Mega_Main/Gbox420_Mega_Main.ino:212
  MqttAPI.lwt(ShortMessage, ModuleSettings->MqttLwtMessage, 0, 1); //(topic,message,qos,retain) declares what message should be sent on it's behalf by the broker after Gbox420 has gone offline.
    27fe:	ae 01       	movw	r20, r28
    2800:	4e 55       	subi	r20, 0x5E	; 94
    2802:	5e 4f       	sbci	r21, 0xFE	; 254
    2804:	01 e0       	ldi	r16, 0x01	; 1
    2806:	20 e0       	ldi	r18, 0x00	; 0
    2808:	61 eb       	ldi	r22, 0xB1	; 177
    280a:	7d e0       	ldi	r23, 0x0D	; 13
    280c:	8b eb       	ldi	r24, 0xBB	; 187
    280e:	9c e0       	ldi	r25, 0x0C	; 12
    2810:	0e 94 04 72 	call	0xe408	; 0xe408 <ELClientMqtt::lwt(char const*, char const*, unsigned char, unsigned char)>
b:\Gbox420\Gbox420\Gbox420_Mega_Main/Gbox420_Mega_Main.ino:213
  MqttAPI.setup();
    2814:	8b eb       	ldi	r24, 0xBB	; 187
    2816:	9c e0       	ldi	r25, 0x0C	; 12
b:\Gbox420\Gbox420\Gbox420_Mega_Main/Gbox420_Mega_Main.ino:214
}
    2818:	df 91       	pop	r29
    281a:	cf 91       	pop	r28
    281c:	0f 91       	pop	r16
b:\Gbox420\Gbox420\Gbox420_Mega_Main/Gbox420_Mega_Main.ino:213
  MqttAPI.dataCb.attach(mqttReceived);

  memset(&ShortMessage[0], 0, MaxShotTextLength); //reset variable to store the Publish to path
  strcat(ShortMessage, ModuleSettings->MqttLwtTopic);
  MqttAPI.lwt(ShortMessage, ModuleSettings->MqttLwtMessage, 0, 1); //(topic,message,qos,retain) declares what message should be sent on it's behalf by the broker after Gbox420 has gone offline.
  MqttAPI.setup();
    281e:	0c 94 78 71 	jmp	0xe2f0	; 0xe2f0 <ELClientMqtt::setup()>

00002822 <setup>:
setup():
b:\Gbox420\Gbox420\Gbox420_Mega_Main/Gbox420_Mega_Main.ino:56
Thread FiveSecThread = Thread();
Thread MinuteThread = Thread();
StaticThreadController<3> ThreadControl(&OneSecThread, &FiveSecThread, &MinuteThread);

void setup()
{                                                       ///<  put your setup code here, to run once:
    2822:	cf 93       	push	r28
    2824:	df 93       	push	r29
_ZN14HardwareSerial5beginEm():
C:\Users\bitmu\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial.h:121
  public:
    inline HardwareSerial(
      volatile uint8_t *ubrrh, volatile uint8_t *ubrrl,
      volatile uint8_t *ucsra, volatile uint8_t *ucsrb,
      volatile uint8_t *ucsrc, volatile uint8_t *udr);
    void begin(unsigned long baud) { begin(baud, SERIAL_8N1); }
    2826:	26 e0       	ldi	r18, 0x06	; 6
    2828:	40 e0       	ldi	r20, 0x00	; 0
    282a:	52 ec       	ldi	r21, 0xC2	; 194
    282c:	61 e0       	ldi	r22, 0x01	; 1
    282e:	70 e0       	ldi	r23, 0x00	; 0
    2830:	84 e5       	ldi	r24, 0x54	; 84
    2832:	95 e1       	ldi	r25, 0x15	; 21
    2834:	0e 94 13 89 	call	0x11226	; 0x11226 <HardwareSerial::begin(unsigned long, unsigned char)>
    2838:	26 e0       	ldi	r18, 0x06	; 6
    283a:	40 e0       	ldi	r20, 0x00	; 0
    283c:	52 ec       	ldi	r21, 0xC2	; 194
    283e:	61 e0       	ldi	r22, 0x01	; 1
    2840:	70 e0       	ldi	r23, 0x00	; 0
    2842:	8e e8       	ldi	r24, 0x8E	; 142
    2844:	96 e1       	ldi	r25, 0x16	; 22
    2846:	0e 94 13 89 	call	0x11226	; 0x11226 <HardwareSerial::begin(unsigned long, unsigned char)>
setup():
b:\Gbox420\Gbox420\Gbox420_Mega_Main/Gbox420_Mega_Main.ino:59
  ArduinoSerial.begin(115200);                          ///< 2560mega console output
  ESPSerial.begin(115200);                              ///< ESP WiFi console output
  pinMode(LED_BUILTIN, OUTPUT);                         ///< onboard LED - Heartbeat every second to confirm code is running
    284a:	61 e0       	ldi	r22, 0x01	; 1
    284c:	8d e0       	ldi	r24, 0x0D	; 13
    284e:	0e 94 86 87 	call	0x10f0c	; 0x10f0c <pinMode>
b:\Gbox420\Gbox420\Gbox420_Mega_Main/Gbox420_Mega_Main.ino:60
  printf_begin();                                       ///< Needed to print wireless status to Serial
    2852:	0e 94 5e 13 	call	0x26bc	; 0x26bc <printf_begin()>
b:\Gbox420\Gbox420\Gbox420_Mega_Main/Gbox420_Mega_Main.ino:61
  logToSerials(F(""), true, 0);                         ///< New line
    2856:	40 e0       	ldi	r20, 0x00	; 0
    2858:	61 e0       	ldi	r22, 0x01	; 1
    285a:	8b e4       	ldi	r24, 0x4B	; 75
    285c:	97 e0       	ldi	r25, 0x07	; 7
    285e:	0e 94 85 16 	call	0x2d0a	; 0x2d0a <logToSerials(__FlashStringHelper const*, bool, unsigned char)>
b:\Gbox420\Gbox420\Gbox420_Mega_Main/Gbox420_Mega_Main.ino:62
  logToSerials(F("Main module initializing"), true, 0); ///< logs to both Arduino and ESP serials, adds new line after the text (true), and uses no indentation (0). More on why texts are in F(""):  https://gist.github.com/sticilface/e54016485fcccd10950e93ddcd4461a3
    2862:	40 e0       	ldi	r20, 0x00	; 0
    2864:	61 e0       	ldi	r22, 0x01	; 1
    2866:	82 e3       	ldi	r24, 0x32	; 50
    2868:	97 e0       	ldi	r25, 0x07	; 7
    286a:	0e 94 85 16 	call	0x2d0a	; 0x2d0a <logToSerials(__FlashStringHelper const*, bool, unsigned char)>
wdt_enable():
c:\users\bitmu\appdata\local\arduino15\packages\arduino\tools\avr-gcc\7.3.0-atmel3.6.1-arduino7\avr\include\avr/wdt.h:486
				: "n" (_SFR_MEM_ADDR(_WD_CONTROL_REG)),
				"r" ((uint8_t)(_BV(_WD_CHANGE_BIT) | _BV(WDE))),
				"r" ((uint8_t) ((value & 0x08 ? _WD_PS3_MASK : 0x00) |
						_BV(WDE) | (value & 0x07)) )
				: "r0"
		);
    286e:	88 e1       	ldi	r24, 0x18	; 24
    2870:	99 e2       	ldi	r25, 0x29	; 41
    2872:	0f b6       	in	r0, 0x3f	; 63
    2874:	f8 94       	cli
    2876:	a8 95       	wdr
    2878:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__TEXT_REGION_LENGTH__+0x700060>
    287c:	0f be       	out	0x3f, r0	; 63
    287e:	90 93 60 00 	sts	0x0060, r25	; 0x800060 <__TEXT_REGION_LENGTH__+0x700060>
setup():
b:\Gbox420\Gbox420\Gbox420_Mega_Main/Gbox420_Mega_Main.ino:64
  wdt_enable(WDTO_8S);                                  ///< Watchdog timeout set to 8 seconds, if watchdog is not reset every 8 seconds it assumes a lockup and resets the sketch
  boot_rww_enable();                                    ///< fix watchdog not loading sketch after a reset error on Mega2560
    2882:	81 e1       	ldi	r24, 0x11	; 17
    2884:	80 93 57 00 	sts	0x0057, r24	; 0x800057 <__TEXT_REGION_LENGTH__+0x700057>
    2888:	e8 95       	spm
b:\Gbox420\Gbox420\Gbox420_Mega_Main/Gbox420_Mega_Main.ino:67

  // Loading settings from EEPROM
  logToSerials(F("Loading settings"), true, 0);
    288a:	40 e0       	ldi	r20, 0x00	; 0
    288c:	61 e0       	ldi	r22, 0x01	; 1
    288e:	81 e2       	ldi	r24, 0x21	; 33
    2890:	97 e0       	ldi	r25, 0x07	; 7
    2892:	0e 94 85 16 	call	0x2d0a	; 0x2d0a <logToSerials(__FlashStringHelper const*, bool, unsigned char)>
b:\Gbox420\Gbox420\Gbox420_Mega_Main/Gbox420_Mega_Main.ino:68
  ModuleSettings = loadSettings();
    2896:	80 e0       	ldi	r24, 0x00	; 0
    2898:	0e 94 13 18 	call	0x3026	; 0x3026 <loadSettings(bool)>
    289c:	90 93 ba 0c 	sts	0x0CBA, r25	; 0x800cba <ModuleSettings+0x1>
    28a0:	80 93 b9 0c 	sts	0x0CB9, r24	; 0x800cb9 <ModuleSettings>
b:\Gbox420\Gbox420\Gbox420_Mega_Main/Gbox420_Mega_Main.ino:69
  Debug = &ModuleSettings->Debug;
    28a4:	90 93 b8 0c 	sts	0x0CB8, r25	; 0x800cb8 <Debug+0x1>
    28a8:	80 93 b7 0c 	sts	0x0CB7, r24	; 0x800cb7 <Debug>
b:\Gbox420\Gbox420\Gbox420_Mega_Main/Gbox420_Mega_Main.ino:70
  Metric = &ModuleSettings->Metric;
    28ac:	01 96       	adiw	r24, 0x01	; 1
    28ae:	90 93 b6 0c 	sts	0x0CB6, r25	; 0x800cb6 <Metric+0x1>
    28b2:	80 93 b5 0c 	sts	0x0CB5, r24	; 0x800cb5 <Metric>
b:\Gbox420\Gbox420\Gbox420_Mega_Main/Gbox420_Mega_Main.ino:72

  logToSerials(F("Setting up ESP-link connection"), true, 0);
    28b6:	40 e0       	ldi	r20, 0x00	; 0
    28b8:	61 e0       	ldi	r22, 0x01	; 1
    28ba:	82 e0       	ldi	r24, 0x02	; 2
    28bc:	97 e0       	ldi	r25, 0x07	; 7
    28be:	0e 94 85 16 	call	0x2d0a	; 0x2d0a <logToSerials(__FlashStringHelper const*, bool, unsigned char)>
b:\Gbox420\Gbox420\Gbox420_Mega_Main/Gbox420_Mega_Main.ino:73
  ESPLink.resetCb = &resetWebServer; ///< Callback subscription: What to do when WiFi reconnects
    28c2:	8c e2       	ldi	r24, 0x2C	; 44
    28c4:	91 e1       	ldi	r25, 0x11	; 17
    28c6:	90 93 04 0d 	sts	0x0D04, r25	; 0x800d04 <ESPLink+0x9>
    28ca:	80 93 03 0d 	sts	0x0D03, r24	; 0x800d03 <ESPLink+0x8>
b:\Gbox420\Gbox420\Gbox420_Mega_Main/Gbox420_Mega_Main.ino:74
  resetWebServer();                  ///< reset the WebServer
    28ce:	0e 94 2c 11 	call	0x2258	; 0x2258 <resetWebServer()>
b:\Gbox420\Gbox420\Gbox420_Mega_Main/Gbox420_Mega_Main.ino:75
  setSyncProvider(getNtpTime);       ///< Points to method for updating time from NTP server
    28d2:	83 e6       	ldi	r24, 0x63	; 99
    28d4:	92 e1       	ldi	r25, 0x12	; 18
    28d6:	0e 94 ee 7c 	call	0xf9dc	; 0xf9dc <setSyncProvider(unsigned long (*)())>
b:\Gbox420\Gbox420\Gbox420_Mega_Main/Gbox420_Mega_Main.ino:76
  setSyncInterval(86400);            ///< Sync time every day
    28da:	60 e8       	ldi	r22, 0x80	; 128
    28dc:	71 e5       	ldi	r23, 0x51	; 81
    28de:	81 e0       	ldi	r24, 0x01	; 1
    28e0:	90 e0       	ldi	r25, 0x00	; 0
    28e2:	0e 94 04 7d 	call	0xfa08	; 0xfa08 <setSyncInterval(unsigned long)>
b:\Gbox420\Gbox420\Gbox420_Mega_Main/Gbox420_Mega_Main.ino:77
  if ((ModuleSettings->Main1).ReportToMQTT)
    28e6:	e0 91 b9 0c 	lds	r30, 0x0CB9	; 0x800cb9 <ModuleSettings>
    28ea:	f0 91 ba 0c 	lds	r31, 0x0CBA	; 0x800cba <ModuleSettings+0x1>
    28ee:	e1 51       	subi	r30, 0x11	; 17
    28f0:	fe 4f       	sbci	r31, 0xFE	; 254
    28f2:	80 81       	ld	r24, Z
    28f4:	81 11       	cpse	r24, r1
b:\Gbox420\Gbox420\Gbox420_Mega_Main/Gbox420_Mega_Main.ino:79
  {
    setupMqtt(); //MQTT message relay setup. Logs "ConnectedCB is XXXX" to serial if successful
    28f6:	0e 94 d3 13 	call	0x27a6	; 0x27a6 <setupMqtt()>
b:\Gbox420\Gbox420\Gbox420_Mega_Main/Gbox420_Mega_Main.ino:82
  }
  // Threads - Setting up how often threads should be triggered and what functions to call when the trigger fires
  logToSerials(F("Setting up refresh threads"), false, 0);
    28fa:	40 e0       	ldi	r20, 0x00	; 0
    28fc:	60 e0       	ldi	r22, 0x00	; 0
    28fe:	87 ee       	ldi	r24, 0xE7	; 231
    2900:	96 e0       	ldi	r25, 0x06	; 6
    2902:	0e 94 85 16 	call	0x2d0a	; 0x2d0a <logToSerials(__FlashStringHelper const*, bool, unsigned char)>
b:\Gbox420\Gbox420\Gbox420_Mega_Main/Gbox420_Mega_Main.ino:83
  OneSecThread.setInterval(1000);
    2906:	48 ee       	ldi	r20, 0xE8	; 232
    2908:	53 e0       	ldi	r21, 0x03	; 3
    290a:	60 e0       	ldi	r22, 0x00	; 0
    290c:	70 e0       	ldi	r23, 0x00	; 0
    290e:	82 e8       	ldi	r24, 0x82	; 130
    2910:	9c e0       	ldi	r25, 0x0C	; 12
    2912:	0e 94 77 7a 	call	0xf4ee	; 0xf4ee <Thread::setInterval(unsigned long)>
b:\Gbox420\Gbox420\Gbox420_Mega_Main/Gbox420_Mega_Main.ino:84
  OneSecThread.onRun(runSec);
    2916:	62 ec       	ldi	r22, 0xC2	; 194
    2918:	73 e1       	ldi	r23, 0x13	; 19
    291a:	82 e8       	ldi	r24, 0x82	; 130
    291c:	9c e0       	ldi	r25, 0x0C	; 12
    291e:	0e 94 ff 7a 	call	0xf5fe	; 0xf5fe <Thread::onRun(void (*)())>
b:\Gbox420\Gbox420\Gbox420_Mega_Main/Gbox420_Mega_Main.ino:85
  FiveSecThread.setInterval(5000);
    2922:	48 e8       	ldi	r20, 0x88	; 136
    2924:	53 e1       	ldi	r21, 0x13	; 19
    2926:	60 e0       	ldi	r22, 0x00	; 0
    2928:	70 e0       	ldi	r23, 0x00	; 0
    292a:	8f e6       	ldi	r24, 0x6F	; 111
    292c:	9c e0       	ldi	r25, 0x0C	; 12
    292e:	0e 94 77 7a 	call	0xf4ee	; 0xf4ee <Thread::setInterval(unsigned long)>
b:\Gbox420\Gbox420\Gbox420_Mega_Main/Gbox420_Mega_Main.ino:86
  FiveSecThread.onRun(runFiveSec);
    2932:	6d e1       	ldi	r22, 0x1D	; 29
    2934:	71 e1       	ldi	r23, 0x11	; 17
    2936:	8f e6       	ldi	r24, 0x6F	; 111
    2938:	9c e0       	ldi	r25, 0x0C	; 12
    293a:	0e 94 ff 7a 	call	0xf5fe	; 0xf5fe <Thread::onRun(void (*)())>
b:\Gbox420\Gbox420\Gbox420_Mega_Main/Gbox420_Mega_Main.ino:87
  MinuteThread.setInterval(60000);
    293e:	40 e6       	ldi	r20, 0x60	; 96
    2940:	5a ee       	ldi	r21, 0xEA	; 234
    2942:	60 e0       	ldi	r22, 0x00	; 0
    2944:	70 e0       	ldi	r23, 0x00	; 0
    2946:	8c e5       	ldi	r24, 0x5C	; 92
    2948:	9c e0       	ldi	r25, 0x0C	; 12
    294a:	0e 94 77 7a 	call	0xf4ee	; 0xf4ee <Thread::setInterval(unsigned long)>
b:\Gbox420\Gbox420\Gbox420_Mega_Main/Gbox420_Mega_Main.ino:88
  MinuteThread.onRun(runMinute);
    294e:	68 e4       	ldi	r22, 0x48	; 72
    2950:	75 e1       	ldi	r23, 0x15	; 21
    2952:	8c e5       	ldi	r24, 0x5C	; 92
    2954:	9c e0       	ldi	r25, 0x0C	; 12
    2956:	0e 94 ff 7a 	call	0xf5fe	; 0xf5fe <Thread::onRun(void (*)())>
b:\Gbox420\Gbox420\Gbox420_Mega_Main/Gbox420_Mega_Main.ino:89
  logToSerials(F("done"), true, 3);
    295a:	43 e0       	ldi	r20, 0x03	; 3
    295c:	61 e0       	ldi	r22, 0x01	; 1
    295e:	82 ee       	ldi	r24, 0xE2	; 226
    2960:	96 e0       	ldi	r25, 0x06	; 6
    2962:	0e 94 85 16 	call	0x2d0a	; 0x2d0a <logToSerials(__FlashStringHelper const*, bool, unsigned char)>
b:\Gbox420\Gbox420\Gbox420_Mega_Main/Gbox420_Mega_Main.ino:92

  // Start interrupts to handle request from ESP-link firmware
  logToSerials(F("Setting up interrupt handler"), false, 0);
    2966:	40 e0       	ldi	r20, 0x00	; 0
    2968:	60 e0       	ldi	r22, 0x00	; 0
    296a:	85 ec       	ldi	r24, 0xC5	; 197
    296c:	96 e0       	ldi	r25, 0x06	; 6
    296e:	0e 94 85 16 	call	0x2d0a	; 0x2d0a <logToSerials(__FlashStringHelper const*, bool, unsigned char)>
b:\Gbox420\Gbox420\Gbox420_Mega_Main/Gbox420_Mega_Main.ino:93
  Timer3.initialize(500); ///< check every 0.5sec, using a larger interval can cause web requests to time out
    2972:	44 ef       	ldi	r20, 0xF4	; 244
    2974:	51 e0       	ldi	r21, 0x01	; 1
    2976:	60 e0       	ldi	r22, 0x00	; 0
    2978:	70 e0       	ldi	r23, 0x00	; 0
    297a:	88 ec       	ldi	r24, 0xC8	; 200
    297c:	94 e1       	ldi	r25, 0x14	; 20
    297e:	0e 94 1d 6d 	call	0xda3a	; 0xda3a <TimerThree::initialize(long)>
b:\Gbox420\Gbox420\Gbox420_Mega_Main/Gbox420_Mega_Main.ino:94
  Timer3.attachInterrupt(processTimeCriticalStuff);
    2982:	2f ef       	ldi	r18, 0xFF	; 255
    2984:	3f ef       	ldi	r19, 0xFF	; 255
    2986:	a9 01       	movw	r20, r18
    2988:	69 e1       	ldi	r22, 0x19	; 25
    298a:	71 e1       	ldi	r23, 0x11	; 17
    298c:	88 ec       	ldi	r24, 0xC8	; 200
    298e:	94 e1       	ldi	r25, 0x14	; 20
    2990:	0e 94 2d 6d 	call	0xda5a	; 0xda5a <TimerThree::attachInterrupt(void (*)(), long)>
b:\Gbox420\Gbox420\Gbox420_Mega_Main/Gbox420_Mega_Main.ino:95
  Timer3.start();
    2994:	88 ec       	ldi	r24, 0xC8	; 200
    2996:	94 e1       	ldi	r25, 0x14	; 20
    2998:	0e 94 24 6d 	call	0xda48	; 0xda48 <TimerThree::start()>
b:\Gbox420\Gbox420\Gbox420_Mega_Main/Gbox420_Mega_Main.ino:96
  logToSerials(F("done"), true, 3);
    299c:	43 e0       	ldi	r20, 0x03	; 3
    299e:	61 e0       	ldi	r22, 0x01	; 1
    29a0:	80 ec       	ldi	r24, 0xC0	; 192
    29a2:	96 e0       	ldi	r25, 0x06	; 6
    29a4:	0e 94 85 16 	call	0x2d0a	; 0x2d0a <logToSerials(__FlashStringHelper const*, bool, unsigned char)>
b:\Gbox420\Gbox420\Gbox420_Mega_Main/Gbox420_Mega_Main.ino:99

  //Initialize wireless communication with remote Modules
  logToSerials(F("Setting up wireless transceiver"), false, 0);
    29a8:	40 e0       	ldi	r20, 0x00	; 0
    29aa:	60 e0       	ldi	r22, 0x00	; 0
    29ac:	80 ea       	ldi	r24, 0xA0	; 160
    29ae:	96 e0       	ldi	r25, 0x06	; 6
    29b0:	0e 94 85 16 	call	0x2d0a	; 0x2d0a <logToSerials(__FlashStringHelper const*, bool, unsigned char)>
b:\Gbox420\Gbox420\Gbox420_Mega_Main/Gbox420_Mega_Main.ino:100
  Wireless.begin();                                  ///< Initialize the nRF24L01+ wireless chip for talking to Modules
    29b4:	85 e9       	ldi	r24, 0x95	; 149
    29b6:	9c e0       	ldi	r25, 0x0C	; 12
    29b8:	0e 94 f7 6b 	call	0xd7ee	; 0xd7ee <RF24::begin()>
b:\Gbox420\Gbox420\Gbox420_Mega_Main/Gbox420_Mega_Main.ino:101
  Wireless.setDataRate(RF24_250KBPS);                ///< Set the speed to slow - has longer range + No need for faster transmission, Other options: RF24_2MBPS, RF24_1MBPS
    29bc:	62 e0       	ldi	r22, 0x02	; 2
    29be:	70 e0       	ldi	r23, 0x00	; 0
    29c0:	85 e9       	ldi	r24, 0x95	; 149
    29c2:	9c e0       	ldi	r25, 0x0C	; 12
    29c4:	0e 94 8a 69 	call	0xd314	; 0xd314 <RF24::setDataRate(rf24_datarate_e)>
b:\Gbox420\Gbox420\Gbox420_Mega_Main/Gbox420_Mega_Main.ino:102
  Wireless.setCRCLength(RF24_CRC_16);                ///< RF24_CRC_8 for 8-bit or RF24_CRC_16 for 16-bit
    29c8:	62 e0       	ldi	r22, 0x02	; 2
    29ca:	70 e0       	ldi	r23, 0x00	; 0
    29cc:	85 e9       	ldi	r24, 0x95	; 149
    29ce:	9c e0       	ldi	r25, 0x0C	; 12
    29d0:	0e 94 d5 69 	call	0xd3aa	; 0xd3aa <RF24::setCRCLength(rf24_crclength_e)>
b:\Gbox420\Gbox420\Gbox420_Mega_Main/Gbox420_Mega_Main.ino:103
  Wireless.setPALevel(RF24_PA_MAX);                  ///< RF24_PA_MIN=-18dBm, RF24_PA_LOW=-12dBm, RF24_PA_HIGH=-6dBm, and RF24_PA_MAX=0dBm.
    29d4:	41 e0       	ldi	r20, 0x01	; 1
    29d6:	63 e0       	ldi	r22, 0x03	; 3
    29d8:	85 e9       	ldi	r24, 0x95	; 149
    29da:	9c e0       	ldi	r25, 0x0C	; 12
    29dc:	0e 94 66 69 	call	0xd2cc	; 0xd2cc <RF24::setPALevel(unsigned char, bool)>
b:\Gbox420\Gbox420\Gbox420_Mega_Main/Gbox420_Mega_Main.ino:104
  Wireless.setPayloadSize(WirelessPayloadSize);      ///< The number of bytes in the payload. This implementation uses a fixed payload size for all transmissions
    29e0:	60 e2       	ldi	r22, 0x20	; 32
    29e2:	85 e9       	ldi	r24, 0x95	; 149
    29e4:	9c e0       	ldi	r25, 0x0C	; 12
    29e6:	0e 94 0c 68 	call	0xd018	; 0xd018 <RF24::setPayloadSize(unsigned char)>
b:\Gbox420\Gbox420\Gbox420_Mega_Main/Gbox420_Mega_Main.ino:105
  Wireless.enableDynamicPayloads();                  ///< Required for ACK messages
    29ea:	85 e9       	ldi	r24, 0x95	; 149
    29ec:	9c e0       	ldi	r25, 0x0C	; 12
    29ee:	0e 94 25 69 	call	0xd24a	; 0xd24a <RF24::enableDynamicPayloads()>
b:\Gbox420\Gbox420\Gbox420_Mega_Main/Gbox420_Mega_Main.ino:106
  Wireless.enableAckPayload();                       ///< When sending a wireless package, expect a response confirming the package was received in a custom Acknowledgement package
    29f2:	85 e9       	ldi	r24, 0x95	; 149
    29f4:	9c e0       	ldi	r25, 0x0C	; 12
    29f6:	0e 94 42 69 	call	0xd284	; 0xd284 <RF24::enableAckPayload()>
b:\Gbox420\Gbox420\Gbox420_Mega_Main/Gbox420_Mega_Main.ino:107
  Wireless.setRetries(WirelessDelay, WirelessRetry); ///< Defined in Settings.h. How many retries before giving up sending a single package and How long to wait between each retry
    29fa:	4a e0       	ldi	r20, 0x0A	; 10
    29fc:	68 e0       	ldi	r22, 0x08	; 8
    29fe:	85 e9       	ldi	r24, 0x95	; 149
    2a00:	9c e0       	ldi	r25, 0x0C	; 12
    2a02:	0e 94 e8 6b 	call	0xd7d0	; 0xd7d0 <RF24::setRetries(unsigned char, unsigned char)>
b:\Gbox420\Gbox420\Gbox420_Mega_Main/Gbox420_Mega_Main.ino:108
  Wireless.stopListening();
    2a06:	85 e9       	ldi	r24, 0x95	; 149
    2a08:	9c e0       	ldi	r25, 0x0C	; 12
    2a0a:	0e 94 28 68 	call	0xd050	; 0xd050 <RF24::stopListening()>
b:\Gbox420\Gbox420\Gbox420_Mega_Main/Gbox420_Mega_Main.ino:109
  logToSerials(F("done"), true, 3);
    2a0e:	43 e0       	ldi	r20, 0x03	; 3
    2a10:	61 e0       	ldi	r22, 0x01	; 1
    2a12:	8b e9       	ldi	r24, 0x9B	; 155
    2a14:	96 e0       	ldi	r25, 0x06	; 6
    2a16:	0e 94 85 16 	call	0x2d0a	; 0x2d0a <logToSerials(__FlashStringHelper const*, bool, unsigned char)>
b:\Gbox420\Gbox420\Gbox420_Mega_Main/Gbox420_Mega_Main.ino:112

  // Create the Module objects
  logToSerials(F("Creating Main module"), true, 0);
    2a1a:	40 e0       	ldi	r20, 0x00	; 0
    2a1c:	61 e0       	ldi	r22, 0x01	; 1
    2a1e:	86 e8       	ldi	r24, 0x86	; 134
    2a20:	96 e0       	ldi	r25, 0x06	; 6
    2a22:	0e 94 85 16 	call	0x2d0a	; 0x2d0a <logToSerials(__FlashStringHelper const*, bool, unsigned char)>
b:\Gbox420\Gbox420\Gbox420_Mega_Main/Gbox420_Mega_Main.ino:113
  Main1 = new MainModule(F("Main1"), &ModuleSettings->Main1, &Wireless); ///< This is the main object representing an entire Grow Box with all components in it. Receives its name and the settings loaded from the EEPROM as parameters
    2a26:	8e e0       	ldi	r24, 0x0E	; 14
    2a28:	92 e0       	ldi	r25, 0x02	; 2
    2a2a:	0e 94 6d 8f 	call	0x11eda	; 0x11eda <operator new(unsigned int)>
    2a2e:	ec 01       	movw	r28, r24
    2a30:	40 91 b9 0c 	lds	r20, 0x0CB9	; 0x800cb9 <ModuleSettings>
    2a34:	50 91 ba 0c 	lds	r21, 0x0CBA	; 0x800cba <ModuleSettings+0x1>
    2a38:	4b 51       	subi	r20, 0x1B	; 27
    2a3a:	5e 4f       	sbci	r21, 0xFE	; 254
    2a3c:	25 e9       	ldi	r18, 0x95	; 149
    2a3e:	3c e0       	ldi	r19, 0x0C	; 12
    2a40:	60 e8       	ldi	r22, 0x80	; 128
    2a42:	76 e0       	ldi	r23, 0x06	; 6
    2a44:	0e 94 62 5f 	call	0xbec4	; 0xbec4 <MainModule::MainModule(__FlashStringHelper const*, Settings::MainModuleSettings*, RF24*)>
    2a48:	d0 93 b3 0c 	sts	0x0CB3, r29	; 0x800cb3 <Main1+0x1>
    2a4c:	c0 93 b2 0c 	sts	0x0CB2, r28	; 0x800cb2 <Main1>
b:\Gbox420\Gbox420\Gbox420_Mega_Main/Gbox420_Mega_Main.ino:116

  //   sendEmailAlert(F("Grow%20box%20(re)started"));
  logToSerials(F("Setup ready, starting loops:"), true, 0);
    2a50:	40 e0       	ldi	r20, 0x00	; 0
    2a52:	61 e0       	ldi	r22, 0x01	; 1
    2a54:	83 e6       	ldi	r24, 0x63	; 99
    2a56:	96 e0       	ldi	r25, 0x06	; 6
b:\Gbox420\Gbox420\Gbox420_Mega_Main/Gbox420_Mega_Main.ino:117
}
    2a58:	df 91       	pop	r29
    2a5a:	cf 91       	pop	r28
b:\Gbox420\Gbox420\Gbox420_Mega_Main/Gbox420_Mega_Main.ino:116
  // Create the Module objects
  logToSerials(F("Creating Main module"), true, 0);
  Main1 = new MainModule(F("Main1"), &ModuleSettings->Main1, &Wireless); ///< This is the main object representing an entire Grow Box with all components in it. Receives its name and the settings loaded from the EEPROM as parameters

  //   sendEmailAlert(F("Grow%20box%20(re)started"));
  logToSerials(F("Setup ready, starting loops:"), true, 0);
    2a5c:	0c 94 85 16 	jmp	0x2d0a	; 0x2d0a <logToSerials(__FlashStringHelper const*, bool, unsigned char)>

00002a60 <getWirelessStatus()>:
_Z17getWirelessStatusv():
b:\Gbox420\Gbox420\Gbox420_Mega_Main/Gbox420_Mega_Main.ino:387
/**
  \brief Prints the nRF24L01+ wireless transceiver's status to the Serial log
*/
void getWirelessStatus()
{
  if (*Debug)
    2a60:	e0 91 b7 0c 	lds	r30, 0x0CB7	; 0x800cb7 <Debug>
    2a64:	f0 91 b8 0c 	lds	r31, 0x0CB8	; 0x800cb8 <Debug+0x1>
    2a68:	80 81       	ld	r24, Z
    2a6a:	88 23       	and	r24, r24
    2a6c:	81 f0       	breq	.+32     	; 0x2a8e <getWirelessStatus()+0x2e>
b:\Gbox420\Gbox420\Gbox420_Mega_Main/Gbox420_Mega_Main.ino:389
  {
    logToSerials(F("Wireless report:"), true, 0);
    2a6e:	40 e0       	ldi	r20, 0x00	; 0
    2a70:	61 e0       	ldi	r22, 0x01	; 1
    2a72:	82 e7       	ldi	r24, 0x72	; 114
    2a74:	95 e0       	ldi	r25, 0x05	; 5
    2a76:	0e 94 85 16 	call	0x2d0a	; 0x2d0a <logToSerials(__FlashStringHelper const*, bool, unsigned char)>
b:\Gbox420\Gbox420\Gbox420_Mega_Main/Gbox420_Mega_Main.ino:390
    Wireless.printPrettyDetails();
    2a7a:	85 e9       	ldi	r24, 0x95	; 149
    2a7c:	9c e0       	ldi	r25, 0x0C	; 12
    2a7e:	0e 94 08 6a 	call	0xd410	; 0xd410 <RF24::printPrettyDetails()>
b:\Gbox420\Gbox420\Gbox420_Mega_Main/Gbox420_Mega_Main.ino:391
    logToSerials(F(""), true, 0);
    2a82:	40 e0       	ldi	r20, 0x00	; 0
    2a84:	61 e0       	ldi	r22, 0x01	; 1
    2a86:	81 e7       	ldi	r24, 0x71	; 113
    2a88:	95 e0       	ldi	r25, 0x05	; 5
    2a8a:	0c 94 85 16 	jmp	0x2d0a	; 0x2d0a <logToSerials(__FlashStringHelper const*, bool, unsigned char)>
b:\Gbox420\Gbox420\Gbox420_Mega_Main/Gbox420_Mega_Main.ino:393
  }
}
    2a8e:	08 95       	ret

00002a90 <runMinute()>:
_Z9runMinutev():
b:\Gbox420\Gbox420\Gbox420_Mega_Main/Gbox420_Mega_Main.ino:146
  Main1->runFiveSec();
}

void runMinute()
{
  wdt_reset();
    2a90:	a8 95       	wdr
b:\Gbox420\Gbox420\Gbox420_Mega_Main/Gbox420_Mega_Main.ino:147
  Main1->runMinute();
    2a92:	a0 91 b2 0c 	lds	r26, 0x0CB2	; 0x800cb2 <Main1>
    2a96:	b0 91 b3 0c 	lds	r27, 0x0CB3	; 0x800cb3 <Main1+0x1>
    2a9a:	ed 91       	ld	r30, X+
    2a9c:	fc 91       	ld	r31, X
    2a9e:	11 97       	sbiw	r26, 0x01	; 1
    2aa0:	72 97       	sbiw	r30, 0x12	; 18
    2aa2:	80 81       	ld	r24, Z
    2aa4:	91 81       	ldd	r25, Z+1	; 0x01
    2aa6:	8a 0f       	add	r24, r26
    2aa8:	9b 1f       	adc	r25, r27
    2aaa:	0e 94 c9 1a 	call	0x3592	; 0x3592 <Module::runMinute()>
b:\Gbox420\Gbox420\Gbox420_Mega_Main/Gbox420_Mega_Main.ino:148
  getWirelessStatus();
    2aae:	0c 94 30 15 	jmp	0x2a60	; 0x2a60 <getWirelessStatus()>

00002ab2 <void logToSerials<char*>(char**, bool, unsigned char)>:
_Z12logToSerialsIPcEvPT_bh():
b:\Gbox420\Gbox420\Gbox420_Mega_Main\build\sketch/SerialLog.h:16
extern HardwareSerial &ArduinoSerial;
extern HardwareSerial &ESPSerial;

void logToSerials(const __FlashStringHelper *ToPrint, bool BreakLine = true, uint8_t Indent = 3); ///< logs to both Arduino and ESP Link serial console, 2 optional parameters to adding a break line at after printing and the indentation in front
template <class logLine>
void logToSerials(logLine *ToPrint, bool BreakLine = true, uint8_t Indent = 3)
    2ab2:	0f 93       	push	r16
    2ab4:	1f 93       	push	r17
    2ab6:	cf 93       	push	r28
    2ab8:	df 93       	push	r29
    2aba:	ec 01       	movw	r28, r24
    2abc:	06 2f       	mov	r16, r22
    2abe:	14 2f       	mov	r17, r20
b:\Gbox420\Gbox420\Gbox420_Mega_Main\build\sketch/SerialLog.h:18
{
  while (Indent > 0)
    2ac0:	11 23       	and	r17, r17
    2ac2:	71 f0       	breq	.+28     	; 0x2ae0 <void logToSerials<char*>(char**, bool, unsigned char)+0x2e>
b:\Gbox420\Gbox420\Gbox420_Mega_Main\build\sketch/SerialLog.h:20
  {
    ArduinoSerial.print(F(" "));
    2ac4:	6b e6       	ldi	r22, 0x6B	; 107
    2ac6:	75 e0       	ldi	r23, 0x05	; 5
    2ac8:	84 e5       	ldi	r24, 0x54	; 84
    2aca:	95 e1       	ldi	r25, 0x15	; 21
    2acc:	0e 94 6c 8b 	call	0x116d8	; 0x116d8 <Print::print(__FlashStringHelper const*)>
b:\Gbox420\Gbox420\Gbox420_Mega_Main\build\sketch/SerialLog.h:21
    ESPSerial.print(F(" "));
    2ad0:	69 e6       	ldi	r22, 0x69	; 105
    2ad2:	75 e0       	ldi	r23, 0x05	; 5
    2ad4:	8e e8       	ldi	r24, 0x8E	; 142
    2ad6:	96 e1       	ldi	r25, 0x16	; 22
    2ad8:	0e 94 6c 8b 	call	0x116d8	; 0x116d8 <Print::print(__FlashStringHelper const*)>
b:\Gbox420\Gbox420\Gbox420_Mega_Main\build\sketch/SerialLog.h:22
    Indent--;
    2adc:	11 50       	subi	r17, 0x01	; 1
b:\Gbox420\Gbox420\Gbox420_Mega_Main\build\sketch/SerialLog.h:18

void logToSerials(const __FlashStringHelper *ToPrint, bool BreakLine = true, uint8_t Indent = 3); ///< logs to both Arduino and ESP Link serial console, 2 optional parameters to adding a break line at after printing and the indentation in front
template <class logLine>
void logToSerials(logLine *ToPrint, bool BreakLine = true, uint8_t Indent = 3)
{
  while (Indent > 0)
    2ade:	f0 cf       	rjmp	.-32     	; 0x2ac0 <void logToSerials<char*>(char**, bool, unsigned char)+0xe>
    2ae0:	68 81       	ld	r22, Y
    2ae2:	79 81       	ldd	r23, Y+1	; 0x01
b:\Gbox420\Gbox420\Gbox420_Mega_Main\build\sketch/SerialLog.h:26
    ESPSerial.print(F(" "));
    Indent--;
  }
  if (BreakLine)
  {
    ArduinoSerial.println((*ToPrint));
    2ae4:	84 e5       	ldi	r24, 0x54	; 84
    2ae6:	95 e1       	ldi	r25, 0x15	; 21
b:\Gbox420\Gbox420\Gbox420_Mega_Main\build\sketch/SerialLog.h:24
  {
    ArduinoSerial.print(F(" "));
    ESPSerial.print(F(" "));
    Indent--;
  }
  if (BreakLine)
    2ae8:	00 23       	and	r16, r16
    2aea:	61 f0       	breq	.+24     	; 0x2b04 <void logToSerials<char*>(char**, bool, unsigned char)+0x52>
b:\Gbox420\Gbox420\Gbox420_Mega_Main\build\sketch/SerialLog.h:26
  {
    ArduinoSerial.println((*ToPrint));
    2aec:	0e 94 c3 8b 	call	0x11786	; 0x11786 <Print::println(char const*)>
b:\Gbox420\Gbox420\Gbox420_Mega_Main\build\sketch/SerialLog.h:27
    ESPSerial.println((*ToPrint));
    2af0:	68 81       	ld	r22, Y
    2af2:	79 81       	ldd	r23, Y+1	; 0x01
    2af4:	8e e8       	ldi	r24, 0x8E	; 142
    2af6:	96 e1       	ldi	r25, 0x16	; 22
b:\Gbox420\Gbox420\Gbox420_Mega_Main\build\sketch/SerialLog.h:34
  else
  {
    ArduinoSerial.print((*ToPrint));
    ESPSerial.print((*ToPrint));
  }
}
    2af8:	df 91       	pop	r29
    2afa:	cf 91       	pop	r28
    2afc:	1f 91       	pop	r17
    2afe:	0f 91       	pop	r16
b:\Gbox420\Gbox420\Gbox420_Mega_Main\build\sketch/SerialLog.h:27
    Indent--;
  }
  if (BreakLine)
  {
    ArduinoSerial.println((*ToPrint));
    ESPSerial.println((*ToPrint));
    2b00:	0c 94 c3 8b 	jmp	0x11786	; 0x11786 <Print::println(char const*)>
b:\Gbox420\Gbox420\Gbox420_Mega_Main\build\sketch/SerialLog.h:31
  }
  else
  {
    ArduinoSerial.print((*ToPrint));
    2b04:	0e 94 9e 8b 	call	0x1173c	; 0x1173c <Print::print(char const*)>
b:\Gbox420\Gbox420\Gbox420_Mega_Main\build\sketch/SerialLog.h:32
    ESPSerial.print((*ToPrint));
    2b08:	68 81       	ld	r22, Y
    2b0a:	79 81       	ldd	r23, Y+1	; 0x01
    2b0c:	8e e8       	ldi	r24, 0x8E	; 142
    2b0e:	96 e1       	ldi	r25, 0x16	; 22
b:\Gbox420\Gbox420\Gbox420_Mega_Main\build\sketch/SerialLog.h:34
  }
}
    2b10:	df 91       	pop	r29
    2b12:	cf 91       	pop	r28
    2b14:	1f 91       	pop	r17
    2b16:	0f 91       	pop	r16
b:\Gbox420\Gbox420\Gbox420_Mega_Main\build\sketch/SerialLog.h:32
    ESPSerial.println((*ToPrint));
  }
  else
  {
    ArduinoSerial.print((*ToPrint));
    ESPSerial.print((*ToPrint));
    2b18:	0c 94 9e 8b 	jmp	0x1173c	; 0x1173c <Print::print(char const*)>

00002b1c <settingsButtonCallback(char*)>:
_Z22settingsButtonCallbackPc():
b:\Gbox420\Gbox420\Gbox420_Mega_Main/Gbox420_Mega_Main.ino:350
/**
  \brief Called when a button is pressed on the /Settings.html web page.
  \param Button - ID of the button HTML element
*/
void settingsButtonCallback(char *Button)
{
    2b1c:	0f 93       	push	r16
    2b1e:	1f 93       	push	r17
    2b20:	cf 93       	push	r28
    2b22:	df 93       	push	r29
    2b24:	1f 92       	push	r1
    2b26:	1f 92       	push	r1
    2b28:	cd b7       	in	r28, 0x3d	; 61
    2b2a:	de b7       	in	r29, 0x3e	; 62
    2b2c:	9a 83       	std	Y+2, r25	; 0x02
    2b2e:	89 83       	std	Y+1, r24	; 0x01
b:\Gbox420\Gbox420\Gbox420_Mega_Main/Gbox420_Mega_Main.ino:351
  if (*Debug)
    2b30:	e0 91 b7 0c 	lds	r30, 0x0CB7	; 0x800cb7 <Debug>
    2b34:	f0 91 b8 0c 	lds	r31, 0x0CB8	; 0x800cb8 <Debug+0x1>
    2b38:	80 81       	ld	r24, Z
    2b3a:	88 23       	and	r24, r24
    2b3c:	61 f0       	breq	.+24     	; 0x2b56 <settingsButtonCallback(char*)+0x3a>
b:\Gbox420\Gbox420\Gbox420_Mega_Main/Gbox420_Mega_Main.ino:353
  {
    logToSerials(F("Settings button:"), false, 0);
    2b3e:	40 e0       	ldi	r20, 0x00	; 0
    2b40:	60 e0       	ldi	r22, 0x00	; 0
    2b42:	8e e9       	ldi	r24, 0x9E	; 158
    2b44:	95 e0       	ldi	r25, 0x05	; 5
    2b46:	0e 94 85 16 	call	0x2d0a	; 0x2d0a <logToSerials(__FlashStringHelper const*, bool, unsigned char)>
b:\Gbox420\Gbox420\Gbox420_Mega_Main/Gbox420_Mega_Main.ino:354
    logToSerials(&Button, true, 1);
    2b4a:	41 e0       	ldi	r20, 0x01	; 1
    2b4c:	61 e0       	ldi	r22, 0x01	; 1
    2b4e:	ce 01       	movw	r24, r28
    2b50:	01 96       	adiw	r24, 0x01	; 1
    2b52:	0e 94 59 15 	call	0x2ab2	; 0x2ab2 <void logToSerials<char*>(char**, bool, unsigned char)>
b:\Gbox420\Gbox420\Gbox420_Mega_Main/Gbox420_Mega_Main.ino:356
  }
  if (strcmp_P(Button, (PGM_P)F("RestoreDef")) == 0)
    2b56:	09 81       	ldd	r16, Y+1	; 0x01
    2b58:	1a 81       	ldd	r17, Y+2	; 0x02
    2b5a:	63 e9       	ldi	r22, 0x93	; 147
    2b5c:	75 e0       	ldi	r23, 0x05	; 5
    2b5e:	c8 01       	movw	r24, r16
    2b60:	0e 94 e5 94 	call	0x129ca	; 0x129ca <strcmp_P>
    2b64:	89 2b       	or	r24, r25
    2b66:	79 f4       	brne	.+30     	; 0x2b86 <settingsButtonCallback(char*)+0x6a>
b:\Gbox420\Gbox420\Gbox420_Mega_Main/Gbox420_Mega_Main.ino:358
  {
    restoreDefaults();
    2b68:	0e 94 a4 18 	call	0x3148	; 0x3148 <restoreDefaults()>
b:\Gbox420\Gbox420\Gbox420_Mega_Main/Gbox420_Mega_Main.ino:364
  }
  else
  {
    Main1->settingsEvent_Command(Button, NULL);
  }
  saveSettings(ModuleSettings);
    2b6c:	80 91 b9 0c 	lds	r24, 0x0CB9	; 0x800cb9 <ModuleSettings>
    2b70:	90 91 ba 0c 	lds	r25, 0x0CBA	; 0x800cba <ModuleSettings+0x1>
    2b74:	0e 94 c6 16 	call	0x2d8c	; 0x2d8c <saveSettings(Settings*)>
b:\Gbox420\Gbox420\Gbox420_Mega_Main/Gbox420_Mega_Main.ino:365
}
    2b78:	0f 90       	pop	r0
    2b7a:	0f 90       	pop	r0
    2b7c:	df 91       	pop	r29
    2b7e:	cf 91       	pop	r28
    2b80:	1f 91       	pop	r17
    2b82:	0f 91       	pop	r16
    2b84:	08 95       	ret
b:\Gbox420\Gbox420\Gbox420_Mega_Main/Gbox420_Mega_Main.ino:362
  {
    restoreDefaults();
  }
  else
  {
    Main1->settingsEvent_Command(Button, NULL);
    2b86:	a0 91 b2 0c 	lds	r26, 0x0CB2	; 0x800cb2 <Main1>
    2b8a:	b0 91 b3 0c 	lds	r27, 0x0CB3	; 0x800cb3 <Main1+0x1>
    2b8e:	ed 91       	ld	r30, X+
    2b90:	fc 91       	ld	r31, X
    2b92:	11 97       	sbiw	r26, 0x01	; 1
    2b94:	70 97       	sbiw	r30, 0x10	; 16
    2b96:	80 81       	ld	r24, Z
    2b98:	91 81       	ldd	r25, Z+1	; 0x01
    2b9a:	50 e0       	ldi	r21, 0x00	; 0
    2b9c:	40 e0       	ldi	r20, 0x00	; 0
    2b9e:	b8 01       	movw	r22, r16
    2ba0:	8a 0f       	add	r24, r26
    2ba2:	9b 1f       	adc	r25, r27
    2ba4:	0e 94 cf 3d 	call	0x7b9e	; 0x7b9e <Module_Web::settingsEvent_Command(char*, char*)>
    2ba8:	e1 cf       	rjmp	.-62     	; 0x2b6c <settingsButtonCallback(char*)+0x50>

00002baa <settingsFieldCallback(char*)>:
_Z21settingsFieldCallbackPc():
b:\Gbox420\Gbox420\Gbox420_Mega_Main/Gbox420_Mega_Main.ino:372
/**
  \brief Called when a field on the /Settings.html website is submitted
  \param Field - Name of the input HTML element
*/
void settingsFieldCallback(char *Field)
{
    2baa:	0f 93       	push	r16
    2bac:	1f 93       	push	r17
    2bae:	cf 93       	push	r28
    2bb0:	df 93       	push	r29
    2bb2:	1f 92       	push	r1
    2bb4:	1f 92       	push	r1
    2bb6:	cd b7       	in	r28, 0x3d	; 61
    2bb8:	de b7       	in	r29, 0x3e	; 62
    2bba:	9a 83       	std	Y+2, r25	; 0x02
    2bbc:	89 83       	std	Y+1, r24	; 0x01
b:\Gbox420\Gbox420\Gbox420_Mega_Main/Gbox420_Mega_Main.ino:373
  if (*Debug)
    2bbe:	e0 91 b7 0c 	lds	r30, 0x0CB7	; 0x800cb7 <Debug>
    2bc2:	f0 91 b8 0c 	lds	r31, 0x0CB8	; 0x800cb8 <Debug+0x1>
    2bc6:	80 81       	ld	r24, Z
    2bc8:	88 23       	and	r24, r24
    2bca:	61 f0       	breq	.+24     	; 0x2be4 <settingsFieldCallback(char*)+0x3a>
b:\Gbox420\Gbox420\Gbox420_Mega_Main/Gbox420_Mega_Main.ino:375
  {
    logToSerials(F("Settings field:"), false, 0);
    2bcc:	40 e0       	ldi	r20, 0x00	; 0
    2bce:	60 e0       	ldi	r22, 0x00	; 0
    2bd0:	83 e8       	ldi	r24, 0x83	; 131
    2bd2:	95 e0       	ldi	r25, 0x05	; 5
    2bd4:	0e 94 85 16 	call	0x2d0a	; 0x2d0a <logToSerials(__FlashStringHelper const*, bool, unsigned char)>
b:\Gbox420\Gbox420\Gbox420_Mega_Main/Gbox420_Mega_Main.ino:376
    logToSerials(&Field, true, 1);
    2bd8:	41 e0       	ldi	r20, 0x01	; 1
    2bda:	61 e0       	ldi	r22, 0x01	; 1
    2bdc:	ce 01       	movw	r24, r28
    2bde:	01 96       	adiw	r24, 0x01	; 1
    2be0:	0e 94 59 15 	call	0x2ab2	; 0x2ab2 <void logToSerials<char*>(char**, bool, unsigned char)>
b:\Gbox420\Gbox420\Gbox420_Mega_Main/Gbox420_Mega_Main.ino:378
  }
  Main1->settingsEvent_Command(Field, WebServer.getArgString());
    2be4:	e0 91 b2 0c 	lds	r30, 0x0CB2	; 0x800cb2 <Main1>
    2be8:	f0 91 b3 0c 	lds	r31, 0x0CB3	; 0x800cb3 <Main1+0x1>
    2bec:	a0 81       	ld	r26, Z
    2bee:	b1 81       	ldd	r27, Z+1	; 0x01
    2bf0:	50 97       	sbiw	r26, 0x10	; 16
    2bf2:	0d 91       	ld	r16, X+
    2bf4:	1c 91       	ld	r17, X
    2bf6:	0e 0f       	add	r16, r30
    2bf8:	1f 1f       	adc	r17, r31
    2bfa:	89 ee       	ldi	r24, 0xE9	; 233
    2bfc:	9c e0       	ldi	r25, 0x0C	; 12
    2bfe:	0e 94 da 79 	call	0xf3b4	; 0xf3b4 <ELClientWebServer::getArgString()>
    2c02:	69 81       	ldd	r22, Y+1	; 0x01
    2c04:	7a 81       	ldd	r23, Y+2	; 0x02
    2c06:	ac 01       	movw	r20, r24
    2c08:	c8 01       	movw	r24, r16
    2c0a:	0e 94 cf 3d 	call	0x7b9e	; 0x7b9e <Module_Web::settingsEvent_Command(char*, char*)>
b:\Gbox420\Gbox420\Gbox420_Mega_Main/Gbox420_Mega_Main.ino:379
  saveSettings(ModuleSettings);
    2c0e:	80 91 b9 0c 	lds	r24, 0x0CB9	; 0x800cb9 <ModuleSettings>
    2c12:	90 91 ba 0c 	lds	r25, 0x0CBA	; 0x800cba <ModuleSettings+0x1>
    2c16:	0e 94 c6 16 	call	0x2d8c	; 0x2d8c <saveSettings(Settings*)>
b:\Gbox420\Gbox420\Gbox420_Mega_Main/Gbox420_Mega_Main.ino:380
}
    2c1a:	0f 90       	pop	r0
    2c1c:	0f 90       	pop	r0
    2c1e:	df 91       	pop	r29
    2c20:	cf 91       	pop	r28
    2c22:	1f 91       	pop	r17
    2c24:	0f 91       	pop	r16
    2c26:	08 95       	ret

00002c28 <_GLOBAL__sub_I__Z11serial_putccP6(float, int, long,...)>:
_GLOBAL__sub_I__Z11serial_putccP6__file():
b:\Gbox420\Gbox420\Gbox420_Mega_Main/Gbox420_Mega_Main.ino:400
/**
  \brief Ignores the incoming loa/refresh event. Used when embedding another module's web interface that already handles the event
*/
void ignoreCallback(__attribute__((unused)) char *Url)
{
    2c28:	0f 93       	push	r16
    2c2a:	1f 93       	push	r17
__static_initialization_and_destruction_0():
b:\Gbox420\Gbox420\Gbox420_Mega_Main/Gbox420_Mega_Main.ino:36
char CurrentTime[MaxWordLength] = "";      ///< Buffer for storing current time in text format

// Component initialization
HardwareSerial &ArduinoSerial = Serial;   ///< Reference to the Arduino Serial output
HardwareSerial &ESPSerial = Serial3;      ///< Reference to the ESP Link Serial output
ELClient ESPLink(&ESPSerial);             ///< ESP-link. Both SLIP and debug messages are sent to ESP over the ESP Serial link
    2c2c:	6e e8       	ldi	r22, 0x8E	; 142
    2c2e:	76 e1       	ldi	r23, 0x16	; 22
    2c30:	8b ef       	ldi	r24, 0xFB	; 251
    2c32:	9c e0       	ldi	r25, 0x0C	; 12
    2c34:	0e 94 a3 6d 	call	0xdb46	; 0xdb46 <ELClient::ELClient(Stream*)>
b:\Gbox420\Gbox420\Gbox420_Mega_Main/Gbox420_Mega_Main.ino:37
ELClientWebServer WebServer(&ESPLink);    ///< ESP-link - WebServer API
    2c38:	6b ef       	ldi	r22, 0xFB	; 251
    2c3a:	7c e0       	ldi	r23, 0x0C	; 12
    2c3c:	89 ee       	ldi	r24, 0xE9	; 233
    2c3e:	9c e0       	ldi	r25, 0x0C	; 12
    2c40:	0e 94 24 75 	call	0xea48	; 0xea48 <ELClientWebServer::ELClientWebServer(ELClient*)>
b:\Gbox420\Gbox420\Gbox420_Mega_Main/Gbox420_Mega_Main.ino:38
ELClientCmd ESPCmd(&ESPLink);             ///< ESP-link - Helps getting the current time from the internet using NTP
    2c44:	6b ef       	ldi	r22, 0xFB	; 251
    2c46:	7c e0       	ldi	r23, 0x0C	; 12
    2c48:	87 ee       	ldi	r24, 0xE7	; 231
    2c4a:	9c e0       	ldi	r25, 0x0C	; 12
    2c4c:	0e 94 2d 71 	call	0xe25a	; 0xe25a <ELClientCmd::ELClientCmd(ELClient*)>
b:\Gbox420\Gbox420\Gbox420_Mega_Main/Gbox420_Mega_Main.ino:39
ELClientRest PushingBoxRestAPI(&ESPLink); ///< ESP-link - REST API
    2c50:	6b ef       	ldi	r22, 0xFB	; 251
    2c52:	7c e0       	ldi	r23, 0x0C	; 12
    2c54:	85 ed       	ldi	r24, 0xD5	; 213
    2c56:	9c e0       	ldi	r25, 0x0C	; 12
    2c58:	0e 94 13 74 	call	0xe826	; 0xe826 <ELClientRest::ELClientRest(ELClient*)>
b:\Gbox420\Gbox420\Gbox420_Mega_Main/Gbox420_Mega_Main.ino:40
ELClientMqtt MqttAPI(&ESPLink);           ///< ESP-link - MQTT protocol for sending and receiving messages
    2c5c:	6b ef       	ldi	r22, 0xFB	; 251
    2c5e:	7c e0       	ldi	r23, 0x0C	; 12
    2c60:	8b eb       	ldi	r24, 0xBB	; 187
    2c62:	9c e0       	ldi	r25, 0x0C	; 12
    2c64:	0e 94 5d 71 	call	0xe2ba	; 0xe2ba <ELClientMqtt::ELClientMqtt(ELClient*)>
b:\Gbox420\Gbox420\Gbox420_Mega_Main/Gbox420_Mega_Main.ino:47
bool *Debug;                              ///< True - Turns on extra debug messages on the Serial Output
bool *Metric;                             ///< True - Use metric units, False - Use imperial units
bool MqttConnected = false;               ///< Track the connection state to the MQTT broker configured on the ESP-link's REST/MQTT tab
MainModule *Main1;                        ///< Represents a Grow Box with all components (Lights, DHT sensors, Power sensor, Aero/Hempy/Reservoir wireless modules,..etc)

RF24 Wireless(WirelessCEPin, WirelessCSNPin); ///< Wireless communication with Modules over nRF24L01+
    2c68:	00 e8       	ldi	r16, 0x80	; 128
    2c6a:	16 e9       	ldi	r17, 0x96	; 150
    2c6c:	28 e9       	ldi	r18, 0x98	; 152
    2c6e:	30 e0       	ldi	r19, 0x00	; 0
    2c70:	41 e3       	ldi	r20, 0x31	; 49
    2c72:	50 e0       	ldi	r21, 0x00	; 0
    2c74:	65 e3       	ldi	r22, 0x35	; 53
    2c76:	70 e0       	ldi	r23, 0x00	; 0
    2c78:	85 e9       	ldi	r24, 0x95	; 149
    2c7a:	9c e0       	ldi	r25, 0x0C	; 12
    2c7c:	0e 94 d6 67 	call	0xcfac	; 0xcfac <RF24::RF24(unsigned int, unsigned int, unsigned long)>
b:\Gbox420\Gbox420\Gbox420_Mega_Main/Gbox420_Mega_Main.ino:50

// Thread initialization
Thread OneSecThread = Thread();
    2c80:	20 e0       	ldi	r18, 0x00	; 0
    2c82:	30 e0       	ldi	r19, 0x00	; 0
    2c84:	a9 01       	movw	r20, r18
    2c86:	70 e0       	ldi	r23, 0x00	; 0
    2c88:	60 e0       	ldi	r22, 0x00	; 0
    2c8a:	82 e8       	ldi	r24, 0x82	; 130
    2c8c:	9c e0       	ldi	r25, 0x0C	; 12
    2c8e:	0e 94 bd 7a 	call	0xf57a	; 0xf57a <Thread::Thread(void (*)(), unsigned long)>
b:\Gbox420\Gbox420\Gbox420_Mega_Main/Gbox420_Mega_Main.ino:51
Thread FiveSecThread = Thread();
    2c92:	20 e0       	ldi	r18, 0x00	; 0
    2c94:	30 e0       	ldi	r19, 0x00	; 0
    2c96:	a9 01       	movw	r20, r18
    2c98:	70 e0       	ldi	r23, 0x00	; 0
    2c9a:	60 e0       	ldi	r22, 0x00	; 0
    2c9c:	8f e6       	ldi	r24, 0x6F	; 111
    2c9e:	9c e0       	ldi	r25, 0x0C	; 12
    2ca0:	0e 94 bd 7a 	call	0xf57a	; 0xf57a <Thread::Thread(void (*)(), unsigned long)>
b:\Gbox420\Gbox420\Gbox420_Mega_Main/Gbox420_Mega_Main.ino:52
Thread MinuteThread = Thread();
    2ca4:	20 e0       	ldi	r18, 0x00	; 0
    2ca6:	30 e0       	ldi	r19, 0x00	; 0
    2ca8:	a9 01       	movw	r20, r18
    2caa:	70 e0       	ldi	r23, 0x00	; 0
    2cac:	60 e0       	ldi	r22, 0x00	; 0
    2cae:	8c e5       	ldi	r24, 0x5C	; 92
    2cb0:	9c e0       	ldi	r25, 0x0C	; 12
    2cb2:	0e 94 bd 7a 	call	0xf57a	; 0xf57a <Thread::Thread(void (*)(), unsigned long)>
_ZN22StaticThreadControllerILi3EEC4IJP6ThreadS3_S3_EEEDpT_():
C:\Program Files (x86)\Arduino\libraries\ArduinoThread-master/StaticThreadController.h:31
	Thread * const thread[N];
public:
	template <typename... T>
        StaticThreadController(T... params) :
		Thread(),
		thread{params...}
    2cb6:	20 e0       	ldi	r18, 0x00	; 0
    2cb8:	30 e0       	ldi	r19, 0x00	; 0
    2cba:	a9 01       	movw	r20, r18
    2cbc:	70 e0       	ldi	r23, 0x00	; 0
    2cbe:	60 e0       	ldi	r22, 0x00	; 0
    2cc0:	83 e4       	ldi	r24, 0x43	; 67
    2cc2:	9c e0       	ldi	r25, 0x0C	; 12
    2cc4:	0e 94 bd 7a 	call	0xf57a	; 0xf57a <Thread::Thread(void (*)(), unsigned long)>
    2cc8:	e3 e4       	ldi	r30, 0x43	; 67
    2cca:	fc e0       	ldi	r31, 0x0C	; 12
    2ccc:	87 e2       	ldi	r24, 0x27	; 39
    2cce:	94 e0       	ldi	r25, 0x04	; 4
    2cd0:	91 83       	std	Z+1, r25	; 0x01
    2cd2:	80 83       	st	Z, r24
    2cd4:	82 e8       	ldi	r24, 0x82	; 130
    2cd6:	9c e0       	ldi	r25, 0x0C	; 12
    2cd8:	94 8b       	std	Z+20, r25	; 0x14
    2cda:	83 8b       	std	Z+19, r24	; 0x13
    2cdc:	8f e6       	ldi	r24, 0x6F	; 111
    2cde:	9c e0       	ldi	r25, 0x0C	; 12
    2ce0:	96 8b       	std	Z+22, r25	; 0x16
    2ce2:	85 8b       	std	Z+21, r24	; 0x15
    2ce4:	8c e5       	ldi	r24, 0x5C	; 92
    2ce6:	9c e0       	ldi	r25, 0x0C	; 12
    2ce8:	90 8f       	std	Z+24, r25	; 0x18
    2cea:	87 8b       	std	Z+23, r24	; 0x17
_GLOBAL__sub_I__Z11serial_putccP6__file():
b:\Gbox420\Gbox420\Gbox420_Mega_Main/Gbox420_Mega_Main.ino:400
/**
  \brief Ignores the incoming loa/refresh event. Used when embedding another module's web interface that already handles the event
*/
void ignoreCallback(__attribute__((unused)) char *Url)
{
    2cec:	1f 91       	pop	r17
    2cee:	0f 91       	pop	r16
    2cf0:	08 95       	ret

00002cf2 <serial_putc(char, __file*)>:
_Z11serial_putccP6__file():
C:\Program Files (x86)\Arduino\libraries\RF24-master/printf.h:23
#define __PRINTF_H__

#if defined(ARDUINO_ARCH_AVR) || defined(__ARDUINO_X86__)

int serial_putc(char c, FILE *)
{
    2cf2:	cf 93       	push	r28
    2cf4:	c8 2f       	mov	r28, r24
_ZN14HardwareSerial5writeEi():
C:\Users\bitmu\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial.h:133
    virtual void flush(void);
    virtual size_t write(uint8_t);
    inline size_t write(unsigned long n) { return write((uint8_t)n); }
    inline size_t write(long n) { return write((uint8_t)n); }
    inline size_t write(unsigned int n) { return write((uint8_t)n); }
    inline size_t write(int n) { return write((uint8_t)n); }
    2cf6:	68 2f       	mov	r22, r24
    2cf8:	84 e5       	ldi	r24, 0x54	; 84
    2cfa:	95 e1       	ldi	r25, 0x15	; 21
    2cfc:	0e 94 cc 88 	call	0x11198	; 0x11198 <HardwareSerial::write(unsigned char)>
_Z11serial_putccP6__file():
C:\Program Files (x86)\Arduino\libraries\RF24-master/printf.h:26
  Serial.write(c);
  return c;
}
    2d00:	8c 2f       	mov	r24, r28
    2d02:	cc 0f       	add	r28, r28
    2d04:	99 0b       	sbc	r25, r25
    2d06:	cf 91       	pop	r28
    2d08:	08 95       	ret

00002d0a <logToSerials(__FlashStringHelper const*, bool, unsigned char)>:
_Z12logToSerialsPK19__FlashStringHelperbh():
b:\Gbox420\Gbox420\Gbox420_Mega_Main\build\sketch/SerialLog.cpp:6
#include "SerialLog.h"

///< Logging

void logToSerials(const __FlashStringHelper *ToPrint, bool BreakLine, uint8_t Indent)
{
    2d0a:	cf 92       	push	r12
    2d0c:	df 92       	push	r13
    2d0e:	ef 92       	push	r14
    2d10:	ff 92       	push	r15
    2d12:	0f 93       	push	r16
    2d14:	1f 93       	push	r17
    2d16:	cf 93       	push	r28
    2d18:	df 93       	push	r29
    2d1a:	ec 01       	movw	r28, r24
    2d1c:	c6 2e       	mov	r12, r22
    2d1e:	d4 2e       	mov	r13, r20
    2d20:	e0 90 2f 04 	lds	r14, 0x042F	; 0x80042f <ArduinoSerial>
    2d24:	f0 90 30 04 	lds	r15, 0x0430	; 0x800430 <ArduinoSerial+0x1>
    2d28:	00 91 2d 04 	lds	r16, 0x042D	; 0x80042d <ESPSerial>
    2d2c:	10 91 2e 04 	lds	r17, 0x042E	; 0x80042e <ESPSerial+0x1>
b:\Gbox420\Gbox420\Gbox420_Mega_Main\build\sketch/SerialLog.cpp:7
  while (Indent > 0)
    2d30:	dd 20       	and	r13, r13
    2d32:	61 f0       	breq	.+24     	; 0x2d4c <logToSerials(__FlashStringHelper const*, bool, unsigned char)+0x42>
b:\Gbox420\Gbox420\Gbox420_Mega_Main\build\sketch/SerialLog.cpp:9
  {
    ArduinoSerial.print(F(" "));
    2d34:	6e e4       	ldi	r22, 0x4E	; 78
    2d36:	77 e0       	ldi	r23, 0x07	; 7
    2d38:	c7 01       	movw	r24, r14
    2d3a:	0e 94 6c 8b 	call	0x116d8	; 0x116d8 <Print::print(__FlashStringHelper const*)>
b:\Gbox420\Gbox420\Gbox420_Mega_Main\build\sketch/SerialLog.cpp:10
    ESPSerial.print(F(" "));
    2d3e:	6c e4       	ldi	r22, 0x4C	; 76
    2d40:	77 e0       	ldi	r23, 0x07	; 7
    2d42:	c8 01       	movw	r24, r16
    2d44:	0e 94 6c 8b 	call	0x116d8	; 0x116d8 <Print::print(__FlashStringHelper const*)>
b:\Gbox420\Gbox420\Gbox420_Mega_Main\build\sketch/SerialLog.cpp:11
    Indent--;
    2d48:	da 94       	dec	r13
b:\Gbox420\Gbox420\Gbox420_Mega_Main\build\sketch/SerialLog.cpp:7

///< Logging

void logToSerials(const __FlashStringHelper *ToPrint, bool BreakLine, uint8_t Indent)
{
  while (Indent > 0)
    2d4a:	f2 cf       	rjmp	.-28     	; 0x2d30 <logToSerials(__FlashStringHelper const*, bool, unsigned char)+0x26>
b:\Gbox420\Gbox420\Gbox420_Mega_Main\build\sketch/SerialLog.cpp:15
    ESPSerial.print(F(" "));
    Indent--;
  }
  if (BreakLine)
  {
    ArduinoSerial.println(ToPrint);
    2d4c:	be 01       	movw	r22, r28
    2d4e:	c7 01       	movw	r24, r14
b:\Gbox420\Gbox420\Gbox420_Mega_Main\build\sketch/SerialLog.cpp:13
  {
    ArduinoSerial.print(F(" "));
    ESPSerial.print(F(" "));
    Indent--;
  }
  if (BreakLine)
    2d50:	cc 20       	and	r12, r12
    2d52:	71 f0       	breq	.+28     	; 0x2d70 <logToSerials(__FlashStringHelper const*, bool, unsigned char)+0x66>
b:\Gbox420\Gbox420\Gbox420_Mega_Main\build\sketch/SerialLog.cpp:15
  {
    ArduinoSerial.println(ToPrint);
    2d54:	0e 94 b1 8b 	call	0x11762	; 0x11762 <Print::println(__FlashStringHelper const*)>
b:\Gbox420\Gbox420\Gbox420_Mega_Main\build\sketch/SerialLog.cpp:16
    ESPSerial.println(ToPrint);
    2d58:	be 01       	movw	r22, r28
    2d5a:	c8 01       	movw	r24, r16
b:\Gbox420\Gbox420\Gbox420_Mega_Main\build\sketch/SerialLog.cpp:23
  else
  {
    ArduinoSerial.print(ToPrint);
    ESPSerial.print(ToPrint);
  }
    2d5c:	df 91       	pop	r29
    2d5e:	cf 91       	pop	r28
    2d60:	1f 91       	pop	r17
    2d62:	0f 91       	pop	r16
    2d64:	ff 90       	pop	r15
    2d66:	ef 90       	pop	r14
    2d68:	df 90       	pop	r13
    2d6a:	cf 90       	pop	r12
b:\Gbox420\Gbox420\Gbox420_Mega_Main\build\sketch/SerialLog.cpp:16
    Indent--;
  }
  if (BreakLine)
  {
    ArduinoSerial.println(ToPrint);
    ESPSerial.println(ToPrint);
    2d6c:	0c 94 b1 8b 	jmp	0x11762	; 0x11762 <Print::println(__FlashStringHelper const*)>
b:\Gbox420\Gbox420\Gbox420_Mega_Main\build\sketch/SerialLog.cpp:20
  }
  else
  {
    ArduinoSerial.print(ToPrint);
    2d70:	0e 94 6c 8b 	call	0x116d8	; 0x116d8 <Print::print(__FlashStringHelper const*)>
b:\Gbox420\Gbox420\Gbox420_Mega_Main\build\sketch/SerialLog.cpp:21
    ESPSerial.print(ToPrint);
    2d74:	be 01       	movw	r22, r28
    2d76:	c8 01       	movw	r24, r16
b:\Gbox420\Gbox420\Gbox420_Mega_Main\build\sketch/SerialLog.cpp:23
  }
    2d78:	df 91       	pop	r29
    2d7a:	cf 91       	pop	r28
    2d7c:	1f 91       	pop	r17
    2d7e:	0f 91       	pop	r16
    2d80:	ff 90       	pop	r15
    2d82:	ef 90       	pop	r14
    2d84:	df 90       	pop	r13
    2d86:	cf 90       	pop	r12
b:\Gbox420\Gbox420\Gbox420_Mega_Main\build\sketch/SerialLog.cpp:21
    ESPSerial.println(ToPrint);
  }
  else
  {
    ArduinoSerial.print(ToPrint);
    ESPSerial.print(ToPrint);
    2d88:	0c 94 6c 8b 	jmp	0x116d8	; 0x116d8 <Print::print(__FlashStringHelper const*)>

00002d8c <saveSettings(Settings*)>:
_Z12saveSettingsP8Settings():
b:\Gbox420\Gbox420\Gbox420_Mega_Main\build\sketch/Settings.cpp:12
  \attention Use cautiously, EEPROM has a write limit of 100.000 cycles 
*/

void saveSettings(Settings *ToSave)
{
  eeprom_update_block((const void *)ToSave, (void *)0, sizeof(Settings)); // update_block only writes the bytes that changed
    2d8c:	48 e3       	ldi	r20, 0x38	; 56
    2d8e:	52 e0       	ldi	r21, 0x02	; 2
    2d90:	70 e0       	ldi	r23, 0x00	; 0
    2d92:	60 e0       	ldi	r22, 0x00	; 0
    2d94:	0c 94 21 9d 	jmp	0x13a42	; 0x13a42 <eeprom_update_block>

00002d98 <Settings::Settings()>:
_ZN8SettingsC2Ev():
b:\Gbox420\Gbox420\Gbox420_Mega_Main\build\sketch/Settings.h:195
    bool Enabled = true; ///< Enable/Disable sound
  };
  struct SoundSettings Sound1 = {.Pin = 2};

  uint8_t CompatibilityVersion = Version; ///< Should always be the last value stored.
} Settings;
    2d98:	4f 92       	push	r4
    2d9a:	5f 92       	push	r5
    2d9c:	6f 92       	push	r6
    2d9e:	7f 92       	push	r7
    2da0:	8f 92       	push	r8
    2da2:	9f 92       	push	r9
    2da4:	af 92       	push	r10
    2da6:	bf 92       	push	r11
    2da8:	cf 92       	push	r12
    2daa:	df 92       	push	r13
    2dac:	ef 92       	push	r14
    2dae:	ff 92       	push	r15
    2db0:	cf 93       	push	r28
    2db2:	21 e0       	ldi	r18, 0x01	; 1
    2db4:	dc 01       	movw	r26, r24
    2db6:	2c 93       	st	X, r18
    2db8:	11 96       	adiw	r26, 0x01	; 1
    2dba:	2c 93       	st	X, r18
    2dbc:	11 97       	sbiw	r26, 0x01	; 1
    2dbe:	31 e1       	ldi	r19, 0x11	; 17
    2dc0:	eb e1       	ldi	r30, 0x1B	; 27
    2dc2:	f2 e0       	ldi	r31, 0x02	; 2
    2dc4:	12 96       	adiw	r26, 0x02	; 2
    2dc6:	01 90       	ld	r0, Z+
    2dc8:	0d 92       	st	X+, r0
    2dca:	3a 95       	dec	r19
    2dcc:	e1 f7       	brne	.-8      	; 0x2dc6 <Settings::Settings()+0x2e>
    2dce:	fc 01       	movw	r30, r24
    2dd0:	73 96       	adiw	r30, 0x13	; 19
    2dd2:	3f e0       	ldi	r19, 0x0F	; 15
    2dd4:	df 01       	movw	r26, r30
    2dd6:	1d 92       	st	X+, r1
    2dd8:	3a 95       	dec	r19
    2dda:	e9 f7       	brne	.-6      	; 0x2dd6 <Settings::Settings()+0x3e>
    2ddc:	39 e0       	ldi	r19, 0x09	; 9
    2dde:	eb e3       	ldi	r30, 0x3B	; 59
    2de0:	f2 e0       	ldi	r31, 0x02	; 2
    2de2:	dc 01       	movw	r26, r24
    2de4:	92 96       	adiw	r26, 0x22	; 34
    2de6:	01 90       	ld	r0, Z+
    2de8:	0d 92       	st	X+, r0
    2dea:	3a 95       	dec	r19
    2dec:	e1 f7       	brne	.-8      	; 0x2de6 <Settings::Settings()+0x4e>
    2dee:	fc 01       	movw	r30, r24
    2df0:	bb 96       	adiw	r30, 0x2b	; 43
    2df2:	37 e7       	ldi	r19, 0x77	; 119
    2df4:	df 01       	movw	r26, r30
    2df6:	1d 92       	st	X+, r1
    2df8:	3a 95       	dec	r19
    2dfa:	e9 f7       	brne	.-6      	; 0x2df6 <Settings::Settings()+0x5e>
    2dfc:	ac 01       	movw	r20, r24
    2dfe:	4e 55       	subi	r20, 0x5E	; 94
    2e00:	5f 4f       	sbci	r21, 0xFF	; 255
    2e02:	3d e0       	ldi	r19, 0x0D	; 13
    2e04:	eb eb       	ldi	r30, 0xBB	; 187
    2e06:	f2 e0       	ldi	r31, 0x02	; 2
    2e08:	da 01       	movw	r26, r20
    2e0a:	01 90       	ld	r0, Z+
    2e0c:	0d 92       	st	X+, r0
    2e0e:	3a 95       	dec	r19
    2e10:	e1 f7       	brne	.-8      	; 0x2e0a <Settings::Settings()+0x72>
    2e12:	43 5f       	subi	r20, 0xF3	; 243
    2e14:	5f 4f       	sbci	r21, 0xFF	; 255
    2e16:	33 e7       	ldi	r19, 0x73	; 115
    2e18:	fa 01       	movw	r30, r20
    2e1a:	11 92       	st	Z+, r1
    2e1c:	3a 95       	dec	r19
    2e1e:	e9 f7       	brne	.-6      	; 0x2e1a <Settings::Settings()+0x82>
    2e20:	4d 58       	subi	r20, 0x8D	; 141
    2e22:	5f 4f       	sbci	r21, 0xFF	; 255
    2e24:	3c e0       	ldi	r19, 0x0C	; 12
    2e26:	eb e3       	ldi	r30, 0x3B	; 59
    2e28:	f3 e0       	ldi	r31, 0x03	; 3
    2e2a:	da 01       	movw	r26, r20
    2e2c:	01 90       	ld	r0, Z+
    2e2e:	0d 92       	st	X+, r0
    2e30:	3a 95       	dec	r19
    2e32:	e1 f7       	brne	.-8      	; 0x2e2c <Settings::Settings()+0x94>
    2e34:	44 5f       	subi	r20, 0xF4	; 244
    2e36:	5f 4f       	sbci	r21, 0xFF	; 255
    2e38:	34 e7       	ldi	r19, 0x74	; 116
    2e3a:	da 01       	movw	r26, r20
    2e3c:	1d 92       	st	X+, r1
    2e3e:	3a 95       	dec	r19
    2e40:	e9 f7       	brne	.-6      	; 0x2e3c <Settings::Settings()+0xa4>
    2e42:	bc 01       	movw	r22, r24
    2e44:	6e 55       	subi	r22, 0x5E	; 94
    2e46:	7e 4f       	sbci	r23, 0xFE	; 254
    2e48:	30 e1       	ldi	r19, 0x10	; 16
    2e4a:	eb eb       	ldi	r30, 0xBB	; 187
    2e4c:	f3 e0       	ldi	r31, 0x03	; 3
    2e4e:	db 01       	movw	r26, r22
    2e50:	01 90       	ld	r0, Z+
    2e52:	0d 92       	st	X+, r0
    2e54:	3a 95       	dec	r19
    2e56:	e1 f7       	brne	.-8      	; 0x2e50 <Settings::Settings()+0xb8>
    2e58:	40 e1       	ldi	r20, 0x10	; 16
    2e5a:	60 5f       	subi	r22, 0xF0	; 240
    2e5c:	7f 4f       	sbci	r23, 0xFF	; 255
    2e5e:	fb 01       	movw	r30, r22
    2e60:	34 2f       	mov	r19, r20
    2e62:	11 92       	st	Z+, r1
    2e64:	3a 95       	dec	r19
    2e66:	e9 f7       	brne	.-6      	; 0x2e62 <Settings::Settings()+0xca>
AeroModuleSettings():
b:\Gbox420\Gbox420\Gbox420_Mega_Main\build\sketch/Settings.h:55
  char MqttLwtMessage[MaxWordLength] = {"Gbox420 Offline"};        ///< this is the message subscribers will get under the topic specified by MqttLwtTopic variable when the MQTT client unexpectedly goes offline

  // initialized via Designated initializer https://riptutorial.com/c/example/18609/using-designated-initializers
  struct AeroModuleSettings ///< AeroModule default settings
  {
    AeroModuleSettings(bool PressureTankPresent = false, float Duration = 0.0, uint16_t DayInterval = 0, uint16_t NightInterval = 0, uint8_t PumpSpeed = 0, uint16_t PumpTimeOut = 0, uint16_t PrimingTime = 0, float MaxPressure = 0.0, float MinPressure = 0.0) : PressureTankPresent(PressureTankPresent), Duration(Duration), DayInterval(DayInterval), NightInterval(NightInterval), PumpSpeed(PumpSpeed), PumpTimeOut(PumpTimeOut), PrimingTime(PrimingTime), MaxPressure(MaxPressure), MinPressure(MinPressure) {}
    2e68:	fc 01       	movw	r30, r24
    2e6a:	ee 53       	subi	r30, 0x3E	; 62
    2e6c:	fe 4f       	sbci	r31, 0xFE	; 254
    2e6e:	10 82       	st	Z, r1
    2e70:	c1 2c       	mov	r12, r1
    2e72:	d1 2c       	mov	r13, r1
    2e74:	30 e4       	ldi	r19, 0x40	; 64
    2e76:	e3 2e       	mov	r14, r19
    2e78:	fe 2c       	mov	r15, r14
    2e7a:	c1 82       	std	Z+1, r12	; 0x01
    2e7c:	d2 82       	std	Z+2, r13	; 0x02
    2e7e:	e3 82       	std	Z+3, r14	; 0x03
    2e80:	f4 82       	std	Z+4, r15	; 0x04
    2e82:	66 e0       	ldi	r22, 0x06	; 6
    2e84:	70 e0       	ldi	r23, 0x00	; 0
    2e86:	76 83       	std	Z+6, r23	; 0x06
    2e88:	65 83       	std	Z+5, r22	; 0x05
    2e8a:	6a e0       	ldi	r22, 0x0A	; 10
    2e8c:	70 e0       	ldi	r23, 0x00	; 0
    2e8e:	70 87       	std	Z+8, r23	; 0x08
    2e90:	67 83       	std	Z+7, r22	; 0x07
    2e92:	34 e6       	ldi	r19, 0x64	; 100
    2e94:	31 87       	std	Z+9, r19	; 0x09
    2e96:	a4 ea       	ldi	r26, 0xA4	; 164
    2e98:	b1 e0       	ldi	r27, 0x01	; 1
    2e9a:	b3 87       	std	Z+11, r27	; 0x0b
    2e9c:	a2 87       	std	Z+10, r26	; 0x0a
    2e9e:	75 87       	std	Z+13, r23	; 0x0d
    2ea0:	64 87       	std	Z+12, r22	; 0x0c
    2ea2:	c1 2c       	mov	r12, r1
    2ea4:	d1 2c       	mov	r13, r1
    2ea6:	50 ee       	ldi	r21, 0xE0	; 224
    2ea8:	e5 2e       	mov	r14, r21
    2eaa:	50 e4       	ldi	r21, 0x40	; 64
    2eac:	f5 2e       	mov	r15, r21
    2eae:	c6 86       	std	Z+14, r12	; 0x0e
    2eb0:	d7 86       	std	Z+15, r13	; 0x0f
    2eb2:	e0 8a       	std	Z+16, r14	; 0x10
    2eb4:	f1 8a       	std	Z+17, r15	; 0x11
    2eb6:	c1 2c       	mov	r12, r1
    2eb8:	d1 2c       	mov	r13, r1
    2eba:	60 ea       	ldi	r22, 0xA0	; 160
    2ebc:	e6 2e       	mov	r14, r22
    2ebe:	60 e4       	ldi	r22, 0x40	; 64
    2ec0:	f6 2e       	mov	r15, r22
    2ec2:	c2 8a       	std	Z+18, r12	; 0x12
    2ec4:	d3 8a       	std	Z+19, r13	; 0x13
    2ec6:	e4 8a       	std	Z+20, r14	; 0x14
    2ec8:	f5 8a       	std	Z+21, r15	; 0x15
ACMotorModuleSettings():
b:\Gbox420\Gbox420\Gbox420_Mega_Main\build\sketch/Settings.h:70
  };
  struct AeroModuleSettings AeroModule1 = {.PressureTankPresent = false, .Duration = 3.0, .DayInterval = 6, .NightInterval = 10, .PumpSpeed = 100, .PumpTimeOut = 420, .PrimingTime = 10, .MaxPressure = 7.0, .MinPressure = 5.0};

struct ACMotorModuleSettings ///< AeroModule default settings
  {
    ACMotorModuleSettings(uint8_t Speed = 0) : Speed(Speed) {}
    2eca:	76 96       	adiw	r30, 0x16	; 22
    2ecc:	52 e3       	ldi	r21, 0x32	; 50
    2ece:	50 83       	st	Z, r21
AirPumpSettings():
b:\Gbox420\Gbox420\Gbox420_Mega_Main\build\sketch/Settings.h:77
  };
  struct ACMotorModuleSettings ACMotor1 = {.Speed = 50};

  struct AirPumpSettings ///< AirPump default settings
  {
    AirPumpSettings(uint8_t Pin = 0, bool State = false) : Pin(Pin), State(State) {}
    2ed0:	31 96       	adiw	r30, 0x01	; 1
    2ed2:	57 e1       	ldi	r21, 0x17	; 23
    2ed4:	50 83       	st	Z, r21
    2ed6:	21 83       	std	Z+1, r18	; 0x01
DHTSensorSettings():
b:\Gbox420\Gbox420\Gbox420_Mega_Main\build\sketch/Settings.h:85
  };
  struct AirPumpSettings Ap1 = {.Pin = 23, .State = true};

  struct DHTSensorSettings ///< DHTSensor default settings
  {
    DHTSensorSettings(uint8_t Pin = 0, uint8_t Type = 0) : Pin(Pin), Type(Type) {}
    2ed8:	32 96       	adiw	r30, 0x02	; 2
    2eda:	53 e0       	ldi	r21, 0x03	; 3
    2edc:	50 83       	st	Z, r21
    2ede:	56 e1       	ldi	r21, 0x16	; 22
    2ee0:	51 83       	std	Z+1, r21	; 0x01
FanSettings():
b:\Gbox420\Gbox420\Gbox420_Mega_Main\build\sketch/Settings.h:93
  };
  struct DHTSensorSettings DHT1 = {.Pin = 3, .Type = 22};

  struct FanSettings ///< Fan default settings
  {
    FanSettings(uint8_t OnOffPin = 0, uint8_t SpeedPin = 0) : OnOffPin(OnOffPin), SpeedPin(SpeedPin) {}
    2ee2:	32 96       	adiw	r30, 0x02	; 2
    2ee4:	59 e1       	ldi	r21, 0x19	; 25
    2ee6:	50 83       	st	Z, r21
    2ee8:	5a e1       	ldi	r21, 0x1A	; 26
    2eea:	51 83       	std	Z+1, r21	; 0x01
    2eec:	22 83       	std	Z+2, r18	; 0x02
    2eee:	13 82       	std	Z+3, r1	; 0x03
    2ef0:	34 96       	adiw	r30, 0x04	; 4
    2ef2:	5b e1       	ldi	r21, 0x1B	; 27
    2ef4:	50 83       	st	Z, r21
    2ef6:	5c e1       	ldi	r21, 0x1C	; 28
    2ef8:	51 83       	std	Z+1, r21	; 0x01
    2efa:	22 83       	std	Z+2, r18	; 0x02
    2efc:	13 82       	std	Z+3, r1	; 0x03
MainModuleSettings():
b:\Gbox420\Gbox420\Gbox420_Mega_Main\build\sketch/Settings.h:119
  struct Fan_PWMSettings FanE = {.ZeroCrossingPin = 2, .PWMPin = 10, .State = true, .MinSpeed = 35, .Speed = 80};
  */

  struct MainModuleSettings ///< MainModule default settings
  {
    MainModuleSettings(uint16_t SerialReportFrequency = 0, bool SerialReportDate = true, bool SerialReportMemory = true, bool SerialReportJSON = true, bool SerialReportJSONFriendly = true, bool SerialReportWireless = true, bool ReportToGoogleSheets = false, uint16_t SheetsReportingFrequency = 0, bool ReportToMQTT = false, uint16_t MQTTReportFrequency = 0) : SerialReportFrequency(SerialReportFrequency), SerialReportDate(SerialReportDate), SerialReportMemory(SerialReportMemory), SerialReportJSON(SerialReportJSON), SerialReportJSONFriendly(SerialReportJSONFriendly), SerialReportWireless(SerialReportWireless), ReportToGoogleSheets(ReportToGoogleSheets), SheetsReportingFrequency(SheetsReportingFrequency), ReportToMQTT(ReportToMQTT), MQTTReportFrequency(MQTTReportFrequency) {}
    2efe:	34 96       	adiw	r30, 0x04	; 4
    2f00:	6f e0       	ldi	r22, 0x0F	; 15
    2f02:	70 e0       	ldi	r23, 0x00	; 0
    2f04:	71 83       	std	Z+1, r23	; 0x01
    2f06:	60 83       	st	Z, r22
    2f08:	22 83       	std	Z+2, r18	; 0x02
    2f0a:	23 83       	std	Z+3, r18	; 0x03
    2f0c:	24 83       	std	Z+4, r18	; 0x04
    2f0e:	25 83       	std	Z+5, r18	; 0x05
    2f10:	26 83       	std	Z+6, r18	; 0x06
    2f12:	27 83       	std	Z+7, r18	; 0x07
    2f14:	6e e1       	ldi	r22, 0x1E	; 30
    2f16:	70 e0       	ldi	r23, 0x00	; 0
    2f18:	71 87       	std	Z+9, r23	; 0x09
    2f1a:	60 87       	std	Z+8, r22	; 0x08
    2f1c:	22 87       	std	Z+10, r18	; 0x0a
    2f1e:	65 e0       	ldi	r22, 0x05	; 5
    2f20:	70 e0       	ldi	r23, 0x00	; 0
    2f22:	74 87       	std	Z+12, r23	; 0x0c
    2f24:	63 87       	std	Z+11, r22	; 0x0b
HempyModuleSettings():
b:\Gbox420\Gbox420\Gbox420_Mega_Main\build\sketch/Settings.h:135
  };
  struct MainModuleSettings Main1 = {.SerialReportFrequency = 15, .SerialReportDate = true, .SerialReportMemory = true, .SerialReportJSON = true, .SerialReportJSONFriendly = true, .SerialReportWireless = true, .ReportToGoogleSheets = true, .SheetsReportingFrequency = 30, .ReportToMqtt = true, .MQTTReportFrequency = 5};

  struct HempyModuleSettings ///< Hempy default settings
  {
    HempyModuleSettings(float EvaporationTarget_B1 = 0.0, float OverflowTarget_B1 = 0.0, float WasteLimit_B1 = 0.0, uint8_t PumpSpeed_B1 = 0, uint16_t PumpTimeOut_B1 = 0, uint16_t DrainWaitTime_B1 = 0.0, float EvaporationTarget_B2 = 0.0, float OverflowTarget_B2 = 0.0, float WasteLimit_B2 = 0.0, uint8_t PumpSpeed_B2 = 0, uint16_t PumpTimeOut_B2 = 0, uint16_t DrainWaitTime_B2 = 0.0) : EvaporationTarget_B1(EvaporationTarget_B1), OverflowTarget_B1(OverflowTarget_B1), WasteLimit_B1(WasteLimit_B1), PumpSpeed_B1(PumpSpeed_B1), PumpTimeOut_B1(PumpTimeOut_B1), DrainWaitTime_B1(DrainWaitTime_B1), EvaporationTarget_B2(EvaporationTarget_B2), OverflowTarget_B2(OverflowTarget_B2), WasteLimit_B2(WasteLimit_B2), PumpSpeed_B2(PumpSpeed_B2), PumpTimeOut_B2(PumpTimeOut_B2), DrainWaitTime_B2(DrainWaitTime_B2) {}
    2f26:	3d 96       	adiw	r30, 0x0d	; 13
    2f28:	41 2c       	mov	r4, r1
    2f2a:	51 2c       	mov	r5, r1
    2f2c:	61 2c       	mov	r6, r1
    2f2e:	70 e4       	ldi	r23, 0x40	; 64
    2f30:	77 2e       	mov	r7, r23
    2f32:	40 82       	st	Z, r4
    2f34:	51 82       	std	Z+1, r5	; 0x01
    2f36:	62 82       	std	Z+2, r6	; 0x02
    2f38:	73 82       	std	Z+3, r7	; 0x03
    2f3a:	ad ec       	ldi	r26, 0xCD	; 205
    2f3c:	8a 2e       	mov	r8, r26
    2f3e:	ac ec       	ldi	r26, 0xCC	; 204
    2f40:	9a 2e       	mov	r9, r26
    2f42:	ac e4       	ldi	r26, 0x4C	; 76
    2f44:	aa 2e       	mov	r10, r26
    2f46:	ae e3       	ldi	r26, 0x3E	; 62
    2f48:	ba 2e       	mov	r11, r26
    2f4a:	84 82       	std	Z+4, r8	; 0x04
    2f4c:	95 82       	std	Z+5, r9	; 0x05
    2f4e:	a6 82       	std	Z+6, r10	; 0x06
    2f50:	b7 82       	std	Z+7, r11	; 0x07
    2f52:	c1 2c       	mov	r12, r1
    2f54:	d1 2c       	mov	r13, r1
    2f56:	b0 e5       	ldi	r27, 0x50	; 80
    2f58:	eb 2e       	mov	r14, r27
    2f5a:	b1 e4       	ldi	r27, 0x41	; 65
    2f5c:	fb 2e       	mov	r15, r27
    2f5e:	c0 86       	std	Z+8, r12	; 0x08
    2f60:	d1 86       	std	Z+9, r13	; 0x09
    2f62:	e2 86       	std	Z+10, r14	; 0x0a
    2f64:	f3 86       	std	Z+11, r15	; 0x0b
    2f66:	34 87       	std	Z+12, r19	; 0x0c
    2f68:	a8 e7       	ldi	r26, 0x78	; 120
    2f6a:	b0 e0       	ldi	r27, 0x00	; 0
    2f6c:	b6 87       	std	Z+14, r27	; 0x0e
    2f6e:	a5 87       	std	Z+13, r26	; 0x0d
    2f70:	6c e2       	ldi	r22, 0x2C	; 44
    2f72:	71 e0       	ldi	r23, 0x01	; 1
    2f74:	70 8b       	std	Z+16, r23	; 0x10
    2f76:	67 87       	std	Z+15, r22	; 0x0f
    2f78:	41 8a       	std	Z+17, r4	; 0x11
    2f7a:	52 8a       	std	Z+18, r5	; 0x12
    2f7c:	63 8a       	std	Z+19, r6	; 0x13
    2f7e:	74 8a       	std	Z+20, r7	; 0x14
    2f80:	85 8a       	std	Z+21, r8	; 0x15
    2f82:	96 8a       	std	Z+22, r9	; 0x16
    2f84:	a7 8a       	std	Z+23, r10	; 0x17
    2f86:	b0 8e       	std	Z+24, r11	; 0x18
    2f88:	c1 8e       	std	Z+25, r12	; 0x19
    2f8a:	d2 8e       	std	Z+26, r13	; 0x1a
    2f8c:	e3 8e       	std	Z+27, r14	; 0x1b
    2f8e:	f4 8e       	std	Z+28, r15	; 0x1c
    2f90:	35 8f       	std	Z+29, r19	; 0x1d
    2f92:	b7 8f       	std	Z+31, r27	; 0x1f
    2f94:	a6 8f       	std	Z+30, r26	; 0x1e
    2f96:	71 a3       	std	Z+33, r23	; 0x21
    2f98:	60 a3       	std	Z+32, r22	; 0x20
LightSensorSettings():
b:\Gbox420\Gbox420\Gbox420_Mega_Main\build\sketch/Settings.h:153
  };
  struct HempyModuleSettings HempyModule1 = {.EvaporationTarget_B1 = 2.0, .OverflowTarget_B1 = 0.2, .WasteLimit_B1 = 13.0, .PumpSpeed_B1 = 100, .PumpTimeOut_B1 = 120, .DrainWaitTime_B1 = 300, .EvaporationTarget_B2 = 2.0, .OverflowTarget_B2 = 0.2, .WasteLimit_B2 = 13.0, .PumpSpeed_B2 = 100, .PumpTimeOut_B2 = 120, .DrainWaitTime_B2 = 300};

  struct LightSensorSettings ///< LightSensor default settings
  {
    LightSensorSettings(uint8_t DigitalPin = 0, uint8_t AnalogPin = 0) : DigitalPin(DigitalPin), AnalogPin(AnalogPin) {}
    2f9a:	b2 96       	adiw	r30, 0x22	; 34
    2f9c:	54 e0       	ldi	r21, 0x04	; 4
    2f9e:	50 83       	st	Z, r21
    2fa0:	36 e3       	ldi	r19, 0x36	; 54
    2fa2:	31 83       	std	Z+1, r19	; 0x01
LightsSettings():
b:\Gbox420\Gbox420\Gbox420_Mega_Main\build\sketch/Settings.h:161
  };
  struct LightSensorSettings Ls1 = {.DigitalPin = 4, .AnalogPin = A0};

  struct LightsSettings ///< Lights default settings
  {
    LightsSettings(uint8_t RelayPin = 0, uint8_t DimmingPin = 0, uint8_t DimmingLimit = 0, uint8_t DimmingDuration = 0, uint8_t Brightness = 0, bool TimerEnabled = false, uint8_t OnHour = 0, uint8_t OnMinute = 0, uint8_t OffHour = 0, uint8_t OffMinute = 0, bool FadingEnabled = false, uint16_t FadingInterval = 0, uint8_t FadingIncrements = 0) : RelayPin(RelayPin), DimmingPin(DimmingPin), DimmingLimit(DimmingLimit), DimmingDuration(DimmingDuration), Brightness(Brightness), TimerEnabled(TimerEnabled), OnHour(OnHour), OnMinute(OnMinute), OffHour(OffHour), OffMinute(OffMinute), FadingEnabled(FadingEnabled), FadingInterval(FadingInterval), FadingIncrements(FadingIncrements) {}
    2fa4:	32 96       	adiw	r30, 0x02	; 2
    2fa6:	3d e1       	ldi	r19, 0x1D	; 29
    2fa8:	30 83       	st	Z, r19
    2faa:	6b e0       	ldi	r22, 0x0B	; 11
    2fac:	61 83       	std	Z+1, r22	; 0x01
    2fae:	42 83       	std	Z+2, r20	; 0x02
    2fb0:	7a e0       	ldi	r23, 0x0A	; 10
    2fb2:	73 83       	std	Z+3, r23	; 0x03
    2fb4:	14 82       	std	Z+4, r1	; 0x04
    2fb6:	3b e4       	ldi	r19, 0x4B	; 75
    2fb8:	35 83       	std	Z+5, r19	; 0x05
    2fba:	26 83       	std	Z+6, r18	; 0x06
    2fbc:	57 83       	std	Z+7, r21	; 0x07
    2fbe:	34 e1       	ldi	r19, 0x14	; 20
    2fc0:	30 87       	std	Z+8, r19	; 0x08
    2fc2:	41 87       	std	Z+9, r20	; 0x09
    2fc4:	32 87       	std	Z+10, r19	; 0x0a
    2fc6:	13 86       	std	Z+11, r1	; 0x0b
    2fc8:	a1 e0       	ldi	r26, 0x01	; 1
    2fca:	b0 e0       	ldi	r27, 0x00	; 0
    2fcc:	b5 87       	std	Z+13, r27	; 0x0d
    2fce:	a4 87       	std	Z+12, r26	; 0x0c
    2fd0:	26 87       	std	Z+14, r18	; 0x0e
    2fd2:	3f 96       	adiw	r30, 0x0f	; 15
    2fd4:	c8 e1       	ldi	r28, 0x18	; 24
    2fd6:	c0 83       	st	Z, r28
    2fd8:	cc e0       	ldi	r28, 0x0C	; 12
    2fda:	c1 83       	std	Z+1, r28	; 0x01
    2fdc:	c6 e0       	ldi	r28, 0x06	; 6
    2fde:	c2 83       	std	Z+2, r28	; 0x02
    2fe0:	73 83       	std	Z+3, r23	; 0x03
    2fe2:	14 82       	std	Z+4, r1	; 0x04
    2fe4:	77 e3       	ldi	r23, 0x37	; 55
    2fe6:	75 83       	std	Z+5, r23	; 0x05
    2fe8:	16 82       	std	Z+6, r1	; 0x06
    2fea:	57 83       	std	Z+7, r21	; 0x07
    2fec:	30 87       	std	Z+8, r19	; 0x08
    2fee:	41 87       	std	Z+9, r20	; 0x09
    2ff0:	32 87       	std	Z+10, r19	; 0x0a
    2ff2:	13 86       	std	Z+11, r1	; 0x0b
    2ff4:	b5 87       	std	Z+13, r27	; 0x0d
    2ff6:	a4 87       	std	Z+12, r26	; 0x0c
    2ff8:	26 87       	std	Z+14, r18	; 0x0e
SoundSettings():
b:\Gbox420\Gbox420\Gbox420_Mega_Main\build\sketch/Settings.h:188
  };
  struct ReservoirModuleSettings ReservoirMod1 = {};

  struct SoundSettings ///< Sound default settings
  {
    SoundSettings(uint8_t Pin = 0) : Pin(Pin) {}
    2ffa:	70 96       	adiw	r30, 0x10	; 16
    2ffc:	32 e0       	ldi	r19, 0x02	; 2
    2ffe:	30 83       	st	Z, r19
    3000:	21 83       	std	Z+1, r18	; 0x01
_ZN8SettingsC2Ev():
b:\Gbox420\Gbox420\Gbox420_Mega_Main\build\sketch/Settings.h:195
    bool Enabled = true; ///< Enable/Disable sound
  };
  struct SoundSettings Sound1 = {.Pin = 2};

  uint8_t CompatibilityVersion = Version; ///< Should always be the last value stored.
} Settings;
    3002:	89 5c       	subi	r24, 0xC9	; 201
    3004:	9d 4f       	sbci	r25, 0xFD	; 253
    3006:	dc 01       	movw	r26, r24
    3008:	6c 93       	st	X, r22
    300a:	cf 91       	pop	r28
    300c:	ff 90       	pop	r15
    300e:	ef 90       	pop	r14
    3010:	df 90       	pop	r13
    3012:	cf 90       	pop	r12
    3014:	bf 90       	pop	r11
    3016:	af 90       	pop	r10
    3018:	9f 90       	pop	r9
    301a:	8f 90       	pop	r8
    301c:	7f 90       	pop	r7
    301e:	6f 90       	pop	r6
    3020:	5f 90       	pop	r5
    3022:	4f 90       	pop	r4
    3024:	08 95       	ret

00003026 <loadSettings(bool)>:
_Z12loadSettingsb():
b:\Gbox420\Gbox420\Gbox420_Mega_Main\build\sketch/Settings.cpp:21
  \brief Load settings from EEPROM
  \param ResetEEPROM - Force loading the defaults from the sketch and overwriting the EEPROM with it
  \return Reference to Settings object
*/
Settings *loadSettings(bool ResetEEPROM) ///< if the function contains arguments with default values, they must be declared strictly before they are called, otherwise there is a compilation error: '<function name> was not declared in this scope. https://forum.arduino.cc/index.php?topic=606678.0
{
    3026:	af 92       	push	r10
    3028:	bf 92       	push	r11
    302a:	cf 92       	push	r12
    302c:	df 92       	push	r13
    302e:	ef 92       	push	r14
    3030:	ff 92       	push	r15
    3032:	0f 93       	push	r16
    3034:	1f 93       	push	r17
    3036:	cf 93       	push	r28
    3038:	df 93       	push	r29
    303a:	cd b7       	in	r28, 0x3d	; 61
    303c:	de b7       	in	r29, 0x3e	; 62
    303e:	c8 53       	subi	r28, 0x38	; 56
    3040:	d2 40       	sbci	r29, 0x02	; 2
    3042:	0f b6       	in	r0, 0x3f	; 63
    3044:	f8 94       	cli
    3046:	de bf       	out	0x3e, r29	; 62
    3048:	0f be       	out	0x3f, r0	; 63
    304a:	cd bf       	out	0x3d, r28	; 61
    304c:	f8 2e       	mov	r15, r24
b:\Gbox420\Gbox420\Gbox420_Mega_Main\build\sketch/Settings.cpp:22
  Settings *DefaultSettings = new Settings();                              // This is where settings are stored, first it takes the sketch default settings defined in Settings.h
    304e:	88 e3       	ldi	r24, 0x38	; 56
    3050:	92 e0       	ldi	r25, 0x02	; 2
    3052:	0e 94 6d 8f 	call	0x11eda	; 0x11eda <operator new(unsigned int)>
    3056:	8c 01       	movw	r16, r24
    3058:	88 e3       	ldi	r24, 0x38	; 56
    305a:	92 e0       	ldi	r25, 0x02	; 2
    305c:	f8 01       	movw	r30, r16
    305e:	9c 01       	movw	r18, r24
    3060:	11 92       	st	Z+, r1
    3062:	21 50       	subi	r18, 0x01	; 1
    3064:	30 40       	sbci	r19, 0x00	; 0
    3066:	e1 f7       	brne	.-8      	; 0x3060 <loadSettings(bool)+0x3a>
    3068:	c8 01       	movw	r24, r16
    306a:	0e 94 cc 16 	call	0x2d98	; 0x2d98 <Settings::Settings()>
b:\Gbox420\Gbox420\Gbox420_Mega_Main\build\sketch/Settings.cpp:23
  Settings EEPROMSettings;                                                 // temporary storage with "Settings" type
    306e:	ce 01       	movw	r24, r28
    3070:	01 96       	adiw	r24, 0x01	; 1
    3072:	0e 94 cc 16 	call	0x2d98	; 0x2d98 <Settings::Settings()>
b:\Gbox420\Gbox420\Gbox420_Mega_Main\build\sketch/Settings.cpp:24
  eeprom_read_block((void *)&EEPROMSettings, (void *)0, sizeof(Settings)); // Load EEPROM stored settings into EEPROMSettings
    3076:	48 e3       	ldi	r20, 0x38	; 56
    3078:	52 e0       	ldi	r21, 0x02	; 2
    307a:	70 e0       	ldi	r23, 0x00	; 0
    307c:	60 e0       	ldi	r22, 0x00	; 0
    307e:	ce 01       	movw	r24, r28
    3080:	01 96       	adiw	r24, 0x01	; 1
    3082:	0e 94 11 9d 	call	0x13a22	; 0x13a22 <eeprom_read_block>
b:\Gbox420\Gbox420\Gbox420_Mega_Main\build\sketch/Settings.cpp:25
  if (DefaultSettings->CompatibilityVersion != EEPROMSettings.CompatibilityVersion || ResetEEPROM)
    3086:	58 01       	movw	r10, r16
    3088:	39 ec       	ldi	r19, 0xC9	; 201
    308a:	a3 1a       	sub	r10, r19
    308c:	3d ef       	ldi	r19, 0xFD	; 253
    308e:	b3 0a       	sbc	r11, r19
    3090:	f5 01       	movw	r30, r10
    3092:	90 81       	ld	r25, Z
    3094:	c8 5c       	subi	r28, 0xC8	; 200
    3096:	dd 4f       	sbci	r29, 0xFD	; 253
    3098:	88 81       	ld	r24, Y
    309a:	c8 53       	subi	r28, 0x38	; 56
    309c:	d2 40       	sbci	r29, 0x02	; 2
b:\Gbox420\Gbox420\Gbox420_Mega_Main\build\sketch/Settings.cpp:27
  { // Making sure the EEPROM loaded settings are compatible with the sketch
    logToSerials(F("Updating EEPROM"), false, 1);
    309e:	41 e0       	ldi	r20, 0x01	; 1
    30a0:	60 e0       	ldi	r22, 0x00	; 0
b:\Gbox420\Gbox420\Gbox420_Mega_Main\build\sketch/Settings.cpp:25
Settings *loadSettings(bool ResetEEPROM) ///< if the function contains arguments with default values, they must be declared strictly before they are called, otherwise there is a compilation error: '<function name> was not declared in this scope. https://forum.arduino.cc/index.php?topic=606678.0
{
  Settings *DefaultSettings = new Settings();                              // This is where settings are stored, first it takes the sketch default settings defined in Settings.h
  Settings EEPROMSettings;                                                 // temporary storage with "Settings" type
  eeprom_read_block((void *)&EEPROMSettings, (void *)0, sizeof(Settings)); // Load EEPROM stored settings into EEPROMSettings
  if (DefaultSettings->CompatibilityVersion != EEPROMSettings.CompatibilityVersion || ResetEEPROM)
    30a2:	98 13       	cpse	r25, r24
    30a4:	03 c0       	rjmp	.+6      	; 0x30ac <loadSettings(bool)+0x86>
b:\Gbox420\Gbox420\Gbox420_Mega_Main\build\sketch/Settings.cpp:25 (discriminator 1)
    30a6:	ff 20       	and	r15, r15
    30a8:	09 f4       	brne	.+2      	; 0x30ac <loadSettings(bool)+0x86>
    30aa:	40 c0       	rjmp	.+128    	; 0x312c <loadSettings(bool)+0x106>
b:\Gbox420\Gbox420\Gbox420_Mega_Main\build\sketch/Settings.cpp:27
  { // Making sure the EEPROM loaded settings are compatible with the sketch
    logToSerials(F("Updating EEPROM"), false, 1);
    30ac:	81 eb       	ldi	r24, 0xB1	; 177
    30ae:	97 e0       	ldi	r25, 0x07	; 7
    30b0:	0e 94 85 16 	call	0x2d0a	; 0x2d0a <logToSerials(__FlashStringHelper const*, bool, unsigned char)>
b:\Gbox420\Gbox420\Gbox420_Mega_Main\build\sketch/Settings.cpp:28
    saveSettings(DefaultSettings); // overwrites EEPROM stored settings with defaults from this sketch
    30b4:	c8 01       	movw	r24, r16
    30b6:	0e 94 c6 16 	call	0x2d8c	; 0x2d8c <saveSettings(Settings*)>
b:\Gbox420\Gbox420\Gbox420_Mega_Main\build\sketch/Settings.cpp:36
  {
    logToSerials(F("Applying EEPROM settings"), false, 1);
    // DefaultSettings = EEPROMSettings; // overwrite sketch defaults with loaded settings
    memcpy(DefaultSettings, &EEPROMSettings, sizeof(Settings));
  }
  logToSerials(F("Version"), false, 3);
    30ba:	43 e0       	ldi	r20, 0x03	; 3
    30bc:	60 e0       	ldi	r22, 0x00	; 0
    30be:	80 e9       	ldi	r24, 0x90	; 144
    30c0:	97 e0       	ldi	r25, 0x07	; 7
    30c2:	0e 94 85 16 	call	0x2d0a	; 0x2d0a <logToSerials(__FlashStringHelper const*, bool, unsigned char)>
_Z12logToSerialsIhEvRT_bh():
b:\Gbox420\Gbox420\Gbox420_Mega_Main\build\sketch/SerialLog.h:41
template <class logLine>
void logToSerials(logLine &ToPrint, bool BreakLine = true, uint8_t Indent = 3)
{
  while (Indent > 0)
  {
    ArduinoSerial.print(F(" "));
    30c6:	c0 90 2f 04 	lds	r12, 0x042F	; 0x80042f <ArduinoSerial>
    30ca:	d0 90 30 04 	lds	r13, 0x0430	; 0x800430 <ArduinoSerial+0x1>
    30ce:	62 e5       	ldi	r22, 0x52	; 82
    30d0:	77 e0       	ldi	r23, 0x07	; 7
    30d2:	c6 01       	movw	r24, r12
    30d4:	0e 94 6c 8b 	call	0x116d8	; 0x116d8 <Print::print(__FlashStringHelper const*)>
b:\Gbox420\Gbox420\Gbox420_Mega_Main\build\sketch/SerialLog.h:42
    ESPSerial.print(F(" "));
    30d8:	e0 90 2d 04 	lds	r14, 0x042D	; 0x80042d <ESPSerial>
    30dc:	f0 90 2e 04 	lds	r15, 0x042E	; 0x80042e <ESPSerial+0x1>
    30e0:	60 e5       	ldi	r22, 0x50	; 80
    30e2:	77 e0       	ldi	r23, 0x07	; 7
    30e4:	c7 01       	movw	r24, r14
    30e6:	0e 94 6c 8b 	call	0x116d8	; 0x116d8 <Print::print(__FlashStringHelper const*)>
b:\Gbox420\Gbox420\Gbox420_Mega_Main\build\sketch/SerialLog.h:47
    Indent--;
  }
  if (BreakLine)
  {
    ArduinoSerial.println(ToPrint);
    30ea:	4a e0       	ldi	r20, 0x0A	; 10
    30ec:	50 e0       	ldi	r21, 0x00	; 0
    30ee:	f5 01       	movw	r30, r10
    30f0:	60 81       	ld	r22, Z
    30f2:	c6 01       	movw	r24, r12
    30f4:	0e 94 ad 8c 	call	0x1195a	; 0x1195a <Print::println(unsigned char, int)>
b:\Gbox420\Gbox420\Gbox420_Mega_Main\build\sketch/SerialLog.h:48
    ESPSerial.println(ToPrint);
    30f8:	4a e0       	ldi	r20, 0x0A	; 10
    30fa:	50 e0       	ldi	r21, 0x00	; 0
    30fc:	f5 01       	movw	r30, r10
    30fe:	60 81       	ld	r22, Z
    3100:	c7 01       	movw	r24, r14
    3102:	0e 94 ad 8c 	call	0x1195a	; 0x1195a <Print::println(unsigned char, int)>
_Z12loadSettingsb():
b:\Gbox420\Gbox420\Gbox420_Mega_Main\build\sketch/Settings.cpp:39
  logToSerials(DefaultSettings->CompatibilityVersion, true, 1);
  return DefaultSettings;
}
    3106:	c8 01       	movw	r24, r16
    3108:	c8 5c       	subi	r28, 0xC8	; 200
    310a:	dd 4f       	sbci	r29, 0xFD	; 253
    310c:	0f b6       	in	r0, 0x3f	; 63
    310e:	f8 94       	cli
    3110:	de bf       	out	0x3e, r29	; 62
    3112:	0f be       	out	0x3f, r0	; 63
    3114:	cd bf       	out	0x3d, r28	; 61
    3116:	df 91       	pop	r29
    3118:	cf 91       	pop	r28
    311a:	1f 91       	pop	r17
    311c:	0f 91       	pop	r16
    311e:	ff 90       	pop	r15
    3120:	ef 90       	pop	r14
    3122:	df 90       	pop	r13
    3124:	cf 90       	pop	r12
    3126:	bf 90       	pop	r11
    3128:	af 90       	pop	r10
    312a:	08 95       	ret
b:\Gbox420\Gbox420\Gbox420_Mega_Main\build\sketch/Settings.cpp:32
    logToSerials(F("Updating EEPROM"), false, 1);
    saveSettings(DefaultSettings); // overwrites EEPROM stored settings with defaults from this sketch
  }
  else
  {
    logToSerials(F("Applying EEPROM settings"), false, 1);
    312c:	88 e9       	ldi	r24, 0x98	; 152
    312e:	97 e0       	ldi	r25, 0x07	; 7
    3130:	0e 94 85 16 	call	0x2d0a	; 0x2d0a <logToSerials(__FlashStringHelper const*, bool, unsigned char)>
b:\Gbox420\Gbox420\Gbox420_Mega_Main\build\sketch/Settings.cpp:34
    // DefaultSettings = EEPROMSettings; // overwrite sketch defaults with loaded settings
    memcpy(DefaultSettings, &EEPROMSettings, sizeof(Settings));
    3134:	88 e3       	ldi	r24, 0x38	; 56
    3136:	92 e0       	ldi	r25, 0x02	; 2
    3138:	fe 01       	movw	r30, r28
    313a:	31 96       	adiw	r30, 0x01	; 1
    313c:	d8 01       	movw	r26, r16
    313e:	01 90       	ld	r0, Z+
    3140:	0d 92       	st	X+, r0
    3142:	01 97       	sbiw	r24, 0x01	; 1
    3144:	e1 f7       	brne	.-8      	; 0x313e <loadSettings(bool)+0x118>
    3146:	b9 cf       	rjmp	.-142    	; 0x30ba <loadSettings(bool)+0x94>

00003148 <restoreDefaults()>:
_Z15restoreDefaultsv():
b:\Gbox420\Gbox420\Gbox420_Mega_Main\build\sketch/Settings.cpp:47
  \brief Load sketch default settings into EEPROM 
  \attention Restarts the Arduino sketch!
*/
void restoreDefaults()
{
  logToSerials(F("Forcing settings update at next restart"), true, 0);
    3148:	40 e0       	ldi	r20, 0x00	; 0
    314a:	61 e0       	ldi	r22, 0x01	; 1
    314c:	88 e6       	ldi	r24, 0x68	; 104
    314e:	97 e0       	ldi	r25, 0x07	; 7
    3150:	0e 94 85 16 	call	0x2d0a	; 0x2d0a <logToSerials(__FlashStringHelper const*, bool, unsigned char)>
b:\Gbox420\Gbox420\Gbox420_Mega_Main\build\sketch/Settings.cpp:48
  loadSettings(true);
    3154:	81 e0       	ldi	r24, 0x01	; 1
    3156:	0e 94 13 18 	call	0x3026	; 0x3026 <loadSettings(bool)>
b:\Gbox420\Gbox420\Gbox420_Mega_Main\build\sketch/Settings.cpp:49
  logToSerials(F("Reseting the sketch"), true, 1);
    315a:	41 e0       	ldi	r20, 0x01	; 1
    315c:	61 e0       	ldi	r22, 0x01	; 1
    315e:	84 e5       	ldi	r24, 0x54	; 84
    3160:	97 e0       	ldi	r25, 0x07	; 7
    3162:	0e 94 85 16 	call	0x2d0a	; 0x2d0a <logToSerials(__FlashStringHelper const*, bool, unsigned char)>
b:\Gbox420\Gbox420\Gbox420_Mega_Main\build\sketch/Settings.cpp:50
  __asm__ __volatile__("jmp 0x0000");
    3166:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>
b:\Gbox420\Gbox420\Gbox420_Mega_Main\build\sketch/Settings.cpp:51
}
    316a:	08 95       	ret

0000316c <Common::commandEvent(char*, char*)>:
_ZN6Common12commandEventEPcS0_():
b:\Gbox420\Gbox420\Gbox420_Mega_Main\build\sketch\src\Components/420Common.cpp:115
  if (ClearBuffer)
  {
    memset(&ShortMessage[0], 0, MaxShotTextLength); //blank out the ShortMessage global buffer
  }
  strcpy_P(ShortMessage, (PGM_P)Name);
  strcat_P(ShortMessage, (PGM_P)F(" "));
    316c:	80 e0       	ldi	r24, 0x00	; 0
    316e:	08 95       	ret

00003170 <Common::refresh_Sec()>:
_ZN6Common11refresh_SecEv():
    3170:	e0 91 b7 0c 	lds	r30, 0x0CB7	; 0x800cb7 <Debug>
    3174:	f0 91 b8 0c 	lds	r31, 0x0CB8	; 0x800cb8 <Debug+0x1>
    3178:	20 81       	ld	r18, Z
    317a:	22 23       	and	r18, r18
    317c:	69 f0       	breq	.+26     	; 0x3198 <Common::refresh_Sec()+0x28>
    317e:	fc 01       	movw	r30, r24
    3180:	42 e0       	ldi	r20, 0x02	; 2
    3182:	60 e0       	ldi	r22, 0x00	; 0
    3184:	82 81       	ldd	r24, Z+2	; 0x02
    3186:	93 81       	ldd	r25, Z+3	; 0x03
    3188:	0e 94 85 16 	call	0x2d0a	; 0x2d0a <logToSerials(__FlashStringHelper const*, bool, unsigned char)>
    318c:	41 e0       	ldi	r20, 0x01	; 1
    318e:	61 e0       	ldi	r22, 0x01	; 1
    3190:	85 ee       	ldi	r24, 0xE5	; 229
    3192:	97 e0       	ldi	r25, 0x07	; 7
    3194:	0c 94 85 16 	jmp	0x2d0a	; 0x2d0a <logToSerials(__FlashStringHelper const*, bool, unsigned char)>
    3198:	08 95       	ret

0000319a <Common::refresh_FiveSec()>:
_ZN6Common15refresh_FiveSecEv():
    319a:	e0 91 b7 0c 	lds	r30, 0x0CB7	; 0x800cb7 <Debug>
    319e:	f0 91 b8 0c 	lds	r31, 0x0CB8	; 0x800cb8 <Debug+0x1>
    31a2:	20 81       	ld	r18, Z
    31a4:	22 23       	and	r18, r18
    31a6:	69 f0       	breq	.+26     	; 0x31c2 <Common::refresh_FiveSec()+0x28>
    31a8:	fc 01       	movw	r30, r24
    31aa:	42 e0       	ldi	r20, 0x02	; 2
    31ac:	60 e0       	ldi	r22, 0x00	; 0
    31ae:	82 81       	ldd	r24, Z+2	; 0x02
    31b0:	93 81       	ldd	r25, Z+3	; 0x03
    31b2:	0e 94 85 16 	call	0x2d0a	; 0x2d0a <logToSerials(__FlashStringHelper const*, bool, unsigned char)>
    31b6:	41 e0       	ldi	r20, 0x01	; 1
    31b8:	61 e0       	ldi	r22, 0x01	; 1
    31ba:	8e ed       	ldi	r24, 0xDE	; 222
    31bc:	97 e0       	ldi	r25, 0x07	; 7
    31be:	0c 94 85 16 	jmp	0x2d0a	; 0x2d0a <logToSerials(__FlashStringHelper const*, bool, unsigned char)>
    31c2:	08 95       	ret

000031c4 <Common::refresh_Minute()>:
_ZN6Common14refresh_MinuteEv():
    31c4:	e0 91 b7 0c 	lds	r30, 0x0CB7	; 0x800cb7 <Debug>
    31c8:	f0 91 b8 0c 	lds	r31, 0x0CB8	; 0x800cb8 <Debug+0x1>
    31cc:	20 81       	ld	r18, Z
    31ce:	22 23       	and	r18, r18
    31d0:	69 f0       	breq	.+26     	; 0x31ec <Common::refresh_Minute()+0x28>
    31d2:	fc 01       	movw	r30, r24
    31d4:	42 e0       	ldi	r20, 0x02	; 2
    31d6:	60 e0       	ldi	r22, 0x00	; 0
    31d8:	82 81       	ldd	r24, Z+2	; 0x02
    31da:	93 81       	ldd	r25, Z+3	; 0x03
    31dc:	0e 94 85 16 	call	0x2d0a	; 0x2d0a <logToSerials(__FlashStringHelper const*, bool, unsigned char)>
    31e0:	41 e0       	ldi	r20, 0x01	; 1
    31e2:	61 e0       	ldi	r22, 0x01	; 1
    31e4:	87 ed       	ldi	r24, 0xD7	; 215
    31e6:	97 e0       	ldi	r25, 0x07	; 7
    31e8:	0c 94 85 16 	jmp	0x2d0a	; 0x2d0a <logToSerials(__FlashStringHelper const*, bool, unsigned char)>
    31ec:	08 95       	ret

000031ee <Common::Common(__FlashStringHelper const*)>:
_ZN6CommonC2EPK19__FlashStringHelper():
    31ee:	cf 93       	push	r28
    31f0:	df 93       	push	r29
    31f2:	ec 01       	movw	r28, r24
    31f4:	85 e3       	ldi	r24, 0x35	; 53
    31f6:	94 e0       	ldi	r25, 0x04	; 4
    31f8:	99 83       	std	Y+1, r25	; 0x01
    31fa:	88 83       	st	Y, r24
    31fc:	7b 83       	std	Y+3, r23	; 0x03
    31fe:	6a 83       	std	Y+2, r22	; 0x02
    3200:	42 e0       	ldi	r20, 0x02	; 2
    3202:	60 e0       	ldi	r22, 0x00	; 0
    3204:	82 ef       	ldi	r24, 0xF2	; 242
    3206:	97 e0       	ldi	r25, 0x07	; 7
    3208:	0e 94 85 16 	call	0x2d0a	; 0x2d0a <logToSerials(__FlashStringHelper const*, bool, unsigned char)>
    320c:	41 e0       	ldi	r20, 0x01	; 1
    320e:	60 e0       	ldi	r22, 0x00	; 0
    3210:	8a 81       	ldd	r24, Y+2	; 0x02
    3212:	9b 81       	ldd	r25, Y+3	; 0x03
    3214:	df 91       	pop	r29
    3216:	cf 91       	pop	r28
    3218:	0c 94 85 16 	jmp	0x2d0a	; 0x2d0a <logToSerials(__FlashStringHelper const*, bool, unsigned char)>

0000321c <Common::report(bool)>:
_ZN6Common6reportEb():
    321c:	cf 93       	push	r28
    321e:	df 93       	push	r29
    3220:	ec 01       	movw	r28, r24
    3222:	60 ef       	ldi	r22, 0xF0	; 240
    3224:	77 e0       	ldi	r23, 0x07	; 7
    3226:	81 e3       	ldi	r24, 0x31	; 49
    3228:	9e e0       	ldi	r25, 0x0E	; 14
    322a:	0e 94 da 94 	call	0x129b4	; 0x129b4 <strcat_P>
    322e:	6a 81       	ldd	r22, Y+2	; 0x02
    3230:	7b 81       	ldd	r23, Y+3	; 0x03
    3232:	81 e3       	ldi	r24, 0x31	; 49
    3234:	9e e0       	ldi	r25, 0x0E	; 14
    3236:	0e 94 da 94 	call	0x129b4	; 0x129b4 <strcat_P>
    323a:	6c ee       	ldi	r22, 0xEC	; 236
    323c:	77 e0       	ldi	r23, 0x07	; 7
    323e:	81 e3       	ldi	r24, 0x31	; 49
    3240:	9e e0       	ldi	r25, 0x0E	; 14
    3242:	df 91       	pop	r29
    3244:	cf 91       	pop	r28
    3246:	0c 94 da 94 	jmp	0x129b4	; 0x129b4 <strcat_P>

0000324a <Common::isThisMine(char const*)>:
_ZN6Common10isThisMineEPKc():
    324a:	ef 92       	push	r14
    324c:	ff 92       	push	r15
    324e:	0f 93       	push	r16
    3250:	1f 93       	push	r17
    3252:	cf 93       	push	r28
    3254:	df 93       	push	r29
    3256:	dc 01       	movw	r26, r24
    3258:	12 96       	adiw	r26, 0x02	; 2
    325a:	ed 91       	ld	r30, X+
    325c:	fc 91       	ld	r31, X
    325e:	90 e0       	ldi	r25, 0x00	; 0
    3260:	34 91       	lpm	r19, Z
    3262:	81 e0       	ldi	r24, 0x01	; 1
    3264:	89 0f       	add	r24, r25
    3266:	db 01       	movw	r26, r22
    3268:	a9 0f       	add	r26, r25
    326a:	b1 1d       	adc	r27, r1
    326c:	2c 91       	ld	r18, X
    326e:	33 23       	and	r19, r19
    3270:	61 f0       	breq	.+24     	; 0x328a <Common::isThisMine(char const*)+0x40>
    3272:	31 96       	adiw	r30, 0x01	; 1
    3274:	98 2f       	mov	r25, r24
    3276:	32 17       	cp	r19, r18
    3278:	99 f3       	breq	.-26     	; 0x3260 <Common::isThisMine(char const*)+0x16>
    327a:	80 e0       	ldi	r24, 0x00	; 0
    327c:	df 91       	pop	r29
    327e:	cf 91       	pop	r28
    3280:	1f 91       	pop	r17
    3282:	0f 91       	pop	r16
    3284:	ff 90       	pop	r15
    3286:	ef 90       	pop	r14
    3288:	08 95       	ret
    328a:	2f 35       	cpi	r18, 0x5F	; 95
    328c:	b1 f7       	brne	.-20     	; 0x327a <Common::isThisMine(char const*)+0x30>
    328e:	a1 eb       	ldi	r26, 0xB1	; 177
    3290:	bd e0       	ldi	r27, 0x0D	; 13
    3292:	9d 5d       	subi	r25, 0xDD	; 221
    3294:	ed 01       	movw	r28, r26
    3296:	21 e0       	ldi	r18, 0x01	; 1
    3298:	28 0f       	add	r18, r24
    329a:	fb 01       	movw	r30, r22
    329c:	e8 0f       	add	r30, r24
    329e:	f1 1d       	adc	r31, r1
    32a0:	80 81       	ld	r24, Z
    32a2:	8d 93       	st	X+, r24
    32a4:	88 23       	and	r24, r24
    32a6:	41 f1       	breq	.+80     	; 0x32f8 <Common::isThisMine(char const*)+0xae>
    32a8:	82 2f       	mov	r24, r18
    32aa:	92 13       	cpse	r25, r18
    32ac:	f3 cf       	rjmp	.-26     	; 0x3294 <Common::isThisMine(char const*)+0x4a>
    32ae:	7b 01       	movw	r14, r22
    32b0:	19 82       	std	Y+1, r1	; 0x01
    32b2:	43 e0       	ldi	r20, 0x03	; 3
    32b4:	60 e0       	ldi	r22, 0x00	; 0
    32b6:	8d ec       	ldi	r24, 0xCD	; 205
    32b8:	97 e0       	ldi	r25, 0x07	; 7
    32ba:	0e 94 85 16 	call	0x2d0a	; 0x2d0a <logToSerials(__FlashStringHelper const*, bool, unsigned char)>
_Z12logToSerialsIKcEvPT_bh():
    32be:	00 91 2f 04 	lds	r16, 0x042F	; 0x80042f <ArduinoSerial>
    32c2:	10 91 30 04 	lds	r17, 0x0430	; 0x800430 <ArduinoSerial+0x1>
    32c6:	63 ec       	ldi	r22, 0xC3	; 195
    32c8:	77 e0       	ldi	r23, 0x07	; 7
    32ca:	c8 01       	movw	r24, r16
    32cc:	0e 94 6c 8b 	call	0x116d8	; 0x116d8 <Print::print(__FlashStringHelper const*)>
    32d0:	c0 91 2d 04 	lds	r28, 0x042D	; 0x80042d <ESPSerial>
    32d4:	d0 91 2e 04 	lds	r29, 0x042E	; 0x80042e <ESPSerial+0x1>
    32d8:	61 ec       	ldi	r22, 0xC1	; 193
    32da:	77 e0       	ldi	r23, 0x07	; 7
    32dc:	ce 01       	movw	r24, r28
    32de:	0e 94 6c 8b 	call	0x116d8	; 0x116d8 <Print::print(__FlashStringHelper const*)>
    32e2:	f7 01       	movw	r30, r14
    32e4:	60 81       	ld	r22, Z
    32e6:	c8 01       	movw	r24, r16
    32e8:	0e 94 da 8b 	call	0x117b4	; 0x117b4 <Print::println(char)>
    32ec:	d7 01       	movw	r26, r14
    32ee:	6c 91       	ld	r22, X
    32f0:	ce 01       	movw	r24, r28
    32f2:	0e 94 da 8b 	call	0x117b4	; 0x117b4 <Print::println(char)>
    32f6:	c1 cf       	rjmp	.-126    	; 0x327a <Common::isThisMine(char const*)+0x30>
_ZN6Common10isThisMineEPKc():
    32f8:	81 e0       	ldi	r24, 0x01	; 1
    32fa:	c0 cf       	rjmp	.-128    	; 0x327c <Common::isThisMine(char const*)+0x32>

000032fc <Common::getName(__FlashStringHelper const*, bool)>:
_ZN6Common7getNameEPK19__FlashStringHelperb():
b:\Gbox420\Gbox420\Gbox420_Mega_Main\build\sketch\src\Components/420Common.cpp:125
  \param AppendToEnd Appended after the Name
  \param UnderscoreSeparator true - Sparate the name and the AppendToEnd with an underscore, false (default): Use space
*/

char *Common::getName(const __FlashStringHelper *AppendToEnd, bool UnderscoreSeparator)
{
    32fc:	1f 93       	push	r17
    32fe:	cf 93       	push	r28
    3300:	df 93       	push	r29
    3302:	eb 01       	movw	r28, r22
    3304:	14 2f       	mov	r17, r20
b:\Gbox420\Gbox420\Gbox420_Mega_Main\build\sketch\src\Components/420Common.cpp:127
  static char ReturnChar[MaxWordLength] = "";
  strcpy_P(ReturnChar, (PGM_P)Name);
    3306:	fc 01       	movw	r30, r24
    3308:	62 81       	ldd	r22, Z+2	; 0x02
    330a:	73 81       	ldd	r23, Z+3	; 0x03
    330c:	81 e5       	ldi	r24, 0x51	; 81
    330e:	92 e1       	ldi	r25, 0x12	; 18
    3310:	0e 94 ee 94 	call	0x129dc	; 0x129dc <strcpy_P>
b:\Gbox420\Gbox420\Gbox420_Mega_Main\build\sketch\src\Components/420Common.cpp:129
  if (UnderscoreSeparator)
    strcat_P(ReturnChar, (PGM_P)F("_"));
    3314:	6b ec       	ldi	r22, 0xCB	; 203
    3316:	77 e0       	ldi	r23, 0x07	; 7
b:\Gbox420\Gbox420\Gbox420_Mega_Main\build\sketch\src\Components/420Common.cpp:128

char *Common::getName(const __FlashStringHelper *AppendToEnd, bool UnderscoreSeparator)
{
  static char ReturnChar[MaxWordLength] = "";
  strcpy_P(ReturnChar, (PGM_P)Name);
  if (UnderscoreSeparator)
    3318:	11 11       	cpse	r17, r1
    331a:	02 c0       	rjmp	.+4      	; 0x3320 <Common::getName(__FlashStringHelper const*, bool)+0x24>
b:\Gbox420\Gbox420\Gbox420_Mega_Main\build\sketch\src\Components/420Common.cpp:131
    strcat_P(ReturnChar, (PGM_P)F("_"));
  else
    strcat_P(ReturnChar, (PGM_P)F(" "));
    331c:	69 ec       	ldi	r22, 0xC9	; 201
    331e:	77 e0       	ldi	r23, 0x07	; 7
    3320:	81 e5       	ldi	r24, 0x51	; 81
    3322:	92 e1       	ldi	r25, 0x12	; 18
    3324:	0e 94 da 94 	call	0x129b4	; 0x129b4 <strcat_P>
b:\Gbox420\Gbox420\Gbox420_Mega_Main\build\sketch\src\Components/420Common.cpp:132
  strcat_P(ReturnChar, (PGM_P)AppendToEnd);
    3328:	be 01       	movw	r22, r28
    332a:	81 e5       	ldi	r24, 0x51	; 81
    332c:	92 e1       	ldi	r25, 0x12	; 18
    332e:	0e 94 da 94 	call	0x129b4	; 0x129b4 <strcat_P>
b:\Gbox420\Gbox420\Gbox420_Mega_Main\build\sketch\src\Components/420Common.cpp:134
  return ReturnChar;
}
    3332:	81 e5       	ldi	r24, 0x51	; 81
    3334:	92 e1       	ldi	r25, 0x12	; 18
    3336:	df 91       	pop	r29
    3338:	cf 91       	pop	r28
    333a:	1f 91       	pop	r17
    333c:	08 95       	ret

0000333e <Common::getName(char*, bool)>:
_ZN6Common7getNameEPcb():
b:\Gbox420\Gbox420\Gbox420_Mega_Main\build\sketch\src\Components/420Common.cpp:137

char *Common::getName(char *AppendToEnd, bool UnderscoreSeparator)
{
    333e:	1f 93       	push	r17
    3340:	cf 93       	push	r28
    3342:	df 93       	push	r29
    3344:	eb 01       	movw	r28, r22
    3346:	14 2f       	mov	r17, r20
b:\Gbox420\Gbox420\Gbox420_Mega_Main\build\sketch\src\Components/420Common.cpp:139
  static char ReturnChar[MaxWordLength] = "";
  strcpy_P(ReturnChar, (PGM_P)Name);
    3348:	fc 01       	movw	r30, r24
    334a:	62 81       	ldd	r22, Z+2	; 0x02
    334c:	73 81       	ldd	r23, Z+3	; 0x03
    334e:	81 e3       	ldi	r24, 0x31	; 49
    3350:	92 e1       	ldi	r25, 0x12	; 18
    3352:	0e 94 ee 94 	call	0x129dc	; 0x129dc <strcpy_P>
b:\Gbox420\Gbox420\Gbox420_Mega_Main\build\sketch\src\Components/420Common.cpp:141
  if (UnderscoreSeparator)
    strcat_P(ReturnChar, (PGM_P)F("_"));
    3356:	67 ec       	ldi	r22, 0xC7	; 199
    3358:	77 e0       	ldi	r23, 0x07	; 7
b:\Gbox420\Gbox420\Gbox420_Mega_Main\build\sketch\src\Components/420Common.cpp:140

char *Common::getName(char *AppendToEnd, bool UnderscoreSeparator)
{
  static char ReturnChar[MaxWordLength] = "";
  strcpy_P(ReturnChar, (PGM_P)Name);
  if (UnderscoreSeparator)
    335a:	11 11       	cpse	r17, r1
    335c:	02 c0       	rjmp	.+4      	; 0x3362 <Common::getName(char*, bool)+0x24>
b:\Gbox420\Gbox420\Gbox420_Mega_Main\build\sketch\src\Components/420Common.cpp:143
    strcat_P(ReturnChar, (PGM_P)F("_"));
  else
    strcat_P(ReturnChar, (PGM_P)F(" "));
    335e:	65 ec       	ldi	r22, 0xC5	; 197
    3360:	77 e0       	ldi	r23, 0x07	; 7
    3362:	81 e3       	ldi	r24, 0x31	; 49
    3364:	92 e1       	ldi	r25, 0x12	; 18
    3366:	0e 94 da 94 	call	0x129b4	; 0x129b4 <strcat_P>
b:\Gbox420\Gbox420\Gbox420_Mega_Main\build\sketch\src\Components/420Common.cpp:144
  strcat(ReturnChar, AppendToEnd);
    336a:	be 01       	movw	r22, r28
    336c:	81 e3       	ldi	r24, 0x31	; 49
    336e:	92 e1       	ldi	r25, 0x12	; 18
    3370:	0e 94 23 95 	call	0x12a46	; 0x12a46 <strcat>
b:\Gbox420\Gbox420\Gbox420_Mega_Main\build\sketch\src\Components/420Common.cpp:146
  return ReturnChar;
    3374:	81 e3       	ldi	r24, 0x31	; 49
    3376:	92 e1       	ldi	r25, 0x12	; 18
    3378:	df 91       	pop	r29
    337a:	cf 91       	pop	r28
    337c:	1f 91       	pop	r17
    337e:	08 95       	ret

00003380 <Module::Module(__FlashStringHelper const*) [clone .isra.0]>:
_ZN6ModuleC4EPK19__FlashStringHelper.isra.0():
b:\Gbox420\Gbox420\Gbox420_Mega_Main\build\sketch\src\Components/420Module.cpp:234
  if (MetricEnabled != *Metric)
  { //if there was a change
    *Metric = MetricEnabled;
    RunAllRequested = true; ///< Force a full sensor reading refresh
  }
  getSoundObject()->playOnOffSound(*Metric);
    3380:	cf 93       	push	r28
    3382:	df 93       	push	r29
    3384:	fc 01       	movw	r30, r24
    3386:	87 e6       	ldi	r24, 0x67	; 103
    3388:	94 e0       	ldi	r25, 0x04	; 4
    338a:	61 15       	cp	r22, r1
    338c:	71 05       	cpc	r23, r1
    338e:	19 f4       	brne	.+6      	; 0x3396 <Module::Module(__FlashStringHelper const*) [clone .isra.0]+0x16>
    3390:	da 01       	movw	r26, r20
    3392:	8d 91       	ld	r24, X+
    3394:	9c 91       	ld	r25, X
    3396:	91 83       	std	Z+1, r25	; 0x01
    3398:	80 83       	st	Z, r24
    339a:	67 2b       	or	r22, r23
    339c:	d9 f5       	brne	.+118    	; 0x3414 <Module::Module(__FlashStringHelper const*) [clone .isra.0]+0x94>
    339e:	ea 01       	movw	r28, r20
    33a0:	2a 81       	ldd	r18, Y+2	; 0x02
    33a2:	3b 81       	ldd	r19, Y+3	; 0x03
    33a4:	06 97       	sbiw	r24, 0x06	; 6
    33a6:	dc 01       	movw	r26, r24
    33a8:	8d 91       	ld	r24, X+
    33aa:	9c 91       	ld	r25, X
    33ac:	8e 0f       	add	r24, r30
    33ae:	9f 1f       	adc	r25, r31
    33b0:	ec 01       	movw	r28, r24
    33b2:	39 83       	std	Y+1, r19	; 0x01
    33b4:	28 83       	st	Y, r18
    33b6:	13 82       	std	Z+3, r1	; 0x03
    33b8:	12 82       	std	Z+2, r1	; 0x02
    33ba:	17 82       	std	Z+7, r1	; 0x07
    33bc:	16 82       	std	Z+6, r1	; 0x06
    33be:	12 8a       	std	Z+18, r1	; 0x12
    33c0:	13 8a       	std	Z+19, r1	; 0x13
    33c2:	80 e4       	ldi	r24, 0x40	; 64
    33c4:	df 01       	movw	r26, r30
    33c6:	54 96       	adiw	r26, 0x14	; 20
    33c8:	ed 01       	movw	r28, r26
    33ca:	98 2f       	mov	r25, r24
    33cc:	19 92       	st	Y+, r1
    33ce:	9a 95       	dec	r25
    33d0:	e9 f7       	brne	.-6      	; 0x33cc <Module::Module(__FlashStringHelper const*) [clone .isra.0]+0x4c>
    33d2:	a0 5c       	subi	r26, 0xC0	; 192
    33d4:	bf 4f       	sbci	r27, 0xFF	; 255
    33d6:	ed 01       	movw	r28, r26
    33d8:	98 2f       	mov	r25, r24
    33da:	19 92       	st	Y+, r1
    33dc:	9a 95       	dec	r25
    33de:	e9 f7       	brne	.-6      	; 0x33da <Module::Module(__FlashStringHelper const*) [clone .isra.0]+0x5a>
    33e0:	a0 5c       	subi	r26, 0xC0	; 192
    33e2:	bf 4f       	sbci	r27, 0xFF	; 255
    33e4:	ed 01       	movw	r28, r26
    33e6:	98 2f       	mov	r25, r24
    33e8:	19 92       	st	Y+, r1
    33ea:	9a 95       	dec	r25
    33ec:	e9 f7       	brne	.-6      	; 0x33e8 <Module::Module(__FlashStringHelper const*) [clone .isra.0]+0x68>
    33ee:	a0 5c       	subi	r26, 0xC0	; 192
    33f0:	bf 4f       	sbci	r27, 0xFF	; 255
    33f2:	ed 01       	movw	r28, r26
    33f4:	19 92       	st	Y+, r1
    33f6:	8a 95       	dec	r24
    33f8:	e9 f7       	brne	.-6      	; 0x33f4 <Module::Module(__FlashStringHelper const*) [clone .isra.0]+0x74>
    33fa:	a0 5c       	subi	r26, 0xC0	; 192
    33fc:	bf 4f       	sbci	r27, 0xFF	; 255
    33fe:	1c 92       	st	X, r1
    3400:	11 96       	adiw	r26, 0x01	; 1
    3402:	1c 92       	st	X, r1
    3404:	11 96       	adiw	r26, 0x01	; 1
    3406:	1c 92       	st	X, r1
    3408:	e9 5e       	subi	r30, 0xE9	; 233
    340a:	fe 4f       	sbci	r31, 0xFE	; 254
    340c:	10 82       	st	Z, r1
    340e:	df 91       	pop	r29
    3410:	cf 91       	pop	r28
    3412:	08 95       	ret
    3414:	29 e7       	ldi	r18, 0x79	; 121
    3416:	34 e0       	ldi	r19, 0x04	; 4
    3418:	88 e1       	ldi	r24, 0x18	; 24
    341a:	91 e0       	ldi	r25, 0x01	; 1
    341c:	c7 cf       	rjmp	.-114    	; 0x33ac <Module::Module(__FlashStringHelper const*) [clone .isra.0]+0x2c>

0000341e <void logToSerials<char [1024]>(char (*) [1024], bool, unsigned char) [clone .part.1]>:
_Z12logToSerialsIA1024_cEvPT_bh():
    341e:	cf 93       	push	r28
    3420:	df 93       	push	r29
    3422:	ec 01       	movw	r28, r24
    3424:	bc 01       	movw	r22, r24
    3426:	80 91 2f 04 	lds	r24, 0x042F	; 0x80042f <ArduinoSerial>
    342a:	90 91 30 04 	lds	r25, 0x0430	; 0x800430 <ArduinoSerial+0x1>
    342e:	0e 94 c3 8b 	call	0x11786	; 0x11786 <Print::println(char const*)>
    3432:	be 01       	movw	r22, r28
    3434:	80 91 2d 04 	lds	r24, 0x042D	; 0x80042d <ESPSerial>
    3438:	90 91 2e 04 	lds	r25, 0x042E	; 0x80042e <ESPSerial+0x1>
    343c:	df 91       	pop	r29
    343e:	cf 91       	pop	r28
    3440:	0c 94 c3 8b 	jmp	0x11786	; 0x11786 <Print::println(char const*)>

00003444 <Module::addToLog(__FlashStringHelper const*, unsigned char)>:
_ZN6Module8addToLogEPK19__FlashStringHelperh():
    3444:	cf 92       	push	r12
    3446:	df 92       	push	r13
    3448:	ef 92       	push	r14
    344a:	ff 92       	push	r15
    344c:	0f 93       	push	r16
    344e:	1f 93       	push	r17
    3450:	cf 93       	push	r28
    3452:	7b 01       	movw	r14, r22
    3454:	c4 2f       	mov	r28, r20
    3456:	c0 90 2f 04 	lds	r12, 0x042F	; 0x80042f <ArduinoSerial>
    345a:	d0 90 30 04 	lds	r13, 0x0430	; 0x800430 <ArduinoSerial+0x1>
    345e:	00 91 2d 04 	lds	r16, 0x042D	; 0x80042d <ESPSerial>
    3462:	10 91 2e 04 	lds	r17, 0x042E	; 0x80042e <ESPSerial+0x1>
_Z12logToSerialsIPK19__FlashStringHelperEvPT_bh():
    3466:	cc 23       	and	r28, r28
    3468:	61 f0       	breq	.+24     	; 0x3482 <Module::addToLog(__FlashStringHelper const*, unsigned char)+0x3e>
    346a:	61 e0       	ldi	r22, 0x01	; 1
    346c:	78 e0       	ldi	r23, 0x08	; 8
    346e:	c6 01       	movw	r24, r12
    3470:	0e 94 6c 8b 	call	0x116d8	; 0x116d8 <Print::print(__FlashStringHelper const*)>
    3474:	6f ef       	ldi	r22, 0xFF	; 255
    3476:	77 e0       	ldi	r23, 0x07	; 7
    3478:	c8 01       	movw	r24, r16
    347a:	0e 94 6c 8b 	call	0x116d8	; 0x116d8 <Print::print(__FlashStringHelper const*)>
    347e:	c1 50       	subi	r28, 0x01	; 1
    3480:	f2 cf       	rjmp	.-28     	; 0x3466 <Module::addToLog(__FlashStringHelper const*, unsigned char)+0x22>
    3482:	b7 01       	movw	r22, r14
    3484:	c6 01       	movw	r24, r12
    3486:	0e 94 b1 8b 	call	0x11762	; 0x11762 <Print::println(__FlashStringHelper const*)>
    348a:	b7 01       	movw	r22, r14
    348c:	c8 01       	movw	r24, r16
_ZN6Module8addToLogEPK19__FlashStringHelperh():
    348e:	cf 91       	pop	r28
    3490:	1f 91       	pop	r17
    3492:	0f 91       	pop	r16
    3494:	ff 90       	pop	r15
    3496:	ef 90       	pop	r14
    3498:	df 90       	pop	r13
    349a:	cf 90       	pop	r12
_Z12logToSerialsIPK19__FlashStringHelperEvPT_bh():
    349c:	0c 94 b1 8b 	jmp	0x11762	; 0x11762 <Print::println(__FlashStringHelper const*)>

000034a0 <Module::addToLog(char const*, unsigned char)>:
_ZN6Module8addToLogEPKch():
    34a0:	cf 92       	push	r12
    34a2:	df 92       	push	r13
    34a4:	ef 92       	push	r14
    34a6:	ff 92       	push	r15
    34a8:	0f 93       	push	r16
    34aa:	1f 93       	push	r17
    34ac:	cf 93       	push	r28
    34ae:	7b 01       	movw	r14, r22
    34b0:	c4 2f       	mov	r28, r20
    34b2:	c0 90 2f 04 	lds	r12, 0x042F	; 0x80042f <ArduinoSerial>
    34b6:	d0 90 30 04 	lds	r13, 0x0430	; 0x800430 <ArduinoSerial+0x1>
    34ba:	00 91 2d 04 	lds	r16, 0x042D	; 0x80042d <ESPSerial>
    34be:	10 91 2e 04 	lds	r17, 0x042E	; 0x80042e <ESPSerial+0x1>
_Z12logToSerialsIPKcEvPT_bh():
    34c2:	cc 23       	and	r28, r28
    34c4:	61 f0       	breq	.+24     	; 0x34de <Module::addToLog(char const*, unsigned char)+0x3e>
    34c6:	65 e0       	ldi	r22, 0x05	; 5
    34c8:	78 e0       	ldi	r23, 0x08	; 8
    34ca:	c6 01       	movw	r24, r12
    34cc:	0e 94 6c 8b 	call	0x116d8	; 0x116d8 <Print::print(__FlashStringHelper const*)>
    34d0:	63 e0       	ldi	r22, 0x03	; 3
    34d2:	78 e0       	ldi	r23, 0x08	; 8
    34d4:	c8 01       	movw	r24, r16
    34d6:	0e 94 6c 8b 	call	0x116d8	; 0x116d8 <Print::print(__FlashStringHelper const*)>
    34da:	c1 50       	subi	r28, 0x01	; 1
    34dc:	f2 cf       	rjmp	.-28     	; 0x34c2 <Module::addToLog(char const*, unsigned char)+0x22>
    34de:	b7 01       	movw	r22, r14
    34e0:	c6 01       	movw	r24, r12
    34e2:	0e 94 c3 8b 	call	0x11786	; 0x11786 <Print::println(char const*)>
    34e6:	b7 01       	movw	r22, r14
    34e8:	c8 01       	movw	r24, r16
_ZN6Module8addToLogEPKch():
    34ea:	cf 91       	pop	r28
    34ec:	1f 91       	pop	r17
    34ee:	0f 91       	pop	r16
    34f0:	ff 90       	pop	r15
    34f2:	ef 90       	pop	r14
    34f4:	df 90       	pop	r13
    34f6:	cf 90       	pop	r12
_Z12logToSerialsIPKcEvPT_bh():
    34f8:	0c 94 c3 8b 	jmp	0x11786	; 0x11786 <Print::println(char const*)>

000034fc <Module::Module(__FlashStringHelper const*)>:
_ZN6ModuleC2EPK19__FlashStringHelper():
    34fc:	ab 01       	movw	r20, r22
    34fe:	70 e0       	ldi	r23, 0x00	; 0
    3500:	60 e0       	ldi	r22, 0x00	; 0
    3502:	0c 94 c0 19 	jmp	0x3380	; 0x3380 <Module::Module(__FlashStringHelper const*) [clone .isra.0]>

00003506 <Module::setSerialReportingFrequency(unsigned int)>:
_ZN6Module27setSerialReportingFrequencyEj():
    3506:	dc 01       	movw	r26, r24
    3508:	14 96       	adiw	r26, 0x04	; 4
    350a:	ed 91       	ld	r30, X+
    350c:	fc 91       	ld	r31, X
    350e:	20 81       	ld	r18, Z
    3510:	31 81       	ldd	r19, Z+1	; 0x01
    3512:	26 17       	cp	r18, r22
    3514:	37 07       	cpc	r19, r23
    3516:	11 f0       	breq	.+4      	; 0x351c <Module::setSerialReportingFrequency(unsigned int)+0x16>
    3518:	71 83       	std	Z+1, r23	; 0x01
    351a:	60 83       	st	Z, r22
    351c:	fc 01       	movw	r30, r24
    351e:	82 81       	ldd	r24, Z+2	; 0x02
    3520:	93 81       	ldd	r25, Z+3	; 0x03
    3522:	0c 94 cf 2a 	jmp	0x559e	; 0x559e <Sound::playOnSound()>

00003526 <Module::runFiveSec()>:
_ZN6Module10runFiveSecEv():
    3526:	ef 92       	push	r14
    3528:	ff 92       	push	r15
    352a:	0f 93       	push	r16
    352c:	1f 93       	push	r17
    352e:	cf 93       	push	r28
    3530:	df 93       	push	r29
    3532:	ec 01       	movw	r28, r24
    3534:	e0 91 b7 0c 	lds	r30, 0x0CB7	; 0x800cb7 <Debug>
    3538:	f0 91 b8 0c 	lds	r31, 0x0CB8	; 0x800cb8 <Debug+0x1>
    353c:	80 81       	ld	r24, Z
    353e:	88 23       	and	r24, r24
    3540:	31 f0       	breq	.+12     	; 0x354e <Module::runFiveSec()+0x28>
    3542:	41 e0       	ldi	r20, 0x01	; 1
    3544:	61 e0       	ldi	r22, 0x01	; 1
    3546:	84 e4       	ldi	r24, 0x44	; 68
    3548:	98 e0       	ldi	r25, 0x08	; 8
    354a:	0e 94 85 16 	call	0x2d0a	; 0x2d0a <logToSerials(__FlashStringHelper const*, bool, unsigned char)>
    354e:	7e 01       	movw	r14, r28
    3550:	84 e9       	ldi	r24, 0x94	; 148
    3552:	e8 0e       	add	r14, r24
    3554:	f1 1c       	adc	r15, r1
    3556:	10 e0       	ldi	r17, 0x00	; 0
    3558:	00 e0       	ldi	r16, 0x00	; 0
    355a:	ca 5e       	subi	r28, 0xEA	; 234
    355c:	de 4f       	sbci	r29, 0xFE	; 254
    355e:	88 81       	ld	r24, Y
    3560:	80 17       	cp	r24, r16
    3562:	11 06       	cpc	r1, r17
    3564:	79 f0       	breq	.+30     	; 0x3584 <Module::runFiveSec()+0x5e>
    3566:	74 f0       	brlt	.+28     	; 0x3584 <Module::runFiveSec()+0x5e>
    3568:	d7 01       	movw	r26, r14
    356a:	8d 91       	ld	r24, X+
    356c:	9d 91       	ld	r25, X+
    356e:	7d 01       	movw	r14, r26
    3570:	dc 01       	movw	r26, r24
    3572:	ed 91       	ld	r30, X+
    3574:	fc 91       	ld	r31, X
    3576:	04 80       	ldd	r0, Z+4	; 0x04
    3578:	f5 81       	ldd	r31, Z+5	; 0x05
    357a:	e0 2d       	mov	r30, r0
    357c:	19 95       	eicall
    357e:	0f 5f       	subi	r16, 0xFF	; 255
    3580:	1f 4f       	sbci	r17, 0xFF	; 255
    3582:	ed cf       	rjmp	.-38     	; 0x355e <Module::runFiveSec()+0x38>
    3584:	df 91       	pop	r29
    3586:	cf 91       	pop	r28
    3588:	1f 91       	pop	r17
    358a:	0f 91       	pop	r16
    358c:	ff 90       	pop	r15
    358e:	ef 90       	pop	r14
    3590:	08 95       	ret

00003592 <Module::runMinute()>:
_ZN6Module9runMinuteEv():
    3592:	ef 92       	push	r14
    3594:	ff 92       	push	r15
    3596:	0f 93       	push	r16
    3598:	1f 93       	push	r17
    359a:	cf 93       	push	r28
    359c:	df 93       	push	r29
    359e:	ec 01       	movw	r28, r24
    35a0:	e0 91 b7 0c 	lds	r30, 0x0CB7	; 0x800cb7 <Debug>
    35a4:	f0 91 b8 0c 	lds	r31, 0x0CB8	; 0x800cb8 <Debug+0x1>
    35a8:	80 81       	ld	r24, Z
    35aa:	88 23       	and	r24, r24
    35ac:	31 f0       	breq	.+12     	; 0x35ba <Module::runMinute()+0x28>
    35ae:	41 e0       	ldi	r20, 0x01	; 1
    35b0:	61 e0       	ldi	r22, 0x01	; 1
    35b2:	8f e3       	ldi	r24, 0x3F	; 63
    35b4:	98 e0       	ldi	r25, 0x08	; 8
    35b6:	0e 94 85 16 	call	0x2d0a	; 0x2d0a <logToSerials(__FlashStringHelper const*, bool, unsigned char)>
    35ba:	7e 01       	movw	r14, r28
    35bc:	84 ed       	ldi	r24, 0xD4	; 212
    35be:	e8 0e       	add	r14, r24
    35c0:	f1 1c       	adc	r15, r1
    35c2:	10 e0       	ldi	r17, 0x00	; 0
    35c4:	00 e0       	ldi	r16, 0x00	; 0
    35c6:	c9 5e       	subi	r28, 0xE9	; 233
    35c8:	de 4f       	sbci	r29, 0xFE	; 254
    35ca:	88 81       	ld	r24, Y
    35cc:	80 17       	cp	r24, r16
    35ce:	11 06       	cpc	r1, r17
    35d0:	79 f0       	breq	.+30     	; 0x35f0 <Module::runMinute()+0x5e>
    35d2:	74 f0       	brlt	.+28     	; 0x35f0 <Module::runMinute()+0x5e>
    35d4:	d7 01       	movw	r26, r14
    35d6:	8d 91       	ld	r24, X+
    35d8:	9d 91       	ld	r25, X+
    35da:	7d 01       	movw	r14, r26
    35dc:	dc 01       	movw	r26, r24
    35de:	ed 91       	ld	r30, X+
    35e0:	fc 91       	ld	r31, X
    35e2:	06 80       	ldd	r0, Z+6	; 0x06
    35e4:	f7 81       	ldd	r31, Z+7	; 0x07
    35e6:	e0 2d       	mov	r30, r0
    35e8:	19 95       	eicall
    35ea:	0f 5f       	subi	r16, 0xFF	; 255
    35ec:	1f 4f       	sbci	r17, 0xFF	; 255
    35ee:	ed cf       	rjmp	.-38     	; 0x35ca <Module::runMinute()+0x38>
    35f0:	df 91       	pop	r29
    35f2:	cf 91       	pop	r28
    35f4:	1f 91       	pop	r17
    35f6:	0f 91       	pop	r16
    35f8:	ff 90       	pop	r15
    35fa:	ef 90       	pop	r14
    35fc:	08 95       	ret

000035fe <Module::runAll()>:
_ZN6Module6runAllEv():
    35fe:	cf 93       	push	r28
    3600:	df 93       	push	r29
    3602:	ec 01       	movw	r28, r24
    3604:	a8 95       	wdr
    3606:	0e 94 11 1b 	call	0x3622	; 0x3622 <Module::runSec()>
    360a:	a8 95       	wdr
    360c:	ce 01       	movw	r24, r28
    360e:	0e 94 93 1a 	call	0x3526	; 0x3526 <Module::runFiveSec()>
    3612:	a8 95       	wdr
    3614:	ce 01       	movw	r24, r28
    3616:	0e 94 c9 1a 	call	0x3592	; 0x3592 <Module::runMinute()>
    361a:	a8 95       	wdr
    361c:	df 91       	pop	r29
    361e:	cf 91       	pop	r28
    3620:	08 95       	ret

00003622 <Module::runSec()>:
_ZN6Module6runSecEv():
    3622:	ef 92       	push	r14
    3624:	ff 92       	push	r15
    3626:	0f 93       	push	r16
    3628:	1f 93       	push	r17
    362a:	cf 93       	push	r28
    362c:	df 93       	push	r29
    362e:	dc 01       	movw	r26, r24
    3630:	52 96       	adiw	r26, 0x12	; 18
    3632:	2c 91       	ld	r18, X
    3634:	52 97       	sbiw	r26, 0x12	; 18
    3636:	22 23       	and	r18, r18
    3638:	51 f0       	breq	.+20     	; 0x364e <Module::runSec()+0x2c>
    363a:	52 96       	adiw	r26, 0x12	; 18
    363c:	1c 92       	st	X, r1
    363e:	df 91       	pop	r29
    3640:	cf 91       	pop	r28
    3642:	1f 91       	pop	r17
    3644:	0f 91       	pop	r16
    3646:	ff 90       	pop	r15
    3648:	ef 90       	pop	r14
    364a:	0c 94 ff 1a 	jmp	0x35fe	; 0x35fe <Module::runAll()>
    364e:	ec 01       	movw	r28, r24
    3650:	e0 91 b7 0c 	lds	r30, 0x0CB7	; 0x800cb7 <Debug>
    3654:	f0 91 b8 0c 	lds	r31, 0x0CB8	; 0x800cb8 <Debug+0x1>
    3658:	80 81       	ld	r24, Z
    365a:	88 23       	and	r24, r24
    365c:	31 f0       	breq	.+12     	; 0x366a <Module::runSec()+0x48>
    365e:	41 e0       	ldi	r20, 0x01	; 1
    3660:	61 e0       	ldi	r22, 0x01	; 1
    3662:	89 e4       	ldi	r24, 0x49	; 73
    3664:	98 e0       	ldi	r25, 0x08	; 8
    3666:	0e 94 85 16 	call	0x2d0a	; 0x2d0a <logToSerials(__FlashStringHelper const*, bool, unsigned char)>
    366a:	7e 01       	movw	r14, r28
    366c:	b4 e5       	ldi	r27, 0x54	; 84
    366e:	eb 0e       	add	r14, r27
    3670:	f1 1c       	adc	r15, r1
    3672:	10 e0       	ldi	r17, 0x00	; 0
    3674:	00 e0       	ldi	r16, 0x00	; 0
    3676:	cb 5e       	subi	r28, 0xEB	; 235
    3678:	de 4f       	sbci	r29, 0xFE	; 254
    367a:	88 81       	ld	r24, Y
    367c:	80 17       	cp	r24, r16
    367e:	11 06       	cpc	r1, r17
    3680:	79 f0       	breq	.+30     	; 0x36a0 <Module::runSec()+0x7e>
    3682:	74 f0       	brlt	.+28     	; 0x36a0 <Module::runSec()+0x7e>
    3684:	f7 01       	movw	r30, r14
    3686:	81 91       	ld	r24, Z+
    3688:	91 91       	ld	r25, Z+
    368a:	7f 01       	movw	r14, r30
    368c:	dc 01       	movw	r26, r24
    368e:	ed 91       	ld	r30, X+
    3690:	fc 91       	ld	r31, X
    3692:	02 80       	ldd	r0, Z+2	; 0x02
    3694:	f3 81       	ldd	r31, Z+3	; 0x03
    3696:	e0 2d       	mov	r30, r0
    3698:	19 95       	eicall
    369a:	0f 5f       	subi	r16, 0xFF	; 255
    369c:	1f 4f       	sbci	r17, 0xFF	; 255
    369e:	ed cf       	rjmp	.-38     	; 0x367a <Module::runSec()+0x58>
    36a0:	df 91       	pop	r29
    36a2:	cf 91       	pop	r28
    36a4:	1f 91       	pop	r17
    36a6:	0f 91       	pop	r16
    36a8:	ff 90       	pop	r15
    36aa:	ef 90       	pop	r14
    36ac:	08 95       	ret

000036ae <Module::getSoundObject()>:
_ZN6Module14getSoundObjectEv():
    36ae:	fc 01       	movw	r30, r24
    36b0:	82 81       	ldd	r24, Z+2	; 0x02
    36b2:	93 81       	ldd	r25, Z+3	; 0x03
    36b4:	08 95       	ret

000036b6 <Module::addToReportQueue(Common*)>:
_ZN6Module16addToReportQueueEP6Common():
    36b6:	fc 01       	movw	r30, r24
    36b8:	ec 5e       	subi	r30, 0xEC	; 236
    36ba:	fe 4f       	sbci	r31, 0xFE	; 254
    36bc:	20 81       	ld	r18, Z
    36be:	20 32       	cpi	r18, 0x20	; 32
    36c0:	70 f4       	brcc	.+28     	; 0x36de <Module::addToReportQueue(Common*)+0x28>
    36c2:	31 e0       	ldi	r19, 0x01	; 1
    36c4:	32 0f       	add	r19, r18
    36c6:	30 83       	st	Z, r19
    36c8:	30 e0       	ldi	r19, 0x00	; 0
    36ca:	26 5f       	subi	r18, 0xF6	; 246
    36cc:	3f 4f       	sbci	r19, 0xFF	; 255
    36ce:	22 0f       	add	r18, r18
    36d0:	33 1f       	adc	r19, r19
    36d2:	82 0f       	add	r24, r18
    36d4:	93 1f       	adc	r25, r19
    36d6:	fc 01       	movw	r30, r24
    36d8:	71 83       	std	Z+1, r23	; 0x01
    36da:	60 83       	st	Z, r22
    36dc:	08 95       	ret
    36de:	40 e0       	ldi	r20, 0x00	; 0
    36e0:	61 e0       	ldi	r22, 0x01	; 1
    36e2:	85 e3       	ldi	r24, 0x35	; 53
    36e4:	98 e0       	ldi	r25, 0x08	; 8
    36e6:	0c 94 85 16 	jmp	0x2d0a	; 0x2d0a <logToSerials(__FlashStringHelper const*, bool, unsigned char)>

000036ea <Module::addToRefreshQueue_Sec(Common*)>:
_ZN6Module21addToRefreshQueue_SecEP6Common():
    36ea:	fc 01       	movw	r30, r24
    36ec:	eb 5e       	subi	r30, 0xEB	; 235
    36ee:	fe 4f       	sbci	r31, 0xFE	; 254
    36f0:	20 81       	ld	r18, Z
    36f2:	20 32       	cpi	r18, 0x20	; 32
    36f4:	70 f4       	brcc	.+28     	; 0x3712 <Module::addToRefreshQueue_Sec(Common*)+0x28>
    36f6:	31 e0       	ldi	r19, 0x01	; 1
    36f8:	32 0f       	add	r19, r18
    36fa:	30 83       	st	Z, r19
    36fc:	30 e0       	ldi	r19, 0x00	; 0
    36fe:	26 5d       	subi	r18, 0xD6	; 214
    3700:	3f 4f       	sbci	r19, 0xFF	; 255
    3702:	22 0f       	add	r18, r18
    3704:	33 1f       	adc	r19, r19
    3706:	82 0f       	add	r24, r18
    3708:	93 1f       	adc	r25, r19
    370a:	fc 01       	movw	r30, r24
    370c:	71 83       	std	Z+1, r23	; 0x01
    370e:	60 83       	st	Z, r22
    3710:	08 95       	ret
    3712:	40 e0       	ldi	r20, 0x00	; 0
    3714:	61 e0       	ldi	r22, 0x01	; 1
    3716:	87 e2       	ldi	r24, 0x27	; 39
    3718:	98 e0       	ldi	r25, 0x08	; 8
    371a:	0c 94 85 16 	jmp	0x2d0a	; 0x2d0a <logToSerials(__FlashStringHelper const*, bool, unsigned char)>

0000371e <Module::addToRefreshQueue_FiveSec(Common*)>:
_ZN6Module25addToRefreshQueue_FiveSecEP6Common():
    371e:	fc 01       	movw	r30, r24
    3720:	ea 5e       	subi	r30, 0xEA	; 234
    3722:	fe 4f       	sbci	r31, 0xFE	; 254
    3724:	20 81       	ld	r18, Z
    3726:	20 32       	cpi	r18, 0x20	; 32
    3728:	70 f4       	brcc	.+28     	; 0x3746 <Module::addToRefreshQueue_FiveSec(Common*)+0x28>
    372a:	31 e0       	ldi	r19, 0x01	; 1
    372c:	32 0f       	add	r19, r18
    372e:	30 83       	st	Z, r19
    3730:	30 e0       	ldi	r19, 0x00	; 0
    3732:	26 5b       	subi	r18, 0xB6	; 182
    3734:	3f 4f       	sbci	r19, 0xFF	; 255
    3736:	22 0f       	add	r18, r18
    3738:	33 1f       	adc	r19, r19
    373a:	82 0f       	add	r24, r18
    373c:	93 1f       	adc	r25, r19
    373e:	fc 01       	movw	r30, r24
    3740:	71 83       	std	Z+1, r23	; 0x01
    3742:	60 83       	st	Z, r22
    3744:	08 95       	ret
    3746:	40 e0       	ldi	r20, 0x00	; 0
    3748:	61 e0       	ldi	r22, 0x01	; 1
    374a:	89 e1       	ldi	r24, 0x19	; 25
    374c:	98 e0       	ldi	r25, 0x08	; 8
    374e:	0c 94 85 16 	jmp	0x2d0a	; 0x2d0a <logToSerials(__FlashStringHelper const*, bool, unsigned char)>

00003752 <Module::addToRefreshQueue_Minute(Common*)>:
_ZN6Module24addToRefreshQueue_MinuteEP6Common():
    3752:	fc 01       	movw	r30, r24
    3754:	e9 5e       	subi	r30, 0xE9	; 233
    3756:	fe 4f       	sbci	r31, 0xFE	; 254
    3758:	20 81       	ld	r18, Z
    375a:	20 32       	cpi	r18, 0x20	; 32
    375c:	70 f4       	brcc	.+28     	; 0x377a <Module::addToRefreshQueue_Minute(Common*)+0x28>
    375e:	31 e0       	ldi	r19, 0x01	; 1
    3760:	32 0f       	add	r19, r18
    3762:	30 83       	st	Z, r19
    3764:	30 e0       	ldi	r19, 0x00	; 0
    3766:	26 59       	subi	r18, 0x96	; 150
    3768:	3f 4f       	sbci	r19, 0xFF	; 255
    376a:	22 0f       	add	r18, r18
    376c:	33 1f       	adc	r19, r19
    376e:	82 0f       	add	r24, r18
    3770:	93 1f       	adc	r25, r19
    3772:	fc 01       	movw	r30, r24
    3774:	71 83       	std	Z+1, r23	; 0x01
    3776:	60 83       	st	Z, r22
    3778:	08 95       	ret
    377a:	40 e0       	ldi	r20, 0x00	; 0
    377c:	61 e0       	ldi	r22, 0x01	; 1
    377e:	8b e0       	ldi	r24, 0x0B	; 11
    3780:	98 e0       	ldi	r25, 0x08	; 8
    3782:	0c 94 85 16 	jmp	0x2d0a	; 0x2d0a <logToSerials(__FlashStringHelper const*, bool, unsigned char)>

00003786 <Module::getFormattedTime(bool)>:
_ZN6Module16getFormattedTimeEb():
    3786:	5f 92       	push	r5
    3788:	6f 92       	push	r6
    378a:	7f 92       	push	r7
    378c:	8f 92       	push	r8
    378e:	9f 92       	push	r9
    3790:	af 92       	push	r10
    3792:	bf 92       	push	r11
    3794:	cf 92       	push	r12
    3796:	df 92       	push	r13
    3798:	ef 92       	push	r14
    379a:	ff 92       	push	r15
    379c:	0f 93       	push	r16
    379e:	1f 93       	push	r17
    37a0:	cf 93       	push	r28
    37a2:	df 93       	push	r29
    37a4:	c6 2f       	mov	r28, r22
    37a6:	0e 94 5c 7c 	call	0xf8b8	; 0xf8b8 <now()>
    37aa:	6b 01       	movw	r12, r22
    37ac:	7c 01       	movw	r14, r24
    37ae:	0e 94 0f 7c 	call	0xf81e	; 0xf81e <second(unsigned long)>
    37b2:	68 2e       	mov	r6, r24
    37b4:	59 2e       	mov	r5, r25
    37b6:	c7 01       	movw	r24, r14
    37b8:	b6 01       	movw	r22, r12
    37ba:	0e 94 09 7c 	call	0xf812	; 0xf812 <minute(unsigned long)>
    37be:	88 2e       	mov	r8, r24
    37c0:	79 2e       	mov	r7, r25
    37c2:	c7 01       	movw	r24, r14
    37c4:	b6 01       	movw	r22, r12
    37c6:	0e 94 03 7c 	call	0xf806	; 0xf806 <hour(unsigned long)>
    37ca:	a8 2e       	mov	r10, r24
    37cc:	99 2e       	mov	r9, r25
    37ce:	c7 01       	movw	r24, r14
    37d0:	b6 01       	movw	r22, r12
    37d2:	0e 94 15 7c 	call	0xf82a	; 0xf82a <day(unsigned long)>
    37d6:	08 2f       	mov	r16, r24
    37d8:	b9 2e       	mov	r11, r25
    37da:	c7 01       	movw	r24, r14
    37dc:	b6 01       	movw	r22, r12
    37de:	0e 94 1b 7c 	call	0xf836	; 0xf836 <month(unsigned long)>
    37e2:	d8 2f       	mov	r29, r24
    37e4:	19 2f       	mov	r17, r25
    37e6:	c7 01       	movw	r24, r14
    37e8:	b6 01       	movw	r22, r12
    37ea:	0e 94 21 7c 	call	0xf842	; 0xf842 <year(unsigned long)>
    37ee:	5f 92       	push	r5
    37f0:	6f 92       	push	r6
    37f2:	7f 92       	push	r7
    37f4:	8f 92       	push	r8
    37f6:	9f 92       	push	r9
    37f8:	af 92       	push	r10
    37fa:	bf 92       	push	r11
    37fc:	0f 93       	push	r16
    37fe:	1f 93       	push	r17
    3800:	df 93       	push	r29
    3802:	9f 93       	push	r25
    3804:	8f 93       	push	r24
    3806:	8f e3       	ldi	r24, 0x3F	; 63
    3808:	94 e0       	ldi	r25, 0x04	; 4
    380a:	9f 93       	push	r25
    380c:	8f 93       	push	r24
    380e:	1f 92       	push	r1
    3810:	80 e2       	ldi	r24, 0x20	; 32
    3812:	8f 93       	push	r24
    3814:	81 e9       	ldi	r24, 0x91	; 145
    3816:	9d e0       	ldi	r25, 0x0D	; 13
    3818:	9f 93       	push	r25
    381a:	8f 93       	push	r24
    381c:	0e 94 01 96 	call	0x12c02	; 0x12c02 <snprintf>
    3820:	8d b7       	in	r24, 0x3d	; 61
    3822:	9e b7       	in	r25, 0x3e	; 62
    3824:	42 96       	adiw	r24, 0x12	; 18
    3826:	0f b6       	in	r0, 0x3f	; 63
    3828:	f8 94       	cli
    382a:	9e bf       	out	0x3e, r25	; 62
    382c:	0f be       	out	0x3f, r0	; 63
    382e:	8d bf       	out	0x3d, r24	; 61
    3830:	cc 23       	and	r28, r28
    3832:	21 f0       	breq	.+8      	; 0x383c <Module::getFormattedTime(bool)+0xb6>
_Z12logToSerialsIA32_cEvPT_bh():
    3834:	81 e9       	ldi	r24, 0x91	; 145
    3836:	9d e0       	ldi	r25, 0x0D	; 13
    3838:	0e 94 0f 1a 	call	0x341e	; 0x341e <void logToSerials<char [1024]>(char (*) [1024], bool, unsigned char) [clone .part.1]>
_ZN6Module16getFormattedTimeEb():
    383c:	81 e9       	ldi	r24, 0x91	; 145
    383e:	9d e0       	ldi	r25, 0x0D	; 13
    3840:	df 91       	pop	r29
    3842:	cf 91       	pop	r28
    3844:	1f 91       	pop	r17
    3846:	0f 91       	pop	r16
    3848:	ff 90       	pop	r15
    384a:	ef 90       	pop	r14
    384c:	df 90       	pop	r13
    384e:	cf 90       	pop	r12
    3850:	bf 90       	pop	r11
    3852:	af 90       	pop	r10
    3854:	9f 90       	pop	r9
    3856:	8f 90       	pop	r8
    3858:	7f 90       	pop	r7
    385a:	6f 90       	pop	r6
    385c:	5f 90       	pop	r5
    385e:	08 95       	ret

00003860 <Module::setSerialReportDate(bool)>:
_ZN6Module19setSerialReportDateEb():
b:\Gbox420\Gbox420\Gbox420_Mega_Main\build\sketch\src\Components/420Module.cpp:239
}

void Module::setSerialReportDate(bool State)
{
  if (State != *SerialReportDate)
    3860:	dc 01       	movw	r26, r24
    3862:	18 96       	adiw	r26, 0x08	; 8
    3864:	ed 91       	ld	r30, X+
    3866:	fc 91       	ld	r31, X
    3868:	20 81       	ld	r18, Z
    386a:	26 13       	cpse	r18, r22
b:\Gbox420\Gbox420\Gbox420_Mega_Main\build\sketch\src\Components/420Module.cpp:241
  { //if there was a change
    *SerialReportDate = State;
    386c:	60 83       	st	Z, r22
b:\Gbox420\Gbox420\Gbox420_Mega_Main\build\sketch\src\Components/420Module.cpp:243
  }
  getSoundObject()->playOnOffSound(*SerialReportDate);
    386e:	60 81       	ld	r22, Z
    3870:	fc 01       	movw	r30, r24
    3872:	82 81       	ldd	r24, Z+2	; 0x02
    3874:	93 81       	ldd	r25, Z+3	; 0x03
    3876:	0c 94 c7 2a 	jmp	0x558e	; 0x558e <Sound::playOnOffSound(bool)>

0000387a <Module::setSerialReportMemory(bool)>:
_ZN6Module21setSerialReportMemoryEb():
b:\Gbox420\Gbox420\Gbox420_Mega_Main\build\sketch\src\Components/420Module.cpp:248
}

void Module::setSerialReportMemory(bool State)
{
  if (State != *SerialReportMemory)
    387a:	dc 01       	movw	r26, r24
    387c:	1a 96       	adiw	r26, 0x0a	; 10
    387e:	ed 91       	ld	r30, X+
    3880:	fc 91       	ld	r31, X
    3882:	20 81       	ld	r18, Z
    3884:	26 13       	cpse	r18, r22
b:\Gbox420\Gbox420\Gbox420_Mega_Main\build\sketch\src\Components/420Module.cpp:250
  { //if there was a change
    *SerialReportMemory = State;
    3886:	60 83       	st	Z, r22
b:\Gbox420\Gbox420\Gbox420_Mega_Main\build\sketch\src\Components/420Module.cpp:252
  }
  getSoundObject()->playOnOffSound(*SerialReportMemory);
    3888:	60 81       	ld	r22, Z
    388a:	fc 01       	movw	r30, r24
    388c:	82 81       	ldd	r24, Z+2	; 0x02
    388e:	93 81       	ldd	r25, Z+3	; 0x03
    3890:	0c 94 c7 2a 	jmp	0x558e	; 0x558e <Sound::playOnOffSound(bool)>

00003894 <Module::setSerialReportJSONFriendly(bool)>:
_ZN6Module27setSerialReportJSONFriendlyEb():
b:\Gbox420\Gbox420\Gbox420_Mega_Main\build\sketch\src\Components/420Module.cpp:257
}

void Module::setSerialReportJSONFriendly(bool State)
{
  if (State != *SerialReportJSONFriendly)
    3894:	dc 01       	movw	r26, r24
    3896:	1c 96       	adiw	r26, 0x0c	; 12
    3898:	ed 91       	ld	r30, X+
    389a:	fc 91       	ld	r31, X
    389c:	20 81       	ld	r18, Z
    389e:	26 13       	cpse	r18, r22
b:\Gbox420\Gbox420\Gbox420_Mega_Main\build\sketch\src\Components/420Module.cpp:259
  { //if there was a change
    *SerialReportJSONFriendly = State;
    38a0:	60 83       	st	Z, r22
b:\Gbox420\Gbox420\Gbox420_Mega_Main\build\sketch\src\Components/420Module.cpp:261
  }
  getSoundObject()->playOnOffSound(*SerialReportJSONFriendly);
    38a2:	60 81       	ld	r22, Z
    38a4:	fc 01       	movw	r30, r24
    38a6:	82 81       	ldd	r24, Z+2	; 0x02
    38a8:	93 81       	ldd	r25, Z+3	; 0x03
    38aa:	0c 94 c7 2a 	jmp	0x558e	; 0x558e <Sound::playOnOffSound(bool)>

000038ae <Module::setSerialReportJSON(bool)>:
_ZN6Module19setSerialReportJSONEb():
b:\Gbox420\Gbox420\Gbox420_Mega_Main\build\sketch\src\Components/420Module.cpp:266
}

void Module::setSerialReportJSON(bool State)
{
  if (State != *SerialReportJSON)
    38ae:	dc 01       	movw	r26, r24
    38b0:	1e 96       	adiw	r26, 0x0e	; 14
    38b2:	ed 91       	ld	r30, X+
    38b4:	fc 91       	ld	r31, X
    38b6:	20 81       	ld	r18, Z
    38b8:	26 13       	cpse	r18, r22
b:\Gbox420\Gbox420\Gbox420_Mega_Main\build\sketch\src\Components/420Module.cpp:268
  { //if there was a change
    *SerialReportJSON = State;
    38ba:	60 83       	st	Z, r22
b:\Gbox420\Gbox420\Gbox420_Mega_Main\build\sketch\src\Components/420Module.cpp:270
  }
  getSoundObject()->playOnOffSound(*SerialReportJSON);
    38bc:	60 81       	ld	r22, Z
    38be:	fc 01       	movw	r30, r24
    38c0:	82 81       	ldd	r24, Z+2	; 0x02
    38c2:	93 81       	ldd	r25, Z+3	; 0x03
    38c4:	0c 94 c7 2a 	jmp	0x558e	; 0x558e <Sound::playOnOffSound(bool)>

000038c8 <Module::setSerialReportWireless(bool)>:
_ZN6Module23setSerialReportWirelessEb():
b:\Gbox420\Gbox420\Gbox420_Mega_Main\build\sketch\src\Components/420Module.cpp:275
}

void Module::setSerialReportWireless(bool State)
{
  if (State != *SerialReportWireless)
    38c8:	dc 01       	movw	r26, r24
    38ca:	50 96       	adiw	r26, 0x10	; 16
    38cc:	ed 91       	ld	r30, X+
    38ce:	fc 91       	ld	r31, X
    38d0:	20 81       	ld	r18, Z
    38d2:	26 13       	cpse	r18, r22
b:\Gbox420\Gbox420\Gbox420_Mega_Main\build\sketch\src\Components/420Module.cpp:277
  { //if there was a change
    *SerialReportWireless = State;
    38d4:	60 83       	st	Z, r22
b:\Gbox420\Gbox420\Gbox420_Mega_Main\build\sketch\src\Components/420Module.cpp:279
  }
  getSoundObject()->playOnOffSound(*SerialReportWireless);
    38d6:	60 81       	ld	r22, Z
    38d8:	fc 01       	movw	r30, r24
    38da:	82 81       	ldd	r24, Z+2	; 0x02
    38dc:	93 81       	ldd	r25, Z+3	; 0x03
    38de:	0c 94 c7 2a 	jmp	0x558e	; 0x558e <Sound::playOnOffSound(bool)>

000038e2 <void logToSerials<char [1024]>(char (*) [1024], bool, unsigned char)>:
_Z12logToSerialsIA1024_cEvPT_bh():
b:\gbox420\gbox420\gbox420_mega_main\build\sketch/seriallog.h:16
extern HardwareSerial &ArduinoSerial;
extern HardwareSerial &ESPSerial;

void logToSerials(const __FlashStringHelper *ToPrint, bool BreakLine = true, uint8_t Indent = 3); ///< logs to both Arduino and ESP Link serial console, 2 optional parameters to adding a break line at after printing and the indentation in front
template <class logLine>
void logToSerials(logLine *ToPrint, bool BreakLine = true, uint8_t Indent = 3)
    38e2:	cf 92       	push	r12
    38e4:	df 92       	push	r13
    38e6:	ef 92       	push	r14
    38e8:	ff 92       	push	r15
    38ea:	0f 93       	push	r16
    38ec:	1f 93       	push	r17
    38ee:	cf 93       	push	r28
    38f0:	df 93       	push	r29
    38f2:	ec 01       	movw	r28, r24
    38f4:	06 2f       	mov	r16, r22
    38f6:	14 2f       	mov	r17, r20
b:\gbox420\gbox420\gbox420_mega_main\build\sketch/seriallog.h:20
{
  while (Indent > 0)
  {
    ArduinoSerial.print(F(" "));
    38f8:	c0 90 2f 04 	lds	r12, 0x042F	; 0x80042f <ArduinoSerial>
    38fc:	d0 90 30 04 	lds	r13, 0x0430	; 0x800430 <ArduinoSerial+0x1>
b:\gbox420\gbox420\gbox420_mega_main\build\sketch/seriallog.h:21
    ESPSerial.print(F(" "));
    3900:	e0 90 2d 04 	lds	r14, 0x042D	; 0x80042d <ESPSerial>
    3904:	f0 90 2e 04 	lds	r15, 0x042E	; 0x80042e <ESPSerial+0x1>
b:\gbox420\gbox420\gbox420_mega_main\build\sketch/seriallog.h:18

void logToSerials(const __FlashStringHelper *ToPrint, bool BreakLine = true, uint8_t Indent = 3); ///< logs to both Arduino and ESP Link serial console, 2 optional parameters to adding a break line at after printing and the indentation in front
template <class logLine>
void logToSerials(logLine *ToPrint, bool BreakLine = true, uint8_t Indent = 3)
{
  while (Indent > 0)
    3908:	11 23       	and	r17, r17
    390a:	61 f0       	breq	.+24     	; 0x3924 <void logToSerials<char [1024]>(char (*) [1024], bool, unsigned char)+0x42>
b:\gbox420\gbox420\gbox420_mega_main\build\sketch/seriallog.h:20
  {
    ArduinoSerial.print(F(" "));
    390c:	69 e0       	ldi	r22, 0x09	; 9
    390e:	78 e0       	ldi	r23, 0x08	; 8
    3910:	c6 01       	movw	r24, r12
    3912:	0e 94 6c 8b 	call	0x116d8	; 0x116d8 <Print::print(__FlashStringHelper const*)>
b:\gbox420\gbox420\gbox420_mega_main\build\sketch/seriallog.h:21
    ESPSerial.print(F(" "));
    3916:	67 e0       	ldi	r22, 0x07	; 7
    3918:	78 e0       	ldi	r23, 0x08	; 8
    391a:	c7 01       	movw	r24, r14
    391c:	0e 94 6c 8b 	call	0x116d8	; 0x116d8 <Print::print(__FlashStringHelper const*)>
b:\gbox420\gbox420\gbox420_mega_main\build\sketch/seriallog.h:22
    Indent--;
    3920:	11 50       	subi	r17, 0x01	; 1
b:\gbox420\gbox420\gbox420_mega_main\build\sketch/seriallog.h:18

void logToSerials(const __FlashStringHelper *ToPrint, bool BreakLine = true, uint8_t Indent = 3); ///< logs to both Arduino and ESP Link serial console, 2 optional parameters to adding a break line at after printing and the indentation in front
template <class logLine>
void logToSerials(logLine *ToPrint, bool BreakLine = true, uint8_t Indent = 3)
{
  while (Indent > 0)
    3922:	f2 cf       	rjmp	.-28     	; 0x3908 <void logToSerials<char [1024]>(char (*) [1024], bool, unsigned char)+0x26>
b:\gbox420\gbox420\gbox420_mega_main\build\sketch/seriallog.h:24
  {
    ArduinoSerial.print(F(" "));
    ESPSerial.print(F(" "));
    Indent--;
  }
  if (BreakLine)
    3924:	00 23       	and	r16, r16
    3926:	59 f0       	breq	.+22     	; 0x393e <void logToSerials<char [1024]>(char (*) [1024], bool, unsigned char)+0x5c>
    3928:	ce 01       	movw	r24, r28
b:\gbox420\gbox420\gbox420_mega_main\build\sketch/seriallog.h:34
  else
  {
    ArduinoSerial.print((*ToPrint));
    ESPSerial.print((*ToPrint));
  }
}
    392a:	df 91       	pop	r29
    392c:	cf 91       	pop	r28
    392e:	1f 91       	pop	r17
    3930:	0f 91       	pop	r16
    3932:	ff 90       	pop	r15
    3934:	ef 90       	pop	r14
    3936:	df 90       	pop	r13
    3938:	cf 90       	pop	r12
    393a:	0c 94 0f 1a 	jmp	0x341e	; 0x341e <void logToSerials<char [1024]>(char (*) [1024], bool, unsigned char) [clone .part.1]>
b:\gbox420\gbox420\gbox420_mega_main\build\sketch/seriallog.h:31
    ArduinoSerial.println((*ToPrint));
    ESPSerial.println((*ToPrint));
  }
  else
  {
    ArduinoSerial.print((*ToPrint));
    393e:	be 01       	movw	r22, r28
    3940:	80 91 2f 04 	lds	r24, 0x042F	; 0x80042f <ArduinoSerial>
    3944:	90 91 30 04 	lds	r25, 0x0430	; 0x800430 <ArduinoSerial+0x1>
    3948:	0e 94 9e 8b 	call	0x1173c	; 0x1173c <Print::print(char const*)>
b:\gbox420\gbox420\gbox420_mega_main\build\sketch/seriallog.h:32
    ESPSerial.print((*ToPrint));
    394c:	be 01       	movw	r22, r28
    394e:	80 91 2d 04 	lds	r24, 0x042D	; 0x80042d <ESPSerial>
    3952:	90 91 2e 04 	lds	r25, 0x042E	; 0x80042e <ESPSerial+0x1>
b:\gbox420\gbox420\gbox420_mega_main\build\sketch/seriallog.h:34
  }
}
    3956:	df 91       	pop	r29
    3958:	cf 91       	pop	r28
    395a:	1f 91       	pop	r17
    395c:	0f 91       	pop	r16
    395e:	ff 90       	pop	r15
    3960:	ef 90       	pop	r14
    3962:	df 90       	pop	r13
    3964:	cf 90       	pop	r12
b:\gbox420\gbox420\gbox420_mega_main\build\sketch/seriallog.h:32
    ESPSerial.println((*ToPrint));
  }
  else
  {
    ArduinoSerial.print((*ToPrint));
    ESPSerial.print((*ToPrint));
    3966:	0c 94 9e 8b 	jmp	0x1173c	; 0x1173c <Print::print(char const*)>

0000396a <Module::runReport(bool, bool, bool, bool)>:
_ZN6Module9runReportEbbbb():
b:\Gbox420\Gbox420\Gbox420_Mega_Main\build\sketch\src\Components/420Module.cpp:65
* @param ClearBuffer Flush the LongMessage buffer before starting to report
* @param KeepBuffer Stores the full JSON report in the LongMessage buffer - Only use this on the Mega2560 where LongMessage is large enough to store a complete report (Can be up to 1024kB)
* @param JSONToBufferOnly Do not print anyting on the serial output, only fll the LongMessage buffer with the JSON report
*/
void Module::runReport(bool ForceRun, bool ClearBuffer, bool KeepBuffer, bool JSONToBufferOnly)
{
    396a:	8f 92       	push	r8
    396c:	9f 92       	push	r9
    396e:	af 92       	push	r10
    3970:	bf 92       	push	r11
    3972:	cf 92       	push	r12
    3974:	df 92       	push	r13
    3976:	ef 92       	push	r14
    3978:	ff 92       	push	r15
    397a:	0f 93       	push	r16
    397c:	1f 93       	push	r17
    397e:	cf 93       	push	r28
    3980:	df 93       	push	r29
    3982:	ec 01       	movw	r28, r24
    3984:	f6 2e       	mov	r15, r22
    3986:	e4 2e       	mov	r14, r20
    3988:	12 2f       	mov	r17, r18
b:\Gbox420\Gbox420\Gbox420_Mega_Main\build\sketch\src\Components/420Module.cpp:66
  if ((*SerialReportDate || ForceRun) && !JSONToBufferOnly)
    398a:	e8 85       	ldd	r30, Y+8	; 0x08
    398c:	f9 85       	ldd	r31, Y+9	; 0x09
    398e:	80 81       	ld	r24, Z
    3990:	81 11       	cpse	r24, r1
    3992:	02 c0       	rjmp	.+4      	; 0x3998 <Module::runReport(bool, bool, bool, bool)+0x2e>
b:\Gbox420\Gbox420\Gbox420_Mega_Main\build\sketch\src\Components/420Module.cpp:66 (discriminator 2)
    3994:	66 23       	and	r22, r22
    3996:	31 f0       	breq	.+12     	; 0x39a4 <Module::runReport(bool, bool, bool, bool)+0x3a>
b:\Gbox420\Gbox420\Gbox420_Mega_Main\build\sketch\src\Components/420Module.cpp:66 (discriminator 3)
    3998:	01 11       	cpse	r16, r1
    399a:	04 c0       	rjmp	.+8      	; 0x39a4 <Module::runReport(bool, bool, bool, bool)+0x3a>
b:\Gbox420\Gbox420\Gbox420_Mega_Main\build\sketch\src\Components/420Module.cpp:68
  {
    getFormattedTime(true);
    399c:	61 e0       	ldi	r22, 0x01	; 1
    399e:	ce 01       	movw	r24, r28
    39a0:	0e 94 c3 1b 	call	0x3786	; 0x3786 <Module::getFormattedTime(bool)>
b:\Gbox420\Gbox420\Gbox420_Mega_Main\build\sketch\src\Components/420Module.cpp:70
  }
  if ((*SerialReportMemory || ForceRun) && !JSONToBufferOnly)
    39a4:	ea 85       	ldd	r30, Y+10	; 0x0a
    39a6:	fb 85       	ldd	r31, Y+11	; 0x0b
    39a8:	80 81       	ld	r24, Z
    39aa:	81 11       	cpse	r24, r1
    39ac:	02 c0       	rjmp	.+4      	; 0x39b2 <Module::runReport(bool, bool, bool, bool)+0x48>
b:\Gbox420\Gbox420\Gbox420_Mega_Main\build\sketch\src\Components/420Module.cpp:70 (discriminator 2)
    39ae:	ff 20       	and	r15, r15
    39b0:	21 f0       	breq	.+8      	; 0x39ba <Module::runReport(bool, bool, bool, bool)+0x50>
b:\Gbox420\Gbox420\Gbox420_Mega_Main\build\sketch\src\Components/420Module.cpp:70 (discriminator 3)
    39b2:	01 11       	cpse	r16, r1
    39b4:	02 c0       	rjmp	.+4      	; 0x39ba <Module::runReport(bool, bool, bool, bool)+0x50>
b:\Gbox420\Gbox420\Gbox420_Mega_Main\build\sketch\src\Components/420Module.cpp:72
  {
    getFreeMemory();
    39b6:	0e 94 64 33 	call	0x66c8	; 0x66c8 <getFreeMemory()>
b:\Gbox420\Gbox420\Gbox420_Mega_Main\build\sketch\src\Components/420Module.cpp:85
    {
      ReportQueue[i]->report(false);
    }
  }
  */
  if (*SerialReportJSON || ForceRun || JSONToBufferOnly)
    39ba:	ee 85       	ldd	r30, Y+14	; 0x0e
    39bc:	ff 85       	ldd	r31, Y+15	; 0x0f
    39be:	80 81       	ld	r24, Z
    39c0:	81 11       	cpse	r24, r1
    39c2:	05 c0       	rjmp	.+10     	; 0x39ce <Module::runReport(bool, bool, bool, bool)+0x64>
b:\Gbox420\Gbox420\Gbox420_Mega_Main\build\sketch\src\Components/420Module.cpp:85 (discriminator 1)
    39c4:	f1 10       	cpse	r15, r1
    39c6:	03 c0       	rjmp	.+6      	; 0x39ce <Module::runReport(bool, bool, bool, bool)+0x64>
b:\Gbox420\Gbox420\Gbox420_Mega_Main\build\sketch\src\Components/420Module.cpp:85 (discriminator 2)
    39c8:	00 23       	and	r16, r16
    39ca:	09 f4       	brne	.+2      	; 0x39ce <Module::runReport(bool, bool, bool, bool)+0x64>
    39cc:	85 c0       	rjmp	.+266    	; 0x3ad8 <Module::runReport(bool, bool, bool, bool)+0x16e>
b:\Gbox420\Gbox420\Gbox420_Mega_Main\build\sketch\src\Components/420Module.cpp:87
  {
    if (ClearBuffer)
    39ce:	ee 20       	and	r14, r14
    39d0:	51 f0       	breq	.+20     	; 0x39e6 <Module::runReport(bool, bool, bool, bool)+0x7c>
b:\Gbox420\Gbox420\Gbox420_Mega_Main\build\sketch\src\Components/420Module.cpp:89
    {
      memset(&LongMessage[0], 0, MaxLongTextLength); ///< clear variable
    39d2:	e1 e3       	ldi	r30, 0x31	; 49
    39d4:	fe e0       	ldi	r31, 0x0E	; 14
    39d6:	80 e0       	ldi	r24, 0x00	; 0
    39d8:	94 e0       	ldi	r25, 0x04	; 4
    39da:	df 01       	movw	r26, r30
    39dc:	9c 01       	movw	r18, r24
    39de:	1d 92       	st	X+, r1
    39e0:	21 50       	subi	r18, 0x01	; 1
    39e2:	30 40       	sbci	r19, 0x00	; 0
    39e4:	e1 f7       	brne	.-8      	; 0x39de <Module::runReport(bool, bool, bool, bool)+0x74>
b:\Gbox420\Gbox420\Gbox420_Mega_Main\build\sketch\src\Components/420Module.cpp:91
    }
    strcat_P(LongMessage, (PGM_P)F("{\"Log\":{")); ///< Adds two curly brackets that needs to be closed at the end
    39e6:	63 e5       	ldi	r22, 0x53	; 83
    39e8:	78 e0       	ldi	r23, 0x08	; 8
    39ea:	81 e3       	ldi	r24, 0x31	; 49
    39ec:	9e e0       	ldi	r25, 0x0E	; 14
    39ee:	0e 94 da 94 	call	0x129b4	; 0x129b4 <strcat_P>
b:\Gbox420\Gbox420\Gbox420_Mega_Main\build\sketch\src\Components/420Module.cpp:92
    if (!KeepBuffer)
    39f2:	11 11       	cpse	r17, r1
    39f4:	10 c0       	rjmp	.+32     	; 0x3a16 <Module::runReport(bool, bool, bool, bool)+0xac>
b:\Gbox420\Gbox420\Gbox420_Mega_Main\build\sketch\src\Components/420Module.cpp:94
    {
      logToSerials(&LongMessage, true, 0);
    39f6:	40 e0       	ldi	r20, 0x00	; 0
    39f8:	61 e0       	ldi	r22, 0x01	; 1
    39fa:	81 e3       	ldi	r24, 0x31	; 49
    39fc:	9e e0       	ldi	r25, 0x0E	; 14
    39fe:	0e 94 71 1c 	call	0x38e2	; 0x38e2 <void logToSerials<char [1024]>(char (*) [1024], bool, unsigned char)>
b:\Gbox420\Gbox420\Gbox420_Mega_Main\build\sketch\src\Components/420Module.cpp:95
      memset(&LongMessage[0], 0, MaxLongTextLength); ///< clear variable
    3a02:	e1 e3       	ldi	r30, 0x31	; 49
    3a04:	fe e0       	ldi	r31, 0x0E	; 14
    3a06:	80 e0       	ldi	r24, 0x00	; 0
    3a08:	94 e0       	ldi	r25, 0x04	; 4
    3a0a:	df 01       	movw	r26, r30
    3a0c:	9c 01       	movw	r18, r24
    3a0e:	1d 92       	st	X+, r1
    3a10:	21 50       	subi	r18, 0x01	; 1
    3a12:	30 40       	sbci	r19, 0x00	; 0
    3a14:	e1 f7       	brne	.-8      	; 0x3a0e <Module::runReport(bool, bool, bool, bool)+0xa4>
    3a16:	6e 01       	movw	r12, r28
    3a18:	34 e1       	ldi	r19, 0x14	; 20
    3a1a:	c3 0e       	add	r12, r19
    3a1c:	d1 1c       	adc	r13, r1
b:\Gbox420\Gbox420\Gbox420_Mega_Main\build\sketch\src\Components/420Module.cpp:65 (discriminator 1)
* @param ClearBuffer Flush the LongMessage buffer before starting to report
* @param KeepBuffer Stores the full JSON report in the LongMessage buffer - Only use this on the Mega2560 where LongMessage is large enough to store a complete report (Can be up to 1024kB)
* @param JSONToBufferOnly Do not print anyting on the serial output, only fll the LongMessage buffer with the JSON report
*/
void Module::runReport(bool ForceRun, bool ClearBuffer, bool KeepBuffer, bool JSONToBufferOnly)
{
    3a1e:	f1 2c       	mov	r15, r1
    3a20:	e1 2c       	mov	r14, r1
b:\Gbox420\Gbox420\Gbox420_Mega_Main\build\sketch\src\Components/420Module.cpp:97 (discriminator 1)
    if (!KeepBuffer)
    {
      logToSerials(&LongMessage, true, 0);
      memset(&LongMessage[0], 0, MaxLongTextLength); ///< clear variable
    }
    for (int i = 0; i < reportQueueItemCount;)
    3a22:	5e 01       	movw	r10, r28
    3a24:	8c ee       	ldi	r24, 0xEC	; 236
    3a26:	a8 1a       	sub	r10, r24
    3a28:	8e ef       	ldi	r24, 0xFE	; 254
    3a2a:	b8 0a       	sbc	r11, r24
b:\Gbox420\Gbox420\Gbox420_Mega_Main\build\sketch\src\Components/420Module.cpp:105 (discriminator 1)
      if (i != reportQueueItemCount)
        strcat_P(LongMessage, (PGM_P)F(",")); ///< < Unless it was the last element add a , separator
      if (!KeepBuffer)
      {
        logToSerials(&LongMessage, true, 0);
        memset(&LongMessage[0], 0, MaxLongTextLength); ///< clear variable
    3a2c:	81 2c       	mov	r8, r1
    3a2e:	84 e0       	ldi	r24, 0x04	; 4
    3a30:	98 2e       	mov	r9, r24
b:\Gbox420\Gbox420\Gbox420_Mega_Main\build\sketch\src\Components/420Module.cpp:97 (discriminator 1)
    if (!KeepBuffer)
    {
      logToSerials(&LongMessage, true, 0);
      memset(&LongMessage[0], 0, MaxLongTextLength); ///< clear variable
    }
    for (int i = 0; i < reportQueueItemCount;)
    3a32:	d5 01       	movw	r26, r10
    3a34:	8c 91       	ld	r24, X
    3a36:	8e 15       	cp	r24, r14
    3a38:	1f 04       	cpc	r1, r15
    3a3a:	a1 f1       	breq	.+104    	; 0x3aa4 <Module::runReport(bool, bool, bool, bool)+0x13a>
    3a3c:	9c f1       	brlt	.+102    	; 0x3aa4 <Module::runReport(bool, bool, bool, bool)+0x13a>
b:\Gbox420\Gbox420\Gbox420_Mega_Main\build\sketch\src\Components/420Module.cpp:99
    {
      ReportQueue[i++]->report(JSONToBufferOnly || KeepBuffer ? false : *SerialReportJSONFriendly);
    3a3e:	bf ef       	ldi	r27, 0xFF	; 255
    3a40:	eb 1a       	sub	r14, r27
    3a42:	fb 0a       	sbc	r15, r27
    3a44:	f6 01       	movw	r30, r12
    3a46:	81 91       	ld	r24, Z+
    3a48:	91 91       	ld	r25, Z+
    3a4a:	6f 01       	movw	r12, r30
    3a4c:	dc 01       	movw	r26, r24
    3a4e:	ed 91       	ld	r30, X+
    3a50:	fc 91       	ld	r31, X
    3a52:	01 90       	ld	r0, Z+
    3a54:	f0 81       	ld	r31, Z
    3a56:	e0 2d       	mov	r30, r0
    3a58:	01 11       	cpse	r16, r1
    3a5a:	22 c0       	rjmp	.+68     	; 0x3aa0 <Module::runReport(bool, bool, bool, bool)+0x136>
b:\Gbox420\Gbox420\Gbox420_Mega_Main\build\sketch\src\Components/420Module.cpp:99 (discriminator 1)
    3a5c:	11 11       	cpse	r17, r1
    3a5e:	20 c0       	rjmp	.+64     	; 0x3aa0 <Module::runReport(bool, bool, bool, bool)+0x136>
b:\Gbox420\Gbox420\Gbox420_Mega_Main\build\sketch\src\Components/420Module.cpp:99 (discriminator 3)
    3a60:	ac 85       	ldd	r26, Y+12	; 0x0c
    3a62:	bd 85       	ldd	r27, Y+13	; 0x0d
    3a64:	6c 91       	ld	r22, X
b:\Gbox420\Gbox420\Gbox420_Mega_Main\build\sketch\src\Components/420Module.cpp:99 (discriminator 8)
    3a66:	19 95       	eicall
b:\Gbox420\Gbox420\Gbox420_Mega_Main\build\sketch\src\Components/420Module.cpp:100 (discriminator 8)
      if (i != reportQueueItemCount)
    3a68:	f5 01       	movw	r30, r10
    3a6a:	80 81       	ld	r24, Z
    3a6c:	8e 15       	cp	r24, r14
    3a6e:	1f 04       	cpc	r1, r15
    3a70:	31 f0       	breq	.+12     	; 0x3a7e <Module::runReport(bool, bool, bool, bool)+0x114>
b:\Gbox420\Gbox420\Gbox420_Mega_Main\build\sketch\src\Components/420Module.cpp:101
        strcat_P(LongMessage, (PGM_P)F(",")); ///< < Unless it was the last element add a , separator
    3a72:	61 e5       	ldi	r22, 0x51	; 81
    3a74:	78 e0       	ldi	r23, 0x08	; 8
    3a76:	81 e3       	ldi	r24, 0x31	; 49
    3a78:	9e e0       	ldi	r25, 0x0E	; 14
    3a7a:	0e 94 da 94 	call	0x129b4	; 0x129b4 <strcat_P>
b:\Gbox420\Gbox420\Gbox420_Mega_Main\build\sketch\src\Components/420Module.cpp:102
      if (!KeepBuffer)
    3a7e:	11 11       	cpse	r17, r1
    3a80:	d8 cf       	rjmp	.-80     	; 0x3a32 <Module::runReport(bool, bool, bool, bool)+0xc8>
b:\Gbox420\Gbox420\Gbox420_Mega_Main\build\sketch\src\Components/420Module.cpp:104
      {
        logToSerials(&LongMessage, true, 0);
    3a82:	40 e0       	ldi	r20, 0x00	; 0
    3a84:	61 e0       	ldi	r22, 0x01	; 1
    3a86:	81 e3       	ldi	r24, 0x31	; 49
    3a88:	9e e0       	ldi	r25, 0x0E	; 14
    3a8a:	0e 94 71 1c 	call	0x38e2	; 0x38e2 <void logToSerials<char [1024]>(char (*) [1024], bool, unsigned char)>
b:\Gbox420\Gbox420\Gbox420_Mega_Main\build\sketch\src\Components/420Module.cpp:105
        memset(&LongMessage[0], 0, MaxLongTextLength); ///< clear variable
    3a8e:	e1 e3       	ldi	r30, 0x31	; 49
    3a90:	fe e0       	ldi	r31, 0x0E	; 14
    3a92:	df 01       	movw	r26, r30
    3a94:	94 01       	movw	r18, r8
    3a96:	1d 92       	st	X+, r1
    3a98:	21 50       	subi	r18, 0x01	; 1
    3a9a:	30 40       	sbci	r19, 0x00	; 0
    3a9c:	e1 f7       	brne	.-8      	; 0x3a96 <Module::runReport(bool, bool, bool, bool)+0x12c>
    3a9e:	c9 cf       	rjmp	.-110    	; 0x3a32 <Module::runReport(bool, bool, bool, bool)+0xc8>
b:\Gbox420\Gbox420\Gbox420_Mega_Main\build\sketch\src\Components/420Module.cpp:99
      logToSerials(&LongMessage, true, 0);
      memset(&LongMessage[0], 0, MaxLongTextLength); ///< clear variable
    }
    for (int i = 0; i < reportQueueItemCount;)
    {
      ReportQueue[i++]->report(JSONToBufferOnly || KeepBuffer ? false : *SerialReportJSONFriendly);
    3aa0:	60 e0       	ldi	r22, 0x00	; 0
    3aa2:	e1 cf       	rjmp	.-62     	; 0x3a66 <Module::runReport(bool, bool, bool, bool)+0xfc>
b:\Gbox420\Gbox420\Gbox420_Mega_Main\build\sketch\src\Components/420Module.cpp:108
      {
        logToSerials(&LongMessage, true, 0);
        memset(&LongMessage[0], 0, MaxLongTextLength); ///< clear variable
      }
    }
    strcat_P(LongMessage, (PGM_P)F("}}")); ///< closing both curly bracket
    3aa4:	6e e4       	ldi	r22, 0x4E	; 78
    3aa6:	78 e0       	ldi	r23, 0x08	; 8
    3aa8:	81 e3       	ldi	r24, 0x31	; 49
    3aaa:	9e e0       	ldi	r25, 0x0E	; 14
    3aac:	0e 94 da 94 	call	0x129b4	; 0x129b4 <strcat_P>
b:\Gbox420\Gbox420\Gbox420_Mega_Main\build\sketch\src\Components/420Module.cpp:109
    if (!JSONToBufferOnly)
    3ab0:	01 11       	cpse	r16, r1
    3ab2:	12 c0       	rjmp	.+36     	; 0x3ad8 <Module::runReport(bool, bool, bool, bool)+0x16e>
b:\Gbox420\Gbox420\Gbox420_Mega_Main\build\sketch\src\Components/420Module.cpp:110
      logToSerials(&LongMessage, true, 0);
    3ab4:	40 e0       	ldi	r20, 0x00	; 0
    3ab6:	61 e0       	ldi	r22, 0x01	; 1
    3ab8:	81 e3       	ldi	r24, 0x31	; 49
    3aba:	9e e0       	ldi	r25, 0x0E	; 14
b:\Gbox420\Gbox420\Gbox420_Mega_Main\build\sketch\src\Components/420Module.cpp:112
  }
}
    3abc:	df 91       	pop	r29
    3abe:	cf 91       	pop	r28
    3ac0:	1f 91       	pop	r17
    3ac2:	0f 91       	pop	r16
    3ac4:	ff 90       	pop	r15
    3ac6:	ef 90       	pop	r14
    3ac8:	df 90       	pop	r13
    3aca:	cf 90       	pop	r12
    3acc:	bf 90       	pop	r11
    3ace:	af 90       	pop	r10
    3ad0:	9f 90       	pop	r9
    3ad2:	8f 90       	pop	r8
b:\Gbox420\Gbox420\Gbox420_Mega_Main\build\sketch\src\Components/420Module.cpp:110
        memset(&LongMessage[0], 0, MaxLongTextLength); ///< clear variable
      }
    }
    strcat_P(LongMessage, (PGM_P)F("}}")); ///< closing both curly bracket
    if (!JSONToBufferOnly)
      logToSerials(&LongMessage, true, 0);
    3ad4:	0c 94 71 1c 	jmp	0x38e2	; 0x38e2 <void logToSerials<char [1024]>(char (*) [1024], bool, unsigned char)>
b:\Gbox420\Gbox420\Gbox420_Mega_Main\build\sketch\src\Components/420Module.cpp:112
  }
}
    3ad8:	df 91       	pop	r29
    3ada:	cf 91       	pop	r28
    3adc:	1f 91       	pop	r17
    3ade:	0f 91       	pop	r16
    3ae0:	ff 90       	pop	r15
    3ae2:	ef 90       	pop	r14
    3ae4:	df 90       	pop	r13
    3ae6:	cf 90       	pop	r12
    3ae8:	bf 90       	pop	r11
    3aea:	af 90       	pop	r10
    3aec:	9f 90       	pop	r9
    3aee:	8f 90       	pop	r8
    3af0:	08 95       	ret

00003af2 <Module::reportToSerialTrigger(bool, bool, bool, bool)>:
_ZN6Module21reportToSerialTriggerEbbbb():
b:\Gbox420\Gbox420\Gbox420_Mega_Main\build\sketch\src\Components/420Module.cpp:37
* @param ClearBuffer Flush the LongMessage buffer before starting to report
* @param KeepBuffer Stores the full JSON report in the LongMessage buffer - Only use this on the Mega2560 where LongMessage is large enough to store a complete report (Can be up to 1024kB)
* @param JSONToBufferOnly Do not print anyting on the serial output, only fll the LongMessage buffer with the JSON report
*/
void Module::reportToSerialTrigger(bool ForceRun, bool ClearBuffer, bool KeepBuffer, bool JSONToBufferOnly)
{
    3af2:	0f 93       	push	r16
    3af4:	cf 93       	push	r28
    3af6:	df 93       	push	r29
    3af8:	fc 01       	movw	r30, r24
    3afa:	36 2f       	mov	r19, r22
b:\Gbox420\Gbox420\Gbox420_Mega_Main\build\sketch\src\Components/420Module.cpp:38
  if ((SerialTriggerCounter++ % (*SerialReportFrequency / 5) == 0) || ForceRun)
    3afc:	c6 81       	ldd	r28, Z+6	; 0x06
    3afe:	d7 81       	ldd	r29, Z+7	; 0x07
    3b00:	ce 01       	movw	r24, r28
    3b02:	01 96       	adiw	r24, 0x01	; 1
    3b04:	97 83       	std	Z+7, r25	; 0x07
    3b06:	86 83       	std	Z+6, r24	; 0x06
    3b08:	a4 81       	ldd	r26, Z+4	; 0x04
    3b0a:	b5 81       	ldd	r27, Z+5	; 0x05
    3b0c:	8d 91       	ld	r24, X+
    3b0e:	9c 91       	ld	r25, X
    3b10:	65 e0       	ldi	r22, 0x05	; 5
    3b12:	70 e0       	ldi	r23, 0x00	; 0
    3b14:	0e 94 c2 91 	call	0x12384	; 0x12384 <__udivmodhi4>
    3b18:	ce 01       	movw	r24, r28
    3b1a:	0e 94 c2 91 	call	0x12384	; 0x12384 <__udivmodhi4>
    3b1e:	89 2b       	or	r24, r25
    3b20:	11 f0       	breq	.+4      	; 0x3b26 <Module::reportToSerialTrigger(bool, bool, bool, bool)+0x34>
b:\Gbox420\Gbox420\Gbox420_Mega_Main\build\sketch\src\Components/420Module.cpp:38 (discriminator 2)
    3b22:	33 23       	and	r19, r19
    3b24:	21 f0       	breq	.+8      	; 0x3b2e <Module::reportToSerialTrigger(bool, bool, bool, bool)+0x3c>
    3b26:	63 2f       	mov	r22, r19
    3b28:	cf 01       	movw	r24, r30
b:\Gbox420\Gbox420\Gbox420_Mega_Main\build\sketch\src\Components/420Module.cpp:40
  {
    runReport(ForceRun, ClearBuffer, KeepBuffer, JSONToBufferOnly);
    3b2a:	0e 94 b5 1c 	call	0x396a	; 0x396a <Module::runReport(bool, bool, bool, bool)>
b:\Gbox420\Gbox420\Gbox420_Mega_Main\build\sketch\src\Components/420Module.cpp:42
  }
}
    3b2e:	df 91       	pop	r29
    3b30:	cf 91       	pop	r28
    3b32:	0f 91       	pop	r16
    3b34:	08 95       	ret

00003b36 <AirPump::AirPump(__FlashStringHelper const*, Module*, Settings::AirPumpSettings*)>:
_ZN7AirPumpC2EPK19__FlashStringHelperP6ModulePN8Settings15AirPumpSettingsE():
b:\Gbox420\Gbox420\Gbox420_Mega_Main\build\sketch\src\Components/AirPump.cpp:66
}

bool AirPump::getState()
{
  return *State;
}
    3b36:	ef 92       	push	r14
    3b38:	ff 92       	push	r15
    3b3a:	0f 93       	push	r16
    3b3c:	1f 93       	push	r17
    3b3e:	cf 93       	push	r28
    3b40:	df 93       	push	r29
    3b42:	ec 01       	movw	r28, r24
    3b44:	79 01       	movw	r14, r18
AirPump():
    3b46:	db 01       	movw	r26, r22
    3b48:	8d 91       	ld	r24, X+
    3b4a:	9c 91       	ld	r25, X
    3b4c:	11 97       	sbiw	r26, 0x01	; 1
    3b4e:	99 83       	std	Y+1, r25	; 0x01
    3b50:	88 83       	st	Y, r24
    3b52:	12 96       	adiw	r26, 0x02	; 2
    3b54:	2d 91       	ld	r18, X+
    3b56:	3c 91       	ld	r19, X
    3b58:	06 97       	sbiw	r24, 0x06	; 6
    3b5a:	dc 01       	movw	r26, r24
    3b5c:	ed 91       	ld	r30, X+
    3b5e:	fc 91       	ld	r31, X
    3b60:	ec 0f       	add	r30, r28
    3b62:	fd 1f       	adc	r31, r29
    3b64:	31 83       	std	Z+1, r19	; 0x01
    3b66:	20 83       	st	Z, r18
    3b68:	fb 82       	std	Y+3, r15	; 0x03
    3b6a:	ea 82       	std	Y+2, r14	; 0x02
    3b6c:	1f 83       	std	Y+7, r17	; 0x07
    3b6e:	0e 83       	std	Y+6, r16	; 0x06
    3b70:	c8 01       	movw	r24, r16
    3b72:	01 96       	adiw	r24, 0x01	; 1
    3b74:	9d 83       	std	Y+5, r25	; 0x05
    3b76:	8c 83       	std	Y+4, r24	; 0x04
    3b78:	61 e0       	ldi	r22, 0x01	; 1
    3b7a:	f8 01       	movw	r30, r16
    3b7c:	80 81       	ld	r24, Z
    3b7e:	0e 94 86 87 	call	0x10f0c	; 0x10f0c <pinMode>
    3b82:	ee 81       	ldd	r30, Y+6	; 0x06
    3b84:	ff 81       	ldd	r31, Y+7	; 0x07
    3b86:	61 e0       	ldi	r22, 0x01	; 1
    3b88:	80 81       	ld	r24, Z
    3b8a:	0e 94 c2 87 	call	0x10f84	; 0x10f84 <digitalWrite>
    3b8e:	e8 81       	ld	r30, Y
    3b90:	f9 81       	ldd	r31, Y+1	; 0x01
    3b92:	36 97       	sbiw	r30, 0x06	; 6
    3b94:	60 81       	ld	r22, Z
    3b96:	71 81       	ldd	r23, Z+1	; 0x01
    3b98:	6c 0f       	add	r22, r28
    3b9a:	7d 1f       	adc	r23, r29
    3b9c:	c7 01       	movw	r24, r14
    3b9e:	0e 94 5b 1b 	call	0x36b6	; 0x36b6 <Module::addToReportQueue(Common*)>
    3ba2:	e8 81       	ld	r30, Y
    3ba4:	f9 81       	ldd	r31, Y+1	; 0x01
    3ba6:	36 97       	sbiw	r30, 0x06	; 6
    3ba8:	60 81       	ld	r22, Z
    3baa:	71 81       	ldd	r23, Z+1	; 0x01
    3bac:	6c 0f       	add	r22, r28
    3bae:	7d 1f       	adc	r23, r29
    3bb0:	c7 01       	movw	r24, r14
    3bb2:	0e 94 a9 1b 	call	0x3752	; 0x3752 <Module::addToRefreshQueue_Minute(Common*)>
    3bb6:	43 e0       	ldi	r20, 0x03	; 3
    3bb8:	61 e0       	ldi	r22, 0x01	; 1
    3bba:	85 e6       	ldi	r24, 0x65	; 101
    3bbc:	98 e0       	ldi	r25, 0x08	; 8
_ZN7AirPumpC2EPK19__FlashStringHelperP6ModulePN8Settings15AirPumpSettingsE():
    3bbe:	df 91       	pop	r29
    3bc0:	cf 91       	pop	r28
    3bc2:	1f 91       	pop	r17
    3bc4:	0f 91       	pop	r16
    3bc6:	ff 90       	pop	r15
    3bc8:	ef 90       	pop	r14
AirPump():
    3bca:	0c 94 85 16 	jmp	0x2d0a	; 0x2d0a <logToSerials(__FlashStringHelper const*, bool, unsigned char)>

00003bce <AirPump::checkStatus()>:
_ZN7AirPump11checkStatusEv():
    3bce:	fc 01       	movw	r30, r24
    3bd0:	a6 81       	ldd	r26, Z+6	; 0x06
    3bd2:	b7 81       	ldd	r27, Z+7	; 0x07
    3bd4:	8c 91       	ld	r24, X
    3bd6:	04 80       	ldd	r0, Z+4	; 0x04
    3bd8:	f5 81       	ldd	r31, Z+5	; 0x05
    3bda:	e0 2d       	mov	r30, r0
    3bdc:	90 81       	ld	r25, Z
    3bde:	60 e0       	ldi	r22, 0x00	; 0
    3be0:	91 11       	cpse	r25, r1
    3be2:	01 c0       	rjmp	.+2      	; 0x3be6 <AirPump::checkStatus()+0x18>
    3be4:	61 e0       	ldi	r22, 0x01	; 1
    3be6:	0c 94 c2 87 	jmp	0x10f84	; 0x10f84 <digitalWrite>

00003bea <AirPump::setState(bool)>:
_ZN7AirPump8setStateEb():
    3bea:	cf 92       	push	r12
    3bec:	df 92       	push	r13
    3bee:	ef 92       	push	r14
    3bf0:	ff 92       	push	r15
    3bf2:	0f 93       	push	r16
    3bf4:	1f 93       	push	r17
    3bf6:	cf 93       	push	r28
    3bf8:	df 93       	push	r29
    3bfa:	ec 01       	movw	r28, r24
    3bfc:	ec 81       	ldd	r30, Y+4	; 0x04
    3bfe:	fd 81       	ldd	r31, Y+5	; 0x05
    3c00:	60 83       	st	Z, r22
    3c02:	0e 94 e7 1d 	call	0x3bce	; 0x3bce <AirPump::checkStatus()>
    3c06:	8a 81       	ldd	r24, Y+2	; 0x02
    3c08:	9b 81       	ldd	r25, Y+3	; 0x03
    3c0a:	0e 94 57 1b 	call	0x36ae	; 0x36ae <Module::getSoundObject()>
    3c0e:	ec 81       	ldd	r30, Y+4	; 0x04
    3c10:	fd 81       	ldd	r31, Y+5	; 0x05
    3c12:	60 81       	ld	r22, Z
    3c14:	0e 94 c7 2a 	call	0x558e	; 0x558e <Sound::playOnOffSound(bool)>
    3c18:	ca 80       	ldd	r12, Y+2	; 0x02
    3c1a:	db 80       	ldd	r13, Y+3	; 0x03
    3c1c:	d6 01       	movw	r26, r12
    3c1e:	ed 91       	ld	r30, X+
    3c20:	fc 91       	ld	r31, X
    3c22:	e2 80       	ldd	r14, Z+2	; 0x02
    3c24:	f3 80       	ldd	r15, Z+3	; 0x03
    3c26:	e8 81       	ld	r30, Y
    3c28:	f9 81       	ldd	r31, Y+1	; 0x01
    3c2a:	36 97       	sbiw	r30, 0x06	; 6
    3c2c:	00 81       	ld	r16, Z
    3c2e:	11 81       	ldd	r17, Z+1	; 0x01
    3c30:	0c 0f       	add	r16, r28
    3c32:	1d 1f       	adc	r17, r29
_ZN7AirPump12getStateTextEb():
    3c34:	ec 81       	ldd	r30, Y+4	; 0x04
    3c36:	fd 81       	ldd	r31, Y+5	; 0x05
    3c38:	80 81       	ld	r24, Z
    3c3a:	0e 94 f6 34 	call	0x69ec	; 0x69ec <toText_onOff(bool)>
_ZN7AirPump8setStateEb():
    3c3e:	40 e0       	ldi	r20, 0x00	; 0
    3c40:	bc 01       	movw	r22, r24
    3c42:	c8 01       	movw	r24, r16
    3c44:	0e 94 9f 19 	call	0x333e	; 0x333e <Common::getName(char*, bool)>
    3c48:	43 e0       	ldi	r20, 0x03	; 3
    3c4a:	bc 01       	movw	r22, r24
    3c4c:	c6 01       	movw	r24, r12
    3c4e:	f7 01       	movw	r30, r14
    3c50:	df 91       	pop	r29
    3c52:	cf 91       	pop	r28
    3c54:	1f 91       	pop	r17
    3c56:	0f 91       	pop	r16
    3c58:	ff 90       	pop	r15
    3c5a:	ef 90       	pop	r14
    3c5c:	df 90       	pop	r13
    3c5e:	cf 90       	pop	r12
    3c60:	19 94       	eijmp

00003c62 <AirPump::TurnOff()>:
_ZN7AirPump7TurnOffEv():
    3c62:	cf 93       	push	r28
    3c64:	df 93       	push	r29
    3c66:	ec 01       	movw	r28, r24
    3c68:	60 e0       	ldi	r22, 0x00	; 0
    3c6a:	0e 94 f5 1d 	call	0x3bea	; 0x3bea <AirPump::setState(bool)>
    3c6e:	ce 01       	movw	r24, r28
    3c70:	df 91       	pop	r29
    3c72:	cf 91       	pop	r28
    3c74:	0c 94 e7 1d 	jmp	0x3bce	; 0x3bce <AirPump::checkStatus()>

00003c78 <AirPump::TurnOn()>:
_ZN7AirPump6TurnOnEv():
    3c78:	cf 93       	push	r28
    3c7a:	df 93       	push	r29
    3c7c:	ec 01       	movw	r28, r24
    3c7e:	61 e0       	ldi	r22, 0x01	; 1
    3c80:	0e 94 f5 1d 	call	0x3bea	; 0x3bea <AirPump::setState(bool)>
    3c84:	ce 01       	movw	r24, r28
    3c86:	df 91       	pop	r29
    3c88:	cf 91       	pop	r28
    3c8a:	0c 94 e7 1d 	jmp	0x3bce	; 0x3bce <AirPump::checkStatus()>

00003c8e <AirPump::getStateText(bool)>:
_ZN7AirPump12getStateTextEb():
b:\Gbox420\Gbox420\Gbox420_Mega_Main\build\sketch\src\Components/AirPump.cpp:69

char *AirPump::getStateText(bool FriendlyFormat)
{
    3c8e:	dc 01       	movw	r26, r24
    3c90:	14 96       	adiw	r26, 0x04	; 4
    3c92:	ed 91       	ld	r30, X+
    3c94:	fc 91       	ld	r31, X
    3c96:	80 81       	ld	r24, Z
b:\Gbox420\Gbox420\Gbox420_Mega_Main\build\sketch\src\Components/AirPump.cpp:70
  if (FriendlyFormat)
    3c98:	61 11       	cpse	r22, r1
b:\Gbox420\Gbox420\Gbox420_Mega_Main\build\sketch\src\Components/AirPump.cpp:72
  {
    return toText_onOff(*State);
    3c9a:	0c 94 f6 34 	jmp	0x69ec	; 0x69ec <toText_onOff(bool)>
b:\Gbox420\Gbox420\Gbox420_Mega_Main\build\sketch\src\Components/AirPump.cpp:76
  }
  else
  {
    return toText(*State);
    3c9e:	90 e0       	ldi	r25, 0x00	; 0
    3ca0:	0c 94 95 33 	jmp	0x672a	; 0x672a <toText(int)>

00003ca4 <AirPump::report(bool)>:
_ZN7AirPump6reportEb():
b:\Gbox420\Gbox420\Gbox420_Mega_Main\build\sketch\src\Components/AirPump.cpp:22

/**
* @brief Report current state in a JSON format to the LongMessage buffer
*/
void AirPump::report(bool FriendlyFormat)
{
    3ca4:	1f 93       	push	r17
    3ca6:	cf 93       	push	r28
    3ca8:	df 93       	push	r29
    3caa:	ec 01       	movw	r28, r24
    3cac:	16 2f       	mov	r17, r22
b:\Gbox420\Gbox420\Gbox420_Mega_Main\build\sketch\src\Components/AirPump.cpp:23
  Common::report(true); ///< Appends "NAME":{  to the LongMessage buffer. The curly bracket { needs to be closed at the end
    3cae:	e8 81       	ld	r30, Y
    3cb0:	f9 81       	ldd	r31, Y+1	; 0x01
    3cb2:	36 97       	sbiw	r30, 0x06	; 6
    3cb4:	80 81       	ld	r24, Z
    3cb6:	91 81       	ldd	r25, Z+1	; 0x01
    3cb8:	61 e0       	ldi	r22, 0x01	; 1
    3cba:	8c 0f       	add	r24, r28
    3cbc:	9d 1f       	adc	r25, r29
    3cbe:	0e 94 0e 19 	call	0x321c	; 0x321c <Common::report(bool)>
b:\Gbox420\Gbox420\Gbox420_Mega_Main\build\sketch\src\Components/AirPump.cpp:24
  strcat_P(LongMessage, (PGM_P)F("\"S\":\""));
    3cc2:	6f e5       	ldi	r22, 0x5F	; 95
    3cc4:	78 e0       	ldi	r23, 0x08	; 8
    3cc6:	81 e3       	ldi	r24, 0x31	; 49
    3cc8:	9e e0       	ldi	r25, 0x0E	; 14
    3cca:	0e 94 da 94 	call	0x129b4	; 0x129b4 <strcat_P>
b:\Gbox420\Gbox420\Gbox420_Mega_Main\build\sketch\src\Components/AirPump.cpp:25
  strcat(LongMessage, getStateText(FriendlyFormat));
    3cce:	61 2f       	mov	r22, r17
    3cd0:	ce 01       	movw	r24, r28
    3cd2:	0e 94 47 1e 	call	0x3c8e	; 0x3c8e <AirPump::getStateText(bool)>
    3cd6:	bc 01       	movw	r22, r24
    3cd8:	81 e3       	ldi	r24, 0x31	; 49
    3cda:	9e e0       	ldi	r25, 0x0E	; 14
    3cdc:	0e 94 23 95 	call	0x12a46	; 0x12a46 <strcat>
b:\Gbox420\Gbox420\Gbox420_Mega_Main\build\sketch\src\Components/AirPump.cpp:26
  strcat_P(LongMessage, (PGM_P)F("\"}")); ///< closing the curly bracket at the end of the JSON
    3ce0:	6c e5       	ldi	r22, 0x5C	; 92
    3ce2:	78 e0       	ldi	r23, 0x08	; 8
    3ce4:	81 e3       	ldi	r24, 0x31	; 49
    3ce6:	9e e0       	ldi	r25, 0x0E	; 14
b:\Gbox420\Gbox420\Gbox420_Mega_Main\build\sketch\src\Components/AirPump.cpp:27
}
    3ce8:	df 91       	pop	r29
    3cea:	cf 91       	pop	r28
    3cec:	1f 91       	pop	r17
b:\Gbox420\Gbox420\Gbox420_Mega_Main\build\sketch\src\Components/AirPump.cpp:26
void AirPump::report(bool FriendlyFormat)
{
  Common::report(true); ///< Appends "NAME":{  to the LongMessage buffer. The curly bracket { needs to be closed at the end
  strcat_P(LongMessage, (PGM_P)F("\"S\":\""));
  strcat(LongMessage, getStateText(FriendlyFormat));
  strcat_P(LongMessage, (PGM_P)F("\"}")); ///< closing the curly bracket at the end of the JSON
    3cee:	0c 94 da 94 	jmp	0x129b4	; 0x129b4 <strcat_P>

00003cf2 <virtual thunk to AirPump::report(bool)>:
_ZTv0_n6_N7AirPump6reportEb():
    3cf2:	dc 01       	movw	r26, r24
    3cf4:	ed 91       	ld	r30, X+
    3cf6:	fc 91       	ld	r31, X
    3cf8:	36 97       	sbiw	r30, 0x06	; 6
    3cfa:	20 81       	ld	r18, Z
    3cfc:	31 81       	ldd	r19, Z+1	; 0x01
    3cfe:	82 0f       	add	r24, r18
    3d00:	93 1f       	adc	r25, r19
    3d02:	0c 94 52 1e 	jmp	0x3ca4	; 0x3ca4 <AirPump::report(bool)>

00003d06 <AirPump::refresh_Minute()>:
_ZN7AirPump14refresh_MinuteEv():
b:\Gbox420\Gbox420\Gbox420_Mega_Main\build\sketch\src\Components/AirPump.cpp:30
}

void AirPump::refresh_Minute()
{
    3d06:	cf 93       	push	r28
    3d08:	df 93       	push	r29
    3d0a:	ec 01       	movw	r28, r24
b:\Gbox420\Gbox420\Gbox420_Mega_Main\build\sketch\src\Components/AirPump.cpp:31
  Common::refresh_Minute();
    3d0c:	e8 81       	ld	r30, Y
    3d0e:	f9 81       	ldd	r31, Y+1	; 0x01
    3d10:	36 97       	sbiw	r30, 0x06	; 6
    3d12:	80 81       	ld	r24, Z
    3d14:	91 81       	ldd	r25, Z+1	; 0x01
    3d16:	8c 0f       	add	r24, r28
    3d18:	9d 1f       	adc	r25, r29
    3d1a:	0e 94 e2 18 	call	0x31c4	; 0x31c4 <Common::refresh_Minute()>
b:\Gbox420\Gbox420\Gbox420_Mega_Main\build\sketch\src\Components/AirPump.cpp:32
  checkStatus();
    3d1e:	ce 01       	movw	r24, r28
b:\Gbox420\Gbox420\Gbox420_Mega_Main\build\sketch\src\Components/AirPump.cpp:33
}
    3d20:	df 91       	pop	r29
    3d22:	cf 91       	pop	r28
b:\Gbox420\Gbox420\Gbox420_Mega_Main\build\sketch\src\Components/AirPump.cpp:32
}

void AirPump::refresh_Minute()
{
  Common::refresh_Minute();
  checkStatus();
    3d24:	0c 94 e7 1d 	jmp	0x3bce	; 0x3bce <AirPump::checkStatus()>

00003d28 <virtual thunk to AirPump::refresh_Minute()>:
_ZTv0_n12_N7AirPump14refresh_MinuteEv():
    3d28:	dc 01       	movw	r26, r24
    3d2a:	ed 91       	ld	r30, X+
    3d2c:	fc 91       	ld	r31, X
    3d2e:	3c 97       	sbiw	r30, 0x0c	; 12
    3d30:	20 81       	ld	r18, Z
    3d32:	31 81       	ldd	r19, Z+1	; 0x01
    3d34:	82 0f       	add	r24, r18
    3d36:	93 1f       	adc	r25, r19
    3d38:	0c 94 83 1e 	jmp	0x3d06	; 0x3d06 <AirPump::refresh_Minute()>

00003d3c <DHTSensor::DHTSensor(__FlashStringHelper const*, Module*, Settings::DHTSensorSettings*)>:
_ZN9DHTSensorC2EPK19__FlashStringHelperP6ModulePN8Settings17DHTSensorSettingsE():
b:\Gbox420\Gbox420\Gbox420_Mega_Main\build\sketch\src\Components/DHTSensor.cpp:64
}

float DHTSensor::getHumidity()
{
  return Humidity;
}
    3d3c:	cf 92       	push	r12
    3d3e:	df 92       	push	r13
    3d40:	ef 92       	push	r14
    3d42:	ff 92       	push	r15
    3d44:	0f 93       	push	r16
    3d46:	1f 93       	push	r17
    3d48:	cf 93       	push	r28
    3d4a:	df 93       	push	r29
    3d4c:	ec 01       	movw	r28, r24
    3d4e:	79 01       	movw	r14, r18
DHTSensor():
    3d50:	db 01       	movw	r26, r22
    3d52:	8d 91       	ld	r24, X+
    3d54:	9c 91       	ld	r25, X
    3d56:	11 97       	sbiw	r26, 0x01	; 1
    3d58:	99 83       	std	Y+1, r25	; 0x01
    3d5a:	88 83       	st	Y, r24
    3d5c:	12 96       	adiw	r26, 0x02	; 2
    3d5e:	2d 91       	ld	r18, X+
    3d60:	3c 91       	ld	r19, X
    3d62:	06 97       	sbiw	r24, 0x06	; 6
    3d64:	dc 01       	movw	r26, r24
    3d66:	ed 91       	ld	r30, X+
    3d68:	fc 91       	ld	r31, X
    3d6a:	ec 0f       	add	r30, r28
    3d6c:	fd 1f       	adc	r31, r29
    3d6e:	31 83       	std	Z+1, r19	; 0x01
    3d70:	20 83       	st	Z, r18
    3d72:	1a 82       	std	Y+2, r1	; 0x02
    3d74:	1b 82       	std	Y+3, r1	; 0x03
    3d76:	1c 82       	std	Y+4, r1	; 0x04
    3d78:	1d 82       	std	Y+5, r1	; 0x05
    3d7a:	1e 82       	std	Y+6, r1	; 0x06
    3d7c:	1f 82       	std	Y+7, r1	; 0x07
    3d7e:	18 86       	std	Y+8, r1	; 0x08
    3d80:	19 86       	std	Y+9, r1	; 0x09
    3d82:	fb 86       	std	Y+11, r15	; 0x0b
    3d84:	ea 86       	std	Y+10, r14	; 0x0a
    3d86:	83 e1       	ldi	r24, 0x13	; 19
    3d88:	90 e0       	ldi	r25, 0x00	; 0
    3d8a:	0e 94 6d 8f 	call	0x11eda	; 0x11eda <operator new(unsigned int)>
    3d8e:	6c 01       	movw	r12, r24
    3d90:	26 e0       	ldi	r18, 0x06	; 6
    3d92:	f8 01       	movw	r30, r16
    3d94:	41 81       	ldd	r20, Z+1	; 0x01
    3d96:	60 81       	ld	r22, Z
    3d98:	0e 94 e7 7d 	call	0xfbce	; 0xfbce <DHT::DHT(unsigned char, unsigned char, unsigned char)>
    3d9c:	dd 86       	std	Y+13, r13	; 0x0d
    3d9e:	cc 86       	std	Y+12, r12	; 0x0c
    3da0:	67 e3       	ldi	r22, 0x37	; 55
    3da2:	c6 01       	movw	r24, r12
    3da4:	0e 94 08 7e 	call	0xfc10	; 0xfc10 <DHT::begin(unsigned char)>
    3da8:	e8 81       	ld	r30, Y
    3daa:	f9 81       	ldd	r31, Y+1	; 0x01
    3dac:	36 97       	sbiw	r30, 0x06	; 6
    3dae:	60 81       	ld	r22, Z
    3db0:	71 81       	ldd	r23, Z+1	; 0x01
    3db2:	6c 0f       	add	r22, r28
    3db4:	7d 1f       	adc	r23, r29
    3db6:	c7 01       	movw	r24, r14
    3db8:	0e 94 5b 1b 	call	0x36b6	; 0x36b6 <Module::addToReportQueue(Common*)>
    3dbc:	e8 81       	ld	r30, Y
    3dbe:	f9 81       	ldd	r31, Y+1	; 0x01
    3dc0:	36 97       	sbiw	r30, 0x06	; 6
    3dc2:	60 81       	ld	r22, Z
    3dc4:	71 81       	ldd	r23, Z+1	; 0x01
    3dc6:	6c 0f       	add	r22, r28
    3dc8:	7d 1f       	adc	r23, r29
    3dca:	c7 01       	movw	r24, r14
    3dcc:	0e 94 8f 1b 	call	0x371e	; 0x371e <Module::addToRefreshQueue_FiveSec(Common*)>
    3dd0:	43 e0       	ldi	r20, 0x03	; 3
    3dd2:	61 e0       	ldi	r22, 0x01	; 1
    3dd4:	84 e8       	ldi	r24, 0x84	; 132
    3dd6:	98 e0       	ldi	r25, 0x08	; 8
_ZN9DHTSensorC2EPK19__FlashStringHelperP6ModulePN8Settings17DHTSensorSettingsE():
    3dd8:	df 91       	pop	r29
    3dda:	cf 91       	pop	r28
    3ddc:	1f 91       	pop	r17
    3dde:	0f 91       	pop	r16
    3de0:	ff 90       	pop	r15
    3de2:	ef 90       	pop	r14
    3de4:	df 90       	pop	r13
    3de6:	cf 90       	pop	r12
DHTSensor():
    3de8:	0c 94 85 16 	jmp	0x2d0a	; 0x2d0a <logToSerials(__FlashStringHelper const*, bool, unsigned char)>

00003dec <DHTSensor::readSensor()>:
_ZN9DHTSensor10readSensorEv():
    3dec:	cf 93       	push	r28
    3dee:	df 93       	push	r29
    3df0:	ec 01       	movw	r28, r24
    3df2:	8c 85       	ldd	r24, Y+12	; 0x0c
    3df4:	9d 85       	ldd	r25, Y+13	; 0x0d
    3df6:	e0 91 b5 0c 	lds	r30, 0x0CB5	; 0x800cb5 <Metric>
    3dfa:	f0 91 b6 0c 	lds	r31, 0x0CB6	; 0x800cb6 <Metric+0x1>
    3dfe:	20 81       	ld	r18, Z
    3e00:	40 e0       	ldi	r20, 0x00	; 0
    3e02:	60 e0       	ldi	r22, 0x00	; 0
    3e04:	22 23       	and	r18, r18
    3e06:	91 f0       	breq	.+36     	; 0x3e2c <DHTSensor::readSensor()+0x40>
    3e08:	0e 94 5a 7f 	call	0xfeb4	; 0xfeb4 <DHT::readTemperature(bool, bool)>
    3e0c:	6a 83       	std	Y+2, r22	; 0x02
    3e0e:	7b 83       	std	Y+3, r23	; 0x03
    3e10:	8c 83       	std	Y+4, r24	; 0x04
    3e12:	9d 83       	std	Y+5, r25	; 0x05
    3e14:	60 e0       	ldi	r22, 0x00	; 0
    3e16:	8c 85       	ldd	r24, Y+12	; 0x0c
    3e18:	9d 85       	ldd	r25, Y+13	; 0x0d
    3e1a:	0e 94 ea 7f 	call	0xffd4	; 0xffd4 <DHT::readHumidity(bool)>
    3e1e:	6e 83       	std	Y+6, r22	; 0x06
    3e20:	7f 83       	std	Y+7, r23	; 0x07
    3e22:	88 87       	std	Y+8, r24	; 0x08
    3e24:	99 87       	std	Y+9, r25	; 0x09
    3e26:	df 91       	pop	r29
    3e28:	cf 91       	pop	r28
    3e2a:	08 95       	ret
    3e2c:	0e 94 5a 7f 	call	0xfeb4	; 0xfeb4 <DHT::readTemperature(bool, bool)>
    3e30:	26 e6       	ldi	r18, 0x66	; 102
    3e32:	36 e6       	ldi	r19, 0x66	; 102
    3e34:	46 ee       	ldi	r20, 0xE6	; 230
    3e36:	5f e3       	ldi	r21, 0x3F	; 63
    3e38:	0e 94 40 91 	call	0x12280	; 0x12280 <__mulsf3>
    3e3c:	20 e0       	ldi	r18, 0x00	; 0
    3e3e:	30 e0       	ldi	r19, 0x00	; 0
    3e40:	40 e0       	ldi	r20, 0x00	; 0
    3e42:	52 e4       	ldi	r21, 0x42	; 66
    3e44:	0e 94 70 8f 	call	0x11ee0	; 0x11ee0 <__addsf3>
    3e48:	e1 cf       	rjmp	.-62     	; 0x3e0c <DHTSensor::readSensor()+0x20>

00003e4a <DHTSensor::getTempText(bool)>:
_ZN9DHTSensor11getTempTextEb():
    3e4a:	26 2f       	mov	r18, r22
    3e4c:	fc 01       	movw	r30, r24
    3e4e:	62 81       	ldd	r22, Z+2	; 0x02
    3e50:	73 81       	ldd	r23, Z+3	; 0x03
    3e52:	84 81       	ldd	r24, Z+4	; 0x04
    3e54:	95 81       	ldd	r25, Z+5	; 0x05
    3e56:	21 11       	cpse	r18, r1
    3e58:	0c 94 52 34 	jmp	0x68a4	; 0x68a4 <toText_temp(float)>
    3e5c:	0c 94 a5 33 	jmp	0x674a	; 0x674a <toText(float)>

00003e60 <DHTSensor::getHumidityText(bool)>:
_ZN9DHTSensor15getHumidityTextEb():
b:\Gbox420\Gbox420\Gbox420_Mega_Main\build\sketch\src\Components/DHTSensor.cpp:67

char *DHTSensor::getHumidityText(bool FriendlyFormat)
{
    3e60:	26 2f       	mov	r18, r22
    3e62:	fc 01       	movw	r30, r24
    3e64:	66 81       	ldd	r22, Z+6	; 0x06
    3e66:	77 81       	ldd	r23, Z+7	; 0x07
    3e68:	80 85       	ldd	r24, Z+8	; 0x08
    3e6a:	91 85       	ldd	r25, Z+9	; 0x09
b:\Gbox420\Gbox420\Gbox420_Mega_Main\build\sketch\src\Components/DHTSensor.cpp:68
  if (FriendlyFormat)
    3e6c:	21 11       	cpse	r18, r1
b:\Gbox420\Gbox420\Gbox420_Mega_Main\build\sketch\src\Components/DHTSensor.cpp:69
    return toText_percentage(Humidity);
    3e6e:	0c 94 ac 34 	jmp	0x6958	; 0x6958 <toText_percentage(float)>
b:\Gbox420\Gbox420\Gbox420_Mega_Main\build\sketch\src\Components/DHTSensor.cpp:71
  else
    return toText(Humidity);
    3e72:	0c 94 a5 33 	jmp	0x674a	; 0x674a <toText(float)>

00003e76 <DHTSensor::report(bool)>:
_ZN9DHTSensor6reportEb():
b:\Gbox420\Gbox420\Gbox420_Mega_Main\build\sketch\src\Components/DHTSensor.cpp:20

/**
* @brief Report current state in a JSON format to the LongMessage buffer
*/
void DHTSensor::report(bool FriendlyFormat)
{
    3e76:	1f 93       	push	r17
    3e78:	cf 93       	push	r28
    3e7a:	df 93       	push	r29
    3e7c:	ec 01       	movw	r28, r24
    3e7e:	16 2f       	mov	r17, r22
b:\Gbox420\Gbox420\Gbox420_Mega_Main\build\sketch\src\Components/DHTSensor.cpp:21
  Common::report(FriendlyFormat); //< Load the objects name to the LongMessage buffer a the beginning of a JSON :  "Name":{
    3e80:	e8 81       	ld	r30, Y
    3e82:	f9 81       	ldd	r31, Y+1	; 0x01
    3e84:	36 97       	sbiw	r30, 0x06	; 6
    3e86:	80 81       	ld	r24, Z
    3e88:	91 81       	ldd	r25, Z+1	; 0x01
    3e8a:	8c 0f       	add	r24, r28
    3e8c:	9d 1f       	adc	r25, r29
    3e8e:	0e 94 0e 19 	call	0x321c	; 0x321c <Common::report(bool)>
b:\Gbox420\Gbox420\Gbox420_Mega_Main\build\sketch\src\Components/DHTSensor.cpp:22
  strcat_P(LongMessage, (PGM_P)F("\"T\":\""));
    3e92:	6e e7       	ldi	r22, 0x7E	; 126
    3e94:	78 e0       	ldi	r23, 0x08	; 8
    3e96:	81 e3       	ldi	r24, 0x31	; 49
    3e98:	9e e0       	ldi	r25, 0x0E	; 14
    3e9a:	0e 94 da 94 	call	0x129b4	; 0x129b4 <strcat_P>
b:\Gbox420\Gbox420\Gbox420_Mega_Main\build\sketch\src\Components/DHTSensor.cpp:23
  strcat(LongMessage, getTempText(FriendlyFormat));
    3e9e:	61 2f       	mov	r22, r17
    3ea0:	ce 01       	movw	r24, r28
    3ea2:	0e 94 25 1f 	call	0x3e4a	; 0x3e4a <DHTSensor::getTempText(bool)>
    3ea6:	bc 01       	movw	r22, r24
    3ea8:	81 e3       	ldi	r24, 0x31	; 49
    3eaa:	9e e0       	ldi	r25, 0x0E	; 14
    3eac:	0e 94 23 95 	call	0x12a46	; 0x12a46 <strcat>
b:\Gbox420\Gbox420\Gbox420_Mega_Main\build\sketch\src\Components/DHTSensor.cpp:24
  strcat_P(LongMessage, (PGM_P)F("\",\"H\":\""));
    3eb0:	66 e7       	ldi	r22, 0x76	; 118
    3eb2:	78 e0       	ldi	r23, 0x08	; 8
    3eb4:	81 e3       	ldi	r24, 0x31	; 49
    3eb6:	9e e0       	ldi	r25, 0x0E	; 14
    3eb8:	0e 94 da 94 	call	0x129b4	; 0x129b4 <strcat_P>
b:\Gbox420\Gbox420\Gbox420_Mega_Main\build\sketch\src\Components/DHTSensor.cpp:25
  strcat(LongMessage, getHumidityText(FriendlyFormat));
    3ebc:	61 2f       	mov	r22, r17
    3ebe:	ce 01       	movw	r24, r28
    3ec0:	0e 94 30 1f 	call	0x3e60	; 0x3e60 <DHTSensor::getHumidityText(bool)>
    3ec4:	bc 01       	movw	r22, r24
    3ec6:	81 e3       	ldi	r24, 0x31	; 49
    3ec8:	9e e0       	ldi	r25, 0x0E	; 14
    3eca:	0e 94 23 95 	call	0x12a46	; 0x12a46 <strcat>
b:\Gbox420\Gbox420\Gbox420_Mega_Main\build\sketch\src\Components/DHTSensor.cpp:26
  strcat_P(LongMessage, (PGM_P)F("\"}")); ///< closing the curly bracket at the end of the JSON
    3ece:	63 e7       	ldi	r22, 0x73	; 115
    3ed0:	78 e0       	ldi	r23, 0x08	; 8
    3ed2:	81 e3       	ldi	r24, 0x31	; 49
    3ed4:	9e e0       	ldi	r25, 0x0E	; 14
b:\Gbox420\Gbox420\Gbox420_Mega_Main\build\sketch\src\Components/DHTSensor.cpp:27
}
    3ed6:	df 91       	pop	r29
    3ed8:	cf 91       	pop	r28
    3eda:	1f 91       	pop	r17
b:\Gbox420\Gbox420\Gbox420_Mega_Main\build\sketch\src\Components/DHTSensor.cpp:26
  Common::report(FriendlyFormat); //< Load the objects name to the LongMessage buffer a the beginning of a JSON :  "Name":{
  strcat_P(LongMessage, (PGM_P)F("\"T\":\""));
  strcat(LongMessage, getTempText(FriendlyFormat));
  strcat_P(LongMessage, (PGM_P)F("\",\"H\":\""));
  strcat(LongMessage, getHumidityText(FriendlyFormat));
  strcat_P(LongMessage, (PGM_P)F("\"}")); ///< closing the curly bracket at the end of the JSON
    3edc:	0c 94 da 94 	jmp	0x129b4	; 0x129b4 <strcat_P>

00003ee0 <virtual thunk to DHTSensor::report(bool)>:
_ZTv0_n6_N9DHTSensor6reportEb():
    3ee0:	dc 01       	movw	r26, r24
    3ee2:	ed 91       	ld	r30, X+
    3ee4:	fc 91       	ld	r31, X
    3ee6:	36 97       	sbiw	r30, 0x06	; 6
    3ee8:	20 81       	ld	r18, Z
    3eea:	31 81       	ldd	r19, Z+1	; 0x01
    3eec:	82 0f       	add	r24, r18
    3eee:	93 1f       	adc	r25, r19
    3ef0:	0c 94 3b 1f 	jmp	0x3e76	; 0x3e76 <DHTSensor::report(bool)>

00003ef4 <DHTSensor::refresh_FiveSec()>:
_ZN9DHTSensor15refresh_FiveSecEv():
b:\Gbox420\Gbox420\Gbox420_Mega_Main\build\sketch\src\Components/DHTSensor.cpp:30
}

void DHTSensor::refresh_FiveSec()
{
    3ef4:	cf 93       	push	r28
    3ef6:	df 93       	push	r29
    3ef8:	ec 01       	movw	r28, r24
b:\Gbox420\Gbox420\Gbox420_Mega_Main\build\sketch\src\Components/DHTSensor.cpp:31
  Common::refresh_FiveSec();
    3efa:	e8 81       	ld	r30, Y
    3efc:	f9 81       	ldd	r31, Y+1	; 0x01
    3efe:	36 97       	sbiw	r30, 0x06	; 6
    3f00:	80 81       	ld	r24, Z
    3f02:	91 81       	ldd	r25, Z+1	; 0x01
    3f04:	8c 0f       	add	r24, r28
    3f06:	9d 1f       	adc	r25, r29
    3f08:	0e 94 cd 18 	call	0x319a	; 0x319a <Common::refresh_FiveSec()>
b:\Gbox420\Gbox420\Gbox420_Mega_Main\build\sketch\src\Components/DHTSensor.cpp:32
  readSensor();
    3f0c:	ce 01       	movw	r24, r28
b:\Gbox420\Gbox420\Gbox420_Mega_Main\build\sketch\src\Components/DHTSensor.cpp:33
}
    3f0e:	df 91       	pop	r29
    3f10:	cf 91       	pop	r28
b:\Gbox420\Gbox420\Gbox420_Mega_Main\build\sketch\src\Components/DHTSensor.cpp:32
}

void DHTSensor::refresh_FiveSec()
{
  Common::refresh_FiveSec();
  readSensor();
    3f12:	0c 94 f6 1e 	jmp	0x3dec	; 0x3dec <DHTSensor::readSensor()>

00003f16 <virtual thunk to DHTSensor::refresh_FiveSec()>:
_ZTv0_n10_N9DHTSensor15refresh_FiveSecEv():
    3f16:	dc 01       	movw	r26, r24
    3f18:	ed 91       	ld	r30, X+
    3f1a:	fc 91       	ld	r31, X
    3f1c:	3a 97       	sbiw	r30, 0x0a	; 10
    3f1e:	20 81       	ld	r18, Z
    3f20:	31 81       	ldd	r19, Z+1	; 0x01
    3f22:	82 0f       	add	r24, r18
    3f24:	93 1f       	adc	r25, r19
    3f26:	0c 94 7a 1f 	jmp	0x3ef4	; 0x3ef4 <DHTSensor::refresh_FiveSec()>

00003f2a <Fan::Fan(__FlashStringHelper const*, Module*, Settings::FanSettings*)>:
_ZN3FanC2EPK19__FlashStringHelperP6ModulePN8Settings11FanSettingsE():
b:\Gbox420\Gbox420\Gbox420_Mega_Main\build\sketch\src\Components/Fan.cpp:86
    return 0;
  else if (*HighSpeed)
    return 2;
  else
    return 1;
}
    3f2a:	ef 92       	push	r14
    3f2c:	ff 92       	push	r15
    3f2e:	0f 93       	push	r16
    3f30:	1f 93       	push	r17
    3f32:	cf 93       	push	r28
    3f34:	df 93       	push	r29
    3f36:	ec 01       	movw	r28, r24
    3f38:	79 01       	movw	r14, r18
Fan():
    3f3a:	db 01       	movw	r26, r22
    3f3c:	8d 91       	ld	r24, X+
    3f3e:	9c 91       	ld	r25, X
    3f40:	11 97       	sbiw	r26, 0x01	; 1
    3f42:	99 83       	std	Y+1, r25	; 0x01
    3f44:	88 83       	st	Y, r24
    3f46:	12 96       	adiw	r26, 0x02	; 2
    3f48:	2d 91       	ld	r18, X+
    3f4a:	3c 91       	ld	r19, X
    3f4c:	06 97       	sbiw	r24, 0x06	; 6
    3f4e:	dc 01       	movw	r26, r24
    3f50:	ed 91       	ld	r30, X+
    3f52:	fc 91       	ld	r31, X
    3f54:	ec 0f       	add	r30, r28
    3f56:	fd 1f       	adc	r31, r29
    3f58:	31 83       	std	Z+1, r19	; 0x01
    3f5a:	20 83       	st	Z, r18
    3f5c:	fb 82       	std	Y+3, r15	; 0x03
    3f5e:	ea 82       	std	Y+2, r14	; 0x02
    3f60:	19 87       	std	Y+9, r17	; 0x09
    3f62:	08 87       	std	Y+8, r16	; 0x08
    3f64:	c8 01       	movw	r24, r16
    3f66:	01 96       	adiw	r24, 0x01	; 1
    3f68:	9b 87       	std	Y+11, r25	; 0x0b
    3f6a:	8a 87       	std	Y+10, r24	; 0x0a
    3f6c:	01 96       	adiw	r24, 0x01	; 1
    3f6e:	9d 83       	std	Y+5, r25	; 0x05
    3f70:	8c 83       	std	Y+4, r24	; 0x04
    3f72:	01 96       	adiw	r24, 0x01	; 1
    3f74:	9f 83       	std	Y+7, r25	; 0x07
    3f76:	8e 83       	std	Y+6, r24	; 0x06
    3f78:	61 e0       	ldi	r22, 0x01	; 1
    3f7a:	f8 01       	movw	r30, r16
    3f7c:	80 81       	ld	r24, Z
    3f7e:	0e 94 86 87 	call	0x10f0c	; 0x10f0c <pinMode>
    3f82:	e8 85       	ldd	r30, Y+8	; 0x08
    3f84:	f9 85       	ldd	r31, Y+9	; 0x09
    3f86:	61 e0       	ldi	r22, 0x01	; 1
    3f88:	80 81       	ld	r24, Z
    3f8a:	0e 94 c2 87 	call	0x10f84	; 0x10f84 <digitalWrite>
    3f8e:	ea 85       	ldd	r30, Y+10	; 0x0a
    3f90:	fb 85       	ldd	r31, Y+11	; 0x0b
    3f92:	61 e0       	ldi	r22, 0x01	; 1
    3f94:	80 81       	ld	r24, Z
    3f96:	0e 94 86 87 	call	0x10f0c	; 0x10f0c <pinMode>
    3f9a:	ea 85       	ldd	r30, Y+10	; 0x0a
    3f9c:	fb 85       	ldd	r31, Y+11	; 0x0b
    3f9e:	61 e0       	ldi	r22, 0x01	; 1
    3fa0:	80 81       	ld	r24, Z
    3fa2:	0e 94 c2 87 	call	0x10f84	; 0x10f84 <digitalWrite>
    3fa6:	e8 81       	ld	r30, Y
    3fa8:	f9 81       	ldd	r31, Y+1	; 0x01
    3faa:	36 97       	sbiw	r30, 0x06	; 6
    3fac:	60 81       	ld	r22, Z
    3fae:	71 81       	ldd	r23, Z+1	; 0x01
    3fb0:	6c 0f       	add	r22, r28
    3fb2:	7d 1f       	adc	r23, r29
    3fb4:	c7 01       	movw	r24, r14
    3fb6:	0e 94 5b 1b 	call	0x36b6	; 0x36b6 <Module::addToReportQueue(Common*)>
    3fba:	e8 81       	ld	r30, Y
    3fbc:	f9 81       	ldd	r31, Y+1	; 0x01
    3fbe:	36 97       	sbiw	r30, 0x06	; 6
    3fc0:	60 81       	ld	r22, Z
    3fc2:	71 81       	ldd	r23, Z+1	; 0x01
    3fc4:	6c 0f       	add	r22, r28
    3fc6:	7d 1f       	adc	r23, r29
    3fc8:	c7 01       	movw	r24, r14
    3fca:	0e 94 a9 1b 	call	0x3752	; 0x3752 <Module::addToRefreshQueue_Minute(Common*)>
    3fce:	43 e0       	ldi	r20, 0x03	; 3
    3fd0:	61 e0       	ldi	r22, 0x01	; 1
    3fd2:	8d e9       	ldi	r24, 0x9D	; 157
    3fd4:	98 e0       	ldi	r25, 0x08	; 8
_ZN3FanC2EPK19__FlashStringHelperP6ModulePN8Settings11FanSettingsE():
    3fd6:	df 91       	pop	r29
    3fd8:	cf 91       	pop	r28
    3fda:	1f 91       	pop	r17
    3fdc:	0f 91       	pop	r16
    3fde:	ff 90       	pop	r15
    3fe0:	ef 90       	pop	r14
Fan():
    3fe2:	0c 94 85 16 	jmp	0x2d0a	; 0x2d0a <logToSerials(__FlashStringHelper const*, bool, unsigned char)>

00003fe6 <Fan::checkFanStatus()>:
_ZN3Fan14checkFanStatusEv():
    3fe6:	cf 93       	push	r28
    3fe8:	df 93       	push	r29
    3fea:	ec 01       	movw	r28, r24
    3fec:	e8 85       	ldd	r30, Y+8	; 0x08
    3fee:	f9 85       	ldd	r31, Y+9	; 0x09
    3ff0:	80 81       	ld	r24, Z
    3ff2:	ec 81       	ldd	r30, Y+4	; 0x04
    3ff4:	fd 81       	ldd	r31, Y+5	; 0x05
    3ff6:	90 81       	ld	r25, Z
    3ff8:	60 e0       	ldi	r22, 0x00	; 0
    3ffa:	91 11       	cpse	r25, r1
    3ffc:	01 c0       	rjmp	.+2      	; 0x4000 <Fan::checkFanStatus()+0x1a>
    3ffe:	61 e0       	ldi	r22, 0x01	; 1
    4000:	0e 94 c2 87 	call	0x10f84	; 0x10f84 <digitalWrite>
    4004:	ea 85       	ldd	r30, Y+10	; 0x0a
    4006:	fb 85       	ldd	r31, Y+11	; 0x0b
    4008:	80 81       	ld	r24, Z
    400a:	ee 81       	ldd	r30, Y+6	; 0x06
    400c:	ff 81       	ldd	r31, Y+7	; 0x07
    400e:	90 81       	ld	r25, Z
    4010:	60 e0       	ldi	r22, 0x00	; 0
    4012:	91 11       	cpse	r25, r1
    4014:	01 c0       	rjmp	.+2      	; 0x4018 <Fan::checkFanStatus()+0x32>
    4016:	61 e0       	ldi	r22, 0x01	; 1
    4018:	df 91       	pop	r29
    401a:	cf 91       	pop	r28
    401c:	0c 94 c2 87 	jmp	0x10f84	; 0x10f84 <digitalWrite>

00004020 <Fan::fanSpeedText(bool)>:
_ZN3Fan12fanSpeedTextEb():
b:\Gbox420\Gbox420\Gbox420_Mega_Main\build\sketch\src\Components/Fan.cpp:89

char *Fan::fanSpeedText(bool FriendlyFormat)
{
    4020:	fc 01       	movw	r30, r24
    4022:	a4 81       	ldd	r26, Z+4	; 0x04
    4024:	b5 81       	ldd	r27, Z+5	; 0x05
    4026:	8c 91       	ld	r24, X
b:\Gbox420\Gbox420\Gbox420_Mega_Main\build\sketch\src\Components/Fan.cpp:90
  if (FriendlyFormat)
    4028:	66 23       	and	r22, r22
    402a:	59 f0       	breq	.+22     	; 0x4042 <Fan::fanSpeedText(bool)+0x22>
b:\Gbox420\Gbox420\Gbox420_Mega_Main\build\sketch\src\Components/Fan.cpp:92
  {
    if (!*State)
    402c:	88 23       	and	r24, r24
    402e:	a1 f0       	breq	.+40     	; 0x4058 <Fan::fanSpeedText(bool)+0x38>
b:\Gbox420\Gbox420\Gbox420_Mega_Main\build\sketch\src\Components/Fan.cpp:94
      return (char *)"OFF";
    else if (*HighSpeed)
    4030:	06 80       	ldd	r0, Z+6	; 0x06
    4032:	f7 81       	ldd	r31, Z+7	; 0x07
    4034:	e0 2d       	mov	r30, r0
    4036:	80 81       	ld	r24, Z
    4038:	88 23       	and	r24, r24
    403a:	89 f0       	breq	.+34     	; 0x405e <Fan::fanSpeedText(bool)+0x3e>
b:\Gbox420\Gbox420\Gbox420_Mega_Main\build\sketch\src\Components/Fan.cpp:95
      return (char *)"HIGH";
    403c:	81 e9       	ldi	r24, 0x91	; 145
    403e:	94 e0       	ldi	r25, 0x04	; 4
    4040:	08 95       	ret
b:\Gbox420\Gbox420\Gbox420_Mega_Main\build\sketch\src\Components/Fan.cpp:101
    else
      return (char *)"LOW";
  }
  else
  {
    if (!*State)
    4042:	88 23       	and	r24, r24
    4044:	79 f0       	breq	.+30     	; 0x4064 <Fan::fanSpeedText(bool)+0x44>
b:\Gbox420\Gbox420\Gbox420_Mega_Main\build\sketch\src\Components/Fan.cpp:103
      return (char *)"0";
    else if (*HighSpeed)
    4046:	06 80       	ldd	r0, Z+6	; 0x06
    4048:	f7 81       	ldd	r31, Z+7	; 0x07
    404a:	e0 2d       	mov	r30, r0
    404c:	80 81       	ld	r24, Z
    404e:	88 23       	and	r24, r24
    4050:	61 f0       	breq	.+24     	; 0x406a <Fan::fanSpeedText(bool)+0x4a>
b:\Gbox420\Gbox420\Gbox420_Mega_Main\build\sketch\src\Components/Fan.cpp:104
      return (char *)"2";
    4052:	8f e8       	ldi	r24, 0x8F	; 143
    4054:	94 e0       	ldi	r25, 0x04	; 4
    4056:	08 95       	ret
b:\Gbox420\Gbox420\Gbox420_Mega_Main\build\sketch\src\Components/Fan.cpp:93
char *Fan::fanSpeedText(bool FriendlyFormat)
{
  if (FriendlyFormat)
  {
    if (!*State)
      return (char *)"OFF";
    4058:	83 e8       	ldi	r24, 0x83	; 131
    405a:	94 e0       	ldi	r25, 0x04	; 4
    405c:	08 95       	ret
b:\Gbox420\Gbox420\Gbox420_Mega_Main\build\sketch\src\Components/Fan.cpp:97
    else if (*HighSpeed)
      return (char *)"HIGH";
    else
      return (char *)"LOW";
    405e:	89 e8       	ldi	r24, 0x89	; 137
    4060:	94 e0       	ldi	r25, 0x04	; 4
    4062:	08 95       	ret
b:\Gbox420\Gbox420\Gbox420_Mega_Main\build\sketch\src\Components/Fan.cpp:102
  }
  else
  {
    if (!*State)
      return (char *)"0";
    4064:	8d e8       	ldi	r24, 0x8D	; 141
    4066:	94 e0       	ldi	r25, 0x04	; 4
    4068:	08 95       	ret
b:\Gbox420\Gbox420\Gbox420_Mega_Main\build\sketch\src\Components/Fan.cpp:106
    else if (*HighSpeed)
      return (char *)"2";
    else
      return (char *)"1";
    406a:	87 e8       	ldi	r24, 0x87	; 135
    406c:	94 e0       	ldi	r25, 0x04	; 4
b:\Gbox420\Gbox420\Gbox420_Mega_Main\build\sketch\src\Components/Fan.cpp:108
  }
}
    406e:	08 95       	ret

00004070 <Fan::TurnOff()>:
_ZN3Fan7TurnOffEv():
b:\Gbox420\Gbox420\Gbox420_Mega_Main\build\sketch\src\Components/Fan.cpp:52
  else
    digitalWrite(*SpeedPin, HIGH);
}

void Fan::TurnOff()
{
    4070:	cf 92       	push	r12
    4072:	df 92       	push	r13
    4074:	ef 92       	push	r14
    4076:	ff 92       	push	r15
    4078:	0f 93       	push	r16
    407a:	1f 93       	push	r17
    407c:	cf 93       	push	r28
    407e:	df 93       	push	r29
    4080:	ec 01       	movw	r28, r24
b:\Gbox420\Gbox420\Gbox420_Mega_Main\build\sketch\src\Components/Fan.cpp:53
  *State = false;
    4082:	ec 81       	ldd	r30, Y+4	; 0x04
    4084:	fd 81       	ldd	r31, Y+5	; 0x05
    4086:	10 82       	st	Z, r1
b:\Gbox420\Gbox420\Gbox420_Mega_Main\build\sketch\src\Components/Fan.cpp:54
  *HighSpeed = false;
    4088:	ee 81       	ldd	r30, Y+6	; 0x06
    408a:	ff 81       	ldd	r31, Y+7	; 0x07
    408c:	10 82       	st	Z, r1
b:\Gbox420\Gbox420\Gbox420_Mega_Main\build\sketch\src\Components/Fan.cpp:55
  checkFanStatus();
    408e:	0e 94 f3 1f 	call	0x3fe6	; 0x3fe6 <Fan::checkFanStatus()>
b:\Gbox420\Gbox420\Gbox420_Mega_Main\build\sketch\src\Components/Fan.cpp:56
  Parent->addToLog(getName(fanSpeedText(true)));
    4092:	ca 80       	ldd	r12, Y+2	; 0x02
    4094:	db 80       	ldd	r13, Y+3	; 0x03
    4096:	d6 01       	movw	r26, r12
    4098:	ed 91       	ld	r30, X+
    409a:	fc 91       	ld	r31, X
    409c:	e2 80       	ldd	r14, Z+2	; 0x02
    409e:	f3 80       	ldd	r15, Z+3	; 0x03
    40a0:	e8 81       	ld	r30, Y
    40a2:	f9 81       	ldd	r31, Y+1	; 0x01
    40a4:	36 97       	sbiw	r30, 0x06	; 6
    40a6:	00 81       	ld	r16, Z
    40a8:	11 81       	ldd	r17, Z+1	; 0x01
    40aa:	0c 0f       	add	r16, r28
    40ac:	1d 1f       	adc	r17, r29
    40ae:	61 e0       	ldi	r22, 0x01	; 1
    40b0:	ce 01       	movw	r24, r28
    40b2:	0e 94 10 20 	call	0x4020	; 0x4020 <Fan::fanSpeedText(bool)>
    40b6:	40 e0       	ldi	r20, 0x00	; 0
    40b8:	bc 01       	movw	r22, r24
    40ba:	c8 01       	movw	r24, r16
    40bc:	0e 94 9f 19 	call	0x333e	; 0x333e <Common::getName(char*, bool)>
    40c0:	43 e0       	ldi	r20, 0x03	; 3
    40c2:	bc 01       	movw	r22, r24
    40c4:	c6 01       	movw	r24, r12
    40c6:	f7 01       	movw	r30, r14
    40c8:	19 95       	eicall
b:\Gbox420\Gbox420\Gbox420_Mega_Main\build\sketch\src\Components/Fan.cpp:57
  Parent->getSoundObject()->playOffSound();
    40ca:	8a 81       	ldd	r24, Y+2	; 0x02
    40cc:	9b 81       	ldd	r25, Y+3	; 0x03
    40ce:	0e 94 57 1b 	call	0x36ae	; 0x36ae <Module::getSoundObject()>
b:\Gbox420\Gbox420\Gbox420_Mega_Main\build\sketch\src\Components/Fan.cpp:58
}
    40d2:	df 91       	pop	r29
    40d4:	cf 91       	pop	r28
    40d6:	1f 91       	pop	r17
    40d8:	0f 91       	pop	r16
    40da:	ff 90       	pop	r15
    40dc:	ef 90       	pop	r14
    40de:	df 90       	pop	r13
    40e0:	cf 90       	pop	r12
b:\Gbox420\Gbox420\Gbox420_Mega_Main\build\sketch\src\Components/Fan.cpp:57
{
  *State = false;
  *HighSpeed = false;
  checkFanStatus();
  Parent->addToLog(getName(fanSpeedText(true)));
  Parent->getSoundObject()->playOffSound();
    40e2:	0c 94 d3 2a 	jmp	0x55a6	; 0x55a6 <Sound::playOffSound()>

000040e6 <Fan::SetLowSpeed()>:
_ZN3Fan11SetLowSpeedEv():
b:\Gbox420\Gbox420\Gbox420_Mega_Main\build\sketch\src\Components/Fan.cpp:61
}

void Fan::SetLowSpeed()
{
    40e6:	cf 92       	push	r12
    40e8:	df 92       	push	r13
    40ea:	ef 92       	push	r14
    40ec:	ff 92       	push	r15
    40ee:	0f 93       	push	r16
    40f0:	1f 93       	push	r17
    40f2:	cf 93       	push	r28
    40f4:	df 93       	push	r29
    40f6:	ec 01       	movw	r28, r24
b:\Gbox420\Gbox420\Gbox420_Mega_Main\build\sketch\src\Components/Fan.cpp:62
  *State = true;
    40f8:	ec 81       	ldd	r30, Y+4	; 0x04
    40fa:	fd 81       	ldd	r31, Y+5	; 0x05
    40fc:	81 e0       	ldi	r24, 0x01	; 1
    40fe:	80 83       	st	Z, r24
b:\Gbox420\Gbox420\Gbox420_Mega_Main\build\sketch\src\Components/Fan.cpp:63
  *HighSpeed = false;
    4100:	ee 81       	ldd	r30, Y+6	; 0x06
    4102:	ff 81       	ldd	r31, Y+7	; 0x07
    4104:	10 82       	st	Z, r1
b:\Gbox420\Gbox420\Gbox420_Mega_Main\build\sketch\src\Components/Fan.cpp:64
  checkFanStatus();
    4106:	ce 01       	movw	r24, r28
    4108:	0e 94 f3 1f 	call	0x3fe6	; 0x3fe6 <Fan::checkFanStatus()>
b:\Gbox420\Gbox420\Gbox420_Mega_Main\build\sketch\src\Components/Fan.cpp:65
  Parent->addToLog(getName(fanSpeedText(true)));
    410c:	ca 80       	ldd	r12, Y+2	; 0x02
    410e:	db 80       	ldd	r13, Y+3	; 0x03
    4110:	d6 01       	movw	r26, r12
    4112:	ed 91       	ld	r30, X+
    4114:	fc 91       	ld	r31, X
    4116:	e2 80       	ldd	r14, Z+2	; 0x02
    4118:	f3 80       	ldd	r15, Z+3	; 0x03
    411a:	e8 81       	ld	r30, Y
    411c:	f9 81       	ldd	r31, Y+1	; 0x01
    411e:	36 97       	sbiw	r30, 0x06	; 6
    4120:	00 81       	ld	r16, Z
    4122:	11 81       	ldd	r17, Z+1	; 0x01
    4124:	0c 0f       	add	r16, r28
    4126:	1d 1f       	adc	r17, r29
    4128:	61 e0       	ldi	r22, 0x01	; 1
    412a:	ce 01       	movw	r24, r28
    412c:	0e 94 10 20 	call	0x4020	; 0x4020 <Fan::fanSpeedText(bool)>
    4130:	40 e0       	ldi	r20, 0x00	; 0
    4132:	bc 01       	movw	r22, r24
    4134:	c8 01       	movw	r24, r16
    4136:	0e 94 9f 19 	call	0x333e	; 0x333e <Common::getName(char*, bool)>
    413a:	43 e0       	ldi	r20, 0x03	; 3
    413c:	bc 01       	movw	r22, r24
    413e:	c6 01       	movw	r24, r12
    4140:	f7 01       	movw	r30, r14
    4142:	19 95       	eicall
b:\Gbox420\Gbox420\Gbox420_Mega_Main\build\sketch\src\Components/Fan.cpp:66
  Parent->getSoundObject()->playOnSound();
    4144:	8a 81       	ldd	r24, Y+2	; 0x02
    4146:	9b 81       	ldd	r25, Y+3	; 0x03
    4148:	0e 94 57 1b 	call	0x36ae	; 0x36ae <Module::getSoundObject()>
b:\Gbox420\Gbox420\Gbox420_Mega_Main\build\sketch\src\Components/Fan.cpp:67
}
    414c:	df 91       	pop	r29
    414e:	cf 91       	pop	r28
    4150:	1f 91       	pop	r17
    4152:	0f 91       	pop	r16
    4154:	ff 90       	pop	r15
    4156:	ef 90       	pop	r14
    4158:	df 90       	pop	r13
    415a:	cf 90       	pop	r12
b:\Gbox420\Gbox420\Gbox420_Mega_Main\build\sketch\src\Components/Fan.cpp:66
{
  *State = true;
  *HighSpeed = false;
  checkFanStatus();
  Parent->addToLog(getName(fanSpeedText(true)));
  Parent->getSoundObject()->playOnSound();
    415c:	0c 94 cf 2a 	jmp	0x559e	; 0x559e <Sound::playOnSound()>

00004160 <Fan::SetHighSpeed()>:
_ZN3Fan12SetHighSpeedEv():
b:\Gbox420\Gbox420\Gbox420_Mega_Main\build\sketch\src\Components/Fan.cpp:70
}

void Fan::SetHighSpeed()
{
    4160:	cf 92       	push	r12
    4162:	df 92       	push	r13
    4164:	ef 92       	push	r14
    4166:	ff 92       	push	r15
    4168:	0f 93       	push	r16
    416a:	1f 93       	push	r17
    416c:	cf 93       	push	r28
    416e:	df 93       	push	r29
    4170:	ec 01       	movw	r28, r24
b:\Gbox420\Gbox420\Gbox420_Mega_Main\build\sketch\src\Components/Fan.cpp:71
  *State = true;
    4172:	ec 81       	ldd	r30, Y+4	; 0x04
    4174:	fd 81       	ldd	r31, Y+5	; 0x05
    4176:	81 e0       	ldi	r24, 0x01	; 1
    4178:	80 83       	st	Z, r24
b:\Gbox420\Gbox420\Gbox420_Mega_Main\build\sketch\src\Components/Fan.cpp:72
  *HighSpeed = true;
    417a:	ee 81       	ldd	r30, Y+6	; 0x06
    417c:	ff 81       	ldd	r31, Y+7	; 0x07
    417e:	80 83       	st	Z, r24
b:\Gbox420\Gbox420\Gbox420_Mega_Main\build\sketch\src\Components/Fan.cpp:73
  checkFanStatus();
    4180:	ce 01       	movw	r24, r28
    4182:	0e 94 f3 1f 	call	0x3fe6	; 0x3fe6 <Fan::checkFanStatus()>
b:\Gbox420\Gbox420\Gbox420_Mega_Main\build\sketch\src\Components/Fan.cpp:74
  Parent->addToLog(getName(fanSpeedText(true)));
    4186:	ca 80       	ldd	r12, Y+2	; 0x02
    4188:	db 80       	ldd	r13, Y+3	; 0x03
    418a:	d6 01       	movw	r26, r12
    418c:	ed 91       	ld	r30, X+
    418e:	fc 91       	ld	r31, X
    4190:	e2 80       	ldd	r14, Z+2	; 0x02
    4192:	f3 80       	ldd	r15, Z+3	; 0x03
    4194:	e8 81       	ld	r30, Y
    4196:	f9 81       	ldd	r31, Y+1	; 0x01
    4198:	36 97       	sbiw	r30, 0x06	; 6
    419a:	00 81       	ld	r16, Z
    419c:	11 81       	ldd	r17, Z+1	; 0x01
    419e:	0c 0f       	add	r16, r28
    41a0:	1d 1f       	adc	r17, r29
    41a2:	61 e0       	ldi	r22, 0x01	; 1
    41a4:	ce 01       	movw	r24, r28
    41a6:	0e 94 10 20 	call	0x4020	; 0x4020 <Fan::fanSpeedText(bool)>
    41aa:	40 e0       	ldi	r20, 0x00	; 0
    41ac:	bc 01       	movw	r22, r24
    41ae:	c8 01       	movw	r24, r16
    41b0:	0e 94 9f 19 	call	0x333e	; 0x333e <Common::getName(char*, bool)>
    41b4:	43 e0       	ldi	r20, 0x03	; 3
    41b6:	bc 01       	movw	r22, r24
    41b8:	c6 01       	movw	r24, r12
    41ba:	f7 01       	movw	r30, r14
    41bc:	19 95       	eicall
b:\Gbox420\Gbox420\Gbox420_Mega_Main\build\sketch\src\Components/Fan.cpp:75
  Parent->getSoundObject()->playOnSound();
    41be:	8a 81       	ldd	r24, Y+2	; 0x02
    41c0:	9b 81       	ldd	r25, Y+3	; 0x03
    41c2:	0e 94 57 1b 	call	0x36ae	; 0x36ae <Module::getSoundObject()>
b:\Gbox420\Gbox420\Gbox420_Mega_Main\build\sketch\src\Components/Fan.cpp:76
}
    41c6:	df 91       	pop	r29
    41c8:	cf 91       	pop	r28
    41ca:	1f 91       	pop	r17
    41cc:	0f 91       	pop	r16
    41ce:	ff 90       	pop	r15
    41d0:	ef 90       	pop	r14
    41d2:	df 90       	pop	r13
    41d4:	cf 90       	pop	r12
b:\Gbox420\Gbox420\Gbox420_Mega_Main\build\sketch\src\Components/Fan.cpp:75
{
  *State = true;
  *HighSpeed = true;
  checkFanStatus();
  Parent->addToLog(getName(fanSpeedText(true)));
  Parent->getSoundObject()->playOnSound();
    41d6:	0c 94 cf 2a 	jmp	0x559e	; 0x559e <Sound::playOnSound()>

000041da <Fan::refresh_Minute()>:
_ZN3Fan14refresh_MinuteEv():
b:\Gbox420\Gbox420\Gbox420_Mega_Main\build\sketch\src\Components/Fan.cpp:23
  Parent->addToRefreshQueue_Minute(this);
  logToSerials(F("Fan ready"), true, 3);
}

void Fan::refresh_Minute()
{
    41da:	cf 93       	push	r28
    41dc:	df 93       	push	r29
    41de:	ec 01       	movw	r28, r24
b:\Gbox420\Gbox420\Gbox420_Mega_Main\build\sketch\src\Components/Fan.cpp:24
  Common::refresh_Minute();
    41e0:	e8 81       	ld	r30, Y
    41e2:	f9 81       	ldd	r31, Y+1	; 0x01
    41e4:	36 97       	sbiw	r30, 0x06	; 6
    41e6:	80 81       	ld	r24, Z
    41e8:	91 81       	ldd	r25, Z+1	; 0x01
    41ea:	8c 0f       	add	r24, r28
    41ec:	9d 1f       	adc	r25, r29
    41ee:	0e 94 e2 18 	call	0x31c4	; 0x31c4 <Common::refresh_Minute()>
b:\Gbox420\Gbox420\Gbox420_Mega_Main\build\sketch\src\Components/Fan.cpp:25
  checkFanStatus();
    41f2:	ce 01       	movw	r24, r28
b:\Gbox420\Gbox420\Gbox420_Mega_Main\build\sketch\src\Components/Fan.cpp:26
}
    41f4:	df 91       	pop	r29
    41f6:	cf 91       	pop	r28
b:\Gbox420\Gbox420\Gbox420_Mega_Main\build\sketch\src\Components/Fan.cpp:25
}

void Fan::refresh_Minute()
{
  Common::refresh_Minute();
  checkFanStatus();
    41f8:	0c 94 f3 1f 	jmp	0x3fe6	; 0x3fe6 <Fan::checkFanStatus()>

000041fc <virtual thunk to Fan::refresh_Minute()>:
_ZTv0_n12_N3Fan14refresh_MinuteEv():
    41fc:	dc 01       	movw	r26, r24
    41fe:	ed 91       	ld	r30, X+
    4200:	fc 91       	ld	r31, X
    4202:	3c 97       	sbiw	r30, 0x0c	; 12
    4204:	20 81       	ld	r18, Z
    4206:	31 81       	ldd	r19, Z+1	; 0x01
    4208:	82 0f       	add	r24, r18
    420a:	93 1f       	adc	r25, r19
    420c:	0c 94 ed 20 	jmp	0x41da	; 0x41da <Fan::refresh_Minute()>

00004210 <Fan::report(bool)>:
_ZN3Fan6reportEb():
b:\Gbox420\Gbox420\Gbox420_Mega_Main\build\sketch\src\Components/Fan.cpp:32

/**
* @brief Report current state in a JSON format to the LongMessage buffer
*/
void Fan::report(bool FriendlyFormat)
{
    4210:	1f 93       	push	r17
    4212:	cf 93       	push	r28
    4214:	df 93       	push	r29
    4216:	ec 01       	movw	r28, r24
    4218:	16 2f       	mov	r17, r22
b:\Gbox420\Gbox420\Gbox420_Mega_Main\build\sketch\src\Components/Fan.cpp:33
  Common::report(true); ///< Adds "NAME":{  to the LongMessage buffer. The curly bracket { needs to be closed at the end
    421a:	e8 81       	ld	r30, Y
    421c:	f9 81       	ldd	r31, Y+1	; 0x01
    421e:	36 97       	sbiw	r30, 0x06	; 6
    4220:	80 81       	ld	r24, Z
    4222:	91 81       	ldd	r25, Z+1	; 0x01
    4224:	61 e0       	ldi	r22, 0x01	; 1
    4226:	8c 0f       	add	r24, r28
    4228:	9d 1f       	adc	r25, r29
    422a:	0e 94 0e 19 	call	0x321c	; 0x321c <Common::report(bool)>
b:\Gbox420\Gbox420\Gbox420_Mega_Main\build\sketch\src\Components/Fan.cpp:34
  strcat_P(LongMessage, (PGM_P)F("\"S\":\""));
    422e:	67 e9       	ldi	r22, 0x97	; 151
    4230:	78 e0       	ldi	r23, 0x08	; 8
    4232:	81 e3       	ldi	r24, 0x31	; 49
    4234:	9e e0       	ldi	r25, 0x0E	; 14
    4236:	0e 94 da 94 	call	0x129b4	; 0x129b4 <strcat_P>
b:\Gbox420\Gbox420\Gbox420_Mega_Main\build\sketch\src\Components/Fan.cpp:35
  strcat(LongMessage, fanSpeedText(FriendlyFormat));
    423a:	61 2f       	mov	r22, r17
    423c:	ce 01       	movw	r24, r28
    423e:	0e 94 10 20 	call	0x4020	; 0x4020 <Fan::fanSpeedText(bool)>
    4242:	bc 01       	movw	r22, r24
    4244:	81 e3       	ldi	r24, 0x31	; 49
    4246:	9e e0       	ldi	r25, 0x0E	; 14
    4248:	0e 94 23 95 	call	0x12a46	; 0x12a46 <strcat>
b:\Gbox420\Gbox420\Gbox420_Mega_Main\build\sketch\src\Components/Fan.cpp:36
  strcat_P(LongMessage, (PGM_P)F("\"}")); ///< closing the curly bracket at the end of the JSON
    424c:	64 e9       	ldi	r22, 0x94	; 148
    424e:	78 e0       	ldi	r23, 0x08	; 8
    4250:	81 e3       	ldi	r24, 0x31	; 49
    4252:	9e e0       	ldi	r25, 0x0E	; 14
b:\Gbox420\Gbox420\Gbox420_Mega_Main\build\sketch\src\Components/Fan.cpp:37
}
    4254:	df 91       	pop	r29
    4256:	cf 91       	pop	r28
    4258:	1f 91       	pop	r17
b:\Gbox420\Gbox420\Gbox420_Mega_Main\build\sketch\src\Components/Fan.cpp:36
void Fan::report(bool FriendlyFormat)
{
  Common::report(true); ///< Adds "NAME":{  to the LongMessage buffer. The curly bracket { needs to be closed at the end
  strcat_P(LongMessage, (PGM_P)F("\"S\":\""));
  strcat(LongMessage, fanSpeedText(FriendlyFormat));
  strcat_P(LongMessage, (PGM_P)F("\"}")); ///< closing the curly bracket at the end of the JSON
    425a:	0c 94 da 94 	jmp	0x129b4	; 0x129b4 <strcat_P>

0000425e <virtual thunk to Fan::report(bool)>:
_ZTv0_n6_N3Fan6reportEb():
    425e:	dc 01       	movw	r26, r24
    4260:	ed 91       	ld	r30, X+
    4262:	fc 91       	ld	r31, X
    4264:	36 97       	sbiw	r30, 0x06	; 6
    4266:	20 81       	ld	r18, Z
    4268:	31 81       	ldd	r19, Z+1	; 0x01
    426a:	82 0f       	add	r24, r18
    426c:	93 1f       	adc	r25, r19
    426e:	0c 94 08 21 	jmp	0x4210	; 0x4210 <Fan::report(bool)>

00004272 <LightSensor::LightSensor(__FlashStringHelper const*, Module*, Settings::LightSensorSettings*, Lights*)>:
_ZN11LightSensorC2EPK19__FlashStringHelperP6ModulePN8Settings19LightSensorSettingsEP6Lights():
b:\Gbox420\Gbox420\Gbox420_Mega_Main\build\sketch\src\Components/LightSensor.cpp:92
}

int LightSensor::getReading() ///< Gets the average light sensor reading, if passed false as a parameter it returns the latest reading, not the average
{
  return LightReading;
}
    4272:	cf 92       	push	r12
    4274:	df 92       	push	r13
    4276:	ef 92       	push	r14
    4278:	ff 92       	push	r15
    427a:	0f 93       	push	r16
    427c:	1f 93       	push	r17
    427e:	cf 93       	push	r28
    4280:	df 93       	push	r29
    4282:	ec 01       	movw	r28, r24
    4284:	69 01       	movw	r12, r18
LightSensor():
    4286:	db 01       	movw	r26, r22
    4288:	8d 91       	ld	r24, X+
    428a:	9c 91       	ld	r25, X
    428c:	11 97       	sbiw	r26, 0x01	; 1
    428e:	99 83       	std	Y+1, r25	; 0x01
    4290:	88 83       	st	Y, r24
    4292:	12 96       	adiw	r26, 0x02	; 2
    4294:	2d 91       	ld	r18, X+
    4296:	3c 91       	ld	r19, X
    4298:	06 97       	sbiw	r24, 0x06	; 6
    429a:	dc 01       	movw	r26, r24
    429c:	ed 91       	ld	r30, X+
    429e:	fc 91       	ld	r31, X
    42a0:	ec 0f       	add	r30, r28
    42a2:	fd 1f       	adc	r31, r29
    42a4:	31 83       	std	Z+1, r19	; 0x01
    42a6:	20 83       	st	Z, r18
    42a8:	19 86       	std	Y+9, r1	; 0x09
    42aa:	18 86       	std	Y+8, r1	; 0x08
    42ac:	1b 86       	std	Y+11, r1	; 0x0b
    42ae:	1d 86       	std	Y+13, r1	; 0x0d
    42b0:	1c 86       	std	Y+12, r1	; 0x0c
    42b2:	1f 86       	std	Y+15, r1	; 0x0f
    42b4:	1e 86       	std	Y+14, r1	; 0x0e
    42b6:	19 8a       	std	Y+17, r1	; 0x11
    42b8:	18 8a       	std	Y+16, r1	; 0x10
    42ba:	db a6       	std	Y+43, r13	; 0x2b
    42bc:	ca a6       	std	Y+42, r12	; 0x2a
    42be:	fb 82       	std	Y+3, r15	; 0x03
    42c0:	ea 82       	std	Y+2, r14	; 0x02
    42c2:	1d 83       	std	Y+5, r17	; 0x05
    42c4:	0c 83       	std	Y+4, r16	; 0x04
    42c6:	c8 01       	movw	r24, r16
    42c8:	01 96       	adiw	r24, 0x01	; 1
    42ca:	9f 83       	std	Y+7, r25	; 0x07
    42cc:	8e 83       	std	Y+6, r24	; 0x06
    42ce:	60 e0       	ldi	r22, 0x00	; 0
    42d0:	f8 01       	movw	r30, r16
    42d2:	80 81       	ld	r24, Z
    42d4:	0e 94 86 87 	call	0x10f0c	; 0x10f0c <pinMode>
    42d8:	ee 81       	ldd	r30, Y+6	; 0x06
    42da:	ff 81       	ldd	r31, Y+7	; 0x07
    42dc:	60 e0       	ldi	r22, 0x00	; 0
    42de:	80 81       	ld	r24, Z
    42e0:	0e 94 86 87 	call	0x10f0c	; 0x10f0c <pinMode>
    42e4:	e8 81       	ld	r30, Y
    42e6:	f9 81       	ldd	r31, Y+1	; 0x01
    42e8:	36 97       	sbiw	r30, 0x06	; 6
    42ea:	60 81       	ld	r22, Z
    42ec:	71 81       	ldd	r23, Z+1	; 0x01
    42ee:	6c 0f       	add	r22, r28
    42f0:	7d 1f       	adc	r23, r29
    42f2:	c6 01       	movw	r24, r12
    42f4:	0e 94 5b 1b 	call	0x36b6	; 0x36b6 <Module::addToReportQueue(Common*)>
    42f8:	e8 81       	ld	r30, Y
    42fa:	f9 81       	ldd	r31, Y+1	; 0x01
    42fc:	36 97       	sbiw	r30, 0x06	; 6
    42fe:	60 81       	ld	r22, Z
    4300:	71 81       	ldd	r23, Z+1	; 0x01
    4302:	6c 0f       	add	r22, r28
    4304:	7d 1f       	adc	r23, r29
    4306:	c6 01       	movw	r24, r12
    4308:	0e 94 8f 1b 	call	0x371e	; 0x371e <Module::addToRefreshQueue_FiveSec(Common*)>
    430c:	43 e0       	ldi	r20, 0x03	; 3
    430e:	61 e0       	ldi	r22, 0x01	; 1
    4310:	8d ee       	ldi	r24, 0xED	; 237
    4312:	98 e0       	ldi	r25, 0x08	; 8
_ZN11LightSensorC2EPK19__FlashStringHelperP6ModulePN8Settings19LightSensorSettingsEP6Lights():
    4314:	df 91       	pop	r29
    4316:	cf 91       	pop	r28
    4318:	1f 91       	pop	r17
    431a:	0f 91       	pop	r16
    431c:	ff 90       	pop	r15
    431e:	ef 90       	pop	r14
    4320:	df 90       	pop	r13
    4322:	cf 90       	pop	r12
LightSensor():
    4324:	0c 94 85 16 	jmp	0x2d0a	; 0x2d0a <logToSerials(__FlashStringHelper const*, bool, unsigned char)>

00004328 <LightSensor::triggerCalibration()>:
_ZN11LightSensor18triggerCalibrationEv():
    4328:	ef 92       	push	r14
    432a:	ff 92       	push	r15
    432c:	0f 93       	push	r16
    432e:	1f 93       	push	r17
    4330:	cf 93       	push	r28
    4332:	df 93       	push	r29
    4334:	ec 01       	movw	r28, r24
    4336:	81 e0       	ldi	r24, 0x01	; 1
    4338:	8b 87       	std	Y+11, r24	; 0x0b
    433a:	0a a5       	ldd	r16, Y+42	; 0x2a
    433c:	1b a5       	ldd	r17, Y+43	; 0x2b
    433e:	d8 01       	movw	r26, r16
    4340:	ed 91       	ld	r30, X+
    4342:	fc 91       	ld	r31, X
    4344:	e2 80       	ldd	r14, Z+2	; 0x02
    4346:	f3 80       	ldd	r15, Z+3	; 0x03
    4348:	e8 81       	ld	r30, Y
    434a:	f9 81       	ldd	r31, Y+1	; 0x01
    434c:	36 97       	sbiw	r30, 0x06	; 6
    434e:	80 81       	ld	r24, Z
    4350:	91 81       	ldd	r25, Z+1	; 0x01
    4352:	40 e0       	ldi	r20, 0x00	; 0
    4354:	60 ed       	ldi	r22, 0xD0	; 208
    4356:	78 e0       	ldi	r23, 0x08	; 8
    4358:	8c 0f       	add	r24, r28
    435a:	9d 1f       	adc	r25, r29
    435c:	0e 94 7e 19 	call	0x32fc	; 0x32fc <Common::getName(__FlashStringHelper const*, bool)>
    4360:	43 e0       	ldi	r20, 0x03	; 3
    4362:	bc 01       	movw	r22, r24
    4364:	c8 01       	movw	r24, r16
    4366:	f7 01       	movw	r30, r14
    4368:	19 95       	eicall
    436a:	8a a5       	ldd	r24, Y+42	; 0x2a
    436c:	9b a5       	ldd	r25, Y+43	; 0x2b
    436e:	0e 94 57 1b 	call	0x36ae	; 0x36ae <Module::getSoundObject()>
    4372:	df 91       	pop	r29
    4374:	cf 91       	pop	r28
    4376:	1f 91       	pop	r17
    4378:	0f 91       	pop	r16
    437a:	ff 90       	pop	r15
    437c:	ef 90       	pop	r14
    437e:	0c 94 cf 2a 	jmp	0x559e	; 0x559e <Sound::playOnSound()>

00004382 <LightSensor::getCalibrationReadings()>:
_ZN11LightSensor22getCalibrationReadingsEv():
    4382:	0f 93       	push	r16
    4384:	1f 93       	push	r17
    4386:	cf 93       	push	r28
    4388:	df 93       	push	r29
    438a:	ec 01       	movw	r28, r24
    438c:	e1 e3       	ldi	r30, 0x31	; 49
    438e:	fe e0       	ldi	r31, 0x0E	; 14
    4390:	80 e0       	ldi	r24, 0x00	; 0
    4392:	94 e0       	ldi	r25, 0x04	; 4
    4394:	df 01       	movw	r26, r30
    4396:	9c 01       	movw	r18, r24
    4398:	1d 92       	st	X+, r1
    439a:	21 50       	subi	r18, 0x01	; 1
    439c:	30 40       	sbci	r19, 0x00	; 0
    439e:	e1 f7       	brne	.-8      	; 0x4398 <LightSensor::getCalibrationReadings()+0x16>
    43a0:	67 eb       	ldi	r22, 0xB7	; 183
    43a2:	78 e0       	ldi	r23, 0x08	; 8
    43a4:	cf 01       	movw	r24, r30
    43a6:	0e 94 da 94 	call	0x129b4	; 0x129b4 <strcat_P>
    43aa:	8e 01       	movw	r16, r28
    43ac:	0e 5e       	subi	r16, 0xEE	; 238
    43ae:	1f 4f       	sbci	r17, 0xFF	; 255
    43b0:	aa 96       	adiw	r28, 0x2a	; 42
    43b2:	d8 01       	movw	r26, r16
    43b4:	8d 91       	ld	r24, X+
    43b6:	9d 91       	ld	r25, X+
    43b8:	8d 01       	movw	r16, r26
    43ba:	0e 94 95 33 	call	0x672a	; 0x672a <toText(int)>
    43be:	bc 01       	movw	r22, r24
    43c0:	81 e3       	ldi	r24, 0x31	; 49
    43c2:	9e e0       	ldi	r25, 0x0E	; 14
    43c4:	0e 94 23 95 	call	0x12a46	; 0x12a46 <strcat>
    43c8:	65 eb       	ldi	r22, 0xB5	; 181
    43ca:	78 e0       	ldi	r23, 0x08	; 8
    43cc:	81 e3       	ldi	r24, 0x31	; 49
    43ce:	9e e0       	ldi	r25, 0x0E	; 14
    43d0:	0e 94 da 94 	call	0x129b4	; 0x129b4 <strcat_P>
    43d4:	0c 17       	cp	r16, r28
    43d6:	1d 07       	cpc	r17, r29
    43d8:	61 f7       	brne	.-40     	; 0x43b2 <LightSensor::getCalibrationReadings()+0x30>
    43da:	e1 e3       	ldi	r30, 0x31	; 49
    43dc:	fe e0       	ldi	r31, 0x0E	; 14
    43de:	01 90       	ld	r0, Z+
    43e0:	00 20       	and	r0, r0
    43e2:	e9 f7       	brne	.-6      	; 0x43de <LightSensor::getCalibrationReadings()+0x5c>
    43e4:	32 97       	sbiw	r30, 0x02	; 2
    43e6:	8d e5       	ldi	r24, 0x5D	; 93
    43e8:	80 83       	st	Z, r24
    43ea:	63 eb       	ldi	r22, 0xB3	; 179
    43ec:	78 e0       	ldi	r23, 0x08	; 8
    43ee:	81 e3       	ldi	r24, 0x31	; 49
    43f0:	9e e0       	ldi	r25, 0x0E	; 14
    43f2:	df 91       	pop	r29
    43f4:	cf 91       	pop	r28
    43f6:	1f 91       	pop	r17
    43f8:	0f 91       	pop	r16
    43fa:	0c 94 da 94 	jmp	0x129b4	; 0x129b4 <strcat_P>

000043fe <LightSensor::calibrate(bool)>:
_ZN11LightSensor9calibrateEb():
    43fe:	af 92       	push	r10
    4400:	bf 92       	push	r11
    4402:	cf 92       	push	r12
    4404:	df 92       	push	r13
    4406:	ef 92       	push	r14
    4408:	ff 92       	push	r15
    440a:	0f 93       	push	r16
    440c:	1f 93       	push	r17
    440e:	cf 93       	push	r28
    4410:	df 93       	push	r29
    4412:	ec 01       	movw	r28, r24
    4414:	06 2f       	mov	r16, r22
    4416:	1b 86       	std	Y+11, r1	; 0x0b
    4418:	8a 81       	ldd	r24, Y+2	; 0x02
    441a:	9b 81       	ldd	r25, Y+3	; 0x03
    441c:	0e 94 19 27 	call	0x4e32	; 0x4e32 <Lights::getStatus()>
    4420:	d8 2e       	mov	r13, r24
    4422:	8a 81       	ldd	r24, Y+2	; 0x02
    4424:	9b 81       	ldd	r25, Y+3	; 0x03
    4426:	0e 94 1f 27 	call	0x4e3e	; 0x4e3e <Lights::getBrightness()>
    442a:	c8 2e       	mov	r12, r24
    442c:	40 e0       	ldi	r20, 0x00	; 0
    442e:	60 e0       	ldi	r22, 0x00	; 0
    4430:	8a 81       	ldd	r24, Y+2	; 0x02
    4432:	9b 81       	ldd	r25, Y+3	; 0x03
    4434:	0e 94 1c 25 	call	0x4a38	; 0x4a38 <Lights::setLightOnOff(bool, bool)>
    4438:	6a ef       	ldi	r22, 0xFA	; 250
    443a:	70 e0       	ldi	r23, 0x00	; 0
    443c:	80 e0       	ldi	r24, 0x00	; 0
    443e:	90 e0       	ldi	r25, 0x00	; 0
    4440:	0e 94 98 85 	call	0x10b30	; 0x10b30 <delay>
    4444:	ee 81       	ldd	r30, Y+6	; 0x06
    4446:	ff 81       	ldd	r31, Y+7	; 0x07
    4448:	80 81       	ld	r24, Z
    444a:	0e 94 22 86 	call	0x10c44	; 0x10c44 <analogRead>
    444e:	2f ef       	ldi	r18, 0xFF	; 255
    4450:	33 e0       	ldi	r19, 0x03	; 3
    4452:	28 1b       	sub	r18, r24
    4454:	39 0b       	sbc	r19, r25
    4456:	3b 8b       	std	Y+19, r19	; 0x13
    4458:	2a 8b       	std	Y+18, r18	; 0x12
    445a:	40 e0       	ldi	r20, 0x00	; 0
    445c:	61 e0       	ldi	r22, 0x01	; 1
    445e:	8a 81       	ldd	r24, Y+2	; 0x02
    4460:	9b 81       	ldd	r25, Y+3	; 0x03
    4462:	0e 94 1c 25 	call	0x4a38	; 0x4a38 <Lights::setLightOnOff(bool, bool)>
    4466:	7e 01       	movw	r14, r28
    4468:	24 e1       	ldi	r18, 0x14	; 20
    446a:	e2 0e       	add	r14, r18
    446c:	f1 1c       	adc	r15, r1
    446e:	10 e0       	ldi	r17, 0x00	; 0
    4470:	aa 24       	eor	r10, r10
    4472:	aa 94       	dec	r10
    4474:	83 e0       	ldi	r24, 0x03	; 3
    4476:	b8 2e       	mov	r11, r24
    4478:	20 e0       	ldi	r18, 0x00	; 0
    447a:	40 e0       	ldi	r20, 0x00	; 0
    447c:	61 2f       	mov	r22, r17
    447e:	8a 81       	ldd	r24, Y+2	; 0x02
    4480:	9b 81       	ldd	r25, Y+3	; 0x03
    4482:	0e 94 63 23 	call	0x46c6	; 0x46c6 <Lights::setBrightness(unsigned char, bool, bool)>
    4486:	a8 95       	wdr
    4488:	6a ef       	ldi	r22, 0xFA	; 250
    448a:	70 e0       	ldi	r23, 0x00	; 0
    448c:	80 e0       	ldi	r24, 0x00	; 0
    448e:	90 e0       	ldi	r25, 0x00	; 0
    4490:	0e 94 98 85 	call	0x10b30	; 0x10b30 <delay>
    4494:	ee 81       	ldd	r30, Y+6	; 0x06
    4496:	ff 81       	ldd	r31, Y+7	; 0x07
    4498:	80 81       	ld	r24, Z
    449a:	0e 94 22 86 	call	0x10c44	; 0x10c44 <analogRead>
    449e:	d5 01       	movw	r26, r10
    44a0:	a8 1b       	sub	r26, r24
    44a2:	b9 0b       	sbc	r27, r25
    44a4:	f7 01       	movw	r30, r14
    44a6:	a1 93       	st	Z+, r26
    44a8:	b1 93       	st	Z+, r27
    44aa:	7f 01       	movw	r14, r30
    44ac:	16 5f       	subi	r17, 0xF6	; 246
    44ae:	1e 36       	cpi	r17, 0x6E	; 110
    44b0:	19 f7       	brne	.-58     	; 0x4478 <LightSensor::calibrate(bool)+0x7a>
    44b2:	20 e0       	ldi	r18, 0x00	; 0
    44b4:	40 e0       	ldi	r20, 0x00	; 0
    44b6:	6c 2d       	mov	r22, r12
    44b8:	8a 81       	ldd	r24, Y+2	; 0x02
    44ba:	9b 81       	ldd	r25, Y+3	; 0x03
    44bc:	0e 94 63 23 	call	0x46c6	; 0x46c6 <Lights::setBrightness(unsigned char, bool, bool)>
    44c0:	40 e0       	ldi	r20, 0x00	; 0
    44c2:	6d 2d       	mov	r22, r13
    44c4:	8a 81       	ldd	r24, Y+2	; 0x02
    44c6:	9b 81       	ldd	r25, Y+3	; 0x03
    44c8:	0e 94 1c 25 	call	0x4a38	; 0x4a38 <Lights::setLightOnOff(bool, bool)>
    44cc:	ce 01       	movw	r24, r28
    44ce:	0e 94 c1 21 	call	0x4382	; 0x4382 <LightSensor::getCalibrationReadings()>
    44d2:	00 23       	and	r16, r16
    44d4:	09 f4       	brne	.+2      	; 0x44d8 <LightSensor::calibrate(bool)+0xda>
    44d6:	41 c0       	rjmp	.+130    	; 0x455a <LightSensor::calibrate(bool)+0x15c>
    44d8:	0a a5       	ldd	r16, Y+42	; 0x2a
    44da:	1b a5       	ldd	r17, Y+43	; 0x2b
    44dc:	d8 01       	movw	r26, r16
    44de:	ed 91       	ld	r30, X+
    44e0:	fc 91       	ld	r31, X
    44e2:	e2 80       	ldd	r14, Z+2	; 0x02
    44e4:	f3 80       	ldd	r15, Z+3	; 0x03
    44e6:	e8 81       	ld	r30, Y
    44e8:	f9 81       	ldd	r31, Y+1	; 0x01
    44ea:	36 97       	sbiw	r30, 0x06	; 6
    44ec:	80 81       	ld	r24, Z
    44ee:	91 81       	ldd	r25, Z+1	; 0x01
    44f0:	40 e0       	ldi	r20, 0x00	; 0
    44f2:	65 ec       	ldi	r22, 0xC5	; 197
    44f4:	78 e0       	ldi	r23, 0x08	; 8
    44f6:	8c 0f       	add	r24, r28
    44f8:	9d 1f       	adc	r25, r29
    44fa:	0e 94 7e 19 	call	0x32fc	; 0x32fc <Common::getName(__FlashStringHelper const*, bool)>
    44fe:	43 e0       	ldi	r20, 0x03	; 3
    4500:	bc 01       	movw	r22, r24
    4502:	c8 01       	movw	r24, r16
    4504:	f7 01       	movw	r30, r14
    4506:	19 95       	eicall
    4508:	c4 e0       	ldi	r28, 0x04	; 4
_Z12logToSerialsIA1024_cEvPT_bh():
    450a:	e0 90 2f 04 	lds	r14, 0x042F	; 0x80042f <ArduinoSerial>
    450e:	f0 90 30 04 	lds	r15, 0x0430	; 0x800430 <ArduinoSerial+0x1>
    4512:	00 91 2d 04 	lds	r16, 0x042D	; 0x80042d <ESPSerial>
    4516:	10 91 2e 04 	lds	r17, 0x042E	; 0x80042e <ESPSerial+0x1>
    451a:	69 e0       	ldi	r22, 0x09	; 9
    451c:	78 e0       	ldi	r23, 0x08	; 8
    451e:	c7 01       	movw	r24, r14
    4520:	0e 94 6c 8b 	call	0x116d8	; 0x116d8 <Print::print(__FlashStringHelper const*)>
    4524:	67 e0       	ldi	r22, 0x07	; 7
    4526:	78 e0       	ldi	r23, 0x08	; 8
    4528:	c8 01       	movw	r24, r16
    452a:	0e 94 6c 8b 	call	0x116d8	; 0x116d8 <Print::print(__FlashStringHelper const*)>
    452e:	c1 50       	subi	r28, 0x01	; 1
    4530:	a1 f7       	brne	.-24     	; 0x451a <LightSensor::calibrate(bool)+0x11c>
    4532:	61 e3       	ldi	r22, 0x31	; 49
    4534:	7e e0       	ldi	r23, 0x0E	; 14
    4536:	c7 01       	movw	r24, r14
    4538:	0e 94 c3 8b 	call	0x11786	; 0x11786 <Print::println(char const*)>
    453c:	61 e3       	ldi	r22, 0x31	; 49
    453e:	7e e0       	ldi	r23, 0x0E	; 14
    4540:	c8 01       	movw	r24, r16
_ZN11LightSensor9calibrateEb():
    4542:	df 91       	pop	r29
    4544:	cf 91       	pop	r28
    4546:	1f 91       	pop	r17
    4548:	0f 91       	pop	r16
    454a:	ff 90       	pop	r15
    454c:	ef 90       	pop	r14
    454e:	df 90       	pop	r13
    4550:	cf 90       	pop	r12
    4552:	bf 90       	pop	r11
    4554:	af 90       	pop	r10
_Z12logToSerialsIA1024_cEvPT_bh():
    4556:	0c 94 c3 8b 	jmp	0x11786	; 0x11786 <Print::println(char const*)>
_ZN11LightSensor9calibrateEb():
    455a:	df 91       	pop	r29
    455c:	cf 91       	pop	r28
    455e:	1f 91       	pop	r17
    4560:	0f 91       	pop	r16
    4562:	ff 90       	pop	r15
    4564:	ef 90       	pop	r14
    4566:	df 90       	pop	r13
    4568:	cf 90       	pop	r12
    456a:	bf 90       	pop	r11
    456c:	af 90       	pop	r10
    456e:	08 95       	ret

00004570 <LightSensor::getReadingText(bool)>:
_ZN11LightSensor14getReadingTextEb():
b:\Gbox420\Gbox420\Gbox420_Mega_Main\build\sketch\src\Components/LightSensor.cpp:95

char *LightSensor::getReadingText(bool FriendlyFormat)
{
    4570:	1f 93       	push	r17
    4572:	cf 93       	push	r28
    4574:	df 93       	push	r29
    4576:	ec 01       	movw	r28, r24
    4578:	16 2f       	mov	r17, r22
itoa():
c:\users\bitmu\appdata\local\arduino15\packages\arduino\tools\avr-gcc\7.3.0-atmel3.6.1-arduino7\avr\include/stdlib.h:439
    } else if (__radix < 2 || __radix > 36) {
	*__s = 0;
	return __s;
    } else {
	extern char *__itoa_ncheck (int, char *, unsigned char);
	return __itoa_ncheck (__val, __s, __radix);
    457a:	4a e0       	ldi	r20, 0x0A	; 10
    457c:	61 eb       	ldi	r22, 0xB1	; 177
    457e:	7d e0       	ldi	r23, 0x0D	; 13
    4580:	88 85       	ldd	r24, Y+8	; 0x08
    4582:	99 85       	ldd	r25, Y+9	; 0x09
    4584:	0e 94 4d 95 	call	0x12a9a	; 0x12a9a <__itoa_ncheck>
_ZN11LightSensor14getReadingTextEb():
b:\Gbox420\Gbox420\Gbox420_Mega_Main\build\sketch\src\Components/LightSensor.cpp:97
  itoa(LightReading, ShortMessage, 10);
  if (FriendlyFormat)
    4588:	11 23       	and	r17, r17
    458a:	59 f0       	breq	.+22     	; 0x45a2 <LightSensor::getReadingText(bool)+0x32>
b:\Gbox420\Gbox420\Gbox420_Mega_Main\build\sketch\src\Components/LightSensor.cpp:99
  {
    if (Dark)
    458c:	8a 85       	ldd	r24, Y+10	; 0x0a
b:\Gbox420\Gbox420\Gbox420_Mega_Main\build\sketch\src\Components/LightSensor.cpp:101
    {
      strcat_P(ShortMessage, (PGM_P)F("-NIGHT"));
    458e:	6c ea       	ldi	r22, 0xAC	; 172
    4590:	78 e0       	ldi	r23, 0x08	; 8
b:\Gbox420\Gbox420\Gbox420_Mega_Main\build\sketch\src\Components/LightSensor.cpp:99
char *LightSensor::getReadingText(bool FriendlyFormat)
{
  itoa(LightReading, ShortMessage, 10);
  if (FriendlyFormat)
  {
    if (Dark)
    4592:	81 11       	cpse	r24, r1
    4594:	02 c0       	rjmp	.+4      	; 0x459a <LightSensor::getReadingText(bool)+0x2a>
b:\Gbox420\Gbox420\Gbox420_Mega_Main\build\sketch\src\Components/LightSensor.cpp:105
    {
      strcat_P(ShortMessage, (PGM_P)F("-NIGHT"));
    }
    else
    {
      strcat_P(ShortMessage, (PGM_P)F("-DAY"));
    4596:	67 ea       	ldi	r22, 0xA7	; 167
    4598:	78 e0       	ldi	r23, 0x08	; 8
    459a:	81 eb       	ldi	r24, 0xB1	; 177
    459c:	9d e0       	ldi	r25, 0x0D	; 13
    459e:	0e 94 da 94 	call	0x129b4	; 0x129b4 <strcat_P>
b:\Gbox420\Gbox420\Gbox420_Mega_Main\build\sketch\src\Components/LightSensor.cpp:109
    }
  }
  return ShortMessage;
}
    45a2:	81 eb       	ldi	r24, 0xB1	; 177
    45a4:	9d e0       	ldi	r25, 0x0D	; 13
    45a6:	df 91       	pop	r29
    45a8:	cf 91       	pop	r28
    45aa:	1f 91       	pop	r17
    45ac:	08 95       	ret

000045ae <LightSensor::getDark()>:
_ZN11LightSensor7getDarkEv():
b:\Gbox420\Gbox420\Gbox420_Mega_Main\build\sketch\src\Components/LightSensor.cpp:114

bool LightSensor::getDark()
{
  return Dark;
}
    45ae:	fc 01       	movw	r30, r24
    45b0:	82 85       	ldd	r24, Z+10	; 0x0a
    45b2:	08 95       	ret

000045b4 <LightSensor::getDarkText(bool)>:
_ZN11LightSensor11getDarkTextEb():
b:\Gbox420\Gbox420\Gbox420_Mega_Main\build\sketch\src\Components/LightSensor.cpp:117

char *LightSensor::getDarkText(bool UseWords)
{
    45b4:	fc 01       	movw	r30, r24
    45b6:	82 85       	ldd	r24, Z+10	; 0x0a
b:\Gbox420\Gbox420\Gbox420_Mega_Main\build\sketch\src\Components/LightSensor.cpp:118
  if (UseWords)
    45b8:	61 11       	cpse	r22, r1
b:\Gbox420\Gbox420\Gbox420_Mega_Main\build\sketch\src\Components/LightSensor.cpp:119
    return toText_yesNo(Dark);
    45ba:	0c 94 dc 34 	jmp	0x69b8	; 0x69b8 <toText_yesNo(bool)>
b:\Gbox420\Gbox420\Gbox420_Mega_Main\build\sketch\src\Components/LightSensor.cpp:121
  else
    return toText(Dark);
    45be:	90 e0       	ldi	r25, 0x00	; 0
    45c0:	0c 94 95 33 	jmp	0x672a	; 0x672a <toText(int)>

000045c4 <LightSensor::refresh_FiveSec()>:
_ZN11LightSensor15refresh_FiveSecEv():
b:\Gbox420\Gbox420\Gbox420_Mega_Main\build\sketch\src\Components/LightSensor.cpp:20
  Parent->addToRefreshQueue_FiveSec(this);
  logToSerials(F("LightSensor ready"), true, 3);
}

void LightSensor::refresh_FiveSec()
{
    45c4:	cf 93       	push	r28
    45c6:	df 93       	push	r29
    45c8:	ec 01       	movw	r28, r24
b:\Gbox420\Gbox420\Gbox420_Mega_Main\build\sketch\src\Components/LightSensor.cpp:21
  Common::refresh_FiveSec();
    45ca:	e8 81       	ld	r30, Y
    45cc:	f9 81       	ldd	r31, Y+1	; 0x01
    45ce:	36 97       	sbiw	r30, 0x06	; 6
    45d0:	80 81       	ld	r24, Z
    45d2:	91 81       	ldd	r25, Z+1	; 0x01
    45d4:	8c 0f       	add	r24, r28
    45d6:	9d 1f       	adc	r25, r29
    45d8:	0e 94 cd 18 	call	0x319a	; 0x319a <Common::refresh_FiveSec()>
b:\Gbox420\Gbox420\Gbox420_Mega_Main\build\sketch\src\Components/LightSensor.cpp:22
  if (CalibrateRequested)
    45dc:	8b 85       	ldd	r24, Y+11	; 0x0b
    45de:	88 23       	and	r24, r24
    45e0:	21 f0       	breq	.+8      	; 0x45ea <LightSensor::refresh_FiveSec()+0x26>
b:\Gbox420\Gbox420\Gbox420_Mega_Main\build\sketch\src\Components/LightSensor.cpp:24
  {
    calibrate();
    45e2:	61 e0       	ldi	r22, 0x01	; 1
    45e4:	ce 01       	movw	r24, r28
    45e6:	0e 94 ff 21 	call	0x43fe	; 0x43fe <LightSensor::calibrate(bool)>
b:\Gbox420\Gbox420\Gbox420_Mega_Main\build\sketch\src\Components/LightSensor.cpp:26
  }                                ///< If calibration was requested
  Dark = digitalRead(*DigitalPin); ///< True: No light detected
    45ea:	ec 81       	ldd	r30, Y+4	; 0x04
    45ec:	fd 81       	ldd	r31, Y+5	; 0x05
    45ee:	80 81       	ld	r24, Z
    45f0:	0e 94 f0 87 	call	0x10fe0	; 0x10fe0 <digitalRead>
    45f4:	21 e0       	ldi	r18, 0x01	; 1
    45f6:	89 2b       	or	r24, r25
    45f8:	09 f4       	brne	.+2      	; 0x45fc <LightSensor::refresh_FiveSec()+0x38>
    45fa:	20 e0       	ldi	r18, 0x00	; 0
    45fc:	2a 87       	std	Y+10, r18	; 0x0a
b:\Gbox420\Gbox420\Gbox420_Mega_Main\build\sketch\src\Components/LightSensor.cpp:27
  LightReading = (1023 - analogRead(*AnalogPin));
    45fe:	ee 81       	ldd	r30, Y+6	; 0x06
    4600:	ff 81       	ldd	r31, Y+7	; 0x07
    4602:	80 81       	ld	r24, Z
    4604:	0e 94 22 86 	call	0x10c44	; 0x10c44 <analogRead>
    4608:	2f ef       	ldi	r18, 0xFF	; 255
    460a:	33 e0       	ldi	r19, 0x03	; 3
    460c:	28 1b       	sub	r18, r24
    460e:	39 0b       	sbc	r19, r25
    4610:	39 87       	std	Y+9, r19	; 0x09
    4612:	28 87       	std	Y+8, r18	; 0x08
b:\Gbox420\Gbox420\Gbox420_Mega_Main\build\sketch\src\Components/LightSensor.cpp:28
}
    4614:	df 91       	pop	r29
    4616:	cf 91       	pop	r28
    4618:	08 95       	ret

0000461a <virtual thunk to LightSensor::refresh_FiveSec()>:
_ZTv0_n10_N11LightSensor15refresh_FiveSecEv():
    461a:	dc 01       	movw	r26, r24
    461c:	ed 91       	ld	r30, X+
    461e:	fc 91       	ld	r31, X
    4620:	3a 97       	sbiw	r30, 0x0a	; 10
    4622:	20 81       	ld	r18, Z
    4624:	31 81       	ldd	r19, Z+1	; 0x01
    4626:	82 0f       	add	r24, r18
    4628:	93 1f       	adc	r25, r19
    462a:	0c 94 e2 22 	jmp	0x45c4	; 0x45c4 <LightSensor::refresh_FiveSec()>

0000462e <LightSensor::report(bool)>:
_ZN11LightSensor6reportEb():
b:\Gbox420\Gbox420\Gbox420_Mega_Main\build\sketch\src\Components/LightSensor.cpp:34

/**
* @brief Report current state in a JSON format to the LongMessage buffer
*/
void LightSensor::report(bool FriendlyFormat)
{
    462e:	1f 93       	push	r17
    4630:	cf 93       	push	r28
    4632:	df 93       	push	r29
    4634:	ec 01       	movw	r28, r24
    4636:	16 2f       	mov	r17, r22
b:\Gbox420\Gbox420\Gbox420_Mega_Main\build\sketch\src\Components/LightSensor.cpp:35
  Common::report(true); ///< Adds "NAME":{  to the LongMessage buffer. The curly bracket { needs to be closed at the end
    4638:	e8 81       	ld	r30, Y
    463a:	f9 81       	ldd	r31, Y+1	; 0x01
    463c:	36 97       	sbiw	r30, 0x06	; 6
    463e:	80 81       	ld	r24, Z
    4640:	91 81       	ldd	r25, Z+1	; 0x01
    4642:	61 e0       	ldi	r22, 0x01	; 1
    4644:	8c 0f       	add	r24, r28
    4646:	9d 1f       	adc	r25, r29
    4648:	0e 94 0e 19 	call	0x321c	; 0x321c <Common::report(bool)>
b:\Gbox420\Gbox420\Gbox420_Mega_Main\build\sketch\src\Components/LightSensor.cpp:36
  strcat_P(LongMessage, (PGM_P)F("\"R\":\""));
    464c:	67 ee       	ldi	r22, 0xE7	; 231
    464e:	78 e0       	ldi	r23, 0x08	; 8
    4650:	81 e3       	ldi	r24, 0x31	; 49
    4652:	9e e0       	ldi	r25, 0x0E	; 14
    4654:	0e 94 da 94 	call	0x129b4	; 0x129b4 <strcat_P>
b:\Gbox420\Gbox420\Gbox420_Mega_Main\build\sketch\src\Components/LightSensor.cpp:37
  strcat(LongMessage, getReadingText(FriendlyFormat));
    4658:	61 2f       	mov	r22, r17
    465a:	ce 01       	movw	r24, r28
    465c:	0e 94 b8 22 	call	0x4570	; 0x4570 <LightSensor::getReadingText(bool)>
    4660:	bc 01       	movw	r22, r24
    4662:	81 e3       	ldi	r24, 0x31	; 49
    4664:	9e e0       	ldi	r25, 0x0E	; 14
    4666:	0e 94 23 95 	call	0x12a46	; 0x12a46 <strcat>
b:\Gbox420\Gbox420\Gbox420_Mega_Main\build\sketch\src\Components/LightSensor.cpp:38
  strcat_P(LongMessage, (PGM_P)F("\",\"D\":\""));
    466a:	6f ed       	ldi	r22, 0xDF	; 223
    466c:	78 e0       	ldi	r23, 0x08	; 8
    466e:	81 e3       	ldi	r24, 0x31	; 49
    4670:	9e e0       	ldi	r25, 0x0E	; 14
    4672:	0e 94 da 94 	call	0x129b4	; 0x129b4 <strcat_P>
b:\Gbox420\Gbox420\Gbox420_Mega_Main\build\sketch\src\Components/LightSensor.cpp:39
  strcat(LongMessage, getDarkText(FriendlyFormat));
    4676:	61 2f       	mov	r22, r17
    4678:	ce 01       	movw	r24, r28
    467a:	0e 94 da 22 	call	0x45b4	; 0x45b4 <LightSensor::getDarkText(bool)>
    467e:	bc 01       	movw	r22, r24
    4680:	81 e3       	ldi	r24, 0x31	; 49
    4682:	9e e0       	ldi	r25, 0x0E	; 14
    4684:	0e 94 23 95 	call	0x12a46	; 0x12a46 <strcat>
b:\Gbox420\Gbox420\Gbox420_Mega_Main\build\sketch\src\Components/LightSensor.cpp:40
  strcat_P(LongMessage, (PGM_P)F("\"}")); ///< closing the curly bracket at the end of the JSON
    4688:	6c ed       	ldi	r22, 0xDC	; 220
    468a:	78 e0       	ldi	r23, 0x08	; 8
    468c:	81 e3       	ldi	r24, 0x31	; 49
    468e:	9e e0       	ldi	r25, 0x0E	; 14
b:\Gbox420\Gbox420\Gbox420_Mega_Main\build\sketch\src\Components/LightSensor.cpp:41
}
    4690:	df 91       	pop	r29
    4692:	cf 91       	pop	r28
    4694:	1f 91       	pop	r17
b:\Gbox420\Gbox420\Gbox420_Mega_Main\build\sketch\src\Components/LightSensor.cpp:40
  Common::report(true); ///< Adds "NAME":{  to the LongMessage buffer. The curly bracket { needs to be closed at the end
  strcat_P(LongMessage, (PGM_P)F("\"R\":\""));
  strcat(LongMessage, getReadingText(FriendlyFormat));
  strcat_P(LongMessage, (PGM_P)F("\",\"D\":\""));
  strcat(LongMessage, getDarkText(FriendlyFormat));
  strcat_P(LongMessage, (PGM_P)F("\"}")); ///< closing the curly bracket at the end of the JSON
    4696:	0c 94 da 94 	jmp	0x129b4	; 0x129b4 <strcat_P>

0000469a <virtual thunk to LightSensor::report(bool)>:
_ZTv0_n6_N11LightSensor6reportEb():
    469a:	dc 01       	movw	r26, r24
    469c:	ed 91       	ld	r30, X+
    469e:	fc 91       	ld	r31, X
    46a0:	36 97       	sbiw	r30, 0x06	; 6
    46a2:	20 81       	ld	r18, Z
    46a4:	31 81       	ldd	r19, Z+1	; 0x01
    46a6:	82 0f       	add	r24, r18
    46a8:	93 1f       	adc	r25, r19
    46aa:	0c 94 17 23 	jmp	0x462e	; 0x462e <LightSensor::report(bool)>

000046ae <Lights::checkRelay()>:
_ZN6Lights10checkRelayEv():
b:\Gbox420\Gbox420\Gbox420_Mega_Main\build\sketch\src\Components/Lights.cpp:420

void Lights::setFadeIncrements(uint8_t Increment)
{
  *FadingIncrements = Increment;
  Parent->addToLog(getName(F("fading updated")));
  Parent->getSoundObject()->playOnSound();
    46ae:	fc 01       	movw	r30, r24
    46b0:	a6 85       	ldd	r26, Z+14	; 0x0e
    46b2:	b7 85       	ldd	r27, Z+15	; 0x0f
    46b4:	8c 91       	ld	r24, X
    46b6:	27 8d       	ldd	r18, Z+31	; 0x1f
    46b8:	30 a1       	ldd	r19, Z+32	; 0x20
    46ba:	61 e0       	ldi	r22, 0x01	; 1
    46bc:	23 2b       	or	r18, r19
    46be:	09 f0       	breq	.+2      	; 0x46c2 <Lights::checkRelay()+0x14>
    46c0:	60 e0       	ldi	r22, 0x00	; 0
    46c2:	0c 94 c2 87 	jmp	0x10f84	; 0x10f84 <digitalWrite>

000046c6 <Lights::setBrightness(unsigned char, bool, bool)>:
_ZN6Lights13setBrightnessEhbb():
    46c6:	9f 92       	push	r9
    46c8:	af 92       	push	r10
    46ca:	bf 92       	push	r11
    46cc:	cf 92       	push	r12
    46ce:	df 92       	push	r13
    46d0:	ef 92       	push	r14
    46d2:	ff 92       	push	r15
    46d4:	0f 93       	push	r16
    46d6:	1f 93       	push	r17
    46d8:	cf 93       	push	r28
    46da:	df 93       	push	r29
    46dc:	ec 01       	movw	r28, r24
    46de:	94 2e       	mov	r9, r20
    46e0:	6b a3       	std	Y+35, r22	; 0x23
    46e2:	22 23       	and	r18, r18
    46e4:	19 f0       	breq	.+6      	; 0x46ec <Lights::setBrightness(unsigned char, bool, bool)+0x26>
    46e6:	ea 85       	ldd	r30, Y+10	; 0x0a
    46e8:	fb 85       	ldd	r31, Y+11	; 0x0b
    46ea:	60 83       	st	Z, r22
    46ec:	ea 89       	ldd	r30, Y+18	; 0x12
    46ee:	fb 89       	ldd	r31, Y+19	; 0x13
    46f0:	20 81       	ld	r18, Z
    46f2:	84 e6       	ldi	r24, 0x64	; 100
    46f4:	90 e0       	ldi	r25, 0x00	; 0
    46f6:	82 1b       	sub	r24, r18
    46f8:	91 09       	sbc	r25, r1
    46fa:	2f ef       	ldi	r18, 0xFF	; 255
    46fc:	28 9f       	mul	r18, r24
    46fe:	b0 01       	movw	r22, r0
    4700:	29 9f       	mul	r18, r25
    4702:	70 0d       	add	r23, r0
    4704:	11 24       	eor	r1, r1
    4706:	07 2e       	mov	r0, r23
    4708:	00 0c       	add	r0, r0
    470a:	88 0b       	sbc	r24, r24
    470c:	99 0b       	sbc	r25, r25
    470e:	0e 94 8b 90 	call	0x12116	; 0x12116 <__floatsisf>
    4712:	20 e0       	ldi	r18, 0x00	; 0
    4714:	30 e0       	ldi	r19, 0x00	; 0
    4716:	48 ec       	ldi	r20, 0xC8	; 200
    4718:	52 e4       	ldi	r21, 0x42	; 66
    471a:	0e 94 e1 8f 	call	0x11fc2	; 0x11fc2 <__divsf3>
    471e:	0e 94 53 90 	call	0x120a6	; 0x120a6 <__fixsfsi>
    4722:	5b 01       	movw	r10, r22
    4724:	77 0f       	add	r23, r23
    4726:	cc 08       	sbc	r12, r12
    4728:	dd 08       	sbc	r13, r13
    472a:	8b a1       	ldd	r24, Y+35	; 0x23
    472c:	68 2f       	mov	r22, r24
    472e:	70 e0       	ldi	r23, 0x00	; 0
    4730:	90 e0       	ldi	r25, 0x00	; 0
    4732:	80 e0       	ldi	r24, 0x00	; 0
    4734:	1f 92       	push	r1
    4736:	1f 92       	push	r1
    4738:	1f 92       	push	r1
    473a:	1f 92       	push	r1
    473c:	14 e6       	ldi	r17, 0x64	; 100
    473e:	e1 2e       	mov	r14, r17
    4740:	f1 2c       	mov	r15, r1
    4742:	00 e0       	ldi	r16, 0x00	; 0
    4744:	10 e0       	ldi	r17, 0x00	; 0
    4746:	20 e0       	ldi	r18, 0x00	; 0
    4748:	30 e0       	ldi	r19, 0x00	; 0
    474a:	a9 01       	movw	r20, r18
    474c:	0e 94 e1 8d 	call	0x11bc2	; 0x11bc2 <map(long, long, long, long, long)>
    4750:	e8 89       	ldd	r30, Y+16	; 0x10
    4752:	f9 89       	ldd	r31, Y+17	; 0x11
    4754:	80 81       	ld	r24, Z
    4756:	0e 94 48 86 	call	0x10c90	; 0x10c90 <analogWrite>
    475a:	0f 90       	pop	r0
    475c:	0f 90       	pop	r0
    475e:	0f 90       	pop	r0
    4760:	0f 90       	pop	r0
    4762:	99 20       	and	r9, r9
    4764:	19 f1       	breq	.+70     	; 0x47ac <Lights::setBrightness(unsigned char, bool, bool)+0xe6>
    4766:	cc 84       	ldd	r12, Y+12	; 0x0c
    4768:	dd 84       	ldd	r13, Y+13	; 0x0d
    476a:	d6 01       	movw	r26, r12
    476c:	ed 91       	ld	r30, X+
    476e:	fc 91       	ld	r31, X
    4770:	a2 80       	ldd	r10, Z+2	; 0x02
    4772:	b3 80       	ldd	r11, Z+3	; 0x03
    4774:	e8 81       	ld	r30, Y
    4776:	f9 81       	ldd	r31, Y+1	; 0x01
    4778:	36 97       	sbiw	r30, 0x06	; 6
    477a:	80 81       	ld	r24, Z
    477c:	91 81       	ldd	r25, Z+1	; 0x01
    477e:	40 e0       	ldi	r20, 0x00	; 0
    4780:	67 e4       	ldi	r22, 0x47	; 71
    4782:	79 e0       	ldi	r23, 0x09	; 9
    4784:	8c 0f       	add	r24, r28
    4786:	9d 1f       	adc	r25, r29
    4788:	0e 94 7e 19 	call	0x32fc	; 0x32fc <Common::getName(__FlashStringHelper const*, bool)>
    478c:	43 e0       	ldi	r20, 0x03	; 3
    478e:	bc 01       	movw	r22, r24
    4790:	c6 01       	movw	r24, r12
    4792:	f5 01       	movw	r30, r10
    4794:	df 91       	pop	r29
    4796:	cf 91       	pop	r28
    4798:	1f 91       	pop	r17
    479a:	0f 91       	pop	r16
    479c:	ff 90       	pop	r15
    479e:	ef 90       	pop	r14
    47a0:	df 90       	pop	r13
    47a2:	cf 90       	pop	r12
    47a4:	bf 90       	pop	r11
    47a6:	af 90       	pop	r10
    47a8:	9f 90       	pop	r9
    47aa:	19 94       	eijmp
    47ac:	df 91       	pop	r29
    47ae:	cf 91       	pop	r28
    47b0:	1f 91       	pop	r17
    47b2:	0f 91       	pop	r16
    47b4:	ff 90       	pop	r15
    47b6:	ef 90       	pop	r14
    47b8:	df 90       	pop	r13
    47ba:	cf 90       	pop	r12
    47bc:	bf 90       	pop	r11
    47be:	af 90       	pop	r10
    47c0:	9f 90       	pop	r9
    47c2:	08 95       	ret

000047c4 <Lights::checkDimming()>:
_ZN6Lights12checkDimmingEv():
    47c4:	cf 92       	push	r12
    47c6:	df 92       	push	r13
    47c8:	ef 92       	push	r14
    47ca:	ff 92       	push	r15
    47cc:	cf 93       	push	r28
    47ce:	df 93       	push	r29
    47d0:	ec 01       	movw	r28, r24
    47d2:	8f 8d       	ldd	r24, Y+31	; 0x1f
    47d4:	98 a1       	ldd	r25, Y+32	; 0x20
    47d6:	82 30       	cpi	r24, 0x02	; 2
    47d8:	91 05       	cpc	r25, r1
    47da:	09 f0       	breq	.+2      	; 0x47de <Lights::checkDimming()+0x1a>
    47dc:	46 c0       	rjmp	.+140    	; 0x486a <Lights::checkDimming()+0xa6>
    47de:	0e 94 67 85 	call	0x10ace	; 0x10ace <millis>
    47e2:	ce a0       	ldd	r12, Y+38	; 0x26
    47e4:	df a0       	ldd	r13, Y+39	; 0x27
    47e6:	e8 a4       	ldd	r14, Y+40	; 0x28
    47e8:	f9 a4       	ldd	r15, Y+41	; 0x29
    47ea:	ab 01       	movw	r20, r22
    47ec:	bc 01       	movw	r22, r24
    47ee:	4c 19       	sub	r20, r12
    47f0:	5d 09       	sbc	r21, r13
    47f2:	6e 09       	sbc	r22, r14
    47f4:	7f 09       	sbc	r23, r15
    47f6:	ea a5       	ldd	r30, Y+42	; 0x2a
    47f8:	fb a5       	ldd	r31, Y+43	; 0x2b
    47fa:	01 90       	ld	r0, Z+
    47fc:	f0 81       	ld	r31, Z
    47fe:	e0 2d       	mov	r30, r0
    4800:	28 ee       	ldi	r18, 0xE8	; 232
    4802:	33 e0       	ldi	r19, 0x03	; 3
    4804:	e2 9f       	mul	r30, r18
    4806:	c0 01       	movw	r24, r0
    4808:	e3 9f       	mul	r30, r19
    480a:	90 0d       	add	r25, r0
    480c:	f2 9f       	mul	r31, r18
    480e:	90 0d       	add	r25, r0
    4810:	11 24       	eor	r1, r1
    4812:	b0 e0       	ldi	r27, 0x00	; 0
    4814:	a0 e0       	ldi	r26, 0x00	; 0
    4816:	48 17       	cp	r20, r24
    4818:	59 07       	cpc	r21, r25
    481a:	6a 07       	cpc	r22, r26
    481c:	7b 07       	cpc	r23, r27
    481e:	e0 f0       	brcs	.+56     	; 0x4858 <Lights::checkDimming()+0x94>
    4820:	ec a5       	ldd	r30, Y+44	; 0x2c
    4822:	fd a5       	ldd	r31, Y+45	; 0x2d
    4824:	80 81       	ld	r24, Z
    4826:	9b a1       	ldd	r25, Y+35	; 0x23
    4828:	89 0f       	add	r24, r25
    482a:	8b a3       	std	Y+35, r24	; 0x23
    482c:	ea 85       	ldd	r30, Y+10	; 0x0a
    482e:	fb 85       	ldd	r31, Y+11	; 0x0b
    4830:	90 81       	ld	r25, Z
    4832:	89 17       	cp	r24, r25
    4834:	28 f0       	brcs	.+10     	; 0x4840 <Lights::checkDimming()+0x7c>
    4836:	9b a3       	std	Y+35, r25	; 0x23
    4838:	81 e0       	ldi	r24, 0x01	; 1
    483a:	90 e0       	ldi	r25, 0x00	; 0
    483c:	98 a3       	std	Y+32, r25	; 0x20
    483e:	8f 8f       	std	Y+31, r24	; 0x1f
    4840:	20 e0       	ldi	r18, 0x00	; 0
    4842:	40 e0       	ldi	r20, 0x00	; 0
    4844:	6b a1       	ldd	r22, Y+35	; 0x23
    4846:	ce 01       	movw	r24, r28
    4848:	0e 94 63 23 	call	0x46c6	; 0x46c6 <Lights::setBrightness(unsigned char, bool, bool)>
    484c:	0e 94 67 85 	call	0x10ace	; 0x10ace <millis>
    4850:	6e a3       	std	Y+38, r22	; 0x26
    4852:	7f a3       	std	Y+39, r23	; 0x27
    4854:	88 a7       	std	Y+40, r24	; 0x28
    4856:	99 a7       	std	Y+41, r25	; 0x29
    4858:	ce 01       	movw	r24, r28
    485a:	df 91       	pop	r29
    485c:	cf 91       	pop	r28
    485e:	ff 90       	pop	r15
    4860:	ef 90       	pop	r14
    4862:	df 90       	pop	r13
    4864:	cf 90       	pop	r12
    4866:	0c 94 57 23 	jmp	0x46ae	; 0x46ae <Lights::checkRelay()>
    486a:	83 30       	cpi	r24, 0x03	; 3
    486c:	91 05       	cpc	r25, r1
    486e:	71 f5       	brne	.+92     	; 0x48cc <Lights::checkDimming()+0x108>
    4870:	0e 94 67 85 	call	0x10ace	; 0x10ace <millis>
    4874:	ce a0       	ldd	r12, Y+38	; 0x26
    4876:	df a0       	ldd	r13, Y+39	; 0x27
    4878:	e8 a4       	ldd	r14, Y+40	; 0x28
    487a:	f9 a4       	ldd	r15, Y+41	; 0x29
    487c:	ab 01       	movw	r20, r22
    487e:	bc 01       	movw	r22, r24
    4880:	4c 19       	sub	r20, r12
    4882:	5d 09       	sbc	r21, r13
    4884:	6e 09       	sbc	r22, r14
    4886:	7f 09       	sbc	r23, r15
    4888:	ea a5       	ldd	r30, Y+42	; 0x2a
    488a:	fb a5       	ldd	r31, Y+43	; 0x2b
    488c:	01 90       	ld	r0, Z+
    488e:	f0 81       	ld	r31, Z
    4890:	e0 2d       	mov	r30, r0
    4892:	28 ee       	ldi	r18, 0xE8	; 232
    4894:	33 e0       	ldi	r19, 0x03	; 3
    4896:	e2 9f       	mul	r30, r18
    4898:	c0 01       	movw	r24, r0
    489a:	e3 9f       	mul	r30, r19
    489c:	90 0d       	add	r25, r0
    489e:	f2 9f       	mul	r31, r18
    48a0:	90 0d       	add	r25, r0
    48a2:	11 24       	eor	r1, r1
    48a4:	b0 e0       	ldi	r27, 0x00	; 0
    48a6:	a0 e0       	ldi	r26, 0x00	; 0
    48a8:	48 17       	cp	r20, r24
    48aa:	59 07       	cpc	r21, r25
    48ac:	6a 07       	cpc	r22, r26
    48ae:	7b 07       	cpc	r23, r27
    48b0:	98 f2       	brcs	.-90     	; 0x4858 <Lights::checkDimming()+0x94>
    48b2:	ec a5       	ldd	r30, Y+44	; 0x2c
    48b4:	fd a5       	ldd	r31, Y+45	; 0x2d
    48b6:	6b a1       	ldd	r22, Y+35	; 0x23
    48b8:	80 81       	ld	r24, Z
    48ba:	68 1b       	sub	r22, r24
    48bc:	6b a3       	std	Y+35, r22	; 0x23
    48be:	61 11       	cpse	r22, r1
    48c0:	02 c0       	rjmp	.+4      	; 0x48c6 <Lights::checkDimming()+0x102>
    48c2:	18 a2       	std	Y+32, r1	; 0x20
    48c4:	1f 8e       	std	Y+31, r1	; 0x1f
    48c6:	20 e0       	ldi	r18, 0x00	; 0
    48c8:	40 e0       	ldi	r20, 0x00	; 0
    48ca:	bd cf       	rjmp	.-134    	; 0x4846 <Lights::checkDimming()+0x82>
    48cc:	04 97       	sbiw	r24, 0x04	; 4
    48ce:	21 f6       	brne	.-120    	; 0x4858 <Lights::checkDimming()+0x94>
    48d0:	0e 94 67 85 	call	0x10ace	; 0x10ace <millis>
    48d4:	c9 8c       	ldd	r12, Y+25	; 0x19
    48d6:	da 8c       	ldd	r13, Y+26	; 0x1a
    48d8:	eb 8c       	ldd	r14, Y+27	; 0x1b
    48da:	fc 8c       	ldd	r15, Y+28	; 0x1c
    48dc:	9b 01       	movw	r18, r22
    48de:	ac 01       	movw	r20, r24
    48e0:	2c 19       	sub	r18, r12
    48e2:	3d 09       	sbc	r19, r13
    48e4:	4e 09       	sbc	r20, r14
    48e6:	5f 09       	sbc	r21, r15
    48e8:	69 01       	movw	r12, r18
    48ea:	7a 01       	movw	r14, r20
    48ec:	ec 89       	ldd	r30, Y+20	; 0x14
    48ee:	fd 89       	ldd	r31, Y+21	; 0x15
    48f0:	20 81       	ld	r18, Z
    48f2:	30 e0       	ldi	r19, 0x00	; 0
    48f4:	a0 e6       	ldi	r26, 0x60	; 96
    48f6:	ba ee       	ldi	r27, 0xEA	; 234
    48f8:	0e 94 33 92 	call	0x12466	; 0x12466 <__umulhisi3>
    48fc:	c6 16       	cp	r12, r22
    48fe:	d7 06       	cpc	r13, r23
    4900:	e8 06       	cpc	r14, r24
    4902:	f9 06       	cpc	r15, r25
    4904:	08 f4       	brcc	.+2      	; 0x4908 <Lights::checkDimming()+0x144>
    4906:	a8 cf       	rjmp	.-176    	; 0x4858 <Lights::checkDimming()+0x94>
    4908:	ce 01       	movw	r24, r28
    490a:	0e 94 88 24 	call	0x4910	; 0x4910 <Lights::dimLightsOnOff()>
    490e:	a4 cf       	rjmp	.-184    	; 0x4858 <Lights::checkDimming()+0x94>

00004910 <Lights::dimLightsOnOff()>:
_ZN6Lights14dimLightsOnOffEv():
    4910:	ef 92       	push	r14
    4912:	ff 92       	push	r15
    4914:	0f 93       	push	r16
    4916:	1f 93       	push	r17
    4918:	cf 93       	push	r28
    491a:	df 93       	push	r29
    491c:	ec 01       	movw	r28, r24
    491e:	8f 8d       	ldd	r24, Y+31	; 0x1f
    4920:	98 a1       	ldd	r25, Y+32	; 0x20
    4922:	84 30       	cpi	r24, 0x04	; 4
    4924:	91 05       	cpc	r25, r1
    4926:	89 f5       	brne	.+98     	; 0x498a <Lights::dimLightsOnOff()+0x7a>
    4928:	8e 89       	ldd	r24, Y+22	; 0x16
    492a:	9f 89       	ldd	r25, Y+23	; 0x17
    492c:	98 a3       	std	Y+32, r25	; 0x20
    492e:	8f 8f       	std	Y+31, r24	; 0x1f
    4930:	20 e0       	ldi	r18, 0x00	; 0
    4932:	40 e0       	ldi	r20, 0x00	; 0
    4934:	68 8d       	ldd	r22, Y+24	; 0x18
    4936:	ce 01       	movw	r24, r28
    4938:	0e 94 63 23 	call	0x46c6	; 0x46c6 <Lights::setBrightness(unsigned char, bool, bool)>
    493c:	0c 85       	ldd	r16, Y+12	; 0x0c
    493e:	1d 85       	ldd	r17, Y+13	; 0x0d
    4940:	d8 01       	movw	r26, r16
    4942:	ed 91       	ld	r30, X+
    4944:	fc 91       	ld	r31, X
    4946:	e2 80       	ldd	r14, Z+2	; 0x02
    4948:	f3 80       	ldd	r15, Z+3	; 0x03
    494a:	e8 81       	ld	r30, Y
    494c:	f9 81       	ldd	r31, Y+1	; 0x01
    494e:	36 97       	sbiw	r30, 0x06	; 6
    4950:	80 81       	ld	r24, Z
    4952:	91 81       	ldd	r25, Z+1	; 0x01
    4954:	40 e0       	ldi	r20, 0x00	; 0
    4956:	65 e6       	ldi	r22, 0x65	; 101
    4958:	79 e0       	ldi	r23, 0x09	; 9
    495a:	8c 0f       	add	r24, r28
    495c:	9d 1f       	adc	r25, r29
    495e:	0e 94 7e 19 	call	0x32fc	; 0x32fc <Common::getName(__FlashStringHelper const*, bool)>
    4962:	43 e0       	ldi	r20, 0x03	; 3
    4964:	bc 01       	movw	r22, r24
    4966:	c8 01       	movw	r24, r16
    4968:	f7 01       	movw	r30, r14
    496a:	19 95       	eicall
    496c:	8c 85       	ldd	r24, Y+12	; 0x0c
    496e:	9d 85       	ldd	r25, Y+13	; 0x0d
    4970:	0e 94 57 1b 	call	0x36ae	; 0x36ae <Module::getSoundObject()>
    4974:	0e 94 d3 2a 	call	0x55a6	; 0x55a6 <Sound::playOffSound()>
    4978:	ce 01       	movw	r24, r28
    497a:	df 91       	pop	r29
    497c:	cf 91       	pop	r28
    497e:	1f 91       	pop	r17
    4980:	0f 91       	pop	r16
    4982:	ff 90       	pop	r15
    4984:	ef 90       	pop	r14
    4986:	0c 94 e2 23 	jmp	0x47c4	; 0x47c4 <Lights::checkDimming()>
    498a:	9f 8b       	std	Y+23, r25	; 0x17
    498c:	8e 8b       	std	Y+22, r24	; 0x16
    498e:	8b a1       	ldd	r24, Y+35	; 0x23
    4990:	88 8f       	std	Y+24, r24	; 0x18
    4992:	84 e0       	ldi	r24, 0x04	; 4
    4994:	90 e0       	ldi	r25, 0x00	; 0
    4996:	98 a3       	std	Y+32, r25	; 0x20
    4998:	8f 8f       	std	Y+31, r24	; 0x1f
    499a:	20 e0       	ldi	r18, 0x00	; 0
    499c:	40 e0       	ldi	r20, 0x00	; 0
    499e:	61 e0       	ldi	r22, 0x01	; 1
    49a0:	ce 01       	movw	r24, r28
    49a2:	0e 94 63 23 	call	0x46c6	; 0x46c6 <Lights::setBrightness(unsigned char, bool, bool)>
    49a6:	0e 94 67 85 	call	0x10ace	; 0x10ace <millis>
    49aa:	69 8f       	std	Y+25, r22	; 0x19
    49ac:	7a 8f       	std	Y+26, r23	; 0x1a
    49ae:	8b 8f       	std	Y+27, r24	; 0x1b
    49b0:	9c 8f       	std	Y+28, r25	; 0x1c
    49b2:	0c 85       	ldd	r16, Y+12	; 0x0c
    49b4:	1d 85       	ldd	r17, Y+13	; 0x0d
    49b6:	d8 01       	movw	r26, r16
    49b8:	ed 91       	ld	r30, X+
    49ba:	fc 91       	ld	r31, X
    49bc:	e2 80       	ldd	r14, Z+2	; 0x02
    49be:	f3 80       	ldd	r15, Z+3	; 0x03
    49c0:	e8 81       	ld	r30, Y
    49c2:	f9 81       	ldd	r31, Y+1	; 0x01
    49c4:	36 97       	sbiw	r30, 0x06	; 6
    49c6:	80 81       	ld	r24, Z
    49c8:	91 81       	ldd	r25, Z+1	; 0x01
    49ca:	40 e0       	ldi	r20, 0x00	; 0
    49cc:	6a e5       	ldi	r22, 0x5A	; 90
    49ce:	79 e0       	ldi	r23, 0x09	; 9
    49d0:	8c 0f       	add	r24, r28
    49d2:	9d 1f       	adc	r25, r29
    49d4:	0e 94 7e 19 	call	0x32fc	; 0x32fc <Common::getName(__FlashStringHelper const*, bool)>
    49d8:	43 e0       	ldi	r20, 0x03	; 3
    49da:	bc 01       	movw	r22, r24
    49dc:	c8 01       	movw	r24, r16
    49de:	f7 01       	movw	r30, r14
    49e0:	19 95       	eicall
    49e2:	8c 85       	ldd	r24, Y+12	; 0x0c
    49e4:	9d 85       	ldd	r25, Y+13	; 0x0d
    49e6:	0e 94 57 1b 	call	0x36ae	; 0x36ae <Module::getSoundObject()>
    49ea:	0e 94 cf 2a 	call	0x559e	; 0x559e <Sound::playOnSound()>
    49ee:	c4 cf       	rjmp	.-120    	; 0x4978 <Lights::dimLightsOnOff()+0x68>

000049f0 <Lights::setDimDuration(int)>:
_ZN6Lights14setDimDurationEi():
    49f0:	0f 93       	push	r16
    49f2:	1f 93       	push	r17
    49f4:	cf 93       	push	r28
    49f6:	df 93       	push	r29
    49f8:	fc 01       	movw	r30, r24
    49fa:	a4 89       	ldd	r26, Z+20	; 0x14
    49fc:	b5 89       	ldd	r27, Z+21	; 0x15
    49fe:	6c 93       	st	X, r22
    4a00:	c4 85       	ldd	r28, Z+12	; 0x0c
    4a02:	d5 85       	ldd	r29, Z+13	; 0x0d
    4a04:	a8 81       	ld	r26, Y
    4a06:	b9 81       	ldd	r27, Y+1	; 0x01
    4a08:	12 96       	adiw	r26, 0x02	; 2
    4a0a:	0d 91       	ld	r16, X+
    4a0c:	1c 91       	ld	r17, X
    4a0e:	a0 81       	ld	r26, Z
    4a10:	b1 81       	ldd	r27, Z+1	; 0x01
    4a12:	16 97       	sbiw	r26, 0x06	; 6
    4a14:	8d 91       	ld	r24, X+
    4a16:	9c 91       	ld	r25, X
    4a18:	40 e0       	ldi	r20, 0x00	; 0
    4a1a:	67 e3       	ldi	r22, 0x37	; 55
    4a1c:	79 e0       	ldi	r23, 0x09	; 9
    4a1e:	8e 0f       	add	r24, r30
    4a20:	9f 1f       	adc	r25, r31
    4a22:	0e 94 7e 19 	call	0x32fc	; 0x32fc <Common::getName(__FlashStringHelper const*, bool)>
    4a26:	43 e0       	ldi	r20, 0x03	; 3
    4a28:	bc 01       	movw	r22, r24
    4a2a:	ce 01       	movw	r24, r28
    4a2c:	f8 01       	movw	r30, r16
    4a2e:	df 91       	pop	r29
    4a30:	cf 91       	pop	r28
    4a32:	1f 91       	pop	r17
    4a34:	0f 91       	pop	r16
    4a36:	19 94       	eijmp

00004a38 <Lights::setLightOnOff(bool, bool)>:
_ZN6Lights13setLightOnOffEbb():
    4a38:	bf 92       	push	r11
    4a3a:	cf 92       	push	r12
    4a3c:	df 92       	push	r13
    4a3e:	ef 92       	push	r14
    4a40:	ff 92       	push	r15
    4a42:	0f 93       	push	r16
    4a44:	1f 93       	push	r17
    4a46:	cf 93       	push	r28
    4a48:	df 93       	push	r29
    4a4a:	ec 01       	movw	r28, r24
    4a4c:	b6 2e       	mov	r11, r22
    4a4e:	0c 85       	ldd	r16, Y+12	; 0x0c
    4a50:	1d 85       	ldd	r17, Y+13	; 0x0d
    4a52:	66 23       	and	r22, r22
    4a54:	09 f4       	brne	.+2      	; 0x4a58 <Lights::setLightOnOff(bool, bool)+0x20>
    4a56:	52 c0       	rjmp	.+164    	; 0x4afc <Lights::setLightOnOff(bool, bool)+0xc4>
    4a58:	44 23       	and	r20, r20
    4a5a:	d9 f0       	breq	.+54     	; 0x4a92 <Lights::setLightOnOff(bool, bool)+0x5a>
    4a5c:	d8 01       	movw	r26, r16
    4a5e:	ed 91       	ld	r30, X+
    4a60:	fc 91       	ld	r31, X
    4a62:	c2 80       	ldd	r12, Z+2	; 0x02
    4a64:	d3 80       	ldd	r13, Z+3	; 0x03
    4a66:	e8 81       	ld	r30, Y
    4a68:	f9 81       	ldd	r31, Y+1	; 0x01
    4a6a:	36 97       	sbiw	r30, 0x06	; 6
    4a6c:	e0 80       	ld	r14, Z
    4a6e:	f1 80       	ldd	r15, Z+1	; 0x01
    4a70:	e8 0e       	add	r14, r24
    4a72:	f9 1e       	adc	r15, r25
_ZN6Lights13getStatusTextEb():
    4a74:	ed 8d       	ldd	r30, Y+29	; 0x1d
    4a76:	fe 8d       	ldd	r31, Y+30	; 0x1e
    4a78:	80 81       	ld	r24, Z
    4a7a:	0e 94 f6 34 	call	0x69ec	; 0x69ec <toText_onOff(bool)>
_ZN6Lights13setLightOnOffEbb():
    4a7e:	40 e0       	ldi	r20, 0x00	; 0
    4a80:	bc 01       	movw	r22, r24
    4a82:	c7 01       	movw	r24, r14
    4a84:	0e 94 9f 19 	call	0x333e	; 0x333e <Common::getName(char*, bool)>
    4a88:	43 e0       	ldi	r20, 0x03	; 3
    4a8a:	bc 01       	movw	r22, r24
    4a8c:	c8 01       	movw	r24, r16
    4a8e:	f6 01       	movw	r30, r12
    4a90:	19 95       	eicall
    4a92:	8c 85       	ldd	r24, Y+12	; 0x0c
    4a94:	9d 85       	ldd	r25, Y+13	; 0x0d
    4a96:	0e 94 57 1b 	call	0x36ae	; 0x36ae <Module::getSoundObject()>
    4a9a:	0e 94 cf 2a 	call	0x559e	; 0x559e <Sound::playOnSound()>
    4a9e:	ec a1       	ldd	r30, Y+36	; 0x24
    4aa0:	fd a1       	ldd	r31, Y+37	; 0x25
    4aa2:	80 81       	ld	r24, Z
    4aa4:	88 23       	and	r24, r24
    4aa6:	f9 f0       	breq	.+62     	; 0x4ae6 <Lights::setLightOnOff(bool, bool)+0xae>
    4aa8:	8f 8d       	ldd	r24, Y+31	; 0x1f
    4aaa:	98 a1       	ldd	r25, Y+32	; 0x20
    4aac:	01 97       	sbiw	r24, 0x01	; 1
    4aae:	02 97       	sbiw	r24, 0x02	; 2
    4ab0:	d0 f0       	brcs	.+52     	; 0x4ae6 <Lights::setLightOnOff(bool, bool)+0xae>
    4ab2:	82 e0       	ldi	r24, 0x02	; 2
    4ab4:	90 e0       	ldi	r25, 0x00	; 0
    4ab6:	98 a3       	std	Y+32, r25	; 0x20
    4ab8:	8f 8f       	std	Y+31, r24	; 0x1f
    4aba:	1b a2       	std	Y+35, r1	; 0x23
    4abc:	20 e0       	ldi	r18, 0x00	; 0
    4abe:	40 e0       	ldi	r20, 0x00	; 0
    4ac0:	60 e0       	ldi	r22, 0x00	; 0
    4ac2:	ce 01       	movw	r24, r28
    4ac4:	0e 94 63 23 	call	0x46c6	; 0x46c6 <Lights::setBrightness(unsigned char, bool, bool)>
    4ac8:	ed 8d       	ldd	r30, Y+29	; 0x1d
    4aca:	fe 8d       	ldd	r31, Y+30	; 0x1e
    4acc:	b0 82       	st	Z, r11
    4ace:	ce 01       	movw	r24, r28
    4ad0:	df 91       	pop	r29
    4ad2:	cf 91       	pop	r28
    4ad4:	1f 91       	pop	r17
    4ad6:	0f 91       	pop	r16
    4ad8:	ff 90       	pop	r15
    4ada:	ef 90       	pop	r14
    4adc:	df 90       	pop	r13
    4ade:	cf 90       	pop	r12
    4ae0:	bf 90       	pop	r11
    4ae2:	0c 94 57 23 	jmp	0x46ae	; 0x46ae <Lights::checkRelay()>
    4ae6:	81 e0       	ldi	r24, 0x01	; 1
    4ae8:	90 e0       	ldi	r25, 0x00	; 0
    4aea:	98 a3       	std	Y+32, r25	; 0x20
    4aec:	8f 8f       	std	Y+31, r24	; 0x1f
    4aee:	ea 85       	ldd	r30, Y+10	; 0x0a
    4af0:	fb 85       	ldd	r31, Y+11	; 0x0b
    4af2:	60 81       	ld	r22, Z
    4af4:	6b a3       	std	Y+35, r22	; 0x23
    4af6:	20 e0       	ldi	r18, 0x00	; 0
    4af8:	40 e0       	ldi	r20, 0x00	; 0
    4afa:	e3 cf       	rjmp	.-58     	; 0x4ac2 <Lights::setLightOnOff(bool, bool)+0x8a>
    4afc:	44 23       	and	r20, r20
    4afe:	d9 f0       	breq	.+54     	; 0x4b36 <Lights::setLightOnOff(bool, bool)+0xfe>
    4b00:	d8 01       	movw	r26, r16
    4b02:	ed 91       	ld	r30, X+
    4b04:	fc 91       	ld	r31, X
    4b06:	c2 80       	ldd	r12, Z+2	; 0x02
    4b08:	d3 80       	ldd	r13, Z+3	; 0x03
    4b0a:	e8 81       	ld	r30, Y
    4b0c:	f9 81       	ldd	r31, Y+1	; 0x01
    4b0e:	36 97       	sbiw	r30, 0x06	; 6
    4b10:	e0 80       	ld	r14, Z
    4b12:	f1 80       	ldd	r15, Z+1	; 0x01
    4b14:	e8 0e       	add	r14, r24
    4b16:	f9 1e       	adc	r15, r25
_ZN6Lights13getStatusTextEb():
    4b18:	ed 8d       	ldd	r30, Y+29	; 0x1d
    4b1a:	fe 8d       	ldd	r31, Y+30	; 0x1e
    4b1c:	80 81       	ld	r24, Z
    4b1e:	0e 94 f6 34 	call	0x69ec	; 0x69ec <toText_onOff(bool)>
_ZN6Lights13setLightOnOffEbb():
    4b22:	40 e0       	ldi	r20, 0x00	; 0
    4b24:	bc 01       	movw	r22, r24
    4b26:	c7 01       	movw	r24, r14
    4b28:	0e 94 9f 19 	call	0x333e	; 0x333e <Common::getName(char*, bool)>
    4b2c:	43 e0       	ldi	r20, 0x03	; 3
    4b2e:	bc 01       	movw	r22, r24
    4b30:	c8 01       	movw	r24, r16
    4b32:	f6 01       	movw	r30, r12
    4b34:	19 95       	eicall
    4b36:	8c 85       	ldd	r24, Y+12	; 0x0c
    4b38:	9d 85       	ldd	r25, Y+13	; 0x0d
    4b3a:	0e 94 57 1b 	call	0x36ae	; 0x36ae <Module::getSoundObject()>
    4b3e:	0e 94 d3 2a 	call	0x55a6	; 0x55a6 <Sound::playOffSound()>
    4b42:	ec a1       	ldd	r30, Y+36	; 0x24
    4b44:	fd a1       	ldd	r31, Y+37	; 0x25
    4b46:	80 81       	ld	r24, Z
    4b48:	88 23       	and	r24, r24
    4b4a:	59 f0       	breq	.+22     	; 0x4b62 <Lights::setLightOnOff(bool, bool)+0x12a>
    4b4c:	8f 8d       	ldd	r24, Y+31	; 0x1f
    4b4e:	98 a1       	ldd	r25, Y+32	; 0x20
    4b50:	00 97       	sbiw	r24, 0x00	; 0
    4b52:	39 f0       	breq	.+14     	; 0x4b62 <Lights::setLightOnOff(bool, bool)+0x12a>
    4b54:	03 97       	sbiw	r24, 0x03	; 3
    4b56:	29 f0       	breq	.+10     	; 0x4b62 <Lights::setLightOnOff(bool, bool)+0x12a>
    4b58:	83 e0       	ldi	r24, 0x03	; 3
    4b5a:	90 e0       	ldi	r25, 0x00	; 0
    4b5c:	98 a3       	std	Y+32, r25	; 0x20
    4b5e:	8f 8f       	std	Y+31, r24	; 0x1f
    4b60:	b3 cf       	rjmp	.-154    	; 0x4ac8 <Lights::setLightOnOff(bool, bool)+0x90>
    4b62:	18 a2       	std	Y+32, r1	; 0x20
    4b64:	1f 8e       	std	Y+31, r1	; 0x1f
    4b66:	b0 cf       	rjmp	.-160    	; 0x4ac8 <Lights::setLightOnOff(bool, bool)+0x90>

00004b68 <Lights::Lights(__FlashStringHelper const*, Module*, Settings::LightsSettings*)>:
_ZN6LightsC4EPK19__FlashStringHelperP6ModulePN8Settings14LightsSettingsE():
    4b68:	af 92       	push	r10
    4b6a:	bf 92       	push	r11
    4b6c:	cf 92       	push	r12
    4b6e:	df 92       	push	r13
    4b70:	ef 92       	push	r14
    4b72:	ff 92       	push	r15
    4b74:	0f 93       	push	r16
    4b76:	1f 93       	push	r17
    4b78:	cf 93       	push	r28
    4b7a:	df 93       	push	r29
    4b7c:	ec 01       	movw	r28, r24
    4b7e:	6b 01       	movw	r12, r22
    4b80:	5a 01       	movw	r10, r20
    4b82:	67 2b       	or	r22, r23
    4b84:	09 f4       	brne	.+2      	; 0x4b88 <Lights::Lights(__FlashStringHelper const*, Module*, Settings::LightsSettings*)+0x20>
    4b86:	be c0       	rjmp	.+380    	; 0x4d04 <Lights::Lights(__FlashStringHelper const*, Module*, Settings::LightsSettings*)+0x19c>
    4b88:	b9 01       	movw	r22, r18
    4b8a:	8e 96       	adiw	r24, 0x2e	; 46
    4b8c:	0e 94 f7 18 	call	0x31ee	; 0x31ee <Common::Common(__FlashStringHelper const*)>
    4b90:	80 ea       	ldi	r24, 0xA0	; 160
    4b92:	94 e0       	ldi	r25, 0x04	; 4
    4b94:	99 83       	std	Y+1, r25	; 0x01
    4b96:	88 83       	st	Y, r24
    4b98:	c1 14       	cp	r12, r1
    4b9a:	d1 04       	cpc	r13, r1
    4b9c:	09 f0       	breq	.+2      	; 0x4ba0 <Lights::Lights(__FlashStringHelper const*, Module*, Settings::LightsSettings*)+0x38>
    4b9e:	a8 c0       	rjmp	.+336    	; 0x4cf0 <Lights::Lights(__FlashStringHelper const*, Module*, Settings::LightsSettings*)+0x188>
    4ba0:	f5 01       	movw	r30, r10
    4ba2:	22 81       	ldd	r18, Z+2	; 0x02
    4ba4:	33 81       	ldd	r19, Z+3	; 0x03
    4ba6:	06 97       	sbiw	r24, 0x06	; 6
    4ba8:	fc 01       	movw	r30, r24
    4baa:	80 81       	ld	r24, Z
    4bac:	91 81       	ldd	r25, Z+1	; 0x01
    4bae:	8c 0f       	add	r24, r28
    4bb0:	9d 1f       	adc	r25, r29
    4bb2:	fc 01       	movw	r30, r24
    4bb4:	31 83       	std	Z+1, r19	; 0x01
    4bb6:	20 83       	st	Z, r18
    4bb8:	1f 8a       	std	Y+23, r1	; 0x17
    4bba:	1e 8a       	std	Y+22, r1	; 0x16
    4bbc:	19 8e       	std	Y+25, r1	; 0x19
    4bbe:	1a 8e       	std	Y+26, r1	; 0x1a
    4bc0:	1b 8e       	std	Y+27, r1	; 0x1b
    4bc2:	1c 8e       	std	Y+28, r1	; 0x1c
    4bc4:	18 a2       	std	Y+32, r1	; 0x20
    4bc6:	1f 8e       	std	Y+31, r1	; 0x1f
    4bc8:	1e a2       	std	Y+38, r1	; 0x26
    4bca:	1f a2       	std	Y+39, r1	; 0x27
    4bcc:	18 a6       	std	Y+40, r1	; 0x28
    4bce:	19 a6       	std	Y+41, r1	; 0x29
    4bd0:	1d 87       	std	Y+13, r17	; 0x0d
    4bd2:	0c 87       	std	Y+12, r16	; 0x0c
    4bd4:	ff 86       	std	Y+15, r15	; 0x0f
    4bd6:	ee 86       	std	Y+14, r14	; 0x0e
    4bd8:	c7 01       	movw	r24, r14
    4bda:	01 96       	adiw	r24, 0x01	; 1
    4bdc:	99 8b       	std	Y+17, r25	; 0x11
    4bde:	88 8b       	std	Y+16, r24	; 0x10
    4be0:	01 96       	adiw	r24, 0x01	; 1
    4be2:	9b 8b       	std	Y+19, r25	; 0x13
    4be4:	8a 8b       	std	Y+18, r24	; 0x12
    4be6:	01 96       	adiw	r24, 0x01	; 1
    4be8:	9d 8b       	std	Y+21, r25	; 0x15
    4bea:	8c 8b       	std	Y+20, r24	; 0x14
    4bec:	01 96       	adiw	r24, 0x01	; 1
    4bee:	9e 8f       	std	Y+30, r25	; 0x1e
    4bf0:	8d 8f       	std	Y+29, r24	; 0x1d
    4bf2:	01 96       	adiw	r24, 0x01	; 1
    4bf4:	9b 87       	std	Y+11, r25	; 0x0b
    4bf6:	8a 87       	std	Y+10, r24	; 0x0a
    4bf8:	06 96       	adiw	r24, 0x06	; 6
    4bfa:	9d a3       	std	Y+37, r25	; 0x25
    4bfc:	8c a3       	std	Y+36, r24	; 0x24
    4bfe:	01 96       	adiw	r24, 0x01	; 1
    4c00:	9b a7       	std	Y+43, r25	; 0x2b
    4c02:	8a a7       	std	Y+42, r24	; 0x2a
    4c04:	02 96       	adiw	r24, 0x02	; 2
    4c06:	9d a7       	std	Y+45, r25	; 0x2d
    4c08:	8c a7       	std	Y+44, r24	; 0x2c
    4c0a:	08 97       	sbiw	r24, 0x08	; 8
    4c0c:	9a a3       	std	Y+34, r25	; 0x22
    4c0e:	89 a3       	std	Y+33, r24	; 0x21
    4c10:	01 96       	adiw	r24, 0x01	; 1
    4c12:	9b 83       	std	Y+3, r25	; 0x03
    4c14:	8a 83       	std	Y+2, r24	; 0x02
    4c16:	01 96       	adiw	r24, 0x01	; 1
    4c18:	9d 83       	std	Y+5, r25	; 0x05
    4c1a:	8c 83       	std	Y+4, r24	; 0x04
    4c1c:	01 96       	adiw	r24, 0x01	; 1
    4c1e:	9f 83       	std	Y+7, r25	; 0x07
    4c20:	8e 83       	std	Y+6, r24	; 0x06
    4c22:	01 96       	adiw	r24, 0x01	; 1
    4c24:	99 87       	std	Y+9, r25	; 0x09
    4c26:	88 87       	std	Y+8, r24	; 0x08
    4c28:	61 e0       	ldi	r22, 0x01	; 1
    4c2a:	f7 01       	movw	r30, r14
    4c2c:	80 81       	ld	r24, Z
    4c2e:	0e 94 86 87 	call	0x10f0c	; 0x10f0c <pinMode>
    4c32:	ee 85       	ldd	r30, Y+14	; 0x0e
    4c34:	ff 85       	ldd	r31, Y+15	; 0x0f
    4c36:	61 e0       	ldi	r22, 0x01	; 1
    4c38:	80 81       	ld	r24, Z
    4c3a:	0e 94 c2 87 	call	0x10f84	; 0x10f84 <digitalWrite>
    4c3e:	e8 89       	ldd	r30, Y+16	; 0x10
    4c40:	f9 89       	ldd	r31, Y+17	; 0x11
    4c42:	61 e0       	ldi	r22, 0x01	; 1
    4c44:	80 81       	ld	r24, Z
    4c46:	0e 94 86 87 	call	0x10f0c	; 0x10f0c <pinMode>
    4c4a:	ec a1       	ldd	r30, Y+36	; 0x24
    4c4c:	fd a1       	ldd	r31, Y+37	; 0x25
    4c4e:	80 81       	ld	r24, Z
    4c50:	88 23       	and	r24, r24
    4c52:	09 f4       	brne	.+2      	; 0x4c56 <Lights::Lights(__FlashStringHelper const*, Module*, Settings::LightsSettings*)+0xee>
    4c54:	52 c0       	rjmp	.+164    	; 0x4cfa <Lights::Lights(__FlashStringHelper const*, Module*, Settings::LightsSettings*)+0x192>
    4c56:	1b a2       	std	Y+35, r1	; 0x23
    4c58:	20 e0       	ldi	r18, 0x00	; 0
    4c5a:	40 e0       	ldi	r20, 0x00	; 0
    4c5c:	6b a1       	ldd	r22, Y+35	; 0x23
    4c5e:	ce 01       	movw	r24, r28
    4c60:	0e 94 63 23 	call	0x46c6	; 0x46c6 <Lights::setBrightness(unsigned char, bool, bool)>
    4c64:	ed 8d       	ldd	r30, Y+29	; 0x1d
    4c66:	fe 8d       	ldd	r31, Y+30	; 0x1e
    4c68:	40 e0       	ldi	r20, 0x00	; 0
    4c6a:	60 81       	ld	r22, Z
    4c6c:	ce 01       	movw	r24, r28
    4c6e:	0e 94 1c 25 	call	0x4a38	; 0x4a38 <Lights::setLightOnOff(bool, bool)>
    4c72:	ce 01       	movw	r24, r28
    4c74:	0e 94 57 23 	call	0x46ae	; 0x46ae <Lights::checkRelay()>
    4c78:	6e e2       	ldi	r22, 0x2E	; 46
    4c7a:	70 e0       	ldi	r23, 0x00	; 0
    4c7c:	c1 14       	cp	r12, r1
    4c7e:	d1 04       	cpc	r13, r1
    4c80:	29 f4       	brne	.+10     	; 0x4c8c <Lights::Lights(__FlashStringHelper const*, Module*, Settings::LightsSettings*)+0x124>
    4c82:	e8 81       	ld	r30, Y
    4c84:	f9 81       	ldd	r31, Y+1	; 0x01
    4c86:	36 97       	sbiw	r30, 0x06	; 6
    4c88:	60 81       	ld	r22, Z
    4c8a:	71 81       	ldd	r23, Z+1	; 0x01
    4c8c:	6c 0f       	add	r22, r28
    4c8e:	7d 1f       	adc	r23, r29
    4c90:	c8 01       	movw	r24, r16
    4c92:	0e 94 5b 1b 	call	0x36b6	; 0x36b6 <Module::addToReportQueue(Common*)>
    4c96:	6e e2       	ldi	r22, 0x2E	; 46
    4c98:	70 e0       	ldi	r23, 0x00	; 0
    4c9a:	c1 14       	cp	r12, r1
    4c9c:	d1 04       	cpc	r13, r1
    4c9e:	29 f4       	brne	.+10     	; 0x4caa <Lights::Lights(__FlashStringHelper const*, Module*, Settings::LightsSettings*)+0x142>
    4ca0:	e8 81       	ld	r30, Y
    4ca2:	f9 81       	ldd	r31, Y+1	; 0x01
    4ca4:	36 97       	sbiw	r30, 0x06	; 6
    4ca6:	60 81       	ld	r22, Z
    4ca8:	71 81       	ldd	r23, Z+1	; 0x01
    4caa:	6c 0f       	add	r22, r28
    4cac:	7d 1f       	adc	r23, r29
    4cae:	c8 01       	movw	r24, r16
    4cb0:	0e 94 75 1b 	call	0x36ea	; 0x36ea <Module::addToRefreshQueue_Sec(Common*)>
    4cb4:	6e e2       	ldi	r22, 0x2E	; 46
    4cb6:	70 e0       	ldi	r23, 0x00	; 0
    4cb8:	cd 28       	or	r12, r13
    4cba:	29 f4       	brne	.+10     	; 0x4cc6 <Lights::Lights(__FlashStringHelper const*, Module*, Settings::LightsSettings*)+0x15e>
    4cbc:	e8 81       	ld	r30, Y
    4cbe:	f9 81       	ldd	r31, Y+1	; 0x01
    4cc0:	36 97       	sbiw	r30, 0x06	; 6
    4cc2:	60 81       	ld	r22, Z
    4cc4:	71 81       	ldd	r23, Z+1	; 0x01
    4cc6:	6c 0f       	add	r22, r28
    4cc8:	7d 1f       	adc	r23, r29
    4cca:	c8 01       	movw	r24, r16
    4ccc:	0e 94 a9 1b 	call	0x3752	; 0x3752 <Module::addToRefreshQueue_Minute(Common*)>
    4cd0:	43 e0       	ldi	r20, 0x03	; 3
    4cd2:	61 e0       	ldi	r22, 0x01	; 1
    4cd4:	85 ea       	ldi	r24, 0xA5	; 165
    4cd6:	99 e0       	ldi	r25, 0x09	; 9
    4cd8:	df 91       	pop	r29
    4cda:	cf 91       	pop	r28
    4cdc:	1f 91       	pop	r17
    4cde:	0f 91       	pop	r16
    4ce0:	ff 90       	pop	r15
    4ce2:	ef 90       	pop	r14
    4ce4:	df 90       	pop	r13
    4ce6:	cf 90       	pop	r12
    4ce8:	bf 90       	pop	r11
    4cea:	af 90       	pop	r10
    4cec:	0c 94 85 16 	jmp	0x2d0a	; 0x2d0a <logToSerials(__FlashStringHelper const*, bool, unsigned char)>
    4cf0:	24 eb       	ldi	r18, 0xB4	; 180
    4cf2:	34 e0       	ldi	r19, 0x04	; 4
    4cf4:	8e e2       	ldi	r24, 0x2E	; 46
    4cf6:	90 e0       	ldi	r25, 0x00	; 0
    4cf8:	5a cf       	rjmp	.-332    	; 0x4bae <Lights::Lights(__FlashStringHelper const*, Module*, Settings::LightsSettings*)+0x46>
    4cfa:	ea 85       	ldd	r30, Y+10	; 0x0a
    4cfc:	fb 85       	ldd	r31, Y+11	; 0x0b
    4cfe:	80 81       	ld	r24, Z
    4d00:	8b a3       	std	Y+35, r24	; 0x23
    4d02:	aa cf       	rjmp	.-172    	; 0x4c58 <Lights::Lights(__FlashStringHelper const*, Module*, Settings::LightsSettings*)+0xf0>
    4d04:	fa 01       	movw	r30, r20
    4d06:	80 81       	ld	r24, Z
    4d08:	91 81       	ldd	r25, Z+1	; 0x01
    4d0a:	44 cf       	rjmp	.-376    	; 0x4b94 <Lights::Lights(__FlashStringHelper const*, Module*, Settings::LightsSettings*)+0x2c>

00004d0c <Lights::Lights(__FlashStringHelper const*, Module*, Settings::LightsSettings*)>:
_ZN6LightsC2EPK19__FlashStringHelperP6ModulePN8Settings14LightsSettingsE():
    4d0c:	ef 92       	push	r14
    4d0e:	ff 92       	push	r15
    4d10:	0f 93       	push	r16
    4d12:	1f 93       	push	r17
    4d14:	78 01       	movw	r14, r16
    4d16:	89 01       	movw	r16, r18
    4d18:	9a 01       	movw	r18, r20
    4d1a:	ab 01       	movw	r20, r22
    4d1c:	70 e0       	ldi	r23, 0x00	; 0
    4d1e:	60 e0       	ldi	r22, 0x00	; 0
    4d20:	0e 94 b4 25 	call	0x4b68	; 0x4b68 <Lights::Lights(__FlashStringHelper const*, Module*, Settings::LightsSettings*)>
    4d24:	1f 91       	pop	r17
    4d26:	0f 91       	pop	r16
    4d28:	ff 90       	pop	r15
    4d2a:	ef 90       	pop	r14
    4d2c:	08 95       	ret

00004d2e <Lights::checkTimer()>:
_ZN6Lights10checkTimerEv():
    4d2e:	4f 92       	push	r4
    4d30:	5f 92       	push	r5
    4d32:	6f 92       	push	r6
    4d34:	7f 92       	push	r7
    4d36:	af 92       	push	r10
    4d38:	bf 92       	push	r11
    4d3a:	df 92       	push	r13
    4d3c:	ef 92       	push	r14
    4d3e:	ff 92       	push	r15
    4d40:	0f 93       	push	r16
    4d42:	1f 93       	push	r17
    4d44:	cf 93       	push	r28
    4d46:	df 93       	push	r29
    4d48:	dc 01       	movw	r26, r24
    4d4a:	91 96       	adiw	r26, 0x21	; 33
    4d4c:	ed 91       	ld	r30, X+
    4d4e:	fc 91       	ld	r31, X
    4d50:	20 81       	ld	r18, Z
    4d52:	22 23       	and	r18, r18
    4d54:	e9 f1       	breq	.+122    	; 0x4dd0 <Lights::checkTimer()+0xa2>
    4d56:	ec 01       	movw	r28, r24
    4d58:	0e 94 5c 7c 	call	0xf8b8	; 0xf8b8 <now()>
    4d5c:	2b 01       	movw	r4, r22
    4d5e:	3c 01       	movw	r6, r24
    4d60:	ea 81       	ldd	r30, Y+2	; 0x02
    4d62:	fb 81       	ldd	r31, Y+3	; 0x03
    4d64:	80 81       	ld	r24, Z
    4d66:	94 e6       	ldi	r25, 0x64	; 100
    4d68:	d9 2e       	mov	r13, r25
    4d6a:	ec 81       	ldd	r30, Y+4	; 0x04
    4d6c:	fd 81       	ldd	r31, Y+5	; 0x05
    4d6e:	e0 80       	ld	r14, Z
    4d70:	f1 2c       	mov	r15, r1
    4d72:	8d 9d       	mul	r24, r13
    4d74:	e0 0c       	add	r14, r0
    4d76:	f1 1c       	adc	r15, r1
    4d78:	11 24       	eor	r1, r1
    4d7a:	ee 81       	ldd	r30, Y+6	; 0x06
    4d7c:	ff 81       	ldd	r31, Y+7	; 0x07
    4d7e:	80 81       	ld	r24, Z
    4d80:	e8 85       	ldd	r30, Y+8	; 0x08
    4d82:	f9 85       	ldd	r31, Y+9	; 0x09
    4d84:	00 81       	ld	r16, Z
    4d86:	10 e0       	ldi	r17, 0x00	; 0
    4d88:	8d 9d       	mul	r24, r13
    4d8a:	00 0d       	add	r16, r0
    4d8c:	11 1d       	adc	r17, r1
    4d8e:	11 24       	eor	r1, r1
    4d90:	c3 01       	movw	r24, r6
    4d92:	b2 01       	movw	r22, r4
    4d94:	0e 94 03 7c 	call	0xf806	; 0xf806 <hour(unsigned long)>
    4d98:	5c 01       	movw	r10, r24
    4d9a:	c3 01       	movw	r24, r6
    4d9c:	b2 01       	movw	r22, r4
    4d9e:	0e 94 09 7c 	call	0xf812	; 0xf812 <minute(unsigned long)>
    4da2:	da 9c       	mul	r13, r10
    4da4:	90 01       	movw	r18, r0
    4da6:	db 9c       	mul	r13, r11
    4da8:	30 0d       	add	r19, r0
    4daa:	11 24       	eor	r1, r1
    4dac:	82 0f       	add	r24, r18
    4dae:	93 1f       	adc	r25, r19
    4db0:	ed 8d       	ldd	r30, Y+29	; 0x1d
    4db2:	fe 8d       	ldd	r31, Y+30	; 0x1e
    4db4:	20 81       	ld	r18, Z
    4db6:	0e 15       	cp	r16, r14
    4db8:	1f 05       	cpc	r17, r15
    4dba:	64 f1       	brlt	.+88     	; 0x4e14 <Lights::checkTimer()+0xe6>
    4dbc:	8e 15       	cp	r24, r14
    4dbe:	9f 05       	cpc	r25, r15
    4dc0:	ac f0       	brlt	.+42     	; 0x4dec <Lights::checkTimer()+0xbe>
    4dc2:	80 17       	cp	r24, r16
    4dc4:	91 07       	cpc	r25, r17
    4dc6:	94 f4       	brge	.+36     	; 0x4dec <Lights::checkTimer()+0xbe>
    4dc8:	41 e0       	ldi	r20, 0x01	; 1
    4dca:	61 e0       	ldi	r22, 0x01	; 1
    4dcc:	22 23       	and	r18, r18
    4dce:	91 f0       	breq	.+36     	; 0x4df4 <Lights::checkTimer()+0xc6>
    4dd0:	df 91       	pop	r29
    4dd2:	cf 91       	pop	r28
    4dd4:	1f 91       	pop	r17
    4dd6:	0f 91       	pop	r16
    4dd8:	ff 90       	pop	r15
    4dda:	ef 90       	pop	r14
    4ddc:	df 90       	pop	r13
    4dde:	bf 90       	pop	r11
    4de0:	af 90       	pop	r10
    4de2:	7f 90       	pop	r7
    4de4:	6f 90       	pop	r6
    4de6:	5f 90       	pop	r5
    4de8:	4f 90       	pop	r4
    4dea:	08 95       	ret
    4dec:	22 23       	and	r18, r18
    4dee:	81 f3       	breq	.-32     	; 0x4dd0 <Lights::checkTimer()+0xa2>
    4df0:	41 e0       	ldi	r20, 0x01	; 1
    4df2:	60 e0       	ldi	r22, 0x00	; 0
    4df4:	ce 01       	movw	r24, r28
    4df6:	df 91       	pop	r29
    4df8:	cf 91       	pop	r28
    4dfa:	1f 91       	pop	r17
    4dfc:	0f 91       	pop	r16
    4dfe:	ff 90       	pop	r15
    4e00:	ef 90       	pop	r14
    4e02:	df 90       	pop	r13
    4e04:	bf 90       	pop	r11
    4e06:	af 90       	pop	r10
    4e08:	7f 90       	pop	r7
    4e0a:	6f 90       	pop	r6
    4e0c:	5f 90       	pop	r5
    4e0e:	4f 90       	pop	r4
    4e10:	0c 94 1c 25 	jmp	0x4a38	; 0x4a38 <Lights::setLightOnOff(bool, bool)>
    4e14:	8e 15       	cp	r24, r14
    4e16:	9f 05       	cpc	r25, r15
    4e18:	bc f6       	brge	.-82     	; 0x4dc8 <Lights::checkTimer()+0x9a>
    4e1a:	d3 cf       	rjmp	.-90     	; 0x4dc2 <Lights::checkTimer()+0x94>

00004e1c <Lights::getTimerOnOffText(bool)>:
_ZN6Lights17getTimerOnOffTextEb():
    4e1c:	dc 01       	movw	r26, r24
    4e1e:	91 96       	adiw	r26, 0x21	; 33
    4e20:	ed 91       	ld	r30, X+
    4e22:	fc 91       	ld	r31, X
    4e24:	80 81       	ld	r24, Z
    4e26:	61 11       	cpse	r22, r1
    4e28:	0c 94 e9 34 	jmp	0x69d2	; 0x69d2 <toText_enabledDisabled(bool)>
    4e2c:	90 e0       	ldi	r25, 0x00	; 0
    4e2e:	0c 94 95 33 	jmp	0x672a	; 0x672a <toText(int)>

00004e32 <Lights::getStatus()>:
_ZN6Lights9getStatusEv():
    4e32:	dc 01       	movw	r26, r24
    4e34:	5d 96       	adiw	r26, 0x1d	; 29
    4e36:	ed 91       	ld	r30, X+
    4e38:	fc 91       	ld	r31, X
    4e3a:	80 81       	ld	r24, Z
    4e3c:	08 95       	ret

00004e3e <Lights::getBrightness()>:
_ZN6Lights13getBrightnessEv():
    4e3e:	dc 01       	movw	r26, r24
    4e40:	1a 96       	adiw	r26, 0x0a	; 10
    4e42:	ed 91       	ld	r30, X+
    4e44:	fc 91       	ld	r31, X
    4e46:	80 81       	ld	r24, Z
    4e48:	90 e0       	ldi	r25, 0x00	; 0
    4e4a:	08 95       	ret

00004e4c <Lights::getBrightnessText(bool)>:
_ZN6Lights17getBrightnessTextEb():
    4e4c:	cf 93       	push	r28
    4e4e:	c6 2f       	mov	r28, r22
    4e50:	dc 01       	movw	r26, r24
    4e52:	1a 96       	adiw	r26, 0x0a	; 10
    4e54:	ed 91       	ld	r30, X+
    4e56:	fc 91       	ld	r31, X
    4e58:	80 81       	ld	r24, Z
itoa():
    4e5a:	4a e0       	ldi	r20, 0x0A	; 10
    4e5c:	61 eb       	ldi	r22, 0xB1	; 177
    4e5e:	7d e0       	ldi	r23, 0x0D	; 13
    4e60:	90 e0       	ldi	r25, 0x00	; 0
    4e62:	0e 94 4d 95 	call	0x12a9a	; 0x12a9a <__itoa_ncheck>
_ZN6Lights17getBrightnessTextEb():
    4e66:	cc 23       	and	r28, r28
    4e68:	31 f0       	breq	.+12     	; 0x4e76 <Lights::getBrightnessText(bool)+0x2a>
    4e6a:	65 e3       	ldi	r22, 0x35	; 53
    4e6c:	79 e0       	ldi	r23, 0x09	; 9
    4e6e:	81 eb       	ldi	r24, 0xB1	; 177
    4e70:	9d e0       	ldi	r25, 0x0D	; 13
    4e72:	0e 94 da 94 	call	0x129b4	; 0x129b4 <strcat_P>
    4e76:	81 eb       	ldi	r24, 0xB1	; 177
    4e78:	9d e0       	ldi	r25, 0x0D	; 13
    4e7a:	cf 91       	pop	r28
    4e7c:	08 95       	ret

00004e7e <Lights::getCurrentBrightnessText(bool)>:
_ZN6Lights24getCurrentBrightnessTextEb():
    4e7e:	cf 93       	push	r28
    4e80:	fc 01       	movw	r30, r24
    4e82:	c6 2f       	mov	r28, r22
    4e84:	87 8d       	ldd	r24, Z+31	; 0x1f
    4e86:	90 a1       	ldd	r25, Z+32	; 0x20
    4e88:	02 97       	sbiw	r24, 0x02	; 2
    4e8a:	02 97       	sbiw	r24, 0x02	; 2
    4e8c:	30 f4       	brcc	.+12     	; 0x4e9a <Lights::getCurrentBrightnessText(bool)+0x1c>
    4e8e:	83 a1       	ldd	r24, Z+35	; 0x23
itoa():
    4e90:	4a e0       	ldi	r20, 0x0A	; 10
    4e92:	61 eb       	ldi	r22, 0xB1	; 177
    4e94:	7d e0       	ldi	r23, 0x0D	; 13
    4e96:	90 e0       	ldi	r25, 0x00	; 0
    4e98:	0a c0       	rjmp	.+20     	; 0x4eae <Lights::getCurrentBrightnessText(bool)+0x30>
_ZN6Lights24getCurrentBrightnessTextEb():
    4e9a:	a5 8d       	ldd	r26, Z+29	; 0x1d
    4e9c:	b6 8d       	ldd	r27, Z+30	; 0x1e
    4e9e:	8c 91       	ld	r24, X
    4ea0:	81 11       	cpse	r24, r1
    4ea2:	13 c0       	rjmp	.+38     	; 0x4eca <Lights::getCurrentBrightnessText(bool)+0x4c>
itoa():
    4ea4:	4a e0       	ldi	r20, 0x0A	; 10
    4ea6:	61 eb       	ldi	r22, 0xB1	; 177
    4ea8:	7d e0       	ldi	r23, 0x0D	; 13
    4eaa:	90 e0       	ldi	r25, 0x00	; 0
    4eac:	80 e0       	ldi	r24, 0x00	; 0
    4eae:	0e 94 4d 95 	call	0x12a9a	; 0x12a9a <__itoa_ncheck>
_ZN6Lights24getCurrentBrightnessTextEb():
    4eb2:	cc 23       	and	r28, r28
    4eb4:	31 f0       	breq	.+12     	; 0x4ec2 <Lights::getCurrentBrightnessText(bool)+0x44>
    4eb6:	63 e3       	ldi	r22, 0x33	; 51
    4eb8:	79 e0       	ldi	r23, 0x09	; 9
    4eba:	81 eb       	ldi	r24, 0xB1	; 177
    4ebc:	9d e0       	ldi	r25, 0x0D	; 13
    4ebe:	0e 94 da 94 	call	0x129b4	; 0x129b4 <strcat_P>
    4ec2:	81 eb       	ldi	r24, 0xB1	; 177
    4ec4:	9d e0       	ldi	r25, 0x0D	; 13
    4ec6:	cf 91       	pop	r28
    4ec8:	08 95       	ret
    4eca:	02 84       	ldd	r0, Z+10	; 0x0a
    4ecc:	f3 85       	ldd	r31, Z+11	; 0x0b
    4ece:	e0 2d       	mov	r30, r0
    4ed0:	80 81       	ld	r24, Z
    4ed2:	de cf       	rjmp	.-68     	; 0x4e90 <Lights::getCurrentBrightnessText(bool)+0x12>

00004ed4 <Lights::getStatusText(bool)>:
_ZN6Lights13getStatusTextEb():
    4ed4:	dc 01       	movw	r26, r24
    4ed6:	5d 96       	adiw	r26, 0x1d	; 29
    4ed8:	ed 91       	ld	r30, X+
    4eda:	fc 91       	ld	r31, X
    4edc:	80 81       	ld	r24, Z
    4ede:	61 11       	cpse	r22, r1
    4ee0:	0c 94 f6 34 	jmp	0x69ec	; 0x69ec <toText_onOff(bool)>
    4ee4:	90 e0       	ldi	r25, 0x00	; 0
    4ee6:	0c 94 95 33 	jmp	0x672a	; 0x672a <toText(int)>

00004eea <Lights::getStateText()>:
_ZN6Lights12getStateTextEv():
    4eea:	fc 01       	movw	r30, r24
    4eec:	87 8d       	ldd	r24, Z+31	; 0x1f
    4eee:	90 a1       	ldd	r25, Z+32	; 0x20
    4ef0:	0c 94 f8 35 	jmp	0x6bf0	; 0x6bf0 <toText_lightState(LightStates)>

00004ef4 <Lights::getOnTimeText()>:
_ZN6Lights13getOnTimeTextEv():
    4ef4:	cf 93       	push	r28
    4ef6:	df 93       	push	r29
    4ef8:	ec 01       	movw	r28, r24
    4efa:	ac 81       	ldd	r26, Y+4	; 0x04
    4efc:	bd 81       	ldd	r27, Y+5	; 0x05
    4efe:	ea 81       	ldd	r30, Y+2	; 0x02
    4f00:	fb 81       	ldd	r31, Y+3	; 0x03
    4f02:	6c 91       	ld	r22, X
    4f04:	80 81       	ld	r24, Z
    4f06:	df 91       	pop	r29
    4f08:	cf 91       	pop	r28
    4f0a:	0c 94 39 34 	jmp	0x6872	; 0x6872 <toText_time(unsigned char, unsigned char)>

00004f0e <Lights::getOffTimeText()>:
_ZN6Lights14getOffTimeTextEv():
    4f0e:	cf 93       	push	r28
    4f10:	df 93       	push	r29
    4f12:	ec 01       	movw	r28, r24
    4f14:	a8 85       	ldd	r26, Y+8	; 0x08
    4f16:	b9 85       	ldd	r27, Y+9	; 0x09
    4f18:	ee 81       	ldd	r30, Y+6	; 0x06
    4f1a:	ff 81       	ldd	r31, Y+7	; 0x07
    4f1c:	6c 91       	ld	r22, X
    4f1e:	80 81       	ld	r24, Z
    4f20:	df 91       	pop	r29
    4f22:	cf 91       	pop	r28
    4f24:	0c 94 39 34 	jmp	0x6872	; 0x6872 <toText_time(unsigned char, unsigned char)>

00004f28 <Lights::setTimerOnOff(bool)>:
_ZN6Lights13setTimerOnOffEb():
    4f28:	ef 92       	push	r14
    4f2a:	ff 92       	push	r15
    4f2c:	0f 93       	push	r16
    4f2e:	1f 93       	push	r17
    4f30:	cf 93       	push	r28
    4f32:	df 93       	push	r29
    4f34:	ec 01       	movw	r28, r24
    4f36:	e9 a1       	ldd	r30, Y+33	; 0x21
    4f38:	fa a1       	ldd	r31, Y+34	; 0x22
    4f3a:	60 83       	st	Z, r22
    4f3c:	0c 85       	ldd	r16, Y+12	; 0x0c
    4f3e:	1d 85       	ldd	r17, Y+13	; 0x0d
    4f40:	d8 01       	movw	r26, r16
    4f42:	ed 91       	ld	r30, X+
    4f44:	fc 91       	ld	r31, X
    4f46:	e2 80       	ldd	r14, Z+2	; 0x02
    4f48:	f3 80       	ldd	r15, Z+3	; 0x03
    4f4a:	e8 81       	ld	r30, Y
    4f4c:	f9 81       	ldd	r31, Y+1	; 0x01
    4f4e:	36 97       	sbiw	r30, 0x06	; 6
    4f50:	80 81       	ld	r24, Z
    4f52:	91 81       	ldd	r25, Z+1	; 0x01
    4f54:	8c 0f       	add	r24, r28
    4f56:	9d 1f       	adc	r25, r29
    4f58:	40 e0       	ldi	r20, 0x00	; 0
    4f5a:	66 23       	and	r22, r22
    4f5c:	d9 f0       	breq	.+54     	; 0x4f94 <Lights::setTimerOnOff(bool)+0x6c>
    4f5e:	6a e2       	ldi	r22, 0x2A	; 42
    4f60:	79 e0       	ldi	r23, 0x09	; 9
    4f62:	0e 94 7e 19 	call	0x32fc	; 0x32fc <Common::getName(__FlashStringHelper const*, bool)>
    4f66:	43 e0       	ldi	r20, 0x03	; 3
    4f68:	bc 01       	movw	r22, r24
    4f6a:	c8 01       	movw	r24, r16
    4f6c:	f7 01       	movw	r30, r14
    4f6e:	19 95       	eicall
    4f70:	ce 01       	movw	r24, r28
    4f72:	0e 94 97 26 	call	0x4d2e	; 0x4d2e <Lights::checkTimer()>
    4f76:	8c 85       	ldd	r24, Y+12	; 0x0c
    4f78:	9d 85       	ldd	r25, Y+13	; 0x0d
    4f7a:	0e 94 57 1b 	call	0x36ae	; 0x36ae <Module::getSoundObject()>
    4f7e:	e9 a1       	ldd	r30, Y+33	; 0x21
    4f80:	fa a1       	ldd	r31, Y+34	; 0x22
    4f82:	60 81       	ld	r22, Z
    4f84:	df 91       	pop	r29
    4f86:	cf 91       	pop	r28
    4f88:	1f 91       	pop	r17
    4f8a:	0f 91       	pop	r16
    4f8c:	ff 90       	pop	r15
    4f8e:	ef 90       	pop	r14
    4f90:	0c 94 c7 2a 	jmp	0x558e	; 0x558e <Sound::playOnOffSound(bool)>
    4f94:	60 e2       	ldi	r22, 0x20	; 32
    4f96:	79 e0       	ldi	r23, 0x09	; 9
    4f98:	0e 94 7e 19 	call	0x32fc	; 0x32fc <Common::getName(__FlashStringHelper const*, bool)>
    4f9c:	43 e0       	ldi	r20, 0x03	; 3
    4f9e:	bc 01       	movw	r22, r24
    4fa0:	c8 01       	movw	r24, r16
    4fa2:	f7 01       	movw	r30, r14
    4fa4:	19 95       	eicall
    4fa6:	e7 cf       	rjmp	.-50     	; 0x4f76 <Lights::setTimerOnOff(bool)+0x4e>

00004fa8 <Lights::setOnHour(unsigned char)>:
_ZN6Lights9setOnHourEh():
    4fa8:	dc 01       	movw	r26, r24
    4faa:	12 96       	adiw	r26, 0x02	; 2
    4fac:	ed 91       	ld	r30, X+
    4fae:	fc 91       	ld	r31, X
    4fb0:	60 83       	st	Z, r22
    4fb2:	08 95       	ret

00004fb4 <Lights::setOnMinute(unsigned char)>:
_ZN6Lights11setOnMinuteEh():
    4fb4:	ef 92       	push	r14
    4fb6:	ff 92       	push	r15
    4fb8:	0f 93       	push	r16
    4fba:	1f 93       	push	r17
    4fbc:	cf 93       	push	r28
    4fbe:	df 93       	push	r29
    4fc0:	ec 01       	movw	r28, r24
    4fc2:	ec 81       	ldd	r30, Y+4	; 0x04
    4fc4:	fd 81       	ldd	r31, Y+5	; 0x05
    4fc6:	60 83       	st	Z, r22
    4fc8:	0c 85       	ldd	r16, Y+12	; 0x0c
    4fca:	1d 85       	ldd	r17, Y+13	; 0x0d
    4fcc:	d8 01       	movw	r26, r16
    4fce:	ed 91       	ld	r30, X+
    4fd0:	fc 91       	ld	r31, X
    4fd2:	e2 80       	ldd	r14, Z+2	; 0x02
    4fd4:	f3 80       	ldd	r15, Z+3	; 0x03
    4fd6:	e8 81       	ld	r30, Y
    4fd8:	f9 81       	ldd	r31, Y+1	; 0x01
    4fda:	36 97       	sbiw	r30, 0x06	; 6
    4fdc:	80 81       	ld	r24, Z
    4fde:	91 81       	ldd	r25, Z+1	; 0x01
    4fe0:	40 e0       	ldi	r20, 0x00	; 0
    4fe2:	60 e1       	ldi	r22, 0x10	; 16
    4fe4:	79 e0       	ldi	r23, 0x09	; 9
    4fe6:	8c 0f       	add	r24, r28
    4fe8:	9d 1f       	adc	r25, r29
    4fea:	0e 94 7e 19 	call	0x32fc	; 0x32fc <Common::getName(__FlashStringHelper const*, bool)>
    4fee:	43 e0       	ldi	r20, 0x03	; 3
    4ff0:	bc 01       	movw	r22, r24
    4ff2:	c8 01       	movw	r24, r16
    4ff4:	f7 01       	movw	r30, r14
    4ff6:	19 95       	eicall
    4ff8:	8c 85       	ldd	r24, Y+12	; 0x0c
    4ffa:	9d 85       	ldd	r25, Y+13	; 0x0d
    4ffc:	0e 94 57 1b 	call	0x36ae	; 0x36ae <Module::getSoundObject()>
    5000:	df 91       	pop	r29
    5002:	cf 91       	pop	r28
    5004:	1f 91       	pop	r17
    5006:	0f 91       	pop	r16
    5008:	ff 90       	pop	r15
    500a:	ef 90       	pop	r14
    500c:	0c 94 cf 2a 	jmp	0x559e	; 0x559e <Sound::playOnSound()>

00005010 <Lights::setOffHour(unsigned char)>:
_ZN6Lights10setOffHourEh():
    5010:	dc 01       	movw	r26, r24
    5012:	16 96       	adiw	r26, 0x06	; 6
    5014:	ed 91       	ld	r30, X+
    5016:	fc 91       	ld	r31, X
    5018:	60 83       	st	Z, r22
    501a:	08 95       	ret

0000501c <Lights::setOffMinute(unsigned char)>:
_ZN6Lights12setOffMinuteEh():
    501c:	ef 92       	push	r14
    501e:	ff 92       	push	r15
    5020:	0f 93       	push	r16
    5022:	1f 93       	push	r17
    5024:	cf 93       	push	r28
    5026:	df 93       	push	r29
    5028:	ec 01       	movw	r28, r24
    502a:	e8 85       	ldd	r30, Y+8	; 0x08
    502c:	f9 85       	ldd	r31, Y+9	; 0x09
    502e:	60 83       	st	Z, r22
    5030:	0c 85       	ldd	r16, Y+12	; 0x0c
    5032:	1d 85       	ldd	r17, Y+13	; 0x0d
    5034:	d8 01       	movw	r26, r16
    5036:	ed 91       	ld	r30, X+
    5038:	fc 91       	ld	r31, X
    503a:	e2 80       	ldd	r14, Z+2	; 0x02
    503c:	f3 80       	ldd	r15, Z+3	; 0x03
    503e:	e8 81       	ld	r30, Y
    5040:	f9 81       	ldd	r31, Y+1	; 0x01
    5042:	36 97       	sbiw	r30, 0x06	; 6
    5044:	80 81       	ld	r24, Z
    5046:	91 81       	ldd	r25, Z+1	; 0x01
    5048:	40 e0       	ldi	r20, 0x00	; 0
    504a:	6f ef       	ldi	r22, 0xFF	; 255
    504c:	78 e0       	ldi	r23, 0x08	; 8
    504e:	8c 0f       	add	r24, r28
    5050:	9d 1f       	adc	r25, r29
    5052:	0e 94 7e 19 	call	0x32fc	; 0x32fc <Common::getName(__FlashStringHelper const*, bool)>
    5056:	43 e0       	ldi	r20, 0x03	; 3
    5058:	bc 01       	movw	r22, r24
    505a:	c8 01       	movw	r24, r16
    505c:	f7 01       	movw	r30, r14
    505e:	19 95       	eicall
    5060:	8c 85       	ldd	r24, Y+12	; 0x0c
    5062:	9d 85       	ldd	r25, Y+13	; 0x0d
    5064:	0e 94 57 1b 	call	0x36ae	; 0x36ae <Module::getSoundObject()>
    5068:	df 91       	pop	r29
    506a:	cf 91       	pop	r28
    506c:	1f 91       	pop	r17
    506e:	0f 91       	pop	r16
    5070:	ff 90       	pop	r15
    5072:	ef 90       	pop	r14
    5074:	0c 94 cf 2a 	jmp	0x559e	; 0x559e <Sound::playOnSound()>

00005078 <Lights::refresh_Sec()>:
_ZN6Lights11refresh_SecEv():
b:\Gbox420\Gbox420\Gbox420_Mega_Main\build\sketch\src\Components/Lights.cpp:42
  Parent->addToRefreshQueue_Minute(this);
  logToSerials(F("Lights ready"), true, 3);
}

void Lights::refresh_Sec()
{
    5078:	cf 93       	push	r28
    507a:	df 93       	push	r29
    507c:	ec 01       	movw	r28, r24
b:\Gbox420\Gbox420\Gbox420_Mega_Main\build\sketch\src\Components/Lights.cpp:43
  Common::refresh_Sec();
    507e:	e8 81       	ld	r30, Y
    5080:	f9 81       	ldd	r31, Y+1	; 0x01
    5082:	36 97       	sbiw	r30, 0x06	; 6
    5084:	80 81       	ld	r24, Z
    5086:	91 81       	ldd	r25, Z+1	; 0x01
    5088:	8c 0f       	add	r24, r28
    508a:	9d 1f       	adc	r25, r29
    508c:	0e 94 b8 18 	call	0x3170	; 0x3170 <Common::refresh_Sec()>
b:\Gbox420\Gbox420\Gbox420_Mega_Main\build\sketch\src\Components/Lights.cpp:44
  checkDimming();
    5090:	ce 01       	movw	r24, r28
b:\Gbox420\Gbox420\Gbox420_Mega_Main\build\sketch\src\Components/Lights.cpp:45
}
    5092:	df 91       	pop	r29
    5094:	cf 91       	pop	r28
b:\Gbox420\Gbox420\Gbox420_Mega_Main\build\sketch\src\Components/Lights.cpp:44
}

void Lights::refresh_Sec()
{
  Common::refresh_Sec();
  checkDimming();
    5096:	0c 94 e2 23 	jmp	0x47c4	; 0x47c4 <Lights::checkDimming()>

0000509a <virtual thunk to Lights::refresh_Sec()>:
_ZTv0_n8_N6Lights11refresh_SecEv():
    509a:	dc 01       	movw	r26, r24
    509c:	ed 91       	ld	r30, X+
    509e:	fc 91       	ld	r31, X
    50a0:	38 97       	sbiw	r30, 0x08	; 8
    50a2:	20 81       	ld	r18, Z
    50a4:	31 81       	ldd	r19, Z+1	; 0x01
    50a6:	82 0f       	add	r24, r18
    50a8:	93 1f       	adc	r25, r19
    50aa:	0c 94 3c 28 	jmp	0x5078	; 0x5078 <Lights::refresh_Sec()>

000050ae <Lights::refresh_Minute()>:
_ZN6Lights14refresh_MinuteEv():
b:\Gbox420\Gbox420\Gbox420_Mega_Main\build\sketch\src\Components/Lights.cpp:48
}

void Lights::refresh_Minute()
{ ///< makes the class non-virtual, by implementing the refresh function from Common (Else you get an error while trying to create a new Lights object: invalid new-expression of abstract class type 'Lights')
    50ae:	cf 93       	push	r28
    50b0:	df 93       	push	r29
    50b2:	ec 01       	movw	r28, r24
b:\Gbox420\Gbox420\Gbox420_Mega_Main\build\sketch\src\Components/Lights.cpp:49
  Common::refresh_Minute();
    50b4:	e8 81       	ld	r30, Y
    50b6:	f9 81       	ldd	r31, Y+1	; 0x01
    50b8:	36 97       	sbiw	r30, 0x06	; 6
    50ba:	80 81       	ld	r24, Z
    50bc:	91 81       	ldd	r25, Z+1	; 0x01
    50be:	8c 0f       	add	r24, r28
    50c0:	9d 1f       	adc	r25, r29
    50c2:	0e 94 e2 18 	call	0x31c4	; 0x31c4 <Common::refresh_Minute()>
b:\Gbox420\Gbox420\Gbox420_Mega_Main\build\sketch\src\Components/Lights.cpp:50
  checkTimer();
    50c6:	ce 01       	movw	r24, r28
    50c8:	0e 94 97 26 	call	0x4d2e	; 0x4d2e <Lights::checkTimer()>
b:\Gbox420\Gbox420\Gbox420_Mega_Main\build\sketch\src\Components/Lights.cpp:51
  checkRelay();
    50cc:	ce 01       	movw	r24, r28
b:\Gbox420\Gbox420\Gbox420_Mega_Main\build\sketch\src\Components/Lights.cpp:52
}
    50ce:	df 91       	pop	r29
    50d0:	cf 91       	pop	r28
b:\Gbox420\Gbox420\Gbox420_Mega_Main\build\sketch\src\Components/Lights.cpp:51

void Lights::refresh_Minute()
{ ///< makes the class non-virtual, by implementing the refresh function from Common (Else you get an error while trying to create a new Lights object: invalid new-expression of abstract class type 'Lights')
  Common::refresh_Minute();
  checkTimer();
  checkRelay();
    50d2:	0c 94 57 23 	jmp	0x46ae	; 0x46ae <Lights::checkRelay()>

000050d6 <virtual thunk to Lights::refresh_Minute()>:
_ZTv0_n12_N6Lights14refresh_MinuteEv():
    50d6:	dc 01       	movw	r26, r24
    50d8:	ed 91       	ld	r30, X+
    50da:	fc 91       	ld	r31, X
    50dc:	3c 97       	sbiw	r30, 0x0c	; 12
    50de:	20 81       	ld	r18, Z
    50e0:	31 81       	ldd	r19, Z+1	; 0x01
    50e2:	82 0f       	add	r24, r18
    50e4:	93 1f       	adc	r25, r19
    50e6:	0c 94 57 28 	jmp	0x50ae	; 0x50ae <Lights::refresh_Minute()>

000050ea <Lights::report(bool)>:
_ZN6Lights6reportEb():
b:\Gbox420\Gbox420\Gbox420_Mega_Main\build\sketch\src\Components/Lights.cpp:58

/**
* @brief Report current state in a JSON format to the LongMessage buffer
*/
void Lights::report(bool FriendlyFormat)
{
    50ea:	1f 93       	push	r17
    50ec:	cf 93       	push	r28
    50ee:	df 93       	push	r29
    50f0:	ec 01       	movw	r28, r24
    50f2:	16 2f       	mov	r17, r22
b:\Gbox420\Gbox420\Gbox420_Mega_Main\build\sketch\src\Components/Lights.cpp:59
  Common::report(true); ///< Adds "NAME":{  to the LongMessage buffer. The curly bracket { needs to be closed at the end
    50f4:	e8 81       	ld	r30, Y
    50f6:	f9 81       	ldd	r31, Y+1	; 0x01
    50f8:	36 97       	sbiw	r30, 0x06	; 6
    50fa:	80 81       	ld	r24, Z
    50fc:	91 81       	ldd	r25, Z+1	; 0x01
    50fe:	61 e0       	ldi	r22, 0x01	; 1
    5100:	8c 0f       	add	r24, r28
    5102:	9d 1f       	adc	r25, r29
    5104:	0e 94 0e 19 	call	0x321c	; 0x321c <Common::report(bool)>
b:\Gbox420\Gbox420\Gbox420_Mega_Main\build\sketch\src\Components/Lights.cpp:60
  strcat_P(LongMessage, (PGM_P)F("\"S\":\""));
    5108:	6f e9       	ldi	r22, 0x9F	; 159
    510a:	79 e0       	ldi	r23, 0x09	; 9
    510c:	81 e3       	ldi	r24, 0x31	; 49
    510e:	9e e0       	ldi	r25, 0x0E	; 14
    5110:	0e 94 da 94 	call	0x129b4	; 0x129b4 <strcat_P>
b:\Gbox420\Gbox420\Gbox420_Mega_Main\build\sketch\src\Components/Lights.cpp:61
  strcat(LongMessage, getStatusText(FriendlyFormat));
    5114:	61 2f       	mov	r22, r17
    5116:	ce 01       	movw	r24, r28
    5118:	0e 94 6a 27 	call	0x4ed4	; 0x4ed4 <Lights::getStatusText(bool)>
    511c:	bc 01       	movw	r22, r24
    511e:	81 e3       	ldi	r24, 0x31	; 49
    5120:	9e e0       	ldi	r25, 0x0E	; 14
    5122:	0e 94 23 95 	call	0x12a46	; 0x12a46 <strcat>
b:\Gbox420\Gbox420\Gbox420_Mega_Main\build\sketch\src\Components/Lights.cpp:62
  strcat_P(LongMessage, (PGM_P)F("\",\"CB\":\""));
    5126:	66 e9       	ldi	r22, 0x96	; 150
    5128:	79 e0       	ldi	r23, 0x09	; 9
    512a:	81 e3       	ldi	r24, 0x31	; 49
    512c:	9e e0       	ldi	r25, 0x0E	; 14
    512e:	0e 94 da 94 	call	0x129b4	; 0x129b4 <strcat_P>
b:\Gbox420\Gbox420\Gbox420_Mega_Main\build\sketch\src\Components/Lights.cpp:63
  strcat(LongMessage, getCurrentBrightnessText(FriendlyFormat));
    5132:	61 2f       	mov	r22, r17
    5134:	ce 01       	movw	r24, r28
    5136:	0e 94 3f 27 	call	0x4e7e	; 0x4e7e <Lights::getCurrentBrightnessText(bool)>
    513a:	bc 01       	movw	r22, r24
    513c:	81 e3       	ldi	r24, 0x31	; 49
    513e:	9e e0       	ldi	r25, 0x0E	; 14
    5140:	0e 94 23 95 	call	0x12a46	; 0x12a46 <strcat>
b:\Gbox420\Gbox420\Gbox420_Mega_Main\build\sketch\src\Components/Lights.cpp:64
  strcat_P(LongMessage, (PGM_P)F("\",\"B\":\""));
    5144:	6e e8       	ldi	r22, 0x8E	; 142
    5146:	79 e0       	ldi	r23, 0x09	; 9
    5148:	81 e3       	ldi	r24, 0x31	; 49
    514a:	9e e0       	ldi	r25, 0x0E	; 14
    514c:	0e 94 da 94 	call	0x129b4	; 0x129b4 <strcat_P>
b:\Gbox420\Gbox420\Gbox420_Mega_Main\build\sketch\src\Components/Lights.cpp:65
  strcat(LongMessage, getBrightnessText(FriendlyFormat));
    5150:	61 2f       	mov	r22, r17
    5152:	ce 01       	movw	r24, r28
    5154:	0e 94 26 27 	call	0x4e4c	; 0x4e4c <Lights::getBrightnessText(bool)>
    5158:	bc 01       	movw	r22, r24
    515a:	81 e3       	ldi	r24, 0x31	; 49
    515c:	9e e0       	ldi	r25, 0x0E	; 14
    515e:	0e 94 23 95 	call	0x12a46	; 0x12a46 <strcat>
b:\Gbox420\Gbox420\Gbox420_Mega_Main\build\sketch\src\Components/Lights.cpp:66
  strcat_P(LongMessage, (PGM_P)F("\",\"T\":\""));
    5162:	66 e8       	ldi	r22, 0x86	; 134
    5164:	79 e0       	ldi	r23, 0x09	; 9
    5166:	81 e3       	ldi	r24, 0x31	; 49
    5168:	9e e0       	ldi	r25, 0x0E	; 14
    516a:	0e 94 da 94 	call	0x129b4	; 0x129b4 <strcat_P>
b:\Gbox420\Gbox420\Gbox420_Mega_Main\build\sketch\src\Components/Lights.cpp:67
  strcat(LongMessage, getTimerOnOffText(FriendlyFormat));
    516e:	61 2f       	mov	r22, r17
    5170:	ce 01       	movw	r24, r28
    5172:	0e 94 0e 27 	call	0x4e1c	; 0x4e1c <Lights::getTimerOnOffText(bool)>
    5176:	bc 01       	movw	r22, r24
    5178:	81 e3       	ldi	r24, 0x31	; 49
    517a:	9e e0       	ldi	r25, 0x0E	; 14
    517c:	0e 94 23 95 	call	0x12a46	; 0x12a46 <strcat>
b:\Gbox420\Gbox420\Gbox420_Mega_Main\build\sketch\src\Components/Lights.cpp:68
  strcat_P(LongMessage, (PGM_P)F("\",\"On\":\""));
    5180:	6d e7       	ldi	r22, 0x7D	; 125
    5182:	79 e0       	ldi	r23, 0x09	; 9
    5184:	81 e3       	ldi	r24, 0x31	; 49
    5186:	9e e0       	ldi	r25, 0x0E	; 14
    5188:	0e 94 da 94 	call	0x129b4	; 0x129b4 <strcat_P>
b:\Gbox420\Gbox420\Gbox420_Mega_Main\build\sketch\src\Components/Lights.cpp:69
  strcat(LongMessage, getOnTimeText());
    518c:	ce 01       	movw	r24, r28
    518e:	0e 94 7a 27 	call	0x4ef4	; 0x4ef4 <Lights::getOnTimeText()>
    5192:	bc 01       	movw	r22, r24
    5194:	81 e3       	ldi	r24, 0x31	; 49
    5196:	9e e0       	ldi	r25, 0x0E	; 14
    5198:	0e 94 23 95 	call	0x12a46	; 0x12a46 <strcat>
b:\Gbox420\Gbox420\Gbox420_Mega_Main\build\sketch\src\Components/Lights.cpp:70
  strcat_P(LongMessage, (PGM_P)F("\",\"Of\":\""));
    519c:	64 e7       	ldi	r22, 0x74	; 116
    519e:	79 e0       	ldi	r23, 0x09	; 9
    51a0:	81 e3       	ldi	r24, 0x31	; 49
    51a2:	9e e0       	ldi	r25, 0x0E	; 14
    51a4:	0e 94 da 94 	call	0x129b4	; 0x129b4 <strcat_P>
b:\Gbox420\Gbox420\Gbox420_Mega_Main\build\sketch\src\Components/Lights.cpp:71
  strcat(LongMessage, getOffTimeText());
    51a8:	ce 01       	movw	r24, r28
    51aa:	0e 94 87 27 	call	0x4f0e	; 0x4f0e <Lights::getOffTimeText()>
    51ae:	bc 01       	movw	r22, r24
    51b0:	81 e3       	ldi	r24, 0x31	; 49
    51b2:	9e e0       	ldi	r25, 0x0E	; 14
    51b4:	0e 94 23 95 	call	0x12a46	; 0x12a46 <strcat>
b:\Gbox420\Gbox420\Gbox420_Mega_Main\build\sketch\src\Components/Lights.cpp:72
  strcat_P(LongMessage, (PGM_P)F("\"}")); ///< closing the curly bracket at the end of the JSON
    51b8:	61 e7       	ldi	r22, 0x71	; 113
    51ba:	79 e0       	ldi	r23, 0x09	; 9
    51bc:	81 e3       	ldi	r24, 0x31	; 49
    51be:	9e e0       	ldi	r25, 0x0E	; 14
b:\Gbox420\Gbox420\Gbox420_Mega_Main\build\sketch\src\Components/Lights.cpp:73
}
    51c0:	df 91       	pop	r29
    51c2:	cf 91       	pop	r28
    51c4:	1f 91       	pop	r17
b:\Gbox420\Gbox420\Gbox420_Mega_Main\build\sketch\src\Components/Lights.cpp:72
  strcat(LongMessage, getTimerOnOffText(FriendlyFormat));
  strcat_P(LongMessage, (PGM_P)F("\",\"On\":\""));
  strcat(LongMessage, getOnTimeText());
  strcat_P(LongMessage, (PGM_P)F("\",\"Of\":\""));
  strcat(LongMessage, getOffTimeText());
  strcat_P(LongMessage, (PGM_P)F("\"}")); ///< closing the curly bracket at the end of the JSON
    51c6:	0c 94 da 94 	jmp	0x129b4	; 0x129b4 <strcat_P>

000051ca <virtual thunk to Lights::report(bool)>:
_ZTv0_n6_N6Lights6reportEb():
    51ca:	dc 01       	movw	r26, r24
    51cc:	ed 91       	ld	r30, X+
    51ce:	fc 91       	ld	r31, X
    51d0:	36 97       	sbiw	r30, 0x06	; 6
    51d2:	20 81       	ld	r18, Z
    51d4:	31 81       	ldd	r19, Z+1	; 0x01
    51d6:	82 0f       	add	r24, r18
    51d8:	93 1f       	adc	r25, r19
    51da:	0c 94 75 28 	jmp	0x50ea	; 0x50ea <Lights::report(bool)>

000051de <PowerSensorV3::PowerSensorV3(__FlashStringHelper const*, Module*, HardwareSerial*)>:
_ZN13PowerSensorV3C2EPK19__FlashStringHelperP6ModuleP14HardwareSerial():
b:\Gbox420\Gbox420\Gbox420_Mega_Main\build\sketch\src\Components/PowerSensorV3.cpp:9
{
  this->Parent = Parent;
  Sensor = new PZEM004Tv30(SerialPort);
  Parent->addToReportQueue(this);
  Parent->addToRefreshQueue_FiveSec(this);
  logToSerials(F("PowerSensorV3 ready"), true, 3);
    51de:	cf 92       	push	r12
    51e0:	df 92       	push	r13
    51e2:	ef 92       	push	r14
    51e4:	ff 92       	push	r15
    51e6:	0f 93       	push	r16
    51e8:	1f 93       	push	r17
    51ea:	cf 93       	push	r28
    51ec:	df 93       	push	r29
    51ee:	ec 01       	movw	r28, r24
    51f0:	79 01       	movw	r14, r18
PowerSensorV3():
    51f2:	db 01       	movw	r26, r22
    51f4:	8d 91       	ld	r24, X+
    51f6:	9c 91       	ld	r25, X
    51f8:	11 97       	sbiw	r26, 0x01	; 1
    51fa:	99 83       	std	Y+1, r25	; 0x01
    51fc:	88 83       	st	Y, r24
    51fe:	12 96       	adiw	r26, 0x02	; 2
    5200:	2d 91       	ld	r18, X+
    5202:	3c 91       	ld	r19, X
    5204:	06 97       	sbiw	r24, 0x06	; 6
    5206:	dc 01       	movw	r26, r24
    5208:	ed 91       	ld	r30, X+
    520a:	fc 91       	ld	r31, X
    520c:	ec 0f       	add	r30, r28
    520e:	fd 1f       	adc	r31, r29
    5210:	31 83       	std	Z+1, r19	; 0x01
    5212:	20 83       	st	Z, r18
    5214:	fd 8e       	std	Y+29, r15	; 0x1d
    5216:	ec 8e       	std	Y+28, r14	; 0x1c
    5218:	86 e2       	ldi	r24, 0x26	; 38
    521a:	90 e0       	ldi	r25, 0x00	; 0
    521c:	0e 94 6d 8f 	call	0x11eda	; 0x11eda <operator new(unsigned int)>
    5220:	6c 01       	movw	r12, r24
    5222:	48 ef       	ldi	r20, 0xF8	; 248
    5224:	b8 01       	movw	r22, r16
    5226:	0e 94 45 80 	call	0x1008a	; 0x1008a <PZEM004Tv30::PZEM004Tv30(HardwareSerial*, unsigned char)>
    522a:	db 82       	std	Y+3, r13	; 0x03
    522c:	ca 82       	std	Y+2, r12	; 0x02
    522e:	e8 81       	ld	r30, Y
    5230:	f9 81       	ldd	r31, Y+1	; 0x01
    5232:	36 97       	sbiw	r30, 0x06	; 6
    5234:	60 81       	ld	r22, Z
    5236:	71 81       	ldd	r23, Z+1	; 0x01
    5238:	6c 0f       	add	r22, r28
    523a:	7d 1f       	adc	r23, r29
    523c:	c7 01       	movw	r24, r14
    523e:	0e 94 5b 1b 	call	0x36b6	; 0x36b6 <Module::addToReportQueue(Common*)>
    5242:	e8 81       	ld	r30, Y
    5244:	f9 81       	ldd	r31, Y+1	; 0x01
    5246:	36 97       	sbiw	r30, 0x06	; 6
    5248:	60 81       	ld	r22, Z
    524a:	71 81       	ldd	r23, Z+1	; 0x01
    524c:	6c 0f       	add	r22, r28
    524e:	7d 1f       	adc	r23, r29
    5250:	c7 01       	movw	r24, r14
    5252:	0e 94 8f 1b 	call	0x371e	; 0x371e <Module::addToRefreshQueue_FiveSec(Common*)>
    5256:	43 e0       	ldi	r20, 0x03	; 3
    5258:	61 e0       	ldi	r22, 0x01	; 1
    525a:	81 ef       	ldi	r24, 0xF1	; 241
    525c:	99 e0       	ldi	r25, 0x09	; 9
_ZN13PowerSensorV3C2EPK19__FlashStringHelperP6ModuleP14HardwareSerial():
    525e:	df 91       	pop	r29
    5260:	cf 91       	pop	r28
    5262:	1f 91       	pop	r17
    5264:	0f 91       	pop	r16
    5266:	ff 90       	pop	r15
    5268:	ef 90       	pop	r14
    526a:	df 90       	pop	r13
    526c:	cf 90       	pop	r12
PowerSensorV3():
    526e:	0c 94 85 16 	jmp	0x2d0a	; 0x2d0a <logToSerials(__FlashStringHelper const*, bool, unsigned char)>

00005272 <PowerSensorV3::getPowerText(bool)>:
_ZN13PowerSensorV312getPowerTextEb():
b:\Gbox420\Gbox420\Gbox420_Mega_Main\build\sketch\src\Components/PowerSensorV3.cpp:46
  strcat_P(LongMessage, (PGM_P)F("\"}")); ///< closing the curly bracket at the end of the JSON
}

char *PowerSensorV3::getPowerText(bool FriendlyFormat)
{
  if (FriendlyFormat)
    5272:	61 11       	cpse	r22, r1
    5274:	09 c0       	rjmp	.+18     	; 0x5288 <PowerSensorV3::getPowerText(bool)+0x16>
b:\Gbox420\Gbox420\Gbox420_Mega_Main\build\sketch\src\Components/PowerSensorV3.cpp:56
    if (FriendlyFormat)
      strcat_P(ReturnChar, (PGM_P)F("W"));
    return ReturnChar;
  }
  else
    return toText(Power);
    5276:	dc 01       	movw	r26, r24
    5278:	14 96       	adiw	r26, 0x04	; 4
    527a:	6d 91       	ld	r22, X+
    527c:	7d 91       	ld	r23, X+
    527e:	8d 91       	ld	r24, X+
    5280:	9c 91       	ld	r25, X
    5282:	17 97       	sbiw	r26, 0x07	; 7
    5284:	0c 94 a5 33 	jmp	0x674a	; 0x674a <toText(float)>
b:\Gbox420\Gbox420\Gbox420_Mega_Main\build\sketch\src\Components/PowerSensorV3.cpp:49
char *PowerSensorV3::getPowerText(bool FriendlyFormat)
{
  if (FriendlyFormat)
  {
    static char ReturnChar[MaxWordLength] = ""; ///< each call will overwrite the same variable
    memset(&ReturnChar[0], 0, MaxWordLength);   ///< clear variable
    5288:	e1 ef       	ldi	r30, 0xF1	; 241
    528a:	f2 e1       	ldi	r31, 0x12	; 18
    528c:	20 e2       	ldi	r18, 0x20	; 32
    528e:	df 01       	movw	r26, r30
    5290:	1d 92       	st	X+, r1
    5292:	2a 95       	dec	r18
    5294:	e9 f7       	brne	.-6      	; 0x5290 <PowerSensorV3::getPowerText(bool)+0x1e>
b:\Gbox420\Gbox420\Gbox420_Mega_Main\build\sketch\src\Components/PowerSensorV3.cpp:50
    strcat(ReturnChar, toText(Power));
    5296:	fc 01       	movw	r30, r24
    5298:	64 81       	ldd	r22, Z+4	; 0x04
    529a:	75 81       	ldd	r23, Z+5	; 0x05
    529c:	86 81       	ldd	r24, Z+6	; 0x06
    529e:	97 81       	ldd	r25, Z+7	; 0x07
    52a0:	0e 94 a5 33 	call	0x674a	; 0x674a <toText(float)>
    52a4:	bc 01       	movw	r22, r24
    52a6:	81 ef       	ldi	r24, 0xF1	; 241
    52a8:	92 e1       	ldi	r25, 0x12	; 18
    52aa:	0e 94 23 95 	call	0x12a46	; 0x12a46 <strcat>
b:\Gbox420\Gbox420\Gbox420_Mega_Main\build\sketch\src\Components/PowerSensorV3.cpp:52
    if (FriendlyFormat)
      strcat_P(ReturnChar, (PGM_P)F("W"));
    52ae:	6d eb       	ldi	r22, 0xBD	; 189
    52b0:	79 e0       	ldi	r23, 0x09	; 9
    52b2:	81 ef       	ldi	r24, 0xF1	; 241
    52b4:	92 e1       	ldi	r25, 0x12	; 18
    52b6:	0e 94 da 94 	call	0x129b4	; 0x129b4 <strcat_P>
b:\Gbox420\Gbox420\Gbox420_Mega_Main\build\sketch\src\Components/PowerSensorV3.cpp:57
    return ReturnChar;
  }
  else
    return toText(Power);
}
    52ba:	81 ef       	ldi	r24, 0xF1	; 241
    52bc:	92 e1       	ldi	r25, 0x12	; 18
    52be:	08 95       	ret

000052c0 <PowerSensorV3::getEnergyText(bool)>:
_ZN13PowerSensorV313getEnergyTextEb():
b:\Gbox420\Gbox420\Gbox420_Mega_Main\build\sketch\src\Components/PowerSensorV3.cpp:61

char *PowerSensorV3::getEnergyText(bool FriendlyFormat)
{
  if (FriendlyFormat)
    52c0:	61 11       	cpse	r22, r1
    52c2:	09 c0       	rjmp	.+18     	; 0x52d6 <PowerSensorV3::getEnergyText(bool)+0x16>
b:\Gbox420\Gbox420\Gbox420_Mega_Main\build\sketch\src\Components/PowerSensorV3.cpp:71
    if (FriendlyFormat)
      strcat_P(ReturnChar, (PGM_P)F("kWh"));
    return ReturnChar;
  }
  else
    return toText(Energy);
    52c4:	dc 01       	movw	r26, r24
    52c6:	18 96       	adiw	r26, 0x08	; 8
    52c8:	6d 91       	ld	r22, X+
    52ca:	7d 91       	ld	r23, X+
    52cc:	8d 91       	ld	r24, X+
    52ce:	9c 91       	ld	r25, X
    52d0:	1b 97       	sbiw	r26, 0x0b	; 11
    52d2:	0c 94 a5 33 	jmp	0x674a	; 0x674a <toText(float)>
b:\Gbox420\Gbox420\Gbox420_Mega_Main\build\sketch\src\Components/PowerSensorV3.cpp:64
char *PowerSensorV3::getEnergyText(bool FriendlyFormat)
{
  if (FriendlyFormat)
  {
    static char ReturnChar[MaxWordLength] = ""; ///< each call will overwrite the same variable
    memset(&ReturnChar[0], 0, MaxWordLength);   ///< clear variable
    52d6:	e1 ed       	ldi	r30, 0xD1	; 209
    52d8:	f2 e1       	ldi	r31, 0x12	; 18
    52da:	20 e2       	ldi	r18, 0x20	; 32
    52dc:	df 01       	movw	r26, r30
    52de:	1d 92       	st	X+, r1
    52e0:	2a 95       	dec	r18
    52e2:	e9 f7       	brne	.-6      	; 0x52de <PowerSensorV3::getEnergyText(bool)+0x1e>
b:\Gbox420\Gbox420\Gbox420_Mega_Main\build\sketch\src\Components/PowerSensorV3.cpp:65
    strcat(ReturnChar, toText(Energy));
    52e4:	fc 01       	movw	r30, r24
    52e6:	60 85       	ldd	r22, Z+8	; 0x08
    52e8:	71 85       	ldd	r23, Z+9	; 0x09
    52ea:	82 85       	ldd	r24, Z+10	; 0x0a
    52ec:	93 85       	ldd	r25, Z+11	; 0x0b
    52ee:	0e 94 a5 33 	call	0x674a	; 0x674a <toText(float)>
    52f2:	bc 01       	movw	r22, r24
    52f4:	81 ed       	ldi	r24, 0xD1	; 209
    52f6:	92 e1       	ldi	r25, 0x12	; 18
    52f8:	0e 94 23 95 	call	0x12a46	; 0x12a46 <strcat>
b:\Gbox420\Gbox420\Gbox420_Mega_Main\build\sketch\src\Components/PowerSensorV3.cpp:67
    if (FriendlyFormat)
      strcat_P(ReturnChar, (PGM_P)F("kWh"));
    52fc:	69 eb       	ldi	r22, 0xB9	; 185
    52fe:	79 e0       	ldi	r23, 0x09	; 9
    5300:	81 ed       	ldi	r24, 0xD1	; 209
    5302:	92 e1       	ldi	r25, 0x12	; 18
    5304:	0e 94 da 94 	call	0x129b4	; 0x129b4 <strcat_P>
b:\Gbox420\Gbox420\Gbox420_Mega_Main\build\sketch\src\Components/PowerSensorV3.cpp:72
    return ReturnChar;
  }
  else
    return toText(Energy);
}
    5308:	81 ed       	ldi	r24, 0xD1	; 209
    530a:	92 e1       	ldi	r25, 0x12	; 18
    530c:	08 95       	ret

0000530e <PowerSensorV3::getVoltageText(bool)>:
_ZN13PowerSensorV314getVoltageTextEb():
b:\Gbox420\Gbox420\Gbox420_Mega_Main\build\sketch\src\Components/PowerSensorV3.cpp:76

char *PowerSensorV3::getVoltageText(bool FriendlyFormat)
{
  if (FriendlyFormat)
    530e:	61 11       	cpse	r22, r1
    5310:	09 c0       	rjmp	.+18     	; 0x5324 <PowerSensorV3::getVoltageText(bool)+0x16>
b:\Gbox420\Gbox420\Gbox420_Mega_Main\build\sketch\src\Components/PowerSensorV3.cpp:86
    if (FriendlyFormat)
      strcat_P(ReturnChar, (PGM_P)F("V"));
    return ReturnChar;
  }
  else
    return toText(Voltage);
    5312:	dc 01       	movw	r26, r24
    5314:	1c 96       	adiw	r26, 0x0c	; 12
    5316:	6d 91       	ld	r22, X+
    5318:	7d 91       	ld	r23, X+
    531a:	8d 91       	ld	r24, X+
    531c:	9c 91       	ld	r25, X
    531e:	1f 97       	sbiw	r26, 0x0f	; 15
    5320:	0c 94 a5 33 	jmp	0x674a	; 0x674a <toText(float)>
b:\Gbox420\Gbox420\Gbox420_Mega_Main\build\sketch\src\Components/PowerSensorV3.cpp:79
char *PowerSensorV3::getVoltageText(bool FriendlyFormat)
{
  if (FriendlyFormat)
  {
    static char ReturnChar[MaxWordLength] = ""; ///< each call will overwrite the same variable
    memset(&ReturnChar[0], 0, MaxWordLength);   ///< clear variable
    5324:	e1 eb       	ldi	r30, 0xB1	; 177
    5326:	f2 e1       	ldi	r31, 0x12	; 18
    5328:	20 e2       	ldi	r18, 0x20	; 32
    532a:	df 01       	movw	r26, r30
    532c:	1d 92       	st	X+, r1
    532e:	2a 95       	dec	r18
    5330:	e9 f7       	brne	.-6      	; 0x532c <PowerSensorV3::getVoltageText(bool)+0x1e>
b:\Gbox420\Gbox420\Gbox420_Mega_Main\build\sketch\src\Components/PowerSensorV3.cpp:80
    strcat(ReturnChar, toText(Voltage));
    5332:	fc 01       	movw	r30, r24
    5334:	64 85       	ldd	r22, Z+12	; 0x0c
    5336:	75 85       	ldd	r23, Z+13	; 0x0d
    5338:	86 85       	ldd	r24, Z+14	; 0x0e
    533a:	97 85       	ldd	r25, Z+15	; 0x0f
    533c:	0e 94 a5 33 	call	0x674a	; 0x674a <toText(float)>
    5340:	bc 01       	movw	r22, r24
    5342:	81 eb       	ldi	r24, 0xB1	; 177
    5344:	92 e1       	ldi	r25, 0x12	; 18
    5346:	0e 94 23 95 	call	0x12a46	; 0x12a46 <strcat>
b:\Gbox420\Gbox420\Gbox420_Mega_Main\build\sketch\src\Components/PowerSensorV3.cpp:82
    if (FriendlyFormat)
      strcat_P(ReturnChar, (PGM_P)F("V"));
    534a:	67 eb       	ldi	r22, 0xB7	; 183
    534c:	79 e0       	ldi	r23, 0x09	; 9
    534e:	81 eb       	ldi	r24, 0xB1	; 177
    5350:	92 e1       	ldi	r25, 0x12	; 18
    5352:	0e 94 da 94 	call	0x129b4	; 0x129b4 <strcat_P>
b:\Gbox420\Gbox420\Gbox420_Mega_Main\build\sketch\src\Components/PowerSensorV3.cpp:87
    return ReturnChar;
  }
  else
    return toText(Voltage);
}
    5356:	81 eb       	ldi	r24, 0xB1	; 177
    5358:	92 e1       	ldi	r25, 0x12	; 18
    535a:	08 95       	ret

0000535c <PowerSensorV3::getCurrentText(bool)>:
_ZN13PowerSensorV314getCurrentTextEb():
b:\Gbox420\Gbox420\Gbox420_Mega_Main\build\sketch\src\Components/PowerSensorV3.cpp:91

char *PowerSensorV3::getCurrentText(bool FriendlyFormat)
{
  if (FriendlyFormat)
    535c:	61 11       	cpse	r22, r1
    535e:	09 c0       	rjmp	.+18     	; 0x5372 <PowerSensorV3::getCurrentText(bool)+0x16>
b:\Gbox420\Gbox420\Gbox420_Mega_Main\build\sketch\src\Components/PowerSensorV3.cpp:101
    if (FriendlyFormat)
      strcat_P(ReturnChar, (PGM_P)F("A"));
    return ReturnChar;
  }
  else
    return toText(Current);
    5360:	dc 01       	movw	r26, r24
    5362:	50 96       	adiw	r26, 0x10	; 16
    5364:	6d 91       	ld	r22, X+
    5366:	7d 91       	ld	r23, X+
    5368:	8d 91       	ld	r24, X+
    536a:	9c 91       	ld	r25, X
    536c:	53 97       	sbiw	r26, 0x13	; 19
    536e:	0c 94 a5 33 	jmp	0x674a	; 0x674a <toText(float)>
b:\Gbox420\Gbox420\Gbox420_Mega_Main\build\sketch\src\Components/PowerSensorV3.cpp:94
char *PowerSensorV3::getCurrentText(bool FriendlyFormat)
{
  if (FriendlyFormat)
  {
    static char ReturnChar[MaxWordLength] = ""; ///< each call will overwrite the same variable
    memset(&ReturnChar[0], 0, MaxWordLength);   ///< clear variable
    5372:	e1 e9       	ldi	r30, 0x91	; 145
    5374:	f2 e1       	ldi	r31, 0x12	; 18
    5376:	20 e2       	ldi	r18, 0x20	; 32
    5378:	df 01       	movw	r26, r30
    537a:	1d 92       	st	X+, r1
    537c:	2a 95       	dec	r18
    537e:	e9 f7       	brne	.-6      	; 0x537a <PowerSensorV3::getCurrentText(bool)+0x1e>
b:\Gbox420\Gbox420\Gbox420_Mega_Main\build\sketch\src\Components/PowerSensorV3.cpp:95
    strcat(ReturnChar, toText(Current));
    5380:	fc 01       	movw	r30, r24
    5382:	60 89       	ldd	r22, Z+16	; 0x10
    5384:	71 89       	ldd	r23, Z+17	; 0x11
    5386:	82 89       	ldd	r24, Z+18	; 0x12
    5388:	93 89       	ldd	r25, Z+19	; 0x13
    538a:	0e 94 a5 33 	call	0x674a	; 0x674a <toText(float)>
    538e:	bc 01       	movw	r22, r24
    5390:	81 e9       	ldi	r24, 0x91	; 145
    5392:	92 e1       	ldi	r25, 0x12	; 18
    5394:	0e 94 23 95 	call	0x12a46	; 0x12a46 <strcat>
b:\Gbox420\Gbox420\Gbox420_Mega_Main\build\sketch\src\Components/PowerSensorV3.cpp:97
    if (FriendlyFormat)
      strcat_P(ReturnChar, (PGM_P)F("A"));
    5398:	65 eb       	ldi	r22, 0xB5	; 181
    539a:	79 e0       	ldi	r23, 0x09	; 9
    539c:	81 e9       	ldi	r24, 0x91	; 145
    539e:	92 e1       	ldi	r25, 0x12	; 18
    53a0:	0e 94 da 94 	call	0x129b4	; 0x129b4 <strcat_P>
b:\Gbox420\Gbox420\Gbox420_Mega_Main\build\sketch\src\Components/PowerSensorV3.cpp:102
    return ReturnChar;
  }
  else
    return toText(Current);
}
    53a4:	81 e9       	ldi	r24, 0x91	; 145
    53a6:	92 e1       	ldi	r25, 0x12	; 18
    53a8:	08 95       	ret

000053aa <PowerSensorV3::getFrequencyText(bool)>:
_ZN13PowerSensorV316getFrequencyTextEb():
b:\Gbox420\Gbox420\Gbox420_Mega_Main\build\sketch\src\Components/PowerSensorV3.cpp:106

char *PowerSensorV3::getFrequencyText(bool FriendlyFormat)
{
  if (FriendlyFormat)
    53aa:	61 11       	cpse	r22, r1
    53ac:	09 c0       	rjmp	.+18     	; 0x53c0 <PowerSensorV3::getFrequencyText(bool)+0x16>
b:\Gbox420\Gbox420\Gbox420_Mega_Main\build\sketch\src\Components/PowerSensorV3.cpp:115
    strcat(ReturnChar, toText(Frequency));
    strcat_P(ReturnChar, (PGM_P)F("Hz"));
    return ReturnChar;
  }
  else
    return toText(Frequency);
    53ae:	dc 01       	movw	r26, r24
    53b0:	54 96       	adiw	r26, 0x14	; 20
    53b2:	6d 91       	ld	r22, X+
    53b4:	7d 91       	ld	r23, X+
    53b6:	8d 91       	ld	r24, X+
    53b8:	9c 91       	ld	r25, X
    53ba:	57 97       	sbiw	r26, 0x17	; 23
    53bc:	0c 94 a5 33 	jmp	0x674a	; 0x674a <toText(float)>
b:\Gbox420\Gbox420\Gbox420_Mega_Main\build\sketch\src\Components/PowerSensorV3.cpp:109
char *PowerSensorV3::getFrequencyText(bool FriendlyFormat)
{
  if (FriendlyFormat)
  {
    static char ReturnChar[MaxWordLength] = ""; ///< each call will overwrite the same variable
    memset(&ReturnChar[0], 0, MaxWordLength);   ///< clear variable
    53c0:	e1 e7       	ldi	r30, 0x71	; 113
    53c2:	f2 e1       	ldi	r31, 0x12	; 18
    53c4:	20 e2       	ldi	r18, 0x20	; 32
    53c6:	df 01       	movw	r26, r30
    53c8:	1d 92       	st	X+, r1
    53ca:	2a 95       	dec	r18
    53cc:	e9 f7       	brne	.-6      	; 0x53c8 <PowerSensorV3::getFrequencyText(bool)+0x1e>
b:\Gbox420\Gbox420\Gbox420_Mega_Main\build\sketch\src\Components/PowerSensorV3.cpp:110
    strcat(ReturnChar, toText(Frequency));
    53ce:	fc 01       	movw	r30, r24
    53d0:	64 89       	ldd	r22, Z+20	; 0x14
    53d2:	75 89       	ldd	r23, Z+21	; 0x15
    53d4:	86 89       	ldd	r24, Z+22	; 0x16
    53d6:	97 89       	ldd	r25, Z+23	; 0x17
    53d8:	0e 94 a5 33 	call	0x674a	; 0x674a <toText(float)>
    53dc:	bc 01       	movw	r22, r24
    53de:	81 e7       	ldi	r24, 0x71	; 113
    53e0:	92 e1       	ldi	r25, 0x12	; 18
    53e2:	0e 94 23 95 	call	0x12a46	; 0x12a46 <strcat>
b:\Gbox420\Gbox420\Gbox420_Mega_Main\build\sketch\src\Components/PowerSensorV3.cpp:111
    strcat_P(ReturnChar, (PGM_P)F("Hz"));
    53e6:	62 eb       	ldi	r22, 0xB2	; 178
    53e8:	79 e0       	ldi	r23, 0x09	; 9
    53ea:	81 e7       	ldi	r24, 0x71	; 113
    53ec:	92 e1       	ldi	r25, 0x12	; 18
    53ee:	0e 94 da 94 	call	0x129b4	; 0x129b4 <strcat_P>
b:\Gbox420\Gbox420\Gbox420_Mega_Main\build\sketch\src\Components/PowerSensorV3.cpp:116
    return ReturnChar;
  }
  else
    return toText(Frequency);
}
    53f2:	81 e7       	ldi	r24, 0x71	; 113
    53f4:	92 e1       	ldi	r25, 0x12	; 18
    53f6:	08 95       	ret

000053f8 <PowerSensorV3::getPowerFactorText()>:
_ZN13PowerSensorV318getPowerFactorTextEv():
b:\Gbox420\Gbox420\Gbox420_Mega_Main\build\sketch\src\Components/PowerSensorV3.cpp:120

char *PowerSensorV3::getPowerFactorText()
{
  return toText(PowerFactor);
    53f8:	fc 01       	movw	r30, r24
    53fa:	60 8d       	ldd	r22, Z+24	; 0x18
    53fc:	71 8d       	ldd	r23, Z+25	; 0x19
    53fe:	82 8d       	ldd	r24, Z+26	; 0x1a
    5400:	93 8d       	ldd	r25, Z+27	; 0x1b
    5402:	0c 94 a5 33 	jmp	0x674a	; 0x674a <toText(float)>

00005406 <PowerSensorV3::refresh_FiveSec()>:
_ZN13PowerSensorV315refresh_FiveSecEv():
b:\Gbox420\Gbox420\Gbox420_Mega_Main\build\sketch\src\Components/PowerSensorV3.cpp:13
  Parent->addToRefreshQueue_FiveSec(this);
  logToSerials(F("PowerSensorV3 ready"), true, 3);
}

void PowerSensorV3::refresh_FiveSec()
{
    5406:	cf 93       	push	r28
    5408:	df 93       	push	r29
    540a:	ec 01       	movw	r28, r24
b:\Gbox420\Gbox420\Gbox420_Mega_Main\build\sketch\src\Components/PowerSensorV3.cpp:14
  Common::refresh_FiveSec();
    540c:	e8 81       	ld	r30, Y
    540e:	f9 81       	ldd	r31, Y+1	; 0x01
    5410:	36 97       	sbiw	r30, 0x06	; 6
    5412:	80 81       	ld	r24, Z
    5414:	91 81       	ldd	r25, Z+1	; 0x01
    5416:	8c 0f       	add	r24, r28
    5418:	9d 1f       	adc	r25, r29
    541a:	0e 94 cd 18 	call	0x319a	; 0x319a <Common::refresh_FiveSec()>
b:\Gbox420\Gbox420\Gbox420_Mega_Main\build\sketch\src\Components/PowerSensorV3.cpp:15
  Voltage = Sensor->voltage();     ///< AC Voltage (V)
    541e:	8a 81       	ldd	r24, Y+2	; 0x02
    5420:	9b 81       	ldd	r25, Y+3	; 0x03
    5422:	0e 94 96 82 	call	0x1052c	; 0x1052c <PZEM004Tv30::voltage()>
    5426:	6c 87       	std	Y+12, r22	; 0x0c
    5428:	7d 87       	std	Y+13, r23	; 0x0d
    542a:	8e 87       	std	Y+14, r24	; 0x0e
    542c:	9f 87       	std	Y+15, r25	; 0x0f
b:\Gbox420\Gbox420\Gbox420_Mega_Main\build\sketch\src\Components/PowerSensorV3.cpp:16
  Current = Sensor->current();     ///< Current (A)
    542e:	8a 81       	ldd	r24, Y+2	; 0x02
    5430:	9b 81       	ldd	r25, Y+3	; 0x03
    5432:	0e 94 a9 82 	call	0x10552	; 0x10552 <PZEM004Tv30::current()>
    5436:	68 8b       	std	Y+16, r22	; 0x10
    5438:	79 8b       	std	Y+17, r23	; 0x11
    543a:	8a 8b       	std	Y+18, r24	; 0x12
    543c:	9b 8b       	std	Y+19, r25	; 0x13
b:\Gbox420\Gbox420\Gbox420_Mega_Main\build\sketch\src\Components/PowerSensorV3.cpp:17
  Power = Sensor->power();         ///< Actual power usage (W)
    543e:	8a 81       	ldd	r24, Y+2	; 0x02
    5440:	9b 81       	ldd	r25, Y+3	; 0x03
    5442:	0e 94 bc 82 	call	0x10578	; 0x10578 <PZEM004Tv30::power()>
    5446:	6c 83       	std	Y+4, r22	; 0x04
    5448:	7d 83       	std	Y+5, r23	; 0x05
    544a:	8e 83       	std	Y+6, r24	; 0x06
    544c:	9f 83       	std	Y+7, r25	; 0x07
b:\Gbox420\Gbox420\Gbox420_Mega_Main\build\sketch\src\Components/PowerSensorV3.cpp:18
  Energy = Sensor->energy();       ///< Total power consumption (kWh)
    544e:	8a 81       	ldd	r24, Y+2	; 0x02
    5450:	9b 81       	ldd	r25, Y+3	; 0x03
    5452:	0e 94 cf 82 	call	0x1059e	; 0x1059e <PZEM004Tv30::energy()>
    5456:	68 87       	std	Y+8, r22	; 0x08
    5458:	79 87       	std	Y+9, r23	; 0x09
    545a:	8a 87       	std	Y+10, r24	; 0x0a
    545c:	9b 87       	std	Y+11, r25	; 0x0b
b:\Gbox420\Gbox420\Gbox420_Mega_Main\build\sketch\src\Components/PowerSensorV3.cpp:19
  Frequency = Sensor->frequency(); ///< Frequency (hz)
    545e:	8a 81       	ldd	r24, Y+2	; 0x02
    5460:	9b 81       	ldd	r25, Y+3	; 0x03
    5462:	0e 94 e2 82 	call	0x105c4	; 0x105c4 <PZEM004Tv30::frequency()>
    5466:	6c 8b       	std	Y+20, r22	; 0x14
    5468:	7d 8b       	std	Y+21, r23	; 0x15
    546a:	8e 8b       	std	Y+22, r24	; 0x16
    546c:	9f 8b       	std	Y+23, r25	; 0x17
b:\Gbox420\Gbox420\Gbox420_Mega_Main\build\sketch\src\Components/PowerSensorV3.cpp:20
  PowerFactor = Sensor->pf();      ///< Power factor
    546e:	8a 81       	ldd	r24, Y+2	; 0x02
    5470:	9b 81       	ldd	r25, Y+3	; 0x03
    5472:	0e 94 f5 82 	call	0x105ea	; 0x105ea <PZEM004Tv30::pf()>
    5476:	68 8f       	std	Y+24, r22	; 0x18
    5478:	79 8f       	std	Y+25, r23	; 0x19
    547a:	8a 8f       	std	Y+26, r24	; 0x1a
    547c:	9b 8f       	std	Y+27, r25	; 0x1b
b:\Gbox420\Gbox420\Gbox420_Mega_Main\build\sketch\src\Components/PowerSensorV3.cpp:21
}
    547e:	df 91       	pop	r29
    5480:	cf 91       	pop	r28
    5482:	08 95       	ret

00005484 <virtual thunk to PowerSensorV3::refresh_FiveSec()>:
_ZTv0_n10_N13PowerSensorV315refresh_FiveSecEv():
    5484:	dc 01       	movw	r26, r24
    5486:	ed 91       	ld	r30, X+
    5488:	fc 91       	ld	r31, X
    548a:	3a 97       	sbiw	r30, 0x0a	; 10
    548c:	20 81       	ld	r18, Z
    548e:	31 81       	ldd	r19, Z+1	; 0x01
    5490:	82 0f       	add	r24, r18
    5492:	93 1f       	adc	r25, r19
    5494:	0c 94 03 2a 	jmp	0x5406	; 0x5406 <PowerSensorV3::refresh_FiveSec()>

00005498 <PowerSensorV3::report(bool)>:
_ZN13PowerSensorV36reportEb():
b:\Gbox420\Gbox420\Gbox420_Mega_Main\build\sketch\src\Components/PowerSensorV3.cpp:27

/**
* @brief Report current state in a JSON format to the LongMessage buffer
*/
void PowerSensorV3::report(bool FriendlyFormat)
{
    5498:	1f 93       	push	r17
    549a:	cf 93       	push	r28
    549c:	df 93       	push	r29
    549e:	ec 01       	movw	r28, r24
    54a0:	16 2f       	mov	r17, r22
b:\Gbox420\Gbox420\Gbox420_Mega_Main\build\sketch\src\Components/PowerSensorV3.cpp:28
  Common::report(true); ///< Adds "NAME":{  to the LongMessage buffer. The curly bracket { needs to be closed at the end
    54a2:	e8 81       	ld	r30, Y
    54a4:	f9 81       	ldd	r31, Y+1	; 0x01
    54a6:	36 97       	sbiw	r30, 0x06	; 6
    54a8:	80 81       	ld	r24, Z
    54aa:	91 81       	ldd	r25, Z+1	; 0x01
    54ac:	61 e0       	ldi	r22, 0x01	; 1
    54ae:	8c 0f       	add	r24, r28
    54b0:	9d 1f       	adc	r25, r29
    54b2:	0e 94 0e 19 	call	0x321c	; 0x321c <Common::report(bool)>
b:\Gbox420\Gbox420\Gbox420_Mega_Main\build\sketch\src\Components/PowerSensorV3.cpp:29
  strcat_P(LongMessage, (PGM_P)F("\"P\":\""));
    54b6:	6b ee       	ldi	r22, 0xEB	; 235
    54b8:	79 e0       	ldi	r23, 0x09	; 9
    54ba:	81 e3       	ldi	r24, 0x31	; 49
    54bc:	9e e0       	ldi	r25, 0x0E	; 14
    54be:	0e 94 da 94 	call	0x129b4	; 0x129b4 <strcat_P>
b:\Gbox420\Gbox420\Gbox420_Mega_Main\build\sketch\src\Components/PowerSensorV3.cpp:30
  strcat(LongMessage, getPowerText(FriendlyFormat));
    54c2:	61 2f       	mov	r22, r17
    54c4:	ce 01       	movw	r24, r28
    54c6:	0e 94 39 29 	call	0x5272	; 0x5272 <PowerSensorV3::getPowerText(bool)>
    54ca:	bc 01       	movw	r22, r24
    54cc:	81 e3       	ldi	r24, 0x31	; 49
    54ce:	9e e0       	ldi	r25, 0x0E	; 14
    54d0:	0e 94 23 95 	call	0x12a46	; 0x12a46 <strcat>
b:\Gbox420\Gbox420\Gbox420_Mega_Main\build\sketch\src\Components/PowerSensorV3.cpp:31
  strcat_P(LongMessage, (PGM_P)F("\",\"E\":\""));
    54d4:	63 ee       	ldi	r22, 0xE3	; 227
    54d6:	79 e0       	ldi	r23, 0x09	; 9
    54d8:	81 e3       	ldi	r24, 0x31	; 49
    54da:	9e e0       	ldi	r25, 0x0E	; 14
    54dc:	0e 94 da 94 	call	0x129b4	; 0x129b4 <strcat_P>
b:\Gbox420\Gbox420\Gbox420_Mega_Main\build\sketch\src\Components/PowerSensorV3.cpp:32
  strcat(LongMessage, getEnergyText(FriendlyFormat));
    54e0:	61 2f       	mov	r22, r17
    54e2:	ce 01       	movw	r24, r28
    54e4:	0e 94 60 29 	call	0x52c0	; 0x52c0 <PowerSensorV3::getEnergyText(bool)>
    54e8:	bc 01       	movw	r22, r24
    54ea:	81 e3       	ldi	r24, 0x31	; 49
    54ec:	9e e0       	ldi	r25, 0x0E	; 14
    54ee:	0e 94 23 95 	call	0x12a46	; 0x12a46 <strcat>
b:\Gbox420\Gbox420\Gbox420_Mega_Main\build\sketch\src\Components/PowerSensorV3.cpp:33
  strcat_P(LongMessage, (PGM_P)F("\",\"V\":\""));
    54f2:	6b ed       	ldi	r22, 0xDB	; 219
    54f4:	79 e0       	ldi	r23, 0x09	; 9
    54f6:	81 e3       	ldi	r24, 0x31	; 49
    54f8:	9e e0       	ldi	r25, 0x0E	; 14
    54fa:	0e 94 da 94 	call	0x129b4	; 0x129b4 <strcat_P>
b:\Gbox420\Gbox420\Gbox420_Mega_Main\build\sketch\src\Components/PowerSensorV3.cpp:34
  strcat(LongMessage, getVoltageText(FriendlyFormat));
    54fe:	61 2f       	mov	r22, r17
    5500:	ce 01       	movw	r24, r28
    5502:	0e 94 87 29 	call	0x530e	; 0x530e <PowerSensorV3::getVoltageText(bool)>
    5506:	bc 01       	movw	r22, r24
    5508:	81 e3       	ldi	r24, 0x31	; 49
    550a:	9e e0       	ldi	r25, 0x0E	; 14
    550c:	0e 94 23 95 	call	0x12a46	; 0x12a46 <strcat>
b:\Gbox420\Gbox420\Gbox420_Mega_Main\build\sketch\src\Components/PowerSensorV3.cpp:35
  strcat_P(LongMessage, (PGM_P)F("\",\"C\":\""));
    5510:	63 ed       	ldi	r22, 0xD3	; 211
    5512:	79 e0       	ldi	r23, 0x09	; 9
    5514:	81 e3       	ldi	r24, 0x31	; 49
    5516:	9e e0       	ldi	r25, 0x0E	; 14
    5518:	0e 94 da 94 	call	0x129b4	; 0x129b4 <strcat_P>
b:\Gbox420\Gbox420\Gbox420_Mega_Main\build\sketch\src\Components/PowerSensorV3.cpp:36
  strcat(LongMessage, getCurrentText(FriendlyFormat));
    551c:	61 2f       	mov	r22, r17
    551e:	ce 01       	movw	r24, r28
    5520:	0e 94 ae 29 	call	0x535c	; 0x535c <PowerSensorV3::getCurrentText(bool)>
    5524:	bc 01       	movw	r22, r24
    5526:	81 e3       	ldi	r24, 0x31	; 49
    5528:	9e e0       	ldi	r25, 0x0E	; 14
    552a:	0e 94 23 95 	call	0x12a46	; 0x12a46 <strcat>
b:\Gbox420\Gbox420\Gbox420_Mega_Main\build\sketch\src\Components/PowerSensorV3.cpp:37
  strcat_P(LongMessage, (PGM_P)F("\",\"F\":\""));
    552e:	6b ec       	ldi	r22, 0xCB	; 203
    5530:	79 e0       	ldi	r23, 0x09	; 9
    5532:	81 e3       	ldi	r24, 0x31	; 49
    5534:	9e e0       	ldi	r25, 0x0E	; 14
    5536:	0e 94 da 94 	call	0x129b4	; 0x129b4 <strcat_P>
b:\Gbox420\Gbox420\Gbox420_Mega_Main\build\sketch\src\Components/PowerSensorV3.cpp:38
  strcat(LongMessage, getFrequencyText(FriendlyFormat));
    553a:	61 2f       	mov	r22, r17
    553c:	ce 01       	movw	r24, r28
    553e:	0e 94 d5 29 	call	0x53aa	; 0x53aa <PowerSensorV3::getFrequencyText(bool)>
    5542:	bc 01       	movw	r22, r24
    5544:	81 e3       	ldi	r24, 0x31	; 49
    5546:	9e e0       	ldi	r25, 0x0E	; 14
    5548:	0e 94 23 95 	call	0x12a46	; 0x12a46 <strcat>
b:\Gbox420\Gbox420\Gbox420_Mega_Main\build\sketch\src\Components/PowerSensorV3.cpp:39
  strcat_P(LongMessage, (PGM_P)F("\",\"PF\":\""));
    554c:	62 ec       	ldi	r22, 0xC2	; 194
    554e:	79 e0       	ldi	r23, 0x09	; 9
    5550:	81 e3       	ldi	r24, 0x31	; 49
    5552:	9e e0       	ldi	r25, 0x0E	; 14
    5554:	0e 94 da 94 	call	0x129b4	; 0x129b4 <strcat_P>
b:\Gbox420\Gbox420\Gbox420_Mega_Main\build\sketch\src\Components/PowerSensorV3.cpp:40
  strcat(LongMessage, getPowerFactorText());
    5558:	ce 01       	movw	r24, r28
    555a:	0e 94 fc 29 	call	0x53f8	; 0x53f8 <PowerSensorV3::getPowerFactorText()>
    555e:	bc 01       	movw	r22, r24
    5560:	81 e3       	ldi	r24, 0x31	; 49
    5562:	9e e0       	ldi	r25, 0x0E	; 14
    5564:	0e 94 23 95 	call	0x12a46	; 0x12a46 <strcat>
b:\Gbox420\Gbox420\Gbox420_Mega_Main\build\sketch\src\Components/PowerSensorV3.cpp:41
  strcat_P(LongMessage, (PGM_P)F("\"}")); ///< closing the curly bracket at the end of the JSON
    5568:	6f eb       	ldi	r22, 0xBF	; 191
    556a:	79 e0       	ldi	r23, 0x09	; 9
    556c:	81 e3       	ldi	r24, 0x31	; 49
    556e:	9e e0       	ldi	r25, 0x0E	; 14
b:\Gbox420\Gbox420\Gbox420_Mega_Main\build\sketch\src\Components/PowerSensorV3.cpp:42
}
    5570:	df 91       	pop	r29
    5572:	cf 91       	pop	r28
    5574:	1f 91       	pop	r17
b:\Gbox420\Gbox420\Gbox420_Mega_Main\build\sketch\src\Components/PowerSensorV3.cpp:41
  strcat(LongMessage, getCurrentText(FriendlyFormat));
  strcat_P(LongMessage, (PGM_P)F("\",\"F\":\""));
  strcat(LongMessage, getFrequencyText(FriendlyFormat));
  strcat_P(LongMessage, (PGM_P)F("\",\"PF\":\""));
  strcat(LongMessage, getPowerFactorText());
  strcat_P(LongMessage, (PGM_P)F("\"}")); ///< closing the curly bracket at the end of the JSON
    5576:	0c 94 da 94 	jmp	0x129b4	; 0x129b4 <strcat_P>

0000557a <virtual thunk to PowerSensorV3::report(bool)>:
_ZTv0_n6_N13PowerSensorV36reportEb():
    557a:	dc 01       	movw	r26, r24
    557c:	ed 91       	ld	r30, X+
    557e:	fc 91       	ld	r31, X
    5580:	36 97       	sbiw	r30, 0x06	; 6
    5582:	20 81       	ld	r18, Z
    5584:	31 81       	ldd	r19, Z+1	; 0x01
    5586:	82 0f       	add	r24, r18
    5588:	93 1f       	adc	r25, r19
    558a:	0c 94 4c 2a 	jmp	0x5498	; 0x5498 <PowerSensorV3::report(bool)>

0000558e <Sound::playOnOffSound(bool)>:
_ZN5Sound14playOnOffSoundEb():
b:\Gbox420\Gbox420\Gbox420_Mega_Main\build\sketch\src\Components/Sound.cpp:13
  Enabled = &DefaultSettings->Enabled;
  Tone1 = new TonePlayer(TCCR1A, TCCR1B, OCR1AH, OCR1AL, TCNT1H, TCNT1L);  // pin D9 (Uno/Nano), D11 (Mega)
  pinMode(*Pin, OUTPUT);
  Parent->addToRefreshQueue_Sec(this);
  logToSerials(F("Sound ready"), true, 3);
  checkEvents();
    558e:	21 e0       	ldi	r18, 0x01	; 1
    5590:	fc 01       	movw	r30, r24
    5592:	66 23       	and	r22, r22
    5594:	11 f0       	breq	.+4      	; 0x559a <Sound::playOnOffSound(bool)+0xc>
    5596:	22 87       	std	Z+10, r18	; 0x0a
    5598:	08 95       	ret
    559a:	23 87       	std	Z+11, r18	; 0x0b
    559c:	08 95       	ret

0000559e <Sound::playOnSound()>:
_ZN5Sound11playOnSoundEv():
    559e:	21 e0       	ldi	r18, 0x01	; 1
    55a0:	fc 01       	movw	r30, r24
    55a2:	22 87       	std	Z+10, r18	; 0x0a
    55a4:	08 95       	ret

000055a6 <Sound::playOffSound()>:
_ZN5Sound12playOffSoundEv():
    55a6:	21 e0       	ldi	r18, 0x01	; 1
    55a8:	fc 01       	movw	r30, r24
    55aa:	23 87       	std	Z+11, r18	; 0x0b
    55ac:	08 95       	ret

000055ae <Sound::setSoundOnOff(bool)>:
_ZN5Sound13setSoundOnOffEb():
    55ae:	ef 92       	push	r14
    55b0:	ff 92       	push	r15
    55b2:	0f 93       	push	r16
    55b4:	1f 93       	push	r17
    55b6:	cf 93       	push	r28
    55b8:	df 93       	push	r29
    55ba:	fc 01       	movw	r30, r24
    55bc:	20 85       	ldd	r18, Z+8	; 0x08
    55be:	31 85       	ldd	r19, Z+9	; 0x09
    55c0:	d9 01       	movw	r26, r18
    55c2:	6c 93       	st	X, r22
_ZN5Sound14playOnOffSoundEb():
    55c4:	81 e0       	ldi	r24, 0x01	; 1
    55c6:	66 23       	and	r22, r22
    55c8:	21 f1       	breq	.+72     	; 0x5612 <Sound::setSoundOnOff(bool)+0x64>
    55ca:	82 87       	std	Z+10, r24	; 0x0a
_ZN5Sound13setSoundOnOffEb():
    55cc:	e2 80       	ldd	r14, Z+2	; 0x02
    55ce:	f3 80       	ldd	r15, Z+3	; 0x03
    55d0:	e7 01       	movw	r28, r14
    55d2:	a8 81       	ld	r26, Y
    55d4:	b9 81       	ldd	r27, Y+1	; 0x01
    55d6:	12 96       	adiw	r26, 0x02	; 2
    55d8:	0d 91       	ld	r16, X+
    55da:	1c 91       	ld	r17, X
    55dc:	a0 81       	ld	r26, Z
    55de:	b1 81       	ldd	r27, Z+1	; 0x01
    55e0:	16 97       	sbiw	r26, 0x06	; 6
    55e2:	cd 91       	ld	r28, X+
    55e4:	dc 91       	ld	r29, X
    55e6:	ce 0f       	add	r28, r30
    55e8:	df 1f       	adc	r29, r31
_ZN5Sound19getEnabledStateTextEb():
    55ea:	f9 01       	movw	r30, r18
    55ec:	80 81       	ld	r24, Z
    55ee:	0e 94 e9 34 	call	0x69d2	; 0x69d2 <toText_enabledDisabled(bool)>
_ZN5Sound13setSoundOnOffEb():
    55f2:	40 e0       	ldi	r20, 0x00	; 0
    55f4:	bc 01       	movw	r22, r24
    55f6:	ce 01       	movw	r24, r28
    55f8:	0e 94 9f 19 	call	0x333e	; 0x333e <Common::getName(char*, bool)>
    55fc:	43 e0       	ldi	r20, 0x03	; 3
    55fe:	bc 01       	movw	r22, r24
    5600:	c7 01       	movw	r24, r14
    5602:	f8 01       	movw	r30, r16
    5604:	df 91       	pop	r29
    5606:	cf 91       	pop	r28
    5608:	1f 91       	pop	r17
    560a:	0f 91       	pop	r16
    560c:	ff 90       	pop	r15
    560e:	ef 90       	pop	r14
    5610:	19 94       	eijmp
_ZN5Sound14playOnOffSoundEb():
    5612:	83 87       	std	Z+11, r24	; 0x0b
    5614:	db cf       	rjmp	.-74     	; 0x55cc <Sound::setSoundOnOff(bool)+0x1e>

00005616 <Sound::OnSound()>:
_ZN5Sound7OnSoundEv():
    5616:	cf 93       	push	r28
    5618:	df 93       	push	r29
    561a:	dc 01       	movw	r26, r24
    561c:	18 96       	adiw	r26, 0x08	; 8
    561e:	ed 91       	ld	r30, X+
    5620:	fc 91       	ld	r31, X
    5622:	20 81       	ld	r18, Z
    5624:	22 23       	and	r18, r18
    5626:	19 f1       	breq	.+70     	; 0x566e <Sound::OnSound()+0x58>
    5628:	ec 01       	movw	r28, r24
    562a:	64 ef       	ldi	r22, 0xF4	; 244
    562c:	71 e0       	ldi	r23, 0x01	; 1
    562e:	8c 81       	ldd	r24, Y+4	; 0x04
    5630:	9d 81       	ldd	r25, Y+5	; 0x05
    5632:	0e 94 98 7d 	call	0xfb30	; 0xfb30 <TonePlayer::tone(unsigned int)>
    5636:	64 e6       	ldi	r22, 0x64	; 100
    5638:	70 e0       	ldi	r23, 0x00	; 0
    563a:	80 e0       	ldi	r24, 0x00	; 0
    563c:	90 e0       	ldi	r25, 0x00	; 0
    563e:	0e 94 98 85 	call	0x10b30	; 0x10b30 <delay>
    5642:	8c 81       	ldd	r24, Y+4	; 0x04
    5644:	9d 81       	ldd	r25, Y+5	; 0x05
    5646:	0e 94 dd 7d 	call	0xfbba	; 0xfbba <TonePlayer::noTone()>
    564a:	68 ee       	ldi	r22, 0xE8	; 232
    564c:	73 e0       	ldi	r23, 0x03	; 3
    564e:	8c 81       	ldd	r24, Y+4	; 0x04
    5650:	9d 81       	ldd	r25, Y+5	; 0x05
    5652:	0e 94 98 7d 	call	0xfb30	; 0xfb30 <TonePlayer::tone(unsigned int)>
    5656:	64 e6       	ldi	r22, 0x64	; 100
    5658:	70 e0       	ldi	r23, 0x00	; 0
    565a:	80 e0       	ldi	r24, 0x00	; 0
    565c:	90 e0       	ldi	r25, 0x00	; 0
    565e:	0e 94 98 85 	call	0x10b30	; 0x10b30 <delay>
    5662:	8c 81       	ldd	r24, Y+4	; 0x04
    5664:	9d 81       	ldd	r25, Y+5	; 0x05
    5666:	df 91       	pop	r29
    5668:	cf 91       	pop	r28
    566a:	0c 94 dd 7d 	jmp	0xfbba	; 0xfbba <TonePlayer::noTone()>
    566e:	df 91       	pop	r29
    5670:	cf 91       	pop	r28
    5672:	08 95       	ret

00005674 <Sound::OffSound()>:
_ZN5Sound8OffSoundEv():
    5674:	cf 93       	push	r28
    5676:	df 93       	push	r29
    5678:	dc 01       	movw	r26, r24
    567a:	18 96       	adiw	r26, 0x08	; 8
    567c:	ed 91       	ld	r30, X+
    567e:	fc 91       	ld	r31, X
    5680:	20 81       	ld	r18, Z
    5682:	22 23       	and	r18, r18
    5684:	19 f1       	breq	.+70     	; 0x56cc <Sound::OffSound()+0x58>
    5686:	ec 01       	movw	r28, r24
    5688:	68 ee       	ldi	r22, 0xE8	; 232
    568a:	73 e0       	ldi	r23, 0x03	; 3
    568c:	8c 81       	ldd	r24, Y+4	; 0x04
    568e:	9d 81       	ldd	r25, Y+5	; 0x05
    5690:	0e 94 98 7d 	call	0xfb30	; 0xfb30 <TonePlayer::tone(unsigned int)>
    5694:	64 e6       	ldi	r22, 0x64	; 100
    5696:	70 e0       	ldi	r23, 0x00	; 0
    5698:	80 e0       	ldi	r24, 0x00	; 0
    569a:	90 e0       	ldi	r25, 0x00	; 0
    569c:	0e 94 98 85 	call	0x10b30	; 0x10b30 <delay>
    56a0:	8c 81       	ldd	r24, Y+4	; 0x04
    56a2:	9d 81       	ldd	r25, Y+5	; 0x05
    56a4:	0e 94 dd 7d 	call	0xfbba	; 0xfbba <TonePlayer::noTone()>
    56a8:	64 ef       	ldi	r22, 0xF4	; 244
    56aa:	71 e0       	ldi	r23, 0x01	; 1
    56ac:	8c 81       	ldd	r24, Y+4	; 0x04
    56ae:	9d 81       	ldd	r25, Y+5	; 0x05
    56b0:	0e 94 98 7d 	call	0xfb30	; 0xfb30 <TonePlayer::tone(unsigned int)>
    56b4:	64 e6       	ldi	r22, 0x64	; 100
    56b6:	70 e0       	ldi	r23, 0x00	; 0
    56b8:	80 e0       	ldi	r24, 0x00	; 0
    56ba:	90 e0       	ldi	r25, 0x00	; 0
    56bc:	0e 94 98 85 	call	0x10b30	; 0x10b30 <delay>
    56c0:	8c 81       	ldd	r24, Y+4	; 0x04
    56c2:	9d 81       	ldd	r25, Y+5	; 0x05
    56c4:	df 91       	pop	r29
    56c6:	cf 91       	pop	r28
    56c8:	0c 94 dd 7d 	jmp	0xfbba	; 0xfbba <TonePlayer::noTone()>
    56cc:	df 91       	pop	r29
    56ce:	cf 91       	pop	r28
    56d0:	08 95       	ret

000056d2 <Sound::checkEvents()>:
_ZN5Sound11checkEventsEv():
    56d2:	cf 93       	push	r28
    56d4:	df 93       	push	r29
    56d6:	ec 01       	movw	r28, r24
    56d8:	e8 85       	ldd	r30, Y+8	; 0x08
    56da:	f9 85       	ldd	r31, Y+9	; 0x09
    56dc:	80 81       	ld	r24, Z
    56de:	88 23       	and	r24, r24
    56e0:	61 f0       	breq	.+24     	; 0x56fa <Sound::checkEvents()+0x28>
    56e2:	8b 85       	ldd	r24, Y+11	; 0x0b
    56e4:	88 23       	and	r24, r24
    56e6:	19 f0       	breq	.+6      	; 0x56ee <Sound::checkEvents()+0x1c>
    56e8:	ce 01       	movw	r24, r28
    56ea:	0e 94 3a 2b 	call	0x5674	; 0x5674 <Sound::OffSound()>
    56ee:	8a 85       	ldd	r24, Y+10	; 0x0a
    56f0:	88 23       	and	r24, r24
    56f2:	19 f0       	breq	.+6      	; 0x56fa <Sound::checkEvents()+0x28>
    56f4:	ce 01       	movw	r24, r28
    56f6:	0e 94 0b 2b 	call	0x5616	; 0x5616 <Sound::OnSound()>
    56fa:	1a 86       	std	Y+10, r1	; 0x0a
    56fc:	1b 86       	std	Y+11, r1	; 0x0b
    56fe:	df 91       	pop	r29
    5700:	cf 91       	pop	r28
    5702:	08 95       	ret

00005704 <Sound::Sound(__FlashStringHelper const*, Module*, Settings::SoundSettings*)>:
_ZN5SoundC2EPK19__FlashStringHelperP6ModulePN8Settings13SoundSettingsE():
b:\Gbox420\Gbox420\Gbox420_Mega_Main\build\sketch\src\Components/Sound.cpp:3
#include "Sound.h"

Sound::Sound(const __FlashStringHelper *Name, Module *Parent, Settings::SoundSettings *DefaultSettings) : Common(Name)
    5704:	ef 92       	push	r14
    5706:	ff 92       	push	r15
    5708:	0f 93       	push	r16
    570a:	1f 93       	push	r17
    570c:	cf 93       	push	r28
    570e:	df 93       	push	r29
    5710:	ec 01       	movw	r28, r24
    5712:	79 01       	movw	r14, r18
Sound():
    5714:	db 01       	movw	r26, r22
    5716:	8d 91       	ld	r24, X+
    5718:	9c 91       	ld	r25, X
    571a:	11 97       	sbiw	r26, 0x01	; 1
    571c:	99 83       	std	Y+1, r25	; 0x01
    571e:	88 83       	st	Y, r24
    5720:	12 96       	adiw	r26, 0x02	; 2
    5722:	2d 91       	ld	r18, X+
    5724:	3c 91       	ld	r19, X
    5726:	06 97       	sbiw	r24, 0x06	; 6
    5728:	dc 01       	movw	r26, r24
    572a:	ed 91       	ld	r30, X+
    572c:	fc 91       	ld	r31, X
    572e:	ec 0f       	add	r30, r28
    5730:	fd 1f       	adc	r31, r29
    5732:	31 83       	std	Z+1, r19	; 0x01
    5734:	20 83       	st	Z, r18
    5736:	81 e0       	ldi	r24, 0x01	; 1
    5738:	8a 87       	std	Y+10, r24	; 0x0a
    573a:	8b 87       	std	Y+11, r24	; 0x0b
b:\Gbox420\Gbox420\Gbox420_Mega_Main\build\sketch\src\Components/Sound.cpp:5
{
  this->Parent = Parent;
    573c:	fb 82       	std	Y+3, r15	; 0x03
    573e:	ea 82       	std	Y+2, r14	; 0x02
b:\Gbox420\Gbox420\Gbox420_Mega_Main\build\sketch\src\Components/Sound.cpp:6
  Parent->SoundFeedback = this; ///< Pointer for child objects to use sound feedback
    5740:	f7 01       	movw	r30, r14
    5742:	d3 83       	std	Z+3, r29	; 0x03
    5744:	c2 83       	std	Z+2, r28	; 0x02
b:\Gbox420\Gbox420\Gbox420_Mega_Main\build\sketch\src\Components/Sound.cpp:7
  Pin = &DefaultSettings->Pin;
    5746:	1f 83       	std	Y+7, r17	; 0x07
    5748:	0e 83       	std	Y+6, r16	; 0x06
b:\Gbox420\Gbox420\Gbox420_Mega_Main\build\sketch\src\Components/Sound.cpp:8
  Enabled = &DefaultSettings->Enabled;
    574a:	0f 5f       	subi	r16, 0xFF	; 255
    574c:	1f 4f       	sbci	r17, 0xFF	; 255
    574e:	19 87       	std	Y+9, r17	; 0x09
    5750:	08 87       	std	Y+8, r16	; 0x08
b:\Gbox420\Gbox420\Gbox420_Mega_Main\build\sketch\src\Components/Sound.cpp:9
  Tone1 = new TonePlayer(TCCR1A, TCCR1B, OCR1AH, OCR1AL, TCNT1H, TCNT1L);  // pin D9 (Uno/Nano), D11 (Mega)
    5752:	8c e0       	ldi	r24, 0x0C	; 12
    5754:	90 e0       	ldi	r25, 0x00	; 0
    5756:	0e 94 6d 8f 	call	0x11eda	; 0x11eda <operator new(unsigned int)>
    575a:	fc 01       	movw	r30, r24
_ZN10TonePlayerC4ERVhS1_S1_S1_S1_S1_():
C:\Program Files (x86)\Arduino\libraries\TonePlayer/TonePlayer.h:59
         timerRegA_  (&timerRegA), 
         timerRegB_  (&timerRegB),
         timerOCRH_  (&timerOCRH), 
         timerOCRL_  (&timerOCRL), 
         timerTCNTH_ (&timerTCNTH), 
         timerTCNTL_ (&timerTCNTH)
    575c:	80 e8       	ldi	r24, 0x80	; 128
    575e:	90 e0       	ldi	r25, 0x00	; 0
    5760:	91 83       	std	Z+1, r25	; 0x01
    5762:	80 83       	st	Z, r24
    5764:	81 e8       	ldi	r24, 0x81	; 129
    5766:	90 e0       	ldi	r25, 0x00	; 0
    5768:	93 83       	std	Z+3, r25	; 0x03
    576a:	82 83       	std	Z+2, r24	; 0x02
    576c:	89 e8       	ldi	r24, 0x89	; 137
    576e:	90 e0       	ldi	r25, 0x00	; 0
    5770:	95 83       	std	Z+5, r25	; 0x05
    5772:	84 83       	std	Z+4, r24	; 0x04
    5774:	88 e8       	ldi	r24, 0x88	; 136
    5776:	90 e0       	ldi	r25, 0x00	; 0
    5778:	97 83       	std	Z+7, r25	; 0x07
    577a:	86 83       	std	Z+6, r24	; 0x06
    577c:	85 e8       	ldi	r24, 0x85	; 133
    577e:	90 e0       	ldi	r25, 0x00	; 0
    5780:	91 87       	std	Z+9, r25	; 0x09
    5782:	80 87       	std	Z+8, r24	; 0x08
    5784:	93 87       	std	Z+11, r25	; 0x0b
    5786:	82 87       	std	Z+10, r24	; 0x0a
Sound():
b:\Gbox420\Gbox420\Gbox420_Mega_Main\build\sketch\src\Components/Sound.cpp:9
    5788:	fd 83       	std	Y+5, r31	; 0x05
    578a:	ec 83       	std	Y+4, r30	; 0x04
b:\Gbox420\Gbox420\Gbox420_Mega_Main\build\sketch\src\Components/Sound.cpp:10
  pinMode(*Pin, OUTPUT);
    578c:	ee 81       	ldd	r30, Y+6	; 0x06
    578e:	ff 81       	ldd	r31, Y+7	; 0x07
    5790:	61 e0       	ldi	r22, 0x01	; 1
    5792:	80 81       	ld	r24, Z
    5794:	0e 94 86 87 	call	0x10f0c	; 0x10f0c <pinMode>
b:\Gbox420\Gbox420\Gbox420_Mega_Main\build\sketch\src\Components/Sound.cpp:11
  Parent->addToRefreshQueue_Sec(this);
    5798:	e8 81       	ld	r30, Y
    579a:	f9 81       	ldd	r31, Y+1	; 0x01
    579c:	36 97       	sbiw	r30, 0x06	; 6
    579e:	60 81       	ld	r22, Z
    57a0:	71 81       	ldd	r23, Z+1	; 0x01
    57a2:	6c 0f       	add	r22, r28
    57a4:	7d 1f       	adc	r23, r29
    57a6:	c7 01       	movw	r24, r14
    57a8:	0e 94 75 1b 	call	0x36ea	; 0x36ea <Module::addToRefreshQueue_Sec(Common*)>
b:\Gbox420\Gbox420\Gbox420_Mega_Main\build\sketch\src\Components/Sound.cpp:12
  logToSerials(F("Sound ready"), true, 3);
    57ac:	43 e0       	ldi	r20, 0x03	; 3
    57ae:	61 e0       	ldi	r22, 0x01	; 1
    57b0:	8e e0       	ldi	r24, 0x0E	; 14
    57b2:	9a e0       	ldi	r25, 0x0A	; 10
    57b4:	0e 94 85 16 	call	0x2d0a	; 0x2d0a <logToSerials(__FlashStringHelper const*, bool, unsigned char)>
b:\Gbox420\Gbox420\Gbox420_Mega_Main\build\sketch\src\Components/Sound.cpp:13
  checkEvents();
    57b8:	ce 01       	movw	r24, r28
_ZN5SoundC2EPK19__FlashStringHelperP6ModulePN8Settings13SoundSettingsE():
b:\Gbox420\Gbox420\Gbox420_Mega_Main\build\sketch\src\Components/Sound.cpp:14
}
    57ba:	df 91       	pop	r29
    57bc:	cf 91       	pop	r28
    57be:	1f 91       	pop	r17
    57c0:	0f 91       	pop	r16
    57c2:	ff 90       	pop	r15
    57c4:	ef 90       	pop	r14
Sound():
b:\Gbox420\Gbox420\Gbox420_Mega_Main\build\sketch\src\Components/Sound.cpp:13
  Enabled = &DefaultSettings->Enabled;
  Tone1 = new TonePlayer(TCCR1A, TCCR1B, OCR1AH, OCR1AL, TCNT1H, TCNT1L);  // pin D9 (Uno/Nano), D11 (Mega)
  pinMode(*Pin, OUTPUT);
  Parent->addToRefreshQueue_Sec(this);
  logToSerials(F("Sound ready"), true, 3);
  checkEvents();
    57c6:	0c 94 69 2b 	jmp	0x56d2	; 0x56d2 <Sound::checkEvents()>

000057ca <Sound::getEnabledState()>:
_ZN5Sound15getEnabledStateEv():
b:\Gbox420\Gbox420\Gbox420_Mega_Main\build\sketch\src\Components/Sound.cpp:99
  }
}

bool Sound::getEnabledState()
{
  return *Enabled;
    57ca:	dc 01       	movw	r26, r24
    57cc:	18 96       	adiw	r26, 0x08	; 8
    57ce:	ed 91       	ld	r30, X+
    57d0:	fc 91       	ld	r31, X
b:\Gbox420\Gbox420\Gbox420_Mega_Main\build\sketch\src\Components/Sound.cpp:100
}
    57d2:	80 81       	ld	r24, Z
    57d4:	08 95       	ret

000057d6 <Sound::getEnabledStateText(bool)>:
_ZN5Sound19getEnabledStateTextEb():
b:\Gbox420\Gbox420\Gbox420_Mega_Main\build\sketch\src\Components/Sound.cpp:103

char *Sound::getEnabledStateText(bool FriendlyFormat)
{
    57d6:	dc 01       	movw	r26, r24
    57d8:	18 96       	adiw	r26, 0x08	; 8
    57da:	ed 91       	ld	r30, X+
    57dc:	fc 91       	ld	r31, X
    57de:	80 81       	ld	r24, Z
b:\Gbox420\Gbox420\Gbox420_Mega_Main\build\sketch\src\Components/Sound.cpp:104
  if (FriendlyFormat)
    57e0:	61 11       	cpse	r22, r1
b:\Gbox420\Gbox420\Gbox420_Mega_Main\build\sketch\src\Components/Sound.cpp:106
  {
    return toText_enabledDisabled(*Enabled);
    57e2:	0c 94 e9 34 	jmp	0x69d2	; 0x69d2 <toText_enabledDisabled(bool)>
b:\Gbox420\Gbox420\Gbox420_Mega_Main\build\sketch\src\Components/Sound.cpp:110
  }
  else
  {
    return toText(*Enabled);
    57e6:	90 e0       	ldi	r25, 0x00	; 0
    57e8:	0c 94 95 33 	jmp	0x672a	; 0x672a <toText(int)>

000057ec <Sound::report(bool)>:
_ZN5Sound6reportEb():
b:\Gbox420\Gbox420\Gbox420_Mega_Main\build\sketch\src\Components/Sound.cpp:20

/**
* @brief Report current state in a JSON format to the LongMessage buffer
*/
void Sound::report(bool FriendlyFormat)
{
    57ec:	1f 93       	push	r17
    57ee:	cf 93       	push	r28
    57f0:	df 93       	push	r29
    57f2:	ec 01       	movw	r28, r24
    57f4:	16 2f       	mov	r17, r22
b:\Gbox420\Gbox420\Gbox420_Mega_Main\build\sketch\src\Components/Sound.cpp:21
  Common::report(FriendlyFormat); //< Load the objects name to the LongMessage buffer a the beginning of a JSON :  "Name":{
    57f6:	e8 81       	ld	r30, Y
    57f8:	f9 81       	ldd	r31, Y+1	; 0x01
    57fa:	36 97       	sbiw	r30, 0x06	; 6
    57fc:	80 81       	ld	r24, Z
    57fe:	91 81       	ldd	r25, Z+1	; 0x01
    5800:	8c 0f       	add	r24, r28
    5802:	9d 1f       	adc	r25, r29
    5804:	0e 94 0e 19 	call	0x321c	; 0x321c <Common::report(bool)>
b:\Gbox420\Gbox420\Gbox420_Mega_Main\build\sketch\src\Components/Sound.cpp:22
  strcat_P(LongMessage, (PGM_P)F("\"S\":\""));
    5808:	68 e0       	ldi	r22, 0x08	; 8
    580a:	7a e0       	ldi	r23, 0x0A	; 10
    580c:	81 e3       	ldi	r24, 0x31	; 49
    580e:	9e e0       	ldi	r25, 0x0E	; 14
    5810:	0e 94 da 94 	call	0x129b4	; 0x129b4 <strcat_P>
b:\Gbox420\Gbox420\Gbox420_Mega_Main\build\sketch\src\Components/Sound.cpp:23
  strcat(LongMessage, getEnabledStateText(FriendlyFormat));
    5814:	61 2f       	mov	r22, r17
    5816:	ce 01       	movw	r24, r28
    5818:	0e 94 eb 2b 	call	0x57d6	; 0x57d6 <Sound::getEnabledStateText(bool)>
    581c:	bc 01       	movw	r22, r24
    581e:	81 e3       	ldi	r24, 0x31	; 49
    5820:	9e e0       	ldi	r25, 0x0E	; 14
    5822:	0e 94 23 95 	call	0x12a46	; 0x12a46 <strcat>
b:\Gbox420\Gbox420\Gbox420_Mega_Main\build\sketch\src\Components/Sound.cpp:24
  strcat_P(LongMessage, (PGM_P)F("\"}")); ///< closing the curly bracket at the end of the JSON
    5826:	65 e0       	ldi	r22, 0x05	; 5
    5828:	7a e0       	ldi	r23, 0x0A	; 10
    582a:	81 e3       	ldi	r24, 0x31	; 49
    582c:	9e e0       	ldi	r25, 0x0E	; 14
b:\Gbox420\Gbox420\Gbox420_Mega_Main\build\sketch\src\Components/Sound.cpp:25
}
    582e:	df 91       	pop	r29
    5830:	cf 91       	pop	r28
    5832:	1f 91       	pop	r17
b:\Gbox420\Gbox420\Gbox420_Mega_Main\build\sketch\src\Components/Sound.cpp:24
void Sound::report(bool FriendlyFormat)
{
  Common::report(FriendlyFormat); //< Load the objects name to the LongMessage buffer a the beginning of a JSON :  "Name":{
  strcat_P(LongMessage, (PGM_P)F("\"S\":\""));
  strcat(LongMessage, getEnabledStateText(FriendlyFormat));
  strcat_P(LongMessage, (PGM_P)F("\"}")); ///< closing the curly bracket at the end of the JSON
    5834:	0c 94 da 94 	jmp	0x129b4	; 0x129b4 <strcat_P>

00005838 <virtual thunk to Sound::report(bool)>:
_ZTv0_n6_N5Sound6reportEb():
    5838:	dc 01       	movw	r26, r24
    583a:	ed 91       	ld	r30, X+
    583c:	fc 91       	ld	r31, X
    583e:	36 97       	sbiw	r30, 0x06	; 6
    5840:	20 81       	ld	r18, Z
    5842:	31 81       	ldd	r19, Z+1	; 0x01
    5844:	82 0f       	add	r24, r18
    5846:	93 1f       	adc	r25, r19
    5848:	0c 94 f6 2b 	jmp	0x57ec	; 0x57ec <Sound::report(bool)>

0000584c <Sound::refresh_Sec()>:
_ZN5Sound11refresh_SecEv():
b:\Gbox420\Gbox420\Gbox420_Mega_Main\build\sketch\src\Components/Sound.cpp:28
}

void Sound::refresh_Sec()
{
    584c:	cf 93       	push	r28
    584e:	df 93       	push	r29
    5850:	ec 01       	movw	r28, r24
b:\Gbox420\Gbox420\Gbox420_Mega_Main\build\sketch\src\Components/Sound.cpp:29
  Common::refresh_Sec();
    5852:	e8 81       	ld	r30, Y
    5854:	f9 81       	ldd	r31, Y+1	; 0x01
    5856:	36 97       	sbiw	r30, 0x06	; 6
    5858:	80 81       	ld	r24, Z
    585a:	91 81       	ldd	r25, Z+1	; 0x01
    585c:	8c 0f       	add	r24, r28
    585e:	9d 1f       	adc	r25, r29
    5860:	0e 94 b8 18 	call	0x3170	; 0x3170 <Common::refresh_Sec()>
b:\Gbox420\Gbox420\Gbox420_Mega_Main\build\sketch\src\Components/Sound.cpp:30
  checkEvents();
    5864:	ce 01       	movw	r24, r28
b:\Gbox420\Gbox420\Gbox420_Mega_Main\build\sketch\src\Components/Sound.cpp:31
}
    5866:	df 91       	pop	r29
    5868:	cf 91       	pop	r28
b:\Gbox420\Gbox420\Gbox420_Mega_Main\build\sketch\src\Components/Sound.cpp:30
}

void Sound::refresh_Sec()
{
  Common::refresh_Sec();
  checkEvents();
    586a:	0c 94 69 2b 	jmp	0x56d2	; 0x56d2 <Sound::checkEvents()>

0000586e <virtual thunk to Sound::refresh_Sec()>:
_ZTv0_n8_N5Sound11refresh_SecEv():
    586e:	dc 01       	movw	r26, r24
    5870:	ed 91       	ld	r30, X+
    5872:	fc 91       	ld	r31, X
    5874:	38 97       	sbiw	r30, 0x08	; 8
    5876:	20 81       	ld	r18, Z
    5878:	31 81       	ldd	r19, Z+1	; 0x01
    587a:	82 0f       	add	r24, r18
    587c:	93 1f       	adc	r25, r19
    587e:	0c 94 26 2c 	jmp	0x584c	; 0x584c <Sound::refresh_Sec()>

00005882 <Common_Web::websiteEvent_Load(char*)>:
_ZN10Common_Web17websiteEvent_LoadEPc():
b:\Gbox420\Gbox420\Gbox420_Mega_Main\build\sketch\src\Components_Web/AirPump_Web.cpp:7

AirPump_Web::AirPump_Web(const __FlashStringHelper *Name, Module_Web *Parent, Settings::AirPumpSettings *DefaultSettings) : Common(Name), Common_Web(Name), AirPump(Name, Parent, DefaultSettings)
{
  this->Parent = Parent;
  Parent->addToWebsiteQueue_Refresh(this);
  Parent->addToCommandQueue(this);
    5882:	08 95       	ret

00005884 <Common_Web::websiteEvent_Refresh(char*)>:
_ZN10Common_Web20websiteEvent_RefreshEPc():
    5884:	08 95       	ret

00005886 <Common_Web::commandEvent(char*, char*)>:
_ZN10Common_Web12commandEventEPcS0_():
    5886:	80 e0       	ldi	r24, 0x00	; 0
    5888:	08 95       	ret

0000588a <virtual thunk to Common_Web::commandEvent(char*, char*)>:
_ZTv0_n14_N10Common_Web12commandEventEPcS0_():
    588a:	80 e0       	ldi	r24, 0x00	; 0
    588c:	08 95       	ret

0000588e <AirPump_Web::websiteEvent_Refresh(char*)>:
_ZN11AirPump_Web20websiteEvent_RefreshEPc():
    588e:	0f 93       	push	r16
    5890:	1f 93       	push	r17
    5892:	cf 93       	push	r28
    5894:	df 93       	push	r29
    5896:	ec 01       	movw	r28, r24
    5898:	61 e0       	ldi	r22, 0x01	; 1
    589a:	02 96       	adiw	r24, 0x02	; 2
    589c:	0e 94 47 1e 	call	0x3c8e	; 0x3c8e <AirPump::getStateText(bool)>
    58a0:	8c 01       	movw	r16, r24
    58a2:	e8 81       	ld	r30, Y
    58a4:	f9 81       	ldd	r31, Y+1	; 0x01
    58a6:	36 97       	sbiw	r30, 0x06	; 6
    58a8:	80 81       	ld	r24, Z
    58aa:	91 81       	ldd	r25, Z+1	; 0x01
    58ac:	41 e0       	ldi	r20, 0x01	; 1
    58ae:	62 e2       	ldi	r22, 0x22	; 34
    58b0:	7a e0       	ldi	r23, 0x0A	; 10
    58b2:	8c 0f       	add	r24, r28
    58b4:	9d 1f       	adc	r25, r29
    58b6:	0e 94 7e 19 	call	0x32fc	; 0x32fc <Common::getName(__FlashStringHelper const*, bool)>
    58ba:	a8 01       	movw	r20, r16
    58bc:	bc 01       	movw	r22, r24
    58be:	89 ee       	ldi	r24, 0xE9	; 233
    58c0:	9c e0       	ldi	r25, 0x0C	; 12
    58c2:	df 91       	pop	r29
    58c4:	cf 91       	pop	r28
    58c6:	1f 91       	pop	r17
    58c8:	0f 91       	pop	r16
    58ca:	0c 94 a9 77 	jmp	0xef52	; 0xef52 <ELClientWebServer::setArgString(char const*, char const*)>

000058ce <AirPump_Web::commandEvent(char*, char*)>:
_ZN11AirPump_Web12commandEventEPcS0_():
    58ce:	ef 92       	push	r14
    58d0:	ff 92       	push	r15
    58d2:	1f 93       	push	r17
    58d4:	cf 93       	push	r28
    58d6:	df 93       	push	r29
    58d8:	ec 01       	movw	r28, r24
    58da:	7a 01       	movw	r14, r20
    58dc:	e8 81       	ld	r30, Y
    58de:	f9 81       	ldd	r31, Y+1	; 0x01
    58e0:	36 97       	sbiw	r30, 0x06	; 6
    58e2:	80 81       	ld	r24, Z
    58e4:	91 81       	ldd	r25, Z+1	; 0x01
    58e6:	8c 0f       	add	r24, r28
    58e8:	9d 1f       	adc	r25, r29
    58ea:	0e 94 25 19 	call	0x324a	; 0x324a <Common::isThisMine(char const*)>
    58ee:	18 2f       	mov	r17, r24
    58f0:	88 23       	and	r24, r24
    58f2:	61 f0       	breq	.+24     	; 0x590c <AirPump_Web::commandEvent(char*, char*)+0x3e>
    58f4:	6f e1       	ldi	r22, 0x1F	; 31
    58f6:	7a e0       	ldi	r23, 0x0A	; 10
    58f8:	81 eb       	ldi	r24, 0xB1	; 177
    58fa:	9d e0       	ldi	r25, 0x0D	; 13
    58fc:	0e 94 e5 94 	call	0x129ca	; 0x129ca <strcmp_P>
    5900:	89 2b       	or	r24, r25
    5902:	59 f4       	brne	.+22     	; 0x591a <AirPump_Web::commandEvent(char*, char*)+0x4c>
    5904:	ce 01       	movw	r24, r28
    5906:	02 96       	adiw	r24, 0x02	; 2
    5908:	0e 94 3c 1e 	call	0x3c78	; 0x3c78 <AirPump::TurnOn()>
    590c:	81 2f       	mov	r24, r17
    590e:	df 91       	pop	r29
    5910:	cf 91       	pop	r28
    5912:	1f 91       	pop	r17
    5914:	ff 90       	pop	r15
    5916:	ef 90       	pop	r14
    5918:	08 95       	ret
    591a:	6c e1       	ldi	r22, 0x1C	; 28
    591c:	7a e0       	ldi	r23, 0x0A	; 10
    591e:	81 eb       	ldi	r24, 0xB1	; 177
    5920:	9d e0       	ldi	r25, 0x0D	; 13
    5922:	0e 94 e5 94 	call	0x129ca	; 0x129ca <strcmp_P>
    5926:	89 2b       	or	r24, r25
    5928:	29 f4       	brne	.+10     	; 0x5934 <AirPump_Web::commandEvent(char*, char*)+0x66>
    592a:	ce 01       	movw	r24, r28
    592c:	02 96       	adiw	r24, 0x02	; 2
    592e:	0e 94 31 1e 	call	0x3c62	; 0x3c62 <AirPump::TurnOff()>
    5932:	ec cf       	rjmp	.-40     	; 0x590c <AirPump_Web::commandEvent(char*, char*)+0x3e>
    5934:	6a e1       	ldi	r22, 0x1A	; 26
    5936:	7a e0       	ldi	r23, 0x0A	; 10
    5938:	81 eb       	ldi	r24, 0xB1	; 177
    593a:	9d e0       	ldi	r25, 0x0D	; 13
    593c:	0e 94 e5 94 	call	0x129ca	; 0x129ca <strcmp_P>
    5940:	89 2b       	or	r24, r25
    5942:	21 f7       	brne	.-56     	; 0x590c <AirPump_Web::commandEvent(char*, char*)+0x3e>
    5944:	c7 01       	movw	r24, r14
    5946:	0e 94 10 35 	call	0x6a20	; 0x6a20 <toBool(char*)>
    594a:	68 2f       	mov	r22, r24
    594c:	ce 01       	movw	r24, r28
    594e:	02 96       	adiw	r24, 0x02	; 2
    5950:	0e 94 f5 1d 	call	0x3bea	; 0x3bea <AirPump::setState(bool)>
    5954:	db cf       	rjmp	.-74     	; 0x590c <AirPump_Web::commandEvent(char*, char*)+0x3e>

00005956 <virtual thunk to AirPump_Web::commandEvent(char*, char*)>:
_ZTv0_n14_N11AirPump_Web12commandEventEPcS0_():
    5956:	dc 01       	movw	r26, r24
    5958:	ed 91       	ld	r30, X+
    595a:	fc 91       	ld	r31, X
    595c:	3e 97       	sbiw	r30, 0x0e	; 14
    595e:	20 81       	ld	r18, Z
    5960:	31 81       	ldd	r19, Z+1	; 0x01
    5962:	82 0f       	add	r24, r18
    5964:	93 1f       	adc	r25, r19
    5966:	0c 94 67 2c 	jmp	0x58ce	; 0x58ce <AirPump_Web::commandEvent(char*, char*)>

0000596a <AirPump_Web::AirPump_Web(__FlashStringHelper const*, Module_Web*, Settings::AirPumpSettings*)>:
_ZN11AirPump_WebC1EPK19__FlashStringHelperP10Module_WebPN8Settings15AirPumpSettingsE():
b:\Gbox420\Gbox420\Gbox420_Mega_Main\build\sketch\src\Components_Web/AirPump_Web.cpp:3
#include "AirPump_Web.h"

AirPump_Web::AirPump_Web(const __FlashStringHelper *Name, Module_Web *Parent, Settings::AirPumpSettings *DefaultSettings) : Common(Name), Common_Web(Name), AirPump(Name, Parent, DefaultSettings)
    596a:	cf 92       	push	r12
    596c:	df 92       	push	r13
    596e:	ef 92       	push	r14
    5970:	ff 92       	push	r15
    5972:	0f 93       	push	r16
    5974:	1f 93       	push	r17
    5976:	cf 93       	push	r28
    5978:	df 93       	push	r29
    597a:	ec 01       	movw	r28, r24
    597c:	6b 01       	movw	r12, r22
    597e:	7a 01       	movw	r14, r20
    5980:	89 01       	movw	r16, r18
AirPump_Web():
    5982:	0c 96       	adiw	r24, 0x0c	; 12
    5984:	0e 94 f7 18 	call	0x31ee	; 0x31ee <Common::Common(__FlashStringHelper const*)>
Common_Web():
b:\Gbox420\Gbox420\Gbox420_Mega_Main\build\sketch\src\Components_Web/420Common_Web.h:24
  virtual void websiteEvent_Refresh(__attribute__((unused)) char *Url){};                                                 ///< Called when an ESP-link webpage is refreshing (Automatic, every 5sec)
  virtual bool commandEvent(__attribute__((unused)) char *Command, __attribute__((unused)) char *Data) { return false; }; ///< Called when an ESP-link Button is clicked (Command: Name of the button, Data: empty), or a Field is submitted (Command: Name of the field, Data: The submitted value as text) Return true if the Command matches the Name of the component followed by _

private:
protected:
  inline Common_Web(const __FlashStringHelper *Name) : Common(Name) {} ///< Constructor, implemented in the header file https://stackoverflow.com/questions/4761834/defining-constructor-in-header-file-vs-implementation-cpp-file
    5988:	86 ee       	ldi	r24, 0xE6	; 230
    598a:	94 e0       	ldi	r25, 0x04	; 4
    598c:	99 83       	std	Y+1, r25	; 0x01
    598e:	88 83       	st	Y, r24
    5990:	8a ef       	ldi	r24, 0xFA	; 250
    5992:	94 e0       	ldi	r25, 0x04	; 4
    5994:	9d 87       	std	Y+13, r25	; 0x0d
    5996:	8c 87       	std	Y+12, r24	; 0x0c
AirPump_Web():
b:\Gbox420\Gbox420\Gbox420_Mega_Main\build\sketch\src\Components_Web/AirPump_Web.cpp:3
    5998:	ce 01       	movw	r24, r28
    599a:	02 96       	adiw	r24, 0x02	; 2
    599c:	30 e0       	ldi	r19, 0x00	; 0
    599e:	20 e0       	ldi	r18, 0x00	; 0
    59a0:	e1 14       	cp	r14, r1
    59a2:	f1 04       	cpc	r15, r1
    59a4:	41 f0       	breq	.+16     	; 0x59b6 <AirPump_Web::AirPump_Web(__FlashStringHelper const*, Module_Web*, Settings::AirPumpSettings*)+0x4c>
    59a6:	d7 01       	movw	r26, r14
    59a8:	ed 91       	ld	r30, X+
    59aa:	fc 91       	ld	r31, X
    59ac:	70 97       	sbiw	r30, 0x10	; 16
    59ae:	20 81       	ld	r18, Z
    59b0:	31 81       	ldd	r19, Z+1	; 0x01
    59b2:	2e 0d       	add	r18, r14
    59b4:	3f 1d       	adc	r19, r15
    59b6:	a6 01       	movw	r20, r12
    59b8:	6a e0       	ldi	r22, 0x0A	; 10
    59ba:	75 e0       	ldi	r23, 0x05	; 5
    59bc:	0e 94 9b 1d 	call	0x3b36	; 0x3b36 <AirPump::AirPump(__FlashStringHelper const*, Module*, Settings::AirPumpSettings*)>
    59c0:	88 e1       	ldi	r24, 0x18	; 24
    59c2:	95 e0       	ldi	r25, 0x05	; 5
    59c4:	99 83       	std	Y+1, r25	; 0x01
    59c6:	88 83       	st	Y, r24
    59c8:	86 e3       	ldi	r24, 0x36	; 54
    59ca:	95 e0       	ldi	r25, 0x05	; 5
    59cc:	9d 87       	std	Y+13, r25	; 0x0d
    59ce:	8c 87       	std	Y+12, r24	; 0x0c
    59d0:	84 e2       	ldi	r24, 0x24	; 36
    59d2:	95 e0       	ldi	r25, 0x05	; 5
    59d4:	9b 83       	std	Y+3, r25	; 0x03
    59d6:	8a 83       	std	Y+2, r24	; 0x02
b:\Gbox420\Gbox420\Gbox420_Mega_Main\build\sketch\src\Components_Web/AirPump_Web.cpp:5
{
  this->Parent = Parent;
    59d8:	fb 86       	std	Y+11, r15	; 0x0b
    59da:	ea 86       	std	Y+10, r14	; 0x0a
b:\Gbox420\Gbox420\Gbox420_Mega_Main\build\sketch\src\Components_Web/AirPump_Web.cpp:6
  Parent->addToWebsiteQueue_Refresh(this);
    59dc:	be 01       	movw	r22, r28
    59de:	c7 01       	movw	r24, r14
    59e0:	0e 94 9d 37 	call	0x6f3a	; 0x6f3a <Module_Web::addToWebsiteQueue_Refresh(Common_Web*)>
b:\Gbox420\Gbox420\Gbox420_Mega_Main\build\sketch\src\Components_Web/AirPump_Web.cpp:7
  Parent->addToCommandQueue(this);
    59e4:	be 01       	movw	r22, r28
    59e6:	c7 01       	movw	r24, r14
_ZN11AirPump_WebC1EPK19__FlashStringHelperP10Module_WebPN8Settings15AirPumpSettingsE():
b:\Gbox420\Gbox420\Gbox420_Mega_Main\build\sketch\src\Components_Web/AirPump_Web.cpp:8
}
    59e8:	df 91       	pop	r29
    59ea:	cf 91       	pop	r28
    59ec:	1f 91       	pop	r17
    59ee:	0f 91       	pop	r16
    59f0:	ff 90       	pop	r15
    59f2:	ef 90       	pop	r14
    59f4:	df 90       	pop	r13
    59f6:	cf 90       	pop	r12
AirPump_Web():
b:\Gbox420\Gbox420\Gbox420_Mega_Main\build\sketch\src\Components_Web/AirPump_Web.cpp:7

AirPump_Web::AirPump_Web(const __FlashStringHelper *Name, Module_Web *Parent, Settings::AirPumpSettings *DefaultSettings) : Common(Name), Common_Web(Name), AirPump(Name, Parent, DefaultSettings)
{
  this->Parent = Parent;
  Parent->addToWebsiteQueue_Refresh(this);
  Parent->addToCommandQueue(this);
    59f8:	0c 94 b7 37 	jmp	0x6f6e	; 0x6f6e <Module_Web::addToCommandQueue(Common_Web*)>

000059fc <DHTSensor_Web::websiteEvent_Refresh(char*)>:
_ZN13DHTSensor_Web20websiteEvent_RefreshEPc():
b:\gbox420\gbox420\gbox420_mega_main\build\sketch\src\components_web/DHTSensor_Web.cpp:6
#include "DHTSensor_Web.h"

DHTSensor_Web::DHTSensor_Web(const __FlashStringHelper *Name, Module_Web *Parent, Settings::DHTSensorSettings *DefaultSettings) : Common(Name), Common_Web(Name), DHTSensor(Name, Parent, DefaultSettings)
{
  this->Parent = Parent;
  Parent->addToWebsiteQueue_Refresh(this);
    59fc:	ef 92       	push	r14
    59fe:	ff 92       	push	r15
    5a00:	0f 93       	push	r16
    5a02:	1f 93       	push	r17
    5a04:	cf 93       	push	r28
    5a06:	df 93       	push	r29
    5a08:	ec 01       	movw	r28, r24
    5a0a:	8c 01       	movw	r16, r24
    5a0c:	0e 5f       	subi	r16, 0xFE	; 254
    5a0e:	1f 4f       	sbci	r17, 0xFF	; 255
    5a10:	61 e0       	ldi	r22, 0x01	; 1
    5a12:	c8 01       	movw	r24, r16
    5a14:	0e 94 25 1f 	call	0x3e4a	; 0x3e4a <DHTSensor::getTempText(bool)>
    5a18:	7c 01       	movw	r14, r24
    5a1a:	e8 81       	ld	r30, Y
    5a1c:	f9 81       	ldd	r31, Y+1	; 0x01
    5a1e:	36 97       	sbiw	r30, 0x06	; 6
    5a20:	80 81       	ld	r24, Z
    5a22:	91 81       	ldd	r25, Z+1	; 0x01
    5a24:	41 e0       	ldi	r20, 0x01	; 1
    5a26:	66 e2       	ldi	r22, 0x26	; 38
    5a28:	7a e0       	ldi	r23, 0x0A	; 10
    5a2a:	8c 0f       	add	r24, r28
    5a2c:	9d 1f       	adc	r25, r29
    5a2e:	0e 94 7e 19 	call	0x32fc	; 0x32fc <Common::getName(__FlashStringHelper const*, bool)>
    5a32:	a7 01       	movw	r20, r14
    5a34:	bc 01       	movw	r22, r24
    5a36:	89 ee       	ldi	r24, 0xE9	; 233
    5a38:	9c e0       	ldi	r25, 0x0C	; 12
    5a3a:	0e 94 a9 77 	call	0xef52	; 0xef52 <ELClientWebServer::setArgString(char const*, char const*)>
    5a3e:	61 e0       	ldi	r22, 0x01	; 1
    5a40:	c8 01       	movw	r24, r16
    5a42:	0e 94 30 1f 	call	0x3e60	; 0x3e60 <DHTSensor::getHumidityText(bool)>
    5a46:	8c 01       	movw	r16, r24
    5a48:	e8 81       	ld	r30, Y
    5a4a:	f9 81       	ldd	r31, Y+1	; 0x01
    5a4c:	36 97       	sbiw	r30, 0x06	; 6
    5a4e:	80 81       	ld	r24, Z
    5a50:	91 81       	ldd	r25, Z+1	; 0x01
    5a52:	41 e0       	ldi	r20, 0x01	; 1
    5a54:	64 e2       	ldi	r22, 0x24	; 36
    5a56:	7a e0       	ldi	r23, 0x0A	; 10
    5a58:	8c 0f       	add	r24, r28
    5a5a:	9d 1f       	adc	r25, r29
    5a5c:	0e 94 7e 19 	call	0x32fc	; 0x32fc <Common::getName(__FlashStringHelper const*, bool)>
    5a60:	a8 01       	movw	r20, r16
    5a62:	bc 01       	movw	r22, r24
    5a64:	89 ee       	ldi	r24, 0xE9	; 233
    5a66:	9c e0       	ldi	r25, 0x0C	; 12
    5a68:	df 91       	pop	r29
    5a6a:	cf 91       	pop	r28
    5a6c:	1f 91       	pop	r17
    5a6e:	0f 91       	pop	r16
    5a70:	ff 90       	pop	r15
    5a72:	ef 90       	pop	r14
    5a74:	0c 94 a9 77 	jmp	0xef52	; 0xef52 <ELClientWebServer::setArgString(char const*, char const*)>

00005a78 <DHTSensor_Web::DHTSensor_Web(__FlashStringHelper const*, Module_Web*, Settings::DHTSensorSettings*)>:
_ZN13DHTSensor_WebC1EPK19__FlashStringHelperP10Module_WebPN8Settings17DHTSensorSettingsE():
b:\gbox420\gbox420\gbox420_mega_main\build\sketch\src\components_web/DHTSensor_Web.cpp:3
#include "DHTSensor_Web.h"

DHTSensor_Web::DHTSensor_Web(const __FlashStringHelper *Name, Module_Web *Parent, Settings::DHTSensorSettings *DefaultSettings) : Common(Name), Common_Web(Name), DHTSensor(Name, Parent, DefaultSettings)
    5a78:	cf 92       	push	r12
    5a7a:	df 92       	push	r13
    5a7c:	ef 92       	push	r14
    5a7e:	ff 92       	push	r15
    5a80:	0f 93       	push	r16
    5a82:	1f 93       	push	r17
    5a84:	cf 93       	push	r28
    5a86:	df 93       	push	r29
    5a88:	ec 01       	movw	r28, r24
    5a8a:	6b 01       	movw	r12, r22
    5a8c:	7a 01       	movw	r14, r20
    5a8e:	89 01       	movw	r16, r18
DHTSensor_Web():
    5a90:	42 96       	adiw	r24, 0x12	; 18
    5a92:	0e 94 f7 18 	call	0x31ee	; 0x31ee <Common::Common(__FlashStringHelper const*)>
Common_Web():
b:\gbox420\gbox420\gbox420_mega_main\build\sketch\src\components_web/420common_web.h:24
    5a96:	88 e6       	ldi	r24, 0x68	; 104
    5a98:	95 e0       	ldi	r25, 0x05	; 5
    5a9a:	99 83       	std	Y+1, r25	; 0x01
    5a9c:	88 83       	st	Y, r24
    5a9e:	8c e7       	ldi	r24, 0x7C	; 124
    5aa0:	95 e0       	ldi	r25, 0x05	; 5
    5aa2:	9b 8b       	std	Y+19, r25	; 0x13
    5aa4:	8a 8b       	std	Y+18, r24	; 0x12
DHTSensor_Web():
b:\gbox420\gbox420\gbox420_mega_main\build\sketch\src\components_web/DHTSensor_Web.cpp:3
    5aa6:	ce 01       	movw	r24, r28
    5aa8:	02 96       	adiw	r24, 0x02	; 2
    5aaa:	30 e0       	ldi	r19, 0x00	; 0
    5aac:	20 e0       	ldi	r18, 0x00	; 0
    5aae:	e1 14       	cp	r14, r1
    5ab0:	f1 04       	cpc	r15, r1
    5ab2:	41 f0       	breq	.+16     	; 0x5ac4 <DHTSensor_Web::DHTSensor_Web(__FlashStringHelper const*, Module_Web*, Settings::DHTSensorSettings*)+0x4c>
    5ab4:	d7 01       	movw	r26, r14
    5ab6:	ed 91       	ld	r30, X+
    5ab8:	fc 91       	ld	r31, X
    5aba:	70 97       	sbiw	r30, 0x10	; 16
    5abc:	20 81       	ld	r18, Z
    5abe:	31 81       	ldd	r19, Z+1	; 0x01
    5ac0:	2e 0d       	add	r18, r14
    5ac2:	3f 1d       	adc	r19, r15
    5ac4:	a6 01       	movw	r20, r12
    5ac6:	6c e8       	ldi	r22, 0x8C	; 140
    5ac8:	75 e0       	ldi	r23, 0x05	; 5
    5aca:	0e 94 9e 1e 	call	0x3d3c	; 0x3d3c <DHTSensor::DHTSensor(__FlashStringHelper const*, Module*, Settings::DHTSensorSettings*)>
    5ace:	8a e9       	ldi	r24, 0x9A	; 154
    5ad0:	95 e0       	ldi	r25, 0x05	; 5
    5ad2:	99 83       	std	Y+1, r25	; 0x01
    5ad4:	88 83       	st	Y, r24
    5ad6:	88 eb       	ldi	r24, 0xB8	; 184
    5ad8:	95 e0       	ldi	r25, 0x05	; 5
    5ada:	9b 8b       	std	Y+19, r25	; 0x13
    5adc:	8a 8b       	std	Y+18, r24	; 0x12
    5ade:	86 ea       	ldi	r24, 0xA6	; 166
    5ae0:	95 e0       	ldi	r25, 0x05	; 5
    5ae2:	9b 83       	std	Y+3, r25	; 0x03
    5ae4:	8a 83       	std	Y+2, r24	; 0x02
b:\gbox420\gbox420\gbox420_mega_main\build\sketch\src\components_web/DHTSensor_Web.cpp:5
{
  this->Parent = Parent;
    5ae6:	f9 8a       	std	Y+17, r15	; 0x11
    5ae8:	e8 8a       	std	Y+16, r14	; 0x10
b:\gbox420\gbox420\gbox420_mega_main\build\sketch\src\components_web/DHTSensor_Web.cpp:6
  Parent->addToWebsiteQueue_Refresh(this);
    5aea:	be 01       	movw	r22, r28
    5aec:	c7 01       	movw	r24, r14
_ZN13DHTSensor_WebC1EPK19__FlashStringHelperP10Module_WebPN8Settings17DHTSensorSettingsE():
b:\gbox420\gbox420\gbox420_mega_main\build\sketch\src\components_web/DHTSensor_Web.cpp:7
}
    5aee:	df 91       	pop	r29
    5af0:	cf 91       	pop	r28
    5af2:	1f 91       	pop	r17
    5af4:	0f 91       	pop	r16
    5af6:	ff 90       	pop	r15
    5af8:	ef 90       	pop	r14
    5afa:	df 90       	pop	r13
    5afc:	cf 90       	pop	r12
DHTSensor_Web():
b:\gbox420\gbox420\gbox420_mega_main\build\sketch\src\components_web/DHTSensor_Web.cpp:6
#include "DHTSensor_Web.h"

DHTSensor_Web::DHTSensor_Web(const __FlashStringHelper *Name, Module_Web *Parent, Settings::DHTSensorSettings *DefaultSettings) : Common(Name), Common_Web(Name), DHTSensor(Name, Parent, DefaultSettings)
{
  this->Parent = Parent;
  Parent->addToWebsiteQueue_Refresh(this);
    5afe:	0c 94 9d 37 	jmp	0x6f3a	; 0x6f3a <Module_Web::addToWebsiteQueue_Refresh(Common_Web*)>

00005b02 <Fan_Web::websiteEvent_Refresh(char*)>:
_ZN7Fan_Web20websiteEvent_RefreshEPc():
b:\Gbox420\Gbox420\Gbox420_Mega_Main\build\sketch\src\Components_Web/Fan_Web.cpp:7

Fan_Web::Fan_Web(const __FlashStringHelper *Name, Module_Web *Parent, Settings::FanSettings *DefaultSettings) : Common(Name), Common_Web(Name), Fan(Name, Parent, DefaultSettings)
{
  this->Parent = Parent;
  Parent->addToWebsiteQueue_Refresh(this);
  Parent->addToCommandQueue(this);
    5b02:	0f 93       	push	r16
    5b04:	1f 93       	push	r17
    5b06:	cf 93       	push	r28
    5b08:	df 93       	push	r29
    5b0a:	ec 01       	movw	r28, r24
    5b0c:	61 e0       	ldi	r22, 0x01	; 1
    5b0e:	02 96       	adiw	r24, 0x02	; 2
    5b10:	0e 94 10 20 	call	0x4020	; 0x4020 <Fan::fanSpeedText(bool)>
    5b14:	8c 01       	movw	r16, r24
    5b16:	e8 81       	ld	r30, Y
    5b18:	f9 81       	ldd	r31, Y+1	; 0x01
    5b1a:	36 97       	sbiw	r30, 0x06	; 6
    5b1c:	80 81       	ld	r24, Z
    5b1e:	91 81       	ldd	r25, Z+1	; 0x01
    5b20:	41 e0       	ldi	r20, 0x01	; 1
    5b22:	6e e2       	ldi	r22, 0x2E	; 46
    5b24:	7a e0       	ldi	r23, 0x0A	; 10
    5b26:	8c 0f       	add	r24, r28
    5b28:	9d 1f       	adc	r25, r29
    5b2a:	0e 94 7e 19 	call	0x32fc	; 0x32fc <Common::getName(__FlashStringHelper const*, bool)>
    5b2e:	a8 01       	movw	r20, r16
    5b30:	bc 01       	movw	r22, r24
    5b32:	89 ee       	ldi	r24, 0xE9	; 233
    5b34:	9c e0       	ldi	r25, 0x0C	; 12
    5b36:	df 91       	pop	r29
    5b38:	cf 91       	pop	r28
    5b3a:	1f 91       	pop	r17
    5b3c:	0f 91       	pop	r16
    5b3e:	0c 94 a9 77 	jmp	0xef52	; 0xef52 <ELClientWebServer::setArgString(char const*, char const*)>

00005b42 <Fan_Web::commandEvent(char*, char*)>:
_ZN7Fan_Web12commandEventEPcS0_():
    5b42:	1f 93       	push	r17
    5b44:	cf 93       	push	r28
    5b46:	df 93       	push	r29
    5b48:	ec 01       	movw	r28, r24
    5b4a:	e8 81       	ld	r30, Y
    5b4c:	f9 81       	ldd	r31, Y+1	; 0x01
    5b4e:	36 97       	sbiw	r30, 0x06	; 6
    5b50:	80 81       	ld	r24, Z
    5b52:	91 81       	ldd	r25, Z+1	; 0x01
    5b54:	8c 0f       	add	r24, r28
    5b56:	9d 1f       	adc	r25, r29
    5b58:	0e 94 25 19 	call	0x324a	; 0x324a <Common::isThisMine(char const*)>
    5b5c:	18 2f       	mov	r17, r24
    5b5e:	88 23       	and	r24, r24
    5b60:	61 f0       	breq	.+24     	; 0x5b7a <Fan_Web::commandEvent(char*, char*)+0x38>
    5b62:	6c e2       	ldi	r22, 0x2C	; 44
    5b64:	7a e0       	ldi	r23, 0x0A	; 10
    5b66:	81 eb       	ldi	r24, 0xB1	; 177
    5b68:	9d e0       	ldi	r25, 0x0D	; 13
    5b6a:	0e 94 e5 94 	call	0x129ca	; 0x129ca <strcmp_P>
    5b6e:	89 2b       	or	r24, r25
    5b70:	49 f4       	brne	.+18     	; 0x5b84 <Fan_Web::commandEvent(char*, char*)+0x42>
    5b72:	ce 01       	movw	r24, r28
    5b74:	02 96       	adiw	r24, 0x02	; 2
    5b76:	0e 94 38 20 	call	0x4070	; 0x4070 <Fan::TurnOff()>
    5b7a:	81 2f       	mov	r24, r17
    5b7c:	df 91       	pop	r29
    5b7e:	cf 91       	pop	r28
    5b80:	1f 91       	pop	r17
    5b82:	08 95       	ret
    5b84:	6a e2       	ldi	r22, 0x2A	; 42
    5b86:	7a e0       	ldi	r23, 0x0A	; 10
    5b88:	81 eb       	ldi	r24, 0xB1	; 177
    5b8a:	9d e0       	ldi	r25, 0x0D	; 13
    5b8c:	0e 94 e5 94 	call	0x129ca	; 0x129ca <strcmp_P>
    5b90:	89 2b       	or	r24, r25
    5b92:	29 f4       	brne	.+10     	; 0x5b9e <Fan_Web::commandEvent(char*, char*)+0x5c>
    5b94:	ce 01       	movw	r24, r28
    5b96:	02 96       	adiw	r24, 0x02	; 2
    5b98:	0e 94 73 20 	call	0x40e6	; 0x40e6 <Fan::SetLowSpeed()>
    5b9c:	ee cf       	rjmp	.-36     	; 0x5b7a <Fan_Web::commandEvent(char*, char*)+0x38>
    5b9e:	68 e2       	ldi	r22, 0x28	; 40
    5ba0:	7a e0       	ldi	r23, 0x0A	; 10
    5ba2:	81 eb       	ldi	r24, 0xB1	; 177
    5ba4:	9d e0       	ldi	r25, 0x0D	; 13
    5ba6:	0e 94 e5 94 	call	0x129ca	; 0x129ca <strcmp_P>
    5baa:	89 2b       	or	r24, r25
    5bac:	31 f7       	brne	.-52     	; 0x5b7a <Fan_Web::commandEvent(char*, char*)+0x38>
    5bae:	ce 01       	movw	r24, r28
    5bb0:	02 96       	adiw	r24, 0x02	; 2
    5bb2:	0e 94 b0 20 	call	0x4160	; 0x4160 <Fan::SetHighSpeed()>
    5bb6:	e1 cf       	rjmp	.-62     	; 0x5b7a <Fan_Web::commandEvent(char*, char*)+0x38>

00005bb8 <virtual thunk to Fan_Web::commandEvent(char*, char*)>:
_ZTv0_n14_N7Fan_Web12commandEventEPcS0_():
    5bb8:	dc 01       	movw	r26, r24
    5bba:	ed 91       	ld	r30, X+
    5bbc:	fc 91       	ld	r31, X
    5bbe:	3e 97       	sbiw	r30, 0x0e	; 14
    5bc0:	20 81       	ld	r18, Z
    5bc2:	31 81       	ldd	r19, Z+1	; 0x01
    5bc4:	82 0f       	add	r24, r18
    5bc6:	93 1f       	adc	r25, r19
    5bc8:	0c 94 a1 2d 	jmp	0x5b42	; 0x5b42 <Fan_Web::commandEvent(char*, char*)>

00005bcc <Fan_Web::Fan_Web(__FlashStringHelper const*, Module_Web*, Settings::FanSettings*)>:
_ZN7Fan_WebC1EPK19__FlashStringHelperP10Module_WebPN8Settings11FanSettingsE():
b:\Gbox420\Gbox420\Gbox420_Mega_Main\build\sketch\src\Components_Web/Fan_Web.cpp:3
#include "Fan_Web.h"

Fan_Web::Fan_Web(const __FlashStringHelper *Name, Module_Web *Parent, Settings::FanSettings *DefaultSettings) : Common(Name), Common_Web(Name), Fan(Name, Parent, DefaultSettings)
    5bcc:	cf 92       	push	r12
    5bce:	df 92       	push	r13
    5bd0:	ef 92       	push	r14
    5bd2:	ff 92       	push	r15
    5bd4:	0f 93       	push	r16
    5bd6:	1f 93       	push	r17
    5bd8:	cf 93       	push	r28
    5bda:	df 93       	push	r29
    5bdc:	ec 01       	movw	r28, r24
    5bde:	6b 01       	movw	r12, r22
    5be0:	7a 01       	movw	r14, r20
    5be2:	89 01       	movw	r16, r18
Fan_Web():
    5be4:	40 96       	adiw	r24, 0x10	; 16
    5be6:	0e 94 f7 18 	call	0x31ee	; 0x31ee <Common::Common(__FlashStringHelper const*)>
Common_Web():
b:\Gbox420\Gbox420\Gbox420_Mega_Main\build\sketch\src\Components_Web/420Common_Web.h:24
    5bea:	8a ee       	ldi	r24, 0xEA	; 234
    5bec:	95 e0       	ldi	r25, 0x05	; 5
    5bee:	99 83       	std	Y+1, r25	; 0x01
    5bf0:	88 83       	st	Y, r24
    5bf2:	8e ef       	ldi	r24, 0xFE	; 254
    5bf4:	95 e0       	ldi	r25, 0x05	; 5
    5bf6:	99 8b       	std	Y+17, r25	; 0x11
    5bf8:	88 8b       	std	Y+16, r24	; 0x10
Fan_Web():
b:\Gbox420\Gbox420\Gbox420_Mega_Main\build\sketch\src\Components_Web/Fan_Web.cpp:3
    5bfa:	ce 01       	movw	r24, r28
    5bfc:	02 96       	adiw	r24, 0x02	; 2
    5bfe:	30 e0       	ldi	r19, 0x00	; 0
    5c00:	20 e0       	ldi	r18, 0x00	; 0
    5c02:	e1 14       	cp	r14, r1
    5c04:	f1 04       	cpc	r15, r1
    5c06:	41 f0       	breq	.+16     	; 0x5c18 <Fan_Web::Fan_Web(__FlashStringHelper const*, Module_Web*, Settings::FanSettings*)+0x4c>
    5c08:	d7 01       	movw	r26, r14
    5c0a:	ed 91       	ld	r30, X+
    5c0c:	fc 91       	ld	r31, X
    5c0e:	70 97       	sbiw	r30, 0x10	; 16
    5c10:	20 81       	ld	r18, Z
    5c12:	31 81       	ldd	r19, Z+1	; 0x01
    5c14:	2e 0d       	add	r18, r14
    5c16:	3f 1d       	adc	r19, r15
    5c18:	a6 01       	movw	r20, r12
    5c1a:	6e e0       	ldi	r22, 0x0E	; 14
    5c1c:	76 e0       	ldi	r23, 0x06	; 6
    5c1e:	0e 94 95 1f 	call	0x3f2a	; 0x3f2a <Fan::Fan(__FlashStringHelper const*, Module*, Settings::FanSettings*)>
    5c22:	8c e1       	ldi	r24, 0x1C	; 28
    5c24:	96 e0       	ldi	r25, 0x06	; 6
    5c26:	99 83       	std	Y+1, r25	; 0x01
    5c28:	88 83       	st	Y, r24
    5c2a:	8a e3       	ldi	r24, 0x3A	; 58
    5c2c:	96 e0       	ldi	r25, 0x06	; 6
    5c2e:	99 8b       	std	Y+17, r25	; 0x11
    5c30:	88 8b       	std	Y+16, r24	; 0x10
    5c32:	88 e2       	ldi	r24, 0x28	; 40
    5c34:	96 e0       	ldi	r25, 0x06	; 6
    5c36:	9b 83       	std	Y+3, r25	; 0x03
    5c38:	8a 83       	std	Y+2, r24	; 0x02
b:\Gbox420\Gbox420\Gbox420_Mega_Main\build\sketch\src\Components_Web/Fan_Web.cpp:5
{
  this->Parent = Parent;
    5c3a:	ff 86       	std	Y+15, r15	; 0x0f
    5c3c:	ee 86       	std	Y+14, r14	; 0x0e
b:\Gbox420\Gbox420\Gbox420_Mega_Main\build\sketch\src\Components_Web/Fan_Web.cpp:6
  Parent->addToWebsiteQueue_Refresh(this);
    5c3e:	be 01       	movw	r22, r28
    5c40:	c7 01       	movw	r24, r14
    5c42:	0e 94 9d 37 	call	0x6f3a	; 0x6f3a <Module_Web::addToWebsiteQueue_Refresh(Common_Web*)>
b:\Gbox420\Gbox420\Gbox420_Mega_Main\build\sketch\src\Components_Web/Fan_Web.cpp:7
  Parent->addToCommandQueue(this);
    5c46:	be 01       	movw	r22, r28
    5c48:	c7 01       	movw	r24, r14
_ZN7Fan_WebC1EPK19__FlashStringHelperP10Module_WebPN8Settings11FanSettingsE():
b:\Gbox420\Gbox420\Gbox420_Mega_Main\build\sketch\src\Components_Web/Fan_Web.cpp:8
}
    5c4a:	df 91       	pop	r29
    5c4c:	cf 91       	pop	r28
    5c4e:	1f 91       	pop	r17
    5c50:	0f 91       	pop	r16
    5c52:	ff 90       	pop	r15
    5c54:	ef 90       	pop	r14
    5c56:	df 90       	pop	r13
    5c58:	cf 90       	pop	r12
Fan_Web():
b:\Gbox420\Gbox420\Gbox420_Mega_Main\build\sketch\src\Components_Web/Fan_Web.cpp:7

Fan_Web::Fan_Web(const __FlashStringHelper *Name, Module_Web *Parent, Settings::FanSettings *DefaultSettings) : Common(Name), Common_Web(Name), Fan(Name, Parent, DefaultSettings)
{
  this->Parent = Parent;
  Parent->addToWebsiteQueue_Refresh(this);
  Parent->addToCommandQueue(this);
    5c5a:	0c 94 b7 37 	jmp	0x6f6e	; 0x6f6e <Module_Web::addToCommandQueue(Common_Web*)>

00005c5e <LightSensor_Web::websiteEvent_Refresh(char*)>:
_ZN15LightSensor_Web20websiteEvent_RefreshEPc():

LightSensor_Web::LightSensor_Web(const __FlashStringHelper *Name, Module_Web *Parent, Settings::LightSensorSettings *DefaultSettings, Lights *LightSource) : Common(Name), Common_Web(Name), LightSensor(Name, Parent, DefaultSettings, LightSource)
{ ///< constructor
  this->Parent = Parent;
  Parent->addToWebsiteQueue_Refresh(this);
  Parent->addToCommandQueue(this);
    5c5e:	ef 92       	push	r14
    5c60:	ff 92       	push	r15
    5c62:	0f 93       	push	r16
    5c64:	1f 93       	push	r17
    5c66:	cf 93       	push	r28
    5c68:	df 93       	push	r29
    5c6a:	ec 01       	movw	r28, r24
    5c6c:	8c 01       	movw	r16, r24
    5c6e:	0e 5f       	subi	r16, 0xFE	; 254
    5c70:	1f 4f       	sbci	r17, 0xFF	; 255
    5c72:	61 e0       	ldi	r22, 0x01	; 1
    5c74:	c8 01       	movw	r24, r16
    5c76:	0e 94 da 22 	call	0x45b4	; 0x45b4 <LightSensor::getDarkText(bool)>
    5c7a:	7c 01       	movw	r14, r24
    5c7c:	e8 81       	ld	r30, Y
    5c7e:	f9 81       	ldd	r31, Y+1	; 0x01
    5c80:	36 97       	sbiw	r30, 0x06	; 6
    5c82:	80 81       	ld	r24, Z
    5c84:	91 81       	ldd	r25, Z+1	; 0x01
    5c86:	41 e0       	ldi	r20, 0x01	; 1
    5c88:	64 e3       	ldi	r22, 0x34	; 52
    5c8a:	7a e0       	ldi	r23, 0x0A	; 10
    5c8c:	8c 0f       	add	r24, r28
    5c8e:	9d 1f       	adc	r25, r29
    5c90:	0e 94 7e 19 	call	0x32fc	; 0x32fc <Common::getName(__FlashStringHelper const*, bool)>
    5c94:	a7 01       	movw	r20, r14
    5c96:	bc 01       	movw	r22, r24
    5c98:	89 ee       	ldi	r24, 0xE9	; 233
    5c9a:	9c e0       	ldi	r25, 0x0C	; 12
    5c9c:	0e 94 a9 77 	call	0xef52	; 0xef52 <ELClientWebServer::setArgString(char const*, char const*)>
    5ca0:	61 e0       	ldi	r22, 0x01	; 1
    5ca2:	c8 01       	movw	r24, r16
    5ca4:	0e 94 b8 22 	call	0x4570	; 0x4570 <LightSensor::getReadingText(bool)>
    5ca8:	8c 01       	movw	r16, r24
    5caa:	e8 81       	ld	r30, Y
    5cac:	f9 81       	ldd	r31, Y+1	; 0x01
    5cae:	36 97       	sbiw	r30, 0x06	; 6
    5cb0:	80 81       	ld	r24, Z
    5cb2:	91 81       	ldd	r25, Z+1	; 0x01
    5cb4:	41 e0       	ldi	r20, 0x01	; 1
    5cb6:	62 e3       	ldi	r22, 0x32	; 50
    5cb8:	7a e0       	ldi	r23, 0x0A	; 10
    5cba:	8c 0f       	add	r24, r28
    5cbc:	9d 1f       	adc	r25, r29
    5cbe:	0e 94 7e 19 	call	0x32fc	; 0x32fc <Common::getName(__FlashStringHelper const*, bool)>
    5cc2:	a8 01       	movw	r20, r16
    5cc4:	bc 01       	movw	r22, r24
    5cc6:	89 ee       	ldi	r24, 0xE9	; 233
    5cc8:	9c e0       	ldi	r25, 0x0C	; 12
    5cca:	df 91       	pop	r29
    5ccc:	cf 91       	pop	r28
    5cce:	1f 91       	pop	r17
    5cd0:	0f 91       	pop	r16
    5cd2:	ff 90       	pop	r15
    5cd4:	ef 90       	pop	r14
    5cd6:	0c 94 a9 77 	jmp	0xef52	; 0xef52 <ELClientWebServer::setArgString(char const*, char const*)>

00005cda <LightSensor_Web::commandEvent(char*, char*)>:
_ZN15LightSensor_Web12commandEventEPcS0_():
    5cda:	1f 93       	push	r17
    5cdc:	cf 93       	push	r28
    5cde:	df 93       	push	r29
    5ce0:	ec 01       	movw	r28, r24
    5ce2:	e8 81       	ld	r30, Y
    5ce4:	f9 81       	ldd	r31, Y+1	; 0x01
    5ce6:	36 97       	sbiw	r30, 0x06	; 6
    5ce8:	80 81       	ld	r24, Z
    5cea:	91 81       	ldd	r25, Z+1	; 0x01
    5cec:	8c 0f       	add	r24, r28
    5cee:	9d 1f       	adc	r25, r29
    5cf0:	0e 94 25 19 	call	0x324a	; 0x324a <Common::isThisMine(char const*)>
    5cf4:	18 2f       	mov	r17, r24
    5cf6:	88 23       	and	r24, r24
    5cf8:	61 f0       	breq	.+24     	; 0x5d12 <LightSensor_Web::commandEvent(char*, char*)+0x38>
    5cfa:	60 e3       	ldi	r22, 0x30	; 48
    5cfc:	7a e0       	ldi	r23, 0x0A	; 10
    5cfe:	81 eb       	ldi	r24, 0xB1	; 177
    5d00:	9d e0       	ldi	r25, 0x0D	; 13
    5d02:	0e 94 e5 94 	call	0x129ca	; 0x129ca <strcmp_P>
    5d06:	89 2b       	or	r24, r25
    5d08:	21 f4       	brne	.+8      	; 0x5d12 <LightSensor_Web::commandEvent(char*, char*)+0x38>
    5d0a:	ce 01       	movw	r24, r28
    5d0c:	02 96       	adiw	r24, 0x02	; 2
    5d0e:	0e 94 94 21 	call	0x4328	; 0x4328 <LightSensor::triggerCalibration()>
    5d12:	81 2f       	mov	r24, r17
    5d14:	df 91       	pop	r29
    5d16:	cf 91       	pop	r28
    5d18:	1f 91       	pop	r17
    5d1a:	08 95       	ret

00005d1c <virtual thunk to LightSensor_Web::commandEvent(char*, char*)>:
_ZTv0_n14_N15LightSensor_Web12commandEventEPcS0_():
    5d1c:	dc 01       	movw	r26, r24
    5d1e:	ed 91       	ld	r30, X+
    5d20:	fc 91       	ld	r31, X
    5d22:	3e 97       	sbiw	r30, 0x0e	; 14
    5d24:	20 81       	ld	r18, Z
    5d26:	31 81       	ldd	r19, Z+1	; 0x01
    5d28:	82 0f       	add	r24, r18
    5d2a:	93 1f       	adc	r25, r19
    5d2c:	0c 94 6d 2e 	jmp	0x5cda	; 0x5cda <LightSensor_Web::commandEvent(char*, char*)>

00005d30 <LightSensor_Web::LightSensor_Web(__FlashStringHelper const*, Module_Web*, Settings::LightSensorSettings*, Lights*)>:
_ZN15LightSensor_WebC1EPK19__FlashStringHelperP10Module_WebPN8Settings19LightSensorSettingsEP6Lights():
b:\Gbox420\Gbox420\Gbox420_Mega_Main\build\sketch\src\Components_Web/LightSensor_Web.cpp:3
#include "LightSensor_Web.h"

LightSensor_Web::LightSensor_Web(const __FlashStringHelper *Name, Module_Web *Parent, Settings::LightSensorSettings *DefaultSettings, Lights *LightSource) : Common(Name), Common_Web(Name), LightSensor(Name, Parent, DefaultSettings, LightSource)
    5d30:	8f 92       	push	r8
    5d32:	9f 92       	push	r9
    5d34:	af 92       	push	r10
    5d36:	bf 92       	push	r11
    5d38:	cf 92       	push	r12
    5d3a:	df 92       	push	r13
    5d3c:	ef 92       	push	r14
    5d3e:	ff 92       	push	r15
    5d40:	0f 93       	push	r16
    5d42:	1f 93       	push	r17
    5d44:	cf 93       	push	r28
    5d46:	df 93       	push	r29
    5d48:	ec 01       	movw	r28, r24
    5d4a:	4b 01       	movw	r8, r22
    5d4c:	6a 01       	movw	r12, r20
    5d4e:	59 01       	movw	r10, r18
LightSensor_Web():
    5d50:	c0 96       	adiw	r24, 0x30	; 48
    5d52:	0e 94 f7 18 	call	0x31ee	; 0x31ee <Common::Common(__FlashStringHelper const*)>
Common_Web():
b:\Gbox420\Gbox420\Gbox420_Mega_Main\build\sketch\src\Components_Web/420Common_Web.h:24
    5d56:	8c e6       	ldi	r24, 0x6C	; 108
    5d58:	96 e0       	ldi	r25, 0x06	; 6
    5d5a:	99 83       	std	Y+1, r25	; 0x01
    5d5c:	88 83       	st	Y, r24
    5d5e:	80 e8       	ldi	r24, 0x80	; 128
    5d60:	96 e0       	ldi	r25, 0x06	; 6
    5d62:	99 ab       	std	Y+49, r25	; 0x31
    5d64:	88 ab       	std	Y+48, r24	; 0x30
LightSensor_Web():
b:\Gbox420\Gbox420\Gbox420_Mega_Main\build\sketch\src\Components_Web/LightSensor_Web.cpp:3
    5d66:	ce 01       	movw	r24, r28
    5d68:	02 96       	adiw	r24, 0x02	; 2
    5d6a:	30 e0       	ldi	r19, 0x00	; 0
    5d6c:	20 e0       	ldi	r18, 0x00	; 0
    5d6e:	c1 14       	cp	r12, r1
    5d70:	d1 04       	cpc	r13, r1
    5d72:	41 f0       	breq	.+16     	; 0x5d84 <LightSensor_Web::LightSensor_Web(__FlashStringHelper const*, Module_Web*, Settings::LightSensorSettings*, Lights*)+0x54>
    5d74:	d6 01       	movw	r26, r12
    5d76:	ed 91       	ld	r30, X+
    5d78:	fc 91       	ld	r31, X
    5d7a:	70 97       	sbiw	r30, 0x10	; 16
    5d7c:	20 81       	ld	r18, Z
    5d7e:	31 81       	ldd	r19, Z+1	; 0x01
    5d80:	2c 0d       	add	r18, r12
    5d82:	3d 1d       	adc	r19, r13
    5d84:	78 01       	movw	r14, r16
    5d86:	85 01       	movw	r16, r10
    5d88:	a4 01       	movw	r20, r8
    5d8a:	60 e9       	ldi	r22, 0x90	; 144
    5d8c:	76 e0       	ldi	r23, 0x06	; 6
    5d8e:	0e 94 39 21 	call	0x4272	; 0x4272 <LightSensor::LightSensor(__FlashStringHelper const*, Module*, Settings::LightSensorSettings*, Lights*)>
    5d92:	8e e9       	ldi	r24, 0x9E	; 158
    5d94:	96 e0       	ldi	r25, 0x06	; 6
    5d96:	99 83       	std	Y+1, r25	; 0x01
    5d98:	88 83       	st	Y, r24
    5d9a:	8c eb       	ldi	r24, 0xBC	; 188
    5d9c:	96 e0       	ldi	r25, 0x06	; 6
    5d9e:	99 ab       	std	Y+49, r25	; 0x31
    5da0:	88 ab       	std	Y+48, r24	; 0x30
    5da2:	8a ea       	ldi	r24, 0xAA	; 170
    5da4:	96 e0       	ldi	r25, 0x06	; 6
    5da6:	9b 83       	std	Y+3, r25	; 0x03
    5da8:	8a 83       	std	Y+2, r24	; 0x02
b:\Gbox420\Gbox420\Gbox420_Mega_Main\build\sketch\src\Components_Web/LightSensor_Web.cpp:5
{ ///< constructor
  this->Parent = Parent;
    5daa:	df a6       	std	Y+47, r13	; 0x2f
    5dac:	ce a6       	std	Y+46, r12	; 0x2e
b:\Gbox420\Gbox420\Gbox420_Mega_Main\build\sketch\src\Components_Web/LightSensor_Web.cpp:6
  Parent->addToWebsiteQueue_Refresh(this);
    5dae:	be 01       	movw	r22, r28
    5db0:	c6 01       	movw	r24, r12
    5db2:	0e 94 9d 37 	call	0x6f3a	; 0x6f3a <Module_Web::addToWebsiteQueue_Refresh(Common_Web*)>
b:\Gbox420\Gbox420\Gbox420_Mega_Main\build\sketch\src\Components_Web/LightSensor_Web.cpp:7
  Parent->addToCommandQueue(this);
    5db6:	be 01       	movw	r22, r28
    5db8:	c6 01       	movw	r24, r12
_ZN15LightSensor_WebC1EPK19__FlashStringHelperP10Module_WebPN8Settings19LightSensorSettingsEP6Lights():
b:\Gbox420\Gbox420\Gbox420_Mega_Main\build\sketch\src\Components_Web/LightSensor_Web.cpp:8
}
    5dba:	df 91       	pop	r29
    5dbc:	cf 91       	pop	r28
    5dbe:	1f 91       	pop	r17
    5dc0:	0f 91       	pop	r16
    5dc2:	ff 90       	pop	r15
    5dc4:	ef 90       	pop	r14
    5dc6:	df 90       	pop	r13
    5dc8:	cf 90       	pop	r12
    5dca:	bf 90       	pop	r11
    5dcc:	af 90       	pop	r10
    5dce:	9f 90       	pop	r9
    5dd0:	8f 90       	pop	r8
LightSensor_Web():
b:\Gbox420\Gbox420\Gbox420_Mega_Main\build\sketch\src\Components_Web/LightSensor_Web.cpp:7

LightSensor_Web::LightSensor_Web(const __FlashStringHelper *Name, Module_Web *Parent, Settings::LightSensorSettings *DefaultSettings, Lights *LightSource) : Common(Name), Common_Web(Name), LightSensor(Name, Parent, DefaultSettings, LightSource)
{ ///< constructor
  this->Parent = Parent;
  Parent->addToWebsiteQueue_Refresh(this);
  Parent->addToCommandQueue(this);
    5dd2:	0c 94 b7 37 	jmp	0x6f6e	; 0x6f6e <Module_Web::addToCommandQueue(Common_Web*)>

00005dd6 <Lights_Web::websiteEvent_Load(char*)>:
_ZN10Lights_Web17websiteEvent_LoadEPc():
b:\Gbox420\Gbox420\Gbox420_Mega_Main\build\sketch\src\Components_Web/Lights_Web.cpp:8
Lights_Web::Lights_Web(const __FlashStringHelper *Name, Module_Web *Parent, Settings::LightsSettings *DefaultSettings) : Common(Name), Common_Web(Name), Lights(Name, Parent, DefaultSettings)
{
  this->Parent = Parent;
  Parent->addToWebsiteQueue_Load(this);
  Parent->addToWebsiteQueue_Refresh(this);
  Parent->addToCommandQueue(this);
    5dd6:	cf 92       	push	r12
    5dd8:	df 92       	push	r13
    5dda:	ef 92       	push	r14
    5ddc:	ff 92       	push	r15
    5dde:	cf 93       	push	r28
    5de0:	df 93       	push	r29
    5de2:	ec 01       	movw	r28, r24
    5de4:	ec 81       	ldd	r30, Y+4	; 0x04
    5de6:	fd 81       	ldd	r31, Y+5	; 0x05
    5de8:	c0 80       	ld	r12, Z
    5dea:	d1 2c       	mov	r13, r1
    5dec:	f1 2c       	mov	r15, r1
    5dee:	e1 2c       	mov	r14, r1
    5df0:	e8 81       	ld	r30, Y
    5df2:	f9 81       	ldd	r31, Y+1	; 0x01
    5df4:	36 97       	sbiw	r30, 0x06	; 6
    5df6:	80 81       	ld	r24, Z
    5df8:	91 81       	ldd	r25, Z+1	; 0x01
    5dfa:	41 e0       	ldi	r20, 0x01	; 1
    5dfc:	64 e7       	ldi	r22, 0x74	; 116
    5dfe:	7a e0       	ldi	r23, 0x0A	; 10
    5e00:	8c 0f       	add	r24, r28
    5e02:	9d 1f       	adc	r25, r29
    5e04:	0e 94 7e 19 	call	0x32fc	; 0x32fc <Common::getName(__FlashStringHelper const*, bool)>
    5e08:	a7 01       	movw	r20, r14
    5e0a:	96 01       	movw	r18, r12
    5e0c:	bc 01       	movw	r22, r24
    5e0e:	89 ee       	ldi	r24, 0xE9	; 233
    5e10:	9c e0       	ldi	r25, 0x0C	; 12
    5e12:	0e 94 17 79 	call	0xf22e	; 0xf22e <ELClientWebServer::setArgInt(char const*, long)>
    5e16:	ee 81       	ldd	r30, Y+6	; 0x06
    5e18:	ff 81       	ldd	r31, Y+7	; 0x07
    5e1a:	c0 80       	ld	r12, Z
    5e1c:	d1 2c       	mov	r13, r1
    5e1e:	f1 2c       	mov	r15, r1
    5e20:	e1 2c       	mov	r14, r1
    5e22:	e8 81       	ld	r30, Y
    5e24:	f9 81       	ldd	r31, Y+1	; 0x01
    5e26:	36 97       	sbiw	r30, 0x06	; 6
    5e28:	80 81       	ld	r24, Z
    5e2a:	91 81       	ldd	r25, Z+1	; 0x01
    5e2c:	41 e0       	ldi	r20, 0x01	; 1
    5e2e:	60 e7       	ldi	r22, 0x70	; 112
    5e30:	7a e0       	ldi	r23, 0x0A	; 10
    5e32:	8c 0f       	add	r24, r28
    5e34:	9d 1f       	adc	r25, r29
    5e36:	0e 94 7e 19 	call	0x32fc	; 0x32fc <Common::getName(__FlashStringHelper const*, bool)>
    5e3a:	a7 01       	movw	r20, r14
    5e3c:	96 01       	movw	r18, r12
    5e3e:	bc 01       	movw	r22, r24
    5e40:	89 ee       	ldi	r24, 0xE9	; 233
    5e42:	9c e0       	ldi	r25, 0x0C	; 12
    5e44:	0e 94 17 79 	call	0xf22e	; 0xf22e <ELClientWebServer::setArgInt(char const*, long)>
    5e48:	e8 85       	ldd	r30, Y+8	; 0x08
    5e4a:	f9 85       	ldd	r31, Y+9	; 0x09
    5e4c:	c0 80       	ld	r12, Z
    5e4e:	d1 2c       	mov	r13, r1
    5e50:	f1 2c       	mov	r15, r1
    5e52:	e1 2c       	mov	r14, r1
    5e54:	e8 81       	ld	r30, Y
    5e56:	f9 81       	ldd	r31, Y+1	; 0x01
    5e58:	36 97       	sbiw	r30, 0x06	; 6
    5e5a:	80 81       	ld	r24, Z
    5e5c:	91 81       	ldd	r25, Z+1	; 0x01
    5e5e:	41 e0       	ldi	r20, 0x01	; 1
    5e60:	6c e6       	ldi	r22, 0x6C	; 108
    5e62:	7a e0       	ldi	r23, 0x0A	; 10
    5e64:	8c 0f       	add	r24, r28
    5e66:	9d 1f       	adc	r25, r29
    5e68:	0e 94 7e 19 	call	0x32fc	; 0x32fc <Common::getName(__FlashStringHelper const*, bool)>
    5e6c:	a7 01       	movw	r20, r14
    5e6e:	96 01       	movw	r18, r12
    5e70:	bc 01       	movw	r22, r24
    5e72:	89 ee       	ldi	r24, 0xE9	; 233
    5e74:	9c e0       	ldi	r25, 0x0C	; 12
    5e76:	0e 94 17 79 	call	0xf22e	; 0xf22e <ELClientWebServer::setArgInt(char const*, long)>
    5e7a:	ea 85       	ldd	r30, Y+10	; 0x0a
    5e7c:	fb 85       	ldd	r31, Y+11	; 0x0b
    5e7e:	c0 80       	ld	r12, Z
    5e80:	d1 2c       	mov	r13, r1
    5e82:	f1 2c       	mov	r15, r1
    5e84:	e1 2c       	mov	r14, r1
    5e86:	e8 81       	ld	r30, Y
    5e88:	f9 81       	ldd	r31, Y+1	; 0x01
    5e8a:	36 97       	sbiw	r30, 0x06	; 6
    5e8c:	80 81       	ld	r24, Z
    5e8e:	91 81       	ldd	r25, Z+1	; 0x01
    5e90:	41 e0       	ldi	r20, 0x01	; 1
    5e92:	68 e6       	ldi	r22, 0x68	; 104
    5e94:	7a e0       	ldi	r23, 0x0A	; 10
    5e96:	8c 0f       	add	r24, r28
    5e98:	9d 1f       	adc	r25, r29
    5e9a:	0e 94 7e 19 	call	0x32fc	; 0x32fc <Common::getName(__FlashStringHelper const*, bool)>
    5e9e:	a7 01       	movw	r20, r14
    5ea0:	96 01       	movw	r18, r12
    5ea2:	bc 01       	movw	r22, r24
    5ea4:	89 ee       	ldi	r24, 0xE9	; 233
    5ea6:	9c e0       	ldi	r25, 0x0C	; 12
    5ea8:	0e 94 17 79 	call	0xf22e	; 0xf22e <ELClientWebServer::setArgInt(char const*, long)>
    5eac:	ec 85       	ldd	r30, Y+12	; 0x0c
    5eae:	fd 85       	ldd	r31, Y+13	; 0x0d
    5eb0:	c0 80       	ld	r12, Z
    5eb2:	d1 2c       	mov	r13, r1
    5eb4:	f1 2c       	mov	r15, r1
    5eb6:	e1 2c       	mov	r14, r1
    5eb8:	e8 81       	ld	r30, Y
    5eba:	f9 81       	ldd	r31, Y+1	; 0x01
    5ebc:	36 97       	sbiw	r30, 0x06	; 6
    5ebe:	80 81       	ld	r24, Z
    5ec0:	91 81       	ldd	r25, Z+1	; 0x01
    5ec2:	41 e0       	ldi	r20, 0x01	; 1
    5ec4:	66 e6       	ldi	r22, 0x66	; 102
    5ec6:	7a e0       	ldi	r23, 0x0A	; 10
    5ec8:	8c 0f       	add	r24, r28
    5eca:	9d 1f       	adc	r25, r29
    5ecc:	0e 94 7e 19 	call	0x32fc	; 0x32fc <Common::getName(__FlashStringHelper const*, bool)>
    5ed0:	a7 01       	movw	r20, r14
    5ed2:	96 01       	movw	r18, r12
    5ed4:	bc 01       	movw	r22, r24
    5ed6:	89 ee       	ldi	r24, 0xE9	; 233
    5ed8:	9c e0       	ldi	r25, 0x0C	; 12
    5eda:	df 91       	pop	r29
    5edc:	cf 91       	pop	r28
    5ede:	ff 90       	pop	r15
    5ee0:	ef 90       	pop	r14
    5ee2:	df 90       	pop	r13
    5ee4:	cf 90       	pop	r12
    5ee6:	0c 94 17 79 	jmp	0xf22e	; 0xf22e <ELClientWebServer::setArgInt(char const*, long)>

00005eea <Lights_Web::websiteEvent_Refresh(char*)>:
_ZN10Lights_Web20websiteEvent_RefreshEPc():
    5eea:	ef 92       	push	r14
    5eec:	ff 92       	push	r15
    5eee:	0f 93       	push	r16
    5ef0:	1f 93       	push	r17
    5ef2:	cf 93       	push	r28
    5ef4:	df 93       	push	r29
    5ef6:	ec 01       	movw	r28, r24
    5ef8:	8c 01       	movw	r16, r24
    5efa:	0e 5f       	subi	r16, 0xFE	; 254
    5efc:	1f 4f       	sbci	r17, 0xFF	; 255
    5efe:	c8 01       	movw	r24, r16
    5f00:	0e 94 75 27 	call	0x4eea	; 0x4eea <Lights::getStateText()>
    5f04:	7c 01       	movw	r14, r24
    5f06:	e8 81       	ld	r30, Y
    5f08:	f9 81       	ldd	r31, Y+1	; 0x01
    5f0a:	36 97       	sbiw	r30, 0x06	; 6
    5f0c:	80 81       	ld	r24, Z
    5f0e:	91 81       	ldd	r25, Z+1	; 0x01
    5f10:	41 e0       	ldi	r20, 0x01	; 1
    5f12:	64 e6       	ldi	r22, 0x64	; 100
    5f14:	7a e0       	ldi	r23, 0x0A	; 10
    5f16:	8c 0f       	add	r24, r28
    5f18:	9d 1f       	adc	r25, r29
    5f1a:	0e 94 7e 19 	call	0x32fc	; 0x32fc <Common::getName(__FlashStringHelper const*, bool)>
    5f1e:	a7 01       	movw	r20, r14
    5f20:	bc 01       	movw	r22, r24
    5f22:	89 ee       	ldi	r24, 0xE9	; 233
    5f24:	9c e0       	ldi	r25, 0x0C	; 12
    5f26:	0e 94 a9 77 	call	0xef52	; 0xef52 <ELClientWebServer::setArgString(char const*, char const*)>
    5f2a:	61 e0       	ldi	r22, 0x01	; 1
    5f2c:	c8 01       	movw	r24, r16
    5f2e:	0e 94 3f 27 	call	0x4e7e	; 0x4e7e <Lights::getCurrentBrightnessText(bool)>
    5f32:	7c 01       	movw	r14, r24
    5f34:	e8 81       	ld	r30, Y
    5f36:	f9 81       	ldd	r31, Y+1	; 0x01
    5f38:	36 97       	sbiw	r30, 0x06	; 6
    5f3a:	80 81       	ld	r24, Z
    5f3c:	91 81       	ldd	r25, Z+1	; 0x01
    5f3e:	41 e0       	ldi	r20, 0x01	; 1
    5f40:	61 e6       	ldi	r22, 0x61	; 97
    5f42:	7a e0       	ldi	r23, 0x0A	; 10
    5f44:	8c 0f       	add	r24, r28
    5f46:	9d 1f       	adc	r25, r29
    5f48:	0e 94 7e 19 	call	0x32fc	; 0x32fc <Common::getName(__FlashStringHelper const*, bool)>
    5f4c:	a7 01       	movw	r20, r14
    5f4e:	bc 01       	movw	r22, r24
    5f50:	89 ee       	ldi	r24, 0xE9	; 233
    5f52:	9c e0       	ldi	r25, 0x0C	; 12
    5f54:	0e 94 a9 77 	call	0xef52	; 0xef52 <ELClientWebServer::setArgString(char const*, char const*)>
    5f58:	61 e0       	ldi	r22, 0x01	; 1
    5f5a:	c8 01       	movw	r24, r16
    5f5c:	0e 94 0e 27 	call	0x4e1c	; 0x4e1c <Lights::getTimerOnOffText(bool)>
    5f60:	8c 01       	movw	r16, r24
    5f62:	e8 81       	ld	r30, Y
    5f64:	f9 81       	ldd	r31, Y+1	; 0x01
    5f66:	36 97       	sbiw	r30, 0x06	; 6
    5f68:	80 81       	ld	r24, Z
    5f6a:	91 81       	ldd	r25, Z+1	; 0x01
    5f6c:	41 e0       	ldi	r20, 0x01	; 1
    5f6e:	6f e5       	ldi	r22, 0x5F	; 95
    5f70:	7a e0       	ldi	r23, 0x0A	; 10
    5f72:	8c 0f       	add	r24, r28
    5f74:	9d 1f       	adc	r25, r29
    5f76:	0e 94 7e 19 	call	0x32fc	; 0x32fc <Common::getName(__FlashStringHelper const*, bool)>
    5f7a:	a8 01       	movw	r20, r16
    5f7c:	bc 01       	movw	r22, r24
    5f7e:	89 ee       	ldi	r24, 0xE9	; 233
    5f80:	9c e0       	ldi	r25, 0x0C	; 12
    5f82:	df 91       	pop	r29
    5f84:	cf 91       	pop	r28
    5f86:	1f 91       	pop	r17
    5f88:	0f 91       	pop	r16
    5f8a:	ff 90       	pop	r15
    5f8c:	ef 90       	pop	r14
    5f8e:	0c 94 a9 77 	jmp	0xef52	; 0xef52 <ELClientWebServer::setArgString(char const*, char const*)>

00005f92 <Lights_Web::commandEvent(char*, char*)>:
_ZN10Lights_Web12commandEventEPcS0_():
    5f92:	ef 92       	push	r14
    5f94:	ff 92       	push	r15
    5f96:	1f 93       	push	r17
    5f98:	cf 93       	push	r28
    5f9a:	df 93       	push	r29
    5f9c:	ec 01       	movw	r28, r24
    5f9e:	7a 01       	movw	r14, r20
    5fa0:	e8 81       	ld	r30, Y
    5fa2:	f9 81       	ldd	r31, Y+1	; 0x01
    5fa4:	36 97       	sbiw	r30, 0x06	; 6
    5fa6:	80 81       	ld	r24, Z
    5fa8:	91 81       	ldd	r25, Z+1	; 0x01
    5faa:	8c 0f       	add	r24, r28
    5fac:	9d 1f       	adc	r25, r29
    5fae:	0e 94 25 19 	call	0x324a	; 0x324a <Common::isThisMine(char const*)>
    5fb2:	18 2f       	mov	r17, r24
    5fb4:	88 23       	and	r24, r24
    5fb6:	c1 f0       	breq	.+48     	; 0x5fe8 <Lights_Web::commandEvent(char*, char*)+0x56>
    5fb8:	6c e5       	ldi	r22, 0x5C	; 92
    5fba:	7a e0       	ldi	r23, 0x0A	; 10
    5fbc:	81 eb       	ldi	r24, 0xB1	; 177
    5fbe:	9d e0       	ldi	r25, 0x0D	; 13
    5fc0:	0e 94 e5 94 	call	0x129ca	; 0x129ca <strcmp_P>
    5fc4:	41 e0       	ldi	r20, 0x01	; 1
    5fc6:	61 e0       	ldi	r22, 0x01	; 1
    5fc8:	89 2b       	or	r24, r25
    5fca:	51 f0       	breq	.+20     	; 0x5fe0 <Lights_Web::commandEvent(char*, char*)+0x4e>
    5fcc:	69 e5       	ldi	r22, 0x59	; 89
    5fce:	7a e0       	ldi	r23, 0x0A	; 10
    5fd0:	81 eb       	ldi	r24, 0xB1	; 177
    5fd2:	9d e0       	ldi	r25, 0x0D	; 13
    5fd4:	0e 94 e5 94 	call	0x129ca	; 0x129ca <strcmp_P>
    5fd8:	89 2b       	or	r24, r25
    5fda:	69 f4       	brne	.+26     	; 0x5ff6 <Lights_Web::commandEvent(char*, char*)+0x64>
    5fdc:	41 e0       	ldi	r20, 0x01	; 1
    5fde:	60 e0       	ldi	r22, 0x00	; 0
    5fe0:	ce 01       	movw	r24, r28
    5fe2:	02 96       	adiw	r24, 0x02	; 2
    5fe4:	0e 94 1c 25 	call	0x4a38	; 0x4a38 <Lights::setLightOnOff(bool, bool)>
    5fe8:	81 2f       	mov	r24, r17
    5fea:	df 91       	pop	r29
    5fec:	cf 91       	pop	r28
    5fee:	1f 91       	pop	r17
    5ff0:	ff 90       	pop	r15
    5ff2:	ef 90       	pop	r14
    5ff4:	08 95       	ret
    5ff6:	67 e5       	ldi	r22, 0x57	; 87
    5ff8:	7a e0       	ldi	r23, 0x0A	; 10
    5ffa:	81 eb       	ldi	r24, 0xB1	; 177
    5ffc:	9d e0       	ldi	r25, 0x0D	; 13
    5ffe:	0e 94 e5 94 	call	0x129ca	; 0x129ca <strcmp_P>
    6002:	89 2b       	or	r24, r25
    6004:	31 f4       	brne	.+12     	; 0x6012 <Lights_Web::commandEvent(char*, char*)+0x80>
    6006:	c7 01       	movw	r24, r14
    6008:	0e 94 10 35 	call	0x6a20	; 0x6a20 <toBool(char*)>
    600c:	41 e0       	ldi	r20, 0x01	; 1
    600e:	68 2f       	mov	r22, r24
    6010:	e7 cf       	rjmp	.-50     	; 0x5fe0 <Lights_Web::commandEvent(char*, char*)+0x4e>
    6012:	63 e5       	ldi	r22, 0x53	; 83
    6014:	7a e0       	ldi	r23, 0x0A	; 10
    6016:	81 eb       	ldi	r24, 0xB1	; 177
    6018:	9d e0       	ldi	r25, 0x0D	; 13
    601a:	0e 94 e5 94 	call	0x129ca	; 0x129ca <strcmp_P>
    601e:	61 e0       	ldi	r22, 0x01	; 1
    6020:	89 2b       	or	r24, r25
    6022:	49 f0       	breq	.+18     	; 0x6036 <Lights_Web::commandEvent(char*, char*)+0xa4>
    6024:	6f e4       	ldi	r22, 0x4F	; 79
    6026:	7a e0       	ldi	r23, 0x0A	; 10
    6028:	81 eb       	ldi	r24, 0xB1	; 177
    602a:	9d e0       	ldi	r25, 0x0D	; 13
    602c:	0e 94 e5 94 	call	0x129ca	; 0x129ca <strcmp_P>
    6030:	89 2b       	or	r24, r25
    6032:	31 f4       	brne	.+12     	; 0x6040 <Lights_Web::commandEvent(char*, char*)+0xae>
    6034:	60 e0       	ldi	r22, 0x00	; 0
    6036:	ce 01       	movw	r24, r28
    6038:	02 96       	adiw	r24, 0x02	; 2
    603a:	0e 94 94 27 	call	0x4f28	; 0x4f28 <Lights::setTimerOnOff(bool)>
    603e:	d4 cf       	rjmp	.-88     	; 0x5fe8 <Lights_Web::commandEvent(char*, char*)+0x56>
    6040:	6d e4       	ldi	r22, 0x4D	; 77
    6042:	7a e0       	ldi	r23, 0x0A	; 10
    6044:	81 eb       	ldi	r24, 0xB1	; 177
    6046:	9d e0       	ldi	r25, 0x0D	; 13
    6048:	0e 94 e5 94 	call	0x129ca	; 0x129ca <strcmp_P>
    604c:	89 2b       	or	r24, r25
    604e:	29 f4       	brne	.+10     	; 0x605a <Lights_Web::commandEvent(char*, char*)+0xc8>
    6050:	c7 01       	movw	r24, r14
    6052:	0e 94 10 35 	call	0x6a20	; 0x6a20 <toBool(char*)>
    6056:	68 2f       	mov	r22, r24
    6058:	ee cf       	rjmp	.-36     	; 0x6036 <Lights_Web::commandEvent(char*, char*)+0xa4>
    605a:	6b e4       	ldi	r22, 0x4B	; 75
    605c:	7a e0       	ldi	r23, 0x0A	; 10
    605e:	81 eb       	ldi	r24, 0xB1	; 177
    6060:	9d e0       	ldi	r25, 0x0D	; 13
    6062:	0e 94 e5 94 	call	0x129ca	; 0x129ca <strcmp_P>
    6066:	89 2b       	or	r24, r25
    6068:	29 f4       	brne	.+10     	; 0x6074 <Lights_Web::commandEvent(char*, char*)+0xe2>
    606a:	ce 01       	movw	r24, r28
    606c:	02 96       	adiw	r24, 0x02	; 2
    606e:	0e 94 88 24 	call	0x4910	; 0x4910 <Lights::dimLightsOnOff()>
    6072:	ba cf       	rjmp	.-140    	; 0x5fe8 <Lights_Web::commandEvent(char*, char*)+0x56>
    6074:	69 e4       	ldi	r22, 0x49	; 73
    6076:	7a e0       	ldi	r23, 0x0A	; 10
    6078:	81 eb       	ldi	r24, 0xB1	; 177
    607a:	9d e0       	ldi	r25, 0x0D	; 13
    607c:	0e 94 e5 94 	call	0x129ca	; 0x129ca <strcmp_P>
    6080:	89 2b       	or	r24, r25
    6082:	59 f4       	brne	.+22     	; 0x609a <Lights_Web::commandEvent(char*, char*)+0x108>
    6084:	89 ee       	ldi	r24, 0xE9	; 233
    6086:	9c e0       	ldi	r25, 0x0C	; 12
    6088:	0e 94 d5 79 	call	0xf3aa	; 0xf3aa <ELClientWebServer::getArgInt()>
    608c:	21 e0       	ldi	r18, 0x01	; 1
    608e:	41 e0       	ldi	r20, 0x01	; 1
    6090:	ce 01       	movw	r24, r28
    6092:	02 96       	adiw	r24, 0x02	; 2
    6094:	0e 94 63 23 	call	0x46c6	; 0x46c6 <Lights::setBrightness(unsigned char, bool, bool)>
    6098:	a7 cf       	rjmp	.-178    	; 0x5fe8 <Lights_Web::commandEvent(char*, char*)+0x56>
    609a:	65 e4       	ldi	r22, 0x45	; 69
    609c:	7a e0       	ldi	r23, 0x0A	; 10
    609e:	81 eb       	ldi	r24, 0xB1	; 177
    60a0:	9d e0       	ldi	r25, 0x0D	; 13
    60a2:	0e 94 e5 94 	call	0x129ca	; 0x129ca <strcmp_P>
    60a6:	89 2b       	or	r24, r25
    60a8:	49 f4       	brne	.+18     	; 0x60bc <Lights_Web::commandEvent(char*, char*)+0x12a>
    60aa:	89 ee       	ldi	r24, 0xE9	; 233
    60ac:	9c e0       	ldi	r25, 0x0C	; 12
    60ae:	0e 94 d5 79 	call	0xf3aa	; 0xf3aa <ELClientWebServer::getArgInt()>
    60b2:	ce 01       	movw	r24, r28
    60b4:	02 96       	adiw	r24, 0x02	; 2
    60b6:	0e 94 d4 27 	call	0x4fa8	; 0x4fa8 <Lights::setOnHour(unsigned char)>
    60ba:	96 cf       	rjmp	.-212    	; 0x5fe8 <Lights_Web::commandEvent(char*, char*)+0x56>
    60bc:	61 e4       	ldi	r22, 0x41	; 65
    60be:	7a e0       	ldi	r23, 0x0A	; 10
    60c0:	81 eb       	ldi	r24, 0xB1	; 177
    60c2:	9d e0       	ldi	r25, 0x0D	; 13
    60c4:	0e 94 e5 94 	call	0x129ca	; 0x129ca <strcmp_P>
    60c8:	89 2b       	or	r24, r25
    60ca:	49 f4       	brne	.+18     	; 0x60de <Lights_Web::commandEvent(char*, char*)+0x14c>
    60cc:	89 ee       	ldi	r24, 0xE9	; 233
    60ce:	9c e0       	ldi	r25, 0x0C	; 12
    60d0:	0e 94 d5 79 	call	0xf3aa	; 0xf3aa <ELClientWebServer::getArgInt()>
    60d4:	ce 01       	movw	r24, r28
    60d6:	02 96       	adiw	r24, 0x02	; 2
    60d8:	0e 94 da 27 	call	0x4fb4	; 0x4fb4 <Lights::setOnMinute(unsigned char)>
    60dc:	85 cf       	rjmp	.-246    	; 0x5fe8 <Lights_Web::commandEvent(char*, char*)+0x56>
    60de:	6d e3       	ldi	r22, 0x3D	; 61
    60e0:	7a e0       	ldi	r23, 0x0A	; 10
    60e2:	81 eb       	ldi	r24, 0xB1	; 177
    60e4:	9d e0       	ldi	r25, 0x0D	; 13
    60e6:	0e 94 e5 94 	call	0x129ca	; 0x129ca <strcmp_P>
    60ea:	89 2b       	or	r24, r25
    60ec:	49 f4       	brne	.+18     	; 0x6100 <Lights_Web::commandEvent(char*, char*)+0x16e>
    60ee:	89 ee       	ldi	r24, 0xE9	; 233
    60f0:	9c e0       	ldi	r25, 0x0C	; 12
    60f2:	0e 94 d5 79 	call	0xf3aa	; 0xf3aa <ELClientWebServer::getArgInt()>
    60f6:	ce 01       	movw	r24, r28
    60f8:	02 96       	adiw	r24, 0x02	; 2
    60fa:	0e 94 08 28 	call	0x5010	; 0x5010 <Lights::setOffHour(unsigned char)>
    60fe:	74 cf       	rjmp	.-280    	; 0x5fe8 <Lights_Web::commandEvent(char*, char*)+0x56>
    6100:	69 e3       	ldi	r22, 0x39	; 57
    6102:	7a e0       	ldi	r23, 0x0A	; 10
    6104:	81 eb       	ldi	r24, 0xB1	; 177
    6106:	9d e0       	ldi	r25, 0x0D	; 13
    6108:	0e 94 e5 94 	call	0x129ca	; 0x129ca <strcmp_P>
    610c:	89 2b       	or	r24, r25
    610e:	49 f4       	brne	.+18     	; 0x6122 <Lights_Web::commandEvent(char*, char*)+0x190>
    6110:	89 ee       	ldi	r24, 0xE9	; 233
    6112:	9c e0       	ldi	r25, 0x0C	; 12
    6114:	0e 94 d5 79 	call	0xf3aa	; 0xf3aa <ELClientWebServer::getArgInt()>
    6118:	ce 01       	movw	r24, r28
    611a:	02 96       	adiw	r24, 0x02	; 2
    611c:	0e 94 0e 28 	call	0x501c	; 0x501c <Lights::setOffMinute(unsigned char)>
    6120:	63 cf       	rjmp	.-314    	; 0x5fe8 <Lights_Web::commandEvent(char*, char*)+0x56>
    6122:	66 e3       	ldi	r22, 0x36	; 54
    6124:	7a e0       	ldi	r23, 0x0A	; 10
    6126:	81 eb       	ldi	r24, 0xB1	; 177
    6128:	9d e0       	ldi	r25, 0x0D	; 13
    612a:	0e 94 e5 94 	call	0x129ca	; 0x129ca <strcmp_P>
    612e:	89 2b       	or	r24, r25
    6130:	09 f0       	breq	.+2      	; 0x6134 <Lights_Web::commandEvent(char*, char*)+0x1a2>
    6132:	5a cf       	rjmp	.-332    	; 0x5fe8 <Lights_Web::commandEvent(char*, char*)+0x56>
    6134:	89 ee       	ldi	r24, 0xE9	; 233
    6136:	9c e0       	ldi	r25, 0x0C	; 12
    6138:	0e 94 d5 79 	call	0xf3aa	; 0xf3aa <ELClientWebServer::getArgInt()>
    613c:	ce 01       	movw	r24, r28
    613e:	02 96       	adiw	r24, 0x02	; 2
    6140:	0e 94 f8 24 	call	0x49f0	; 0x49f0 <Lights::setDimDuration(int)>
    6144:	51 cf       	rjmp	.-350    	; 0x5fe8 <Lights_Web::commandEvent(char*, char*)+0x56>

00006146 <virtual thunk to Lights_Web::commandEvent(char*, char*)>:
_ZTv0_n14_N10Lights_Web12commandEventEPcS0_():
    6146:	dc 01       	movw	r26, r24
    6148:	ed 91       	ld	r30, X+
    614a:	fc 91       	ld	r31, X
    614c:	3e 97       	sbiw	r30, 0x0e	; 14
    614e:	20 81       	ld	r18, Z
    6150:	31 81       	ldd	r19, Z+1	; 0x01
    6152:	82 0f       	add	r24, r18
    6154:	93 1f       	adc	r25, r19
    6156:	0c 94 c9 2f 	jmp	0x5f92	; 0x5f92 <Lights_Web::commandEvent(char*, char*)>

0000615a <Lights_Web::Lights_Web(__FlashStringHelper const*, Module_Web*, Settings::LightsSettings*)>:
_ZN10Lights_WebC1EPK19__FlashStringHelperP10Module_WebPN8Settings14LightsSettingsE():
b:\Gbox420\Gbox420\Gbox420_Mega_Main\build\sketch\src\Components_Web/Lights_Web.cpp:3
#include "Lights_Web.h"

Lights_Web::Lights_Web(const __FlashStringHelper *Name, Module_Web *Parent, Settings::LightsSettings *DefaultSettings) : Common(Name), Common_Web(Name), Lights(Name, Parent, DefaultSettings)
    615a:	cf 92       	push	r12
    615c:	df 92       	push	r13
    615e:	ef 92       	push	r14
    6160:	ff 92       	push	r15
    6162:	0f 93       	push	r16
    6164:	1f 93       	push	r17
    6166:	cf 93       	push	r28
    6168:	df 93       	push	r29
    616a:	ec 01       	movw	r28, r24
    616c:	6b 01       	movw	r12, r22
    616e:	7a 01       	movw	r14, r20
    6170:	89 01       	movw	r16, r18
Lights_Web():
    6172:	c2 96       	adiw	r24, 0x32	; 50
    6174:	0e 94 f7 18 	call	0x31ee	; 0x31ee <Common::Common(__FlashStringHelper const*)>
Common_Web():
b:\Gbox420\Gbox420\Gbox420_Mega_Main\build\sketch\src\Components_Web/420Common_Web.h:24
    6178:	80 ef       	ldi	r24, 0xF0	; 240
    617a:	96 e0       	ldi	r25, 0x06	; 6
    617c:	99 83       	std	Y+1, r25	; 0x01
    617e:	88 83       	st	Y, r24
    6180:	84 e0       	ldi	r24, 0x04	; 4
    6182:	97 e0       	ldi	r25, 0x07	; 7
    6184:	9b ab       	std	Y+51, r25	; 0x33
    6186:	8a ab       	std	Y+50, r24	; 0x32
Lights_Web():
b:\Gbox420\Gbox420\Gbox420_Mega_Main\build\sketch\src\Components_Web/Lights_Web.cpp:3
    6188:	ce 01       	movw	r24, r28
    618a:	02 96       	adiw	r24, 0x02	; 2
    618c:	30 e0       	ldi	r19, 0x00	; 0
    618e:	20 e0       	ldi	r18, 0x00	; 0
    6190:	e1 14       	cp	r14, r1
    6192:	f1 04       	cpc	r15, r1
    6194:	41 f0       	breq	.+16     	; 0x61a6 <Lights_Web::Lights_Web(__FlashStringHelper const*, Module_Web*, Settings::LightsSettings*)+0x4c>
    6196:	d7 01       	movw	r26, r14
    6198:	ed 91       	ld	r30, X+
    619a:	fc 91       	ld	r31, X
    619c:	70 97       	sbiw	r30, 0x10	; 16
    619e:	20 81       	ld	r18, Z
    61a0:	31 81       	ldd	r19, Z+1	; 0x01
    61a2:	2e 0d       	add	r18, r14
    61a4:	3f 1d       	adc	r19, r15
    61a6:	a6 01       	movw	r20, r12
    61a8:	64 e1       	ldi	r22, 0x14	; 20
    61aa:	77 e0       	ldi	r23, 0x07	; 7
    61ac:	0e 94 86 26 	call	0x4d0c	; 0x4d0c <Lights::Lights(__FlashStringHelper const*, Module*, Settings::LightsSettings*)>
    61b0:	82 e2       	ldi	r24, 0x22	; 34
    61b2:	97 e0       	ldi	r25, 0x07	; 7
    61b4:	99 83       	std	Y+1, r25	; 0x01
    61b6:	88 83       	st	Y, r24
    61b8:	82 e4       	ldi	r24, 0x42	; 66
    61ba:	97 e0       	ldi	r25, 0x07	; 7
    61bc:	9b ab       	std	Y+51, r25	; 0x33
    61be:	8a ab       	std	Y+50, r24	; 0x32
    61c0:	8e e2       	ldi	r24, 0x2E	; 46
    61c2:	97 e0       	ldi	r25, 0x07	; 7
    61c4:	9b 83       	std	Y+3, r25	; 0x03
    61c6:	8a 83       	std	Y+2, r24	; 0x02
b:\Gbox420\Gbox420\Gbox420_Mega_Main\build\sketch\src\Components_Web/Lights_Web.cpp:5
{
  this->Parent = Parent;
    61c8:	f9 aa       	std	Y+49, r15	; 0x31
    61ca:	e8 aa       	std	Y+48, r14	; 0x30
b:\Gbox420\Gbox420\Gbox420_Mega_Main\build\sketch\src\Components_Web/Lights_Web.cpp:6
  Parent->addToWebsiteQueue_Load(this);
    61cc:	be 01       	movw	r22, r28
    61ce:	c7 01       	movw	r24, r14
    61d0:	0e 94 83 37 	call	0x6f06	; 0x6f06 <Module_Web::addToWebsiteQueue_Load(Common_Web*)>
b:\Gbox420\Gbox420\Gbox420_Mega_Main\build\sketch\src\Components_Web/Lights_Web.cpp:7
  Parent->addToWebsiteQueue_Refresh(this);
    61d4:	be 01       	movw	r22, r28
    61d6:	c7 01       	movw	r24, r14
    61d8:	0e 94 9d 37 	call	0x6f3a	; 0x6f3a <Module_Web::addToWebsiteQueue_Refresh(Common_Web*)>
b:\Gbox420\Gbox420\Gbox420_Mega_Main\build\sketch\src\Components_Web/Lights_Web.cpp:8
  Parent->addToCommandQueue(this);
    61dc:	be 01       	movw	r22, r28
    61de:	c7 01       	movw	r24, r14
_ZN10Lights_WebC1EPK19__FlashStringHelperP10Module_WebPN8Settings14LightsSettingsE():
b:\Gbox420\Gbox420\Gbox420_Mega_Main\build\sketch\src\Components_Web/Lights_Web.cpp:9
}
    61e0:	df 91       	pop	r29
    61e2:	cf 91       	pop	r28
    61e4:	1f 91       	pop	r17
    61e6:	0f 91       	pop	r16
    61e8:	ff 90       	pop	r15
    61ea:	ef 90       	pop	r14
    61ec:	df 90       	pop	r13
    61ee:	cf 90       	pop	r12
Lights_Web():
b:\Gbox420\Gbox420\Gbox420_Mega_Main\build\sketch\src\Components_Web/Lights_Web.cpp:8
Lights_Web::Lights_Web(const __FlashStringHelper *Name, Module_Web *Parent, Settings::LightsSettings *DefaultSettings) : Common(Name), Common_Web(Name), Lights(Name, Parent, DefaultSettings)
{
  this->Parent = Parent;
  Parent->addToWebsiteQueue_Load(this);
  Parent->addToWebsiteQueue_Refresh(this);
  Parent->addToCommandQueue(this);
    61f0:	0c 94 b7 37 	jmp	0x6f6e	; 0x6f6e <Module_Web::addToCommandQueue(Common_Web*)>

000061f4 <PowerSensorV3_Web::websiteEvent_Refresh(char*)>:
_ZN17PowerSensorV3_Web20websiteEvent_RefreshEPc():
b:\Gbox420\Gbox420\Gbox420_Mega_Main\build\sketch\src\Components_Web/PowerSensorV3_Web.cpp:6
#include "PowerSensorV3_Web.h"

PowerSensorV3_Web::PowerSensorV3_Web(const __FlashStringHelper *Name, Module_Web *Parent, HardwareSerial *SerialPort) : Common(Name), Common_Web(Name), PowerSensorV3(Name, Parent, SerialPort)
{
  this->Parent = Parent;
  Parent->addToWebsiteQueue_Refresh(this);
    61f4:	ef 92       	push	r14
    61f6:	ff 92       	push	r15
    61f8:	0f 93       	push	r16
    61fa:	1f 93       	push	r17
    61fc:	cf 93       	push	r28
    61fe:	df 93       	push	r29
    6200:	ec 01       	movw	r28, r24
    6202:	8c 01       	movw	r16, r24
    6204:	0e 5f       	subi	r16, 0xFE	; 254
    6206:	1f 4f       	sbci	r17, 0xFF	; 255
    6208:	61 e0       	ldi	r22, 0x01	; 1
    620a:	c8 01       	movw	r24, r16
    620c:	0e 94 39 29 	call	0x5272	; 0x5272 <PowerSensorV3::getPowerText(bool)>
    6210:	7c 01       	movw	r14, r24
    6212:	e8 81       	ld	r30, Y
    6214:	f9 81       	ldd	r31, Y+1	; 0x01
    6216:	36 97       	sbiw	r30, 0x06	; 6
    6218:	80 81       	ld	r24, Z
    621a:	91 81       	ldd	r25, Z+1	; 0x01
    621c:	41 e0       	ldi	r20, 0x01	; 1
    621e:	63 e8       	ldi	r22, 0x83	; 131
    6220:	7a e0       	ldi	r23, 0x0A	; 10
    6222:	8c 0f       	add	r24, r28
    6224:	9d 1f       	adc	r25, r29
    6226:	0e 94 7e 19 	call	0x32fc	; 0x32fc <Common::getName(__FlashStringHelper const*, bool)>
    622a:	a7 01       	movw	r20, r14
    622c:	bc 01       	movw	r22, r24
    622e:	89 ee       	ldi	r24, 0xE9	; 233
    6230:	9c e0       	ldi	r25, 0x0C	; 12
    6232:	0e 94 a9 77 	call	0xef52	; 0xef52 <ELClientWebServer::setArgString(char const*, char const*)>
    6236:	61 e0       	ldi	r22, 0x01	; 1
    6238:	c8 01       	movw	r24, r16
    623a:	0e 94 60 29 	call	0x52c0	; 0x52c0 <PowerSensorV3::getEnergyText(bool)>
    623e:	7c 01       	movw	r14, r24
    6240:	e8 81       	ld	r30, Y
    6242:	f9 81       	ldd	r31, Y+1	; 0x01
    6244:	36 97       	sbiw	r30, 0x06	; 6
    6246:	80 81       	ld	r24, Z
    6248:	91 81       	ldd	r25, Z+1	; 0x01
    624a:	41 e0       	ldi	r20, 0x01	; 1
    624c:	61 e8       	ldi	r22, 0x81	; 129
    624e:	7a e0       	ldi	r23, 0x0A	; 10
    6250:	8c 0f       	add	r24, r28
    6252:	9d 1f       	adc	r25, r29
    6254:	0e 94 7e 19 	call	0x32fc	; 0x32fc <Common::getName(__FlashStringHelper const*, bool)>
    6258:	a7 01       	movw	r20, r14
    625a:	bc 01       	movw	r22, r24
    625c:	89 ee       	ldi	r24, 0xE9	; 233
    625e:	9c e0       	ldi	r25, 0x0C	; 12
    6260:	0e 94 a9 77 	call	0xef52	; 0xef52 <ELClientWebServer::setArgString(char const*, char const*)>
    6264:	61 e0       	ldi	r22, 0x01	; 1
    6266:	c8 01       	movw	r24, r16
    6268:	0e 94 87 29 	call	0x530e	; 0x530e <PowerSensorV3::getVoltageText(bool)>
    626c:	7c 01       	movw	r14, r24
    626e:	e8 81       	ld	r30, Y
    6270:	f9 81       	ldd	r31, Y+1	; 0x01
    6272:	36 97       	sbiw	r30, 0x06	; 6
    6274:	80 81       	ld	r24, Z
    6276:	91 81       	ldd	r25, Z+1	; 0x01
    6278:	41 e0       	ldi	r20, 0x01	; 1
    627a:	6f e7       	ldi	r22, 0x7F	; 127
    627c:	7a e0       	ldi	r23, 0x0A	; 10
    627e:	8c 0f       	add	r24, r28
    6280:	9d 1f       	adc	r25, r29
    6282:	0e 94 7e 19 	call	0x32fc	; 0x32fc <Common::getName(__FlashStringHelper const*, bool)>
    6286:	a7 01       	movw	r20, r14
    6288:	bc 01       	movw	r22, r24
    628a:	89 ee       	ldi	r24, 0xE9	; 233
    628c:	9c e0       	ldi	r25, 0x0C	; 12
    628e:	0e 94 a9 77 	call	0xef52	; 0xef52 <ELClientWebServer::setArgString(char const*, char const*)>
    6292:	61 e0       	ldi	r22, 0x01	; 1
    6294:	c8 01       	movw	r24, r16
    6296:	0e 94 ae 29 	call	0x535c	; 0x535c <PowerSensorV3::getCurrentText(bool)>
    629a:	7c 01       	movw	r14, r24
    629c:	e8 81       	ld	r30, Y
    629e:	f9 81       	ldd	r31, Y+1	; 0x01
    62a0:	36 97       	sbiw	r30, 0x06	; 6
    62a2:	80 81       	ld	r24, Z
    62a4:	91 81       	ldd	r25, Z+1	; 0x01
    62a6:	41 e0       	ldi	r20, 0x01	; 1
    62a8:	6d e7       	ldi	r22, 0x7D	; 125
    62aa:	7a e0       	ldi	r23, 0x0A	; 10
    62ac:	8c 0f       	add	r24, r28
    62ae:	9d 1f       	adc	r25, r29
    62b0:	0e 94 7e 19 	call	0x32fc	; 0x32fc <Common::getName(__FlashStringHelper const*, bool)>
    62b4:	a7 01       	movw	r20, r14
    62b6:	bc 01       	movw	r22, r24
    62b8:	89 ee       	ldi	r24, 0xE9	; 233
    62ba:	9c e0       	ldi	r25, 0x0C	; 12
    62bc:	0e 94 a9 77 	call	0xef52	; 0xef52 <ELClientWebServer::setArgString(char const*, char const*)>
    62c0:	61 e0       	ldi	r22, 0x01	; 1
    62c2:	c8 01       	movw	r24, r16
    62c4:	0e 94 d5 29 	call	0x53aa	; 0x53aa <PowerSensorV3::getFrequencyText(bool)>
    62c8:	7c 01       	movw	r14, r24
    62ca:	e8 81       	ld	r30, Y
    62cc:	f9 81       	ldd	r31, Y+1	; 0x01
    62ce:	36 97       	sbiw	r30, 0x06	; 6
    62d0:	80 81       	ld	r24, Z
    62d2:	91 81       	ldd	r25, Z+1	; 0x01
    62d4:	41 e0       	ldi	r20, 0x01	; 1
    62d6:	6b e7       	ldi	r22, 0x7B	; 123
    62d8:	7a e0       	ldi	r23, 0x0A	; 10
    62da:	8c 0f       	add	r24, r28
    62dc:	9d 1f       	adc	r25, r29
    62de:	0e 94 7e 19 	call	0x32fc	; 0x32fc <Common::getName(__FlashStringHelper const*, bool)>
    62e2:	a7 01       	movw	r20, r14
    62e4:	bc 01       	movw	r22, r24
    62e6:	89 ee       	ldi	r24, 0xE9	; 233
    62e8:	9c e0       	ldi	r25, 0x0C	; 12
    62ea:	0e 94 a9 77 	call	0xef52	; 0xef52 <ELClientWebServer::setArgString(char const*, char const*)>
    62ee:	c8 01       	movw	r24, r16
    62f0:	0e 94 fc 29 	call	0x53f8	; 0x53f8 <PowerSensorV3::getPowerFactorText()>
    62f4:	8c 01       	movw	r16, r24
    62f6:	e8 81       	ld	r30, Y
    62f8:	f9 81       	ldd	r31, Y+1	; 0x01
    62fa:	36 97       	sbiw	r30, 0x06	; 6
    62fc:	80 81       	ld	r24, Z
    62fe:	91 81       	ldd	r25, Z+1	; 0x01
    6300:	41 e0       	ldi	r20, 0x01	; 1
    6302:	68 e7       	ldi	r22, 0x78	; 120
    6304:	7a e0       	ldi	r23, 0x0A	; 10
    6306:	8c 0f       	add	r24, r28
    6308:	9d 1f       	adc	r25, r29
    630a:	0e 94 7e 19 	call	0x32fc	; 0x32fc <Common::getName(__FlashStringHelper const*, bool)>
    630e:	a8 01       	movw	r20, r16
    6310:	bc 01       	movw	r22, r24
    6312:	89 ee       	ldi	r24, 0xE9	; 233
    6314:	9c e0       	ldi	r25, 0x0C	; 12
    6316:	df 91       	pop	r29
    6318:	cf 91       	pop	r28
    631a:	1f 91       	pop	r17
    631c:	0f 91       	pop	r16
    631e:	ff 90       	pop	r15
    6320:	ef 90       	pop	r14
    6322:	0c 94 a9 77 	jmp	0xef52	; 0xef52 <ELClientWebServer::setArgString(char const*, char const*)>

00006326 <PowerSensorV3_Web::PowerSensorV3_Web(__FlashStringHelper const*, Module_Web*, HardwareSerial*)>:
_ZN17PowerSensorV3_WebC1EPK19__FlashStringHelperP10Module_WebP14HardwareSerial():
b:\Gbox420\Gbox420\Gbox420_Mega_Main\build\sketch\src\Components_Web/PowerSensorV3_Web.cpp:3
#include "PowerSensorV3_Web.h"

PowerSensorV3_Web::PowerSensorV3_Web(const __FlashStringHelper *Name, Module_Web *Parent, HardwareSerial *SerialPort) : Common(Name), Common_Web(Name), PowerSensorV3(Name, Parent, SerialPort)
    6326:	cf 92       	push	r12
    6328:	df 92       	push	r13
    632a:	ef 92       	push	r14
    632c:	ff 92       	push	r15
    632e:	0f 93       	push	r16
    6330:	1f 93       	push	r17
    6332:	cf 93       	push	r28
    6334:	df 93       	push	r29
    6336:	ec 01       	movw	r28, r24
    6338:	6b 01       	movw	r12, r22
    633a:	7a 01       	movw	r14, r20
    633c:	89 01       	movw	r16, r18
PowerSensorV3_Web():
    633e:	82 96       	adiw	r24, 0x22	; 34
    6340:	0e 94 f7 18 	call	0x31ee	; 0x31ee <Common::Common(__FlashStringHelper const*)>
Common_Web():
b:\Gbox420\Gbox420\Gbox420_Mega_Main\build\sketch\src\Components_Web/420Common_Web.h:24
    6344:	84 e7       	ldi	r24, 0x74	; 116
    6346:	97 e0       	ldi	r25, 0x07	; 7
    6348:	99 83       	std	Y+1, r25	; 0x01
    634a:	88 83       	st	Y, r24
    634c:	88 e8       	ldi	r24, 0x88	; 136
    634e:	97 e0       	ldi	r25, 0x07	; 7
    6350:	9b a3       	std	Y+35, r25	; 0x23
    6352:	8a a3       	std	Y+34, r24	; 0x22
PowerSensorV3_Web():
b:\Gbox420\Gbox420\Gbox420_Mega_Main\build\sketch\src\Components_Web/PowerSensorV3_Web.cpp:3
    6354:	ce 01       	movw	r24, r28
    6356:	02 96       	adiw	r24, 0x02	; 2
    6358:	30 e0       	ldi	r19, 0x00	; 0
    635a:	20 e0       	ldi	r18, 0x00	; 0
    635c:	e1 14       	cp	r14, r1
    635e:	f1 04       	cpc	r15, r1
    6360:	41 f0       	breq	.+16     	; 0x6372 <PowerSensorV3_Web::PowerSensorV3_Web(__FlashStringHelper const*, Module_Web*, HardwareSerial*)+0x4c>
    6362:	d7 01       	movw	r26, r14
    6364:	ed 91       	ld	r30, X+
    6366:	fc 91       	ld	r31, X
    6368:	70 97       	sbiw	r30, 0x10	; 16
    636a:	20 81       	ld	r18, Z
    636c:	31 81       	ldd	r19, Z+1	; 0x01
    636e:	2e 0d       	add	r18, r14
    6370:	3f 1d       	adc	r19, r15
    6372:	a6 01       	movw	r20, r12
    6374:	68 e9       	ldi	r22, 0x98	; 152
    6376:	77 e0       	ldi	r23, 0x07	; 7
    6378:	0e 94 ef 28 	call	0x51de	; 0x51de <PowerSensorV3::PowerSensorV3(__FlashStringHelper const*, Module*, HardwareSerial*)>
    637c:	86 ea       	ldi	r24, 0xA6	; 166
    637e:	97 e0       	ldi	r25, 0x07	; 7
    6380:	99 83       	std	Y+1, r25	; 0x01
    6382:	88 83       	st	Y, r24
    6384:	84 ec       	ldi	r24, 0xC4	; 196
    6386:	97 e0       	ldi	r25, 0x07	; 7
    6388:	9b a3       	std	Y+35, r25	; 0x23
    638a:	8a a3       	std	Y+34, r24	; 0x22
    638c:	82 eb       	ldi	r24, 0xB2	; 178
    638e:	97 e0       	ldi	r25, 0x07	; 7
    6390:	9b 83       	std	Y+3, r25	; 0x03
    6392:	8a 83       	std	Y+2, r24	; 0x02
b:\Gbox420\Gbox420\Gbox420_Mega_Main\build\sketch\src\Components_Web/PowerSensorV3_Web.cpp:5
{
  this->Parent = Parent;
    6394:	f9 a2       	std	Y+33, r15	; 0x21
    6396:	e8 a2       	std	Y+32, r14	; 0x20
b:\Gbox420\Gbox420\Gbox420_Mega_Main\build\sketch\src\Components_Web/PowerSensorV3_Web.cpp:6
  Parent->addToWebsiteQueue_Refresh(this);
    6398:	be 01       	movw	r22, r28
    639a:	c7 01       	movw	r24, r14
_ZN17PowerSensorV3_WebC1EPK19__FlashStringHelperP10Module_WebP14HardwareSerial():
b:\Gbox420\Gbox420\Gbox420_Mega_Main\build\sketch\src\Components_Web/PowerSensorV3_Web.cpp:7
}
    639c:	df 91       	pop	r29
    639e:	cf 91       	pop	r28
    63a0:	1f 91       	pop	r17
    63a2:	0f 91       	pop	r16
    63a4:	ff 90       	pop	r15
    63a6:	ef 90       	pop	r14
    63a8:	df 90       	pop	r13
    63aa:	cf 90       	pop	r12
PowerSensorV3_Web():
b:\Gbox420\Gbox420\Gbox420_Mega_Main\build\sketch\src\Components_Web/PowerSensorV3_Web.cpp:6
#include "PowerSensorV3_Web.h"

PowerSensorV3_Web::PowerSensorV3_Web(const __FlashStringHelper *Name, Module_Web *Parent, HardwareSerial *SerialPort) : Common(Name), Common_Web(Name), PowerSensorV3(Name, Parent, SerialPort)
{
  this->Parent = Parent;
  Parent->addToWebsiteQueue_Refresh(this);
    63ac:	0c 94 9d 37 	jmp	0x6f3a	; 0x6f3a <Module_Web::addToWebsiteQueue_Refresh(Common_Web*)>

000063b0 <Sound_Web::websiteEvent_Load(char*)>:
_ZN9Sound_Web17websiteEvent_LoadEPc():
b:\Gbox420\Gbox420\Gbox420_Mega_Main\build\sketch\src\Components_Web/Sound_Web.cpp:8
Sound_Web::Sound_Web(const __FlashStringHelper *Name, Module_Web *Parent, Settings::SoundSettings *DefaultSettings) : Common(Name), Common_Web(Name), Sound(Name, Parent, DefaultSettings)
{
  this->Parent = Parent;
  Parent->SoundFeedback = this;
  Parent->addToWebsiteQueue_Load(this);
  Parent->addToCommandQueue(this);
    63b0:	cf 93       	push	r28
    63b2:	dc 01       	movw	r26, r24
    63b4:	1a 96       	adiw	r26, 0x0a	; 10
    63b6:	ed 91       	ld	r30, X+
    63b8:	fc 91       	ld	r31, X
    63ba:	1b 97       	sbiw	r26, 0x0b	; 11
    63bc:	c0 81       	ld	r28, Z
    63be:	ed 91       	ld	r30, X+
    63c0:	fc 91       	ld	r31, X
    63c2:	36 97       	sbiw	r30, 0x06	; 6
    63c4:	20 81       	ld	r18, Z
    63c6:	31 81       	ldd	r19, Z+1	; 0x01
    63c8:	41 e0       	ldi	r20, 0x01	; 1
    63ca:	6d e2       	ldi	r22, 0x2D	; 45
    63cc:	7c e0       	ldi	r23, 0x0C	; 12
    63ce:	82 0f       	add	r24, r18
    63d0:	93 1f       	adc	r25, r19
    63d2:	0e 94 7e 19 	call	0x32fc	; 0x32fc <Common::getName(__FlashStringHelper const*, bool)>
    63d6:	4c 2f       	mov	r20, r28
    63d8:	bc 01       	movw	r22, r24
    63da:	89 ee       	ldi	r24, 0xE9	; 233
    63dc:	9c e0       	ldi	r25, 0x0C	; 12
    63de:	cf 91       	pop	r28
    63e0:	0c 94 6d 78 	jmp	0xf0da	; 0xf0da <ELClientWebServer::setArgBoolean(char const*, unsigned char)>

000063e4 <Sound_Web::commandEvent(char*, char*)>:
_ZN9Sound_Web12commandEventEPcS0_():
    63e4:	1f 93       	push	r17
    63e6:	cf 93       	push	r28
    63e8:	df 93       	push	r29
    63ea:	ec 01       	movw	r28, r24
    63ec:	e8 81       	ld	r30, Y
    63ee:	f9 81       	ldd	r31, Y+1	; 0x01
    63f0:	36 97       	sbiw	r30, 0x06	; 6
    63f2:	80 81       	ld	r24, Z
    63f4:	91 81       	ldd	r25, Z+1	; 0x01
    63f6:	8c 0f       	add	r24, r28
    63f8:	9d 1f       	adc	r25, r29
    63fa:	0e 94 25 19 	call	0x324a	; 0x324a <Common::isThisMine(char const*)>
    63fe:	18 2f       	mov	r17, r24
    6400:	88 23       	and	r24, r24
    6402:	a1 f0       	breq	.+40     	; 0x642c <Sound_Web::commandEvent(char*, char*)+0x48>
    6404:	6b e2       	ldi	r22, 0x2B	; 43
    6406:	7c e0       	ldi	r23, 0x0C	; 12
    6408:	81 eb       	ldi	r24, 0xB1	; 177
    640a:	9d e0       	ldi	r25, 0x0D	; 13
    640c:	0e 94 e5 94 	call	0x129ca	; 0x129ca <strcmp_P>
    6410:	89 2b       	or	r24, r25
    6412:	89 f4       	brne	.+34     	; 0x6436 <Sound_Web::commandEvent(char*, char*)+0x52>
    6414:	89 ee       	ldi	r24, 0xE9	; 233
    6416:	9c e0       	ldi	r25, 0x0C	; 12
    6418:	0e 94 de 79 	call	0xf3bc	; 0xf3bc <ELClientWebServer::getArgBoolean()>
    641c:	61 e0       	ldi	r22, 0x01	; 1
    641e:	81 11       	cpse	r24, r1
    6420:	01 c0       	rjmp	.+2      	; 0x6424 <Sound_Web::commandEvent(char*, char*)+0x40>
    6422:	60 e0       	ldi	r22, 0x00	; 0
    6424:	ce 01       	movw	r24, r28
    6426:	02 96       	adiw	r24, 0x02	; 2
    6428:	0e 94 d7 2a 	call	0x55ae	; 0x55ae <Sound::setSoundOnOff(bool)>
    642c:	81 2f       	mov	r24, r17
    642e:	df 91       	pop	r29
    6430:	cf 91       	pop	r28
    6432:	1f 91       	pop	r17
    6434:	08 95       	ret
    6436:	68 e2       	ldi	r22, 0x28	; 40
    6438:	7c e0       	ldi	r23, 0x0C	; 12
    643a:	81 eb       	ldi	r24, 0xB1	; 177
    643c:	9d e0       	ldi	r25, 0x0D	; 13
    643e:	0e 94 e5 94 	call	0x129ca	; 0x129ca <strcmp_P>
    6442:	89 2b       	or	r24, r25
    6444:	99 f7       	brne	.-26     	; 0x642c <Sound_Web::commandEvent(char*, char*)+0x48>
_ZN9Sound_Web6playEEEv():
    6446:	81 e0       	ldi	r24, 0x01	; 1
    6448:	88 8b       	std	Y+16, r24	; 0x10
    644a:	f0 cf       	rjmp	.-32     	; 0x642c <Sound_Web::commandEvent(char*, char*)+0x48>

0000644c <virtual thunk to Sound_Web::commandEvent(char*, char*)>:
_ZTv0_n14_N9Sound_Web12commandEventEPcS0_():
    644c:	dc 01       	movw	r26, r24
    644e:	ed 91       	ld	r30, X+
    6450:	fc 91       	ld	r31, X
    6452:	3e 97       	sbiw	r30, 0x0e	; 14
    6454:	20 81       	ld	r18, Z
    6456:	31 81       	ldd	r19, Z+1	; 0x01
    6458:	82 0f       	add	r24, r18
    645a:	93 1f       	adc	r25, r19
    645c:	0c 94 f2 31 	jmp	0x63e4	; 0x63e4 <Sound_Web::commandEvent(char*, char*)>

00006460 <Sound_Web::Sound_Web(__FlashStringHelper const*, Module_Web*, Settings::SoundSettings*)>:
_ZN9Sound_WebC1EPK19__FlashStringHelperP10Module_WebPN8Settings13SoundSettingsE():
b:\Gbox420\Gbox420\Gbox420_Mega_Main\build\sketch\src\Components_Web/Sound_Web.cpp:3
#include "Sound_Web.h"

Sound_Web::Sound_Web(const __FlashStringHelper *Name, Module_Web *Parent, Settings::SoundSettings *DefaultSettings) : Common(Name), Common_Web(Name), Sound(Name, Parent, DefaultSettings)
    6460:	cf 92       	push	r12
    6462:	df 92       	push	r13
    6464:	ef 92       	push	r14
    6466:	ff 92       	push	r15
    6468:	0f 93       	push	r16
    646a:	1f 93       	push	r17
    646c:	cf 93       	push	r28
    646e:	df 93       	push	r29
    6470:	ec 01       	movw	r28, r24
    6472:	6b 01       	movw	r12, r22
    6474:	7a 01       	movw	r14, r20
    6476:	89 01       	movw	r16, r18
Sound_Web():
    6478:	41 96       	adiw	r24, 0x11	; 17
    647a:	0e 94 f7 18 	call	0x31ee	; 0x31ee <Common::Common(__FlashStringHelper const*)>
Common_Web():
b:\Gbox420\Gbox420\Gbox420_Mega_Main\build\sketch\src\Components_Web/420Common_Web.h:24
    647e:	86 ef       	ldi	r24, 0xF6	; 246
    6480:	97 e0       	ldi	r25, 0x07	; 7
    6482:	99 83       	std	Y+1, r25	; 0x01
    6484:	88 83       	st	Y, r24
    6486:	8a e0       	ldi	r24, 0x0A	; 10
    6488:	98 e0       	ldi	r25, 0x08	; 8
    648a:	9a 8b       	std	Y+18, r25	; 0x12
    648c:	89 8b       	std	Y+17, r24	; 0x11
Sound_Web():
b:\Gbox420\Gbox420\Gbox420_Mega_Main\build\sketch\src\Components_Web/Sound_Web.cpp:3
    648e:	ce 01       	movw	r24, r28
    6490:	02 96       	adiw	r24, 0x02	; 2
    6492:	30 e0       	ldi	r19, 0x00	; 0
    6494:	20 e0       	ldi	r18, 0x00	; 0
    6496:	e1 14       	cp	r14, r1
    6498:	f1 04       	cpc	r15, r1
    649a:	41 f0       	breq	.+16     	; 0x64ac <Sound_Web::Sound_Web(__FlashStringHelper const*, Module_Web*, Settings::SoundSettings*)+0x4c>
    649c:	d7 01       	movw	r26, r14
    649e:	ed 91       	ld	r30, X+
    64a0:	fc 91       	ld	r31, X
    64a2:	70 97       	sbiw	r30, 0x10	; 16
    64a4:	20 81       	ld	r18, Z
    64a6:	31 81       	ldd	r19, Z+1	; 0x01
    64a8:	2e 0d       	add	r18, r14
    64aa:	3f 1d       	adc	r19, r15
    64ac:	a6 01       	movw	r20, r12
    64ae:	6a e1       	ldi	r22, 0x1A	; 26
    64b0:	78 e0       	ldi	r23, 0x08	; 8
    64b2:	0e 94 82 2b 	call	0x5704	; 0x5704 <Sound::Sound(__FlashStringHelper const*, Module*, Settings::SoundSettings*)>
    64b6:	88 e2       	ldi	r24, 0x28	; 40
    64b8:	98 e0       	ldi	r25, 0x08	; 8
    64ba:	99 83       	std	Y+1, r25	; 0x01
    64bc:	88 83       	st	Y, r24
    64be:	88 e4       	ldi	r24, 0x48	; 72
    64c0:	98 e0       	ldi	r25, 0x08	; 8
    64c2:	9a 8b       	std	Y+18, r25	; 0x12
    64c4:	89 8b       	std	Y+17, r24	; 0x11
    64c6:	86 e3       	ldi	r24, 0x36	; 54
    64c8:	98 e0       	ldi	r25, 0x08	; 8
    64ca:	9b 83       	std	Y+3, r25	; 0x03
    64cc:	8a 83       	std	Y+2, r24	; 0x02
    64ce:	18 8a       	std	Y+16, r1	; 0x10
b:\Gbox420\Gbox420\Gbox420_Mega_Main\build\sketch\src\Components_Web/Sound_Web.cpp:5
{
  this->Parent = Parent;
    64d0:	ff 86       	std	Y+15, r15	; 0x0f
    64d2:	ee 86       	std	Y+14, r14	; 0x0e
b:\Gbox420\Gbox420\Gbox420_Mega_Main\build\sketch\src\Components_Web/Sound_Web.cpp:6
  Parent->SoundFeedback = this;
    64d4:	f7 01       	movw	r30, r14
    64d6:	d3 83       	std	Z+3, r29	; 0x03
    64d8:	c2 83       	std	Z+2, r28	; 0x02
b:\Gbox420\Gbox420\Gbox420_Mega_Main\build\sketch\src\Components_Web/Sound_Web.cpp:7
  Parent->addToWebsiteQueue_Load(this);
    64da:	be 01       	movw	r22, r28
    64dc:	c7 01       	movw	r24, r14
    64de:	0e 94 83 37 	call	0x6f06	; 0x6f06 <Module_Web::addToWebsiteQueue_Load(Common_Web*)>
b:\Gbox420\Gbox420\Gbox420_Mega_Main\build\sketch\src\Components_Web/Sound_Web.cpp:8
  Parent->addToCommandQueue(this);
    64e2:	be 01       	movw	r22, r28
    64e4:	c7 01       	movw	r24, r14
_ZN9Sound_WebC1EPK19__FlashStringHelperP10Module_WebPN8Settings13SoundSettingsE():
b:\Gbox420\Gbox420\Gbox420_Mega_Main\build\sketch\src\Components_Web/Sound_Web.cpp:9
}
    64e6:	df 91       	pop	r29
    64e8:	cf 91       	pop	r28
    64ea:	1f 91       	pop	r17
    64ec:	0f 91       	pop	r16
    64ee:	ff 90       	pop	r15
    64f0:	ef 90       	pop	r14
    64f2:	df 90       	pop	r13
    64f4:	cf 90       	pop	r12
Sound_Web():
b:\Gbox420\Gbox420\Gbox420_Mega_Main\build\sketch\src\Components_Web/Sound_Web.cpp:8
Sound_Web::Sound_Web(const __FlashStringHelper *Name, Module_Web *Parent, Settings::SoundSettings *DefaultSettings) : Common(Name), Common_Web(Name), Sound(Name, Parent, DefaultSettings)
{
  this->Parent = Parent;
  Parent->SoundFeedback = this;
  Parent->addToWebsiteQueue_Load(this);
  Parent->addToCommandQueue(this);
    64f6:	0c 94 b7 37 	jmp	0x6f6e	; 0x6f6e <Module_Web::addToCommandQueue(Common_Web*)>

000064fa <Sound_Web::playEE()>:
_ZN9Sound_Web6playEEEv():
b:\Gbox420\Gbox420\Gbox420_Mega_Main\build\sketch\src\Components_Web/Sound_Web.cpp:50

///< EE Section, can delete everything below if you need to save space

void Sound_Web::playEE()
{
  PlayEE = true;
    64fa:	21 e0       	ldi	r18, 0x01	; 1
    64fc:	fc 01       	movw	r30, r24
    64fe:	20 8b       	std	Z+16, r18	; 0x10
b:\Gbox420\Gbox420\Gbox420_Mega_Main\build\sketch\src\Components_Web/Sound_Web.cpp:51
}
    6500:	08 95       	ret

00006502 <Sound_Web::buzz(unsigned long, unsigned long)>:
_ZN9Sound_Web4buzzEmm():
b:\Gbox420\Gbox420\Gbox420_Mega_Main\build\sketch\src\Components_Web/Sound_Web.cpp:67
    wdt_reset(); ///< Reset Watchdog timeout to avoid Arduino reseting while playing the song
  }
}

void Sound_Web::buzz(uint32_t frequency, uint32_t length)
{
    6502:	4f 92       	push	r4
    6504:	5f 92       	push	r5
    6506:	6f 92       	push	r6
    6508:	7f 92       	push	r7
    650a:	8f 92       	push	r8
    650c:	9f 92       	push	r9
    650e:	af 92       	push	r10
    6510:	bf 92       	push	r11
    6512:	cf 92       	push	r12
    6514:	df 92       	push	r13
    6516:	ef 92       	push	r14
    6518:	ff 92       	push	r15
    651a:	0f 93       	push	r16
    651c:	1f 93       	push	r17
    651e:	cf 93       	push	r28
    6520:	df 93       	push	r29
    6522:	ec 01       	movw	r28, r24
    6524:	6a 01       	movw	r12, r20
    6526:	7b 01       	movw	r14, r22
    6528:	39 01       	movw	r6, r18
b:\Gbox420\Gbox420\Gbox420_Mega_Main\build\sketch\src\Components_Web/Sound_Web.cpp:68
  digitalWrite(13, HIGH);
    652a:	61 e0       	ldi	r22, 0x01	; 1
    652c:	8d e0       	ldi	r24, 0x0D	; 13
    652e:	0e 94 c2 87 	call	0x10f84	; 0x10f84 <digitalWrite>
b:\Gbox420\Gbox420\Gbox420_Mega_Main\build\sketch\src\Components_Web/Sound_Web.cpp:69
  uint32_t delayValue = 1000000 / frequency / 2;
    6532:	60 e2       	ldi	r22, 0x20	; 32
    6534:	71 ea       	ldi	r23, 0xA1	; 161
    6536:	87 e0       	ldi	r24, 0x07	; 7
    6538:	90 e0       	ldi	r25, 0x00	; 0
    653a:	a7 01       	movw	r20, r14
    653c:	96 01       	movw	r18, r12
    653e:	0e 94 ea 91 	call	0x123d4	; 0x123d4 <__udivmodsi4>
    6542:	49 01       	movw	r8, r18
b:\Gbox420\Gbox420\Gbox420_Mega_Main\build\sketch\src\Components_Web/Sound_Web.cpp:70
  uint32_t numCycles = frequency * length / 1000;
    6544:	a7 01       	movw	r20, r14
    6546:	96 01       	movw	r18, r12
    6548:	c3 01       	movw	r24, r6
    654a:	b8 01       	movw	r22, r16
    654c:	0e 94 b2 91 	call	0x12364	; 0x12364 <__mulsi3>
    6550:	28 ee       	ldi	r18, 0xE8	; 232
    6552:	33 e0       	ldi	r19, 0x03	; 3
    6554:	40 e0       	ldi	r20, 0x00	; 0
    6556:	50 e0       	ldi	r21, 0x00	; 0
    6558:	0e 94 ea 91 	call	0x123d4	; 0x123d4 <__udivmodsi4>
    655c:	29 01       	movw	r4, r18
    655e:	3a 01       	movw	r6, r20
b:\Gbox420\Gbox420\Gbox420_Mega_Main\build\sketch\src\Components_Web/Sound_Web.cpp:71
  for (uint32_t i = 0; i < numCycles; i++)
    6560:	c1 2c       	mov	r12, r1
    6562:	d1 2c       	mov	r13, r1
    6564:	76 01       	movw	r14, r12
b:\Gbox420\Gbox420\Gbox420_Mega_Main\build\sketch\src\Components_Web/Sound_Web.cpp:71 (discriminator 3)
    6566:	c4 14       	cp	r12, r4
    6568:	d5 04       	cpc	r13, r5
    656a:	e6 04       	cpc	r14, r6
    656c:	f7 04       	cpc	r15, r7
    656e:	c1 f0       	breq	.+48     	; 0x65a0 <Sound_Web::buzz(unsigned long, unsigned long)+0x9e>
b:\Gbox420\Gbox420\Gbox420_Mega_Main\build\sketch\src\Components_Web/Sound_Web.cpp:73 (discriminator 2)
  {
    digitalWrite(*Pin, HIGH);
    6570:	e8 85       	ldd	r30, Y+8	; 0x08
    6572:	f9 85       	ldd	r31, Y+9	; 0x09
    6574:	61 e0       	ldi	r22, 0x01	; 1
    6576:	80 81       	ld	r24, Z
    6578:	0e 94 c2 87 	call	0x10f84	; 0x10f84 <digitalWrite>
b:\Gbox420\Gbox420\Gbox420_Mega_Main\build\sketch\src\Components_Web/Sound_Web.cpp:74 (discriminator 2)
    delayMicroseconds(delayValue);
    657c:	c4 01       	movw	r24, r8
    657e:	0e 94 d1 85 	call	0x10ba2	; 0x10ba2 <delayMicroseconds>
b:\Gbox420\Gbox420\Gbox420_Mega_Main\build\sketch\src\Components_Web/Sound_Web.cpp:75 (discriminator 2)
    digitalWrite(*Pin, LOW);
    6582:	e8 85       	ldd	r30, Y+8	; 0x08
    6584:	f9 85       	ldd	r31, Y+9	; 0x09
    6586:	60 e0       	ldi	r22, 0x00	; 0
    6588:	80 81       	ld	r24, Z
    658a:	0e 94 c2 87 	call	0x10f84	; 0x10f84 <digitalWrite>
b:\Gbox420\Gbox420\Gbox420_Mega_Main\build\sketch\src\Components_Web/Sound_Web.cpp:76 (discriminator 2)
    delayMicroseconds(delayValue);
    658e:	c4 01       	movw	r24, r8
    6590:	0e 94 d1 85 	call	0x10ba2	; 0x10ba2 <delayMicroseconds>
b:\Gbox420\Gbox420\Gbox420_Mega_Main\build\sketch\src\Components_Web/Sound_Web.cpp:71 (discriminator 2)
void Sound_Web::buzz(uint32_t frequency, uint32_t length)
{
  digitalWrite(13, HIGH);
  uint32_t delayValue = 1000000 / frequency / 2;
  uint32_t numCycles = frequency * length / 1000;
  for (uint32_t i = 0; i < numCycles; i++)
    6594:	8f ef       	ldi	r24, 0xFF	; 255
    6596:	c8 1a       	sub	r12, r24
    6598:	d8 0a       	sbc	r13, r24
    659a:	e8 0a       	sbc	r14, r24
    659c:	f8 0a       	sbc	r15, r24
    659e:	e3 cf       	rjmp	.-58     	; 0x6566 <Sound_Web::buzz(unsigned long, unsigned long)+0x64>
b:\Gbox420\Gbox420\Gbox420_Mega_Main\build\sketch\src\Components_Web/Sound_Web.cpp:78
    digitalWrite(*Pin, HIGH);
    delayMicroseconds(delayValue);
    digitalWrite(*Pin, LOW);
    delayMicroseconds(delayValue);
  }
  digitalWrite(13, LOW);
    65a0:	60 e0       	ldi	r22, 0x00	; 0
    65a2:	8d e0       	ldi	r24, 0x0D	; 13
b:\Gbox420\Gbox420\Gbox420_Mega_Main\build\sketch\src\Components_Web/Sound_Web.cpp:79
}
    65a4:	df 91       	pop	r29
    65a6:	cf 91       	pop	r28
    65a8:	1f 91       	pop	r17
    65aa:	0f 91       	pop	r16
    65ac:	ff 90       	pop	r15
    65ae:	ef 90       	pop	r14
    65b0:	df 90       	pop	r13
    65b2:	cf 90       	pop	r12
    65b4:	bf 90       	pop	r11
    65b6:	af 90       	pop	r10
    65b8:	9f 90       	pop	r9
    65ba:	8f 90       	pop	r8
    65bc:	7f 90       	pop	r7
    65be:	6f 90       	pop	r6
    65c0:	5f 90       	pop	r5
    65c2:	4f 90       	pop	r4
b:\Gbox420\Gbox420\Gbox420_Mega_Main\build\sketch\src\Components_Web/Sound_Web.cpp:78
    digitalWrite(*Pin, HIGH);
    delayMicroseconds(delayValue);
    digitalWrite(*Pin, LOW);
    delayMicroseconds(delayValue);
  }
  digitalWrite(13, LOW);
    65c4:	0c 94 c2 87 	jmp	0x10f84	; 0x10f84 <digitalWrite>

000065c8 <Sound_Web::EE()>:
_ZN9Sound_Web2EEEv():
b:\Gbox420\Gbox420\Gbox420_Mega_Main\build\sketch\src\Components_Web/Sound_Web.cpp:54
{
  PlayEE = true;
}

void Sound_Web::EE()
{
    65c8:	4f 92       	push	r4
    65ca:	5f 92       	push	r5
    65cc:	6f 92       	push	r6
    65ce:	7f 92       	push	r7
    65d0:	af 92       	push	r10
    65d2:	bf 92       	push	r11
    65d4:	cf 92       	push	r12
    65d6:	df 92       	push	r13
    65d8:	ef 92       	push	r14
    65da:	ff 92       	push	r15
    65dc:	0f 93       	push	r16
    65de:	1f 93       	push	r17
    65e0:	cf 93       	push	r28
    65e2:	df 93       	push	r29
    65e4:	6c 01       	movw	r12, r24
b:\Gbox420\Gbox420\Gbox420_Mega_Main\build\sketch\src\Components_Web/Sound_Web.cpp:55
  Parent->addToLog(F("♬Easter egg♬"));
    65e6:	dc 01       	movw	r26, r24
    65e8:	1e 96       	adiw	r26, 0x0e	; 14
    65ea:	8d 91       	ld	r24, X+
    65ec:	9c 91       	ld	r25, X
    65ee:	dc 01       	movw	r26, r24
    65f0:	ed 91       	ld	r30, X+
    65f2:	fc 91       	ld	r31, X
    65f4:	02 84       	ldd	r0, Z+10	; 0x0a
    65f6:	f3 85       	ldd	r31, Z+11	; 0x0b
    65f8:	e0 2d       	mov	r30, r0
    65fa:	43 e0       	ldi	r20, 0x03	; 3
    65fc:	67 e1       	ldi	r22, 0x17	; 23
    65fe:	7c e0       	ldi	r23, 0x0C	; 12
    6600:	19 95       	eicall
    6602:	85 e8       	ldi	r24, 0x85	; 133
    6604:	e8 2e       	mov	r14, r24
    6606:	8a e0       	ldi	r24, 0x0A	; 10
    6608:	f8 2e       	mov	r15, r24
    660a:	cb e0       	ldi	r28, 0x0B	; 11
    660c:	db e0       	ldi	r29, 0x0B	; 11
b:\Gbox420\Gbox420\Gbox420_Mega_Main\build\sketch\src\Components_Web/Sound_Web.cpp:58
  for (int thisNote = 0; thisNote < 134; thisNote++)
  {
    int noteDuration = 1000 / (uint8_t)pgm_read_word(&tempo[thisNote]); ///< tempo is stored in PROGMEM (Flash), cannot read from it as RAM array (temp[thisNote] would not work) ///< https://forum.arduino.cc/index.php?topic=106603.0
    660e:	98 ee       	ldi	r25, 0xE8	; 232
    6610:	a9 2e       	mov	r10, r25
    6612:	93 e0       	ldi	r25, 0x03	; 3
    6614:	b9 2e       	mov	r11, r25
b:\Gbox420\Gbox420\Gbox420_Mega_Main\build\sketch\src\Components_Web/Sound_Web.cpp:58 (discriminator 2)
    6616:	f7 01       	movw	r30, r14
    6618:	65 91       	lpm	r22, Z+
    661a:	74 91       	lpm	r23, Z
    661c:	77 27       	eor	r23, r23
    661e:	c5 01       	movw	r24, r10
    6620:	0e 94 d6 91 	call	0x123ac	; 0x123ac <__divmodhi4>
b:\Gbox420\Gbox420\Gbox420_Mega_Main\build\sketch\src\Components_Web/Sound_Web.cpp:59 (discriminator 2)
    buzz((int)pgm_read_word(&melody[thisNote]), noteDuration);
    6624:	2b 01       	movw	r4, r22
    6626:	77 0f       	add	r23, r23
    6628:	66 08       	sbc	r6, r6
    662a:	77 08       	sbc	r7, r7
    662c:	fe 01       	movw	r30, r28
    662e:	45 91       	lpm	r20, Z+
    6630:	54 91       	lpm	r21, Z
    6632:	05 2e       	mov	r0, r21
    6634:	00 0c       	add	r0, r0
    6636:	66 0b       	sbc	r22, r22
    6638:	77 0b       	sbc	r23, r23
    663a:	93 01       	movw	r18, r6
    663c:	82 01       	movw	r16, r4
    663e:	c6 01       	movw	r24, r12
    6640:	0e 94 81 32 	call	0x6502	; 0x6502 <Sound_Web::buzz(unsigned long, unsigned long)>
b:\Gbox420\Gbox420\Gbox420_Mega_Main\build\sketch\src\Components_Web/Sound_Web.cpp:60 (discriminator 2)
    delay(noteDuration);
    6644:	c3 01       	movw	r24, r6
    6646:	b2 01       	movw	r22, r4
    6648:	0e 94 98 85 	call	0x10b30	; 0x10b30 <delay>
b:\Gbox420\Gbox420\Gbox420_Mega_Main\build\sketch\src\Components_Web/Sound_Web.cpp:61 (discriminator 2)
    buzz(0, noteDuration);
    664c:	93 01       	movw	r18, r6
    664e:	40 e0       	ldi	r20, 0x00	; 0
    6650:	50 e0       	ldi	r21, 0x00	; 0
    6652:	ba 01       	movw	r22, r20
    6654:	c6 01       	movw	r24, r12
    6656:	0e 94 81 32 	call	0x6502	; 0x6502 <Sound_Web::buzz(unsigned long, unsigned long)>
b:\Gbox420\Gbox420\Gbox420_Mega_Main\build\sketch\src\Components_Web/Sound_Web.cpp:62 (discriminator 2)
    wdt_reset(); ///< Reset Watchdog timeout to avoid Arduino reseting while playing the song
    665a:	a8 95       	wdr
    665c:	bf ef       	ldi	r27, 0xFF	; 255
    665e:	eb 1a       	sub	r14, r27
    6660:	fb 0a       	sbc	r15, r27
    6662:	22 96       	adiw	r28, 0x02	; 2
b:\Gbox420\Gbox420\Gbox420_Mega_Main\build\sketch\src\Components_Web/Sound_Web.cpp:56 (discriminator 2)
}

void Sound_Web::EE()
{
  Parent->addToLog(F("♬Easter egg♬"));
  for (int thisNote = 0; thisNote < 134; thisNote++)
    6664:	ec e0       	ldi	r30, 0x0C	; 12
    6666:	c7 31       	cpi	r28, 0x17	; 23
    6668:	de 07       	cpc	r29, r30
    666a:	a9 f6       	brne	.-86     	; 0x6616 <Sound_Web::EE()+0x4e>
b:\Gbox420\Gbox420\Gbox420_Mega_Main\build\sketch\src\Components_Web/Sound_Web.cpp:64
    buzz((int)pgm_read_word(&melody[thisNote]), noteDuration);
    delay(noteDuration);
    buzz(0, noteDuration);
    wdt_reset(); ///< Reset Watchdog timeout to avoid Arduino reseting while playing the song
  }
}
    666c:	df 91       	pop	r29
    666e:	cf 91       	pop	r28
    6670:	1f 91       	pop	r17
    6672:	0f 91       	pop	r16
    6674:	ff 90       	pop	r15
    6676:	ef 90       	pop	r14
    6678:	df 90       	pop	r13
    667a:	cf 90       	pop	r12
    667c:	bf 90       	pop	r11
    667e:	af 90       	pop	r10
    6680:	7f 90       	pop	r7
    6682:	6f 90       	pop	r6
    6684:	5f 90       	pop	r5
    6686:	4f 90       	pop	r4
    6688:	08 95       	ret

0000668a <Sound_Web::refresh_Sec()>:
_ZN9Sound_Web11refresh_SecEv():
b:\Gbox420\Gbox420\Gbox420_Mega_Main\build\sketch\src\Components_Web/Sound_Web.cpp:12
  Parent->addToWebsiteQueue_Load(this);
  Parent->addToCommandQueue(this);
}

void Sound_Web::refresh_Sec()
{
    668a:	cf 93       	push	r28
    668c:	df 93       	push	r29
    668e:	ec 01       	movw	r28, r24
b:\Gbox420\Gbox420\Gbox420_Mega_Main\build\sketch\src\Components_Web/Sound_Web.cpp:13
  Sound::refresh_Sec();
    6690:	02 96       	adiw	r24, 0x02	; 2
    6692:	0e 94 26 2c 	call	0x584c	; 0x584c <Sound::refresh_Sec()>
b:\Gbox420\Gbox420\Gbox420_Mega_Main\build\sketch\src\Components_Web/Sound_Web.cpp:14
  if (PlayEE)
    6696:	88 89       	ldd	r24, Y+16	; 0x10
    6698:	88 23       	and	r24, r24
    669a:	31 f0       	breq	.+12     	; 0x66a8 <Sound_Web::refresh_Sec()+0x1e>
b:\Gbox420\Gbox420\Gbox420_Mega_Main\build\sketch\src\Components_Web/Sound_Web.cpp:16
  {
    PlayEE = false;
    669c:	18 8a       	std	Y+16, r1	; 0x10
b:\Gbox420\Gbox420\Gbox420_Mega_Main\build\sketch\src\Components_Web/Sound_Web.cpp:17
    EE();
    669e:	ce 01       	movw	r24, r28
b:\Gbox420\Gbox420\Gbox420_Mega_Main\build\sketch\src\Components_Web/Sound_Web.cpp:19
  }
}
    66a0:	df 91       	pop	r29
    66a2:	cf 91       	pop	r28
b:\Gbox420\Gbox420\Gbox420_Mega_Main\build\sketch\src\Components_Web/Sound_Web.cpp:17
{
  Sound::refresh_Sec();
  if (PlayEE)
  {
    PlayEE = false;
    EE();
    66a4:	0c 94 e4 32 	jmp	0x65c8	; 0x65c8 <Sound_Web::EE()>
b:\Gbox420\Gbox420\Gbox420_Mega_Main\build\sketch\src\Components_Web/Sound_Web.cpp:19
  }
}
    66a8:	df 91       	pop	r29
    66aa:	cf 91       	pop	r28
    66ac:	08 95       	ret

000066ae <non-virtual thunk to Sound_Web::refresh_Sec()>:
_ZThn2_N9Sound_Web11refresh_SecEv():
    66ae:	02 97       	sbiw	r24, 0x02	; 2
    66b0:	0c 94 45 33 	jmp	0x668a	; 0x668a <Sound_Web::refresh_Sec()>

000066b4 <virtual thunk to Sound_Web::refresh_Sec()>:
_ZTv0_n8_N9Sound_Web11refresh_SecEv():
    66b4:	dc 01       	movw	r26, r24
    66b6:	ed 91       	ld	r30, X+
    66b8:	fc 91       	ld	r31, X
    66ba:	38 97       	sbiw	r30, 0x08	; 8
    66bc:	20 81       	ld	r18, Z
    66be:	31 81       	ldd	r19, Z+1	; 0x01
    66c0:	82 0f       	add	r24, r18
    66c2:	93 1f       	adc	r25, r19
    66c4:	0c 94 45 33 	jmp	0x668a	; 0x668a <Sound_Web::refresh_Sec()>

000066c8 <getFreeMemory()>:
_Z13getFreeMemoryv():
b:\Gbox420\Gbox420\Gbox420_Mega_Main\build\sketch\src/Helpers.cpp:324
    break;
  default:
    return toText(F("?"));
    break;
  }
}
    66c8:	0f 93       	push	r16
    66ca:	1f 93       	push	r17
    66cc:	cf 93       	push	r28
    66ce:	df 93       	push	r29
    66d0:	40 e0       	ldi	r20, 0x00	; 0
    66d2:	60 e0       	ldi	r22, 0x00	; 0
    66d4:	8f e8       	ldi	r24, 0x8F	; 143
    66d6:	9d e0       	ldi	r25, 0x0D	; 13
    66d8:	0e 94 85 16 	call	0x2d0a	; 0x2d0a <logToSerials(__FlashStringHelper const*, bool, unsigned char)>
    66dc:	0e 94 6f 7d 	call	0xfade	; 0xfade <freeMemory>
itoa():
    66e0:	4a e0       	ldi	r20, 0x0A	; 10
    66e2:	61 eb       	ldi	r22, 0xB1	; 177
    66e4:	7d e0       	ldi	r23, 0x0D	; 13
    66e6:	0e 94 4d 95 	call	0x12a9a	; 0x12a9a <__itoa_ncheck>
_Z12logToSerialsIA128_cEvPT_bh():
    66ea:	00 91 2f 04 	lds	r16, 0x042F	; 0x80042f <ArduinoSerial>
    66ee:	10 91 30 04 	lds	r17, 0x0430	; 0x800430 <ArduinoSerial+0x1>
    66f2:	61 e3       	ldi	r22, 0x31	; 49
    66f4:	7c e0       	ldi	r23, 0x0C	; 12
    66f6:	c8 01       	movw	r24, r16
    66f8:	0e 94 6c 8b 	call	0x116d8	; 0x116d8 <Print::print(__FlashStringHelper const*)>
    66fc:	c0 91 2d 04 	lds	r28, 0x042D	; 0x80042d <ESPSerial>
    6700:	d0 91 2e 04 	lds	r29, 0x042E	; 0x80042e <ESPSerial+0x1>
    6704:	6f e2       	ldi	r22, 0x2F	; 47
    6706:	7c e0       	ldi	r23, 0x0C	; 12
    6708:	ce 01       	movw	r24, r28
    670a:	0e 94 6c 8b 	call	0x116d8	; 0x116d8 <Print::print(__FlashStringHelper const*)>
    670e:	61 eb       	ldi	r22, 0xB1	; 177
    6710:	7d e0       	ldi	r23, 0x0D	; 13
    6712:	c8 01       	movw	r24, r16
    6714:	0e 94 c3 8b 	call	0x11786	; 0x11786 <Print::println(char const*)>
    6718:	61 eb       	ldi	r22, 0xB1	; 177
    671a:	7d e0       	ldi	r23, 0x0D	; 13
    671c:	ce 01       	movw	r24, r28
_Z13getFreeMemoryv():
    671e:	df 91       	pop	r29
    6720:	cf 91       	pop	r28
    6722:	1f 91       	pop	r17
    6724:	0f 91       	pop	r16
_Z12logToSerialsIA128_cEvPT_bh():
    6726:	0c 94 c3 8b 	jmp	0x11786	; 0x11786 <Print::println(char const*)>

0000672a <toText(int)>:
_Z6toTexti():
    672a:	4a e0       	ldi	r20, 0x0A	; 10
    672c:	61 eb       	ldi	r22, 0xB1	; 177
    672e:	7d e0       	ldi	r23, 0x0D	; 13
    6730:	0e 94 4d 95 	call	0x12a9a	; 0x12a9a <__itoa_ncheck>
    6734:	81 eb       	ldi	r24, 0xB1	; 177
    6736:	9d e0       	ldi	r25, 0x0D	; 13
    6738:	08 95       	ret

0000673a <toText(unsigned int)>:
_Z6toTextj():
    673a:	4a e0       	ldi	r20, 0x0A	; 10
    673c:	61 eb       	ldi	r22, 0xB1	; 177
    673e:	7d e0       	ldi	r23, 0x0D	; 13
    6740:	0e 94 4d 95 	call	0x12a9a	; 0x12a9a <__itoa_ncheck>
    6744:	81 eb       	ldi	r24, 0xB1	; 177
    6746:	9d e0       	ldi	r25, 0x0D	; 13
    6748:	08 95       	ret

0000674a <toText(float)>:
_Z6toTextf():
    674a:	cf 92       	push	r12
    674c:	df 92       	push	r13
    674e:	ef 92       	push	r14
    6750:	ff 92       	push	r15
    6752:	0f 93       	push	r16
    6754:	1f 93       	push	r17
    6756:	6b 01       	movw	r12, r22
    6758:	7c 01       	movw	r14, r24
    675a:	ac 01       	movw	r20, r24
    675c:	9b 01       	movw	r18, r22
    675e:	0e 94 ad 91 	call	0x1235a	; 0x1235a <__unordsf2>
    6762:	88 23       	and	r24, r24
    6764:	31 f0       	breq	.+12     	; 0x6772 <toText(float)+0x28>
    6766:	c1 2c       	mov	r12, r1
    6768:	d1 2c       	mov	r13, r1
    676a:	80 e8       	ldi	r24, 0x80	; 128
    676c:	e8 2e       	mov	r14, r24
    676e:	8f eb       	ldi	r24, 0xBF	; 191
    6770:	f8 2e       	mov	r15, r24
    6772:	01 eb       	ldi	r16, 0xB1	; 177
    6774:	1d e0       	ldi	r17, 0x0D	; 13
    6776:	22 e0       	ldi	r18, 0x02	; 2
    6778:	44 e0       	ldi	r20, 0x04	; 4
    677a:	c7 01       	movw	r24, r14
    677c:	b6 01       	movw	r22, r12
    677e:	0e 94 56 92 	call	0x124ac	; 0x124ac <dtostrf>
    6782:	c8 01       	movw	r24, r16
    6784:	1f 91       	pop	r17
    6786:	0f 91       	pop	r16
    6788:	ff 90       	pop	r15
    678a:	ef 90       	pop	r14
    678c:	df 90       	pop	r13
    678e:	cf 90       	pop	r12
    6790:	08 95       	ret

00006792 <toText(float, char const*, float)>:
_Z6toTextfPKcf():
    6792:	4f 92       	push	r4
    6794:	5f 92       	push	r5
    6796:	6f 92       	push	r6
    6798:	7f 92       	push	r7
    679a:	af 92       	push	r10
    679c:	bf 92       	push	r11
    679e:	cf 92       	push	r12
    67a0:	df 92       	push	r13
    67a2:	ef 92       	push	r14
    67a4:	ff 92       	push	r15
    67a6:	0f 93       	push	r16
    67a8:	1f 93       	push	r17
    67aa:	cf 93       	push	r28
    67ac:	df 93       	push	r29
    67ae:	cd b7       	in	r28, 0x3d	; 61
    67b0:	de b7       	in	r29, 0x3e	; 62
    67b2:	a0 97       	sbiw	r28, 0x20	; 32
    67b4:	0f b6       	in	r0, 0x3f	; 63
    67b6:	f8 94       	cli
    67b8:	de bf       	out	0x3e, r29	; 62
    67ba:	0f be       	out	0x3f, r0	; 63
    67bc:	cd bf       	out	0x3d, r28	; 61
    67be:	2b 01       	movw	r4, r22
    67c0:	3c 01       	movw	r6, r24
    67c2:	5a 01       	movw	r10, r20
    67c4:	68 01       	movw	r12, r16
    67c6:	79 01       	movw	r14, r18
    67c8:	1a 82       	std	Y+2, r1	; 0x02
    67ca:	19 82       	std	Y+1, r1	; 0x01
    67cc:	fe 01       	movw	r30, r28
    67ce:	33 96       	adiw	r30, 0x03	; 3
    67d0:	8e e1       	ldi	r24, 0x1E	; 30
    67d2:	df 01       	movw	r26, r30
    67d4:	1d 92       	st	X+, r1
    67d6:	8a 95       	dec	r24
    67d8:	e9 f7       	brne	.-6      	; 0x67d4 <toText(float, char const*, float)+0x42>
    67da:	a3 01       	movw	r20, r6
    67dc:	9b 01       	movw	r18, r22
    67de:	c3 01       	movw	r24, r6
    67e0:	0e 94 ad 91 	call	0x1235a	; 0x1235a <__unordsf2>
    67e4:	88 23       	and	r24, r24
    67e6:	31 f0       	breq	.+12     	; 0x67f4 <toText(float, char const*, float)+0x62>
    67e8:	41 2c       	mov	r4, r1
    67ea:	51 2c       	mov	r5, r1
    67ec:	90 e8       	ldi	r25, 0x80	; 128
    67ee:	69 2e       	mov	r6, r25
    67f0:	9f eb       	ldi	r25, 0xBF	; 191
    67f2:	79 2e       	mov	r7, r25
    67f4:	a7 01       	movw	r20, r14
    67f6:	96 01       	movw	r18, r12
    67f8:	c7 01       	movw	r24, r14
    67fa:	b6 01       	movw	r22, r12
    67fc:	0e 94 ad 91 	call	0x1235a	; 0x1235a <__unordsf2>
    6800:	88 23       	and	r24, r24
    6802:	31 f0       	breq	.+12     	; 0x6810 <toText(float, char const*, float)+0x7e>
    6804:	c1 2c       	mov	r12, r1
    6806:	d1 2c       	mov	r13, r1
    6808:	80 e8       	ldi	r24, 0x80	; 128
    680a:	e8 2e       	mov	r14, r24
    680c:	8f eb       	ldi	r24, 0xBF	; 191
    680e:	f8 2e       	mov	r15, r24
    6810:	01 eb       	ldi	r16, 0xB1	; 177
    6812:	1d e0       	ldi	r17, 0x0D	; 13
    6814:	22 e0       	ldi	r18, 0x02	; 2
    6816:	44 e0       	ldi	r20, 0x04	; 4
    6818:	c3 01       	movw	r24, r6
    681a:	b2 01       	movw	r22, r4
    681c:	0e 94 56 92 	call	0x124ac	; 0x124ac <dtostrf>
    6820:	b5 01       	movw	r22, r10
    6822:	c8 01       	movw	r24, r16
    6824:	0e 94 23 95 	call	0x12a46	; 0x12a46 <strcat>
    6828:	8e 01       	movw	r16, r28
    682a:	0f 5f       	subi	r16, 0xFF	; 255
    682c:	1f 4f       	sbci	r17, 0xFF	; 255
    682e:	22 e0       	ldi	r18, 0x02	; 2
    6830:	44 e0       	ldi	r20, 0x04	; 4
    6832:	c7 01       	movw	r24, r14
    6834:	b6 01       	movw	r22, r12
    6836:	0e 94 56 92 	call	0x124ac	; 0x124ac <dtostrf>
    683a:	b8 01       	movw	r22, r16
    683c:	81 eb       	ldi	r24, 0xB1	; 177
    683e:	9d e0       	ldi	r25, 0x0D	; 13
    6840:	0e 94 23 95 	call	0x12a46	; 0x12a46 <strcat>
    6844:	81 eb       	ldi	r24, 0xB1	; 177
    6846:	9d e0       	ldi	r25, 0x0D	; 13
    6848:	a0 96       	adiw	r28, 0x20	; 32
    684a:	0f b6       	in	r0, 0x3f	; 63
    684c:	f8 94       	cli
    684e:	de bf       	out	0x3e, r29	; 62
    6850:	0f be       	out	0x3f, r0	; 63
    6852:	cd bf       	out	0x3d, r28	; 61
    6854:	df 91       	pop	r29
    6856:	cf 91       	pop	r28
    6858:	1f 91       	pop	r17
    685a:	0f 91       	pop	r16
    685c:	ff 90       	pop	r15
    685e:	ef 90       	pop	r14
    6860:	df 90       	pop	r13
    6862:	cf 90       	pop	r12
    6864:	bf 90       	pop	r11
    6866:	af 90       	pop	r10
    6868:	7f 90       	pop	r7
    686a:	6f 90       	pop	r6
    686c:	5f 90       	pop	r5
    686e:	4f 90       	pop	r4
    6870:	08 95       	ret

00006872 <toText_time(unsigned char, unsigned char)>:
_Z11toText_timehh():
    6872:	1f 92       	push	r1
    6874:	6f 93       	push	r22
    6876:	1f 92       	push	r1
    6878:	8f 93       	push	r24
    687a:	82 e5       	ldi	r24, 0x52	; 82
    687c:	98 e0       	ldi	r25, 0x08	; 8
    687e:	9f 93       	push	r25
    6880:	8f 93       	push	r24
    6882:	81 eb       	ldi	r24, 0xB1	; 177
    6884:	9d e0       	ldi	r25, 0x0D	; 13
    6886:	9f 93       	push	r25
    6888:	8f 93       	push	r24
    688a:	0e 94 3e 96 	call	0x12c7c	; 0x12c7c <sprintf>
    688e:	8d b7       	in	r24, 0x3d	; 61
    6890:	9e b7       	in	r25, 0x3e	; 62
    6892:	08 96       	adiw	r24, 0x08	; 8
    6894:	0f b6       	in	r0, 0x3f	; 63
    6896:	f8 94       	cli
    6898:	9e bf       	out	0x3e, r25	; 62
    689a:	0f be       	out	0x3f, r0	; 63
    689c:	8d bf       	out	0x3d, r24	; 61
    689e:	81 eb       	ldi	r24, 0xB1	; 177
    68a0:	9d e0       	ldi	r25, 0x0D	; 13
    68a2:	08 95       	ret

000068a4 <toText_temp(float)>:
_Z11toText_tempf():
    68a4:	0f 93       	push	r16
    68a6:	1f 93       	push	r17
    68a8:	01 eb       	ldi	r16, 0xB1	; 177
    68aa:	1d e0       	ldi	r17, 0x0D	; 13
    68ac:	22 e0       	ldi	r18, 0x02	; 2
    68ae:	44 e0       	ldi	r20, 0x04	; 4
    68b0:	0e 94 56 92 	call	0x124ac	; 0x124ac <dtostrf>
    68b4:	e0 91 b5 0c 	lds	r30, 0x0CB5	; 0x800cb5 <Metric>
    68b8:	f0 91 b6 0c 	lds	r31, 0x0CB6	; 0x800cb6 <Metric+0x1>
    68bc:	80 81       	ld	r24, Z
    68be:	88 23       	and	r24, r24
    68c0:	51 f0       	breq	.+20     	; 0x68d6 <toText_temp(float)+0x32>
    68c2:	6b e8       	ldi	r22, 0x8B	; 139
    68c4:	7d e0       	ldi	r23, 0x0D	; 13
    68c6:	c8 01       	movw	r24, r16
    68c8:	0e 94 da 94 	call	0x129b4	; 0x129b4 <strcat_P>
    68cc:	81 eb       	ldi	r24, 0xB1	; 177
    68ce:	9d e0       	ldi	r25, 0x0D	; 13
    68d0:	1f 91       	pop	r17
    68d2:	0f 91       	pop	r16
    68d4:	08 95       	ret
    68d6:	67 e8       	ldi	r22, 0x87	; 135
    68d8:	7d e0       	ldi	r23, 0x0D	; 13
    68da:	81 eb       	ldi	r24, 0xB1	; 177
    68dc:	9d e0       	ldi	r25, 0x0D	; 13
    68de:	f4 cf       	rjmp	.-24     	; 0x68c8 <toText_temp(float)+0x24>

000068e0 <toText_pressure(float)>:
_Z15toText_pressuref():
    68e0:	0f 93       	push	r16
    68e2:	1f 93       	push	r17
    68e4:	01 eb       	ldi	r16, 0xB1	; 177
    68e6:	1d e0       	ldi	r17, 0x0D	; 13
    68e8:	22 e0       	ldi	r18, 0x02	; 2
    68ea:	44 e0       	ldi	r20, 0x04	; 4
    68ec:	0e 94 56 92 	call	0x124ac	; 0x124ac <dtostrf>
    68f0:	e0 91 b5 0c 	lds	r30, 0x0CB5	; 0x800cb5 <Metric>
    68f4:	f0 91 b6 0c 	lds	r31, 0x0CB6	; 0x800cb6 <Metric+0x1>
    68f8:	80 81       	ld	r24, Z
    68fa:	88 23       	and	r24, r24
    68fc:	51 f0       	breq	.+20     	; 0x6912 <toText_pressure(float)+0x32>
    68fe:	63 e8       	ldi	r22, 0x83	; 131
    6900:	7d e0       	ldi	r23, 0x0D	; 13
    6902:	c8 01       	movw	r24, r16
    6904:	0e 94 da 94 	call	0x129b4	; 0x129b4 <strcat_P>
    6908:	81 eb       	ldi	r24, 0xB1	; 177
    690a:	9d e0       	ldi	r25, 0x0D	; 13
    690c:	1f 91       	pop	r17
    690e:	0f 91       	pop	r16
    6910:	08 95       	ret
    6912:	6f e7       	ldi	r22, 0x7F	; 127
    6914:	7d e0       	ldi	r23, 0x0D	; 13
    6916:	81 eb       	ldi	r24, 0xB1	; 177
    6918:	9d e0       	ldi	r25, 0x0D	; 13
    691a:	f4 cf       	rjmp	.-24     	; 0x6904 <toText_pressure(float)+0x24>

0000691c <toText_weight(float)>:
_Z13toText_weightf():
    691c:	0f 93       	push	r16
    691e:	1f 93       	push	r17
    6920:	01 eb       	ldi	r16, 0xB1	; 177
    6922:	1d e0       	ldi	r17, 0x0D	; 13
    6924:	22 e0       	ldi	r18, 0x02	; 2
    6926:	44 e0       	ldi	r20, 0x04	; 4
    6928:	0e 94 56 92 	call	0x124ac	; 0x124ac <dtostrf>
    692c:	e0 91 b5 0c 	lds	r30, 0x0CB5	; 0x800cb5 <Metric>
    6930:	f0 91 b6 0c 	lds	r31, 0x0CB6	; 0x800cb6 <Metric+0x1>
    6934:	80 81       	ld	r24, Z
    6936:	88 23       	and	r24, r24
    6938:	51 f0       	breq	.+20     	; 0x694e <toText_weight(float)+0x32>
    693a:	6c e7       	ldi	r22, 0x7C	; 124
    693c:	7d e0       	ldi	r23, 0x0D	; 13
    693e:	c8 01       	movw	r24, r16
    6940:	0e 94 da 94 	call	0x129b4	; 0x129b4 <strcat_P>
    6944:	81 eb       	ldi	r24, 0xB1	; 177
    6946:	9d e0       	ldi	r25, 0x0D	; 13
    6948:	1f 91       	pop	r17
    694a:	0f 91       	pop	r16
    694c:	08 95       	ret
    694e:	68 e7       	ldi	r22, 0x78	; 120
    6950:	7d e0       	ldi	r23, 0x0D	; 13
    6952:	81 eb       	ldi	r24, 0xB1	; 177
    6954:	9d e0       	ldi	r25, 0x0D	; 13
    6956:	f4 cf       	rjmp	.-24     	; 0x6940 <toText_weight(float)+0x24>

00006958 <toText_percentage(float)>:
_Z17toText_percentagef():
    6958:	0f 93       	push	r16
    695a:	1f 93       	push	r17
    695c:	01 eb       	ldi	r16, 0xB1	; 177
    695e:	1d e0       	ldi	r17, 0x0D	; 13
    6960:	22 e0       	ldi	r18, 0x02	; 2
    6962:	44 e0       	ldi	r20, 0x04	; 4
    6964:	0e 94 56 92 	call	0x124ac	; 0x124ac <dtostrf>
    6968:	66 e7       	ldi	r22, 0x76	; 118
    696a:	7d e0       	ldi	r23, 0x0D	; 13
    696c:	c8 01       	movw	r24, r16
    696e:	0e 94 da 94 	call	0x129b4	; 0x129b4 <strcat_P>
    6972:	c8 01       	movw	r24, r16
    6974:	1f 91       	pop	r17
    6976:	0f 91       	pop	r16
    6978:	08 95       	ret

0000697a <toText_second(int)>:
_Z13toText_secondi():
    697a:	4a e0       	ldi	r20, 0x0A	; 10
    697c:	61 eb       	ldi	r22, 0xB1	; 177
    697e:	7d e0       	ldi	r23, 0x0D	; 13
    6980:	0e 94 4d 95 	call	0x12a9a	; 0x12a9a <__itoa_ncheck>
    6984:	62 e7       	ldi	r22, 0x72	; 114
    6986:	7d e0       	ldi	r23, 0x0D	; 13
    6988:	81 eb       	ldi	r24, 0xB1	; 177
    698a:	9d e0       	ldi	r25, 0x0D	; 13
    698c:	0e 94 da 94 	call	0x129b4	; 0x129b4 <strcat_P>
    6990:	81 eb       	ldi	r24, 0xB1	; 177
    6992:	9d e0       	ldi	r25, 0x0D	; 13
    6994:	08 95       	ret

00006996 <toText_TDS(float)>:
_Z10toText_TDSf():
    6996:	0f 93       	push	r16
    6998:	1f 93       	push	r17
    699a:	01 eb       	ldi	r16, 0xB1	; 177
    699c:	1d e0       	ldi	r17, 0x0D	; 13
    699e:	22 e0       	ldi	r18, 0x02	; 2
    69a0:	44 e0       	ldi	r20, 0x04	; 4
    69a2:	0e 94 56 92 	call	0x124ac	; 0x124ac <dtostrf>
    69a6:	6e e6       	ldi	r22, 0x6E	; 110
    69a8:	7d e0       	ldi	r23, 0x0D	; 13
    69aa:	c8 01       	movw	r24, r16
    69ac:	0e 94 da 94 	call	0x129b4	; 0x129b4 <strcat_P>
    69b0:	c8 01       	movw	r24, r16
    69b2:	1f 91       	pop	r17
    69b4:	0f 91       	pop	r16
    69b6:	08 95       	ret

000069b8 <toText_yesNo(bool)>:
_Z6toTextPK19__FlashStringHelper():
    69b8:	6a e6       	ldi	r22, 0x6A	; 106
    69ba:	7d e0       	ldi	r23, 0x0D	; 13
_Z12toText_yesNob():
    69bc:	81 11       	cpse	r24, r1
    69be:	02 c0       	rjmp	.+4      	; 0x69c4 <toText_yesNo(bool)+0xc>
_Z6toTextPK19__FlashStringHelper():
    69c0:	67 e6       	ldi	r22, 0x67	; 103
    69c2:	7d e0       	ldi	r23, 0x0D	; 13
    69c4:	81 eb       	ldi	r24, 0xB1	; 177
    69c6:	9d e0       	ldi	r25, 0x0D	; 13
    69c8:	0e 94 ee 94 	call	0x129dc	; 0x129dc <strcpy_P>
_Z12toText_yesNob():
    69cc:	81 eb       	ldi	r24, 0xB1	; 177
    69ce:	9d e0       	ldi	r25, 0x0D	; 13
    69d0:	08 95       	ret

000069d2 <toText_enabledDisabled(bool)>:
_Z6toTextPK19__FlashStringHelper():
    69d2:	6f e5       	ldi	r22, 0x5F	; 95
    69d4:	7d e0       	ldi	r23, 0x0D	; 13
_Z22toText_enabledDisabledb():
    69d6:	81 11       	cpse	r24, r1
    69d8:	02 c0       	rjmp	.+4      	; 0x69de <toText_enabledDisabled(bool)+0xc>
_Z6toTextPK19__FlashStringHelper():
    69da:	66 e5       	ldi	r22, 0x56	; 86
    69dc:	7d e0       	ldi	r23, 0x0D	; 13
    69de:	81 eb       	ldi	r24, 0xB1	; 177
    69e0:	9d e0       	ldi	r25, 0x0D	; 13
    69e2:	0e 94 ee 94 	call	0x129dc	; 0x129dc <strcpy_P>
_Z22toText_enabledDisabledb():
    69e6:	81 eb       	ldi	r24, 0xB1	; 177
    69e8:	9d e0       	ldi	r25, 0x0D	; 13
    69ea:	08 95       	ret

000069ec <toText_onOff(bool)>:
_Z6toTextPK19__FlashStringHelper():
    69ec:	63 e5       	ldi	r22, 0x53	; 83
    69ee:	7d e0       	ldi	r23, 0x0D	; 13
_Z12toText_onOffb():
    69f0:	81 11       	cpse	r24, r1
    69f2:	02 c0       	rjmp	.+4      	; 0x69f8 <toText_onOff(bool)+0xc>
_Z6toTextPK19__FlashStringHelper():
    69f4:	6f e4       	ldi	r22, 0x4F	; 79
    69f6:	7d e0       	ldi	r23, 0x0D	; 13
    69f8:	81 eb       	ldi	r24, 0xB1	; 177
    69fa:	9d e0       	ldi	r25, 0x0D	; 13
    69fc:	0e 94 ee 94 	call	0x129dc	; 0x129dc <strcpy_P>
_Z12toText_onOffb():
    6a00:	81 eb       	ldi	r24, 0xB1	; 177
    6a02:	9d e0       	ldi	r25, 0x0D	; 13
    6a04:	08 95       	ret

00006a06 <toText_onlineStatus(bool)>:
_Z6toTextPK19__FlashStringHelper():
    6a06:	68 e4       	ldi	r22, 0x48	; 72
    6a08:	7d e0       	ldi	r23, 0x0D	; 13
_Z19toText_onlineStatusb():
    6a0a:	81 11       	cpse	r24, r1
    6a0c:	02 c0       	rjmp	.+4      	; 0x6a12 <toText_onlineStatus(bool)+0xc>
_Z6toTextPK19__FlashStringHelper():
    6a0e:	60 e4       	ldi	r22, 0x40	; 64
    6a10:	7d e0       	ldi	r23, 0x0D	; 13
    6a12:	81 eb       	ldi	r24, 0xB1	; 177
    6a14:	9d e0       	ldi	r25, 0x0D	; 13
    6a16:	0e 94 ee 94 	call	0x129dc	; 0x129dc <strcpy_P>
_Z19toText_onlineStatusb():
    6a1a:	81 eb       	ldi	r24, 0xB1	; 177
    6a1c:	9d e0       	ldi	r25, 0x0D	; 13
    6a1e:	08 95       	ret

00006a20 <toBool(char*)>:
_Z6toBoolPc():
    6a20:	cf 93       	push	r28
    6a22:	df 93       	push	r29
    6a24:	ec 01       	movw	r28, r24
    6a26:	6d e3       	ldi	r22, 0x3D	; 61
    6a28:	7d e0       	ldi	r23, 0x0D	; 13
    6a2a:	0e 94 e5 94 	call	0x129ca	; 0x129ca <strcmp_P>
    6a2e:	89 2b       	or	r24, r25
    6a30:	d9 f0       	breq	.+54     	; 0x6a68 <toBool(char*)+0x48>
    6a32:	6b e3       	ldi	r22, 0x3B	; 59
    6a34:	7d e0       	ldi	r23, 0x0D	; 13
    6a36:	ce 01       	movw	r24, r28
    6a38:	0e 94 e5 94 	call	0x129ca	; 0x129ca <strcmp_P>
    6a3c:	89 2b       	or	r24, r25
    6a3e:	a1 f0       	breq	.+40     	; 0x6a68 <toBool(char*)+0x48>
    6a40:	66 e3       	ldi	r22, 0x36	; 54
    6a42:	7d e0       	ldi	r23, 0x0D	; 13
    6a44:	ce 01       	movw	r24, r28
    6a46:	0e 94 e5 94 	call	0x129ca	; 0x129ca <strcmp_P>
    6a4a:	89 2b       	or	r24, r25
    6a4c:	69 f0       	breq	.+26     	; 0x6a68 <toBool(char*)+0x48>
    6a4e:	62 e3       	ldi	r22, 0x32	; 50
    6a50:	7d e0       	ldi	r23, 0x0D	; 13
    6a52:	ce 01       	movw	r24, r28
    6a54:	0e 94 e5 94 	call	0x129ca	; 0x129ca <strcmp_P>
    6a58:	21 e0       	ldi	r18, 0x01	; 1
    6a5a:	89 2b       	or	r24, r25
    6a5c:	09 f0       	breq	.+2      	; 0x6a60 <toBool(char*)+0x40>
    6a5e:	20 e0       	ldi	r18, 0x00	; 0
    6a60:	82 2f       	mov	r24, r18
    6a62:	df 91       	pop	r29
    6a64:	cf 91       	pop	r28
    6a66:	08 95       	ret
    6a68:	21 e0       	ldi	r18, 0x01	; 1
    6a6a:	fa cf       	rjmp	.-12     	; 0x6a60 <toBool(char*)+0x40>

00006a6c <toInt(char*)>:
_Z5toIntPc():
    6a6c:	0c 94 83 94 	jmp	0x12906	; 0x12906 <atoi>

00006a70 <toFloat(char*)>:
_Z7toFloatPc():
    6a70:	0c 94 7f 94 	jmp	0x128fe	; 0x128fe <atof>

00006a74 <toText_waterPumpState(WaterPumpStates)>:
_Z6toTextPK19__FlashStringHelper():
    6a74:	64 e2       	ldi	r22, 0x24	; 36
    6a76:	7d e0       	ldi	r23, 0x0D	; 13
_Z21toText_waterPumpState15WaterPumpStates():
    6a78:	81 30       	cpi	r24, 0x01	; 1
    6a7a:	91 05       	cpc	r25, r1
    6a7c:	59 f0       	breq	.+22     	; 0x6a94 <toText_waterPumpState(WaterPumpStates)+0x20>
_Z6toTextPK19__FlashStringHelper():
    6a7e:	6c e1       	ldi	r22, 0x1C	; 28
    6a80:	7d e0       	ldi	r23, 0x0D	; 13
_Z21toText_waterPumpState15WaterPumpStates():
    6a82:	82 30       	cpi	r24, 0x02	; 2
    6a84:	91 05       	cpc	r25, r1
    6a86:	31 f0       	breq	.+12     	; 0x6a94 <toText_waterPumpState(WaterPumpStates)+0x20>
_Z6toTextPK19__FlashStringHelper():
    6a88:	69 e2       	ldi	r22, 0x29	; 41
    6a8a:	7d e0       	ldi	r23, 0x0D	; 13
_Z21toText_waterPumpState15WaterPumpStates():
    6a8c:	89 2b       	or	r24, r25
    6a8e:	11 f0       	breq	.+4      	; 0x6a94 <toText_waterPumpState(WaterPumpStates)+0x20>
_Z6toTextPK19__FlashStringHelper():
    6a90:	6a e1       	ldi	r22, 0x1A	; 26
    6a92:	7d e0       	ldi	r23, 0x0D	; 13
    6a94:	81 eb       	ldi	r24, 0xB1	; 177
    6a96:	9d e0       	ldi	r25, 0x0D	; 13
    6a98:	0e 94 ee 94 	call	0x129dc	; 0x129dc <strcpy_P>
_Z21toText_waterPumpState15WaterPumpStates():
    6a9c:	81 eb       	ldi	r24, 0xB1	; 177
    6a9e:	9d e0       	ldi	r25, 0x0D	; 13
    6aa0:	08 95       	ret

00006aa2 <toText_pressurePumpState(PressurePumpStates)>:
_Z6toTextPK19__FlashStringHelper():
b:\Gbox420\Gbox420\Gbox420_Mega_Main\build\sketch\src/Helpers.cpp:34

///< Text formating

char *toText(const __FlashStringHelper *FlashText)
{ ///< Not every external library supports __FlashStringHelper class. This converts flash stored text to ram stored char *
  strcpy_P(ShortMessage, (PGM_P)FlashText);
    6aa2:	67 ed       	ldi	r22, 0xD7	; 215
    6aa4:	7c e0       	ldi	r23, 0x0C	; 12
_Z24toText_pressurePumpState18PressurePumpStates():
b:\Gbox420\Gbox420\Gbox420_Mega_Main\build\sketch\src/Helpers.cpp:328
  }
}

char *toText_pressurePumpState(PressurePumpStates State)
{
  switch (State)
    6aa6:	88 30       	cpi	r24, 0x08	; 8
    6aa8:	91 05       	cpc	r25, r1
    6aaa:	88 f4       	brcc	.+34     	; 0x6ace <toText_pressurePumpState(PressurePumpStates)+0x2c>
    6aac:	fc 01       	movw	r30, r24
    6aae:	88 27       	eor	r24, r24
    6ab0:	e3 5a       	subi	r30, 0xA3	; 163
    6ab2:	fa 4c       	sbci	r31, 0xCA	; 202
    6ab4:	8f 4f       	sbci	r24, 0xFF	; 255
    6ab6:	0c 94 2b 92 	jmp	0x12456	; 0x12456 <__tablejump2__>
    6aba:	65 35       	cpi	r22, 0x55	; 85
    6abc:	6e 35       	cpi	r22, 0x5E	; 94
    6abe:	71 35       	cpi	r23, 0x51	; 81
    6ac0:	74 35       	cpi	r23, 0x54	; 84
    6ac2:	77 35       	cpi	r23, 0x57	; 87
    6ac4:	7a 35       	cpi	r23, 0x5A	; 90
    6ac6:	7d 35       	cpi	r23, 0x5D	; 93
    6ac8:	80 35       	cpi	r24, 0x50	; 80
_Z6toTextPK19__FlashStringHelper():
b:\Gbox420\Gbox420\Gbox420_Mega_Main\build\sketch\src/Helpers.cpp:34

///< Text formating

char *toText(const __FlashStringHelper *FlashText)
{ ///< Not every external library supports __FlashStringHelper class. This converts flash stored text to ram stored char *
  strcpy_P(ShortMessage, (PGM_P)FlashText);
    6aca:	61 e1       	ldi	r22, 0x11	; 17
    6acc:	7d e0       	ldi	r23, 0x0D	; 13
    6ace:	81 eb       	ldi	r24, 0xB1	; 177
    6ad0:	9d e0       	ldi	r25, 0x0D	; 13
    6ad2:	0e 94 ee 94 	call	0x129dc	; 0x129dc <strcpy_P>
_Z24toText_pressurePumpState18PressurePumpStates():
b:\Gbox420\Gbox420\Gbox420_Mega_Main\build\sketch\src/Helpers.cpp:358
    break;
  default:
    return toText(F("?"));
    break;
  }
}
    6ad6:	81 eb       	ldi	r24, 0xB1	; 177
    6ad8:	9d e0       	ldi	r25, 0x0D	; 13
    6ada:	08 95       	ret
_Z6toTextPK19__FlashStringHelper():
b:\Gbox420\Gbox420\Gbox420_Mega_Main\build\sketch\src/Helpers.cpp:34

///< Text formating

char *toText(const __FlashStringHelper *FlashText)
{ ///< Not every external library supports __FlashStringHelper class. This converts flash stored text to ram stored char *
  strcpy_P(ShortMessage, (PGM_P)FlashText);
    6adc:	6c e0       	ldi	r22, 0x0C	; 12
    6ade:	7d e0       	ldi	r23, 0x0D	; 13
    6ae0:	f6 cf       	rjmp	.-20     	; 0x6ace <toText_pressurePumpState(PressurePumpStates)+0x2c>
    6ae2:	64 e0       	ldi	r22, 0x04	; 4
    6ae4:	7d e0       	ldi	r23, 0x0D	; 13
    6ae6:	f3 cf       	rjmp	.-26     	; 0x6ace <toText_pressurePumpState(PressurePumpStates)+0x2c>
    6ae8:	6c ef       	ldi	r22, 0xFC	; 252
    6aea:	7c e0       	ldi	r23, 0x0C	; 12
    6aec:	f0 cf       	rjmp	.-32     	; 0x6ace <toText_pressurePumpState(PressurePumpStates)+0x2c>
    6aee:	64 ef       	ldi	r22, 0xF4	; 244
    6af0:	7c e0       	ldi	r23, 0x0C	; 12
    6af2:	ed cf       	rjmp	.-38     	; 0x6ace <toText_pressurePumpState(PressurePumpStates)+0x2c>
    6af4:	60 ef       	ldi	r22, 0xF0	; 240
    6af6:	7c e0       	ldi	r23, 0x0C	; 12
    6af8:	ea cf       	rjmp	.-44     	; 0x6ace <toText_pressurePumpState(PressurePumpStates)+0x2c>
    6afa:	64 ee       	ldi	r22, 0xE4	; 228
    6afc:	7c e0       	ldi	r23, 0x0C	; 12
    6afe:	e7 cf       	rjmp	.-50     	; 0x6ace <toText_pressurePumpState(PressurePumpStates)+0x2c>
    6b00:	69 ed       	ldi	r22, 0xD9	; 217
    6b02:	7c e0       	ldi	r23, 0x0C	; 12
    6b04:	e4 cf       	rjmp	.-56     	; 0x6ace <toText_pressurePumpState(PressurePumpStates)+0x2c>

00006b06 <toText_aeroTankState(AeroTankStates)>:
    6b06:	6e e9       	ldi	r22, 0x9E	; 158
    6b08:	7c e0       	ldi	r23, 0x0C	; 12
_Z20toText_aeroTankState14AeroTankStates():
b:\Gbox420\Gbox420\Gbox420_Mega_Main\build\sketch\src/Helpers.cpp:362
  }
}

char *toText_aeroTankState(AeroTankStates State)
{
  switch (State)
    6b0a:	88 30       	cpi	r24, 0x08	; 8
    6b0c:	91 05       	cpc	r25, r1
    6b0e:	88 f4       	brcc	.+34     	; 0x6b32 <toText_aeroTankState(AeroTankStates)+0x2c>
    6b10:	fc 01       	movw	r30, r24
    6b12:	88 27       	eor	r24, r24
    6b14:	e1 57       	subi	r30, 0x71	; 113
    6b16:	fa 4c       	sbci	r31, 0xCA	; 202
    6b18:	8f 4f       	sbci	r24, 0xFF	; 255
    6b1a:	0c 94 2b 92 	jmp	0x12456	; 0x12456 <__tablejump2__>
    6b1e:	97 35       	cpi	r25, 0x57	; 87
    6b20:	a0 35       	cpi	r26, 0x50	; 80
    6b22:	a3 35       	cpi	r26, 0x53	; 83
    6b24:	a6 35       	cpi	r26, 0x56	; 86
    6b26:	a9 35       	cpi	r26, 0x59	; 89
    6b28:	ac 35       	cpi	r26, 0x5C	; 92
    6b2a:	af 35       	cpi	r26, 0x5F	; 95
    6b2c:	b2 35       	cpi	r27, 0x52	; 82
_Z6toTextPK19__FlashStringHelper():
b:\Gbox420\Gbox420\Gbox420_Mega_Main\build\sketch\src/Helpers.cpp:34

///< Text formating

char *toText(const __FlashStringHelper *FlashText)
{ ///< Not every external library supports __FlashStringHelper class. This converts flash stored text to ram stored char *
  strcpy_P(ShortMessage, (PGM_P)FlashText);
    6b2e:	6e ec       	ldi	r22, 0xCE	; 206
    6b30:	7c e0       	ldi	r23, 0x0C	; 12
    6b32:	81 eb       	ldi	r24, 0xB1	; 177
    6b34:	9d e0       	ldi	r25, 0x0D	; 13
    6b36:	0e 94 ee 94 	call	0x129dc	; 0x129dc <strcpy_P>
_Z20toText_aeroTankState14AeroTankStates():
b:\Gbox420\Gbox420\Gbox420_Mega_Main\build\sketch\src/Helpers.cpp:392
    break;
  default:
    return toText(F("?"));
    break;
  }
}
    6b3a:	81 eb       	ldi	r24, 0xB1	; 177
    6b3c:	9d e0       	ldi	r25, 0x0D	; 13
    6b3e:	08 95       	ret
_Z6toTextPK19__FlashStringHelper():
b:\Gbox420\Gbox420\Gbox420_Mega_Main\build\sketch\src/Helpers.cpp:34

///< Text formating

char *toText(const __FlashStringHelper *FlashText)
{ ///< Not every external library supports __FlashStringHelper class. This converts flash stored text to ram stored char *
  strcpy_P(ShortMessage, (PGM_P)FlashText);
    6b40:	69 ec       	ldi	r22, 0xC9	; 201
    6b42:	7c e0       	ldi	r23, 0x0C	; 12
    6b44:	f6 cf       	rjmp	.-20     	; 0x6b32 <toText_aeroTankState(AeroTankStates)+0x2c>
    6b46:	63 ec       	ldi	r22, 0xC3	; 195
    6b48:	7c e0       	ldi	r23, 0x0C	; 12
    6b4a:	f3 cf       	rjmp	.-26     	; 0x6b32 <toText_aeroTankState(AeroTankStates)+0x2c>
    6b4c:	69 eb       	ldi	r22, 0xB9	; 185
    6b4e:	7c e0       	ldi	r23, 0x0C	; 12
    6b50:	f0 cf       	rjmp	.-32     	; 0x6b32 <toText_aeroTankState(AeroTankStates)+0x2c>
    6b52:	61 eb       	ldi	r22, 0xB1	; 177
    6b54:	7c e0       	ldi	r23, 0x0C	; 12
    6b56:	ed cf       	rjmp	.-38     	; 0x6b32 <toText_aeroTankState(AeroTankStates)+0x2c>
    6b58:	6a ea       	ldi	r22, 0xAA	; 170
    6b5a:	7c e0       	ldi	r23, 0x0C	; 12
    6b5c:	ea cf       	rjmp	.-44     	; 0x6b32 <toText_aeroTankState(AeroTankStates)+0x2c>
    6b5e:	64 ea       	ldi	r22, 0xA4	; 164
    6b60:	7c e0       	ldi	r23, 0x0C	; 12
    6b62:	e7 cf       	rjmp	.-50     	; 0x6b32 <toText_aeroTankState(AeroTankStates)+0x2c>
    6b64:	60 ea       	ldi	r22, 0xA0	; 160
    6b66:	7c e0       	ldi	r23, 0x0C	; 12
    6b68:	e4 cf       	rjmp	.-56     	; 0x6b32 <toText_aeroTankState(AeroTankStates)+0x2c>

00006b6a <toText_aeroNoTankState(AeroNoTankStates)>:
    6b6a:	6d e8       	ldi	r22, 0x8D	; 141
    6b6c:	7c e0       	ldi	r23, 0x0C	; 12
_Z22toText_aeroNoTankState16AeroNoTankStates():
b:\Gbox420\Gbox420\Gbox420_Mega_Main\build\sketch\src/Helpers.cpp:396
  }
}

char *toText_aeroNoTankState(AeroNoTankStates State)
{
  switch (State)
    6b6e:	82 30       	cpi	r24, 0x02	; 2
    6b70:	91 05       	cpc	r25, r1
    6b72:	d1 f0       	breq	.+52     	; 0x6ba8 <toText_aeroNoTankState(AeroNoTankStates)+0x3e>
    6b74:	5c f4       	brge	.+22     	; 0x6b8c <toText_aeroNoTankState(AeroNoTankStates)+0x22>
_Z6toTextPK19__FlashStringHelper():
b:\Gbox420\Gbox420\Gbox420_Mega_Main\build\sketch\src/Helpers.cpp:34

///< Text formating

char *toText(const __FlashStringHelper *FlashText)
{ ///< Not every external library supports __FlashStringHelper class. This converts flash stored text to ram stored char *
  strcpy_P(ShortMessage, (PGM_P)FlashText);
    6b76:	65 e9       	ldi	r22, 0x95	; 149
    6b78:	7c e0       	ldi	r23, 0x0C	; 12
_Z22toText_aeroNoTankState16AeroNoTankStates():
b:\Gbox420\Gbox420\Gbox420_Mega_Main\build\sketch\src/Helpers.cpp:396
  }
}

char *toText_aeroNoTankState(AeroNoTankStates State)
{
  switch (State)
    6b7a:	00 97       	sbiw	r24, 0x00	; 0
    6b7c:	a9 f0       	breq	.+42     	; 0x6ba8 <toText_aeroNoTankState(AeroNoTankStates)+0x3e>
_Z6toTextPK19__FlashStringHelper():
b:\Gbox420\Gbox420\Gbox420_Mega_Main\build\sketch\src/Helpers.cpp:34

///< Text formating

char *toText(const __FlashStringHelper *FlashText)
{ ///< Not every external library supports __FlashStringHelper class. This converts flash stored text to ram stored char *
  strcpy_P(ShortMessage, (PGM_P)FlashText);
    6b7e:	68 e8       	ldi	r22, 0x88	; 136
    6b80:	7c e0       	ldi	r23, 0x0C	; 12
_Z22toText_aeroNoTankState16AeroNoTankStates():
b:\Gbox420\Gbox420\Gbox420_Mega_Main\build\sketch\src/Helpers.cpp:396
  }
}

char *toText_aeroNoTankState(AeroNoTankStates State)
{
  switch (State)
    6b82:	01 97       	sbiw	r24, 0x01	; 1
    6b84:	89 f0       	breq	.+34     	; 0x6ba8 <toText_aeroNoTankState(AeroNoTankStates)+0x3e>
_Z6toTextPK19__FlashStringHelper():
b:\Gbox420\Gbox420\Gbox420_Mega_Main\build\sketch\src/Helpers.cpp:34

///< Text formating

char *toText(const __FlashStringHelper *FlashText)
{ ///< Not every external library supports __FlashStringHelper class. This converts flash stored text to ram stored char *
  strcpy_P(ShortMessage, (PGM_P)FlashText);
    6b86:	64 e7       	ldi	r22, 0x74	; 116
    6b88:	7c e0       	ldi	r23, 0x0C	; 12
    6b8a:	0e c0       	rjmp	.+28     	; 0x6ba8 <toText_aeroNoTankState(AeroNoTankStates)+0x3e>
    6b8c:	6a e7       	ldi	r22, 0x7A	; 122
    6b8e:	7c e0       	ldi	r23, 0x0C	; 12
_Z22toText_aeroNoTankState16AeroNoTankStates():
b:\Gbox420\Gbox420\Gbox420_Mega_Main\build\sketch\src/Helpers.cpp:396
  }
}

char *toText_aeroNoTankState(AeroNoTankStates State)
{
  switch (State)
    6b90:	84 30       	cpi	r24, 0x04	; 4
    6b92:	91 05       	cpc	r25, r1
    6b94:	49 f0       	breq	.+18     	; 0x6ba8 <toText_aeroNoTankState(AeroNoTankStates)+0x3e>
_Z6toTextPK19__FlashStringHelper():
b:\Gbox420\Gbox420\Gbox420_Mega_Main\build\sketch\src/Helpers.cpp:34

///< Text formating

char *toText(const __FlashStringHelper *FlashText)
{ ///< Not every external library supports __FlashStringHelper class. This converts flash stored text to ram stored char *
  strcpy_P(ShortMessage, (PGM_P)FlashText);
    6b96:	62 e8       	ldi	r22, 0x82	; 130
    6b98:	7c e0       	ldi	r23, 0x0C	; 12
_Z22toText_aeroNoTankState16AeroNoTankStates():
b:\Gbox420\Gbox420\Gbox420_Mega_Main\build\sketch\src/Helpers.cpp:396
  }
}

char *toText_aeroNoTankState(AeroNoTankStates State)
{
  switch (State)
    6b9a:	84 30       	cpi	r24, 0x04	; 4
    6b9c:	91 05       	cpc	r25, r1
    6b9e:	24 f0       	brlt	.+8      	; 0x6ba8 <toText_aeroNoTankState(AeroNoTankStates)+0x3e>
_Z6toTextPK19__FlashStringHelper():
b:\Gbox420\Gbox420\Gbox420_Mega_Main\build\sketch\src/Helpers.cpp:34

///< Text formating

char *toText(const __FlashStringHelper *FlashText)
{ ///< Not every external library supports __FlashStringHelper class. This converts flash stored text to ram stored char *
  strcpy_P(ShortMessage, (PGM_P)FlashText);
    6ba0:	66 e7       	ldi	r22, 0x76	; 118
    6ba2:	7c e0       	ldi	r23, 0x0C	; 12
_Z22toText_aeroNoTankState16AeroNoTankStates():
b:\Gbox420\Gbox420\Gbox420_Mega_Main\build\sketch\src/Helpers.cpp:396
  }
}

char *toText_aeroNoTankState(AeroNoTankStates State)
{
  switch (State)
    6ba4:	05 97       	sbiw	r24, 0x05	; 5
    6ba6:	79 f7       	brne	.-34     	; 0x6b86 <toText_aeroNoTankState(AeroNoTankStates)+0x1c>
_Z6toTextPK19__FlashStringHelper():
b:\Gbox420\Gbox420\Gbox420_Mega_Main\build\sketch\src/Helpers.cpp:34

///< Text formating

char *toText(const __FlashStringHelper *FlashText)
{ ///< Not every external library supports __FlashStringHelper class. This converts flash stored text to ram stored char *
  strcpy_P(ShortMessage, (PGM_P)FlashText);
    6ba8:	81 eb       	ldi	r24, 0xB1	; 177
    6baa:	9d e0       	ldi	r25, 0x0D	; 13
    6bac:	0e 94 ee 94 	call	0x129dc	; 0x129dc <strcpy_P>
_Z22toText_aeroNoTankState16AeroNoTankStates():
b:\Gbox420\Gbox420\Gbox420_Mega_Main\build\sketch\src/Helpers.cpp:420
    break;
  default:
    return toText(F("?"));
    break;
  }
}
    6bb0:	81 eb       	ldi	r24, 0xB1	; 177
    6bb2:	9d e0       	ldi	r25, 0x0D	; 13
    6bb4:	08 95       	ret

00006bb6 <toText_hempyState(HempyStates)>:
_Z6toTextPK19__FlashStringHelper():
b:\Gbox420\Gbox420\Gbox420_Mega_Main\build\sketch\src/Helpers.cpp:34

///< Text formating

char *toText(const __FlashStringHelper *FlashText)
{ ///< Not every external library supports __FlashStringHelper class. This converts flash stored text to ram stored char *
  strcpy_P(ShortMessage, (PGM_P)FlashText);
    6bb6:	66 e6       	ldi	r22, 0x66	; 102
    6bb8:	7c e0       	ldi	r23, 0x0C	; 12
_Z17toText_hempyState11HempyStates():
b:\Gbox420\Gbox420\Gbox420_Mega_Main\build\sketch\src/Helpers.cpp:424
  }
}

char *toText_hempyState(HempyStates State)
{
  switch (State)
    6bba:	81 30       	cpi	r24, 0x01	; 1
    6bbc:	91 05       	cpc	r25, r1
    6bbe:	89 f0       	breq	.+34     	; 0x6be2 <toText_hempyState(HempyStates)+0x2c>
    6bc0:	3c f4       	brge	.+14     	; 0x6bd0 <toText_hempyState(HempyStates)+0x1a>
_Z6toTextPK19__FlashStringHelper():
b:\Gbox420\Gbox420\Gbox420_Mega_Main\build\sketch\src/Helpers.cpp:34

///< Text formating

char *toText(const __FlashStringHelper *FlashText)
{ ///< Not every external library supports __FlashStringHelper class. This converts flash stored text to ram stored char *
  strcpy_P(ShortMessage, (PGM_P)FlashText);
    6bc2:	6b e6       	ldi	r22, 0x6B	; 107
    6bc4:	7c e0       	ldi	r23, 0x0C	; 12
_Z17toText_hempyState11HempyStates():
b:\Gbox420\Gbox420\Gbox420_Mega_Main\build\sketch\src/Helpers.cpp:424
  }
}

char *toText_hempyState(HempyStates State)
{
  switch (State)
    6bc6:	89 2b       	or	r24, r25
    6bc8:	61 f0       	breq	.+24     	; 0x6be2 <toText_hempyState(HempyStates)+0x2c>
_Z6toTextPK19__FlashStringHelper():
b:\Gbox420\Gbox420\Gbox420_Mega_Main\build\sketch\src/Helpers.cpp:34

///< Text formating

char *toText(const __FlashStringHelper *FlashText)
{ ///< Not every external library supports __FlashStringHelper class. This converts flash stored text to ram stored char *
  strcpy_P(ShortMessage, (PGM_P)FlashText);
    6bca:	62 e5       	ldi	r22, 0x52	; 82
    6bcc:	7c e0       	ldi	r23, 0x0C	; 12
    6bce:	09 c0       	rjmp	.+18     	; 0x6be2 <toText_hempyState(HempyStates)+0x2c>
    6bd0:	6d e5       	ldi	r22, 0x5D	; 93
    6bd2:	7c e0       	ldi	r23, 0x0C	; 12
_Z17toText_hempyState11HempyStates():
b:\Gbox420\Gbox420\Gbox420_Mega_Main\build\sketch\src/Helpers.cpp:424
  }
}

char *toText_hempyState(HempyStates State)
{
  switch (State)
    6bd4:	82 30       	cpi	r24, 0x02	; 2
    6bd6:	91 05       	cpc	r25, r1
    6bd8:	21 f0       	breq	.+8      	; 0x6be2 <toText_hempyState(HempyStates)+0x2c>
_Z6toTextPK19__FlashStringHelper():
b:\Gbox420\Gbox420\Gbox420_Mega_Main\build\sketch\src/Helpers.cpp:34

///< Text formating

char *toText(const __FlashStringHelper *FlashText)
{ ///< Not every external library supports __FlashStringHelper class. This converts flash stored text to ram stored char *
  strcpy_P(ShortMessage, (PGM_P)FlashText);
    6bda:	64 e5       	ldi	r22, 0x54	; 84
    6bdc:	7c e0       	ldi	r23, 0x0C	; 12
_Z17toText_hempyState11HempyStates():
b:\Gbox420\Gbox420\Gbox420_Mega_Main\build\sketch\src/Helpers.cpp:424
  }
}

char *toText_hempyState(HempyStates State)
{
  switch (State)
    6bde:	03 97       	sbiw	r24, 0x03	; 3
    6be0:	a1 f7       	brne	.-24     	; 0x6bca <toText_hempyState(HempyStates)+0x14>
_Z6toTextPK19__FlashStringHelper():
b:\Gbox420\Gbox420\Gbox420_Mega_Main\build\sketch\src/Helpers.cpp:34

///< Text formating

char *toText(const __FlashStringHelper *FlashText)
{ ///< Not every external library supports __FlashStringHelper class. This converts flash stored text to ram stored char *
  strcpy_P(ShortMessage, (PGM_P)FlashText);
    6be2:	81 eb       	ldi	r24, 0xB1	; 177
    6be4:	9d e0       	ldi	r25, 0x0D	; 13
    6be6:	0e 94 ee 94 	call	0x129dc	; 0x129dc <strcpy_P>
_Z17toText_hempyState11HempyStates():
b:\Gbox420\Gbox420\Gbox420_Mega_Main\build\sketch\src/Helpers.cpp:442
    break;
  default:
    return toText(F("?"));
    break;
  }
}
    6bea:	81 eb       	ldi	r24, 0xB1	; 177
    6bec:	9d e0       	ldi	r25, 0x0D	; 13
    6bee:	08 95       	ret

00006bf0 <toText_lightState(LightStates)>:
_Z6toTextPK19__FlashStringHelper():
b:\Gbox420\Gbox420\Gbox420_Mega_Main\build\sketch\src/Helpers.cpp:34

///< Text formating

char *toText(const __FlashStringHelper *FlashText)
{ ///< Not every external library supports __FlashStringHelper class. This converts flash stored text to ram stored char *
  strcpy_P(ShortMessage, (PGM_P)FlashText);
    6bf0:	64 e4       	ldi	r22, 0x44	; 68
    6bf2:	7c e0       	ldi	r23, 0x0C	; 12
_Z17toText_lightState11LightStates():
b:\Gbox420\Gbox420\Gbox420_Mega_Main\build\sketch\src/Helpers.cpp:446
  }
}

char *toText_lightState(LightStates State)
{
  switch (State)
    6bf4:	82 30       	cpi	r24, 0x02	; 2
    6bf6:	91 05       	cpc	r25, r1
    6bf8:	a9 f0       	breq	.+42     	; 0x6c24 <toText_lightState(LightStates)+0x34>
    6bfa:	5c f4       	brge	.+22     	; 0x6c12 <toText_lightState(LightStates)+0x22>
_Z6toTextPK19__FlashStringHelper():
b:\Gbox420\Gbox420\Gbox420_Mega_Main\build\sketch\src/Helpers.cpp:34

///< Text formating

char *toText(const __FlashStringHelper *FlashText)
{ ///< Not every external library supports __FlashStringHelper class. This converts flash stored text to ram stored char *
  strcpy_P(ShortMessage, (PGM_P)FlashText);
    6bfc:	6e e4       	ldi	r22, 0x4E	; 78
    6bfe:	7c e0       	ldi	r23, 0x0C	; 12
_Z17toText_lightState11LightStates():
b:\Gbox420\Gbox420\Gbox420_Mega_Main\build\sketch\src/Helpers.cpp:446
  }
}

char *toText_lightState(LightStates State)
{
  switch (State)
    6c00:	00 97       	sbiw	r24, 0x00	; 0
    6c02:	81 f0       	breq	.+32     	; 0x6c24 <toText_lightState(LightStates)+0x34>
_Z6toTextPK19__FlashStringHelper():
b:\Gbox420\Gbox420\Gbox420_Mega_Main\build\sketch\src/Helpers.cpp:34

///< Text formating

char *toText(const __FlashStringHelper *FlashText)
{ ///< Not every external library supports __FlashStringHelper class. This converts flash stored text to ram stored char *
  strcpy_P(ShortMessage, (PGM_P)FlashText);
    6c04:	6b e4       	ldi	r22, 0x4B	; 75
    6c06:	7c e0       	ldi	r23, 0x0C	; 12
_Z17toText_lightState11LightStates():
b:\Gbox420\Gbox420\Gbox420_Mega_Main\build\sketch\src/Helpers.cpp:446
  }
}

char *toText_lightState(LightStates State)
{
  switch (State)
    6c08:	01 97       	sbiw	r24, 0x01	; 1
    6c0a:	61 f0       	breq	.+24     	; 0x6c24 <toText_lightState(LightStates)+0x34>
_Z6toTextPK19__FlashStringHelper():
b:\Gbox420\Gbox420\Gbox420_Mega_Main\build\sketch\src/Helpers.cpp:34

///< Text formating

char *toText(const __FlashStringHelper *FlashText)
{ ///< Not every external library supports __FlashStringHelper class. This converts flash stored text to ram stored char *
  strcpy_P(ShortMessage, (PGM_P)FlashText);
    6c0c:	63 e3       	ldi	r22, 0x33	; 51
    6c0e:	7c e0       	ldi	r23, 0x0C	; 12
    6c10:	09 c0       	rjmp	.+18     	; 0x6c24 <toText_lightState(LightStates)+0x34>
    6c12:	6c e3       	ldi	r22, 0x3C	; 60
    6c14:	7c e0       	ldi	r23, 0x0C	; 12
_Z17toText_lightState11LightStates():
b:\Gbox420\Gbox420\Gbox420_Mega_Main\build\sketch\src/Helpers.cpp:446
  }
}

char *toText_lightState(LightStates State)
{
  switch (State)
    6c16:	83 30       	cpi	r24, 0x03	; 3
    6c18:	91 05       	cpc	r25, r1
    6c1a:	21 f0       	breq	.+8      	; 0x6c24 <toText_lightState(LightStates)+0x34>
_Z6toTextPK19__FlashStringHelper():
b:\Gbox420\Gbox420\Gbox420_Mega_Main\build\sketch\src/Helpers.cpp:34

///< Text formating

char *toText(const __FlashStringHelper *FlashText)
{ ///< Not every external library supports __FlashStringHelper class. This converts flash stored text to ram stored char *
  strcpy_P(ShortMessage, (PGM_P)FlashText);
    6c1c:	65 e3       	ldi	r22, 0x35	; 53
    6c1e:	7c e0       	ldi	r23, 0x0C	; 12
_Z17toText_lightState11LightStates():
b:\Gbox420\Gbox420\Gbox420_Mega_Main\build\sketch\src/Helpers.cpp:446
  }
}

char *toText_lightState(LightStates State)
{
  switch (State)
    6c20:	04 97       	sbiw	r24, 0x04	; 4
    6c22:	a1 f7       	brne	.-24     	; 0x6c0c <toText_lightState(LightStates)+0x1c>
_Z6toTextPK19__FlashStringHelper():
b:\Gbox420\Gbox420\Gbox420_Mega_Main\build\sketch\src/Helpers.cpp:34

///< Text formating

char *toText(const __FlashStringHelper *FlashText)
{ ///< Not every external library supports __FlashStringHelper class. This converts flash stored text to ram stored char *
  strcpy_P(ShortMessage, (PGM_P)FlashText);
    6c24:	81 eb       	ldi	r24, 0xB1	; 177
    6c26:	9d e0       	ldi	r25, 0x0D	; 13
    6c28:	0e 94 ee 94 	call	0x129dc	; 0x129dc <strcpy_P>
_Z17toText_lightState11LightStates():
b:\Gbox420\Gbox420\Gbox420_Mega_Main\build\sketch\src/Helpers.cpp:467
    break;
  default:
    return toText(F("?"));
    break;
  }
    6c2c:	81 eb       	ldi	r24, 0xB1	; 177
    6c2e:	9d e0       	ldi	r25, 0x0D	; 13
    6c30:	08 95       	ret

00006c32 <void logToSerials<char const*>(char const**, bool, unsigned char) [clone .part.3]>:
_Z12logToSerialsIPcEvPT_bh():
b:\gbox420\gbox420\gbox420_mega_main\build\sketch/seriallog.h:32
    6c32:	cf 93       	push	r28
    6c34:	df 93       	push	r29
    6c36:	ec 01       	movw	r28, r24
    6c38:	68 81       	ld	r22, Y
    6c3a:	79 81       	ldd	r23, Y+1	; 0x01
    6c3c:	80 91 2f 04 	lds	r24, 0x042F	; 0x80042f <ArduinoSerial>
    6c40:	90 91 30 04 	lds	r25, 0x0430	; 0x800430 <ArduinoSerial+0x1>
    6c44:	0e 94 c3 8b 	call	0x11786	; 0x11786 <Print::println(char const*)>
    6c48:	68 81       	ld	r22, Y
    6c4a:	79 81       	ldd	r23, Y+1	; 0x01
    6c4c:	80 91 2d 04 	lds	r24, 0x042D	; 0x80042d <ESPSerial>
    6c50:	90 91 2e 04 	lds	r25, 0x042E	; 0x80042e <ESPSerial+0x1>
    6c54:	df 91       	pop	r29
    6c56:	cf 91       	pop	r28
    6c58:	0c 94 c3 8b 	jmp	0x11786	; 0x11786 <Print::println(char const*)>

00006c5c <void logToSerials<char [1024]>(char (*) [1024], bool, unsigned char) [clone .part.5]>:
_Z12logToSerialsIA1024_cEvPT_bh():
    6c5c:	cf 93       	push	r28
    6c5e:	df 93       	push	r29
    6c60:	ec 01       	movw	r28, r24
    6c62:	bc 01       	movw	r22, r24
    6c64:	80 91 2f 04 	lds	r24, 0x042F	; 0x80042f <ArduinoSerial>
    6c68:	90 91 30 04 	lds	r25, 0x0430	; 0x800430 <ArduinoSerial+0x1>
    6c6c:	0e 94 c3 8b 	call	0x11786	; 0x11786 <Print::println(char const*)>
    6c70:	be 01       	movw	r22, r28
    6c72:	80 91 2d 04 	lds	r24, 0x042D	; 0x80042d <ESPSerial>
    6c76:	90 91 2e 04 	lds	r25, 0x042E	; 0x80042e <ESPSerial+0x1>
    6c7a:	df 91       	pop	r29
    6c7c:	cf 91       	pop	r28
    6c7e:	0c 94 c3 8b 	jmp	0x11786	; 0x11786 <Print::println(char const*)>

00006c82 <Module_Web::addToLog(__FlashStringHelper const*, unsigned char)>:
_ZN10Module_Web8addToLogEPK19__FlashStringHelperh():
    6c82:	cf 92       	push	r12
    6c84:	df 92       	push	r13
    6c86:	ef 92       	push	r14
    6c88:	ff 92       	push	r15
    6c8a:	0f 93       	push	r16
    6c8c:	1f 93       	push	r17
    6c8e:	cf 93       	push	r28
    6c90:	8b 01       	movw	r16, r22
    6c92:	c4 2f       	mov	r28, r20
    6c94:	c0 90 2f 04 	lds	r12, 0x042F	; 0x80042f <ArduinoSerial>
    6c98:	d0 90 30 04 	lds	r13, 0x0430	; 0x800430 <ArduinoSerial+0x1>
    6c9c:	e0 90 2d 04 	lds	r14, 0x042D	; 0x80042d <ESPSerial>
    6ca0:	f0 90 2e 04 	lds	r15, 0x042E	; 0x80042e <ESPSerial+0x1>
_Z12logToSerialsIPK19__FlashStringHelperEvPT_bh():
    6ca4:	cc 23       	and	r28, r28
    6ca6:	61 f0       	breq	.+24     	; 0x6cc0 <Module_Web::addToLog(__FlashStringHelper const*, unsigned char)+0x3e>
    6ca8:	61 e0       	ldi	r22, 0x01	; 1
    6caa:	78 e0       	ldi	r23, 0x08	; 8
    6cac:	c6 01       	movw	r24, r12
    6cae:	0e 94 6c 8b 	call	0x116d8	; 0x116d8 <Print::print(__FlashStringHelper const*)>
    6cb2:	6f ef       	ldi	r22, 0xFF	; 255
    6cb4:	77 e0       	ldi	r23, 0x07	; 7
    6cb6:	c7 01       	movw	r24, r14
    6cb8:	0e 94 6c 8b 	call	0x116d8	; 0x116d8 <Print::print(__FlashStringHelper const*)>
    6cbc:	c1 50       	subi	r28, 0x01	; 1
    6cbe:	f2 cf       	rjmp	.-28     	; 0x6ca4 <Module_Web::addToLog(__FlashStringHelper const*, unsigned char)+0x22>
    6cc0:	b8 01       	movw	r22, r16
    6cc2:	c6 01       	movw	r24, r12
    6cc4:	0e 94 b1 8b 	call	0x11762	; 0x11762 <Print::println(__FlashStringHelper const*)>
    6cc8:	b8 01       	movw	r22, r16
    6cca:	c7 01       	movw	r24, r14
    6ccc:	0e 94 b1 8b 	call	0x11762	; 0x11762 <Print::println(__FlashStringHelper const*)>
_ZN10Module_Web8addToLogEPK19__FlashStringHelperh():
    6cd0:	c0 e2       	ldi	r28, 0x20	; 32
    6cd2:	e1 e7       	ldi	r30, 0x71	; 113
    6cd4:	f3 e1       	ldi	r31, 0x13	; 19
    6cd6:	df 01       	movw	r26, r30
    6cd8:	8c 2f       	mov	r24, r28
    6cda:	1d 92       	st	X+, r1
    6cdc:	8a 95       	dec	r24
    6cde:	e9 f7       	brne	.-6      	; 0x6cda <Module_Web::addToLog(__FlashStringHelper const*, unsigned char)+0x58>
    6ce0:	40 e2       	ldi	r20, 0x20	; 32
    6ce2:	50 e0       	ldi	r21, 0x00	; 0
    6ce4:	61 e5       	ldi	r22, 0x51	; 81
    6ce6:	73 e1       	ldi	r23, 0x13	; 19
    6ce8:	cf 01       	movw	r24, r30
    6cea:	0e 94 3e 95 	call	0x12a7c	; 0x12a7c <strncpy>
    6cee:	e1 e5       	ldi	r30, 0x51	; 81
    6cf0:	f3 e1       	ldi	r31, 0x13	; 19
    6cf2:	df 01       	movw	r26, r30
    6cf4:	8c 2f       	mov	r24, r28
    6cf6:	1d 92       	st	X+, r1
    6cf8:	8a 95       	dec	r24
    6cfa:	e9 f7       	brne	.-6      	; 0x6cf6 <Module_Web::addToLog(__FlashStringHelper const*, unsigned char)+0x74>
    6cfc:	40 e2       	ldi	r20, 0x20	; 32
    6cfe:	50 e0       	ldi	r21, 0x00	; 0
    6d00:	61 e3       	ldi	r22, 0x31	; 49
    6d02:	73 e1       	ldi	r23, 0x13	; 19
    6d04:	cf 01       	movw	r24, r30
    6d06:	0e 94 3e 95 	call	0x12a7c	; 0x12a7c <strncpy>
    6d0a:	e1 e3       	ldi	r30, 0x31	; 49
    6d0c:	f3 e1       	ldi	r31, 0x13	; 19
    6d0e:	df 01       	movw	r26, r30
    6d10:	8c 2f       	mov	r24, r28
    6d12:	1d 92       	st	X+, r1
    6d14:	8a 95       	dec	r24
    6d16:	e9 f7       	brne	.-6      	; 0x6d12 <Module_Web::addToLog(__FlashStringHelper const*, unsigned char)+0x90>
    6d18:	40 e2       	ldi	r20, 0x20	; 32
    6d1a:	50 e0       	ldi	r21, 0x00	; 0
    6d1c:	61 e1       	ldi	r22, 0x11	; 17
    6d1e:	73 e1       	ldi	r23, 0x13	; 19
    6d20:	cf 01       	movw	r24, r30
    6d22:	0e 94 3e 95 	call	0x12a7c	; 0x12a7c <strncpy>
    6d26:	e1 e1       	ldi	r30, 0x11	; 17
    6d28:	f3 e1       	ldi	r31, 0x13	; 19
    6d2a:	df 01       	movw	r26, r30
    6d2c:	1d 92       	st	X+, r1
    6d2e:	ca 95       	dec	r28
    6d30:	e9 f7       	brne	.-6      	; 0x6d2c <Module_Web::addToLog(__FlashStringHelper const*, unsigned char)+0xaa>
    6d32:	40 e2       	ldi	r20, 0x20	; 32
    6d34:	50 e0       	ldi	r21, 0x00	; 0
    6d36:	b8 01       	movw	r22, r16
    6d38:	cf 01       	movw	r24, r30
    6d3a:	cf 91       	pop	r28
    6d3c:	1f 91       	pop	r17
    6d3e:	0f 91       	pop	r16
    6d40:	ff 90       	pop	r15
    6d42:	ef 90       	pop	r14
    6d44:	df 90       	pop	r13
    6d46:	cf 90       	pop	r12
    6d48:	0c 94 fe 94 	jmp	0x129fc	; 0x129fc <strncpy_P>

00006d4c <virtual thunk to Module_Web::addToLog(__FlashStringHelper const*, unsigned char)>:
_ZTv0_n8_N10Module_Web8addToLogEPK19__FlashStringHelperh():
    6d4c:	dc 01       	movw	r26, r24
    6d4e:	ed 91       	ld	r30, X+
    6d50:	fc 91       	ld	r31, X
    6d52:	38 97       	sbiw	r30, 0x08	; 8
    6d54:	20 81       	ld	r18, Z
    6d56:	31 81       	ldd	r19, Z+1	; 0x01
    6d58:	82 0f       	add	r24, r18
    6d5a:	93 1f       	adc	r25, r19
    6d5c:	0c 94 41 36 	jmp	0x6c82	; 0x6c82 <Module_Web::addToLog(__FlashStringHelper const*, unsigned char)>

00006d60 <Module_Web::addToLog(char const*, unsigned char)>:
_ZN10Module_Web8addToLogEPKch():
    6d60:	cf 92       	push	r12
    6d62:	df 92       	push	r13
    6d64:	ef 92       	push	r14
    6d66:	ff 92       	push	r15
    6d68:	1f 93       	push	r17
    6d6a:	cf 93       	push	r28
    6d6c:	df 93       	push	r29
    6d6e:	1f 92       	push	r1
    6d70:	1f 92       	push	r1
    6d72:	cd b7       	in	r28, 0x3d	; 61
    6d74:	de b7       	in	r29, 0x3e	; 62
    6d76:	7a 83       	std	Y+2, r23	; 0x02
    6d78:	69 83       	std	Y+1, r22	; 0x01
    6d7a:	14 2f       	mov	r17, r20
_Z12logToSerialsIPKcEvPT_bh():
    6d7c:	c0 90 2f 04 	lds	r12, 0x042F	; 0x80042f <ArduinoSerial>
    6d80:	d0 90 30 04 	lds	r13, 0x0430	; 0x800430 <ArduinoSerial+0x1>
    6d84:	e0 90 2d 04 	lds	r14, 0x042D	; 0x80042d <ESPSerial>
    6d88:	f0 90 2e 04 	lds	r15, 0x042E	; 0x80042e <ESPSerial+0x1>
    6d8c:	11 23       	and	r17, r17
    6d8e:	61 f0       	breq	.+24     	; 0x6da8 <Module_Web::addToLog(char const*, unsigned char)+0x48>
    6d90:	65 e0       	ldi	r22, 0x05	; 5
    6d92:	78 e0       	ldi	r23, 0x08	; 8
    6d94:	c6 01       	movw	r24, r12
    6d96:	0e 94 6c 8b 	call	0x116d8	; 0x116d8 <Print::print(__FlashStringHelper const*)>
    6d9a:	63 e0       	ldi	r22, 0x03	; 3
    6d9c:	78 e0       	ldi	r23, 0x08	; 8
    6d9e:	c7 01       	movw	r24, r14
    6da0:	0e 94 6c 8b 	call	0x116d8	; 0x116d8 <Print::print(__FlashStringHelper const*)>
    6da4:	11 50       	subi	r17, 0x01	; 1
    6da6:	f2 cf       	rjmp	.-28     	; 0x6d8c <Module_Web::addToLog(char const*, unsigned char)+0x2c>
    6da8:	ce 01       	movw	r24, r28
    6daa:	01 96       	adiw	r24, 0x01	; 1
    6dac:	0e 94 19 36 	call	0x6c32	; 0x6c32 <void logToSerials<char const*>(char const**, bool, unsigned char) [clone .part.3]>
_ZN10Module_Web8addToLogEPKch():
    6db0:	10 e2       	ldi	r17, 0x20	; 32
    6db2:	e1 e7       	ldi	r30, 0x71	; 113
    6db4:	f3 e1       	ldi	r31, 0x13	; 19
    6db6:	df 01       	movw	r26, r30
    6db8:	81 2f       	mov	r24, r17
    6dba:	1d 92       	st	X+, r1
    6dbc:	8a 95       	dec	r24
    6dbe:	e9 f7       	brne	.-6      	; 0x6dba <Module_Web::addToLog(char const*, unsigned char)+0x5a>
    6dc0:	40 e2       	ldi	r20, 0x20	; 32
    6dc2:	50 e0       	ldi	r21, 0x00	; 0
    6dc4:	61 e5       	ldi	r22, 0x51	; 81
    6dc6:	73 e1       	ldi	r23, 0x13	; 19
    6dc8:	cf 01       	movw	r24, r30
    6dca:	0e 94 3e 95 	call	0x12a7c	; 0x12a7c <strncpy>
    6dce:	e1 e5       	ldi	r30, 0x51	; 81
    6dd0:	f3 e1       	ldi	r31, 0x13	; 19
    6dd2:	df 01       	movw	r26, r30
    6dd4:	81 2f       	mov	r24, r17
    6dd6:	1d 92       	st	X+, r1
    6dd8:	8a 95       	dec	r24
    6dda:	e9 f7       	brne	.-6      	; 0x6dd6 <Module_Web::addToLog(char const*, unsigned char)+0x76>
    6ddc:	40 e2       	ldi	r20, 0x20	; 32
    6dde:	50 e0       	ldi	r21, 0x00	; 0
    6de0:	61 e3       	ldi	r22, 0x31	; 49
    6de2:	73 e1       	ldi	r23, 0x13	; 19
    6de4:	cf 01       	movw	r24, r30
    6de6:	0e 94 3e 95 	call	0x12a7c	; 0x12a7c <strncpy>
    6dea:	e1 e3       	ldi	r30, 0x31	; 49
    6dec:	f3 e1       	ldi	r31, 0x13	; 19
    6dee:	df 01       	movw	r26, r30
    6df0:	81 2f       	mov	r24, r17
    6df2:	1d 92       	st	X+, r1
    6df4:	8a 95       	dec	r24
    6df6:	e9 f7       	brne	.-6      	; 0x6df2 <Module_Web::addToLog(char const*, unsigned char)+0x92>
    6df8:	40 e2       	ldi	r20, 0x20	; 32
    6dfa:	50 e0       	ldi	r21, 0x00	; 0
    6dfc:	61 e1       	ldi	r22, 0x11	; 17
    6dfe:	73 e1       	ldi	r23, 0x13	; 19
    6e00:	cf 01       	movw	r24, r30
    6e02:	0e 94 3e 95 	call	0x12a7c	; 0x12a7c <strncpy>
    6e06:	e1 e1       	ldi	r30, 0x11	; 17
    6e08:	f3 e1       	ldi	r31, 0x13	; 19
    6e0a:	df 01       	movw	r26, r30
    6e0c:	1d 92       	st	X+, r1
    6e0e:	1a 95       	dec	r17
    6e10:	e9 f7       	brne	.-6      	; 0x6e0c <Module_Web::addToLog(char const*, unsigned char)+0xac>
    6e12:	69 81       	ldd	r22, Y+1	; 0x01
    6e14:	7a 81       	ldd	r23, Y+2	; 0x02
    6e16:	40 e2       	ldi	r20, 0x20	; 32
    6e18:	50 e0       	ldi	r21, 0x00	; 0
    6e1a:	cf 01       	movw	r24, r30
    6e1c:	0e 94 3e 95 	call	0x12a7c	; 0x12a7c <strncpy>
    6e20:	0f 90       	pop	r0
    6e22:	0f 90       	pop	r0
    6e24:	df 91       	pop	r29
    6e26:	cf 91       	pop	r28
    6e28:	1f 91       	pop	r17
    6e2a:	ff 90       	pop	r15
    6e2c:	ef 90       	pop	r14
    6e2e:	df 90       	pop	r13
    6e30:	cf 90       	pop	r12
    6e32:	08 95       	ret

00006e34 <virtual thunk to Module_Web::addToLog(char const*, unsigned char)>:
_ZTv0_n10_N10Module_Web8addToLogEPKch():
    6e34:	dc 01       	movw	r26, r24
    6e36:	ed 91       	ld	r30, X+
    6e38:	fc 91       	ld	r31, X
    6e3a:	3a 97       	sbiw	r30, 0x0a	; 10
    6e3c:	20 81       	ld	r18, Z
    6e3e:	31 81       	ldd	r19, Z+1	; 0x01
    6e40:	82 0f       	add	r24, r18
    6e42:	93 1f       	adc	r25, r19
    6e44:	0c 94 b0 36 	jmp	0x6d60	; 0x6d60 <Module_Web::addToLog(char const*, unsigned char)>

00006e48 <Module_Web::Module_Web(__FlashStringHelper const*)>:
_ZN10Module_WebC2EPK19__FlashStringHelper():
    6e48:	cf 93       	push	r28
    6e4a:	df 93       	push	r29
    6e4c:	fc 01       	movw	r30, r24
    6e4e:	db 01       	movw	r26, r22
Module_Web():
    6e50:	8d 91       	ld	r24, X+
    6e52:	9c 91       	ld	r25, X
    6e54:	11 97       	sbiw	r26, 0x01	; 1
    6e56:	91 83       	std	Z+1, r25	; 0x01
    6e58:	80 83       	st	Z, r24
    6e5a:	12 96       	adiw	r26, 0x02	; 2
    6e5c:	2d 91       	ld	r18, X+
    6e5e:	3c 91       	ld	r19, X
    6e60:	13 97       	sbiw	r26, 0x03	; 3
    6e62:	0e 97       	sbiw	r24, 0x0e	; 14
    6e64:	ec 01       	movw	r28, r24
    6e66:	88 81       	ld	r24, Y
    6e68:	99 81       	ldd	r25, Y+1	; 0x01
    6e6a:	ec 01       	movw	r28, r24
    6e6c:	ce 0f       	add	r28, r30
    6e6e:	df 1f       	adc	r29, r31
    6e70:	39 83       	std	Y+1, r19	; 0x01
    6e72:	28 83       	st	Y, r18
    6e74:	14 96       	adiw	r26, 0x04	; 4
    6e76:	2d 91       	ld	r18, X+
    6e78:	3c 91       	ld	r19, X
    6e7a:	15 97       	sbiw	r26, 0x05	; 5
    6e7c:	80 81       	ld	r24, Z
    6e7e:	91 81       	ldd	r25, Z+1	; 0x01
    6e80:	ec 01       	movw	r28, r24
    6e82:	26 97       	sbiw	r28, 0x06	; 6
    6e84:	09 90       	ld	r0, Y+
    6e86:	d8 81       	ld	r29, Y
    6e88:	c0 2d       	mov	r28, r0
    6e8a:	ce 0f       	add	r28, r30
    6e8c:	df 1f       	adc	r29, r31
    6e8e:	39 83       	std	Y+1, r19	; 0x01
    6e90:	28 83       	st	Y, r18
    6e92:	16 96       	adiw	r26, 0x06	; 6
    6e94:	2d 91       	ld	r18, X+
    6e96:	3c 91       	ld	r19, X
    6e98:	40 97       	sbiw	r24, 0x10	; 16
    6e9a:	ec 01       	movw	r28, r24
    6e9c:	a8 81       	ld	r26, Y
    6e9e:	b9 81       	ldd	r27, Y+1	; 0x01
    6ea0:	ae 0f       	add	r26, r30
    6ea2:	bf 1f       	adc	r27, r31
    6ea4:	2d 93       	st	X+, r18
    6ea6:	3c 93       	st	X, r19
    6ea8:	13 82       	std	Z+3, r1	; 0x03
    6eaa:	12 82       	std	Z+2, r1	; 0x02
    6eac:	80 e4       	ldi	r24, 0x40	; 64
    6eae:	df 01       	movw	r26, r30
    6eb0:	14 96       	adiw	r26, 0x04	; 4
    6eb2:	ed 01       	movw	r28, r26
    6eb4:	98 2f       	mov	r25, r24
    6eb6:	19 92       	st	Y+, r1
    6eb8:	9a 95       	dec	r25
    6eba:	e9 f7       	brne	.-6      	; 0x6eb6 <Module_Web::Module_Web(__FlashStringHelper const*)+0x6e>
    6ebc:	a0 5c       	subi	r26, 0xC0	; 192
    6ebe:	bf 4f       	sbci	r27, 0xFF	; 255
    6ec0:	ed 01       	movw	r28, r26
    6ec2:	98 2f       	mov	r25, r24
    6ec4:	19 92       	st	Y+, r1
    6ec6:	9a 95       	dec	r25
    6ec8:	e9 f7       	brne	.-6      	; 0x6ec4 <Module_Web::Module_Web(__FlashStringHelper const*)+0x7c>
    6eca:	a0 5c       	subi	r26, 0xC0	; 192
    6ecc:	bf 4f       	sbci	r27, 0xFF	; 255
    6ece:	ed 01       	movw	r28, r26
    6ed0:	19 92       	st	Y+, r1
    6ed2:	8a 95       	dec	r24
    6ed4:	e9 f7       	brne	.-6      	; 0x6ed0 <Module_Web::Module_Web(__FlashStringHelper const*)+0x88>
    6ed6:	a0 5c       	subi	r26, 0xC0	; 192
    6ed8:	bf 4f       	sbci	r27, 0xFF	; 255
    6eda:	1c 92       	st	X, r1
    6edc:	11 96       	adiw	r26, 0x01	; 1
    6ede:	1c 92       	st	X, r1
    6ee0:	11 96       	adiw	r26, 0x01	; 1
    6ee2:	1c 92       	st	X, r1
    6ee4:	11 96       	adiw	r26, 0x01	; 1
    6ee6:	1c 92       	st	X, r1
    6ee8:	11 96       	adiw	r26, 0x01	; 1
    6eea:	1c 92       	st	X, r1
    6eec:	11 96       	adiw	r26, 0x01	; 1
    6eee:	1c 92       	st	X, r1
    6ef0:	11 96       	adiw	r26, 0x01	; 1
    6ef2:	1c 92       	st	X, r1
    6ef4:	15 96       	adiw	r26, 0x05	; 5
    6ef6:	1c 92       	st	X, r1
    6ef8:	ec 52       	subi	r30, 0x2C	; 44
    6efa:	ff 4f       	sbci	r31, 0xFF	; 255
    6efc:	11 82       	std	Z+1, r1	; 0x01
    6efe:	10 82       	st	Z, r1
_ZN10Module_WebC2EPK19__FlashStringHelper():
    6f00:	df 91       	pop	r29
    6f02:	cf 91       	pop	r28
    6f04:	08 95       	ret

00006f06 <Module_Web::addToWebsiteQueue_Load(Common_Web*)>:
_ZN10Module_Web22addToWebsiteQueue_LoadEP10Common_Web():
    6f06:	fc 01       	movw	r30, r24
    6f08:	ec 53       	subi	r30, 0x3C	; 60
    6f0a:	ff 4f       	sbci	r31, 0xFF	; 255
    6f0c:	20 81       	ld	r18, Z
    6f0e:	20 32       	cpi	r18, 0x20	; 32
    6f10:	70 f4       	brcc	.+28     	; 0x6f2e <Module_Web::addToWebsiteQueue_Load(Common_Web*)+0x28>
    6f12:	31 e0       	ldi	r19, 0x01	; 1
    6f14:	32 0f       	add	r19, r18
    6f16:	30 83       	st	Z, r19
    6f18:	30 e0       	ldi	r19, 0x00	; 0
    6f1a:	2e 5f       	subi	r18, 0xFE	; 254
    6f1c:	3f 4f       	sbci	r19, 0xFF	; 255
    6f1e:	22 0f       	add	r18, r18
    6f20:	33 1f       	adc	r19, r19
    6f22:	82 0f       	add	r24, r18
    6f24:	93 1f       	adc	r25, r19
    6f26:	fc 01       	movw	r30, r24
    6f28:	71 83       	std	Z+1, r23	; 0x01
    6f2a:	60 83       	st	Z, r22
    6f2c:	08 95       	ret
    6f2e:	40 e0       	ldi	r20, 0x00	; 0
    6f30:	61 e0       	ldi	r22, 0x01	; 1
    6f32:	8c e5       	ldi	r24, 0x5C	; 92
    6f34:	91 e1       	ldi	r25, 0x11	; 17
    6f36:	0c 94 85 16 	jmp	0x2d0a	; 0x2d0a <logToSerials(__FlashStringHelper const*, bool, unsigned char)>

00006f3a <Module_Web::addToWebsiteQueue_Refresh(Common_Web*)>:
_ZN10Module_Web25addToWebsiteQueue_RefreshEP10Common_Web():
    6f3a:	fc 01       	movw	r30, r24
    6f3c:	eb 53       	subi	r30, 0x3B	; 59
    6f3e:	ff 4f       	sbci	r31, 0xFF	; 255
    6f40:	20 81       	ld	r18, Z
    6f42:	20 32       	cpi	r18, 0x20	; 32
    6f44:	70 f4       	brcc	.+28     	; 0x6f62 <Module_Web::addToWebsiteQueue_Refresh(Common_Web*)+0x28>
    6f46:	31 e0       	ldi	r19, 0x01	; 1
    6f48:	32 0f       	add	r19, r18
    6f4a:	30 83       	st	Z, r19
    6f4c:	30 e0       	ldi	r19, 0x00	; 0
    6f4e:	2e 5d       	subi	r18, 0xDE	; 222
    6f50:	3f 4f       	sbci	r19, 0xFF	; 255
    6f52:	22 0f       	add	r18, r18
    6f54:	33 1f       	adc	r19, r19
    6f56:	82 0f       	add	r24, r18
    6f58:	93 1f       	adc	r25, r19
    6f5a:	fc 01       	movw	r30, r24
    6f5c:	71 83       	std	Z+1, r23	; 0x01
    6f5e:	60 83       	st	Z, r22
    6f60:	08 95       	ret
    6f62:	40 e0       	ldi	r20, 0x00	; 0
    6f64:	61 e0       	ldi	r22, 0x01	; 1
    6f66:	8d e3       	ldi	r24, 0x3D	; 61
    6f68:	91 e1       	ldi	r25, 0x11	; 17
    6f6a:	0c 94 85 16 	jmp	0x2d0a	; 0x2d0a <logToSerials(__FlashStringHelper const*, bool, unsigned char)>

00006f6e <Module_Web::addToCommandQueue(Common_Web*)>:
_ZN10Module_Web17addToCommandQueueEP10Common_Web():
    6f6e:	fc 01       	movw	r30, r24
    6f70:	ea 53       	subi	r30, 0x3A	; 58
    6f72:	ff 4f       	sbci	r31, 0xFF	; 255
    6f74:	20 81       	ld	r18, Z
    6f76:	20 32       	cpi	r18, 0x20	; 32
    6f78:	70 f4       	brcc	.+28     	; 0x6f96 <Module_Web::addToCommandQueue(Common_Web*)+0x28>
    6f7a:	31 e0       	ldi	r19, 0x01	; 1
    6f7c:	32 0f       	add	r19, r18
    6f7e:	30 83       	st	Z, r19
    6f80:	30 e0       	ldi	r19, 0x00	; 0
    6f82:	2e 5b       	subi	r18, 0xBE	; 190
    6f84:	3f 4f       	sbci	r19, 0xFF	; 255
    6f86:	22 0f       	add	r18, r18
    6f88:	33 1f       	adc	r19, r19
    6f8a:	82 0f       	add	r24, r18
    6f8c:	93 1f       	adc	r25, r19
    6f8e:	fc 01       	movw	r30, r24
    6f90:	71 83       	std	Z+1, r23	; 0x01
    6f92:	60 83       	st	Z, r22
    6f94:	08 95       	ret
    6f96:	40 e0       	ldi	r20, 0x00	; 0
    6f98:	61 e0       	ldi	r22, 0x01	; 1
    6f9a:	86 e2       	ldi	r24, 0x26	; 38
    6f9c:	91 e1       	ldi	r25, 0x11	; 17
    6f9e:	0c 94 85 16 	jmp	0x2d0a	; 0x2d0a <logToSerials(__FlashStringHelper const*, bool, unsigned char)>

00006fa2 <Module_Web::websiteLoadEventTrigger(char*)>:
_ZN10Module_Web23websiteLoadEventTriggerEPc():
    6fa2:	cf 92       	push	r12
    6fa4:	df 92       	push	r13
    6fa6:	ef 92       	push	r14
    6fa8:	ff 92       	push	r15
    6faa:	0f 93       	push	r16
    6fac:	1f 93       	push	r17
    6fae:	cf 93       	push	r28
    6fb0:	df 93       	push	r29
    6fb2:	6b 01       	movw	r12, r22
    6fb4:	7c 01       	movw	r14, r24
    6fb6:	24 e0       	ldi	r18, 0x04	; 4
    6fb8:	e2 0e       	add	r14, r18
    6fba:	f1 1c       	adc	r15, r1
    6fbc:	10 e0       	ldi	r17, 0x00	; 0
    6fbe:	00 e0       	ldi	r16, 0x00	; 0
    6fc0:	ec 01       	movw	r28, r24
    6fc2:	cc 53       	subi	r28, 0x3C	; 60
    6fc4:	df 4f       	sbci	r29, 0xFF	; 255
    6fc6:	88 81       	ld	r24, Y
    6fc8:	80 17       	cp	r24, r16
    6fca:	11 06       	cpc	r1, r17
    6fcc:	81 f0       	breq	.+32     	; 0x6fee <Module_Web::websiteLoadEventTrigger(char*)+0x4c>
    6fce:	7c f0       	brlt	.+30     	; 0x6fee <Module_Web::websiteLoadEventTrigger(char*)+0x4c>
    6fd0:	d7 01       	movw	r26, r14
    6fd2:	8d 91       	ld	r24, X+
    6fd4:	9d 91       	ld	r25, X+
    6fd6:	7d 01       	movw	r14, r26
    6fd8:	dc 01       	movw	r26, r24
    6fda:	ed 91       	ld	r30, X+
    6fdc:	fc 91       	ld	r31, X
    6fde:	01 90       	ld	r0, Z+
    6fe0:	f0 81       	ld	r31, Z
    6fe2:	e0 2d       	mov	r30, r0
    6fe4:	b6 01       	movw	r22, r12
    6fe6:	19 95       	eicall
    6fe8:	0f 5f       	subi	r16, 0xFF	; 255
    6fea:	1f 4f       	sbci	r17, 0xFF	; 255
    6fec:	ec cf       	rjmp	.-40     	; 0x6fc6 <Module_Web::websiteLoadEventTrigger(char*)+0x24>
    6fee:	df 91       	pop	r29
    6ff0:	cf 91       	pop	r28
    6ff2:	1f 91       	pop	r17
    6ff4:	0f 91       	pop	r16
    6ff6:	ff 90       	pop	r15
    6ff8:	ef 90       	pop	r14
    6ffa:	df 90       	pop	r13
    6ffc:	cf 90       	pop	r12
    6ffe:	08 95       	ret

00007000 <Module_Web::websiteRefreshEventTrigger(char*)>:
_ZN10Module_Web26websiteRefreshEventTriggerEPc():
    7000:	cf 92       	push	r12
    7002:	df 92       	push	r13
    7004:	ef 92       	push	r14
    7006:	ff 92       	push	r15
    7008:	0f 93       	push	r16
    700a:	1f 93       	push	r17
    700c:	cf 93       	push	r28
    700e:	df 93       	push	r29
    7010:	6b 01       	movw	r12, r22
    7012:	7c 01       	movw	r14, r24
    7014:	24 e4       	ldi	r18, 0x44	; 68
    7016:	e2 0e       	add	r14, r18
    7018:	f1 1c       	adc	r15, r1
    701a:	10 e0       	ldi	r17, 0x00	; 0
    701c:	00 e0       	ldi	r16, 0x00	; 0
    701e:	ec 01       	movw	r28, r24
    7020:	cb 53       	subi	r28, 0x3B	; 59
    7022:	df 4f       	sbci	r29, 0xFF	; 255
    7024:	88 81       	ld	r24, Y
    7026:	80 17       	cp	r24, r16
    7028:	11 06       	cpc	r1, r17
    702a:	81 f0       	breq	.+32     	; 0x704c <Module_Web::websiteRefreshEventTrigger(char*)+0x4c>
    702c:	7c f0       	brlt	.+30     	; 0x704c <Module_Web::websiteRefreshEventTrigger(char*)+0x4c>
    702e:	d7 01       	movw	r26, r14
    7030:	8d 91       	ld	r24, X+
    7032:	9d 91       	ld	r25, X+
    7034:	7d 01       	movw	r14, r26
    7036:	dc 01       	movw	r26, r24
    7038:	ed 91       	ld	r30, X+
    703a:	fc 91       	ld	r31, X
    703c:	02 80       	ldd	r0, Z+2	; 0x02
    703e:	f3 81       	ldd	r31, Z+3	; 0x03
    7040:	e0 2d       	mov	r30, r0
    7042:	b6 01       	movw	r22, r12
    7044:	19 95       	eicall
    7046:	0f 5f       	subi	r16, 0xFF	; 255
    7048:	1f 4f       	sbci	r17, 0xFF	; 255
    704a:	ec cf       	rjmp	.-40     	; 0x7024 <Module_Web::websiteRefreshEventTrigger(char*)+0x24>
    704c:	df 91       	pop	r29
    704e:	cf 91       	pop	r28
    7050:	1f 91       	pop	r17
    7052:	0f 91       	pop	r16
    7054:	ff 90       	pop	r15
    7056:	ef 90       	pop	r14
    7058:	df 90       	pop	r13
    705a:	cf 90       	pop	r12
    705c:	08 95       	ret

0000705e <Module_Web::eventLogToJSON(bool, bool)>:
_ZN10Module_Web14eventLogToJSONEbb():
    705e:	ff 92       	push	r15
    7060:	0f 93       	push	r16
    7062:	1f 93       	push	r17
    7064:	cf 93       	push	r28
    7066:	df 93       	push	r29
    7068:	f6 2e       	mov	r15, r22
    706a:	44 23       	and	r20, r20
    706c:	51 f0       	breq	.+20     	; 0x7082 <Module_Web::eventLogToJSON(bool, bool)+0x24>
    706e:	e1 e3       	ldi	r30, 0x31	; 49
    7070:	fe e0       	ldi	r31, 0x0E	; 14
    7072:	80 e0       	ldi	r24, 0x00	; 0
    7074:	94 e0       	ldi	r25, 0x04	; 4
    7076:	df 01       	movw	r26, r30
    7078:	9c 01       	movw	r18, r24
    707a:	1d 92       	st	X+, r1
    707c:	21 50       	subi	r18, 0x01	; 1
    707e:	30 40       	sbci	r19, 0x00	; 0
    7080:	e1 f7       	brne	.-8      	; 0x707a <Module_Web::eventLogToJSON(bool, bool)+0x1c>
    7082:	ff 20       	and	r15, r15
    7084:	31 f0       	breq	.+12     	; 0x7092 <Module_Web::eventLogToJSON(bool, bool)+0x34>
    7086:	69 e1       	ldi	r22, 0x19	; 25
    7088:	71 e1       	ldi	r23, 0x11	; 17
    708a:	81 e3       	ldi	r24, 0x31	; 49
    708c:	9e e0       	ldi	r25, 0x0E	; 14
    708e:	0e 94 da 94 	call	0x129b4	; 0x129b4 <strcat_P>
    7092:	67 e1       	ldi	r22, 0x17	; 23
    7094:	71 e1       	ldi	r23, 0x11	; 17
    7096:	81 e3       	ldi	r24, 0x31	; 49
    7098:	9e e0       	ldi	r25, 0x0E	; 14
    709a:	0e 94 da 94 	call	0x129b4	; 0x129b4 <strcat_P>
    709e:	01 e7       	ldi	r16, 0x71	; 113
    70a0:	13 e1       	ldi	r17, 0x13	; 19
    70a2:	c3 e0       	ldi	r28, 0x03	; 3
    70a4:	d0 e0       	ldi	r29, 0x00	; 0
    70a6:	65 e1       	ldi	r22, 0x15	; 21
    70a8:	71 e1       	ldi	r23, 0x11	; 17
    70aa:	81 e3       	ldi	r24, 0x31	; 49
    70ac:	9e e0       	ldi	r25, 0x0E	; 14
    70ae:	0e 94 da 94 	call	0x129b4	; 0x129b4 <strcat_P>
    70b2:	b8 01       	movw	r22, r16
    70b4:	81 e3       	ldi	r24, 0x31	; 49
    70b6:	9e e0       	ldi	r25, 0x0E	; 14
    70b8:	0e 94 23 95 	call	0x12a46	; 0x12a46 <strcat>
    70bc:	63 e1       	ldi	r22, 0x13	; 19
    70be:	71 e1       	ldi	r23, 0x11	; 17
    70c0:	81 e3       	ldi	r24, 0x31	; 49
    70c2:	9e e0       	ldi	r25, 0x0E	; 14
    70c4:	0e 94 da 94 	call	0x129b4	; 0x129b4 <strcat_P>
    70c8:	20 97       	sbiw	r28, 0x00	; 0
    70ca:	31 f0       	breq	.+12     	; 0x70d8 <Module_Web::eventLogToJSON(bool, bool)+0x7a>
    70cc:	61 e1       	ldi	r22, 0x11	; 17
    70ce:	71 e1       	ldi	r23, 0x11	; 17
    70d0:	81 e3       	ldi	r24, 0x31	; 49
    70d2:	9e e0       	ldi	r25, 0x0E	; 14
    70d4:	0e 94 da 94 	call	0x129b4	; 0x129b4 <strcat_P>
    70d8:	21 97       	sbiw	r28, 0x01	; 1
    70da:	00 52       	subi	r16, 0x20	; 32
    70dc:	11 09       	sbc	r17, r1
    70de:	cf 3f       	cpi	r28, 0xFF	; 255
    70e0:	dc 07       	cpc	r29, r28
    70e2:	09 f7       	brne	.-62     	; 0x70a6 <Module_Web::eventLogToJSON(bool, bool)+0x48>
    70e4:	e1 e3       	ldi	r30, 0x31	; 49
    70e6:	fe e0       	ldi	r31, 0x0E	; 14
    70e8:	01 90       	ld	r0, Z+
    70ea:	00 20       	and	r0, r0
    70ec:	e9 f7       	brne	.-6      	; 0x70e8 <Module_Web::eventLogToJSON(bool, bool)+0x8a>
    70ee:	31 97       	sbiw	r30, 0x01	; 1
    70f0:	8d e5       	ldi	r24, 0x5D	; 93
    70f2:	80 83       	st	Z, r24
    70f4:	ff 20       	and	r15, r15
    70f6:	31 f0       	breq	.+12     	; 0x7104 <Module_Web::eventLogToJSON(bool, bool)+0xa6>
    70f8:	6f e0       	ldi	r22, 0x0F	; 15
    70fa:	71 e1       	ldi	r23, 0x11	; 17
    70fc:	81 e3       	ldi	r24, 0x31	; 49
    70fe:	9e e0       	ldi	r25, 0x0E	; 14
    7100:	0e 94 da 94 	call	0x129b4	; 0x129b4 <strcat_P>
    7104:	81 e3       	ldi	r24, 0x31	; 49
    7106:	9e e0       	ldi	r25, 0x0E	; 14
    7108:	df 91       	pop	r29
    710a:	cf 91       	pop	r28
    710c:	1f 91       	pop	r17
    710e:	0f 91       	pop	r16
    7110:	ff 90       	pop	r15
    7112:	08 95       	ret

00007114 <Module_Web::settingsToJSON()>:
_ZN10Module_Web14settingsToJSONEv():
    7114:	cf 93       	push	r28
    7116:	df 93       	push	r29
    7118:	ec 01       	movw	r28, r24
    711a:	e1 e3       	ldi	r30, 0x31	; 49
    711c:	fe e0       	ldi	r31, 0x0E	; 14
    711e:	80 e0       	ldi	r24, 0x00	; 0
    7120:	94 e0       	ldi	r25, 0x04	; 4
    7122:	df 01       	movw	r26, r30
    7124:	9c 01       	movw	r18, r24
    7126:	1d 92       	st	X+, r1
    7128:	21 50       	subi	r18, 0x01	; 1
    712a:	30 40       	sbci	r19, 0x00	; 0
    712c:	e1 f7       	brne	.-8      	; 0x7126 <Module_Web::settingsToJSON()+0x12>
    712e:	61 e0       	ldi	r22, 0x01	; 1
    7130:	71 e1       	ldi	r23, 0x11	; 17
    7132:	cf 01       	movw	r24, r30
    7134:	0e 94 da 94 	call	0x129b4	; 0x129b4 <strcat_P>
    7138:	67 ef       	ldi	r22, 0xF7	; 247
    713a:	70 e1       	ldi	r23, 0x10	; 16
    713c:	81 e3       	ldi	r24, 0x31	; 49
    713e:	9e e0       	ldi	r25, 0x0E	; 14
    7140:	0e 94 da 94 	call	0x129b4	; 0x129b4 <strcat_P>
    7144:	e0 91 b7 0c 	lds	r30, 0x0CB7	; 0x800cb7 <Debug>
    7148:	f0 91 b8 0c 	lds	r31, 0x0CB8	; 0x800cb8 <Debug+0x1>
    714c:	80 81       	ld	r24, Z
    714e:	90 e0       	ldi	r25, 0x00	; 0
    7150:	0e 94 95 33 	call	0x672a	; 0x672a <toText(int)>
    7154:	bc 01       	movw	r22, r24
    7156:	81 e3       	ldi	r24, 0x31	; 49
    7158:	9e e0       	ldi	r25, 0x0E	; 14
    715a:	0e 94 23 95 	call	0x12a46	; 0x12a46 <strcat>
    715e:	6a ee       	ldi	r22, 0xEA	; 234
    7160:	70 e1       	ldi	r23, 0x10	; 16
    7162:	81 e3       	ldi	r24, 0x31	; 49
    7164:	9e e0       	ldi	r25, 0x0E	; 14
    7166:	0e 94 da 94 	call	0x129b4	; 0x129b4 <strcat_P>
    716a:	e0 91 b5 0c 	lds	r30, 0x0CB5	; 0x800cb5 <Metric>
    716e:	f0 91 b6 0c 	lds	r31, 0x0CB6	; 0x800cb6 <Metric+0x1>
    7172:	80 81       	ld	r24, Z
    7174:	90 e0       	ldi	r25, 0x00	; 0
    7176:	0e 94 95 33 	call	0x672a	; 0x672a <toText(int)>
    717a:	bc 01       	movw	r22, r24
    717c:	81 e3       	ldi	r24, 0x31	; 49
    717e:	9e e0       	ldi	r25, 0x0E	; 14
    7180:	0e 94 23 95 	call	0x12a46	; 0x12a46 <strcat>
    7184:	6c ed       	ldi	r22, 0xDC	; 220
    7186:	70 e1       	ldi	r23, 0x10	; 16
    7188:	81 e3       	ldi	r24, 0x31	; 49
    718a:	9e e0       	ldi	r25, 0x0E	; 14
    718c:	0e 94 da 94 	call	0x129b4	; 0x129b4 <strcat_P>
    7190:	e8 81       	ld	r30, Y
    7192:	f9 81       	ldd	r31, Y+1	; 0x01
    7194:	70 97       	sbiw	r30, 0x10	; 16
    7196:	01 90       	ld	r0, Z+
    7198:	f0 81       	ld	r31, Z
    719a:	e0 2d       	mov	r30, r0
    719c:	ec 0f       	add	r30, r28
    719e:	fd 1f       	adc	r31, r29
    71a0:	04 80       	ldd	r0, Z+4	; 0x04
    71a2:	f5 81       	ldd	r31, Z+5	; 0x05
    71a4:	e0 2d       	mov	r30, r0
    71a6:	80 81       	ld	r24, Z
    71a8:	91 81       	ldd	r25, Z+1	; 0x01
    71aa:	0e 94 9d 33 	call	0x673a	; 0x673a <toText(unsigned int)>
    71ae:	bc 01       	movw	r22, r24
    71b0:	81 e3       	ldi	r24, 0x31	; 49
    71b2:	9e e0       	ldi	r25, 0x0E	; 14
    71b4:	0e 94 23 95 	call	0x12a46	; 0x12a46 <strcat>
    71b8:	61 ed       	ldi	r22, 0xD1	; 209
    71ba:	70 e1       	ldi	r23, 0x10	; 16
    71bc:	81 e3       	ldi	r24, 0x31	; 49
    71be:	9e e0       	ldi	r25, 0x0E	; 14
    71c0:	0e 94 da 94 	call	0x129b4	; 0x129b4 <strcat_P>
    71c4:	e8 81       	ld	r30, Y
    71c6:	f9 81       	ldd	r31, Y+1	; 0x01
    71c8:	70 97       	sbiw	r30, 0x10	; 16
    71ca:	01 90       	ld	r0, Z+
    71cc:	f0 81       	ld	r31, Z
    71ce:	e0 2d       	mov	r30, r0
    71d0:	ec 0f       	add	r30, r28
    71d2:	fd 1f       	adc	r31, r29
    71d4:	00 84       	ldd	r0, Z+8	; 0x08
    71d6:	f1 85       	ldd	r31, Z+9	; 0x09
    71d8:	e0 2d       	mov	r30, r0
    71da:	80 81       	ld	r24, Z
    71dc:	90 e0       	ldi	r25, 0x00	; 0
    71de:	0e 94 95 33 	call	0x672a	; 0x672a <toText(int)>
    71e2:	bc 01       	movw	r22, r24
    71e4:	81 e3       	ldi	r24, 0x31	; 49
    71e6:	9e e0       	ldi	r25, 0x0E	; 14
    71e8:	0e 94 23 95 	call	0x12a46	; 0x12a46 <strcat>
    71ec:	67 ec       	ldi	r22, 0xC7	; 199
    71ee:	70 e1       	ldi	r23, 0x10	; 16
    71f0:	81 e3       	ldi	r24, 0x31	; 49
    71f2:	9e e0       	ldi	r25, 0x0E	; 14
    71f4:	0e 94 da 94 	call	0x129b4	; 0x129b4 <strcat_P>
    71f8:	e8 81       	ld	r30, Y
    71fa:	f9 81       	ldd	r31, Y+1	; 0x01
    71fc:	70 97       	sbiw	r30, 0x10	; 16
    71fe:	01 90       	ld	r0, Z+
    7200:	f0 81       	ld	r31, Z
    7202:	e0 2d       	mov	r30, r0
    7204:	ec 0f       	add	r30, r28
    7206:	fd 1f       	adc	r31, r29
    7208:	02 84       	ldd	r0, Z+10	; 0x0a
    720a:	f3 85       	ldd	r31, Z+11	; 0x0b
    720c:	e0 2d       	mov	r30, r0
    720e:	80 81       	ld	r24, Z
    7210:	90 e0       	ldi	r25, 0x00	; 0
    7212:	0e 94 95 33 	call	0x672a	; 0x672a <toText(int)>
    7216:	bc 01       	movw	r22, r24
    7218:	81 e3       	ldi	r24, 0x31	; 49
    721a:	9e e0       	ldi	r25, 0x0E	; 14
    721c:	0e 94 23 95 	call	0x12a46	; 0x12a46 <strcat>
    7220:	6c eb       	ldi	r22, 0xBC	; 188
    7222:	70 e1       	ldi	r23, 0x10	; 16
    7224:	81 e3       	ldi	r24, 0x31	; 49
    7226:	9e e0       	ldi	r25, 0x0E	; 14
    7228:	0e 94 da 94 	call	0x129b4	; 0x129b4 <strcat_P>
    722c:	e8 81       	ld	r30, Y
    722e:	f9 81       	ldd	r31, Y+1	; 0x01
    7230:	70 97       	sbiw	r30, 0x10	; 16
    7232:	01 90       	ld	r0, Z+
    7234:	f0 81       	ld	r31, Z
    7236:	e0 2d       	mov	r30, r0
    7238:	ec 0f       	add	r30, r28
    723a:	fd 1f       	adc	r31, r29
    723c:	06 84       	ldd	r0, Z+14	; 0x0e
    723e:	f7 85       	ldd	r31, Z+15	; 0x0f
    7240:	e0 2d       	mov	r30, r0
    7242:	80 81       	ld	r24, Z
    7244:	90 e0       	ldi	r25, 0x00	; 0
    7246:	0e 94 95 33 	call	0x672a	; 0x672a <toText(int)>
    724a:	bc 01       	movw	r22, r24
    724c:	81 e3       	ldi	r24, 0x31	; 49
    724e:	9e e0       	ldi	r25, 0x0E	; 14
    7250:	0e 94 23 95 	call	0x12a46	; 0x12a46 <strcat>
    7254:	60 eb       	ldi	r22, 0xB0	; 176
    7256:	70 e1       	ldi	r23, 0x10	; 16
    7258:	81 e3       	ldi	r24, 0x31	; 49
    725a:	9e e0       	ldi	r25, 0x0E	; 14
    725c:	0e 94 da 94 	call	0x129b4	; 0x129b4 <strcat_P>
    7260:	e8 81       	ld	r30, Y
    7262:	f9 81       	ldd	r31, Y+1	; 0x01
    7264:	70 97       	sbiw	r30, 0x10	; 16
    7266:	01 90       	ld	r0, Z+
    7268:	f0 81       	ld	r31, Z
    726a:	e0 2d       	mov	r30, r0
    726c:	ec 0f       	add	r30, r28
    726e:	fd 1f       	adc	r31, r29
    7270:	04 84       	ldd	r0, Z+12	; 0x0c
    7272:	f5 85       	ldd	r31, Z+13	; 0x0d
    7274:	e0 2d       	mov	r30, r0
    7276:	80 81       	ld	r24, Z
    7278:	90 e0       	ldi	r25, 0x00	; 0
    727a:	0e 94 95 33 	call	0x672a	; 0x672a <toText(int)>
    727e:	bc 01       	movw	r22, r24
    7280:	81 e3       	ldi	r24, 0x31	; 49
    7282:	9e e0       	ldi	r25, 0x0E	; 14
    7284:	0e 94 23 95 	call	0x12a46	; 0x12a46 <strcat>
    7288:	65 ea       	ldi	r22, 0xA5	; 165
    728a:	70 e1       	ldi	r23, 0x10	; 16
    728c:	81 e3       	ldi	r24, 0x31	; 49
    728e:	9e e0       	ldi	r25, 0x0E	; 14
    7290:	0e 94 da 94 	call	0x129b4	; 0x129b4 <strcat_P>
    7294:	e8 81       	ld	r30, Y
    7296:	f9 81       	ldd	r31, Y+1	; 0x01
    7298:	70 97       	sbiw	r30, 0x10	; 16
    729a:	01 90       	ld	r0, Z+
    729c:	f0 81       	ld	r31, Z
    729e:	e0 2d       	mov	r30, r0
    72a0:	ec 0f       	add	r30, r28
    72a2:	fd 1f       	adc	r31, r29
    72a4:	00 88       	ldd	r0, Z+16	; 0x10
    72a6:	f1 89       	ldd	r31, Z+17	; 0x11
    72a8:	e0 2d       	mov	r30, r0
    72aa:	80 81       	ld	r24, Z
    72ac:	90 e0       	ldi	r25, 0x00	; 0
    72ae:	0e 94 95 33 	call	0x672a	; 0x672a <toText(int)>
    72b2:	bc 01       	movw	r22, r24
    72b4:	81 e3       	ldi	r24, 0x31	; 49
    72b6:	9e e0       	ldi	r25, 0x0E	; 14
    72b8:	0e 94 23 95 	call	0x12a46	; 0x12a46 <strcat>
    72bc:	68 e9       	ldi	r22, 0x98	; 152
    72be:	70 e1       	ldi	r23, 0x10	; 16
    72c0:	81 e3       	ldi	r24, 0x31	; 49
    72c2:	9e e0       	ldi	r25, 0x0E	; 14
    72c4:	0e 94 da 94 	call	0x129b4	; 0x129b4 <strcat_P>
    72c8:	fe 01       	movw	r30, r28
    72ca:	e5 53       	subi	r30, 0x35	; 53
    72cc:	ff 4f       	sbci	r31, 0xFF	; 255
    72ce:	01 90       	ld	r0, Z+
    72d0:	f0 81       	ld	r31, Z
    72d2:	e0 2d       	mov	r30, r0
    72d4:	80 81       	ld	r24, Z
    72d6:	90 e0       	ldi	r25, 0x00	; 0
    72d8:	0e 94 95 33 	call	0x672a	; 0x672a <toText(int)>
    72dc:	bc 01       	movw	r22, r24
    72de:	81 e3       	ldi	r24, 0x31	; 49
    72e0:	9e e0       	ldi	r25, 0x0E	; 14
    72e2:	0e 94 23 95 	call	0x12a46	; 0x12a46 <strcat>
    72e6:	6a e8       	ldi	r22, 0x8A	; 138
    72e8:	70 e1       	ldi	r23, 0x10	; 16
    72ea:	81 e3       	ldi	r24, 0x31	; 49
    72ec:	9e e0       	ldi	r25, 0x0E	; 14
    72ee:	0e 94 da 94 	call	0x129b4	; 0x129b4 <strcat_P>
    72f2:	fe 01       	movw	r30, r28
    72f4:	e3 53       	subi	r30, 0x33	; 51
    72f6:	ff 4f       	sbci	r31, 0xFF	; 255
    72f8:	01 90       	ld	r0, Z+
    72fa:	f0 81       	ld	r31, Z
    72fc:	e0 2d       	mov	r30, r0
    72fe:	80 81       	ld	r24, Z
    7300:	91 81       	ldd	r25, Z+1	; 0x01
    7302:	0e 94 9d 33 	call	0x673a	; 0x673a <toText(unsigned int)>
    7306:	bc 01       	movw	r22, r24
    7308:	81 e3       	ldi	r24, 0x31	; 49
    730a:	9e e0       	ldi	r25, 0x0E	; 14
    730c:	0e 94 23 95 	call	0x12a46	; 0x12a46 <strcat>
    7310:	6e e7       	ldi	r22, 0x7E	; 126
    7312:	70 e1       	ldi	r23, 0x10	; 16
    7314:	81 e3       	ldi	r24, 0x31	; 49
    7316:	9e e0       	ldi	r25, 0x0E	; 14
    7318:	0e 94 da 94 	call	0x129b4	; 0x129b4 <strcat_P>
    731c:	60 91 b9 0c 	lds	r22, 0x0CB9	; 0x800cb9 <ModuleSettings>
    7320:	70 91 ba 0c 	lds	r23, 0x0CBA	; 0x800cba <ModuleSettings+0x1>
    7324:	6e 5f       	subi	r22, 0xFE	; 254
    7326:	7f 4f       	sbci	r23, 0xFF	; 255
    7328:	81 e3       	ldi	r24, 0x31	; 49
    732a:	9e e0       	ldi	r25, 0x0E	; 14
    732c:	0e 94 23 95 	call	0x12a46	; 0x12a46 <strcat>
    7330:	63 e7       	ldi	r22, 0x73	; 115
    7332:	70 e1       	ldi	r23, 0x10	; 16
    7334:	81 e3       	ldi	r24, 0x31	; 49
    7336:	9e e0       	ldi	r25, 0x0E	; 14
    7338:	0e 94 da 94 	call	0x129b4	; 0x129b4 <strcat_P>
    733c:	fe 01       	movw	r30, r28
    733e:	e0 53       	subi	r30, 0x30	; 48
    7340:	ff 4f       	sbci	r31, 0xFF	; 255
    7342:	01 90       	ld	r0, Z+
    7344:	f0 81       	ld	r31, Z
    7346:	e0 2d       	mov	r30, r0
    7348:	80 81       	ld	r24, Z
    734a:	90 e0       	ldi	r25, 0x00	; 0
    734c:	0e 94 95 33 	call	0x672a	; 0x672a <toText(int)>
    7350:	bc 01       	movw	r22, r24
    7352:	81 e3       	ldi	r24, 0x31	; 49
    7354:	9e e0       	ldi	r25, 0x0E	; 14
    7356:	0e 94 23 95 	call	0x12a46	; 0x12a46 <strcat>
    735a:	67 e6       	ldi	r22, 0x67	; 103
    735c:	70 e1       	ldi	r23, 0x10	; 16
    735e:	81 e3       	ldi	r24, 0x31	; 49
    7360:	9e e0       	ldi	r25, 0x0E	; 14
    7362:	0e 94 da 94 	call	0x129b4	; 0x129b4 <strcat_P>
    7366:	ce 52       	subi	r28, 0x2E	; 46
    7368:	df 4f       	sbci	r29, 0xFF	; 255
    736a:	e8 81       	ld	r30, Y
    736c:	f9 81       	ldd	r31, Y+1	; 0x01
    736e:	80 81       	ld	r24, Z
    7370:	91 81       	ldd	r25, Z+1	; 0x01
    7372:	0e 94 9d 33 	call	0x673a	; 0x673a <toText(unsigned int)>
    7376:	bc 01       	movw	r22, r24
    7378:	81 e3       	ldi	r24, 0x31	; 49
    737a:	9e e0       	ldi	r25, 0x0E	; 14
    737c:	0e 94 23 95 	call	0x12a46	; 0x12a46 <strcat>
    7380:	6d e5       	ldi	r22, 0x5D	; 93
    7382:	70 e1       	ldi	r23, 0x10	; 16
    7384:	81 e3       	ldi	r24, 0x31	; 49
    7386:	9e e0       	ldi	r25, 0x0E	; 14
    7388:	0e 94 da 94 	call	0x129b4	; 0x129b4 <strcat_P>
    738c:	60 91 b9 0c 	lds	r22, 0x0CB9	; 0x800cb9 <ModuleSettings>
    7390:	70 91 ba 0c 	lds	r23, 0x0CBA	; 0x800cba <ModuleSettings+0x1>
    7394:	6e 5d       	subi	r22, 0xDE	; 222
    7396:	7f 4f       	sbci	r23, 0xFF	; 255
    7398:	81 e3       	ldi	r24, 0x31	; 49
    739a:	9e e0       	ldi	r25, 0x0E	; 14
    739c:	0e 94 23 95 	call	0x12a46	; 0x12a46 <strcat>
    73a0:	63 e5       	ldi	r22, 0x53	; 83
    73a2:	70 e1       	ldi	r23, 0x10	; 16
    73a4:	81 e3       	ldi	r24, 0x31	; 49
    73a6:	9e e0       	ldi	r25, 0x0E	; 14
    73a8:	0e 94 da 94 	call	0x129b4	; 0x129b4 <strcat_P>
    73ac:	60 91 b9 0c 	lds	r22, 0x0CB9	; 0x800cb9 <ModuleSettings>
    73b0:	70 91 ba 0c 	lds	r23, 0x0CBA	; 0x800cba <ModuleSettings+0x1>
    73b4:	6e 55       	subi	r22, 0x5E	; 94
    73b6:	7f 4f       	sbci	r23, 0xFF	; 255
    73b8:	81 e3       	ldi	r24, 0x31	; 49
    73ba:	9e e0       	ldi	r25, 0x0E	; 14
    73bc:	0e 94 23 95 	call	0x12a46	; 0x12a46 <strcat>
    73c0:	69 e4       	ldi	r22, 0x49	; 73
    73c2:	70 e1       	ldi	r23, 0x10	; 16
    73c4:	81 e3       	ldi	r24, 0x31	; 49
    73c6:	9e e0       	ldi	r25, 0x0E	; 14
    73c8:	0e 94 da 94 	call	0x129b4	; 0x129b4 <strcat_P>
    73cc:	60 91 b9 0c 	lds	r22, 0x0CB9	; 0x800cb9 <ModuleSettings>
    73d0:	70 91 ba 0c 	lds	r23, 0x0CBA	; 0x800cba <ModuleSettings+0x1>
    73d4:	6e 5d       	subi	r22, 0xDE	; 222
    73d6:	7e 4f       	sbci	r23, 0xFE	; 254
    73d8:	81 e3       	ldi	r24, 0x31	; 49
    73da:	9e e0       	ldi	r25, 0x0E	; 14
    73dc:	0e 94 23 95 	call	0x12a46	; 0x12a46 <strcat>
    73e0:	6f e3       	ldi	r22, 0x3F	; 63
    73e2:	70 e1       	ldi	r23, 0x10	; 16
    73e4:	81 e3       	ldi	r24, 0x31	; 49
    73e6:	9e e0       	ldi	r25, 0x0E	; 14
    73e8:	0e 94 da 94 	call	0x129b4	; 0x129b4 <strcat_P>
    73ec:	60 91 b9 0c 	lds	r22, 0x0CB9	; 0x800cb9 <ModuleSettings>
    73f0:	70 91 ba 0c 	lds	r23, 0x0CBA	; 0x800cba <ModuleSettings+0x1>
    73f4:	6e 55       	subi	r22, 0x5E	; 94
    73f6:	7e 4f       	sbci	r23, 0xFE	; 254
    73f8:	81 e3       	ldi	r24, 0x31	; 49
    73fa:	9e e0       	ldi	r25, 0x0E	; 14
    73fc:	0e 94 23 95 	call	0x12a46	; 0x12a46 <strcat>
    7400:	6b e3       	ldi	r22, 0x3B	; 59
    7402:	70 e1       	ldi	r23, 0x10	; 16
    7404:	81 e3       	ldi	r24, 0x31	; 49
    7406:	9e e0       	ldi	r25, 0x0E	; 14
    7408:	0e 94 da 94 	call	0x129b4	; 0x129b4 <strcat_P>
    740c:	81 e3       	ldi	r24, 0x31	; 49
    740e:	9e e0       	ldi	r25, 0x0E	; 14
    7410:	df 91       	pop	r29
    7412:	cf 91       	pop	r28
    7414:	08 95       	ret

00007416 <Module_Web::settingsEvent_Load(char*)>:
_ZN10Module_Web18settingsEvent_LoadEPc():
    7416:	1f 93       	push	r17
    7418:	cf 93       	push	r28
    741a:	df 93       	push	r29
    741c:	ec 01       	movw	r28, r24
    741e:	e0 91 b7 0c 	lds	r30, 0x0CB7	; 0x800cb7 <Debug>
    7422:	f0 91 b8 0c 	lds	r31, 0x0CB8	; 0x800cb8 <Debug+0x1>
    7426:	20 81       	ld	r18, Z
    7428:	30 e0       	ldi	r19, 0x00	; 0
    742a:	50 e0       	ldi	r21, 0x00	; 0
    742c:	40 e0       	ldi	r20, 0x00	; 0
    742e:	65 e3       	ldi	r22, 0x35	; 53
    7430:	70 e1       	ldi	r23, 0x10	; 16
    7432:	89 ee       	ldi	r24, 0xE9	; 233
    7434:	9c e0       	ldi	r25, 0x0C	; 12
    7436:	0e 94 75 79 	call	0xf2ea	; 0xf2ea <ELClientWebServer::setArgInt(__FlashStringHelper const*, long)>
    743a:	e0 91 b5 0c 	lds	r30, 0x0CB5	; 0x800cb5 <Metric>
    743e:	f0 91 b6 0c 	lds	r31, 0x0CB6	; 0x800cb6 <Metric+0x1>
    7442:	20 81       	ld	r18, Z
    7444:	30 e0       	ldi	r19, 0x00	; 0
    7446:	50 e0       	ldi	r21, 0x00	; 0
    7448:	40 e0       	ldi	r20, 0x00	; 0
    744a:	6e e2       	ldi	r22, 0x2E	; 46
    744c:	70 e1       	ldi	r23, 0x10	; 16
    744e:	89 ee       	ldi	r24, 0xE9	; 233
    7450:	9c e0       	ldi	r25, 0x0C	; 12
    7452:	0e 94 75 79 	call	0xf2ea	; 0xf2ea <ELClientWebServer::setArgInt(__FlashStringHelper const*, long)>
    7456:	e8 81       	ld	r30, Y
    7458:	f9 81       	ldd	r31, Y+1	; 0x01
    745a:	70 97       	sbiw	r30, 0x10	; 16
    745c:	01 90       	ld	r0, Z+
    745e:	f0 81       	ld	r31, Z
    7460:	e0 2d       	mov	r30, r0
    7462:	ec 0f       	add	r30, r28
    7464:	fd 1f       	adc	r31, r29
    7466:	04 80       	ldd	r0, Z+4	; 0x04
    7468:	f5 81       	ldd	r31, Z+5	; 0x05
    746a:	e0 2d       	mov	r30, r0
    746c:	20 81       	ld	r18, Z
    746e:	31 81       	ldd	r19, Z+1	; 0x01
    7470:	50 e0       	ldi	r21, 0x00	; 0
    7472:	40 e0       	ldi	r20, 0x00	; 0
    7474:	66 e2       	ldi	r22, 0x26	; 38
    7476:	70 e1       	ldi	r23, 0x10	; 16
    7478:	89 ee       	ldi	r24, 0xE9	; 233
    747a:	9c e0       	ldi	r25, 0x0C	; 12
    747c:	0e 94 75 79 	call	0xf2ea	; 0xf2ea <ELClientWebServer::setArgInt(__FlashStringHelper const*, long)>
    7480:	e8 81       	ld	r30, Y
    7482:	f9 81       	ldd	r31, Y+1	; 0x01
    7484:	70 97       	sbiw	r30, 0x10	; 16
    7486:	01 90       	ld	r0, Z+
    7488:	f0 81       	ld	r31, Z
    748a:	e0 2d       	mov	r30, r0
    748c:	ec 0f       	add	r30, r28
    748e:	fd 1f       	adc	r31, r29
    7490:	00 84       	ldd	r0, Z+8	; 0x08
    7492:	f1 85       	ldd	r31, Z+9	; 0x09
    7494:	e0 2d       	mov	r30, r0
    7496:	20 81       	ld	r18, Z
    7498:	30 e0       	ldi	r19, 0x00	; 0
    749a:	50 e0       	ldi	r21, 0x00	; 0
    749c:	40 e0       	ldi	r20, 0x00	; 0
    749e:	61 e2       	ldi	r22, 0x21	; 33
    74a0:	70 e1       	ldi	r23, 0x10	; 16
    74a2:	89 ee       	ldi	r24, 0xE9	; 233
    74a4:	9c e0       	ldi	r25, 0x0C	; 12
    74a6:	0e 94 75 79 	call	0xf2ea	; 0xf2ea <ELClientWebServer::setArgInt(__FlashStringHelper const*, long)>
    74aa:	e8 81       	ld	r30, Y
    74ac:	f9 81       	ldd	r31, Y+1	; 0x01
    74ae:	70 97       	sbiw	r30, 0x10	; 16
    74b0:	01 90       	ld	r0, Z+
    74b2:	f0 81       	ld	r31, Z
    74b4:	e0 2d       	mov	r30, r0
    74b6:	ec 0f       	add	r30, r28
    74b8:	fd 1f       	adc	r31, r29
    74ba:	02 84       	ldd	r0, Z+10	; 0x0a
    74bc:	f3 85       	ldd	r31, Z+11	; 0x0b
    74be:	e0 2d       	mov	r30, r0
    74c0:	20 81       	ld	r18, Z
    74c2:	30 e0       	ldi	r19, 0x00	; 0
    74c4:	50 e0       	ldi	r21, 0x00	; 0
    74c6:	40 e0       	ldi	r20, 0x00	; 0
    74c8:	6d e1       	ldi	r22, 0x1D	; 29
    74ca:	70 e1       	ldi	r23, 0x10	; 16
    74cc:	89 ee       	ldi	r24, 0xE9	; 233
    74ce:	9c e0       	ldi	r25, 0x0C	; 12
    74d0:	0e 94 75 79 	call	0xf2ea	; 0xf2ea <ELClientWebServer::setArgInt(__FlashStringHelper const*, long)>
    74d4:	e8 81       	ld	r30, Y
    74d6:	f9 81       	ldd	r31, Y+1	; 0x01
    74d8:	70 97       	sbiw	r30, 0x10	; 16
    74da:	01 90       	ld	r0, Z+
    74dc:	f0 81       	ld	r31, Z
    74de:	e0 2d       	mov	r30, r0
    74e0:	ec 0f       	add	r30, r28
    74e2:	fd 1f       	adc	r31, r29
    74e4:	06 84       	ldd	r0, Z+14	; 0x0e
    74e6:	f7 85       	ldd	r31, Z+15	; 0x0f
    74e8:	e0 2d       	mov	r30, r0
    74ea:	20 81       	ld	r18, Z
    74ec:	30 e0       	ldi	r19, 0x00	; 0
    74ee:	50 e0       	ldi	r21, 0x00	; 0
    74f0:	40 e0       	ldi	r20, 0x00	; 0
    74f2:	68 e1       	ldi	r22, 0x18	; 24
    74f4:	70 e1       	ldi	r23, 0x10	; 16
    74f6:	89 ee       	ldi	r24, 0xE9	; 233
    74f8:	9c e0       	ldi	r25, 0x0C	; 12
    74fa:	0e 94 75 79 	call	0xf2ea	; 0xf2ea <ELClientWebServer::setArgInt(__FlashStringHelper const*, long)>
    74fe:	e8 81       	ld	r30, Y
    7500:	f9 81       	ldd	r31, Y+1	; 0x01
    7502:	70 97       	sbiw	r30, 0x10	; 16
    7504:	01 90       	ld	r0, Z+
    7506:	f0 81       	ld	r31, Z
    7508:	e0 2d       	mov	r30, r0
    750a:	ec 0f       	add	r30, r28
    750c:	fd 1f       	adc	r31, r29
    750e:	04 84       	ldd	r0, Z+12	; 0x0c
    7510:	f5 85       	ldd	r31, Z+13	; 0x0d
    7512:	e0 2d       	mov	r30, r0
    7514:	20 81       	ld	r18, Z
    7516:	30 e0       	ldi	r19, 0x00	; 0
    7518:	50 e0       	ldi	r21, 0x00	; 0
    751a:	40 e0       	ldi	r20, 0x00	; 0
    751c:	62 e1       	ldi	r22, 0x12	; 18
    751e:	70 e1       	ldi	r23, 0x10	; 16
    7520:	89 ee       	ldi	r24, 0xE9	; 233
    7522:	9c e0       	ldi	r25, 0x0C	; 12
    7524:	0e 94 75 79 	call	0xf2ea	; 0xf2ea <ELClientWebServer::setArgInt(__FlashStringHelper const*, long)>
    7528:	e8 81       	ld	r30, Y
    752a:	f9 81       	ldd	r31, Y+1	; 0x01
    752c:	70 97       	sbiw	r30, 0x10	; 16
    752e:	01 90       	ld	r0, Z+
    7530:	f0 81       	ld	r31, Z
    7532:	e0 2d       	mov	r30, r0
    7534:	ec 0f       	add	r30, r28
    7536:	fd 1f       	adc	r31, r29
    7538:	00 88       	ldd	r0, Z+16	; 0x10
    753a:	f1 89       	ldd	r31, Z+17	; 0x11
    753c:	e0 2d       	mov	r30, r0
    753e:	20 81       	ld	r18, Z
    7540:	30 e0       	ldi	r19, 0x00	; 0
    7542:	50 e0       	ldi	r21, 0x00	; 0
    7544:	40 e0       	ldi	r20, 0x00	; 0
    7546:	6d e0       	ldi	r22, 0x0D	; 13
    7548:	70 e1       	ldi	r23, 0x10	; 16
    754a:	89 ee       	ldi	r24, 0xE9	; 233
    754c:	9c e0       	ldi	r25, 0x0C	; 12
    754e:	0e 94 75 79 	call	0xf2ea	; 0xf2ea <ELClientWebServer::setArgInt(__FlashStringHelper const*, long)>
    7552:	fe 01       	movw	r30, r28
    7554:	e5 53       	subi	r30, 0x35	; 53
    7556:	ff 4f       	sbci	r31, 0xFF	; 255
    7558:	01 90       	ld	r0, Z+
    755a:	f0 81       	ld	r31, Z
    755c:	e0 2d       	mov	r30, r0
    755e:	40 81       	ld	r20, Z
    7560:	66 e0       	ldi	r22, 0x06	; 6
    7562:	70 e1       	ldi	r23, 0x10	; 16
    7564:	89 ee       	ldi	r24, 0xE9	; 233
    7566:	9c e0       	ldi	r25, 0x0C	; 12
    7568:	0e 94 c1 78 	call	0xf182	; 0xf182 <ELClientWebServer::setArgBoolean(__FlashStringHelper const*, unsigned char)>
    756c:	fe 01       	movw	r30, r28
    756e:	e3 53       	subi	r30, 0x33	; 51
    7570:	ff 4f       	sbci	r31, 0xFF	; 255
    7572:	01 90       	ld	r0, Z+
    7574:	f0 81       	ld	r31, Z
    7576:	e0 2d       	mov	r30, r0
    7578:	20 81       	ld	r18, Z
    757a:	31 81       	ldd	r19, Z+1	; 0x01
    757c:	50 e0       	ldi	r21, 0x00	; 0
    757e:	40 e0       	ldi	r20, 0x00	; 0
    7580:	6e ef       	ldi	r22, 0xFE	; 254
    7582:	7f e0       	ldi	r23, 0x0F	; 15
    7584:	89 ee       	ldi	r24, 0xE9	; 233
    7586:	9c e0       	ldi	r25, 0x0C	; 12
    7588:	0e 94 75 79 	call	0xf2ea	; 0xf2ea <ELClientWebServer::setArgInt(__FlashStringHelper const*, long)>
    758c:	40 91 b9 0c 	lds	r20, 0x0CB9	; 0x800cb9 <ModuleSettings>
    7590:	50 91 ba 0c 	lds	r21, 0x0CBA	; 0x800cba <ModuleSettings+0x1>
    7594:	4e 5f       	subi	r20, 0xFE	; 254
    7596:	5f 4f       	sbci	r21, 0xFF	; 255
    7598:	68 ef       	ldi	r22, 0xF8	; 248
    759a:	7f e0       	ldi	r23, 0x0F	; 15
    759c:	89 ee       	ldi	r24, 0xE9	; 233
    759e:	9c e0       	ldi	r25, 0x0C	; 12
    75a0:	0e 94 0a 78 	call	0xf014	; 0xf014 <ELClientWebServer::setArgString(__FlashStringHelper const*, char const*)>
    75a4:	fe 01       	movw	r30, r28
    75a6:	e0 53       	subi	r30, 0x30	; 48
    75a8:	ff 4f       	sbci	r31, 0xFF	; 255
    75aa:	01 90       	ld	r0, Z+
    75ac:	f0 81       	ld	r31, Z
    75ae:	e0 2d       	mov	r30, r0
    75b0:	40 81       	ld	r20, Z
    75b2:	63 ef       	ldi	r22, 0xF3	; 243
    75b4:	7f e0       	ldi	r23, 0x0F	; 15
    75b6:	89 ee       	ldi	r24, 0xE9	; 233
    75b8:	9c e0       	ldi	r25, 0x0C	; 12
    75ba:	0e 94 c1 78 	call	0xf182	; 0xf182 <ELClientWebServer::setArgBoolean(__FlashStringHelper const*, unsigned char)>
    75be:	fe 01       	movw	r30, r28
    75c0:	ee 52       	subi	r30, 0x2E	; 46
    75c2:	ff 4f       	sbci	r31, 0xFF	; 255
    75c4:	01 90       	ld	r0, Z+
    75c6:	f0 81       	ld	r31, Z
    75c8:	e0 2d       	mov	r30, r0
    75ca:	20 81       	ld	r18, Z
    75cc:	31 81       	ldd	r19, Z+1	; 0x01
    75ce:	50 e0       	ldi	r21, 0x00	; 0
    75d0:	40 e0       	ldi	r20, 0x00	; 0
    75d2:	6d ee       	ldi	r22, 0xED	; 237
    75d4:	7f e0       	ldi	r23, 0x0F	; 15
    75d6:	89 ee       	ldi	r24, 0xE9	; 233
    75d8:	9c e0       	ldi	r25, 0x0C	; 12
    75da:	0e 94 75 79 	call	0xf2ea	; 0xf2ea <ELClientWebServer::setArgInt(__FlashStringHelper const*, long)>
    75de:	40 91 b9 0c 	lds	r20, 0x0CB9	; 0x800cb9 <ModuleSettings>
    75e2:	50 91 ba 0c 	lds	r21, 0x0CBA	; 0x800cba <ModuleSettings+0x1>
    75e6:	4e 5d       	subi	r20, 0xDE	; 222
    75e8:	5f 4f       	sbci	r21, 0xFF	; 255
    75ea:	69 ee       	ldi	r22, 0xE9	; 233
    75ec:	7f e0       	ldi	r23, 0x0F	; 15
    75ee:	89 ee       	ldi	r24, 0xE9	; 233
    75f0:	9c e0       	ldi	r25, 0x0C	; 12
    75f2:	0e 94 0a 78 	call	0xf014	; 0xf014 <ELClientWebServer::setArgString(__FlashStringHelper const*, char const*)>
    75f6:	40 91 b9 0c 	lds	r20, 0x0CB9	; 0x800cb9 <ModuleSettings>
    75fa:	50 91 ba 0c 	lds	r21, 0x0CBA	; 0x800cba <ModuleSettings+0x1>
    75fe:	4e 55       	subi	r20, 0x5E	; 94
    7600:	5f 4f       	sbci	r21, 0xFF	; 255
    7602:	65 ee       	ldi	r22, 0xE5	; 229
    7604:	7f e0       	ldi	r23, 0x0F	; 15
    7606:	89 ee       	ldi	r24, 0xE9	; 233
    7608:	9c e0       	ldi	r25, 0x0C	; 12
    760a:	0e 94 0a 78 	call	0xf014	; 0xf014 <ELClientWebServer::setArgString(__FlashStringHelper const*, char const*)>
    760e:	40 91 b9 0c 	lds	r20, 0x0CB9	; 0x800cb9 <ModuleSettings>
    7612:	50 91 ba 0c 	lds	r21, 0x0CBA	; 0x800cba <ModuleSettings+0x1>
    7616:	4e 5d       	subi	r20, 0xDE	; 222
    7618:	5e 4f       	sbci	r21, 0xFE	; 254
    761a:	61 ee       	ldi	r22, 0xE1	; 225
    761c:	7f e0       	ldi	r23, 0x0F	; 15
    761e:	89 ee       	ldi	r24, 0xE9	; 233
    7620:	9c e0       	ldi	r25, 0x0C	; 12
    7622:	0e 94 0a 78 	call	0xf014	; 0xf014 <ELClientWebServer::setArgString(__FlashStringHelper const*, char const*)>
    7626:	40 91 b9 0c 	lds	r20, 0x0CB9	; 0x800cb9 <ModuleSettings>
    762a:	50 91 ba 0c 	lds	r21, 0x0CBA	; 0x800cba <ModuleSettings+0x1>
    762e:	4e 55       	subi	r20, 0x5E	; 94
    7630:	5e 4f       	sbci	r21, 0xFE	; 254
    7632:	6d ed       	ldi	r22, 0xDD	; 221
    7634:	7f e0       	ldi	r23, 0x0F	; 15
    7636:	89 ee       	ldi	r24, 0xE9	; 233
    7638:	9c e0       	ldi	r25, 0x0C	; 12
    763a:	0e 94 0a 78 	call	0xf014	; 0xf014 <ELClientWebServer::setArgString(__FlashStringHelper const*, char const*)>
    763e:	8a 81       	ldd	r24, Y+2	; 0x02
    7640:	9b 81       	ldd	r25, Y+3	; 0x03
    7642:	02 96       	adiw	r24, 0x02	; 2
    7644:	0e 94 e5 2b 	call	0x57ca	; 0x57ca <Sound::getEnabledState()>
    7648:	18 2f       	mov	r17, r24
_ZN10Module_Web14getSoundObjectEv():
    764a:	aa 81       	ldd	r26, Y+2	; 0x02
    764c:	bb 81       	ldd	r27, Y+3	; 0x03
_ZN10Module_Web18settingsEvent_LoadEPc():
    764e:	ed 91       	ld	r30, X+
    7650:	fc 91       	ld	r31, X
    7652:	11 97       	sbiw	r26, 0x01	; 1
    7654:	36 97       	sbiw	r30, 0x06	; 6
    7656:	80 81       	ld	r24, Z
    7658:	91 81       	ldd	r25, Z+1	; 0x01
    765a:	41 e0       	ldi	r20, 0x01	; 1
    765c:	6b ed       	ldi	r22, 0xDB	; 219
    765e:	7f e0       	ldi	r23, 0x0F	; 15
    7660:	8a 0f       	add	r24, r26
    7662:	9b 1f       	adc	r25, r27
    7664:	0e 94 7e 19 	call	0x32fc	; 0x32fc <Common::getName(__FlashStringHelper const*, bool)>
    7668:	21 2f       	mov	r18, r17
    766a:	30 e0       	ldi	r19, 0x00	; 0
    766c:	50 e0       	ldi	r21, 0x00	; 0
    766e:	40 e0       	ldi	r20, 0x00	; 0
    7670:	bc 01       	movw	r22, r24
    7672:	89 ee       	ldi	r24, 0xE9	; 233
    7674:	9c e0       	ldi	r25, 0x0C	; 12
    7676:	df 91       	pop	r29
    7678:	cf 91       	pop	r28
    767a:	1f 91       	pop	r17
    767c:	0c 94 17 79 	jmp	0xf22e	; 0xf22e <ELClientWebServer::setArgInt(char const*, long)>

00007680 <Module_Web::settingsEvent_Refresh(char*)>:
_ZN10Module_Web21settingsEvent_RefreshEPc():
    7680:	cf 93       	push	r28
    7682:	df 93       	push	r29
    7684:	ec 01       	movw	r28, r24
    7686:	e8 81       	ld	r30, Y
    7688:	f9 81       	ldd	r31, Y+1	; 0x01
    768a:	70 97       	sbiw	r30, 0x10	; 16
    768c:	80 81       	ld	r24, Z
    768e:	91 81       	ldd	r25, Z+1	; 0x01
    7690:	60 e0       	ldi	r22, 0x00	; 0
    7692:	8c 0f       	add	r24, r28
    7694:	9d 1f       	adc	r25, r29
    7696:	0e 94 c3 1b 	call	0x3786	; 0x3786 <Module::getFormattedTime(bool)>
    769a:	ac 01       	movw	r20, r24
    769c:	66 ed       	ldi	r22, 0xD6	; 214
    769e:	7f e0       	ldi	r23, 0x0F	; 15
    76a0:	89 ee       	ldi	r24, 0xE9	; 233
    76a2:	9c e0       	ldi	r25, 0x0C	; 12
    76a4:	0e 94 0a 78 	call	0xf014	; 0xf014 <ELClientWebServer::setArgString(__FlashStringHelper const*, char const*)>
    76a8:	41 e0       	ldi	r20, 0x01	; 1
    76aa:	60 e0       	ldi	r22, 0x00	; 0
    76ac:	ce 01       	movw	r24, r28
    76ae:	0e 94 2f 38 	call	0x705e	; 0x705e <Module_Web::eventLogToJSON(bool, bool)>
    76b2:	ac 01       	movw	r20, r24
    76b4:	62 ed       	ldi	r22, 0xD2	; 210
    76b6:	7f e0       	ldi	r23, 0x0F	; 15
    76b8:	89 ee       	ldi	r24, 0xE9	; 233
    76ba:	9c e0       	ldi	r25, 0x0C	; 12
    76bc:	df 91       	pop	r29
    76be:	cf 91       	pop	r28
    76c0:	0c 94 44 77 	jmp	0xee88	; 0xee88 <ELClientWebServer::setArgJson(__FlashStringHelper const*, char const*)>

000076c4 <Module_Web::addPushingBoxLogRelayID()>:
_ZN10Module_Web23addPushingBoxLogRelayIDEv():
    76c4:	e1 e3       	ldi	r30, 0x31	; 49
    76c6:	fe e0       	ldi	r31, 0x0E	; 14
    76c8:	80 e0       	ldi	r24, 0x00	; 0
    76ca:	94 e0       	ldi	r25, 0x04	; 4
    76cc:	df 01       	movw	r26, r30
    76ce:	9c 01       	movw	r18, r24
    76d0:	1d 92       	st	X+, r1
    76d2:	21 50       	subi	r18, 0x01	; 1
    76d4:	30 40       	sbci	r19, 0x00	; 0
    76d6:	e1 f7       	brne	.-8      	; 0x76d0 <Module_Web::addPushingBoxLogRelayID()+0xc>
    76d8:	63 ef       	ldi	r22, 0xF3	; 243
    76da:	7e e0       	ldi	r23, 0x0E	; 14
    76dc:	cf 01       	movw	r24, r30
    76de:	0e 94 da 94 	call	0x129b4	; 0x129b4 <strcat_P>
    76e2:	60 91 b9 0c 	lds	r22, 0x0CB9	; 0x800cb9 <ModuleSettings>
    76e6:	70 91 ba 0c 	lds	r23, 0x0CBA	; 0x800cba <ModuleSettings+0x1>
    76ea:	6e 5f       	subi	r22, 0xFE	; 254
    76ec:	7f 4f       	sbci	r23, 0xFF	; 255
    76ee:	81 e3       	ldi	r24, 0x31	; 49
    76f0:	9e e0       	ldi	r25, 0x0E	; 14
    76f2:	0e 94 23 95 	call	0x12a46	; 0x12a46 <strcat>
    76f6:	69 ee       	ldi	r22, 0xE9	; 233
    76f8:	7e e0       	ldi	r23, 0x0E	; 14
    76fa:	81 e3       	ldi	r24, 0x31	; 49
    76fc:	9e e0       	ldi	r25, 0x0E	; 14
    76fe:	0c 94 da 94 	jmp	0x129b4	; 0x129b4 <strcat_P>

00007702 <Module_Web::relayToGoogleSheets(char (*) [1024])>:
_ZN10Module_Web19relayToGoogleSheetsEPA1024_c():
    7702:	cf 93       	push	r28
    7704:	df 93       	push	r29
    7706:	eb 01       	movw	r28, r22
    7708:	e0 91 b7 0c 	lds	r30, 0x0CB7	; 0x800cb7 <Debug>
    770c:	f0 91 b8 0c 	lds	r31, 0x0CB8	; 0x800cb8 <Debug+0x1>
    7710:	80 81       	ld	r24, Z
    7712:	88 23       	and	r24, r24
    7714:	49 f0       	breq	.+18     	; 0x7728 <Module_Web::relayToGoogleSheets(char (*) [1024])+0x26>
    7716:	42 e0       	ldi	r20, 0x02	; 2
    7718:	60 e0       	ldi	r22, 0x00	; 0
    771a:	82 ec       	ldi	r24, 0xC2	; 194
    771c:	9e e0       	ldi	r25, 0x0E	; 14
    771e:	0e 94 85 16 	call	0x2d0a	; 0x2d0a <logToSerials(__FlashStringHelper const*, bool, unsigned char)>
_Z12logToSerialsIA1024_cEvPT_bh():
    7722:	ce 01       	movw	r24, r28
    7724:	0e 94 2e 36 	call	0x6c5c	; 0x6c5c <void logToSerials<char [1024]>(char (*) [1024], bool, unsigned char) [clone .part.5]>
_ZN10Module_Web19relayToGoogleSheetsEPA1024_c():
    7728:	50 e0       	ldi	r21, 0x00	; 0
    772a:	40 e0       	ldi	r20, 0x00	; 0
    772c:	be 01       	movw	r22, r28
    772e:	85 ed       	ldi	r24, 0xD5	; 213
    7730:	9c e0       	ldi	r25, 0x0C	; 12
    7732:	df 91       	pop	r29
    7734:	cf 91       	pop	r28
    7736:	0c 94 1f 75 	jmp	0xea3e	; 0xea3e <ELClientRest::get(char const*, char const*)>

0000773a <Module_Web::mqttPublish(char (*) [1024])>:
_ZN10Module_Web11mqttPublishEPA1024_c():
    773a:	cf 92       	push	r12
    773c:	df 92       	push	r13
    773e:	ef 92       	push	r14
    7740:	ff 92       	push	r15
    7742:	0f 93       	push	r16
    7744:	1f 93       	push	r17
    7746:	cf 93       	push	r28
    7748:	df 93       	push	r29
    774a:	6b 01       	movw	r12, r22
    774c:	e0 91 b7 0c 	lds	r30, 0x0CB7	; 0x800cb7 <Debug>
    7750:	f0 91 b8 0c 	lds	r31, 0x0CB8	; 0x800cb8 <Debug+0x1>
    7754:	80 81       	ld	r24, Z
    7756:	88 23       	and	r24, r24
    7758:	49 f1       	breq	.+82     	; 0x77ac <Module_Web::mqttPublish(char (*) [1024])+0x72>
    775a:	42 e0       	ldi	r20, 0x02	; 2
    775c:	60 e0       	ldi	r22, 0x00	; 0
    775e:	82 eb       	ldi	r24, 0xB2	; 178
    7760:	9e e0       	ldi	r25, 0x0E	; 14
    7762:	0e 94 85 16 	call	0x2d0a	; 0x2d0a <logToSerials(__FlashStringHelper const*, bool, unsigned char)>
    7766:	00 91 b9 0c 	lds	r16, 0x0CB9	; 0x800cb9 <ModuleSettings>
    776a:	10 91 ba 0c 	lds	r17, 0x0CBA	; 0x800cba <ModuleSettings+0x1>
    776e:	0e 5d       	subi	r16, 0xDE	; 222
    7770:	1f 4f       	sbci	r17, 0xFF	; 255
_Z12logToSerialsIA128_cEvPT_bh():
    7772:	e0 90 2f 04 	lds	r14, 0x042F	; 0x80042f <ArduinoSerial>
    7776:	f0 90 30 04 	lds	r15, 0x0430	; 0x800430 <ArduinoSerial+0x1>
    777a:	61 e3       	ldi	r22, 0x31	; 49
    777c:	7c e0       	ldi	r23, 0x0C	; 12
    777e:	c7 01       	movw	r24, r14
    7780:	0e 94 6c 8b 	call	0x116d8	; 0x116d8 <Print::print(__FlashStringHelper const*)>
    7784:	c0 91 2d 04 	lds	r28, 0x042D	; 0x80042d <ESPSerial>
    7788:	d0 91 2e 04 	lds	r29, 0x042E	; 0x80042e <ESPSerial+0x1>
    778c:	6f e2       	ldi	r22, 0x2F	; 47
    778e:	7c e0       	ldi	r23, 0x0C	; 12
    7790:	ce 01       	movw	r24, r28
    7792:	0e 94 6c 8b 	call	0x116d8	; 0x116d8 <Print::print(__FlashStringHelper const*)>
    7796:	b8 01       	movw	r22, r16
    7798:	c7 01       	movw	r24, r14
    779a:	0e 94 9e 8b 	call	0x1173c	; 0x1173c <Print::print(char const*)>
    779e:	b8 01       	movw	r22, r16
    77a0:	ce 01       	movw	r24, r28
    77a2:	0e 94 9e 8b 	call	0x1173c	; 0x1173c <Print::print(char const*)>
_Z12logToSerialsIA1024_cEvPT_bh():
    77a6:	c6 01       	movw	r24, r12
    77a8:	0e 94 2e 36 	call	0x6c5c	; 0x6c5c <void logToSerials<char [1024]>(char (*) [1024], bool, unsigned char) [clone .part.5]>
_ZN10Module_Web11mqttPublishEPA1024_c():
    77ac:	80 91 b4 0c 	lds	r24, 0x0CB4	; 0x800cb4 <MqttConnected>
    77b0:	88 23       	and	r24, r24
    77b2:	b1 f0       	breq	.+44     	; 0x77e0 <Module_Web::mqttPublish(char (*) [1024])+0xa6>
    77b4:	60 91 b9 0c 	lds	r22, 0x0CB9	; 0x800cb9 <ModuleSettings>
    77b8:	70 91 ba 0c 	lds	r23, 0x0CBA	; 0x800cba <ModuleSettings+0x1>
    77bc:	6e 5d       	subi	r22, 0xDE	; 222
    77be:	7f 4f       	sbci	r23, 0xFF	; 255
    77c0:	01 e0       	ldi	r16, 0x01	; 1
    77c2:	20 e0       	ldi	r18, 0x00	; 0
    77c4:	a6 01       	movw	r20, r12
    77c6:	8b eb       	ldi	r24, 0xBB	; 187
    77c8:	9c e0       	ldi	r25, 0x0C	; 12
    77ca:	0e 94 11 73 	call	0xe622	; 0xe622 <ELClientMqtt::publish(char const*, char const*, unsigned char, unsigned char)>
    77ce:	df 91       	pop	r29
    77d0:	cf 91       	pop	r28
    77d2:	1f 91       	pop	r17
    77d4:	0f 91       	pop	r16
    77d6:	ff 90       	pop	r15
    77d8:	ef 90       	pop	r14
    77da:	df 90       	pop	r13
    77dc:	cf 90       	pop	r12
    77de:	08 95       	ret
    77e0:	e0 91 b7 0c 	lds	r30, 0x0CB7	; 0x800cb7 <Debug>
    77e4:	f0 91 b8 0c 	lds	r31, 0x0CB8	; 0x800cb8 <Debug+0x1>
    77e8:	80 81       	ld	r24, Z
    77ea:	88 23       	and	r24, r24
    77ec:	81 f3       	breq	.-32     	; 0x77ce <Module_Web::mqttPublish(char (*) [1024])+0x94>
    77ee:	42 e0       	ldi	r20, 0x02	; 2
    77f0:	61 e0       	ldi	r22, 0x01	; 1
    77f2:	88 e9       	ldi	r24, 0x98	; 152
    77f4:	9e e0       	ldi	r25, 0x0E	; 14
    77f6:	df 91       	pop	r29
    77f8:	cf 91       	pop	r28
    77fa:	1f 91       	pop	r17
    77fc:	0f 91       	pop	r16
    77fe:	ff 90       	pop	r15
    7800:	ef 90       	pop	r14
    7802:	df 90       	pop	r13
    7804:	cf 90       	pop	r12
    7806:	0c 94 85 16 	jmp	0x2d0a	; 0x2d0a <logToSerials(__FlashStringHelper const*, bool, unsigned char)>

0000780a <Module_Web::setDebug(bool)>:
_ZN10Module_Web8setDebugEb():
    780a:	cf 93       	push	r28
    780c:	df 93       	push	r29
    780e:	ec 01       	movw	r28, r24
    7810:	e0 91 b7 0c 	lds	r30, 0x0CB7	; 0x800cb7 <Debug>
    7814:	f0 91 b8 0c 	lds	r31, 0x0CB8	; 0x800cb8 <Debug+0x1>
    7818:	60 83       	st	Z, r22
    781a:	e8 81       	ld	r30, Y
    781c:	f9 81       	ldd	r31, Y+1	; 0x01
    781e:	02 84       	ldd	r0, Z+10	; 0x0a
    7820:	f3 85       	ldd	r31, Z+11	; 0x0b
    7822:	e0 2d       	mov	r30, r0
    7824:	43 e0       	ldi	r20, 0x03	; 3
    7826:	66 23       	and	r22, r22
    7828:	81 f0       	breq	.+32     	; 0x784a <Module_Web::setDebug(bool)+0x40>
    782a:	6f e8       	ldi	r22, 0x8F	; 143
    782c:	7e e0       	ldi	r23, 0x0E	; 14
    782e:	ce 01       	movw	r24, r28
    7830:	19 95       	eicall
    7832:	e0 91 b7 0c 	lds	r30, 0x0CB7	; 0x800cb7 <Debug>
    7836:	f0 91 b8 0c 	lds	r31, 0x0CB8	; 0x800cb8 <Debug+0x1>
    783a:	8a 81       	ldd	r24, Y+2	; 0x02
    783c:	9b 81       	ldd	r25, Y+3	; 0x03
    783e:	60 81       	ld	r22, Z
    7840:	02 96       	adiw	r24, 0x02	; 2
    7842:	df 91       	pop	r29
    7844:	cf 91       	pop	r28
    7846:	0c 94 c7 2a 	jmp	0x558e	; 0x558e <Sound::playOnOffSound(bool)>
    784a:	65 e8       	ldi	r22, 0x85	; 133
    784c:	7e e0       	ldi	r23, 0x0E	; 14
    784e:	ef cf       	rjmp	.-34     	; 0x782e <Module_Web::setDebug(bool)+0x24>

00007850 <Module_Web::getDebugText(bool)>:
_ZN10Module_Web12getDebugTextEb():
    7850:	e0 91 b7 0c 	lds	r30, 0x0CB7	; 0x800cb7 <Debug>
    7854:	f0 91 b8 0c 	lds	r31, 0x0CB8	; 0x800cb8 <Debug+0x1>
    7858:	80 81       	ld	r24, Z
    785a:	61 11       	cpse	r22, r1
    785c:	0c 94 f6 34 	jmp	0x69ec	; 0x69ec <toText_onOff(bool)>
    7860:	90 e0       	ldi	r25, 0x00	; 0
    7862:	0c 94 95 33 	jmp	0x672a	; 0x672a <toText(int)>

00007866 <Module_Web::setMetric(bool)>:
_ZN10Module_Web9setMetricEb():
    7866:	cf 93       	push	r28
    7868:	df 93       	push	r29
    786a:	ec 01       	movw	r28, r24
    786c:	a0 91 b5 0c 	lds	r26, 0x0CB5	; 0x800cb5 <Metric>
    7870:	b0 91 b6 0c 	lds	r27, 0x0CB6	; 0x800cb6 <Metric+0x1>
    7874:	8c 91       	ld	r24, X
    7876:	86 17       	cp	r24, r22
    7878:	31 f0       	breq	.+12     	; 0x7886 <Module_Web::setMetric(bool)+0x20>
    787a:	6c 93       	st	X, r22
    787c:	81 e0       	ldi	r24, 0x01	; 1
    787e:	fe 01       	movw	r30, r28
    7880:	e9 53       	subi	r30, 0x39	; 57
    7882:	ff 4f       	sbci	r31, 0xFF	; 255
    7884:	80 83       	st	Z, r24
    7886:	e8 81       	ld	r30, Y
    7888:	f9 81       	ldd	r31, Y+1	; 0x01
    788a:	02 84       	ldd	r0, Z+10	; 0x0a
    788c:	f3 85       	ldd	r31, Z+11	; 0x0b
    788e:	e0 2d       	mov	r30, r0
    7890:	8c 91       	ld	r24, X
    7892:	43 e0       	ldi	r20, 0x03	; 3
    7894:	62 e7       	ldi	r22, 0x72	; 114
    7896:	7e e0       	ldi	r23, 0x0E	; 14
    7898:	81 11       	cpse	r24, r1
    789a:	02 c0       	rjmp	.+4      	; 0x78a0 <Module_Web::setMetric(bool)+0x3a>
    789c:	6d e5       	ldi	r22, 0x5D	; 93
    789e:	7e e0       	ldi	r23, 0x0E	; 14
    78a0:	ce 01       	movw	r24, r28
    78a2:	19 95       	eicall
    78a4:	8a 81       	ldd	r24, Y+2	; 0x02
    78a6:	9b 81       	ldd	r25, Y+3	; 0x03
    78a8:	02 96       	adiw	r24, 0x02	; 2
    78aa:	df 91       	pop	r29
    78ac:	cf 91       	pop	r28
    78ae:	0c 94 cf 2a 	jmp	0x559e	; 0x559e <Sound::playOnSound()>

000078b2 <Module_Web::getMetricText(bool)>:
_ZN10Module_Web13getMetricTextEb():
    78b2:	e0 91 b5 0c 	lds	r30, 0x0CB5	; 0x800cb5 <Metric>
    78b6:	f0 91 b6 0c 	lds	r31, 0x0CB6	; 0x800cb6 <Metric+0x1>
    78ba:	80 81       	ld	r24, Z
    78bc:	61 11       	cpse	r22, r1
    78be:	0c 94 f6 34 	jmp	0x69ec	; 0x69ec <toText_onOff(bool)>
    78c2:	90 e0       	ldi	r25, 0x00	; 0
    78c4:	0c 94 95 33 	jmp	0x672a	; 0x672a <toText(int)>

000078c8 <Module_Web::setSheetsReportingOnOff(bool)>:
_ZN10Module_Web23setSheetsReportingOnOffEb():
    78c8:	0f 93       	push	r16
    78ca:	1f 93       	push	r17
    78cc:	cf 93       	push	r28
    78ce:	df 93       	push	r29
    78d0:	ec 01       	movw	r28, r24
    78d2:	8c 01       	movw	r16, r24
    78d4:	05 53       	subi	r16, 0x35	; 53
    78d6:	1f 4f       	sbci	r17, 0xFF	; 255
    78d8:	d8 01       	movw	r26, r16
    78da:	ed 91       	ld	r30, X+
    78dc:	fc 91       	ld	r31, X
    78de:	60 83       	st	Z, r22
    78e0:	e8 81       	ld	r30, Y
    78e2:	f9 81       	ldd	r31, Y+1	; 0x01
    78e4:	02 84       	ldd	r0, Z+10	; 0x0a
    78e6:	f3 85       	ldd	r31, Z+11	; 0x0b
    78e8:	e0 2d       	mov	r30, r0
    78ea:	43 e0       	ldi	r20, 0x03	; 3
    78ec:	66 23       	and	r22, r22
    78ee:	89 f0       	breq	.+34     	; 0x7912 <Module_Web::setSheetsReportingOnOff(bool)+0x4a>
    78f0:	63 e5       	ldi	r22, 0x53	; 83
    78f2:	7e e0       	ldi	r23, 0x0E	; 14
    78f4:	ce 01       	movw	r24, r28
    78f6:	19 95       	eicall
    78f8:	d8 01       	movw	r26, r16
    78fa:	ed 91       	ld	r30, X+
    78fc:	fc 91       	ld	r31, X
    78fe:	8a 81       	ldd	r24, Y+2	; 0x02
    7900:	9b 81       	ldd	r25, Y+3	; 0x03
    7902:	60 81       	ld	r22, Z
    7904:	02 96       	adiw	r24, 0x02	; 2
    7906:	df 91       	pop	r29
    7908:	cf 91       	pop	r28
    790a:	1f 91       	pop	r17
    790c:	0f 91       	pop	r16
    790e:	0c 94 c7 2a 	jmp	0x558e	; 0x558e <Sound::playOnOffSound(bool)>
    7912:	68 e4       	ldi	r22, 0x48	; 72
    7914:	7e e0       	ldi	r23, 0x0E	; 14
    7916:	ee cf       	rjmp	.-36     	; 0x78f4 <Module_Web::setSheetsReportingOnOff(bool)+0x2c>

00007918 <Module_Web::setSheetsReportingFrequency(unsigned int)>:
_ZN10Module_Web27setSheetsReportingFrequencyEj():
    7918:	cf 93       	push	r28
    791a:	df 93       	push	r29
    791c:	ec 01       	movw	r28, r24
    791e:	fc 01       	movw	r30, r24
    7920:	e3 53       	subi	r30, 0x33	; 51
    7922:	ff 4f       	sbci	r31, 0xFF	; 255
    7924:	01 90       	ld	r0, Z+
    7926:	f0 81       	ld	r31, Z
    7928:	e0 2d       	mov	r30, r0
    792a:	71 83       	std	Z+1, r23	; 0x01
    792c:	60 83       	st	Z, r22
    792e:	e8 81       	ld	r30, Y
    7930:	f9 81       	ldd	r31, Y+1	; 0x01
    7932:	02 84       	ldd	r0, Z+10	; 0x0a
    7934:	f3 85       	ldd	r31, Z+11	; 0x0b
    7936:	e0 2d       	mov	r30, r0
    7938:	43 e0       	ldi	r20, 0x03	; 3
    793a:	60 e3       	ldi	r22, 0x30	; 48
    793c:	7e e0       	ldi	r23, 0x0E	; 14
    793e:	19 95       	eicall
    7940:	8a 81       	ldd	r24, Y+2	; 0x02
    7942:	9b 81       	ldd	r25, Y+3	; 0x03
    7944:	02 96       	adiw	r24, 0x02	; 2
    7946:	df 91       	pop	r29
    7948:	cf 91       	pop	r28
    794a:	0c 94 cf 2a 	jmp	0x559e	; 0x559e <Sound::playOnSound()>

0000794e <Module_Web::setPushingBoxLogRelayID(char const*)>:
_ZN10Module_Web23setPushingBoxLogRelayIDEPKc():
    794e:	cf 93       	push	r28
    7950:	df 93       	push	r29
    7952:	ec 01       	movw	r28, r24
    7954:	80 91 b9 0c 	lds	r24, 0x0CB9	; 0x800cb9 <ModuleSettings>
    7958:	90 91 ba 0c 	lds	r25, 0x0CBA	; 0x800cba <ModuleSettings+0x1>
    795c:	40 e2       	ldi	r20, 0x20	; 32
    795e:	50 e0       	ldi	r21, 0x00	; 0
    7960:	02 96       	adiw	r24, 0x02	; 2
    7962:	0e 94 3e 95 	call	0x12a7c	; 0x12a7c <strncpy>
    7966:	8a 81       	ldd	r24, Y+2	; 0x02
    7968:	9b 81       	ldd	r25, Y+3	; 0x03
    796a:	02 96       	adiw	r24, 0x02	; 2
    796c:	0e 94 cf 2a 	call	0x559e	; 0x559e <Sound::playOnSound()>
    7970:	e8 81       	ld	r30, Y
    7972:	f9 81       	ldd	r31, Y+1	; 0x01
    7974:	02 84       	ldd	r0, Z+10	; 0x0a
    7976:	f3 85       	ldd	r31, Z+11	; 0x0b
    7978:	e0 2d       	mov	r30, r0
    797a:	43 e0       	ldi	r20, 0x03	; 3
    797c:	64 e1       	ldi	r22, 0x14	; 20
    797e:	7e e0       	ldi	r23, 0x0E	; 14
    7980:	ce 01       	movw	r24, r28
    7982:	df 91       	pop	r29
    7984:	cf 91       	pop	r28
    7986:	19 94       	eijmp

00007988 <Module_Web::reportToGoogleSheetsTrigger(bool)>:
_ZN10Module_Web27reportToGoogleSheetsTriggerEb():
    7988:	0f 93       	push	r16
    798a:	cf 93       	push	r28
    798c:	df 93       	push	r29
    798e:	ec 01       	movw	r28, r24
    7990:	26 2f       	mov	r18, r22
    7992:	fc 01       	movw	r30, r24
    7994:	e5 53       	subi	r30, 0x35	; 53
    7996:	ff 4f       	sbci	r31, 0xFF	; 255
    7998:	01 90       	ld	r0, Z+
    799a:	f0 81       	ld	r31, Z
    799c:	e0 2d       	mov	r30, r0
    799e:	80 81       	ld	r24, Z
    79a0:	81 11       	cpse	r24, r1
    79a2:	06 c0       	rjmp	.+12     	; 0x79b0 <Module_Web::reportToGoogleSheetsTrigger(bool)+0x28>
    79a4:	21 11       	cpse	r18, r1
    79a6:	16 c0       	rjmp	.+44     	; 0x79d4 <Module_Web::reportToGoogleSheetsTrigger(bool)+0x4c>
    79a8:	df 91       	pop	r29
    79aa:	cf 91       	pop	r28
    79ac:	0f 91       	pop	r16
    79ae:	08 95       	ret
    79b0:	fe 01       	movw	r30, r28
    79b2:	e1 53       	subi	r30, 0x31	; 49
    79b4:	ff 4f       	sbci	r31, 0xFF	; 255
    79b6:	80 81       	ld	r24, Z
    79b8:	91 e0       	ldi	r25, 0x01	; 1
    79ba:	98 0f       	add	r25, r24
    79bc:	90 83       	st	Z, r25
    79be:	90 e0       	ldi	r25, 0x00	; 0
    79c0:	32 97       	sbiw	r30, 0x02	; 2
    79c2:	01 90       	ld	r0, Z+
    79c4:	f0 81       	ld	r31, Z
    79c6:	e0 2d       	mov	r30, r0
    79c8:	60 81       	ld	r22, Z
    79ca:	71 81       	ldd	r23, Z+1	; 0x01
    79cc:	0e 94 c2 91 	call	0x12384	; 0x12384 <__udivmodhi4>
    79d0:	89 2b       	or	r24, r25
    79d2:	41 f7       	brne	.-48     	; 0x79a4 <Module_Web::reportToGoogleSheetsTrigger(bool)+0x1c>
    79d4:	ce 01       	movw	r24, r28
    79d6:	0e 94 62 3b 	call	0x76c4	; 0x76c4 <Module_Web::addPushingBoxLogRelayID()>
    79da:	e8 81       	ld	r30, Y
    79dc:	f9 81       	ldd	r31, Y+1	; 0x01
    79de:	70 97       	sbiw	r30, 0x10	; 16
    79e0:	80 81       	ld	r24, Z
    79e2:	91 81       	ldd	r25, Z+1	; 0x01
    79e4:	01 e0       	ldi	r16, 0x01	; 1
    79e6:	21 e0       	ldi	r18, 0x01	; 1
    79e8:	40 e0       	ldi	r20, 0x00	; 0
    79ea:	60 e0       	ldi	r22, 0x00	; 0
    79ec:	8c 0f       	add	r24, r28
    79ee:	9d 1f       	adc	r25, r29
    79f0:	0e 94 b5 1c 	call	0x396a	; 0x396a <Module::runReport(bool, bool, bool, bool)>
    79f4:	61 e3       	ldi	r22, 0x31	; 49
    79f6:	7e e0       	ldi	r23, 0x0E	; 14
    79f8:	ce 01       	movw	r24, r28
    79fa:	df 91       	pop	r29
    79fc:	cf 91       	pop	r28
    79fe:	0f 91       	pop	r16
    7a00:	0c 94 81 3b 	jmp	0x7702	; 0x7702 <Module_Web::relayToGoogleSheets(char (*) [1024])>

00007a04 <Module_Web::refresh_Minute()>:
_ZN10Module_Web14refresh_MinuteEv():
    7a04:	cf 93       	push	r28
    7a06:	df 93       	push	r29
    7a08:	ec 01       	movw	r28, r24
    7a0a:	e8 81       	ld	r30, Y
    7a0c:	f9 81       	ldd	r31, Y+1	; 0x01
    7a0e:	36 97       	sbiw	r30, 0x06	; 6
    7a10:	80 81       	ld	r24, Z
    7a12:	91 81       	ldd	r25, Z+1	; 0x01
    7a14:	8c 0f       	add	r24, r28
    7a16:	9d 1f       	adc	r25, r29
    7a18:	0e 94 e2 18 	call	0x31c4	; 0x31c4 <Common::refresh_Minute()>
    7a1c:	60 e0       	ldi	r22, 0x00	; 0
    7a1e:	ce 01       	movw	r24, r28
    7a20:	df 91       	pop	r29
    7a22:	cf 91       	pop	r28
    7a24:	0c 94 c4 3c 	jmp	0x7988	; 0x7988 <Module_Web::reportToGoogleSheetsTrigger(bool)>

00007a28 <virtual thunk to Module_Web::refresh_Minute()>:
_ZTv0_n12_N10Module_Web14refresh_MinuteEv():
    7a28:	dc 01       	movw	r26, r24
    7a2a:	ed 91       	ld	r30, X+
    7a2c:	fc 91       	ld	r31, X
    7a2e:	3c 97       	sbiw	r30, 0x0c	; 12
    7a30:	20 81       	ld	r18, Z
    7a32:	31 81       	ldd	r19, Z+1	; 0x01
    7a34:	82 0f       	add	r24, r18
    7a36:	93 1f       	adc	r25, r19
    7a38:	0c 94 02 3d 	jmp	0x7a04	; 0x7a04 <Module_Web::refresh_Minute()>

00007a3c <Module_Web::setMQTTReportingOnOff(bool)>:
_ZN10Module_Web21setMQTTReportingOnOffEb():
    7a3c:	0f 93       	push	r16
    7a3e:	1f 93       	push	r17
    7a40:	cf 93       	push	r28
    7a42:	df 93       	push	r29
    7a44:	ec 01       	movw	r28, r24
    7a46:	8c 01       	movw	r16, r24
    7a48:	00 53       	subi	r16, 0x30	; 48
    7a4a:	1f 4f       	sbci	r17, 0xFF	; 255
    7a4c:	d8 01       	movw	r26, r16
    7a4e:	ed 91       	ld	r30, X+
    7a50:	fc 91       	ld	r31, X
    7a52:	60 83       	st	Z, r22
    7a54:	e8 81       	ld	r30, Y
    7a56:	f9 81       	ldd	r31, Y+1	; 0x01
    7a58:	02 84       	ldd	r0, Z+10	; 0x0a
    7a5a:	f3 85       	ldd	r31, Z+11	; 0x0b
    7a5c:	e0 2d       	mov	r30, r0
    7a5e:	43 e0       	ldi	r20, 0x03	; 3
    7a60:	66 23       	and	r22, r22
    7a62:	89 f0       	breq	.+34     	; 0x7a86 <Module_Web::setMQTTReportingOnOff(bool)+0x4a>
    7a64:	6c e0       	ldi	r22, 0x0C	; 12
    7a66:	7e e0       	ldi	r23, 0x0E	; 14
    7a68:	ce 01       	movw	r24, r28
    7a6a:	19 95       	eicall
    7a6c:	d8 01       	movw	r26, r16
    7a6e:	ed 91       	ld	r30, X+
    7a70:	fc 91       	ld	r31, X
    7a72:	8a 81       	ldd	r24, Y+2	; 0x02
    7a74:	9b 81       	ldd	r25, Y+3	; 0x03
    7a76:	60 81       	ld	r22, Z
    7a78:	02 96       	adiw	r24, 0x02	; 2
    7a7a:	df 91       	pop	r29
    7a7c:	cf 91       	pop	r28
    7a7e:	1f 91       	pop	r17
    7a80:	0f 91       	pop	r16
    7a82:	0c 94 c7 2a 	jmp	0x558e	; 0x558e <Sound::playOnOffSound(bool)>
    7a86:	63 e0       	ldi	r22, 0x03	; 3
    7a88:	7e e0       	ldi	r23, 0x0E	; 14
    7a8a:	ee cf       	rjmp	.-36     	; 0x7a68 <Module_Web::setMQTTReportingOnOff(bool)+0x2c>

00007a8c <Module_Web::setMQTTReportingFrequency(unsigned int)>:
_ZN10Module_Web25setMQTTReportingFrequencyEj():
    7a8c:	fc 01       	movw	r30, r24
    7a8e:	e3 53       	subi	r30, 0x33	; 51
    7a90:	ff 4f       	sbci	r31, 0xFF	; 255
    7a92:	01 90       	ld	r0, Z+
    7a94:	f0 81       	ld	r31, Z
    7a96:	e0 2d       	mov	r30, r0
    7a98:	71 83       	std	Z+1, r23	; 0x01
    7a9a:	60 83       	st	Z, r22
    7a9c:	dc 01       	movw	r26, r24
    7a9e:	ed 91       	ld	r30, X+
    7aa0:	fc 91       	ld	r31, X
    7aa2:	02 84       	ldd	r0, Z+10	; 0x0a
    7aa4:	f3 85       	ldd	r31, Z+11	; 0x0b
    7aa6:	e0 2d       	mov	r30, r0
    7aa8:	43 e0       	ldi	r20, 0x03	; 3
    7aaa:	6d ee       	ldi	r22, 0xED	; 237
    7aac:	7d e0       	ldi	r23, 0x0D	; 13
    7aae:	19 94       	eijmp

00007ab0 <Module_Web::setMqttPublishTopic(char const*)>:
_ZN10Module_Web19setMqttPublishTopicEPKc():
    7ab0:	cf 93       	push	r28
    7ab2:	df 93       	push	r29
    7ab4:	ec 01       	movw	r28, r24
    7ab6:	80 91 b9 0c 	lds	r24, 0x0CB9	; 0x800cb9 <ModuleSettings>
    7aba:	90 91 ba 0c 	lds	r25, 0x0CBA	; 0x800cba <ModuleSettings+0x1>
    7abe:	40 e8       	ldi	r20, 0x80	; 128
    7ac0:	50 e0       	ldi	r21, 0x00	; 0
    7ac2:	82 96       	adiw	r24, 0x22	; 34
    7ac4:	0e 94 3e 95 	call	0x12a7c	; 0x12a7c <strncpy>
    7ac8:	8a 81       	ldd	r24, Y+2	; 0x02
    7aca:	9b 81       	ldd	r25, Y+3	; 0x03
    7acc:	02 96       	adiw	r24, 0x02	; 2
    7ace:	0e 94 cf 2a 	call	0x559e	; 0x559e <Sound::playOnSound()>
    7ad2:	e8 81       	ld	r30, Y
    7ad4:	f9 81       	ldd	r31, Y+1	; 0x01
    7ad6:	02 84       	ldd	r0, Z+10	; 0x0a
    7ad8:	f3 85       	ldd	r31, Z+11	; 0x0b
    7ada:	e0 2d       	mov	r30, r0
    7adc:	43 e0       	ldi	r20, 0x03	; 3
    7ade:	68 ed       	ldi	r22, 0xD8	; 216
    7ae0:	7d e0       	ldi	r23, 0x0D	; 13
    7ae2:	ce 01       	movw	r24, r28
    7ae4:	df 91       	pop	r29
    7ae6:	cf 91       	pop	r28
    7ae8:	19 94       	eijmp

00007aea <Module_Web::setMqttSubscribeTopic(char const*)>:
_ZN10Module_Web21setMqttSubscribeTopicEPKc():
    7aea:	cf 93       	push	r28
    7aec:	df 93       	push	r29
    7aee:	ec 01       	movw	r28, r24
    7af0:	80 91 b9 0c 	lds	r24, 0x0CB9	; 0x800cb9 <ModuleSettings>
    7af4:	90 91 ba 0c 	lds	r25, 0x0CBA	; 0x800cba <ModuleSettings+0x1>
    7af8:	40 e8       	ldi	r20, 0x80	; 128
    7afa:	50 e0       	ldi	r21, 0x00	; 0
    7afc:	8e 55       	subi	r24, 0x5E	; 94
    7afe:	9f 4f       	sbci	r25, 0xFF	; 255
    7b00:	0e 94 3e 95 	call	0x12a7c	; 0x12a7c <strncpy>
    7b04:	8a 81       	ldd	r24, Y+2	; 0x02
    7b06:	9b 81       	ldd	r25, Y+3	; 0x03
    7b08:	02 96       	adiw	r24, 0x02	; 2
    7b0a:	0e 94 cf 2a 	call	0x559e	; 0x559e <Sound::playOnSound()>
    7b0e:	e8 81       	ld	r30, Y
    7b10:	f9 81       	ldd	r31, Y+1	; 0x01
    7b12:	02 84       	ldd	r0, Z+10	; 0x0a
    7b14:	f3 85       	ldd	r31, Z+11	; 0x0b
    7b16:	e0 2d       	mov	r30, r0
    7b18:	43 e0       	ldi	r20, 0x03	; 3
    7b1a:	61 ec       	ldi	r22, 0xC1	; 193
    7b1c:	7d e0       	ldi	r23, 0x0D	; 13
    7b1e:	ce 01       	movw	r24, r28
    7b20:	df 91       	pop	r29
    7b22:	cf 91       	pop	r28
    7b24:	19 94       	eijmp

00007b26 <Module_Web::setMQTTLWTTopic(char const*)>:
_ZN10Module_Web15setMQTTLWTTopicEPKc():
    7b26:	cf 93       	push	r28
    7b28:	df 93       	push	r29
    7b2a:	ec 01       	movw	r28, r24
    7b2c:	80 91 b9 0c 	lds	r24, 0x0CB9	; 0x800cb9 <ModuleSettings>
    7b30:	90 91 ba 0c 	lds	r25, 0x0CBA	; 0x800cba <ModuleSettings+0x1>
    7b34:	40 e8       	ldi	r20, 0x80	; 128
    7b36:	50 e0       	ldi	r21, 0x00	; 0
    7b38:	8e 5d       	subi	r24, 0xDE	; 222
    7b3a:	9e 4f       	sbci	r25, 0xFE	; 254
    7b3c:	0e 94 3e 95 	call	0x12a7c	; 0x12a7c <strncpy>
    7b40:	8a 81       	ldd	r24, Y+2	; 0x02
    7b42:	9b 81       	ldd	r25, Y+3	; 0x03
    7b44:	02 96       	adiw	r24, 0x02	; 2
    7b46:	0e 94 cf 2a 	call	0x559e	; 0x559e <Sound::playOnSound()>
    7b4a:	e8 81       	ld	r30, Y
    7b4c:	f9 81       	ldd	r31, Y+1	; 0x01
    7b4e:	02 84       	ldd	r0, Z+10	; 0x0a
    7b50:	f3 85       	ldd	r31, Z+11	; 0x0b
    7b52:	e0 2d       	mov	r30, r0
    7b54:	43 e0       	ldi	r20, 0x03	; 3
    7b56:	6f ea       	ldi	r22, 0xAF	; 175
    7b58:	7d e0       	ldi	r23, 0x0D	; 13
    7b5a:	ce 01       	movw	r24, r28
    7b5c:	df 91       	pop	r29
    7b5e:	cf 91       	pop	r28
    7b60:	19 94       	eijmp

00007b62 <Module_Web::setMQTTLWTMessage(char const*)>:
_ZN10Module_Web17setMQTTLWTMessageEPKc():
    7b62:	cf 93       	push	r28
    7b64:	df 93       	push	r29
    7b66:	ec 01       	movw	r28, r24
    7b68:	80 91 b9 0c 	lds	r24, 0x0CB9	; 0x800cb9 <ModuleSettings>
    7b6c:	90 91 ba 0c 	lds	r25, 0x0CBA	; 0x800cba <ModuleSettings+0x1>
    7b70:	40 e2       	ldi	r20, 0x20	; 32
    7b72:	50 e0       	ldi	r21, 0x00	; 0
    7b74:	8e 55       	subi	r24, 0x5E	; 94
    7b76:	9e 4f       	sbci	r25, 0xFE	; 254
    7b78:	0e 94 3e 95 	call	0x12a7c	; 0x12a7c <strncpy>
    7b7c:	8a 81       	ldd	r24, Y+2	; 0x02
    7b7e:	9b 81       	ldd	r25, Y+3	; 0x03
    7b80:	02 96       	adiw	r24, 0x02	; 2
    7b82:	0e 94 cf 2a 	call	0x559e	; 0x559e <Sound::playOnSound()>
    7b86:	e8 81       	ld	r30, Y
    7b88:	f9 81       	ldd	r31, Y+1	; 0x01
    7b8a:	02 84       	ldd	r0, Z+10	; 0x0a
    7b8c:	f3 85       	ldd	r31, Z+11	; 0x0b
    7b8e:	e0 2d       	mov	r30, r0
    7b90:	43 e0       	ldi	r20, 0x03	; 3
    7b92:	6b e9       	ldi	r22, 0x9B	; 155
    7b94:	7d e0       	ldi	r23, 0x0D	; 13
    7b96:	ce 01       	movw	r24, r28
    7b98:	df 91       	pop	r29
    7b9a:	cf 91       	pop	r28
    7b9c:	19 94       	eijmp

00007b9e <Module_Web::settingsEvent_Command(char*, char*)>:
_ZN10Module_Web21settingsEvent_CommandEPcS0_():
    7b9e:	ef 92       	push	r14
    7ba0:	ff 92       	push	r15
    7ba2:	0f 93       	push	r16
    7ba4:	1f 93       	push	r17
    7ba6:	cf 93       	push	r28
    7ba8:	df 93       	push	r29
    7baa:	ec 01       	movw	r28, r24
    7bac:	8b 01       	movw	r16, r22
    7bae:	7a 01       	movw	r14, r20
    7bb0:	68 ec       	ldi	r22, 0xC8	; 200
    7bb2:	7f e0       	ldi	r23, 0x0F	; 15
    7bb4:	c8 01       	movw	r24, r16
    7bb6:	0e 94 e5 94 	call	0x129ca	; 0x129ca <strcmp_P>
    7bba:	89 2b       	or	r24, r25
    7bbc:	d1 f4       	brne	.+52     	; 0x7bf2 <Module_Web::settingsEvent_Command(char*, char*)+0x54>
    7bbe:	fe 01       	movw	r30, r28
    7bc0:	e7 53       	subi	r30, 0x37	; 55
    7bc2:	ff 4f       	sbci	r31, 0xFF	; 255
    7bc4:	81 e0       	ldi	r24, 0x01	; 1
    7bc6:	80 83       	st	Z, r24
    7bc8:	e8 81       	ld	r30, Y
    7bca:	f9 81       	ldd	r31, Y+1	; 0x01
    7bcc:	02 84       	ldd	r0, Z+10	; 0x0a
    7bce:	f3 85       	ldd	r31, Z+11	; 0x0b
    7bd0:	e0 2d       	mov	r30, r0
    7bd2:	40 e0       	ldi	r20, 0x00	; 0
    7bd4:	64 eb       	ldi	r22, 0xB4	; 180
    7bd6:	7f e0       	ldi	r23, 0x0F	; 15
    7bd8:	ce 01       	movw	r24, r28
    7bda:	19 95       	eicall
    7bdc:	8a 81       	ldd	r24, Y+2	; 0x02
    7bde:	9b 81       	ldd	r25, Y+3	; 0x03
    7be0:	02 96       	adiw	r24, 0x02	; 2
    7be2:	df 91       	pop	r29
    7be4:	cf 91       	pop	r28
    7be6:	1f 91       	pop	r17
    7be8:	0f 91       	pop	r16
    7bea:	ff 90       	pop	r15
    7bec:	ef 90       	pop	r14
    7bee:	0c 94 cf 2a 	jmp	0x559e	; 0x559e <Sound::playOnSound()>
    7bf2:	6a ea       	ldi	r22, 0xAA	; 170
    7bf4:	7f e0       	ldi	r23, 0x0F	; 15
    7bf6:	c8 01       	movw	r24, r16
    7bf8:	0e 94 e5 94 	call	0x129ca	; 0x129ca <strcmp_P>
    7bfc:	89 2b       	or	r24, r25
    7bfe:	71 f4       	brne	.+28     	; 0x7c1c <Module_Web::settingsEvent_Command(char*, char*)+0x7e>
    7c00:	fe 01       	movw	r30, r28
    7c02:	e8 53       	subi	r30, 0x38	; 56
    7c04:	ff 4f       	sbci	r31, 0xFF	; 255
    7c06:	81 e0       	ldi	r24, 0x01	; 1
    7c08:	80 83       	st	Z, r24
    7c0a:	e8 81       	ld	r30, Y
    7c0c:	f9 81       	ldd	r31, Y+1	; 0x01
    7c0e:	02 84       	ldd	r0, Z+10	; 0x0a
    7c10:	f3 85       	ldd	r31, Z+11	; 0x0b
    7c12:	e0 2d       	mov	r30, r0
    7c14:	40 e0       	ldi	r20, 0x00	; 0
    7c16:	66 e9       	ldi	r22, 0x96	; 150
    7c18:	7f e0       	ldi	r23, 0x0F	; 15
    7c1a:	de cf       	rjmp	.-68     	; 0x7bd8 <Module_Web::settingsEvent_Command(char*, char*)+0x3a>
    7c1c:	6e e8       	ldi	r22, 0x8E	; 142
    7c1e:	7f e0       	ldi	r23, 0x0F	; 15
    7c20:	c8 01       	movw	r24, r16
    7c22:	0e 94 e5 94 	call	0x129ca	; 0x129ca <strcmp_P>
    7c26:	89 2b       	or	r24, r25
    7c28:	71 f4       	brne	.+28     	; 0x7c46 <Module_Web::settingsEvent_Command(char*, char*)+0xa8>
    7c2a:	fe 01       	movw	r30, r28
    7c2c:	e6 53       	subi	r30, 0x36	; 54
    7c2e:	ff 4f       	sbci	r31, 0xFF	; 255
    7c30:	81 e0       	ldi	r24, 0x01	; 1
    7c32:	80 83       	st	Z, r24
    7c34:	e8 81       	ld	r30, Y
    7c36:	f9 81       	ldd	r31, Y+1	; 0x01
    7c38:	02 84       	ldd	r0, Z+10	; 0x0a
    7c3a:	f3 85       	ldd	r31, Z+11	; 0x0b
    7c3c:	e0 2d       	mov	r30, r0
    7c3e:	40 e0       	ldi	r20, 0x00	; 0
    7c40:	6c e7       	ldi	r22, 0x7C	; 124
    7c42:	7f e0       	ldi	r23, 0x0F	; 15
    7c44:	c9 cf       	rjmp	.-110    	; 0x7bd8 <Module_Web::settingsEvent_Command(char*, char*)+0x3a>
    7c46:	64 e7       	ldi	r22, 0x74	; 116
    7c48:	7f e0       	ldi	r23, 0x0F	; 15
    7c4a:	c8 01       	movw	r24, r16
    7c4c:	0e 94 e5 94 	call	0x129ca	; 0x129ca <strcmp_P>
    7c50:	89 2b       	or	r24, r25
    7c52:	71 f4       	brne	.+28     	; 0x7c70 <Module_Web::settingsEvent_Command(char*, char*)+0xd2>
    7c54:	fe 01       	movw	r30, r28
    7c56:	e9 53       	subi	r30, 0x39	; 57
    7c58:	ff 4f       	sbci	r31, 0xFF	; 255
    7c5a:	81 e0       	ldi	r24, 0x01	; 1
    7c5c:	80 83       	st	Z, r24
    7c5e:	e8 81       	ld	r30, Y
    7c60:	f9 81       	ldd	r31, Y+1	; 0x01
    7c62:	02 84       	ldd	r0, Z+10	; 0x0a
    7c64:	f3 85       	ldd	r31, Z+11	; 0x0b
    7c66:	e0 2d       	mov	r30, r0
    7c68:	40 e0       	ldi	r20, 0x00	; 0
    7c6a:	69 e6       	ldi	r22, 0x69	; 105
    7c6c:	7f e0       	ldi	r23, 0x0F	; 15
    7c6e:	b4 cf       	rjmp	.-152    	; 0x7bd8 <Module_Web::settingsEvent_Command(char*, char*)+0x3a>
    7c70:	63 e6       	ldi	r22, 0x63	; 99
    7c72:	7f e0       	ldi	r23, 0x0F	; 15
    7c74:	c8 01       	movw	r24, r16
    7c76:	0e 94 e5 94 	call	0x129ca	; 0x129ca <strcmp_P>
    7c7a:	89 2b       	or	r24, r25
    7c7c:	69 f4       	brne	.+26     	; 0x7c98 <Module_Web::settingsEvent_Command(char*, char*)+0xfa>
    7c7e:	c7 01       	movw	r24, r14
    7c80:	0e 94 10 35 	call	0x6a20	; 0x6a20 <toBool(char*)>
    7c84:	68 2f       	mov	r22, r24
    7c86:	ce 01       	movw	r24, r28
    7c88:	df 91       	pop	r29
    7c8a:	cf 91       	pop	r28
    7c8c:	1f 91       	pop	r17
    7c8e:	0f 91       	pop	r16
    7c90:	ff 90       	pop	r15
    7c92:	ef 90       	pop	r14
    7c94:	0c 94 05 3c 	jmp	0x780a	; 0x780a <Module_Web::setDebug(bool)>
    7c98:	6c e5       	ldi	r22, 0x5C	; 92
    7c9a:	7f e0       	ldi	r23, 0x0F	; 15
    7c9c:	c8 01       	movw	r24, r16
    7c9e:	0e 94 e5 94 	call	0x129ca	; 0x129ca <strcmp_P>
    7ca2:	89 2b       	or	r24, r25
    7ca4:	69 f4       	brne	.+26     	; 0x7cc0 <Module_Web::settingsEvent_Command(char*, char*)+0x122>
    7ca6:	c7 01       	movw	r24, r14
    7ca8:	0e 94 10 35 	call	0x6a20	; 0x6a20 <toBool(char*)>
    7cac:	68 2f       	mov	r22, r24
    7cae:	ce 01       	movw	r24, r28
    7cb0:	df 91       	pop	r29
    7cb2:	cf 91       	pop	r28
    7cb4:	1f 91       	pop	r17
    7cb6:	0f 91       	pop	r16
    7cb8:	ff 90       	pop	r15
    7cba:	ef 90       	pop	r14
    7cbc:	0c 94 33 3c 	jmp	0x7866	; 0x7866 <Module_Web::setMetric(bool)>
    7cc0:	64 e5       	ldi	r22, 0x54	; 84
    7cc2:	7f e0       	ldi	r23, 0x0F	; 15
    7cc4:	c8 01       	movw	r24, r16
    7cc6:	0e 94 e5 94 	call	0x129ca	; 0x129ca <strcmp_P>
    7cca:	89 2b       	or	r24, r25
    7ccc:	a1 f4       	brne	.+40     	; 0x7cf6 <Module_Web::settingsEvent_Command(char*, char*)+0x158>
    7cce:	e8 81       	ld	r30, Y
    7cd0:	f9 81       	ldd	r31, Y+1	; 0x01
    7cd2:	70 97       	sbiw	r30, 0x10	; 16
    7cd4:	80 81       	ld	r24, Z
    7cd6:	91 81       	ldd	r25, Z+1	; 0x01
    7cd8:	c8 0f       	add	r28, r24
    7cda:	d9 1f       	adc	r29, r25
    7cdc:	c7 01       	movw	r24, r14
    7cde:	0e 94 36 35 	call	0x6a6c	; 0x6a6c <toInt(char*)>
    7ce2:	bc 01       	movw	r22, r24
    7ce4:	ce 01       	movw	r24, r28
    7ce6:	df 91       	pop	r29
    7ce8:	cf 91       	pop	r28
    7cea:	1f 91       	pop	r17
    7cec:	0f 91       	pop	r16
    7cee:	ff 90       	pop	r15
    7cf0:	ef 90       	pop	r14
    7cf2:	0c 94 83 1a 	jmp	0x3506	; 0x3506 <Module::setSerialReportingFrequency(unsigned int)>
    7cf6:	6f e4       	ldi	r22, 0x4F	; 79
    7cf8:	7f e0       	ldi	r23, 0x0F	; 15
    7cfa:	c8 01       	movw	r24, r16
    7cfc:	0e 94 e5 94 	call	0x129ca	; 0x129ca <strcmp_P>
    7d00:	89 2b       	or	r24, r25
    7d02:	a1 f4       	brne	.+40     	; 0x7d2c <Module_Web::settingsEvent_Command(char*, char*)+0x18e>
    7d04:	e8 81       	ld	r30, Y
    7d06:	f9 81       	ldd	r31, Y+1	; 0x01
    7d08:	70 97       	sbiw	r30, 0x10	; 16
    7d0a:	80 81       	ld	r24, Z
    7d0c:	91 81       	ldd	r25, Z+1	; 0x01
    7d0e:	c8 0f       	add	r28, r24
    7d10:	d9 1f       	adc	r29, r25
    7d12:	c7 01       	movw	r24, r14
    7d14:	0e 94 10 35 	call	0x6a20	; 0x6a20 <toBool(char*)>
    7d18:	68 2f       	mov	r22, r24
    7d1a:	ce 01       	movw	r24, r28
    7d1c:	df 91       	pop	r29
    7d1e:	cf 91       	pop	r28
    7d20:	1f 91       	pop	r17
    7d22:	0f 91       	pop	r16
    7d24:	ff 90       	pop	r15
    7d26:	ef 90       	pop	r14
    7d28:	0c 94 30 1c 	jmp	0x3860	; 0x3860 <Module::setSerialReportDate(bool)>
    7d2c:	6b e4       	ldi	r22, 0x4B	; 75
    7d2e:	7f e0       	ldi	r23, 0x0F	; 15
    7d30:	c8 01       	movw	r24, r16
    7d32:	0e 94 e5 94 	call	0x129ca	; 0x129ca <strcmp_P>
    7d36:	89 2b       	or	r24, r25
    7d38:	a1 f4       	brne	.+40     	; 0x7d62 <Module_Web::settingsEvent_Command(char*, char*)+0x1c4>
    7d3a:	e8 81       	ld	r30, Y
    7d3c:	f9 81       	ldd	r31, Y+1	; 0x01
    7d3e:	70 97       	sbiw	r30, 0x10	; 16
    7d40:	80 81       	ld	r24, Z
    7d42:	91 81       	ldd	r25, Z+1	; 0x01
    7d44:	c8 0f       	add	r28, r24
    7d46:	d9 1f       	adc	r29, r25
    7d48:	c7 01       	movw	r24, r14
    7d4a:	0e 94 10 35 	call	0x6a20	; 0x6a20 <toBool(char*)>
    7d4e:	68 2f       	mov	r22, r24
    7d50:	ce 01       	movw	r24, r28
    7d52:	df 91       	pop	r29
    7d54:	cf 91       	pop	r28
    7d56:	1f 91       	pop	r17
    7d58:	0f 91       	pop	r16
    7d5a:	ff 90       	pop	r15
    7d5c:	ef 90       	pop	r14
    7d5e:	0c 94 3d 1c 	jmp	0x387a	; 0x387a <Module::setSerialReportMemory(bool)>
    7d62:	66 e4       	ldi	r22, 0x46	; 70
    7d64:	7f e0       	ldi	r23, 0x0F	; 15
    7d66:	c8 01       	movw	r24, r16
    7d68:	0e 94 e5 94 	call	0x129ca	; 0x129ca <strcmp_P>
    7d6c:	89 2b       	or	r24, r25
    7d6e:	a1 f4       	brne	.+40     	; 0x7d98 <Module_Web::settingsEvent_Command(char*, char*)+0x1fa>
    7d70:	e8 81       	ld	r30, Y
    7d72:	f9 81       	ldd	r31, Y+1	; 0x01
    7d74:	70 97       	sbiw	r30, 0x10	; 16
    7d76:	80 81       	ld	r24, Z
    7d78:	91 81       	ldd	r25, Z+1	; 0x01
    7d7a:	c8 0f       	add	r28, r24
    7d7c:	d9 1f       	adc	r29, r25
    7d7e:	c7 01       	movw	r24, r14
    7d80:	0e 94 10 35 	call	0x6a20	; 0x6a20 <toBool(char*)>
    7d84:	68 2f       	mov	r22, r24
    7d86:	ce 01       	movw	r24, r28
    7d88:	df 91       	pop	r29
    7d8a:	cf 91       	pop	r28
    7d8c:	1f 91       	pop	r17
    7d8e:	0f 91       	pop	r16
    7d90:	ff 90       	pop	r15
    7d92:	ef 90       	pop	r14
    7d94:	0c 94 57 1c 	jmp	0x38ae	; 0x38ae <Module::setSerialReportJSON(bool)>
    7d98:	60 e4       	ldi	r22, 0x40	; 64
    7d9a:	7f e0       	ldi	r23, 0x0F	; 15
    7d9c:	c8 01       	movw	r24, r16
    7d9e:	0e 94 e5 94 	call	0x129ca	; 0x129ca <strcmp_P>
    7da2:	89 2b       	or	r24, r25
    7da4:	a1 f4       	brne	.+40     	; 0x7dce <Module_Web::settingsEvent_Command(char*, char*)+0x230>
    7da6:	e8 81       	ld	r30, Y
    7da8:	f9 81       	ldd	r31, Y+1	; 0x01
    7daa:	70 97       	sbiw	r30, 0x10	; 16
    7dac:	80 81       	ld	r24, Z
    7dae:	91 81       	ldd	r25, Z+1	; 0x01
    7db0:	c8 0f       	add	r28, r24
    7db2:	d9 1f       	adc	r29, r25
    7db4:	c7 01       	movw	r24, r14
    7db6:	0e 94 10 35 	call	0x6a20	; 0x6a20 <toBool(char*)>
    7dba:	68 2f       	mov	r22, r24
    7dbc:	ce 01       	movw	r24, r28
    7dbe:	df 91       	pop	r29
    7dc0:	cf 91       	pop	r28
    7dc2:	1f 91       	pop	r17
    7dc4:	0f 91       	pop	r16
    7dc6:	ff 90       	pop	r15
    7dc8:	ef 90       	pop	r14
    7dca:	0c 94 4a 1c 	jmp	0x3894	; 0x3894 <Module::setSerialReportJSONFriendly(bool)>
    7dce:	6b e3       	ldi	r22, 0x3B	; 59
    7dd0:	7f e0       	ldi	r23, 0x0F	; 15
    7dd2:	c8 01       	movw	r24, r16
    7dd4:	0e 94 e5 94 	call	0x129ca	; 0x129ca <strcmp_P>
    7dd8:	89 2b       	or	r24, r25
    7dda:	a1 f4       	brne	.+40     	; 0x7e04 <Module_Web::settingsEvent_Command(char*, char*)+0x266>
    7ddc:	e8 81       	ld	r30, Y
    7dde:	f9 81       	ldd	r31, Y+1	; 0x01
    7de0:	70 97       	sbiw	r30, 0x10	; 16
    7de2:	80 81       	ld	r24, Z
    7de4:	91 81       	ldd	r25, Z+1	; 0x01
    7de6:	c8 0f       	add	r28, r24
    7de8:	d9 1f       	adc	r29, r25
    7dea:	c7 01       	movw	r24, r14
    7dec:	0e 94 10 35 	call	0x6a20	; 0x6a20 <toBool(char*)>
    7df0:	68 2f       	mov	r22, r24
    7df2:	ce 01       	movw	r24, r28
    7df4:	df 91       	pop	r29
    7df6:	cf 91       	pop	r28
    7df8:	1f 91       	pop	r17
    7dfa:	0f 91       	pop	r16
    7dfc:	ff 90       	pop	r15
    7dfe:	ef 90       	pop	r14
    7e00:	0c 94 64 1c 	jmp	0x38c8	; 0x38c8 <Module::setSerialReportWireless(bool)>
    7e04:	64 e3       	ldi	r22, 0x34	; 52
    7e06:	7f e0       	ldi	r23, 0x0F	; 15
    7e08:	c8 01       	movw	r24, r16
    7e0a:	0e 94 e5 94 	call	0x129ca	; 0x129ca <strcmp_P>
    7e0e:	89 2b       	or	r24, r25
    7e10:	69 f4       	brne	.+26     	; 0x7e2c <Module_Web::settingsEvent_Command(char*, char*)+0x28e>
    7e12:	c7 01       	movw	r24, r14
    7e14:	0e 94 10 35 	call	0x6a20	; 0x6a20 <toBool(char*)>
    7e18:	68 2f       	mov	r22, r24
    7e1a:	ce 01       	movw	r24, r28
    7e1c:	df 91       	pop	r29
    7e1e:	cf 91       	pop	r28
    7e20:	1f 91       	pop	r17
    7e22:	0f 91       	pop	r16
    7e24:	ff 90       	pop	r15
    7e26:	ef 90       	pop	r14
    7e28:	0c 94 64 3c 	jmp	0x78c8	; 0x78c8 <Module_Web::setSheetsReportingOnOff(bool)>
    7e2c:	6c e2       	ldi	r22, 0x2C	; 44
    7e2e:	7f e0       	ldi	r23, 0x0F	; 15
    7e30:	c8 01       	movw	r24, r16
    7e32:	0e 94 e5 94 	call	0x129ca	; 0x129ca <strcmp_P>
    7e36:	89 2b       	or	r24, r25
    7e38:	69 f4       	brne	.+26     	; 0x7e54 <Module_Web::settingsEvent_Command(char*, char*)+0x2b6>
    7e3a:	c7 01       	movw	r24, r14
    7e3c:	0e 94 36 35 	call	0x6a6c	; 0x6a6c <toInt(char*)>
    7e40:	bc 01       	movw	r22, r24
    7e42:	ce 01       	movw	r24, r28
    7e44:	df 91       	pop	r29
    7e46:	cf 91       	pop	r28
    7e48:	1f 91       	pop	r17
    7e4a:	0f 91       	pop	r16
    7e4c:	ff 90       	pop	r15
    7e4e:	ef 90       	pop	r14
    7e50:	0c 94 8c 3c 	jmp	0x7918	; 0x7918 <Module_Web::setSheetsReportingFrequency(unsigned int)>
    7e54:	66 e2       	ldi	r22, 0x26	; 38
    7e56:	7f e0       	ldi	r23, 0x0F	; 15
    7e58:	c8 01       	movw	r24, r16
    7e5a:	0e 94 e5 94 	call	0x129ca	; 0x129ca <strcmp_P>
    7e5e:	89 2b       	or	r24, r25
    7e60:	71 f4       	brne	.+28     	; 0x7e7e <Module_Web::settingsEvent_Command(char*, char*)+0x2e0>
    7e62:	89 ee       	ldi	r24, 0xE9	; 233
    7e64:	9c e0       	ldi	r25, 0x0C	; 12
    7e66:	0e 94 da 79 	call	0xf3b4	; 0xf3b4 <ELClientWebServer::getArgString()>
    7e6a:	bc 01       	movw	r22, r24
    7e6c:	ce 01       	movw	r24, r28
    7e6e:	df 91       	pop	r29
    7e70:	cf 91       	pop	r28
    7e72:	1f 91       	pop	r17
    7e74:	0f 91       	pop	r16
    7e76:	ff 90       	pop	r15
    7e78:	ef 90       	pop	r14
    7e7a:	0c 94 a7 3c 	jmp	0x794e	; 0x794e <Module_Web::setPushingBoxLogRelayID(char const*)>
    7e7e:	61 e2       	ldi	r22, 0x21	; 33
    7e80:	7f e0       	ldi	r23, 0x0F	; 15
    7e82:	c8 01       	movw	r24, r16
    7e84:	0e 94 e5 94 	call	0x129ca	; 0x129ca <strcmp_P>
    7e88:	89 2b       	or	r24, r25
    7e8a:	69 f4       	brne	.+26     	; 0x7ea6 <Module_Web::settingsEvent_Command(char*, char*)+0x308>
    7e8c:	c7 01       	movw	r24, r14
    7e8e:	0e 94 10 35 	call	0x6a20	; 0x6a20 <toBool(char*)>
    7e92:	68 2f       	mov	r22, r24
    7e94:	ce 01       	movw	r24, r28
    7e96:	df 91       	pop	r29
    7e98:	cf 91       	pop	r28
    7e9a:	1f 91       	pop	r17
    7e9c:	0f 91       	pop	r16
    7e9e:	ff 90       	pop	r15
    7ea0:	ef 90       	pop	r14
    7ea2:	0c 94 1e 3d 	jmp	0x7a3c	; 0x7a3c <Module_Web::setMQTTReportingOnOff(bool)>
    7ea6:	6b e1       	ldi	r22, 0x1B	; 27
    7ea8:	7f e0       	ldi	r23, 0x0F	; 15
    7eaa:	c8 01       	movw	r24, r16
    7eac:	0e 94 e5 94 	call	0x129ca	; 0x129ca <strcmp_P>
    7eb0:	89 2b       	or	r24, r25
    7eb2:	69 f4       	brne	.+26     	; 0x7ece <Module_Web::settingsEvent_Command(char*, char*)+0x330>
    7eb4:	c7 01       	movw	r24, r14
    7eb6:	0e 94 36 35 	call	0x6a6c	; 0x6a6c <toInt(char*)>
    7eba:	bc 01       	movw	r22, r24
    7ebc:	ce 01       	movw	r24, r28
    7ebe:	df 91       	pop	r29
    7ec0:	cf 91       	pop	r28
    7ec2:	1f 91       	pop	r17
    7ec4:	0f 91       	pop	r16
    7ec6:	ff 90       	pop	r15
    7ec8:	ef 90       	pop	r14
    7eca:	0c 94 46 3d 	jmp	0x7a8c	; 0x7a8c <Module_Web::setMQTTReportingFrequency(unsigned int)>
    7ece:	67 e1       	ldi	r22, 0x17	; 23
    7ed0:	7f e0       	ldi	r23, 0x0F	; 15
    7ed2:	c8 01       	movw	r24, r16
    7ed4:	0e 94 e5 94 	call	0x129ca	; 0x129ca <strcmp_P>
    7ed8:	89 2b       	or	r24, r25
    7eda:	71 f4       	brne	.+28     	; 0x7ef8 <Module_Web::settingsEvent_Command(char*, char*)+0x35a>
    7edc:	89 ee       	ldi	r24, 0xE9	; 233
    7ede:	9c e0       	ldi	r25, 0x0C	; 12
    7ee0:	0e 94 da 79 	call	0xf3b4	; 0xf3b4 <ELClientWebServer::getArgString()>
    7ee4:	bc 01       	movw	r22, r24
    7ee6:	ce 01       	movw	r24, r28
    7ee8:	df 91       	pop	r29
    7eea:	cf 91       	pop	r28
    7eec:	1f 91       	pop	r17
    7eee:	0f 91       	pop	r16
    7ef0:	ff 90       	pop	r15
    7ef2:	ef 90       	pop	r14
    7ef4:	0c 94 58 3d 	jmp	0x7ab0	; 0x7ab0 <Module_Web::setMqttPublishTopic(char const*)>
    7ef8:	63 e1       	ldi	r22, 0x13	; 19
    7efa:	7f e0       	ldi	r23, 0x0F	; 15
    7efc:	c8 01       	movw	r24, r16
    7efe:	0e 94 e5 94 	call	0x129ca	; 0x129ca <strcmp_P>
    7f02:	89 2b       	or	r24, r25
    7f04:	71 f4       	brne	.+28     	; 0x7f22 <Module_Web::settingsEvent_Command(char*, char*)+0x384>
    7f06:	89 ee       	ldi	r24, 0xE9	; 233
    7f08:	9c e0       	ldi	r25, 0x0C	; 12
    7f0a:	0e 94 da 79 	call	0xf3b4	; 0xf3b4 <ELClientWebServer::getArgString()>
    7f0e:	bc 01       	movw	r22, r24
    7f10:	ce 01       	movw	r24, r28
    7f12:	df 91       	pop	r29
    7f14:	cf 91       	pop	r28
    7f16:	1f 91       	pop	r17
    7f18:	0f 91       	pop	r16
    7f1a:	ff 90       	pop	r15
    7f1c:	ef 90       	pop	r14
    7f1e:	0c 94 75 3d 	jmp	0x7aea	; 0x7aea <Module_Web::setMqttSubscribeTopic(char const*)>
    7f22:	6f e0       	ldi	r22, 0x0F	; 15
    7f24:	7f e0       	ldi	r23, 0x0F	; 15
    7f26:	c8 01       	movw	r24, r16
    7f28:	0e 94 e5 94 	call	0x129ca	; 0x129ca <strcmp_P>
    7f2c:	89 2b       	or	r24, r25
    7f2e:	71 f4       	brne	.+28     	; 0x7f4c <Module_Web::settingsEvent_Command(char*, char*)+0x3ae>
    7f30:	89 ee       	ldi	r24, 0xE9	; 233
    7f32:	9c e0       	ldi	r25, 0x0C	; 12
    7f34:	0e 94 da 79 	call	0xf3b4	; 0xf3b4 <ELClientWebServer::getArgString()>
    7f38:	bc 01       	movw	r22, r24
    7f3a:	ce 01       	movw	r24, r28
    7f3c:	df 91       	pop	r29
    7f3e:	cf 91       	pop	r28
    7f40:	1f 91       	pop	r17
    7f42:	0f 91       	pop	r16
    7f44:	ff 90       	pop	r15
    7f46:	ef 90       	pop	r14
    7f48:	0c 94 93 3d 	jmp	0x7b26	; 0x7b26 <Module_Web::setMQTTLWTTopic(char const*)>
    7f4c:	6b e0       	ldi	r22, 0x0B	; 11
    7f4e:	7f e0       	ldi	r23, 0x0F	; 15
    7f50:	c8 01       	movw	r24, r16
    7f52:	0e 94 e5 94 	call	0x129ca	; 0x129ca <strcmp_P>
    7f56:	89 2b       	or	r24, r25
    7f58:	71 f4       	brne	.+28     	; 0x7f76 <Module_Web::settingsEvent_Command(char*, char*)+0x3d8>
    7f5a:	89 ee       	ldi	r24, 0xE9	; 233
    7f5c:	9c e0       	ldi	r25, 0x0C	; 12
    7f5e:	0e 94 da 79 	call	0xf3b4	; 0xf3b4 <ELClientWebServer::getArgString()>
    7f62:	bc 01       	movw	r22, r24
    7f64:	ce 01       	movw	r24, r28
    7f66:	df 91       	pop	r29
    7f68:	cf 91       	pop	r28
    7f6a:	1f 91       	pop	r17
    7f6c:	0f 91       	pop	r16
    7f6e:	ff 90       	pop	r15
    7f70:	ef 90       	pop	r14
    7f72:	0c 94 b1 3d 	jmp	0x7b62	; 0x7b62 <Module_Web::setMQTTLWTMessage(char const*)>
_ZN10Module_Web14getSoundObjectEv():
    7f76:	aa 81       	ldd	r26, Y+2	; 0x02
    7f78:	bb 81       	ldd	r27, Y+3	; 0x03
_ZN10Module_Web21settingsEvent_CommandEPcS0_():
    7f7a:	ed 91       	ld	r30, X+
    7f7c:	fc 91       	ld	r31, X
    7f7e:	11 97       	sbiw	r26, 0x01	; 1
    7f80:	36 97       	sbiw	r30, 0x06	; 6
    7f82:	80 81       	ld	r24, Z
    7f84:	91 81       	ldd	r25, Z+1	; 0x01
    7f86:	41 e0       	ldi	r20, 0x01	; 1
    7f88:	69 e0       	ldi	r22, 0x09	; 9
    7f8a:	7f e0       	ldi	r23, 0x0F	; 15
    7f8c:	8a 0f       	add	r24, r26
    7f8e:	9b 1f       	adc	r25, r27
    7f90:	0e 94 7e 19 	call	0x32fc	; 0x32fc <Common::getName(__FlashStringHelper const*, bool)>
    7f94:	bc 01       	movw	r22, r24
    7f96:	c8 01       	movw	r24, r16
    7f98:	0e 94 2e 95 	call	0x12a5c	; 0x12a5c <strcmp>
    7f9c:	ea 81       	ldd	r30, Y+2	; 0x02
    7f9e:	fb 81       	ldd	r31, Y+3	; 0x03
    7fa0:	89 2b       	or	r24, r25
    7fa2:	79 f4       	brne	.+30     	; 0x7fc2 <Module_Web::settingsEvent_Command(char*, char*)+0x424>
    7fa4:	ef 01       	movw	r28, r30
    7fa6:	22 96       	adiw	r28, 0x02	; 2
    7fa8:	c7 01       	movw	r24, r14
    7faa:	0e 94 10 35 	call	0x6a20	; 0x6a20 <toBool(char*)>
    7fae:	68 2f       	mov	r22, r24
    7fb0:	ce 01       	movw	r24, r28
    7fb2:	df 91       	pop	r29
    7fb4:	cf 91       	pop	r28
    7fb6:	1f 91       	pop	r17
    7fb8:	0f 91       	pop	r16
    7fba:	ff 90       	pop	r15
    7fbc:	ef 90       	pop	r14
    7fbe:	0c 94 d7 2a 	jmp	0x55ae	; 0x55ae <Sound::setSoundOnOff(bool)>
    7fc2:	a0 81       	ld	r26, Z
    7fc4:	b1 81       	ldd	r27, Z+1	; 0x01
    7fc6:	16 97       	sbiw	r26, 0x06	; 6
    7fc8:	8d 91       	ld	r24, X+
    7fca:	9c 91       	ld	r25, X
    7fcc:	41 e0       	ldi	r20, 0x01	; 1
    7fce:	66 e0       	ldi	r22, 0x06	; 6
    7fd0:	7f e0       	ldi	r23, 0x0F	; 15
    7fd2:	8e 0f       	add	r24, r30
    7fd4:	9f 1f       	adc	r25, r31
    7fd6:	0e 94 7e 19 	call	0x32fc	; 0x32fc <Common::getName(__FlashStringHelper const*, bool)>
    7fda:	bc 01       	movw	r22, r24
    7fdc:	c8 01       	movw	r24, r16
    7fde:	0e 94 2e 95 	call	0x12a5c	; 0x12a5c <strcmp>
    7fe2:	89 2b       	or	r24, r25
    7fe4:	51 f4       	brne	.+20     	; 0x7ffa <Module_Web::settingsEvent_Command(char*, char*)+0x45c>
    7fe6:	8a 81       	ldd	r24, Y+2	; 0x02
    7fe8:	9b 81       	ldd	r25, Y+3	; 0x03
    7fea:	df 91       	pop	r29
    7fec:	cf 91       	pop	r28
    7fee:	1f 91       	pop	r17
    7ff0:	0f 91       	pop	r16
    7ff2:	ff 90       	pop	r15
    7ff4:	ef 90       	pop	r14
    7ff6:	0c 94 7d 32 	jmp	0x64fa	; 0x64fa <Sound_Web::playEE()>
    7ffa:	df 91       	pop	r29
    7ffc:	cf 91       	pop	r28
    7ffe:	1f 91       	pop	r17
    8000:	0f 91       	pop	r16
    8002:	ff 90       	pop	r15
    8004:	ef 90       	pop	r14
    8006:	08 95       	ret

00008008 <Module_Web::reportToMQTTTrigger(bool)>:
_ZN10Module_Web19reportToMQTTTriggerEb():
    8008:	0f 93       	push	r16
    800a:	cf 93       	push	r28
    800c:	df 93       	push	r29
    800e:	ec 01       	movw	r28, r24
    8010:	46 2f       	mov	r20, r22
    8012:	fc 01       	movw	r30, r24
    8014:	e0 53       	subi	r30, 0x30	; 48
    8016:	ff 4f       	sbci	r31, 0xFF	; 255
    8018:	01 90       	ld	r0, Z+
    801a:	f0 81       	ld	r31, Z
    801c:	e0 2d       	mov	r30, r0
    801e:	80 81       	ld	r24, Z
    8020:	81 11       	cpse	r24, r1
    8022:	06 c0       	rjmp	.+12     	; 0x8030 <Module_Web::reportToMQTTTrigger(bool)+0x28>
    8024:	41 11       	cpse	r20, r1
    8026:	1c c0       	rjmp	.+56     	; 0x8060 <Module_Web::reportToMQTTTrigger(bool)+0x58>
    8028:	df 91       	pop	r29
    802a:	cf 91       	pop	r28
    802c:	0f 91       	pop	r16
    802e:	08 95       	ret
    8030:	fe 01       	movw	r30, r28
    8032:	ec 52       	subi	r30, 0x2C	; 44
    8034:	ff 4f       	sbci	r31, 0xFF	; 255
    8036:	20 81       	ld	r18, Z
    8038:	31 81       	ldd	r19, Z+1	; 0x01
    803a:	c9 01       	movw	r24, r18
    803c:	01 96       	adiw	r24, 0x01	; 1
    803e:	91 83       	std	Z+1, r25	; 0x01
    8040:	80 83       	st	Z, r24
    8042:	32 97       	sbiw	r30, 0x02	; 2
    8044:	01 90       	ld	r0, Z+
    8046:	f0 81       	ld	r31, Z
    8048:	e0 2d       	mov	r30, r0
    804a:	80 81       	ld	r24, Z
    804c:	91 81       	ldd	r25, Z+1	; 0x01
    804e:	65 e0       	ldi	r22, 0x05	; 5
    8050:	70 e0       	ldi	r23, 0x00	; 0
    8052:	0e 94 c2 91 	call	0x12384	; 0x12384 <__udivmodhi4>
    8056:	c9 01       	movw	r24, r18
    8058:	0e 94 c2 91 	call	0x12384	; 0x12384 <__udivmodhi4>
    805c:	89 2b       	or	r24, r25
    805e:	11 f7       	brne	.-60     	; 0x8024 <Module_Web::reportToMQTTTrigger(bool)+0x1c>
    8060:	e8 81       	ld	r30, Y
    8062:	f9 81       	ldd	r31, Y+1	; 0x01
    8064:	70 97       	sbiw	r30, 0x10	; 16
    8066:	80 81       	ld	r24, Z
    8068:	91 81       	ldd	r25, Z+1	; 0x01
    806a:	01 e0       	ldi	r16, 0x01	; 1
    806c:	21 e0       	ldi	r18, 0x01	; 1
    806e:	41 e0       	ldi	r20, 0x01	; 1
    8070:	60 e0       	ldi	r22, 0x00	; 0
    8072:	8c 0f       	add	r24, r28
    8074:	9d 1f       	adc	r25, r29
    8076:	0e 94 b5 1c 	call	0x396a	; 0x396a <Module::runReport(bool, bool, bool, bool)>
    807a:	61 e3       	ldi	r22, 0x31	; 49
    807c:	7e e0       	ldi	r23, 0x0E	; 14
    807e:	ce 01       	movw	r24, r28
    8080:	0e 94 9d 3b 	call	0x773a	; 0x773a <Module_Web::mqttPublish(char (*) [1024])>
    8084:	41 e0       	ldi	r20, 0x01	; 1
    8086:	61 e0       	ldi	r22, 0x01	; 1
    8088:	ce 01       	movw	r24, r28
    808a:	0e 94 2f 38 	call	0x705e	; 0x705e <Module_Web::eventLogToJSON(bool, bool)>
    808e:	61 e3       	ldi	r22, 0x31	; 49
    8090:	7e e0       	ldi	r23, 0x0E	; 14
    8092:	ce 01       	movw	r24, r28
    8094:	0e 94 9d 3b 	call	0x773a	; 0x773a <Module_Web::mqttPublish(char (*) [1024])>
    8098:	ce 01       	movw	r24, r28
    809a:	0e 94 8a 38 	call	0x7114	; 0x7114 <Module_Web::settingsToJSON()>
    809e:	61 e3       	ldi	r22, 0x31	; 49
    80a0:	7e e0       	ldi	r23, 0x0E	; 14
    80a2:	ce 01       	movw	r24, r28
    80a4:	df 91       	pop	r29
    80a6:	cf 91       	pop	r28
    80a8:	0f 91       	pop	r16
    80aa:	0c 94 9d 3b 	jmp	0x773a	; 0x773a <Module_Web::mqttPublish(char (*) [1024])>

000080ae <Module_Web::refresh_FiveSec()>:
_ZN10Module_Web15refresh_FiveSecEv():
    80ae:	0f 93       	push	r16
    80b0:	cf 93       	push	r28
    80b2:	df 93       	push	r29
    80b4:	ec 01       	movw	r28, r24
    80b6:	e8 81       	ld	r30, Y
    80b8:	f9 81       	ldd	r31, Y+1	; 0x01
    80ba:	36 97       	sbiw	r30, 0x06	; 6
    80bc:	80 81       	ld	r24, Z
    80be:	91 81       	ldd	r25, Z+1	; 0x01
    80c0:	8c 0f       	add	r24, r28
    80c2:	9d 1f       	adc	r25, r29
    80c4:	0e 94 cd 18 	call	0x319a	; 0x319a <Common::refresh_FiveSec()>
    80c8:	e8 81       	ld	r30, Y
    80ca:	f9 81       	ldd	r31, Y+1	; 0x01
    80cc:	70 97       	sbiw	r30, 0x10	; 16
    80ce:	80 81       	ld	r24, Z
    80d0:	91 81       	ldd	r25, Z+1	; 0x01
    80d2:	00 e0       	ldi	r16, 0x00	; 0
    80d4:	20 e0       	ldi	r18, 0x00	; 0
    80d6:	41 e0       	ldi	r20, 0x01	; 1
    80d8:	60 e0       	ldi	r22, 0x00	; 0
    80da:	8c 0f       	add	r24, r28
    80dc:	9d 1f       	adc	r25, r29
    80de:	0e 94 79 1d 	call	0x3af2	; 0x3af2 <Module::reportToSerialTrigger(bool, bool, bool, bool)>
    80e2:	60 e0       	ldi	r22, 0x00	; 0
    80e4:	ce 01       	movw	r24, r28
    80e6:	0e 94 04 40 	call	0x8008	; 0x8008 <Module_Web::reportToMQTTTrigger(bool)>
    80ea:	fe 01       	movw	r30, r28
    80ec:	e9 53       	subi	r30, 0x39	; 57
    80ee:	ff 4f       	sbci	r31, 0xFF	; 255
    80f0:	80 81       	ld	r24, Z
    80f2:	88 23       	and	r24, r24
    80f4:	51 f0       	breq	.+20     	; 0x810a <Module_Web::refresh_FiveSec()+0x5c>
    80f6:	10 82       	st	Z, r1
    80f8:	e8 81       	ld	r30, Y
    80fa:	f9 81       	ldd	r31, Y+1	; 0x01
    80fc:	70 97       	sbiw	r30, 0x10	; 16
    80fe:	80 81       	ld	r24, Z
    8100:	91 81       	ldd	r25, Z+1	; 0x01
    8102:	8c 0f       	add	r24, r28
    8104:	9d 1f       	adc	r25, r29
    8106:	0e 94 ff 1a 	call	0x35fe	; 0x35fe <Module::runAll()>
    810a:	fe 01       	movw	r30, r28
    810c:	e7 53       	subi	r30, 0x37	; 55
    810e:	ff 4f       	sbci	r31, 0xFF	; 255
    8110:	80 81       	ld	r24, Z
    8112:	88 23       	and	r24, r24
    8114:	29 f0       	breq	.+10     	; 0x8120 <Module_Web::refresh_FiveSec()+0x72>
    8116:	10 82       	st	Z, r1
    8118:	61 e0       	ldi	r22, 0x01	; 1
    811a:	ce 01       	movw	r24, r28
    811c:	0e 94 c4 3c 	call	0x7988	; 0x7988 <Module_Web::reportToGoogleSheetsTrigger(bool)>
    8120:	fe 01       	movw	r30, r28
    8122:	e8 53       	subi	r30, 0x38	; 56
    8124:	ff 4f       	sbci	r31, 0xFF	; 255
    8126:	80 81       	ld	r24, Z
    8128:	88 23       	and	r24, r24
    812a:	71 f0       	breq	.+28     	; 0x8148 <Module_Web::refresh_FiveSec()+0x9a>
    812c:	10 82       	st	Z, r1
    812e:	e8 81       	ld	r30, Y
    8130:	f9 81       	ldd	r31, Y+1	; 0x01
    8132:	70 97       	sbiw	r30, 0x10	; 16
    8134:	80 81       	ld	r24, Z
    8136:	91 81       	ldd	r25, Z+1	; 0x01
    8138:	00 e0       	ldi	r16, 0x00	; 0
    813a:	20 e0       	ldi	r18, 0x00	; 0
    813c:	41 e0       	ldi	r20, 0x01	; 1
    813e:	61 e0       	ldi	r22, 0x01	; 1
    8140:	8c 0f       	add	r24, r28
    8142:	9d 1f       	adc	r25, r29
    8144:	0e 94 b5 1c 	call	0x396a	; 0x396a <Module::runReport(bool, bool, bool, bool)>
    8148:	fe 01       	movw	r30, r28
    814a:	e6 53       	subi	r30, 0x36	; 54
    814c:	ff 4f       	sbci	r31, 0xFF	; 255
    814e:	80 81       	ld	r24, Z
    8150:	88 23       	and	r24, r24
    8152:	41 f0       	breq	.+16     	; 0x8164 <Module_Web::refresh_FiveSec()+0xb6>
    8154:	10 82       	st	Z, r1
    8156:	61 e0       	ldi	r22, 0x01	; 1
    8158:	ce 01       	movw	r24, r28
    815a:	df 91       	pop	r29
    815c:	cf 91       	pop	r28
    815e:	0f 91       	pop	r16
    8160:	0c 94 04 40 	jmp	0x8008	; 0x8008 <Module_Web::reportToMQTTTrigger(bool)>
    8164:	df 91       	pop	r29
    8166:	cf 91       	pop	r28
    8168:	0f 91       	pop	r16
    816a:	08 95       	ret

0000816c <virtual thunk to Module_Web::refresh_FiveSec()>:
_ZTv0_n10_N10Module_Web15refresh_FiveSecEv():
    816c:	dc 01       	movw	r26, r24
    816e:	ed 91       	ld	r30, X+
    8170:	fc 91       	ld	r31, X
    8172:	3a 97       	sbiw	r30, 0x0a	; 10
    8174:	20 81       	ld	r18, Z
    8176:	31 81       	ldd	r19, Z+1	; 0x01
    8178:	82 0f       	add	r24, r18
    817a:	93 1f       	adc	r25, r19
    817c:	0c 94 57 40 	jmp	0x80ae	; 0x80ae <Module_Web::refresh_FiveSec()>

00008180 <Module_Web::commandEventTrigger(char*, char*)>:
_ZN10Module_Web19commandEventTriggerEPcS0_():
b:\Gbox420\Gbox420\Gbox420_Mega_Main\build\sketch\src\Modules_Web/420Module_Web.cpp:73

/**
* @brief Notify subscribed components of a received MQTT/Website command
*/
void Module_Web::commandEventTrigger(char *Command, char *Data)
{
    8180:	af 92       	push	r10
    8182:	bf 92       	push	r11
    8184:	cf 92       	push	r12
    8186:	df 92       	push	r13
    8188:	ef 92       	push	r14
    818a:	ff 92       	push	r15
    818c:	0f 93       	push	r16
    818e:	1f 93       	push	r17
    8190:	cf 93       	push	r28
    8192:	df 93       	push	r29
    8194:	00 d0       	rcall	.+0      	; 0x8196 <Module_Web::commandEventTrigger(char*, char*)+0x16>
    8196:	1f 92       	push	r1
    8198:	cd b7       	in	r28, 0x3d	; 61
    819a:	de b7       	in	r29, 0x3e	; 62
    819c:	8c 01       	movw	r16, r24
    819e:	7a 83       	std	Y+2, r23	; 0x02
    81a0:	69 83       	std	Y+1, r22	; 0x01
    81a2:	5c 83       	std	Y+4, r21	; 0x04
    81a4:	4b 83       	std	Y+3, r20	; 0x03
b:\Gbox420\Gbox420\Gbox420_Mega_Main\build\sketch\src\Modules_Web/420Module_Web.cpp:74
  logToSerials(&Command, false, 1);
    81a6:	41 e0       	ldi	r20, 0x01	; 1
    81a8:	60 e0       	ldi	r22, 0x00	; 0
    81aa:	ce 01       	movw	r24, r28
    81ac:	01 96       	adiw	r24, 0x01	; 1
    81ae:	0e 94 59 15 	call	0x2ab2	; 0x2ab2 <void logToSerials<char*>(char**, bool, unsigned char)>
b:\Gbox420\Gbox420\Gbox420_Mega_Main\build\sketch\src\Modules_Web/420Module_Web.cpp:75
  logToSerials(&Data, true, 2);
    81b2:	42 e0       	ldi	r20, 0x02	; 2
    81b4:	61 e0       	ldi	r22, 0x01	; 1
    81b6:	ce 01       	movw	r24, r28
    81b8:	03 96       	adiw	r24, 0x03	; 3
    81ba:	0e 94 59 15 	call	0x2ab2	; 0x2ab2 <void logToSerials<char*>(char**, bool, unsigned char)>
    81be:	68 01       	movw	r12, r16
    81c0:	84 e8       	ldi	r24, 0x84	; 132
    81c2:	c8 0e       	add	r12, r24
    81c4:	d1 1c       	adc	r13, r1
b:\Gbox420\Gbox420\Gbox420_Mega_Main\build\sketch\src\Modules_Web/420Module_Web.cpp:77
  bool NameMatchFound = false;
  for (int i = 0; i < CommandQueue_Count; i++)
    81c6:	f1 2c       	mov	r15, r1
    81c8:	e1 2c       	mov	r14, r1
    81ca:	58 01       	movw	r10, r16
    81cc:	a6 ec       	ldi	r26, 0xC6	; 198
    81ce:	aa 0e       	add	r10, r26
    81d0:	b1 1c       	adc	r11, r1
    81d2:	4b 81       	ldd	r20, Y+3	; 0x03
    81d4:	5c 81       	ldd	r21, Y+4	; 0x04
    81d6:	69 81       	ldd	r22, Y+1	; 0x01
    81d8:	7a 81       	ldd	r23, Y+2	; 0x02
b:\Gbox420\Gbox420\Gbox420_Mega_Main\build\sketch\src\Modules_Web/420Module_Web.cpp:77 (discriminator 1)
    81da:	f5 01       	movw	r30, r10
    81dc:	80 81       	ld	r24, Z
    81de:	8e 15       	cp	r24, r14
    81e0:	1f 04       	cpc	r1, r15
    81e2:	91 f0       	breq	.+36     	; 0x8208 <Module_Web::commandEventTrigger(char*, char*)+0x88>
    81e4:	8c f0       	brlt	.+34     	; 0x8208 <Module_Web::commandEventTrigger(char*, char*)+0x88>
b:\Gbox420\Gbox420\Gbox420_Mega_Main\build\sketch\src\Modules_Web/420Module_Web.cpp:79
  {
    NameMatchFound = CommandQueue[i]->commandEvent(Command, Data);
    81e6:	d6 01       	movw	r26, r12
    81e8:	8d 91       	ld	r24, X+
    81ea:	9d 91       	ld	r25, X+
    81ec:	6d 01       	movw	r12, r26
    81ee:	dc 01       	movw	r26, r24
    81f0:	ed 91       	ld	r30, X+
    81f2:	fc 91       	ld	r31, X
    81f4:	04 80       	ldd	r0, Z+4	; 0x04
    81f6:	f5 81       	ldd	r31, Z+5	; 0x05
    81f8:	e0 2d       	mov	r30, r0
    81fa:	19 95       	eicall
b:\Gbox420\Gbox420\Gbox420_Mega_Main\build\sketch\src\Modules_Web/420Module_Web.cpp:80
    if (NameMatchFound)
    81fc:	81 11       	cpse	r24, r1
    81fe:	07 c0       	rjmp	.+14     	; 0x820e <Module_Web::commandEventTrigger(char*, char*)+0x8e>
b:\Gbox420\Gbox420\Gbox420_Mega_Main\build\sketch\src\Modules_Web/420Module_Web.cpp:77 (discriminator 2)
void Module_Web::commandEventTrigger(char *Command, char *Data)
{
  logToSerials(&Command, false, 1);
  logToSerials(&Data, true, 2);
  bool NameMatchFound = false;
  for (int i = 0; i < CommandQueue_Count; i++)
    8200:	bf ef       	ldi	r27, 0xFF	; 255
    8202:	eb 1a       	sub	r14, r27
    8204:	fb 0a       	sbc	r15, r27
    8206:	e5 cf       	rjmp	.-54     	; 0x81d2 <Module_Web::commandEventTrigger(char*, char*)+0x52>
b:\Gbox420\Gbox420\Gbox420_Mega_Main\build\sketch\src\Modules_Web/420Module_Web.cpp:84
    NameMatchFound = CommandQueue[i]->commandEvent(Command, Data);
    if (NameMatchFound)
      break;
  }
  if (!NameMatchFound) ///< None of the subscribed component Names matched the command. Try processing it as a Module settings command.
    settingsEvent_Command(Command, Data);
    8208:	c8 01       	movw	r24, r16
    820a:	0e 94 cf 3d 	call	0x7b9e	; 0x7b9e <Module_Web::settingsEvent_Command(char*, char*)>
b:\Gbox420\Gbox420\Gbox420_Mega_Main\build\sketch\src\Modules_Web/420Module_Web.cpp:85
}
    820e:	0f 90       	pop	r0
    8210:	0f 90       	pop	r0
    8212:	0f 90       	pop	r0
    8214:	0f 90       	pop	r0
    8216:	df 91       	pop	r29
    8218:	cf 91       	pop	r28
    821a:	1f 91       	pop	r17
    821c:	0f 91       	pop	r16
    821e:	ff 90       	pop	r15
    8220:	ef 90       	pop	r14
    8222:	df 90       	pop	r13
    8224:	cf 90       	pop	r12
    8226:	bf 90       	pop	r11
    8228:	af 90       	pop	r10
    822a:	08 95       	ret

0000822c <_GLOBAL__sub_I_ACMotorModuleCommand1ToSend>:
_ZN21ACMotorCommonTemplateC4E15ACMotorMessages():
b:\gbox420\gbox420\gbox420_mega_main\build\sketch\src/wirelesscommands_acmotor.h:58
struct ACMotorCommonTemplate ///< ACMotor wireless template - Shared between Command and Respone packages
{
   ACMotorMessages SequenceID; ///< Commands and Responses can span across multiple 32byte packages. Packages with 0 SequenceID represent the initial attempt to exchange data
   ACMotorCommonTemplate(ACMotorMessages SequenceID)
   {
      this->SequenceID = SequenceID;
    822c:	e7 ea       	ldi	r30, 0xA7	; 167
    822e:	f3 e1       	ldi	r31, 0x13	; 19
    8230:	11 82       	std	Z+1, r1	; 0x01
    8232:	10 82       	st	Z, r1
_ZN20ACMotorModuleCommandC4E15ACMotorMessages():
b:\gbox420\gbox420\gbox420_mega_main\build\sketch\src/wirelesscommands_acmotor.h:64
   }
};

struct ACMotorModuleCommand : ACMotorCommonTemplate ///< ACMotor module wireless command
{
   ACMotorModuleCommand(__attribute__((unused)) ACMotorMessages SequenceID) : ACMotorCommonTemplate(SequenceID) {}
    8234:	12 82       	std	Z+2, r1	; 0x02
    8236:	13 82       	std	Z+3, r1	; 0x03
    8238:	14 82       	std	Z+4, r1	; 0x04
    823a:	15 82       	std	Z+5, r1	; 0x05
    823c:	81 e0       	ldi	r24, 0x01	; 1
    823e:	86 83       	std	Z+6, r24	; 0x06
    8240:	87 83       	std	Z+7, r24	; 0x07
    8242:	11 86       	std	Z+9, r1	; 0x09
    8244:	10 86       	std	Z+8, r1	; 0x08
    8246:	82 87       	std	Z+10, r24	; 0x0a
    8248:	83 87       	std	Z+11, r24	; 0x0b
    824a:	84 87       	std	Z+12, r24	; 0x0c
    824c:	85 87       	std	Z+13, r24	; 0x0d
    824e:	86 87       	std	Z+14, r24	; 0x0e
_ZN21ACMotorCommonTemplateC4E15ACMotorMessages():
b:\gbox420\gbox420\gbox420_mega_main\build\sketch\src/wirelesscommands_acmotor.h:58
struct ACMotorCommonTemplate ///< ACMotor wireless template - Shared between Command and Respone packages
{
   ACMotorMessages SequenceID; ///< Commands and Responses can span across multiple 32byte packages. Packages with 0 SequenceID represent the initial attempt to exchange data
   ACMotorCommonTemplate(ACMotorMessages SequenceID)
   {
      this->SequenceID = SequenceID;
    8250:	e4 ea       	ldi	r30, 0xA4	; 164
    8252:	f3 e1       	ldi	r31, 0x13	; 19
    8254:	81 e0       	ldi	r24, 0x01	; 1
    8256:	90 e0       	ldi	r25, 0x00	; 0
    8258:	91 83       	std	Z+1, r25	; 0x01
    825a:	80 83       	st	Z, r24
_ZN21ACMotorModuleResponseC4E15ACMotorMessages():
b:\gbox420\gbox420\gbox420_mega_main\build\sketch\src/wirelesscommands_acmotor.h:79
   bool SerialReportWireless = true;
};

struct ACMotorModuleResponse : ACMotorCommonTemplate ///< ACMotor module wireless response
{
   ACMotorModuleResponse(__attribute__((unused)) ACMotorMessages SequenceID) : ACMotorCommonTemplate(SequenceID) {}
    825c:	12 82       	std	Z+2, r1	; 0x02
_ZN21ACMotorCommonTemplateC4E15ACMotorMessages():
b:\gbox420\gbox420\gbox420_mega_main\build\sketch\src/wirelesscommands_acmotor.h:58
struct ACMotorCommonTemplate ///< ACMotor wireless template - Shared between Command and Respone packages
{
   ACMotorMessages SequenceID; ///< Commands and Responses can span across multiple 32byte packages. Packages with 0 SequenceID represent the initial attempt to exchange data
   ACMotorCommonTemplate(ACMotorMessages SequenceID)
   {
      this->SequenceID = SequenceID;
    825e:	ee e9       	ldi	r30, 0x9E	; 158
    8260:	f3 e1       	ldi	r31, 0x13	; 19
    8262:	82 e0       	ldi	r24, 0x02	; 2
    8264:	90 e0       	ldi	r25, 0x00	; 0
    8266:	91 83       	std	Z+1, r25	; 0x01
    8268:	80 83       	st	Z, r24
_ZN14ACMotorCommandC4E15ACMotorMessages():
b:\gbox420\gbox420\gbox420_mega_main\build\sketch\src/wirelesscommands_acmotor.h:86
   bool Status = false;
};

struct ACMotorCommand : ACMotorCommonTemplate ///< ACMotor wireless command
{
   ACMotorCommand(__attribute__((unused)) ACMotorMessages SequenceID) : ACMotorCommonTemplate(SequenceID) {}
    826a:	12 82       	std	Z+2, r1	; 0x02
    826c:	13 82       	std	Z+3, r1	; 0x03
    826e:	14 82       	std	Z+4, r1	; 0x04
    8270:	15 82       	std	Z+5, r1	; 0x05
_ZN21ACMotorCommonTemplateC4E15ACMotorMessages():
b:\gbox420\gbox420\gbox420_mega_main\build\sketch\src/wirelesscommands_acmotor.h:58
struct ACMotorCommonTemplate ///< ACMotor wireless template - Shared between Command and Respone packages
{
   ACMotorMessages SequenceID; ///< Commands and Responses can span across multiple 32byte packages. Packages with 0 SequenceID represent the initial attempt to exchange data
   ACMotorCommonTemplate(ACMotorMessages SequenceID)
   {
      this->SequenceID = SequenceID;
    8272:	e3 e9       	ldi	r30, 0x93	; 147
    8274:	f3 e1       	ldi	r31, 0x13	; 19
    8276:	83 e0       	ldi	r24, 0x03	; 3
    8278:	90 e0       	ldi	r25, 0x00	; 0
    827a:	91 83       	std	Z+1, r25	; 0x01
    827c:	80 83       	st	Z, r24
_ZN15ACMotorResponseC4E15ACMotorMessages():
b:\gbox420\gbox420\gbox420_mega_main\build\sketch\src/wirelesscommands_acmotor.h:96
   uint8_t Speed = 0;     ///< Set motor speed %  (between 0%-100%)
};

struct ACMotorResponse : ACMotorCommonTemplate ///< ACMotor  wireless response
{
   ACMotorResponse(__attribute__((unused)) ACMotorMessages SequenceID) : ACMotorCommonTemplate(SequenceID) {}
    827e:	13 82       	std	Z+3, r1	; 0x03
    8280:	12 82       	std	Z+2, r1	; 0x02
    8282:	14 82       	std	Z+4, r1	; 0x04
    8284:	15 82       	std	Z+5, r1	; 0x05
    8286:	16 82       	std	Z+6, r1	; 0x06
    8288:	17 82       	std	Z+7, r1	; 0x07
    828a:	10 86       	std	Z+8, r1	; 0x08
    828c:	11 86       	std	Z+9, r1	; 0x09
    828e:	12 86       	std	Z+10, r1	; 0x0a
_ZN21ACMotorCommonTemplateC4E15ACMotorMessages():
b:\gbox420\gbox420\gbox420_mega_main\build\sketch\src/wirelesscommands_acmotor.h:58
struct ACMotorCommonTemplate ///< ACMotor wireless template - Shared between Command and Respone packages
{
   ACMotorMessages SequenceID; ///< Commands and Responses can span across multiple 32byte packages. Packages with 0 SequenceID represent the initial attempt to exchange data
   ACMotorCommonTemplate(ACMotorMessages SequenceID)
   {
      this->SequenceID = SequenceID;
    8290:	84 e0       	ldi	r24, 0x04	; 4
    8292:	90 e0       	ldi	r25, 0x00	; 0
    8294:	90 93 92 13 	sts	0x1392, r25	; 0x801392 <ACMotorResetToSend+0x1>
    8298:	80 93 91 13 	sts	0x1391, r24	; 0x801391 <ACMotorResetToSend>
_GLOBAL__sub_I_ACMotorModuleCommand1ToSend():
b:\Gbox420\Gbox420\Gbox420_Mega_Main\build\sketch\src\Modules_Web/ACMotorModule_Web .cpp:227
  ACMotorModuleCommand1ToSend.SerialReportMemory = *(Parent->SerialReportMemory);
  ACMotorModuleCommand1ToSend.SerialReportJSONFriendly = *(Parent->SerialReportJSONFriendly);
  ACMotorModuleCommand1ToSend.SerialReportJSON = *(Parent->SerialReportJSON);
  ACMotorModuleCommand1ToSend.SerialReportWireless = *(Parent->SerialReportWireless);
  ACMotorCommand1ToSend.Speed = DefaultSettings->Speed;
    829c:	08 95       	ret

0000829e <AeroModule_Web::refresh_Minute()>:
_ZN14AeroModule_Web14refresh_MinuteEv():
b:\Gbox420\Gbox420\Gbox420_Mega_Main\build\sketch\src\Modules_Web/AeroModule_Web.cpp:28
  Parent->addToRefreshQueue_Minute(this);
  Parent->addToWebsiteQueue_Load(this);
  Parent->addToWebsiteQueue_Refresh(this);
  Parent->addToCommandQueue(this);
  logToSerials(F("AeroModule_Web ready"), true, 3);
}
    829e:	dc 01       	movw	r26, r24
    82a0:	ed 91       	ld	r30, X+
    82a2:	fc 91       	ld	r31, X
    82a4:	36 97       	sbiw	r30, 0x06	; 6
    82a6:	20 81       	ld	r18, Z
    82a8:	31 81       	ldd	r19, Z+1	; 0x01
    82aa:	82 0f       	add	r24, r18
    82ac:	93 1f       	adc	r25, r19
    82ae:	0c 94 e2 18 	jmp	0x31c4	; 0x31c4 <Common::refresh_Minute()>

000082b2 <virtual thunk to AeroModule_Web::refresh_Minute()>:
_ZTv0_n12_N14AeroModule_Web14refresh_MinuteEv():
    82b2:	dc 01       	movw	r26, r24
    82b4:	ed 91       	ld	r30, X+
    82b6:	fc 91       	ld	r31, X
    82b8:	3c 97       	sbiw	r30, 0x0c	; 12
    82ba:	20 81       	ld	r18, Z
    82bc:	31 81       	ldd	r19, Z+1	; 0x01
    82be:	82 0f       	add	r24, r18
    82c0:	93 1f       	adc	r25, r19
    82c2:	0c 94 4f 41 	jmp	0x829e	; 0x829e <AeroModule_Web::refresh_Minute()>

000082c6 <AeroModule_Web::websiteEvent_Refresh(char*)>:
_ZN14AeroModule_Web20websiteEvent_RefreshEPc():
    82c6:	0f 93       	push	r16
    82c8:	1f 93       	push	r17
    82ca:	cf 93       	push	r28
    82cc:	df 93       	push	r29
    82ce:	ec 01       	movw	r28, r24
    82d0:	8b 81       	ldd	r24, Y+3	; 0x03
    82d2:	0e 94 03 35 	call	0x6a06	; 0x6a06 <toText_onlineStatus(bool)>
    82d6:	8c 01       	movw	r16, r24
    82d8:	e8 81       	ld	r30, Y
    82da:	f9 81       	ldd	r31, Y+1	; 0x01
    82dc:	36 97       	sbiw	r30, 0x06	; 6
    82de:	80 81       	ld	r24, Z
    82e0:	91 81       	ldd	r25, Z+1	; 0x01
    82e2:	41 e0       	ldi	r20, 0x01	; 1
    82e4:	69 ed       	ldi	r22, 0xD9	; 217
    82e6:	73 e1       	ldi	r23, 0x13	; 19
    82e8:	8c 0f       	add	r24, r28
    82ea:	9d 1f       	adc	r25, r29
    82ec:	0e 94 7e 19 	call	0x32fc	; 0x32fc <Common::getName(__FlashStringHelper const*, bool)>
    82f0:	a8 01       	movw	r20, r16
    82f2:	bc 01       	movw	r22, r24
    82f4:	89 ee       	ldi	r24, 0xE9	; 233
    82f6:	9c e0       	ldi	r25, 0x0C	; 12
    82f8:	0e 94 a9 77 	call	0xef52	; 0xef52 <ELClientWebServer::setArgString(char const*, char const*)>
    82fc:	20 91 d7 13 	lds	r18, 0x13D7	; 0x8013d7 <AeroResponse1Received+0x8>
    8300:	80 91 d5 13 	lds	r24, 0x13D5	; 0x8013d5 <AeroResponse1Received+0x6>
    8304:	90 91 d6 13 	lds	r25, 0x13D6	; 0x8013d6 <AeroResponse1Received+0x7>
    8308:	22 23       	and	r18, r18
    830a:	09 f4       	brne	.+2      	; 0x830e <AeroModule_Web::websiteEvent_Refresh(char*)+0x48>
    830c:	89 c0       	rjmp	.+274    	; 0x8420 <AeroModule_Web::websiteEvent_Refresh(char*)+0x15a>
    830e:	0e 94 83 35 	call	0x6b06	; 0x6b06 <toText_aeroTankState(AeroTankStates)>
    8312:	8c 01       	movw	r16, r24
    8314:	e8 81       	ld	r30, Y
    8316:	f9 81       	ldd	r31, Y+1	; 0x01
    8318:	36 97       	sbiw	r30, 0x06	; 6
    831a:	80 81       	ld	r24, Z
    831c:	91 81       	ldd	r25, Z+1	; 0x01
    831e:	41 e0       	ldi	r20, 0x01	; 1
    8320:	66 ed       	ldi	r22, 0xD6	; 214
    8322:	73 e1       	ldi	r23, 0x13	; 19
    8324:	8c 0f       	add	r24, r28
    8326:	9d 1f       	adc	r25, r29
    8328:	0e 94 7e 19 	call	0x32fc	; 0x32fc <Common::getName(__FlashStringHelper const*, bool)>
    832c:	a8 01       	movw	r20, r16
    832e:	bc 01       	movw	r22, r24
    8330:	89 ee       	ldi	r24, 0xE9	; 233
    8332:	9c e0       	ldi	r25, 0x0C	; 12
    8334:	0e 94 a9 77 	call	0xef52	; 0xef52 <ELClientWebServer::setArgString(char const*, char const*)>
    8338:	80 91 dd 13 	lds	r24, 0x13DD	; 0x8013dd <AeroResponse1Received+0xe>
    833c:	90 91 de 13 	lds	r25, 0x13DE	; 0x8013de <AeroResponse1Received+0xf>
    8340:	0e 94 51 35 	call	0x6aa2	; 0x6aa2 <toText_pressurePumpState(PressurePumpStates)>
    8344:	8c 01       	movw	r16, r24
    8346:	e8 81       	ld	r30, Y
    8348:	f9 81       	ldd	r31, Y+1	; 0x01
    834a:	36 97       	sbiw	r30, 0x06	; 6
    834c:	80 81       	ld	r24, Z
    834e:	91 81       	ldd	r25, Z+1	; 0x01
    8350:	41 e0       	ldi	r20, 0x01	; 1
    8352:	61 ed       	ldi	r22, 0xD1	; 209
    8354:	73 e1       	ldi	r23, 0x13	; 19
    8356:	8c 0f       	add	r24, r28
    8358:	9d 1f       	adc	r25, r29
    835a:	0e 94 7e 19 	call	0x32fc	; 0x32fc <Common::getName(__FlashStringHelper const*, bool)>
    835e:	a8 01       	movw	r20, r16
    8360:	bc 01       	movw	r22, r24
    8362:	89 ee       	ldi	r24, 0xE9	; 233
    8364:	9c e0       	ldi	r25, 0x0C	; 12
    8366:	0e 94 a9 77 	call	0xef52	; 0xef52 <ELClientWebServer::setArgString(char const*, char const*)>
    836a:	60 91 d9 13 	lds	r22, 0x13D9	; 0x8013d9 <AeroResponse1Received+0xa>
    836e:	70 91 da 13 	lds	r23, 0x13DA	; 0x8013da <AeroResponse1Received+0xb>
    8372:	80 91 db 13 	lds	r24, 0x13DB	; 0x8013db <AeroResponse1Received+0xc>
    8376:	90 91 dc 13 	lds	r25, 0x13DC	; 0x8013dc <AeroResponse1Received+0xd>
    837a:	0e 94 70 34 	call	0x68e0	; 0x68e0 <toText_pressure(float)>
    837e:	8c 01       	movw	r16, r24
    8380:	e8 81       	ld	r30, Y
    8382:	f9 81       	ldd	r31, Y+1	; 0x01
    8384:	36 97       	sbiw	r30, 0x06	; 6
    8386:	80 81       	ld	r24, Z
    8388:	91 81       	ldd	r25, Z+1	; 0x01
    838a:	41 e0       	ldi	r20, 0x01	; 1
    838c:	6e ec       	ldi	r22, 0xCE	; 206
    838e:	73 e1       	ldi	r23, 0x13	; 19
    8390:	8c 0f       	add	r24, r28
    8392:	9d 1f       	adc	r25, r29
    8394:	0e 94 7e 19 	call	0x32fc	; 0x32fc <Common::getName(__FlashStringHelper const*, bool)>
    8398:	a8 01       	movw	r20, r16
    839a:	bc 01       	movw	r22, r24
    839c:	89 ee       	ldi	r24, 0xE9	; 233
    839e:	9c e0       	ldi	r25, 0x0C	; 12
    83a0:	0e 94 a9 77 	call	0xef52	; 0xef52 <ELClientWebServer::setArgString(char const*, char const*)>
    83a4:	60 91 df 13 	lds	r22, 0x13DF	; 0x8013df <AeroResponse1Received+0x10>
    83a8:	70 91 e0 13 	lds	r23, 0x13E0	; 0x8013e0 <AeroResponse1Received+0x11>
    83ac:	80 91 e1 13 	lds	r24, 0x13E1	; 0x8013e1 <AeroResponse1Received+0x12>
    83b0:	90 91 e2 13 	lds	r25, 0x13E2	; 0x8013e2 <AeroResponse1Received+0x13>
    83b4:	0e 94 70 34 	call	0x68e0	; 0x68e0 <toText_pressure(float)>
    83b8:	8c 01       	movw	r16, r24
    83ba:	e8 81       	ld	r30, Y
    83bc:	f9 81       	ldd	r31, Y+1	; 0x01
    83be:	36 97       	sbiw	r30, 0x06	; 6
    83c0:	80 81       	ld	r24, Z
    83c2:	91 81       	ldd	r25, Z+1	; 0x01
    83c4:	41 e0       	ldi	r20, 0x01	; 1
    83c6:	6a ec       	ldi	r22, 0xCA	; 202
    83c8:	73 e1       	ldi	r23, 0x13	; 19
    83ca:	8c 0f       	add	r24, r28
    83cc:	9d 1f       	adc	r25, r29
    83ce:	0e 94 7e 19 	call	0x32fc	; 0x32fc <Common::getName(__FlashStringHelper const*, bool)>
    83d2:	a8 01       	movw	r20, r16
    83d4:	bc 01       	movw	r22, r24
    83d6:	89 ee       	ldi	r24, 0xE9	; 233
    83d8:	9c e0       	ldi	r25, 0x0C	; 12
    83da:	0e 94 a9 77 	call	0xef52	; 0xef52 <ELClientWebServer::setArgString(char const*, char const*)>
    83de:	60 91 e3 13 	lds	r22, 0x13E3	; 0x8013e3 <AeroResponse1Received+0x14>
    83e2:	70 91 e4 13 	lds	r23, 0x13E4	; 0x8013e4 <AeroResponse1Received+0x15>
    83e6:	80 91 e5 13 	lds	r24, 0x13E5	; 0x8013e5 <AeroResponse1Received+0x16>
    83ea:	90 91 e6 13 	lds	r25, 0x13E6	; 0x8013e6 <AeroResponse1Received+0x17>
    83ee:	0e 94 8e 34 	call	0x691c	; 0x691c <toText_weight(float)>
    83f2:	8c 01       	movw	r16, r24
    83f4:	e8 81       	ld	r30, Y
    83f6:	f9 81       	ldd	r31, Y+1	; 0x01
    83f8:	36 97       	sbiw	r30, 0x06	; 6
    83fa:	80 81       	ld	r24, Z
    83fc:	91 81       	ldd	r25, Z+1	; 0x01
    83fe:	41 e0       	ldi	r20, 0x01	; 1
    8400:	68 ec       	ldi	r22, 0xC8	; 200
    8402:	73 e1       	ldi	r23, 0x13	; 19
    8404:	8c 0f       	add	r24, r28
    8406:	9d 1f       	adc	r25, r29
    8408:	0e 94 7e 19 	call	0x32fc	; 0x32fc <Common::getName(__FlashStringHelper const*, bool)>
    840c:	a8 01       	movw	r20, r16
    840e:	bc 01       	movw	r22, r24
    8410:	89 ee       	ldi	r24, 0xE9	; 233
    8412:	9c e0       	ldi	r25, 0x0C	; 12
    8414:	df 91       	pop	r29
    8416:	cf 91       	pop	r28
    8418:	1f 91       	pop	r17
    841a:	0f 91       	pop	r16
    841c:	0c 94 a9 77 	jmp	0xef52	; 0xef52 <ELClientWebServer::setArgString(char const*, char const*)>
    8420:	0e 94 b5 35 	call	0x6b6a	; 0x6b6a <toText_aeroNoTankState(AeroNoTankStates)>
    8424:	8c 01       	movw	r16, r24
    8426:	e8 81       	ld	r30, Y
    8428:	f9 81       	ldd	r31, Y+1	; 0x01
    842a:	36 97       	sbiw	r30, 0x06	; 6
    842c:	80 81       	ld	r24, Z
    842e:	91 81       	ldd	r25, Z+1	; 0x01
    8430:	41 e0       	ldi	r20, 0x01	; 1
    8432:	63 ed       	ldi	r22, 0xD3	; 211
    8434:	73 e1       	ldi	r23, 0x13	; 19
    8436:	76 cf       	rjmp	.-276    	; 0x8324 <AeroModule_Web::websiteEvent_Refresh(char*)+0x5e>

00008438 <AeroModule_Web::websiteEvent_Load(char*)>:
_ZN14AeroModule_Web17websiteEvent_LoadEPc():
    8438:	cf 92       	push	r12
    843a:	df 92       	push	r13
    843c:	ef 92       	push	r14
    843e:	ff 92       	push	r15
    8440:	0f 93       	push	r16
    8442:	1f 93       	push	r17
    8444:	cf 93       	push	r28
    8446:	df 93       	push	r29
    8448:	ec 01       	movw	r28, r24
    844a:	10 91 d7 13 	lds	r17, 0x13D7	; 0x8013d7 <AeroResponse1Received+0x8>
    844e:	e8 81       	ld	r30, Y
    8450:	f9 81       	ldd	r31, Y+1	; 0x01
    8452:	36 97       	sbiw	r30, 0x06	; 6
    8454:	80 81       	ld	r24, Z
    8456:	91 81       	ldd	r25, Z+1	; 0x01
    8458:	41 e0       	ldi	r20, 0x01	; 1
    845a:	6b ef       	ldi	r22, 0xFB	; 251
    845c:	73 e1       	ldi	r23, 0x13	; 19
    845e:	8c 0f       	add	r24, r28
    8460:	9d 1f       	adc	r25, r29
    8462:	0e 94 7e 19 	call	0x32fc	; 0x32fc <Common::getName(__FlashStringHelper const*, bool)>
    8466:	41 2f       	mov	r20, r17
    8468:	bc 01       	movw	r22, r24
    846a:	89 ee       	ldi	r24, 0xE9	; 233
    846c:	9c e0       	ldi	r25, 0x0C	; 12
    846e:	0e 94 6d 78 	call	0xf0da	; 0xf0da <ELClientWebServer::setArgBoolean(char const*, unsigned char)>
    8472:	07 ee       	ldi	r16, 0xE7	; 231
    8474:	13 e1       	ldi	r17, 0x13	; 19
    8476:	f8 01       	movw	r30, r16
    8478:	67 81       	ldd	r22, Z+7	; 0x07
    847a:	70 85       	ldd	r23, Z+8	; 0x08
    847c:	81 85       	ldd	r24, Z+9	; 0x09
    847e:	92 85       	ldd	r25, Z+10	; 0x0a
    8480:	0e 94 a5 33 	call	0x674a	; 0x674a <toText(float)>
    8484:	7c 01       	movw	r14, r24
    8486:	e8 81       	ld	r30, Y
    8488:	f9 81       	ldd	r31, Y+1	; 0x01
    848a:	36 97       	sbiw	r30, 0x06	; 6
    848c:	80 81       	ld	r24, Z
    848e:	91 81       	ldd	r25, Z+1	; 0x01
    8490:	41 e0       	ldi	r20, 0x01	; 1
    8492:	67 ef       	ldi	r22, 0xF7	; 247
    8494:	73 e1       	ldi	r23, 0x13	; 19
    8496:	8c 0f       	add	r24, r28
    8498:	9d 1f       	adc	r25, r29
    849a:	0e 94 7e 19 	call	0x32fc	; 0x32fc <Common::getName(__FlashStringHelper const*, bool)>
    849e:	a7 01       	movw	r20, r14
    84a0:	bc 01       	movw	r22, r24
    84a2:	89 ee       	ldi	r24, 0xE9	; 233
    84a4:	9c e0       	ldi	r25, 0x0C	; 12
    84a6:	0e 94 a9 77 	call	0xef52	; 0xef52 <ELClientWebServer::setArgString(char const*, char const*)>
    84aa:	f8 01       	movw	r30, r16
    84ac:	c3 84       	ldd	r12, Z+11	; 0x0b
    84ae:	d4 84       	ldd	r13, Z+12	; 0x0c
    84b0:	0d 2c       	mov	r0, r13
    84b2:	00 0c       	add	r0, r0
    84b4:	ee 08       	sbc	r14, r14
    84b6:	ff 08       	sbc	r15, r15
    84b8:	e8 81       	ld	r30, Y
    84ba:	f9 81       	ldd	r31, Y+1	; 0x01
    84bc:	36 97       	sbiw	r30, 0x06	; 6
    84be:	80 81       	ld	r24, Z
    84c0:	91 81       	ldd	r25, Z+1	; 0x01
    84c2:	41 e0       	ldi	r20, 0x01	; 1
    84c4:	62 ef       	ldi	r22, 0xF2	; 242
    84c6:	73 e1       	ldi	r23, 0x13	; 19
    84c8:	8c 0f       	add	r24, r28
    84ca:	9d 1f       	adc	r25, r29
    84cc:	0e 94 7e 19 	call	0x32fc	; 0x32fc <Common::getName(__FlashStringHelper const*, bool)>
    84d0:	a7 01       	movw	r20, r14
    84d2:	96 01       	movw	r18, r12
    84d4:	bc 01       	movw	r22, r24
    84d6:	89 ee       	ldi	r24, 0xE9	; 233
    84d8:	9c e0       	ldi	r25, 0x0C	; 12
    84da:	0e 94 17 79 	call	0xf22e	; 0xf22e <ELClientWebServer::setArgInt(char const*, long)>
    84de:	f8 01       	movw	r30, r16
    84e0:	c5 84       	ldd	r12, Z+13	; 0x0d
    84e2:	d6 84       	ldd	r13, Z+14	; 0x0e
    84e4:	0d 2c       	mov	r0, r13
    84e6:	00 0c       	add	r0, r0
    84e8:	ee 08       	sbc	r14, r14
    84ea:	ff 08       	sbc	r15, r15
    84ec:	e8 81       	ld	r30, Y
    84ee:	f9 81       	ldd	r31, Y+1	; 0x01
    84f0:	36 97       	sbiw	r30, 0x06	; 6
    84f2:	80 81       	ld	r24, Z
    84f4:	91 81       	ldd	r25, Z+1	; 0x01
    84f6:	41 e0       	ldi	r20, 0x01	; 1
    84f8:	6d ee       	ldi	r22, 0xED	; 237
    84fa:	73 e1       	ldi	r23, 0x13	; 19
    84fc:	8c 0f       	add	r24, r28
    84fe:	9d 1f       	adc	r25, r29
    8500:	0e 94 7e 19 	call	0x32fc	; 0x32fc <Common::getName(__FlashStringHelper const*, bool)>
    8504:	a7 01       	movw	r20, r14
    8506:	96 01       	movw	r18, r12
    8508:	bc 01       	movw	r22, r24
    850a:	89 ee       	ldi	r24, 0xE9	; 233
    850c:	9c e0       	ldi	r25, 0x0C	; 12
    850e:	0e 94 17 79 	call	0xf22e	; 0xf22e <ELClientWebServer::setArgInt(char const*, long)>
    8512:	f8 01       	movw	r30, r16
    8514:	63 89       	ldd	r22, Z+19	; 0x13
    8516:	74 89       	ldd	r23, Z+20	; 0x14
    8518:	85 89       	ldd	r24, Z+21	; 0x15
    851a:	96 89       	ldd	r25, Z+22	; 0x16
    851c:	0e 94 a5 33 	call	0x674a	; 0x674a <toText(float)>
    8520:	7c 01       	movw	r14, r24
    8522:	e8 81       	ld	r30, Y
    8524:	f9 81       	ldd	r31, Y+1	; 0x01
    8526:	36 97       	sbiw	r30, 0x06	; 6
    8528:	80 81       	ld	r24, Z
    852a:	91 81       	ldd	r25, Z+1	; 0x01
    852c:	41 e0       	ldi	r20, 0x01	; 1
    852e:	69 ee       	ldi	r22, 0xE9	; 233
    8530:	73 e1       	ldi	r23, 0x13	; 19
    8532:	8c 0f       	add	r24, r28
    8534:	9d 1f       	adc	r25, r29
    8536:	0e 94 7e 19 	call	0x32fc	; 0x32fc <Common::getName(__FlashStringHelper const*, bool)>
    853a:	a7 01       	movw	r20, r14
    853c:	bc 01       	movw	r22, r24
    853e:	89 ee       	ldi	r24, 0xE9	; 233
    8540:	9c e0       	ldi	r25, 0x0C	; 12
    8542:	0e 94 a9 77 	call	0xef52	; 0xef52 <ELClientWebServer::setArgString(char const*, char const*)>
    8546:	f8 01       	movw	r30, r16
    8548:	67 85       	ldd	r22, Z+15	; 0x0f
    854a:	70 89       	ldd	r23, Z+16	; 0x10
    854c:	81 89       	ldd	r24, Z+17	; 0x11
    854e:	92 89       	ldd	r25, Z+18	; 0x12
    8550:	0e 94 a5 33 	call	0x674a	; 0x674a <toText(float)>
    8554:	8c 01       	movw	r16, r24
    8556:	e8 81       	ld	r30, Y
    8558:	f9 81       	ldd	r31, Y+1	; 0x01
    855a:	36 97       	sbiw	r30, 0x06	; 6
    855c:	80 81       	ld	r24, Z
    855e:	91 81       	ldd	r25, Z+1	; 0x01
    8560:	41 e0       	ldi	r20, 0x01	; 1
    8562:	65 ee       	ldi	r22, 0xE5	; 229
    8564:	73 e1       	ldi	r23, 0x13	; 19
    8566:	8c 0f       	add	r24, r28
    8568:	9d 1f       	adc	r25, r29
    856a:	0e 94 7e 19 	call	0x32fc	; 0x32fc <Common::getName(__FlashStringHelper const*, bool)>
    856e:	a8 01       	movw	r20, r16
    8570:	bc 01       	movw	r22, r24
    8572:	89 ee       	ldi	r24, 0xE9	; 233
    8574:	9c e0       	ldi	r25, 0x0C	; 12
    8576:	0e 94 a9 77 	call	0xef52	; 0xef52 <ELClientWebServer::setArgString(char const*, char const*)>
    857a:	01 ec       	ldi	r16, 0xC1	; 193
    857c:	13 e1       	ldi	r17, 0x13	; 19
    857e:	f8 01       	movw	r30, r16
    8580:	c1 84       	ldd	r12, Z+9	; 0x09
    8582:	d1 2c       	mov	r13, r1
    8584:	f1 2c       	mov	r15, r1
    8586:	e1 2c       	mov	r14, r1
    8588:	e8 81       	ld	r30, Y
    858a:	f9 81       	ldd	r31, Y+1	; 0x01
    858c:	36 97       	sbiw	r30, 0x06	; 6
    858e:	80 81       	ld	r24, Z
    8590:	91 81       	ldd	r25, Z+1	; 0x01
    8592:	41 e0       	ldi	r20, 0x01	; 1
    8594:	62 ee       	ldi	r22, 0xE2	; 226
    8596:	73 e1       	ldi	r23, 0x13	; 19
    8598:	8c 0f       	add	r24, r28
    859a:	9d 1f       	adc	r25, r29
    859c:	0e 94 7e 19 	call	0x32fc	; 0x32fc <Common::getName(__FlashStringHelper const*, bool)>
    85a0:	a7 01       	movw	r20, r14
    85a2:	96 01       	movw	r18, r12
    85a4:	bc 01       	movw	r22, r24
    85a6:	89 ee       	ldi	r24, 0xE9	; 233
    85a8:	9c e0       	ldi	r25, 0x0C	; 12
    85aa:	0e 94 17 79 	call	0xf22e	; 0xf22e <ELClientWebServer::setArgInt(char const*, long)>
    85ae:	f8 01       	movw	r30, r16
    85b0:	c4 84       	ldd	r12, Z+12	; 0x0c
    85b2:	d5 84       	ldd	r13, Z+13	; 0x0d
    85b4:	f1 2c       	mov	r15, r1
    85b6:	e1 2c       	mov	r14, r1
    85b8:	e8 81       	ld	r30, Y
    85ba:	f9 81       	ldd	r31, Y+1	; 0x01
    85bc:	36 97       	sbiw	r30, 0x06	; 6
    85be:	80 81       	ld	r24, Z
    85c0:	91 81       	ldd	r25, Z+1	; 0x01
    85c2:	41 e0       	ldi	r20, 0x01	; 1
    85c4:	6f ed       	ldi	r22, 0xDF	; 223
    85c6:	73 e1       	ldi	r23, 0x13	; 19
    85c8:	8c 0f       	add	r24, r28
    85ca:	9d 1f       	adc	r25, r29
    85cc:	0e 94 7e 19 	call	0x32fc	; 0x32fc <Common::getName(__FlashStringHelper const*, bool)>
    85d0:	a7 01       	movw	r20, r14
    85d2:	96 01       	movw	r18, r12
    85d4:	bc 01       	movw	r22, r24
    85d6:	89 ee       	ldi	r24, 0xE9	; 233
    85d8:	9c e0       	ldi	r25, 0x0C	; 12
    85da:	0e 94 17 79 	call	0xf22e	; 0xf22e <ELClientWebServer::setArgInt(char const*, long)>
    85de:	f8 01       	movw	r30, r16
    85e0:	c2 84       	ldd	r12, Z+10	; 0x0a
    85e2:	d3 84       	ldd	r13, Z+11	; 0x0b
    85e4:	0d 2c       	mov	r0, r13
    85e6:	00 0c       	add	r0, r0
    85e8:	ee 08       	sbc	r14, r14
    85ea:	ff 08       	sbc	r15, r15
    85ec:	e8 81       	ld	r30, Y
    85ee:	f9 81       	ldd	r31, Y+1	; 0x01
    85f0:	36 97       	sbiw	r30, 0x06	; 6
    85f2:	80 81       	ld	r24, Z
    85f4:	91 81       	ldd	r25, Z+1	; 0x01
    85f6:	41 e0       	ldi	r20, 0x01	; 1
    85f8:	6b ed       	ldi	r22, 0xDB	; 219
    85fa:	73 e1       	ldi	r23, 0x13	; 19
    85fc:	8c 0f       	add	r24, r28
    85fe:	9d 1f       	adc	r25, r29
    8600:	0e 94 7e 19 	call	0x32fc	; 0x32fc <Common::getName(__FlashStringHelper const*, bool)>
    8604:	a7 01       	movw	r20, r14
    8606:	96 01       	movw	r18, r12
    8608:	bc 01       	movw	r22, r24
    860a:	89 ee       	ldi	r24, 0xE9	; 233
    860c:	9c e0       	ldi	r25, 0x0C	; 12
    860e:	df 91       	pop	r29
    8610:	cf 91       	pop	r28
    8612:	1f 91       	pop	r17
    8614:	0f 91       	pop	r16
    8616:	ff 90       	pop	r15
    8618:	ef 90       	pop	r14
    861a:	df 90       	pop	r13
    861c:	cf 90       	pop	r12
    861e:	0c 94 17 79 	jmp	0xf22e	; 0xf22e <ELClientWebServer::setArgInt(char const*, long)>

00008622 <AeroModule_Web::commandEvent(char*, char*)>:
_ZN14AeroModule_Web12commandEventEPcS0_():
    8622:	cf 92       	push	r12
    8624:	df 92       	push	r13
    8626:	ff 92       	push	r15
    8628:	0f 93       	push	r16
    862a:	1f 93       	push	r17
    862c:	cf 93       	push	r28
    862e:	df 93       	push	r29
    8630:	ec 01       	movw	r28, r24
    8632:	8a 01       	movw	r16, r20
    8634:	e8 81       	ld	r30, Y
    8636:	f9 81       	ldd	r31, Y+1	; 0x01
    8638:	36 97       	sbiw	r30, 0x06	; 6
    863a:	80 81       	ld	r24, Z
    863c:	91 81       	ldd	r25, Z+1	; 0x01
    863e:	8c 0f       	add	r24, r28
    8640:	9d 1f       	adc	r25, r29
    8642:	0e 94 25 19 	call	0x324a	; 0x324a <Common::isThisMine(char const*)>
    8646:	f8 2e       	mov	r15, r24
    8648:	88 23       	and	r24, r24
    864a:	09 f4       	brne	.+2      	; 0x864e <AeroModule_Web::commandEvent(char*, char*)+0x2c>
    864c:	91 c1       	rjmp	.+802    	; 0x8970 <AeroModule_Web::commandEvent(char*, char*)+0x34e>
    864e:	60 ec       	ldi	r22, 0xC0	; 192
    8650:	73 e1       	ldi	r23, 0x13	; 19
    8652:	81 eb       	ldi	r24, 0xB1	; 177
    8654:	9d e0       	ldi	r25, 0x0D	; 13
    8656:	0e 94 e5 94 	call	0x129ca	; 0x129ca <strcmp_P>
    865a:	89 2b       	or	r24, r25
    865c:	b9 f4       	brne	.+46     	; 0x868c <AeroModule_Web::commandEvent(char*, char*)+0x6a>
    865e:	81 e0       	ldi	r24, 0x01	; 1
    8660:	80 93 ea 13 	sts	0x13EA, r24	; 0x8013ea <AeroCommand1ToSend+0x3>
    8664:	ea 85       	ldd	r30, Y+10	; 0x0a
    8666:	fb 85       	ldd	r31, Y+11	; 0x0b
    8668:	a0 81       	ld	r26, Z
    866a:	b1 81       	ldd	r27, Z+1	; 0x01
    866c:	50 97       	sbiw	r26, 0x10	; 16
    866e:	8d 91       	ld	r24, X+
    8670:	9c 91       	ld	r25, X
    8672:	8e 0f       	add	r24, r30
    8674:	9f 1f       	adc	r25, r31
    8676:	dc 01       	movw	r26, r24
    8678:	ed 91       	ld	r30, X+
    867a:	fc 91       	ld	r31, X
    867c:	02 84       	ldd	r0, Z+10	; 0x0a
    867e:	f3 85       	ldd	r31, Z+11	; 0x0b
    8680:	e0 2d       	mov	r30, r0
    8682:	40 e0       	ldi	r20, 0x00	; 0
    8684:	62 eb       	ldi	r22, 0xB2	; 178
    8686:	73 e1       	ldi	r23, 0x13	; 19
    8688:	19 95       	eicall
    868a:	70 c1       	rjmp	.+736    	; 0x896c <AeroModule_Web::commandEvent(char*, char*)+0x34a>
    868c:	69 ea       	ldi	r22, 0xA9	; 169
    868e:	73 e1       	ldi	r23, 0x13	; 19
    8690:	81 eb       	ldi	r24, 0xB1	; 177
    8692:	9d e0       	ldi	r25, 0x0D	; 13
    8694:	0e 94 e5 94 	call	0x129ca	; 0x129ca <strcmp_P>
    8698:	89 2b       	or	r24, r25
    869a:	b1 f4       	brne	.+44     	; 0x86c8 <AeroModule_Web::commandEvent(char*, char*)+0xa6>
    869c:	81 e0       	ldi	r24, 0x01	; 1
    869e:	80 93 eb 13 	sts	0x13EB, r24	; 0x8013eb <AeroCommand1ToSend+0x4>
    86a2:	ea 85       	ldd	r30, Y+10	; 0x0a
    86a4:	fb 85       	ldd	r31, Y+11	; 0x0b
    86a6:	a0 81       	ld	r26, Z
    86a8:	b1 81       	ldd	r27, Z+1	; 0x01
    86aa:	50 97       	sbiw	r26, 0x10	; 16
    86ac:	8d 91       	ld	r24, X+
    86ae:	9c 91       	ld	r25, X
    86b0:	8e 0f       	add	r24, r30
    86b2:	9f 1f       	adc	r25, r31
    86b4:	dc 01       	movw	r26, r24
    86b6:	ed 91       	ld	r30, X+
    86b8:	fc 91       	ld	r31, X
    86ba:	02 84       	ldd	r0, Z+10	; 0x0a
    86bc:	f3 85       	ldd	r31, Z+11	; 0x0b
    86be:	e0 2d       	mov	r30, r0
    86c0:	40 e0       	ldi	r20, 0x00	; 0
    86c2:	6a e9       	ldi	r22, 0x9A	; 154
    86c4:	73 e1       	ldi	r23, 0x13	; 19
    86c6:	e0 cf       	rjmp	.-64     	; 0x8688 <AeroModule_Web::commandEvent(char*, char*)+0x66>
    86c8:	61 e9       	ldi	r22, 0x91	; 145
    86ca:	73 e1       	ldi	r23, 0x13	; 19
    86cc:	81 eb       	ldi	r24, 0xB1	; 177
    86ce:	9d e0       	ldi	r25, 0x0D	; 13
    86d0:	0e 94 e5 94 	call	0x129ca	; 0x129ca <strcmp_P>
    86d4:	89 2b       	or	r24, r25
    86d6:	b1 f4       	brne	.+44     	; 0x8704 <AeroModule_Web::commandEvent(char*, char*)+0xe2>
    86d8:	81 e0       	ldi	r24, 0x01	; 1
    86da:	80 93 ec 13 	sts	0x13EC, r24	; 0x8013ec <AeroCommand1ToSend+0x5>
    86de:	ea 85       	ldd	r30, Y+10	; 0x0a
    86e0:	fb 85       	ldd	r31, Y+11	; 0x0b
    86e2:	a0 81       	ld	r26, Z
    86e4:	b1 81       	ldd	r27, Z+1	; 0x01
    86e6:	50 97       	sbiw	r26, 0x10	; 16
    86e8:	8d 91       	ld	r24, X+
    86ea:	9c 91       	ld	r25, X
    86ec:	8e 0f       	add	r24, r30
    86ee:	9f 1f       	adc	r25, r31
    86f0:	dc 01       	movw	r26, r24
    86f2:	ed 91       	ld	r30, X+
    86f4:	fc 91       	ld	r31, X
    86f6:	02 84       	ldd	r0, Z+10	; 0x0a
    86f8:	f3 85       	ldd	r31, Z+11	; 0x0b
    86fa:	e0 2d       	mov	r30, r0
    86fc:	43 e0       	ldi	r20, 0x03	; 3
    86fe:	62 e8       	ldi	r22, 0x82	; 130
    8700:	73 e1       	ldi	r23, 0x13	; 19
    8702:	c2 cf       	rjmp	.-124    	; 0x8688 <AeroModule_Web::commandEvent(char*, char*)+0x66>
    8704:	69 e7       	ldi	r22, 0x79	; 121
    8706:	73 e1       	ldi	r23, 0x13	; 19
    8708:	81 eb       	ldi	r24, 0xB1	; 177
    870a:	9d e0       	ldi	r25, 0x0D	; 13
    870c:	0e 94 e5 94 	call	0x129ca	; 0x129ca <strcmp_P>
    8710:	89 2b       	or	r24, r25
    8712:	b1 f4       	brne	.+44     	; 0x8740 <AeroModule_Web::commandEvent(char*, char*)+0x11e>
    8714:	81 e0       	ldi	r24, 0x01	; 1
    8716:	80 93 ed 13 	sts	0x13ED, r24	; 0x8013ed <AeroCommand1ToSend+0x6>
    871a:	ea 85       	ldd	r30, Y+10	; 0x0a
    871c:	fb 85       	ldd	r31, Y+11	; 0x0b
    871e:	a0 81       	ld	r26, Z
    8720:	b1 81       	ldd	r27, Z+1	; 0x01
    8722:	50 97       	sbiw	r26, 0x10	; 16
    8724:	8d 91       	ld	r24, X+
    8726:	9c 91       	ld	r25, X
    8728:	8e 0f       	add	r24, r30
    872a:	9f 1f       	adc	r25, r31
    872c:	dc 01       	movw	r26, r24
    872e:	ed 91       	ld	r30, X+
    8730:	fc 91       	ld	r31, X
    8732:	02 84       	ldd	r0, Z+10	; 0x0a
    8734:	f3 85       	ldd	r31, Z+11	; 0x0b
    8736:	e0 2d       	mov	r30, r0
    8738:	40 e0       	ldi	r20, 0x00	; 0
    873a:	6e e6       	ldi	r22, 0x6E	; 110
    873c:	73 e1       	ldi	r23, 0x13	; 19
    873e:	a4 cf       	rjmp	.-184    	; 0x8688 <AeroModule_Web::commandEvent(char*, char*)+0x66>
    8740:	67 e6       	ldi	r22, 0x67	; 103
    8742:	73 e1       	ldi	r23, 0x13	; 19
    8744:	81 eb       	ldi	r24, 0xB1	; 177
    8746:	9d e0       	ldi	r25, 0x0D	; 13
    8748:	0e 94 e5 94 	call	0x129ca	; 0x129ca <strcmp_P>
    874c:	89 2b       	or	r24, r25
    874e:	b1 f4       	brne	.+44     	; 0x877c <AeroModule_Web::commandEvent(char*, char*)+0x15a>
    8750:	81 e0       	ldi	r24, 0x01	; 1
    8752:	80 93 c3 13 	sts	0x13C3, r24	; 0x8013c3 <AeroCommand2ToSend+0x2>
    8756:	ea 85       	ldd	r30, Y+10	; 0x0a
    8758:	fb 85       	ldd	r31, Y+11	; 0x0b
    875a:	a0 81       	ld	r26, Z
    875c:	b1 81       	ldd	r27, Z+1	; 0x01
    875e:	50 97       	sbiw	r26, 0x10	; 16
    8760:	8d 91       	ld	r24, X+
    8762:	9c 91       	ld	r25, X
    8764:	8e 0f       	add	r24, r30
    8766:	9f 1f       	adc	r25, r31
    8768:	dc 01       	movw	r26, r24
    876a:	ed 91       	ld	r30, X+
    876c:	fc 91       	ld	r31, X
    876e:	02 84       	ldd	r0, Z+10	; 0x0a
    8770:	f3 85       	ldd	r31, Z+11	; 0x0b
    8772:	e0 2d       	mov	r30, r0
    8774:	40 e0       	ldi	r20, 0x00	; 0
    8776:	6a e5       	ldi	r22, 0x5A	; 90
    8778:	73 e1       	ldi	r23, 0x13	; 19
    877a:	86 cf       	rjmp	.-244    	; 0x8688 <AeroModule_Web::commandEvent(char*, char*)+0x66>
    877c:	62 e5       	ldi	r22, 0x52	; 82
    877e:	73 e1       	ldi	r23, 0x13	; 19
    8780:	81 eb       	ldi	r24, 0xB1	; 177
    8782:	9d e0       	ldi	r25, 0x0D	; 13
    8784:	0e 94 e5 94 	call	0x129ca	; 0x129ca <strcmp_P>
    8788:	89 2b       	or	r24, r25
    878a:	b1 f4       	brne	.+44     	; 0x87b8 <AeroModule_Web::commandEvent(char*, char*)+0x196>
    878c:	81 e0       	ldi	r24, 0x01	; 1
    878e:	80 93 c4 13 	sts	0x13C4, r24	; 0x8013c4 <AeroCommand2ToSend+0x3>
    8792:	ea 85       	ldd	r30, Y+10	; 0x0a
    8794:	fb 85       	ldd	r31, Y+11	; 0x0b
    8796:	a0 81       	ld	r26, Z
    8798:	b1 81       	ldd	r27, Z+1	; 0x01
    879a:	50 97       	sbiw	r26, 0x10	; 16
    879c:	8d 91       	ld	r24, X+
    879e:	9c 91       	ld	r25, X
    87a0:	8e 0f       	add	r24, r30
    87a2:	9f 1f       	adc	r25, r31
    87a4:	dc 01       	movw	r26, r24
    87a6:	ed 91       	ld	r30, X+
    87a8:	fc 91       	ld	r31, X
    87aa:	02 84       	ldd	r0, Z+10	; 0x0a
    87ac:	f3 85       	ldd	r31, Z+11	; 0x0b
    87ae:	e0 2d       	mov	r30, r0
    87b0:	40 e0       	ldi	r20, 0x00	; 0
    87b2:	63 e4       	ldi	r22, 0x43	; 67
    87b4:	73 e1       	ldi	r23, 0x13	; 19
    87b6:	68 cf       	rjmp	.-304    	; 0x8688 <AeroModule_Web::commandEvent(char*, char*)+0x66>
    87b8:	6b e3       	ldi	r22, 0x3B	; 59
    87ba:	73 e1       	ldi	r23, 0x13	; 19
    87bc:	81 eb       	ldi	r24, 0xB1	; 177
    87be:	9d e0       	ldi	r25, 0x0D	; 13
    87c0:	0e 94 e5 94 	call	0x129ca	; 0x129ca <strcmp_P>
    87c4:	89 2b       	or	r24, r25
    87c6:	b1 f4       	brne	.+44     	; 0x87f4 <AeroModule_Web::commandEvent(char*, char*)+0x1d2>
    87c8:	81 e0       	ldi	r24, 0x01	; 1
    87ca:	80 93 c5 13 	sts	0x13C5, r24	; 0x8013c5 <AeroCommand2ToSend+0x4>
    87ce:	ea 85       	ldd	r30, Y+10	; 0x0a
    87d0:	fb 85       	ldd	r31, Y+11	; 0x0b
    87d2:	a0 81       	ld	r26, Z
    87d4:	b1 81       	ldd	r27, Z+1	; 0x01
    87d6:	50 97       	sbiw	r26, 0x10	; 16
    87d8:	8d 91       	ld	r24, X+
    87da:	9c 91       	ld	r25, X
    87dc:	8e 0f       	add	r24, r30
    87de:	9f 1f       	adc	r25, r31
    87e0:	dc 01       	movw	r26, r24
    87e2:	ed 91       	ld	r30, X+
    87e4:	fc 91       	ld	r31, X
    87e6:	02 84       	ldd	r0, Z+10	; 0x0a
    87e8:	f3 85       	ldd	r31, Z+11	; 0x0b
    87ea:	e0 2d       	mov	r30, r0
    87ec:	40 e0       	ldi	r20, 0x00	; 0
    87ee:	68 e2       	ldi	r22, 0x28	; 40
    87f0:	73 e1       	ldi	r23, 0x13	; 19
    87f2:	4a cf       	rjmp	.-364    	; 0x8688 <AeroModule_Web::commandEvent(char*, char*)+0x66>
    87f4:	64 e2       	ldi	r22, 0x24	; 36
    87f6:	73 e1       	ldi	r23, 0x13	; 19
    87f8:	81 eb       	ldi	r24, 0xB1	; 177
    87fa:	9d e0       	ldi	r25, 0x0D	; 13
    87fc:	0e 94 e5 94 	call	0x129ca	; 0x129ca <strcmp_P>
    8800:	89 2b       	or	r24, r25
    8802:	b1 f4       	brne	.+44     	; 0x8830 <AeroModule_Web::commandEvent(char*, char*)+0x20e>
    8804:	81 e0       	ldi	r24, 0x01	; 1
    8806:	80 93 c6 13 	sts	0x13C6, r24	; 0x8013c6 <AeroCommand2ToSend+0x5>
    880a:	ea 85       	ldd	r30, Y+10	; 0x0a
    880c:	fb 85       	ldd	r31, Y+11	; 0x0b
    880e:	a0 81       	ld	r26, Z
    8810:	b1 81       	ldd	r27, Z+1	; 0x01
    8812:	50 97       	sbiw	r26, 0x10	; 16
    8814:	8d 91       	ld	r24, X+
    8816:	9c 91       	ld	r25, X
    8818:	8e 0f       	add	r24, r30
    881a:	9f 1f       	adc	r25, r31
    881c:	dc 01       	movw	r26, r24
    881e:	ed 91       	ld	r30, X+
    8820:	fc 91       	ld	r31, X
    8822:	02 84       	ldd	r0, Z+10	; 0x0a
    8824:	f3 85       	ldd	r31, Z+11	; 0x0b
    8826:	e0 2d       	mov	r30, r0
    8828:	40 e0       	ldi	r20, 0x00	; 0
    882a:	63 e1       	ldi	r22, 0x13	; 19
    882c:	73 e1       	ldi	r23, 0x13	; 19
    882e:	2c cf       	rjmp	.-424    	; 0x8688 <AeroModule_Web::commandEvent(char*, char*)+0x66>
    8830:	61 e1       	ldi	r22, 0x11	; 17
    8832:	73 e1       	ldi	r23, 0x13	; 19
    8834:	81 eb       	ldi	r24, 0xB1	; 177
    8836:	9d e0       	ldi	r25, 0x0D	; 13
    8838:	0e 94 e5 94 	call	0x129ca	; 0x129ca <strcmp_P>
    883c:	89 2b       	or	r24, r25
    883e:	b1 f4       	brne	.+44     	; 0x886c <AeroModule_Web::commandEvent(char*, char*)+0x24a>
    8840:	81 e0       	ldi	r24, 0x01	; 1
    8842:	80 93 c9 13 	sts	0x13C9, r24	; 0x8013c9 <AeroCommand2ToSend+0x8>
    8846:	ea 85       	ldd	r30, Y+10	; 0x0a
    8848:	fb 85       	ldd	r31, Y+11	; 0x0b
    884a:	a0 81       	ld	r26, Z
    884c:	b1 81       	ldd	r27, Z+1	; 0x01
    884e:	50 97       	sbiw	r26, 0x10	; 16
    8850:	8d 91       	ld	r24, X+
    8852:	9c 91       	ld	r25, X
    8854:	8e 0f       	add	r24, r30
    8856:	9f 1f       	adc	r25, r31
    8858:	dc 01       	movw	r26, r24
    885a:	ed 91       	ld	r30, X+
    885c:	fc 91       	ld	r31, X
    885e:	02 84       	ldd	r0, Z+10	; 0x0a
    8860:	f3 85       	ldd	r31, Z+11	; 0x0b
    8862:	e0 2d       	mov	r30, r0
    8864:	40 e0       	ldi	r20, 0x00	; 0
    8866:	6f ef       	ldi	r22, 0xFF	; 255
    8868:	72 e1       	ldi	r23, 0x12	; 18
    886a:	0e cf       	rjmp	.-484    	; 0x8688 <AeroModule_Web::commandEvent(char*, char*)+0x66>
    886c:	68 ef       	ldi	r22, 0xF8	; 248
    886e:	72 e1       	ldi	r23, 0x12	; 18
    8870:	81 eb       	ldi	r24, 0xB1	; 177
    8872:	9d e0       	ldi	r25, 0x0D	; 13
    8874:	0e 94 e5 94 	call	0x129ca	; 0x129ca <strcmp_P>
    8878:	89 2b       	or	r24, r25
    887a:	f1 f4       	brne	.+60     	; 0x88b8 <AeroModule_Web::commandEvent(char*, char*)+0x296>
    887c:	ea 85       	ldd	r30, Y+10	; 0x0a
    887e:	fb 85       	ldd	r31, Y+11	; 0x0b
    8880:	a0 81       	ld	r26, Z
    8882:	b1 81       	ldd	r27, Z+1	; 0x01
    8884:	50 97       	sbiw	r26, 0x10	; 16
    8886:	8d 91       	ld	r24, X+
    8888:	9c 91       	ld	r25, X
    888a:	8e 0f       	add	r24, r30
    888c:	9f 1f       	adc	r25, r31
    888e:	dc 01       	movw	r26, r24
    8890:	ed 91       	ld	r30, X+
    8892:	fc 91       	ld	r31, X
    8894:	02 84       	ldd	r0, Z+10	; 0x0a
    8896:	f3 85       	ldd	r31, Z+11	; 0x0b
    8898:	e0 2d       	mov	r30, r0
    889a:	20 91 d7 13 	lds	r18, 0x13D7	; 0x8013d7 <AeroResponse1Received+0x8>
    889e:	40 e0       	ldi	r20, 0x00	; 0
    88a0:	6d ec       	ldi	r22, 0xCD	; 205
    88a2:	72 e1       	ldi	r23, 0x12	; 18
    88a4:	22 23       	and	r18, r18
    88a6:	09 f4       	brne	.+2      	; 0x88aa <AeroModule_Web::commandEvent(char*, char*)+0x288>
    88a8:	ef ce       	rjmp	.-546    	; 0x8688 <AeroModule_Web::commandEvent(char*, char*)+0x66>
    88aa:	21 e0       	ldi	r18, 0x01	; 1
    88ac:	20 93 c7 13 	sts	0x13C7, r18	; 0x8013c7 <AeroCommand2ToSend+0x6>
    88b0:	40 e0       	ldi	r20, 0x00	; 0
    88b2:	69 ee       	ldi	r22, 0xE9	; 233
    88b4:	72 e1       	ldi	r23, 0x12	; 18
    88b6:	e8 ce       	rjmp	.-560    	; 0x8688 <AeroModule_Web::commandEvent(char*, char*)+0x66>
    88b8:	67 ec       	ldi	r22, 0xC7	; 199
    88ba:	72 e1       	ldi	r23, 0x12	; 18
    88bc:	81 eb       	ldi	r24, 0xB1	; 177
    88be:	9d e0       	ldi	r25, 0x0D	; 13
    88c0:	0e 94 e5 94 	call	0x129ca	; 0x129ca <strcmp_P>
    88c4:	89 2b       	or	r24, r25
    88c6:	f1 f4       	brne	.+60     	; 0x8904 <AeroModule_Web::commandEvent(char*, char*)+0x2e2>
    88c8:	ea 85       	ldd	r30, Y+10	; 0x0a
    88ca:	fb 85       	ldd	r31, Y+11	; 0x0b
    88cc:	a0 81       	ld	r26, Z
    88ce:	b1 81       	ldd	r27, Z+1	; 0x01
    88d0:	50 97       	sbiw	r26, 0x10	; 16
    88d2:	8d 91       	ld	r24, X+
    88d4:	9c 91       	ld	r25, X
    88d6:	8e 0f       	add	r24, r30
    88d8:	9f 1f       	adc	r25, r31
    88da:	dc 01       	movw	r26, r24
    88dc:	ed 91       	ld	r30, X+
    88de:	fc 91       	ld	r31, X
    88e0:	02 84       	ldd	r0, Z+10	; 0x0a
    88e2:	f3 85       	ldd	r31, Z+11	; 0x0b
    88e4:	e0 2d       	mov	r30, r0
    88e6:	20 91 d7 13 	lds	r18, 0x13D7	; 0x8013d7 <AeroResponse1Received+0x8>
    88ea:	40 e0       	ldi	r20, 0x00	; 0
    88ec:	6d e9       	ldi	r22, 0x9D	; 157
    88ee:	72 e1       	ldi	r23, 0x12	; 18
    88f0:	22 23       	and	r18, r18
    88f2:	09 f4       	brne	.+2      	; 0x88f6 <AeroModule_Web::commandEvent(char*, char*)+0x2d4>
    88f4:	c9 ce       	rjmp	.-622    	; 0x8688 <AeroModule_Web::commandEvent(char*, char*)+0x66>
    88f6:	21 e0       	ldi	r18, 0x01	; 1
    88f8:	20 93 c8 13 	sts	0x13C8, r18	; 0x8013c8 <AeroCommand2ToSend+0x7>
    88fc:	40 e0       	ldi	r20, 0x00	; 0
    88fe:	69 eb       	ldi	r22, 0xB9	; 185
    8900:	72 e1       	ldi	r23, 0x12	; 18
    8902:	c2 ce       	rjmp	.-636    	; 0x8688 <AeroModule_Web::commandEvent(char*, char*)+0x66>
    8904:	69 e9       	ldi	r22, 0x99	; 153
    8906:	72 e1       	ldi	r23, 0x12	; 18
    8908:	81 eb       	ldi	r24, 0xB1	; 177
    890a:	9d e0       	ldi	r25, 0x0D	; 13
    890c:	0e 94 e5 94 	call	0x129ca	; 0x129ca <strcmp_P>
    8910:	89 2b       	or	r24, r25
    8912:	e9 f4       	brne	.+58     	; 0x894e <AeroModule_Web::commandEvent(char*, char*)+0x32c>
    8914:	ca 88       	ldd	r12, Y+18	; 0x12
    8916:	db 88       	ldd	r13, Y+19	; 0x13
    8918:	c8 01       	movw	r24, r16
    891a:	0e 94 38 35 	call	0x6a70	; 0x6a70 <toFloat(char*)>
    891e:	f6 01       	movw	r30, r12
    8920:	61 83       	std	Z+1, r22	; 0x01
    8922:	72 83       	std	Z+2, r23	; 0x02
    8924:	83 83       	std	Z+3, r24	; 0x03
    8926:	94 83       	std	Z+4, r25	; 0x04
    8928:	ea 85       	ldd	r30, Y+10	; 0x0a
    892a:	fb 85       	ldd	r31, Y+11	; 0x0b
    892c:	a0 81       	ld	r26, Z
    892e:	b1 81       	ldd	r27, Z+1	; 0x01
    8930:	50 97       	sbiw	r26, 0x10	; 16
    8932:	8d 91       	ld	r24, X+
    8934:	9c 91       	ld	r25, X
    8936:	8e 0f       	add	r24, r30
    8938:	9f 1f       	adc	r25, r31
    893a:	dc 01       	movw	r26, r24
    893c:	ed 91       	ld	r30, X+
    893e:	fc 91       	ld	r31, X
    8940:	02 84       	ldd	r0, Z+10	; 0x0a
    8942:	f3 85       	ldd	r31, Z+11	; 0x0b
    8944:	e0 2d       	mov	r30, r0
    8946:	40 e0       	ldi	r20, 0x00	; 0
    8948:	62 e8       	ldi	r22, 0x82	; 130
    894a:	72 e1       	ldi	r23, 0x12	; 18
    894c:	9d ce       	rjmp	.-710    	; 0x8688 <AeroModule_Web::commandEvent(char*, char*)+0x66>
    894e:	6d e7       	ldi	r22, 0x7D	; 125
    8950:	72 e1       	ldi	r23, 0x12	; 18
    8952:	81 eb       	ldi	r24, 0xB1	; 177
    8954:	9d e0       	ldi	r25, 0x0D	; 13
    8956:	0e 94 e5 94 	call	0x129ca	; 0x129ca <strcmp_P>
    895a:	89 2b       	or	r24, r25
    895c:	91 f4       	brne	.+36     	; 0x8982 <AeroModule_Web::commandEvent(char*, char*)+0x360>
    895e:	c8 01       	movw	r24, r16
    8960:	0e 94 36 35 	call	0x6a6c	; 0x6a6c <toInt(char*)>
    8964:	ea 89       	ldd	r30, Y+18	; 0x12
    8966:	fb 89       	ldd	r31, Y+19	; 0x13
    8968:	96 83       	std	Z+6, r25	; 0x06
    896a:	85 83       	std	Z+5, r24	; 0x05
    896c:	81 e0       	ldi	r24, 0x01	; 1
    896e:	8a 83       	std	Y+2, r24	; 0x02
    8970:	8f 2d       	mov	r24, r15
    8972:	df 91       	pop	r29
    8974:	cf 91       	pop	r28
    8976:	1f 91       	pop	r17
    8978:	0f 91       	pop	r16
    897a:	ff 90       	pop	r15
    897c:	df 90       	pop	r13
    897e:	cf 90       	pop	r12
    8980:	08 95       	ret
    8982:	68 e7       	ldi	r22, 0x78	; 120
    8984:	72 e1       	ldi	r23, 0x12	; 18
    8986:	81 eb       	ldi	r24, 0xB1	; 177
    8988:	9d e0       	ldi	r25, 0x0D	; 13
    898a:	0e 94 e5 94 	call	0x129ca	; 0x129ca <strcmp_P>
    898e:	89 2b       	or	r24, r25
    8990:	d1 f4       	brne	.+52     	; 0x89c6 <AeroModule_Web::commandEvent(char*, char*)+0x3a4>
    8992:	c8 01       	movw	r24, r16
    8994:	0e 94 36 35 	call	0x6a6c	; 0x6a6c <toInt(char*)>
    8998:	ea 89       	ldd	r30, Y+18	; 0x12
    899a:	fb 89       	ldd	r31, Y+19	; 0x13
    899c:	90 87       	std	Z+8, r25	; 0x08
    899e:	87 83       	std	Z+7, r24	; 0x07
    89a0:	ea 85       	ldd	r30, Y+10	; 0x0a
    89a2:	fb 85       	ldd	r31, Y+11	; 0x0b
    89a4:	a0 81       	ld	r26, Z
    89a6:	b1 81       	ldd	r27, Z+1	; 0x01
    89a8:	50 97       	sbiw	r26, 0x10	; 16
    89aa:	8d 91       	ld	r24, X+
    89ac:	9c 91       	ld	r25, X
    89ae:	8e 0f       	add	r24, r30
    89b0:	9f 1f       	adc	r25, r31
    89b2:	dc 01       	movw	r26, r24
    89b4:	ed 91       	ld	r30, X+
    89b6:	fc 91       	ld	r31, X
    89b8:	02 84       	ldd	r0, Z+10	; 0x0a
    89ba:	f3 85       	ldd	r31, Z+11	; 0x0b
    89bc:	e0 2d       	mov	r30, r0
    89be:	40 e0       	ldi	r20, 0x00	; 0
    89c0:	61 e6       	ldi	r22, 0x61	; 97
    89c2:	72 e1       	ldi	r23, 0x12	; 18
    89c4:	61 ce       	rjmp	.-830    	; 0x8688 <AeroModule_Web::commandEvent(char*, char*)+0x66>
    89c6:	6e e5       	ldi	r22, 0x5E	; 94
    89c8:	72 e1       	ldi	r23, 0x12	; 18
    89ca:	81 eb       	ldi	r24, 0xB1	; 177
    89cc:	9d e0       	ldi	r25, 0x0D	; 13
    89ce:	0e 94 e5 94 	call	0x129ca	; 0x129ca <strcmp_P>
    89d2:	89 2b       	or	r24, r25
    89d4:	c9 f4       	brne	.+50     	; 0x8a08 <AeroModule_Web::commandEvent(char*, char*)+0x3e6>
    89d6:	c8 01       	movw	r24, r16
    89d8:	0e 94 36 35 	call	0x6a6c	; 0x6a6c <toInt(char*)>
    89dc:	ea 89       	ldd	r30, Y+18	; 0x12
    89de:	fb 89       	ldd	r31, Y+19	; 0x13
    89e0:	81 87       	std	Z+9, r24	; 0x09
    89e2:	ea 85       	ldd	r30, Y+10	; 0x0a
    89e4:	fb 85       	ldd	r31, Y+11	; 0x0b
    89e6:	a0 81       	ld	r26, Z
    89e8:	b1 81       	ldd	r27, Z+1	; 0x01
    89ea:	50 97       	sbiw	r26, 0x10	; 16
    89ec:	8d 91       	ld	r24, X+
    89ee:	9c 91       	ld	r25, X
    89f0:	8e 0f       	add	r24, r30
    89f2:	9f 1f       	adc	r25, r31
    89f4:	dc 01       	movw	r26, r24
    89f6:	ed 91       	ld	r30, X+
    89f8:	fc 91       	ld	r31, X
    89fa:	02 84       	ldd	r0, Z+10	; 0x0a
    89fc:	f3 85       	ldd	r31, Z+11	; 0x0b
    89fe:	e0 2d       	mov	r30, r0
    8a00:	40 e0       	ldi	r20, 0x00	; 0
    8a02:	6b e4       	ldi	r22, 0x4B	; 75
    8a04:	72 e1       	ldi	r23, 0x12	; 18
    8a06:	40 ce       	rjmp	.-896    	; 0x8688 <AeroModule_Web::commandEvent(char*, char*)+0x66>
    8a08:	68 e4       	ldi	r22, 0x48	; 72
    8a0a:	72 e1       	ldi	r23, 0x12	; 18
    8a0c:	81 eb       	ldi	r24, 0xB1	; 177
    8a0e:	9d e0       	ldi	r25, 0x0D	; 13
    8a10:	0e 94 e5 94 	call	0x129ca	; 0x129ca <strcmp_P>
    8a14:	89 2b       	or	r24, r25
    8a16:	d1 f4       	brne	.+52     	; 0x8a4c <AeroModule_Web::commandEvent(char*, char*)+0x42a>
    8a18:	c8 01       	movw	r24, r16
    8a1a:	0e 94 36 35 	call	0x6a6c	; 0x6a6c <toInt(char*)>
    8a1e:	ea 89       	ldd	r30, Y+18	; 0x12
    8a20:	fb 89       	ldd	r31, Y+19	; 0x13
    8a22:	93 87       	std	Z+11, r25	; 0x0b
    8a24:	82 87       	std	Z+10, r24	; 0x0a
    8a26:	ea 85       	ldd	r30, Y+10	; 0x0a
    8a28:	fb 85       	ldd	r31, Y+11	; 0x0b
    8a2a:	a0 81       	ld	r26, Z
    8a2c:	b1 81       	ldd	r27, Z+1	; 0x01
    8a2e:	50 97       	sbiw	r26, 0x10	; 16
    8a30:	8d 91       	ld	r24, X+
    8a32:	9c 91       	ld	r25, X
    8a34:	8e 0f       	add	r24, r30
    8a36:	9f 1f       	adc	r25, r31
    8a38:	dc 01       	movw	r26, r24
    8a3a:	ed 91       	ld	r30, X+
    8a3c:	fc 91       	ld	r31, X
    8a3e:	02 84       	ldd	r0, Z+10	; 0x0a
    8a40:	f3 85       	ldd	r31, Z+11	; 0x0b
    8a42:	e0 2d       	mov	r30, r0
    8a44:	40 e0       	ldi	r20, 0x00	; 0
    8a46:	63 e3       	ldi	r22, 0x33	; 51
    8a48:	72 e1       	ldi	r23, 0x12	; 18
    8a4a:	1e ce       	rjmp	.-964    	; 0x8688 <AeroModule_Web::commandEvent(char*, char*)+0x66>
    8a4c:	6f e2       	ldi	r22, 0x2F	; 47
    8a4e:	72 e1       	ldi	r23, 0x12	; 18
    8a50:	81 eb       	ldi	r24, 0xB1	; 177
    8a52:	9d e0       	ldi	r25, 0x0D	; 13
    8a54:	0e 94 e5 94 	call	0x129ca	; 0x129ca <strcmp_P>
    8a58:	89 2b       	or	r24, r25
    8a5a:	d1 f4       	brne	.+52     	; 0x8a90 <AeroModule_Web::commandEvent(char*, char*)+0x46e>
    8a5c:	c8 01       	movw	r24, r16
    8a5e:	0e 94 36 35 	call	0x6a6c	; 0x6a6c <toInt(char*)>
    8a62:	ea 89       	ldd	r30, Y+18	; 0x12
    8a64:	fb 89       	ldd	r31, Y+19	; 0x13
    8a66:	95 87       	std	Z+13, r25	; 0x0d
    8a68:	84 87       	std	Z+12, r24	; 0x0c
    8a6a:	ea 85       	ldd	r30, Y+10	; 0x0a
    8a6c:	fb 85       	ldd	r31, Y+11	; 0x0b
    8a6e:	a0 81       	ld	r26, Z
    8a70:	b1 81       	ldd	r27, Z+1	; 0x01
    8a72:	50 97       	sbiw	r26, 0x10	; 16
    8a74:	8d 91       	ld	r24, X+
    8a76:	9c 91       	ld	r25, X
    8a78:	8e 0f       	add	r24, r30
    8a7a:	9f 1f       	adc	r25, r31
    8a7c:	dc 01       	movw	r26, r24
    8a7e:	ed 91       	ld	r30, X+
    8a80:	fc 91       	ld	r31, X
    8a82:	02 84       	ldd	r0, Z+10	; 0x0a
    8a84:	f3 85       	ldd	r31, Z+11	; 0x0b
    8a86:	e0 2d       	mov	r30, r0
    8a88:	40 e0       	ldi	r20, 0x00	; 0
    8a8a:	6a e1       	ldi	r22, 0x1A	; 26
    8a8c:	72 e1       	ldi	r23, 0x12	; 18
    8a8e:	fc cd       	rjmp	.-1032   	; 0x8688 <AeroModule_Web::commandEvent(char*, char*)+0x66>
    8a90:	66 e1       	ldi	r22, 0x16	; 22
    8a92:	72 e1       	ldi	r23, 0x12	; 18
    8a94:	81 eb       	ldi	r24, 0xB1	; 177
    8a96:	9d e0       	ldi	r25, 0x0D	; 13
    8a98:	0e 94 e5 94 	call	0x129ca	; 0x129ca <strcmp_P>
    8a9c:	89 2b       	or	r24, r25
    8a9e:	59 f4       	brne	.+22     	; 0x8ab6 <AeroModule_Web::commandEvent(char*, char*)+0x494>
    8aa0:	ca 88       	ldd	r12, Y+18	; 0x12
    8aa2:	db 88       	ldd	r13, Y+19	; 0x13
    8aa4:	c8 01       	movw	r24, r16
    8aa6:	0e 94 38 35 	call	0x6a70	; 0x6a70 <toFloat(char*)>
    8aaa:	f6 01       	movw	r30, r12
    8aac:	62 8b       	std	Z+18, r22	; 0x12
    8aae:	73 8b       	std	Z+19, r23	; 0x13
    8ab0:	84 8b       	std	Z+20, r24	; 0x14
    8ab2:	95 8b       	std	Z+21, r25	; 0x15
    8ab4:	5b cf       	rjmp	.-330    	; 0x896c <AeroModule_Web::commandEvent(char*, char*)+0x34a>
    8ab6:	62 e1       	ldi	r22, 0x12	; 18
    8ab8:	72 e1       	ldi	r23, 0x12	; 18
    8aba:	81 eb       	ldi	r24, 0xB1	; 177
    8abc:	9d e0       	ldi	r25, 0x0D	; 13
    8abe:	0e 94 e5 94 	call	0x129ca	; 0x129ca <strcmp_P>
    8ac2:	89 2b       	or	r24, r25
    8ac4:	f9 f4       	brne	.+62     	; 0x8b04 <AeroModule_Web::commandEvent(char*, char*)+0x4e2>
    8ac6:	ca 88       	ldd	r12, Y+18	; 0x12
    8ac8:	db 88       	ldd	r13, Y+19	; 0x13
    8aca:	c8 01       	movw	r24, r16
    8acc:	0e 94 38 35 	call	0x6a70	; 0x6a70 <toFloat(char*)>
    8ad0:	d6 01       	movw	r26, r12
    8ad2:	1e 96       	adiw	r26, 0x0e	; 14
    8ad4:	6d 93       	st	X+, r22
    8ad6:	7d 93       	st	X+, r23
    8ad8:	8d 93       	st	X+, r24
    8ada:	9c 93       	st	X, r25
    8adc:	51 97       	sbiw	r26, 0x11	; 17
    8ade:	ea 85       	ldd	r30, Y+10	; 0x0a
    8ae0:	fb 85       	ldd	r31, Y+11	; 0x0b
    8ae2:	a0 81       	ld	r26, Z
    8ae4:	b1 81       	ldd	r27, Z+1	; 0x01
    8ae6:	50 97       	sbiw	r26, 0x10	; 16
    8ae8:	8d 91       	ld	r24, X+
    8aea:	9c 91       	ld	r25, X
    8aec:	8e 0f       	add	r24, r30
    8aee:	9f 1f       	adc	r25, r31
    8af0:	dc 01       	movw	r26, r24
    8af2:	ed 91       	ld	r30, X+
    8af4:	fc 91       	ld	r31, X
    8af6:	02 84       	ldd	r0, Z+10	; 0x0a
    8af8:	f3 85       	ldd	r31, Z+11	; 0x0b
    8afa:	e0 2d       	mov	r30, r0
    8afc:	40 e0       	ldi	r20, 0x00	; 0
    8afe:	6a ef       	ldi	r22, 0xFA	; 250
    8b00:	71 e1       	ldi	r23, 0x11	; 17
    8b02:	c2 cd       	rjmp	.-1148   	; 0x8688 <AeroModule_Web::commandEvent(char*, char*)+0x66>
    8b04:	f1 2c       	mov	r15, r1
    8b06:	34 cf       	rjmp	.-408    	; 0x8970 <AeroModule_Web::commandEvent(char*, char*)+0x34e>

00008b08 <virtual thunk to AeroModule_Web::commandEvent(char*, char*)>:
_ZTv0_n14_N14AeroModule_Web12commandEventEPcS0_():
    8b08:	dc 01       	movw	r26, r24
    8b0a:	ed 91       	ld	r30, X+
    8b0c:	fc 91       	ld	r31, X
    8b0e:	3e 97       	sbiw	r30, 0x0e	; 14
    8b10:	20 81       	ld	r18, Z
    8b12:	31 81       	ldd	r19, Z+1	; 0x01
    8b14:	82 0f       	add	r24, r18
    8b16:	93 1f       	adc	r25, r19
    8b18:	0c 94 11 43 	jmp	0x8622	; 0x8622 <AeroModule_Web::commandEvent(char*, char*)>

00008b1c <AeroModule_Web::updateCommands()>:
_ZN14AeroModule_Web14updateCommandsEv():
    8b1c:	cf 93       	push	r28
    8b1e:	df 93       	push	r29
    8b20:	ec 01       	movw	r28, r24
    8b22:	0e 94 5c 7c 	call	0xf8b8	; 0xf8b8 <now()>
    8b26:	e1 e0       	ldi	r30, 0x01	; 1
    8b28:	f4 e1       	ldi	r31, 0x14	; 20
    8b2a:	62 83       	std	Z+2, r22	; 0x02
    8b2c:	73 83       	std	Z+3, r23	; 0x03
    8b2e:	84 83       	std	Z+4, r24	; 0x04
    8b30:	95 83       	std	Z+5, r25	; 0x05
    8b32:	a0 91 b7 0c 	lds	r26, 0x0CB7	; 0x800cb7 <Debug>
    8b36:	b0 91 b8 0c 	lds	r27, 0x0CB8	; 0x800cb8 <Debug+0x1>
    8b3a:	8c 91       	ld	r24, X
    8b3c:	86 83       	std	Z+6, r24	; 0x06
    8b3e:	a0 91 b5 0c 	lds	r26, 0x0CB5	; 0x800cb5 <Metric>
    8b42:	b0 91 b6 0c 	lds	r27, 0x0CB6	; 0x800cb6 <Metric+0x1>
    8b46:	8c 91       	ld	r24, X
    8b48:	87 83       	std	Z+7, r24	; 0x07
    8b4a:	4a 85       	ldd	r20, Y+10	; 0x0a
    8b4c:	5b 85       	ldd	r21, Y+11	; 0x0b
    8b4e:	da 01       	movw	r26, r20
    8b50:	8d 91       	ld	r24, X+
    8b52:	9c 91       	ld	r25, X
    8b54:	42 97       	sbiw	r24, 0x12	; 18
    8b56:	dc 01       	movw	r26, r24
    8b58:	2d 91       	ld	r18, X+
    8b5a:	3c 91       	ld	r19, X
    8b5c:	24 0f       	add	r18, r20
    8b5e:	35 1f       	adc	r19, r21
    8b60:	d9 01       	movw	r26, r18
    8b62:	14 96       	adiw	r26, 0x04	; 4
    8b64:	2d 91       	ld	r18, X+
    8b66:	3c 91       	ld	r19, X
    8b68:	d9 01       	movw	r26, r18
    8b6a:	2d 91       	ld	r18, X+
    8b6c:	3c 91       	ld	r19, X
    8b6e:	31 87       	std	Z+9, r19	; 0x09
    8b70:	20 87       	std	Z+8, r18	; 0x08
    8b72:	dc 01       	movw	r26, r24
    8b74:	8d 91       	ld	r24, X+
    8b76:	9c 91       	ld	r25, X
    8b78:	da 01       	movw	r26, r20
    8b7a:	a8 0f       	add	r26, r24
    8b7c:	b9 1f       	adc	r27, r25
    8b7e:	18 96       	adiw	r26, 0x08	; 8
    8b80:	0d 90       	ld	r0, X+
    8b82:	bc 91       	ld	r27, X
    8b84:	a0 2d       	mov	r26, r0
    8b86:	8c 91       	ld	r24, X
    8b88:	82 87       	std	Z+10, r24	; 0x0a
    8b8a:	2a 85       	ldd	r18, Y+10	; 0x0a
    8b8c:	3b 85       	ldd	r19, Y+11	; 0x0b
    8b8e:	d9 01       	movw	r26, r18
    8b90:	8d 91       	ld	r24, X+
    8b92:	9c 91       	ld	r25, X
    8b94:	42 97       	sbiw	r24, 0x12	; 18
    8b96:	dc 01       	movw	r26, r24
    8b98:	8d 91       	ld	r24, X+
    8b9a:	9c 91       	ld	r25, X
    8b9c:	d9 01       	movw	r26, r18
    8b9e:	a8 0f       	add	r26, r24
    8ba0:	b9 1f       	adc	r27, r25
    8ba2:	1a 96       	adiw	r26, 0x0a	; 10
    8ba4:	0d 90       	ld	r0, X+
    8ba6:	bc 91       	ld	r27, X
    8ba8:	a0 2d       	mov	r26, r0
    8baa:	8c 91       	ld	r24, X
    8bac:	83 87       	std	Z+11, r24	; 0x0b
    8bae:	2a 85       	ldd	r18, Y+10	; 0x0a
    8bb0:	3b 85       	ldd	r19, Y+11	; 0x0b
    8bb2:	d9 01       	movw	r26, r18
    8bb4:	8d 91       	ld	r24, X+
    8bb6:	9c 91       	ld	r25, X
    8bb8:	42 97       	sbiw	r24, 0x12	; 18
    8bba:	dc 01       	movw	r26, r24
    8bbc:	8d 91       	ld	r24, X+
    8bbe:	9c 91       	ld	r25, X
    8bc0:	d9 01       	movw	r26, r18
    8bc2:	a8 0f       	add	r26, r24
    8bc4:	b9 1f       	adc	r27, r25
    8bc6:	1c 96       	adiw	r26, 0x0c	; 12
    8bc8:	0d 90       	ld	r0, X+
    8bca:	bc 91       	ld	r27, X
    8bcc:	a0 2d       	mov	r26, r0
    8bce:	8c 91       	ld	r24, X
    8bd0:	84 87       	std	Z+12, r24	; 0x0c
    8bd2:	2a 85       	ldd	r18, Y+10	; 0x0a
    8bd4:	3b 85       	ldd	r19, Y+11	; 0x0b
    8bd6:	d9 01       	movw	r26, r18
    8bd8:	8d 91       	ld	r24, X+
    8bda:	9c 91       	ld	r25, X
    8bdc:	42 97       	sbiw	r24, 0x12	; 18
    8bde:	dc 01       	movw	r26, r24
    8be0:	8d 91       	ld	r24, X+
    8be2:	9c 91       	ld	r25, X
    8be4:	d9 01       	movw	r26, r18
    8be6:	a8 0f       	add	r26, r24
    8be8:	b9 1f       	adc	r27, r25
    8bea:	1e 96       	adiw	r26, 0x0e	; 14
    8bec:	0d 90       	ld	r0, X+
    8bee:	bc 91       	ld	r27, X
    8bf0:	a0 2d       	mov	r26, r0
    8bf2:	8c 91       	ld	r24, X
    8bf4:	85 87       	std	Z+13, r24	; 0x0d
    8bf6:	2a 85       	ldd	r18, Y+10	; 0x0a
    8bf8:	3b 85       	ldd	r19, Y+11	; 0x0b
    8bfa:	d9 01       	movw	r26, r18
    8bfc:	8d 91       	ld	r24, X+
    8bfe:	9c 91       	ld	r25, X
    8c00:	42 97       	sbiw	r24, 0x12	; 18
    8c02:	dc 01       	movw	r26, r24
    8c04:	8d 91       	ld	r24, X+
    8c06:	9c 91       	ld	r25, X
    8c08:	d9 01       	movw	r26, r18
    8c0a:	a8 0f       	add	r26, r24
    8c0c:	b9 1f       	adc	r27, r25
    8c0e:	50 96       	adiw	r26, 0x10	; 16
    8c10:	0d 90       	ld	r0, X+
    8c12:	bc 91       	ld	r27, X
    8c14:	a0 2d       	mov	r26, r0
    8c16:	8c 91       	ld	r24, X
    8c18:	86 87       	std	Z+14, r24	; 0x0e
    8c1a:	8a 85       	ldd	r24, Y+10	; 0x0a
    8c1c:	9b 85       	ldd	r25, Y+11	; 0x0b
    8c1e:	0e 94 74 5f 	call	0xbee8	; 0xbee8 <MainModule::getDayMode()>
    8c22:	e7 ee       	ldi	r30, 0xE7	; 231
    8c24:	f3 e1       	ldi	r31, 0x13	; 19
    8c26:	82 83       	std	Z+2, r24	; 0x02
    8c28:	aa 89       	ldd	r26, Y+18	; 0x12
    8c2a:	bb 89       	ldd	r27, Y+19	; 0x13
    8c2c:	11 96       	adiw	r26, 0x01	; 1
    8c2e:	4d 91       	ld	r20, X+
    8c30:	5d 91       	ld	r21, X+
    8c32:	6d 91       	ld	r22, X+
    8c34:	7c 91       	ld	r23, X
    8c36:	14 97       	sbiw	r26, 0x04	; 4
    8c38:	47 83       	std	Z+7, r20	; 0x07
    8c3a:	50 87       	std	Z+8, r21	; 0x08
    8c3c:	61 87       	std	Z+9, r22	; 0x09
    8c3e:	72 87       	std	Z+10, r23	; 0x0a
    8c40:	15 96       	adiw	r26, 0x05	; 5
    8c42:	8d 91       	ld	r24, X+
    8c44:	9c 91       	ld	r25, X
    8c46:	16 97       	sbiw	r26, 0x06	; 6
    8c48:	94 87       	std	Z+12, r25	; 0x0c
    8c4a:	83 87       	std	Z+11, r24	; 0x0b
    8c4c:	17 96       	adiw	r26, 0x07	; 7
    8c4e:	8d 91       	ld	r24, X+
    8c50:	9c 91       	ld	r25, X
    8c52:	18 97       	sbiw	r26, 0x08	; 8
    8c54:	96 87       	std	Z+14, r25	; 0x0e
    8c56:	85 87       	std	Z+13, r24	; 0x0d
    8c58:	52 96       	adiw	r26, 0x12	; 18
    8c5a:	8d 91       	ld	r24, X+
    8c5c:	9d 91       	ld	r25, X+
    8c5e:	0d 90       	ld	r0, X+
    8c60:	bc 91       	ld	r27, X
    8c62:	a0 2d       	mov	r26, r0
    8c64:	87 87       	std	Z+15, r24	; 0x0f
    8c66:	90 8b       	std	Z+16, r25	; 0x10
    8c68:	a1 8b       	std	Z+17, r26	; 0x11
    8c6a:	b2 8b       	std	Z+18, r27	; 0x12
    8c6c:	aa 89       	ldd	r26, Y+18	; 0x12
    8c6e:	bb 89       	ldd	r27, Y+19	; 0x13
    8c70:	1e 96       	adiw	r26, 0x0e	; 14
    8c72:	8d 91       	ld	r24, X+
    8c74:	9d 91       	ld	r25, X+
    8c76:	0d 90       	ld	r0, X+
    8c78:	bc 91       	ld	r27, X
    8c7a:	a0 2d       	mov	r26, r0
    8c7c:	83 8b       	std	Z+19, r24	; 0x13
    8c7e:	94 8b       	std	Z+20, r25	; 0x14
    8c80:	a5 8b       	std	Z+21, r26	; 0x15
    8c82:	b6 8b       	std	Z+22, r27	; 0x16
    8c84:	aa 89       	ldd	r26, Y+18	; 0x12
    8c86:	bb 89       	ldd	r27, Y+19	; 0x13
    8c88:	e1 ec       	ldi	r30, 0xC1	; 193
    8c8a:	f3 e1       	ldi	r31, 0x13	; 19
    8c8c:	19 96       	adiw	r26, 0x09	; 9
    8c8e:	8c 91       	ld	r24, X
    8c90:	19 97       	sbiw	r26, 0x09	; 9
    8c92:	81 87       	std	Z+9, r24	; 0x09
    8c94:	1a 96       	adiw	r26, 0x0a	; 10
    8c96:	8d 91       	ld	r24, X+
    8c98:	9c 91       	ld	r25, X
    8c9a:	1b 97       	sbiw	r26, 0x0b	; 11
    8c9c:	95 87       	std	Z+13, r25	; 0x0d
    8c9e:	84 87       	std	Z+12, r24	; 0x0c
    8ca0:	1c 96       	adiw	r26, 0x0c	; 12
    8ca2:	8d 91       	ld	r24, X+
    8ca4:	9c 91       	ld	r25, X
    8ca6:	93 87       	std	Z+11, r25	; 0x0b
    8ca8:	82 87       	std	Z+10, r24	; 0x0a
    8caa:	df 91       	pop	r29
    8cac:	cf 91       	pop	r28
    8cae:	08 95       	ret

00008cb0 <AeroModule_Web::AeroModule_Web(__FlashStringHelper const*, MainModule*, Settings::AeroModuleSettings*)>:
_ZN14AeroModule_WebC4EPK19__FlashStringHelperP10MainModulePN8Settings18AeroModuleSettingsE():
    8cb0:	8f 92       	push	r8
    8cb2:	9f 92       	push	r9
    8cb4:	af 92       	push	r10
    8cb6:	bf 92       	push	r11
    8cb8:	cf 92       	push	r12
    8cba:	df 92       	push	r13
    8cbc:	ef 92       	push	r14
    8cbe:	ff 92       	push	r15
    8cc0:	0f 93       	push	r16
    8cc2:	1f 93       	push	r17
    8cc4:	cf 93       	push	r28
    8cc6:	df 93       	push	r29
    8cc8:	ec 01       	movw	r28, r24
    8cca:	6b 01       	movw	r12, r22
    8ccc:	4a 01       	movw	r8, r20
    8cce:	59 01       	movw	r10, r18
    8cd0:	67 2b       	or	r22, r23
    8cd2:	21 f0       	breq	.+8      	; 0x8cdc <AeroModule_Web::AeroModule_Web(__FlashStringHelper const*, MainModule*, Settings::AeroModuleSettings*)+0x2c>
    8cd4:	b9 01       	movw	r22, r18
    8cd6:	44 96       	adiw	r24, 0x14	; 20
    8cd8:	0e 94 f7 18 	call	0x31ee	; 0x31ee <Common::Common(__FlashStringHelper const*)>
    8cdc:	f4 01       	movw	r30, r8
    8cde:	32 96       	adiw	r30, 0x02	; 2
    8ce0:	c1 14       	cp	r12, r1
    8ce2:	d1 04       	cpc	r13, r1
    8ce4:	11 f0       	breq	.+4      	; 0x8cea <AeroModule_Web::AeroModule_Web(__FlashStringHelper const*, MainModule*, Settings::AeroModuleSettings*)+0x3a>
    8ce6:	e0 e9       	ldi	r30, 0x90	; 144
    8ce8:	f8 e0       	ldi	r31, 0x08	; 8
Common_Web():
    8cea:	80 81       	ld	r24, Z
    8cec:	91 81       	ldd	r25, Z+1	; 0x01
    8cee:	99 83       	std	Y+1, r25	; 0x01
    8cf0:	88 83       	st	Y, r24
    8cf2:	22 81       	ldd	r18, Z+2	; 0x02
    8cf4:	33 81       	ldd	r19, Z+3	; 0x03
    8cf6:	06 97       	sbiw	r24, 0x06	; 6
    8cf8:	dc 01       	movw	r26, r24
    8cfa:	ed 91       	ld	r30, X+
    8cfc:	fc 91       	ld	r31, X
    8cfe:	ec 0f       	add	r30, r28
    8d00:	fd 1f       	adc	r31, r29
    8d02:	31 83       	std	Z+1, r19	; 0x01
    8d04:	20 83       	st	Z, r18
_ZN14AeroModule_WebC4EPK19__FlashStringHelperP10MainModulePN8Settings18AeroModuleSettingsE():
    8d06:	8c e9       	ldi	r24, 0x9C	; 156
    8d08:	98 e0       	ldi	r25, 0x08	; 8
    8d0a:	c1 14       	cp	r12, r1
    8d0c:	d1 04       	cpc	r13, r1
    8d0e:	19 f4       	brne	.+6      	; 0x8d16 <AeroModule_Web::AeroModule_Web(__FlashStringHelper const*, MainModule*, Settings::AeroModuleSettings*)+0x66>
    8d10:	f4 01       	movw	r30, r8
    8d12:	80 81       	ld	r24, Z
    8d14:	91 81       	ldd	r25, Z+1	; 0x01
    8d16:	99 83       	std	Y+1, r25	; 0x01
    8d18:	88 83       	st	Y, r24
    8d1a:	c1 14       	cp	r12, r1
    8d1c:	d1 04       	cpc	r13, r1
    8d1e:	09 f0       	breq	.+2      	; 0x8d22 <AeroModule_Web::AeroModule_Web(__FlashStringHelper const*, MainModule*, Settings::AeroModuleSettings*)+0x72>
    8d20:	b2 c0       	rjmp	.+356    	; 0x8e86 <AeroModule_Web::AeroModule_Web(__FlashStringHelper const*, MainModule*, Settings::AeroModuleSettings*)+0x1d6>
    8d22:	d4 01       	movw	r26, r8
    8d24:	16 96       	adiw	r26, 0x06	; 6
    8d26:	2d 91       	ld	r18, X+
    8d28:	3c 91       	ld	r19, X
    8d2a:	06 97       	sbiw	r24, 0x06	; 6
    8d2c:	fc 01       	movw	r30, r24
    8d2e:	80 81       	ld	r24, Z
    8d30:	91 81       	ldd	r25, Z+1	; 0x01
    8d32:	8c 0f       	add	r24, r28
    8d34:	9d 1f       	adc	r25, r29
    8d36:	dc 01       	movw	r26, r24
    8d38:	2d 93       	st	X+, r18
    8d3a:	3c 93       	st	X, r19
    8d3c:	81 e0       	ldi	r24, 0x01	; 1
    8d3e:	8a 83       	std	Y+2, r24	; 0x02
    8d40:	1b 82       	std	Y+3, r1	; 0x03
    8d42:	80 e2       	ldi	r24, 0x20	; 32
    8d44:	90 e0       	ldi	r25, 0x00	; 0
    8d46:	0e 94 74 92 	call	0x124e8	; 0x124e8 <malloc>
    8d4a:	9d 83       	std	Y+5, r25	; 0x05
    8d4c:	8c 83       	std	Y+4, r24	; 0x04
    8d4e:	1e 82       	std	Y+6, r1	; 0x06
    8d50:	1f 82       	std	Y+7, r1	; 0x07
    8d52:	18 86       	std	Y+8, r1	; 0x08
    8d54:	19 86       	std	Y+9, r1	; 0x09
    8d56:	1b 87       	std	Y+11, r17	; 0x0b
    8d58:	0a 87       	std	Y+10, r16	; 0x0a
    8d5a:	fb 8a       	std	Y+19, r15	; 0x13
    8d5c:	ea 8a       	std	Y+18, r14	; 0x12
    8d5e:	ce 01       	movw	r24, r28
    8d60:	0e 94 8e 45 	call	0x8b1c	; 0x8b1c <AeroModule_Web::updateCommands()>
    8d64:	46 e0       	ldi	r20, 0x06	; 6
    8d66:	50 e0       	ldi	r21, 0x00	; 0
    8d68:	b5 01       	movw	r22, r10
    8d6a:	ce 01       	movw	r24, r28
    8d6c:	0c 96       	adiw	r24, 0x0c	; 12
    8d6e:	0e 94 d1 94 	call	0x129a2	; 0x129a2 <memcpy_P>
    8d72:	d8 01       	movw	r26, r16
    8d74:	ed 91       	ld	r30, X+
    8d76:	fc 91       	ld	r31, X
    8d78:	72 97       	sbiw	r30, 0x12	; 18
    8d7a:	80 81       	ld	r24, Z
    8d7c:	91 81       	ldd	r25, Z+1	; 0x01
    8d7e:	80 0f       	add	r24, r16
    8d80:	91 1f       	adc	r25, r17
    8d82:	64 e1       	ldi	r22, 0x14	; 20
    8d84:	70 e0       	ldi	r23, 0x00	; 0
    8d86:	c1 14       	cp	r12, r1
    8d88:	d1 04       	cpc	r13, r1
    8d8a:	29 f4       	brne	.+10     	; 0x8d96 <AeroModule_Web::AeroModule_Web(__FlashStringHelper const*, MainModule*, Settings::AeroModuleSettings*)+0xe6>
    8d8c:	e8 81       	ld	r30, Y
    8d8e:	f9 81       	ldd	r31, Y+1	; 0x01
    8d90:	36 97       	sbiw	r30, 0x06	; 6
    8d92:	60 81       	ld	r22, Z
    8d94:	71 81       	ldd	r23, Z+1	; 0x01
    8d96:	6c 0f       	add	r22, r28
    8d98:	7d 1f       	adc	r23, r29
    8d9a:	0e 94 5b 1b 	call	0x36b6	; 0x36b6 <Module::addToReportQueue(Common*)>
    8d9e:	d8 01       	movw	r26, r16
    8da0:	ed 91       	ld	r30, X+
    8da2:	fc 91       	ld	r31, X
    8da4:	72 97       	sbiw	r30, 0x12	; 18
    8da6:	80 81       	ld	r24, Z
    8da8:	91 81       	ldd	r25, Z+1	; 0x01
    8daa:	80 0f       	add	r24, r16
    8dac:	91 1f       	adc	r25, r17
    8dae:	64 e1       	ldi	r22, 0x14	; 20
    8db0:	70 e0       	ldi	r23, 0x00	; 0
    8db2:	c1 14       	cp	r12, r1
    8db4:	d1 04       	cpc	r13, r1
    8db6:	29 f4       	brne	.+10     	; 0x8dc2 <AeroModule_Web::AeroModule_Web(__FlashStringHelper const*, MainModule*, Settings::AeroModuleSettings*)+0x112>
    8db8:	e8 81       	ld	r30, Y
    8dba:	f9 81       	ldd	r31, Y+1	; 0x01
    8dbc:	36 97       	sbiw	r30, 0x06	; 6
    8dbe:	60 81       	ld	r22, Z
    8dc0:	71 81       	ldd	r23, Z+1	; 0x01
    8dc2:	6c 0f       	add	r22, r28
    8dc4:	7d 1f       	adc	r23, r29
    8dc6:	0e 94 75 1b 	call	0x36ea	; 0x36ea <Module::addToRefreshQueue_Sec(Common*)>
    8dca:	d8 01       	movw	r26, r16
    8dcc:	ed 91       	ld	r30, X+
    8dce:	fc 91       	ld	r31, X
    8dd0:	72 97       	sbiw	r30, 0x12	; 18
    8dd2:	80 81       	ld	r24, Z
    8dd4:	91 81       	ldd	r25, Z+1	; 0x01
    8dd6:	80 0f       	add	r24, r16
    8dd8:	91 1f       	adc	r25, r17
    8dda:	64 e1       	ldi	r22, 0x14	; 20
    8ddc:	70 e0       	ldi	r23, 0x00	; 0
    8dde:	c1 14       	cp	r12, r1
    8de0:	d1 04       	cpc	r13, r1
    8de2:	29 f4       	brne	.+10     	; 0x8dee <AeroModule_Web::AeroModule_Web(__FlashStringHelper const*, MainModule*, Settings::AeroModuleSettings*)+0x13e>
    8de4:	e8 81       	ld	r30, Y
    8de6:	f9 81       	ldd	r31, Y+1	; 0x01
    8de8:	36 97       	sbiw	r30, 0x06	; 6
    8dea:	60 81       	ld	r22, Z
    8dec:	71 81       	ldd	r23, Z+1	; 0x01
    8dee:	6c 0f       	add	r22, r28
    8df0:	7d 1f       	adc	r23, r29
    8df2:	0e 94 8f 1b 	call	0x371e	; 0x371e <Module::addToRefreshQueue_FiveSec(Common*)>
    8df6:	d8 01       	movw	r26, r16
    8df8:	ed 91       	ld	r30, X+
    8dfa:	fc 91       	ld	r31, X
    8dfc:	72 97       	sbiw	r30, 0x12	; 18
    8dfe:	80 81       	ld	r24, Z
    8e00:	91 81       	ldd	r25, Z+1	; 0x01
    8e02:	80 0f       	add	r24, r16
    8e04:	91 1f       	adc	r25, r17
    8e06:	64 e1       	ldi	r22, 0x14	; 20
    8e08:	70 e0       	ldi	r23, 0x00	; 0
    8e0a:	cd 28       	or	r12, r13
    8e0c:	29 f4       	brne	.+10     	; 0x8e18 <AeroModule_Web::AeroModule_Web(__FlashStringHelper const*, MainModule*, Settings::AeroModuleSettings*)+0x168>
    8e0e:	e8 81       	ld	r30, Y
    8e10:	f9 81       	ldd	r31, Y+1	; 0x01
    8e12:	36 97       	sbiw	r30, 0x06	; 6
    8e14:	60 81       	ld	r22, Z
    8e16:	71 81       	ldd	r23, Z+1	; 0x01
    8e18:	6c 0f       	add	r22, r28
    8e1a:	7d 1f       	adc	r23, r29
    8e1c:	0e 94 a9 1b 	call	0x3752	; 0x3752 <Module::addToRefreshQueue_Minute(Common*)>
    8e20:	d8 01       	movw	r26, r16
    8e22:	ed 91       	ld	r30, X+
    8e24:	fc 91       	ld	r31, X
    8e26:	70 97       	sbiw	r30, 0x10	; 16
    8e28:	80 81       	ld	r24, Z
    8e2a:	91 81       	ldd	r25, Z+1	; 0x01
    8e2c:	be 01       	movw	r22, r28
    8e2e:	80 0f       	add	r24, r16
    8e30:	91 1f       	adc	r25, r17
    8e32:	0e 94 83 37 	call	0x6f06	; 0x6f06 <Module_Web::addToWebsiteQueue_Load(Common_Web*)>
    8e36:	d8 01       	movw	r26, r16
    8e38:	ed 91       	ld	r30, X+
    8e3a:	fc 91       	ld	r31, X
    8e3c:	70 97       	sbiw	r30, 0x10	; 16
    8e3e:	80 81       	ld	r24, Z
    8e40:	91 81       	ldd	r25, Z+1	; 0x01
    8e42:	be 01       	movw	r22, r28
    8e44:	80 0f       	add	r24, r16
    8e46:	91 1f       	adc	r25, r17
    8e48:	0e 94 9d 37 	call	0x6f3a	; 0x6f3a <Module_Web::addToWebsiteQueue_Refresh(Common_Web*)>
    8e4c:	d8 01       	movw	r26, r16
    8e4e:	ed 91       	ld	r30, X+
    8e50:	fc 91       	ld	r31, X
    8e52:	70 97       	sbiw	r30, 0x10	; 16
    8e54:	80 81       	ld	r24, Z
    8e56:	91 81       	ldd	r25, Z+1	; 0x01
    8e58:	be 01       	movw	r22, r28
    8e5a:	80 0f       	add	r24, r16
    8e5c:	91 1f       	adc	r25, r17
    8e5e:	0e 94 b7 37 	call	0x6f6e	; 0x6f6e <Module_Web::addToCommandQueue(Common_Web*)>
    8e62:	43 e0       	ldi	r20, 0x03	; 3
    8e64:	61 e0       	ldi	r22, 0x01	; 1
    8e66:	8e e8       	ldi	r24, 0x8E	; 142
    8e68:	94 e1       	ldi	r25, 0x14	; 20
    8e6a:	df 91       	pop	r29
    8e6c:	cf 91       	pop	r28
    8e6e:	1f 91       	pop	r17
    8e70:	0f 91       	pop	r16
    8e72:	ff 90       	pop	r15
    8e74:	ef 90       	pop	r14
    8e76:	df 90       	pop	r13
    8e78:	cf 90       	pop	r12
    8e7a:	bf 90       	pop	r11
    8e7c:	af 90       	pop	r10
    8e7e:	9f 90       	pop	r9
    8e80:	8f 90       	pop	r8
    8e82:	0c 94 85 16 	jmp	0x2d0a	; 0x2d0a <logToSerials(__FlashStringHelper const*, bool, unsigned char)>
    8e86:	28 eb       	ldi	r18, 0xB8	; 184
    8e88:	38 e0       	ldi	r19, 0x08	; 8
    8e8a:	84 e1       	ldi	r24, 0x14	; 20
    8e8c:	90 e0       	ldi	r25, 0x00	; 0
    8e8e:	51 cf       	rjmp	.-350    	; 0x8d32 <AeroModule_Web::AeroModule_Web(__FlashStringHelper const*, MainModule*, Settings::AeroModuleSettings*)+0x82>

00008e90 <AeroModule_Web::AeroModule_Web(__FlashStringHelper const*, MainModule*, Settings::AeroModuleSettings*)>:
_ZN14AeroModule_WebC1EPK19__FlashStringHelperP10MainModulePN8Settings18AeroModuleSettingsE():
b:\Gbox420\Gbox420\Gbox420_Mega_Main\build\sketch\src\Modules_Web/AeroModule_Web.cpp:14
struct AeroCommonTemplate AeroResetToSend = {AeroMessages::AeroReset};                       ///< Special command to fetch the next Response from the Receiver

/**
* @brief Constructor: creates an instance of the class, loads the EEPROM stored persistent settings and subscribes to events
*/
AeroModule_Web::AeroModule_Web(const __FlashStringHelper *Name, MainModule *Parent, Settings::AeroModuleSettings *DefaultSettings) : Common(Name), Common_Web(Name)
    8e90:	ef 92       	push	r14
    8e92:	ff 92       	push	r15
    8e94:	0f 93       	push	r16
    8e96:	1f 93       	push	r17
b:\Gbox420\Gbox420\Gbox420_Mega_Main\build\sketch\src\Modules_Web/AeroModule_Web.cpp:28
  Parent->addToRefreshQueue_Minute(this);
  Parent->addToWebsiteQueue_Load(this);
  Parent->addToWebsiteQueue_Refresh(this);
  Parent->addToCommandQueue(this);
  logToSerials(F("AeroModule_Web ready"), true, 3);
}
    8e98:	79 01       	movw	r14, r18
    8e9a:	8a 01       	movw	r16, r20
    8e9c:	9b 01       	movw	r18, r22
    8e9e:	50 e0       	ldi	r21, 0x00	; 0
    8ea0:	40 e0       	ldi	r20, 0x00	; 0
    8ea2:	61 e0       	ldi	r22, 0x01	; 1
    8ea4:	70 e0       	ldi	r23, 0x00	; 0
    8ea6:	0e 94 58 46 	call	0x8cb0	; 0x8cb0 <AeroModule_Web::AeroModule_Web(__FlashStringHelper const*, MainModule*, Settings::AeroModuleSettings*)>
    8eaa:	1f 91       	pop	r17
    8eac:	0f 91       	pop	r16
    8eae:	ff 90       	pop	r15
    8eb0:	ef 90       	pop	r14
    8eb2:	08 95       	ret

00008eb4 <void logToSerials<bool>(bool&, bool, unsigned char)>:
_Z12logToSerialsIbEvRT_bh():
b:\gbox420\gbox420\gbox420_mega_main\build\sketch/seriallog.h:37
  }
}

template <class logLine>
void logToSerials(logLine &ToPrint, bool BreakLine = true, uint8_t Indent = 3)
    8eb4:	cf 92       	push	r12
    8eb6:	df 92       	push	r13
    8eb8:	ef 92       	push	r14
    8eba:	ff 92       	push	r15
    8ebc:	0f 93       	push	r16
    8ebe:	1f 93       	push	r17
    8ec0:	cf 93       	push	r28
    8ec2:	df 93       	push	r29
    8ec4:	8c 01       	movw	r16, r24
    8ec6:	c6 2e       	mov	r12, r22
    8ec8:	d4 2e       	mov	r13, r20
    8eca:	e0 90 2f 04 	lds	r14, 0x042F	; 0x80042f <ArduinoSerial>
    8ece:	f0 90 30 04 	lds	r15, 0x0430	; 0x800430 <ArduinoSerial+0x1>
    8ed2:	c0 91 2d 04 	lds	r28, 0x042D	; 0x80042d <ESPSerial>
    8ed6:	d0 91 2e 04 	lds	r29, 0x042E	; 0x80042e <ESPSerial+0x1>
b:\gbox420\gbox420\gbox420_mega_main\build\sketch/seriallog.h:39
{
  while (Indent > 0)
    8eda:	dd 20       	and	r13, r13
    8edc:	61 f0       	breq	.+24     	; 0x8ef6 <void logToSerials<bool>(bool&, bool, unsigned char)+0x42>
b:\gbox420\gbox420\gbox420_mega_main\build\sketch/seriallog.h:41
  {
    ArduinoSerial.print(F(" "));
    8ede:	62 e8       	ldi	r22, 0x82	; 130
    8ee0:	71 e1       	ldi	r23, 0x11	; 17
    8ee2:	c7 01       	movw	r24, r14
    8ee4:	0e 94 6c 8b 	call	0x116d8	; 0x116d8 <Print::print(__FlashStringHelper const*)>
b:\gbox420\gbox420\gbox420_mega_main\build\sketch/seriallog.h:42
    ESPSerial.print(F(" "));
    8ee8:	60 e8       	ldi	r22, 0x80	; 128
    8eea:	71 e1       	ldi	r23, 0x11	; 17
    8eec:	ce 01       	movw	r24, r28
    8eee:	0e 94 6c 8b 	call	0x116d8	; 0x116d8 <Print::print(__FlashStringHelper const*)>
b:\gbox420\gbox420\gbox420_mega_main\build\sketch/seriallog.h:43
    Indent--;
    8ef2:	da 94       	dec	r13
b:\gbox420\gbox420\gbox420_mega_main\build\sketch/seriallog.h:39
}

template <class logLine>
void logToSerials(logLine &ToPrint, bool BreakLine = true, uint8_t Indent = 3)
{
  while (Indent > 0)
    8ef4:	f2 cf       	rjmp	.-28     	; 0x8eda <void logToSerials<bool>(bool&, bool, unsigned char)+0x26>
    8ef6:	f8 01       	movw	r30, r16
    8ef8:	60 81       	ld	r22, Z
    8efa:	70 e0       	ldi	r23, 0x00	; 0
b:\gbox420\gbox420\gbox420_mega_main\build\sketch/seriallog.h:47
    ESPSerial.print(F(" "));
    Indent--;
  }
  if (BreakLine)
  {
    ArduinoSerial.println(ToPrint);
    8efc:	4a e0       	ldi	r20, 0x0A	; 10
    8efe:	50 e0       	ldi	r21, 0x00	; 0
    8f00:	c7 01       	movw	r24, r14
b:\gbox420\gbox420\gbox420_mega_main\build\sketch/seriallog.h:45
  {
    ArduinoSerial.print(F(" "));
    ESPSerial.print(F(" "));
    Indent--;
  }
  if (BreakLine)
    8f02:	cc 20       	and	r12, r12
    8f04:	91 f0       	breq	.+36     	; 0x8f2a <void logToSerials<bool>(bool&, bool, unsigned char)+0x76>
b:\gbox420\gbox420\gbox420_mega_main\build\sketch/seriallog.h:47
  {
    ArduinoSerial.println(ToPrint);
    8f06:	0e 94 87 8c 	call	0x1190e	; 0x1190e <Print::println(int, int)>
b:\gbox420\gbox420\gbox420_mega_main\build\sketch/seriallog.h:48
    ESPSerial.println(ToPrint);
    8f0a:	f8 01       	movw	r30, r16
    8f0c:	60 81       	ld	r22, Z
    8f0e:	70 e0       	ldi	r23, 0x00	; 0
    8f10:	4a e0       	ldi	r20, 0x0A	; 10
    8f12:	50 e0       	ldi	r21, 0x00	; 0
    8f14:	ce 01       	movw	r24, r28
b:\gbox420\gbox420\gbox420_mega_main\build\sketch/seriallog.h:55
  else
  {
    ArduinoSerial.print(ToPrint);
    ESPSerial.print(ToPrint);
  }
    8f16:	df 91       	pop	r29
    8f18:	cf 91       	pop	r28
    8f1a:	1f 91       	pop	r17
    8f1c:	0f 91       	pop	r16
    8f1e:	ff 90       	pop	r15
    8f20:	ef 90       	pop	r14
    8f22:	df 90       	pop	r13
    8f24:	cf 90       	pop	r12
b:\gbox420\gbox420\gbox420_mega_main\build\sketch/seriallog.h:48
    Indent--;
  }
  if (BreakLine)
  {
    ArduinoSerial.println(ToPrint);
    ESPSerial.println(ToPrint);
    8f26:	0c 94 87 8c 	jmp	0x1190e	; 0x1190e <Print::println(int, int)>
b:\gbox420\gbox420\gbox420_mega_main\build\sketch/seriallog.h:52
  }
  else
  {
    ArduinoSerial.print(ToPrint);
    8f2a:	0e 94 80 8c 	call	0x11900	; 0x11900 <Print::print(int, int)>
b:\gbox420\gbox420\gbox420_mega_main\build\sketch/seriallog.h:53
    ESPSerial.print(ToPrint);
    8f2e:	f8 01       	movw	r30, r16
    8f30:	60 81       	ld	r22, Z
    8f32:	70 e0       	ldi	r23, 0x00	; 0
    8f34:	4a e0       	ldi	r20, 0x0A	; 10
    8f36:	50 e0       	ldi	r21, 0x00	; 0
    8f38:	ce 01       	movw	r24, r28
b:\gbox420\gbox420\gbox420_mega_main\build\sketch/seriallog.h:55
  }
    8f3a:	df 91       	pop	r29
    8f3c:	cf 91       	pop	r28
    8f3e:	1f 91       	pop	r17
    8f40:	0f 91       	pop	r16
    8f42:	ff 90       	pop	r15
    8f44:	ef 90       	pop	r14
    8f46:	df 90       	pop	r13
    8f48:	cf 90       	pop	r12
b:\gbox420\gbox420\gbox420_mega_main\build\sketch/seriallog.h:53
    ESPSerial.println(ToPrint);
  }
  else
  {
    ArduinoSerial.print(ToPrint);
    ESPSerial.print(ToPrint);
    8f4a:	0c 94 80 8c 	jmp	0x11900	; 0x11900 <Print::print(int, int)>

00008f4e <void logToSerials<char>(char*, bool, unsigned char)>:
_Z12logToSerialsIcEvPT_bh():
b:\gbox420\gbox420\gbox420_mega_main\build\sketch/seriallog.h:16
extern HardwareSerial &ArduinoSerial;
extern HardwareSerial &ESPSerial;

void logToSerials(const __FlashStringHelper *ToPrint, bool BreakLine = true, uint8_t Indent = 3); ///< logs to both Arduino and ESP Link serial console, 2 optional parameters to adding a break line at after printing and the indentation in front
template <class logLine>
void logToSerials(logLine *ToPrint, bool BreakLine = true, uint8_t Indent = 3)
    8f4e:	cf 92       	push	r12
    8f50:	df 92       	push	r13
    8f52:	ef 92       	push	r14
    8f54:	ff 92       	push	r15
    8f56:	0f 93       	push	r16
    8f58:	1f 93       	push	r17
    8f5a:	cf 93       	push	r28
    8f5c:	df 93       	push	r29
    8f5e:	8c 01       	movw	r16, r24
    8f60:	c6 2e       	mov	r12, r22
    8f62:	d4 2e       	mov	r13, r20
    8f64:	e0 90 2f 04 	lds	r14, 0x042F	; 0x80042f <ArduinoSerial>
    8f68:	f0 90 30 04 	lds	r15, 0x0430	; 0x800430 <ArduinoSerial+0x1>
    8f6c:	c0 91 2d 04 	lds	r28, 0x042D	; 0x80042d <ESPSerial>
    8f70:	d0 91 2e 04 	lds	r29, 0x042E	; 0x80042e <ESPSerial+0x1>
b:\gbox420\gbox420\gbox420_mega_main\build\sketch/seriallog.h:18
{
  while (Indent > 0)
    8f74:	dd 20       	and	r13, r13
    8f76:	61 f0       	breq	.+24     	; 0x8f90 <void logToSerials<char>(char*, bool, unsigned char)+0x42>
b:\gbox420\gbox420\gbox420_mega_main\build\sketch/seriallog.h:20
  {
    ArduinoSerial.print(F(" "));
    8f78:	6e e7       	ldi	r22, 0x7E	; 126
    8f7a:	71 e1       	ldi	r23, 0x11	; 17
    8f7c:	c7 01       	movw	r24, r14
    8f7e:	0e 94 6c 8b 	call	0x116d8	; 0x116d8 <Print::print(__FlashStringHelper const*)>
b:\gbox420\gbox420\gbox420_mega_main\build\sketch/seriallog.h:21
    ESPSerial.print(F(" "));
    8f82:	6c e7       	ldi	r22, 0x7C	; 124
    8f84:	71 e1       	ldi	r23, 0x11	; 17
    8f86:	ce 01       	movw	r24, r28
    8f88:	0e 94 6c 8b 	call	0x116d8	; 0x116d8 <Print::print(__FlashStringHelper const*)>
b:\gbox420\gbox420\gbox420_mega_main\build\sketch/seriallog.h:22
    Indent--;
    8f8c:	da 94       	dec	r13
b:\gbox420\gbox420\gbox420_mega_main\build\sketch/seriallog.h:18

void logToSerials(const __FlashStringHelper *ToPrint, bool BreakLine = true, uint8_t Indent = 3); ///< logs to both Arduino and ESP Link serial console, 2 optional parameters to adding a break line at after printing and the indentation in front
template <class logLine>
void logToSerials(logLine *ToPrint, bool BreakLine = true, uint8_t Indent = 3)
{
  while (Indent > 0)
    8f8e:	f2 cf       	rjmp	.-28     	; 0x8f74 <void logToSerials<char>(char*, bool, unsigned char)+0x26>
    8f90:	f8 01       	movw	r30, r16
    8f92:	60 81       	ld	r22, Z
b:\gbox420\gbox420\gbox420_mega_main\build\sketch/seriallog.h:26
    ESPSerial.print(F(" "));
    Indent--;
  }
  if (BreakLine)
  {
    ArduinoSerial.println((*ToPrint));
    8f94:	c7 01       	movw	r24, r14
b:\gbox420\gbox420\gbox420_mega_main\build\sketch/seriallog.h:24
  {
    ArduinoSerial.print(F(" "));
    ESPSerial.print(F(" "));
    Indent--;
  }
  if (BreakLine)
    8f96:	cc 20       	and	r12, r12
    8f98:	79 f0       	breq	.+30     	; 0x8fb8 <void logToSerials<char>(char*, bool, unsigned char)+0x6a>
b:\gbox420\gbox420\gbox420_mega_main\build\sketch/seriallog.h:26
  {
    ArduinoSerial.println((*ToPrint));
    8f9a:	0e 94 da 8b 	call	0x117b4	; 0x117b4 <Print::println(char)>
b:\gbox420\gbox420\gbox420_mega_main\build\sketch/seriallog.h:27
    ESPSerial.println((*ToPrint));
    8f9e:	f8 01       	movw	r30, r16
    8fa0:	60 81       	ld	r22, Z
    8fa2:	ce 01       	movw	r24, r28
b:\gbox420\gbox420\gbox420_mega_main\build\sketch/seriallog.h:34
  else
  {
    ArduinoSerial.print((*ToPrint));
    ESPSerial.print((*ToPrint));
  }
}
    8fa4:	df 91       	pop	r29
    8fa6:	cf 91       	pop	r28
    8fa8:	1f 91       	pop	r17
    8faa:	0f 91       	pop	r16
    8fac:	ff 90       	pop	r15
    8fae:	ef 90       	pop	r14
    8fb0:	df 90       	pop	r13
    8fb2:	cf 90       	pop	r12
b:\gbox420\gbox420\gbox420_mega_main\build\sketch/seriallog.h:27
    Indent--;
  }
  if (BreakLine)
  {
    ArduinoSerial.println((*ToPrint));
    ESPSerial.println((*ToPrint));
    8fb4:	0c 94 da 8b 	jmp	0x117b4	; 0x117b4 <Print::println(char)>
b:\gbox420\gbox420\gbox420_mega_main\build\sketch/seriallog.h:31
  }
  else
  {
    ArduinoSerial.print((*ToPrint));
    8fb8:	0e 94 a6 8b 	call	0x1174c	; 0x1174c <Print::print(char)>
b:\gbox420\gbox420\gbox420_mega_main\build\sketch/seriallog.h:32
    ESPSerial.print((*ToPrint));
    8fbc:	f8 01       	movw	r30, r16
    8fbe:	60 81       	ld	r22, Z
    8fc0:	ce 01       	movw	r24, r28
b:\gbox420\gbox420\gbox420_mega_main\build\sketch/seriallog.h:34
  }
}
    8fc2:	df 91       	pop	r29
    8fc4:	cf 91       	pop	r28
    8fc6:	1f 91       	pop	r17
    8fc8:	0f 91       	pop	r16
    8fca:	ff 90       	pop	r15
    8fcc:	ef 90       	pop	r14
    8fce:	df 90       	pop	r13
    8fd0:	cf 90       	pop	r12
b:\gbox420\gbox420\gbox420_mega_main\build\sketch/seriallog.h:32
    ESPSerial.println((*ToPrint));
  }
  else
  {
    ArduinoSerial.print((*ToPrint));
    ESPSerial.print((*ToPrint));
    8fd2:	0c 94 a6 8b 	jmp	0x1174c	; 0x1174c <Print::print(char)>

00008fd6 <void logToSerials<float>(float&, bool, unsigned char)>:
_Z12logToSerialsIfEvRT_bh():
b:\gbox420\gbox420\gbox420_mega_main\build\sketch/seriallog.h:37
  }
}

template <class logLine>
void logToSerials(logLine &ToPrint, bool BreakLine = true, uint8_t Indent = 3)
    8fd6:	cf 92       	push	r12
    8fd8:	df 92       	push	r13
    8fda:	ef 92       	push	r14
    8fdc:	ff 92       	push	r15
    8fde:	0f 93       	push	r16
    8fe0:	1f 93       	push	r17
    8fe2:	cf 93       	push	r28
    8fe4:	df 93       	push	r29
    8fe6:	8c 01       	movw	r16, r24
    8fe8:	c6 2e       	mov	r12, r22
    8fea:	d4 2e       	mov	r13, r20
    8fec:	e0 90 2f 04 	lds	r14, 0x042F	; 0x80042f <ArduinoSerial>
    8ff0:	f0 90 30 04 	lds	r15, 0x0430	; 0x800430 <ArduinoSerial+0x1>
    8ff4:	c0 91 2d 04 	lds	r28, 0x042D	; 0x80042d <ESPSerial>
    8ff8:	d0 91 2e 04 	lds	r29, 0x042E	; 0x80042e <ESPSerial+0x1>
b:\gbox420\gbox420\gbox420_mega_main\build\sketch/seriallog.h:39
{
  while (Indent > 0)
    8ffc:	dd 20       	and	r13, r13
    8ffe:	61 f0       	breq	.+24     	; 0x9018 <void logToSerials<float>(float&, bool, unsigned char)+0x42>
b:\gbox420\gbox420\gbox420_mega_main\build\sketch/seriallog.h:41
  {
    ArduinoSerial.print(F(" "));
    9000:	6a e7       	ldi	r22, 0x7A	; 122
    9002:	71 e1       	ldi	r23, 0x11	; 17
    9004:	c7 01       	movw	r24, r14
    9006:	0e 94 6c 8b 	call	0x116d8	; 0x116d8 <Print::print(__FlashStringHelper const*)>
b:\gbox420\gbox420\gbox420_mega_main\build\sketch/seriallog.h:42
    ESPSerial.print(F(" "));
    900a:	68 e7       	ldi	r22, 0x78	; 120
    900c:	71 e1       	ldi	r23, 0x11	; 17
    900e:	ce 01       	movw	r24, r28
    9010:	0e 94 6c 8b 	call	0x116d8	; 0x116d8 <Print::print(__FlashStringHelper const*)>
b:\gbox420\gbox420\gbox420_mega_main\build\sketch/seriallog.h:43
    Indent--;
    9014:	da 94       	dec	r13
b:\gbox420\gbox420\gbox420_mega_main\build\sketch/seriallog.h:39
}

template <class logLine>
void logToSerials(logLine &ToPrint, bool BreakLine = true, uint8_t Indent = 3)
{
  while (Indent > 0)
    9016:	f2 cf       	rjmp	.-28     	; 0x8ffc <void logToSerials<float>(float&, bool, unsigned char)+0x26>
    9018:	f8 01       	movw	r30, r16
    901a:	40 81       	ld	r20, Z
    901c:	51 81       	ldd	r21, Z+1	; 0x01
    901e:	62 81       	ldd	r22, Z+2	; 0x02
    9020:	73 81       	ldd	r23, Z+3	; 0x03
b:\gbox420\gbox420\gbox420_mega_main\build\sketch/seriallog.h:47
    ESPSerial.print(F(" "));
    Indent--;
  }
  if (BreakLine)
  {
    ArduinoSerial.println(ToPrint);
    9022:	22 e0       	ldi	r18, 0x02	; 2
    9024:	30 e0       	ldi	r19, 0x00	; 0
    9026:	c7 01       	movw	r24, r14
b:\gbox420\gbox420\gbox420_mega_main\build\sketch/seriallog.h:45
  {
    ArduinoSerial.print(F(" "));
    ESPSerial.print(F(" "));
    Indent--;
  }
  if (BreakLine)
    9028:	cc 20       	and	r12, r12
    902a:	a1 f0       	breq	.+40     	; 0x9054 <void logToSerials<float>(float&, bool, unsigned char)+0x7e>
b:\gbox420\gbox420\gbox420_mega_main\build\sketch/seriallog.h:47
  {
    ArduinoSerial.println(ToPrint);
    902c:	0e 94 cf 8d 	call	0x11b9e	; 0x11b9e <Print::println(double, int)>
b:\gbox420\gbox420\gbox420_mega_main\build\sketch/seriallog.h:48
    ESPSerial.println(ToPrint);
    9030:	f8 01       	movw	r30, r16
    9032:	40 81       	ld	r20, Z
    9034:	51 81       	ldd	r21, Z+1	; 0x01
    9036:	62 81       	ldd	r22, Z+2	; 0x02
    9038:	73 81       	ldd	r23, Z+3	; 0x03
    903a:	22 e0       	ldi	r18, 0x02	; 2
    903c:	30 e0       	ldi	r19, 0x00	; 0
    903e:	ce 01       	movw	r24, r28
b:\gbox420\gbox420\gbox420_mega_main\build\sketch/seriallog.h:55
  else
  {
    ArduinoSerial.print(ToPrint);
    ESPSerial.print(ToPrint);
  }
    9040:	df 91       	pop	r29
    9042:	cf 91       	pop	r28
    9044:	1f 91       	pop	r17
    9046:	0f 91       	pop	r16
    9048:	ff 90       	pop	r15
    904a:	ef 90       	pop	r14
    904c:	df 90       	pop	r13
    904e:	cf 90       	pop	r12
b:\gbox420\gbox420\gbox420_mega_main\build\sketch/seriallog.h:48
    Indent--;
  }
  if (BreakLine)
  {
    ArduinoSerial.println(ToPrint);
    ESPSerial.println(ToPrint);
    9050:	0c 94 cf 8d 	jmp	0x11b9e	; 0x11b9e <Print::println(double, int)>
b:\gbox420\gbox420\gbox420_mega_main\build\sketch/seriallog.h:52
  }
  else
  {
    ArduinoSerial.print(ToPrint);
    9054:	0e 94 cd 8d 	call	0x11b9a	; 0x11b9a <Print::print(double, int)>
b:\gbox420\gbox420\gbox420_mega_main\build\sketch/seriallog.h:53
    ESPSerial.print(ToPrint);
    9058:	f8 01       	movw	r30, r16
    905a:	40 81       	ld	r20, Z
    905c:	51 81       	ldd	r21, Z+1	; 0x01
    905e:	62 81       	ldd	r22, Z+2	; 0x02
    9060:	73 81       	ldd	r23, Z+3	; 0x03
    9062:	22 e0       	ldi	r18, 0x02	; 2
    9064:	30 e0       	ldi	r19, 0x00	; 0
    9066:	ce 01       	movw	r24, r28
b:\gbox420\gbox420\gbox420_mega_main\build\sketch/seriallog.h:55
  }
    9068:	df 91       	pop	r29
    906a:	cf 91       	pop	r28
    906c:	1f 91       	pop	r17
    906e:	0f 91       	pop	r16
    9070:	ff 90       	pop	r15
    9072:	ef 90       	pop	r14
    9074:	df 90       	pop	r13
    9076:	cf 90       	pop	r12
b:\gbox420\gbox420\gbox420_mega_main\build\sketch/seriallog.h:53
    ESPSerial.println(ToPrint);
  }
  else
  {
    ArduinoSerial.print(ToPrint);
    ESPSerial.print(ToPrint);
    9078:	0c 94 cd 8d 	jmp	0x11b9a	; 0x11b9a <Print::print(double, int)>

0000907c <AeroModule_Web::sendCommand(void*)>:
_ZN14AeroModule_Web11sendCommandEPv():
b:\Gbox420\Gbox420\Gbox420_Mega_Main\build\sketch\src\Modules_Web/AeroModule_Web.cpp:291

/**
* @brief Send a command message and process the response message
*/
AeroMessages AeroModule_Web::sendCommand(void *CommandToSend)
{
    907c:	cf 92       	push	r12
    907e:	df 92       	push	r13
    9080:	ef 92       	push	r14
    9082:	ff 92       	push	r15
    9084:	0f 93       	push	r16
    9086:	1f 93       	push	r17
    9088:	cf 93       	push	r28
    908a:	df 93       	push	r29
    908c:	ec 01       	movw	r28, r24
    908e:	7b 01       	movw	r14, r22
b:\Gbox420\Gbox420\Gbox420_Mega_Main\build\sketch\src\Modules_Web/AeroModule_Web.cpp:294
  AeroMessages SequenceIDToSend = ((AeroCommonTemplate *)CommandToSend)->SequenceID;
  AeroMessages ReceivedSequenceID;
  if (*(Parent->SerialReportWireless))
    9090:	ea 85       	ldd	r30, Y+10	; 0x0a
    9092:	fb 85       	ldd	r31, Y+11	; 0x0b
    9094:	a0 81       	ld	r26, Z
    9096:	b1 81       	ldd	r27, Z+1	; 0x01
    9098:	52 97       	sbiw	r26, 0x12	; 18
    909a:	8d 91       	ld	r24, X+
    909c:	9c 91       	ld	r25, X
    909e:	e8 0f       	add	r30, r24
    90a0:	f9 1f       	adc	r31, r25
    90a2:	00 88       	ldd	r0, Z+16	; 0x10
    90a4:	f1 89       	ldd	r31, Z+17	; 0x11
    90a6:	e0 2d       	mov	r30, r0
    90a8:	80 81       	ld	r24, Z
    90aa:	88 23       	and	r24, r24
    90ac:	c9 f0       	breq	.+50     	; 0x90e0 <AeroModule_Web::sendCommand(void*)+0x64>
b:\Gbox420\Gbox420\Gbox420_Mega_Main\build\sketch\src\Modules_Web/AeroModule_Web.cpp:292
/**
* @brief Send a command message and process the response message
*/
AeroMessages AeroModule_Web::sendCommand(void *CommandToSend)
{
  AeroMessages SequenceIDToSend = ((AeroCommonTemplate *)CommandToSend)->SequenceID;
    90ae:	fb 01       	movw	r30, r22
    90b0:	d0 80       	ld	r13, Z
b:\Gbox420\Gbox420\Gbox420_Mega_Main\build\sketch\src\Modules_Web/AeroModule_Web.cpp:296
  AeroMessages ReceivedSequenceID;
  if (*(Parent->SerialReportWireless))
  {
    logToSerials(F("Sending:"), false, 1);
    90b2:	41 e0       	ldi	r20, 0x01	; 1
    90b4:	60 e0       	ldi	r22, 0x00	; 0
    90b6:	87 ed       	ldi	r24, 0xD7	; 215
    90b8:	91 e1       	ldi	r25, 0x11	; 17
    90ba:	0e 94 85 16 	call	0x2d0a	; 0x2d0a <logToSerials(__FlashStringHelper const*, bool, unsigned char)>
    90be:	f6 e0       	ldi	r31, 0x06	; 6
b:\Gbox420\Gbox420\Gbox420_Mega_Main\build\sketch\src\Modules_Web/AeroModule_Web.cpp:297
    logToSerials(toText_aeroSequenceID(SequenceIDToSend), false, 1);
    90c0:	83 ea       	ldi	r24, 0xA3	; 163
    90c2:	94 e1       	ldi	r25, 0x14	; 20
    90c4:	fd 15       	cp	r31, r13
    90c6:	40 f0       	brcs	.+16     	; 0x90d8 <AeroModule_Web::sendCommand(void*)+0x5c>
    90c8:	ed 2d       	mov	r30, r13
    90ca:	f0 e0       	ldi	r31, 0x00	; 0
    90cc:	ee 0f       	add	r30, r30
    90ce:	ff 1f       	adc	r31, r31
    90d0:	e4 5a       	subi	r30, 0xA4	; 164
    90d2:	f7 4f       	sbci	r31, 0xF7	; 247
    90d4:	80 81       	ld	r24, Z
    90d6:	91 81       	ldd	r25, Z+1	; 0x01
    90d8:	41 e0       	ldi	r20, 0x01	; 1
    90da:	60 e0       	ldi	r22, 0x00	; 0
    90dc:	0e 94 85 16 	call	0x2d0a	; 0x2d0a <logToSerials(__FlashStringHelper const*, bool, unsigned char)>
b:\Gbox420\Gbox420\Gbox420_Mega_Main\build\sketch\src\Modules_Web/AeroModule_Web.cpp:299
  }
  Parent->Wireless->openWritingPipe(WirelessChannel);
    90e0:	ea 85       	ldd	r30, Y+10	; 0x0a
    90e2:	fb 85       	ldd	r31, Y+11	; 0x0b
    90e4:	be 01       	movw	r22, r28
    90e6:	64 5f       	subi	r22, 0xF4	; 244
    90e8:	7f 4f       	sbci	r23, 0xFF	; 255
    90ea:	82 81       	ldd	r24, Z+2	; 0x02
    90ec:	93 81       	ldd	r25, Z+3	; 0x03
    90ee:	0e 94 e2 68 	call	0xd1c4	; 0xd1c4 <RF24::openWritingPipe(unsigned char const*)>
b:\Gbox420\Gbox420\Gbox420_Mega_Main\build\sketch\src\Modules_Web/AeroModule_Web.cpp:300
  Parent->Wireless->flush_rx(); ///< Dump all previously received but unprocessed messages
    90f2:	ea 85       	ldd	r30, Y+10	; 0x0a
    90f4:	fb 85       	ldd	r31, Y+11	; 0x0b
    90f6:	82 81       	ldd	r24, Z+2	; 0x02
    90f8:	93 81       	ldd	r25, Z+3	; 0x03
    90fa:	0e 94 eb 66 	call	0xcdd6	; 0xcdd6 <RF24::flush_rx()>
b:\Gbox420\Gbox420\Gbox420_Mega_Main\build\sketch\src\Modules_Web/AeroModule_Web.cpp:301
  if (Parent->Wireless->write(CommandToSend, WirelessPayloadSize))
    90fe:	ea 85       	ldd	r30, Y+10	; 0x0a
    9100:	fb 85       	ldd	r31, Y+11	; 0x0b
    9102:	40 e2       	ldi	r20, 0x20	; 32
    9104:	b7 01       	movw	r22, r14
    9106:	82 81       	ldd	r24, Z+2	; 0x02
    9108:	93 81       	ldd	r25, Z+3	; 0x03
    910a:	0e 94 ba 68 	call	0xd174	; 0xd174 <RF24::write(void const*, unsigned char)>
    910e:	88 23       	and	r24, r24
    9110:	09 f4       	brne	.+2      	; 0x9114 <AeroModule_Web::sendCommand(void*)+0x98>
    9112:	ca c1       	rjmp	.+916    	; 0x94a8 <AeroModule_Web::sendCommand(void*)+0x42c>
b:\Gbox420\Gbox420\Gbox420_Mega_Main\build\sketch\src\Modules_Web/AeroModule_Web.cpp:303
  {
    delay(50); ///< give a little time to the nRF024L01+ chip to update the isAckPayloadAvailable flag
    9114:	62 e3       	ldi	r22, 0x32	; 50
    9116:	70 e0       	ldi	r23, 0x00	; 0
    9118:	80 e0       	ldi	r24, 0x00	; 0
    911a:	90 e0       	ldi	r25, 0x00	; 0
    911c:	0e 94 98 85 	call	0x10b30	; 0x10b30 <delay>
b:\Gbox420\Gbox420\Gbox420_Mega_Main\build\sketch\src\Modules_Web/AeroModule_Web.cpp:304
    if (Parent->Wireless->isAckPayloadAvailable())
    9120:	ea 85       	ldd	r30, Y+10	; 0x0a
    9122:	fb 85       	ldd	r31, Y+11	; 0x0b
    9124:	82 81       	ldd	r24, Z+2	; 0x02
    9126:	93 81       	ldd	r25, Z+3	; 0x03
    9128:	0e 94 64 69 	call	0xd2c8	; 0xd2c8 <RF24::isAckPayloadAvailable()>
    912c:	ea 85       	ldd	r30, Y+10	; 0x0a
    912e:	fb 85       	ldd	r31, Y+11	; 0x0b
    9130:	88 23       	and	r24, r24
    9132:	09 f4       	brne	.+2      	; 0x9136 <AeroModule_Web::sendCommand(void*)+0xba>
    9134:	a4 c1       	rjmp	.+840    	; 0x947e <AeroModule_Web::sendCommand(void*)+0x402>
b:\Gbox420\Gbox420\Gbox420_Mega_Main\build\sketch\src\Modules_Web/AeroModule_Web.cpp:306
    {
      OnlineStatus = true;
    9136:	81 e0       	ldi	r24, 0x01	; 1
    9138:	8b 83       	std	Y+3, r24	; 0x03
b:\Gbox420\Gbox420\Gbox420_Mega_Main\build\sketch\src\Modules_Web/AeroModule_Web.cpp:307
      Parent->Wireless->read(ReceivedResponse, WirelessPayloadSize);
    913a:	6c 81       	ldd	r22, Y+4	; 0x04
    913c:	7d 81       	ldd	r23, Y+5	; 0x05
    913e:	40 e2       	ldi	r20, 0x20	; 32
    9140:	82 81       	ldd	r24, Z+2	; 0x02
    9142:	93 81       	ldd	r25, Z+3	; 0x03
    9144:	0e 94 d5 68 	call	0xd1aa	; 0xd1aa <RF24::read(void*, unsigned char)>
b:\Gbox420\Gbox420\Gbox420_Mega_Main\build\sketch\src\Modules_Web/AeroModule_Web.cpp:308
      ReceivedSequenceID = ((AeroCommonTemplate *)ReceivedResponse)->SequenceID;
    9148:	ec 81       	ldd	r30, Y+4	; 0x04
    914a:	fd 81       	ldd	r31, Y+5	; 0x05
    914c:	00 81       	ld	r16, Z
    914e:	11 81       	ldd	r17, Z+1	; 0x01
b:\Gbox420\Gbox420\Gbox420_Mega_Main\build\sketch\src\Modules_Web/AeroModule_Web.cpp:309
      if (*(Parent->SerialReportWireless))
    9150:	ea 85       	ldd	r30, Y+10	; 0x0a
    9152:	fb 85       	ldd	r31, Y+11	; 0x0b
    9154:	a0 81       	ld	r26, Z
    9156:	b1 81       	ldd	r27, Z+1	; 0x01
    9158:	52 97       	sbiw	r26, 0x12	; 18
    915a:	8d 91       	ld	r24, X+
    915c:	9c 91       	ld	r25, X
    915e:	e8 0f       	add	r30, r24
    9160:	f9 1f       	adc	r31, r25
    9162:	00 88       	ldd	r0, Z+16	; 0x10
    9164:	f1 89       	ldd	r31, Z+17	; 0x11
    9166:	e0 2d       	mov	r30, r0
    9168:	80 81       	ld	r24, Z
    916a:	88 23       	and	r24, r24
    916c:	e1 f0       	breq	.+56     	; 0x91a6 <AeroModule_Web::sendCommand(void*)+0x12a>
b:\Gbox420\Gbox420\Gbox420_Mega_Main\build\sketch\src\Modules_Web/AeroModule_Web.cpp:311
      {
        logToSerials(F("; Response:"), false, 1);
    916e:	41 e0       	ldi	r20, 0x01	; 1
    9170:	60 e0       	ldi	r22, 0x00	; 0
    9172:	8b ec       	ldi	r24, 0xCB	; 203
    9174:	91 e1       	ldi	r25, 0x11	; 17
    9176:	0e 94 85 16 	call	0x2d0a	; 0x2d0a <logToSerials(__FlashStringHelper const*, bool, unsigned char)>
b:\Gbox420\Gbox420\Gbox420_Mega_Main\build\sketch\src\Modules_Web/AeroModule_Web.cpp:312
        logToSerials(toText_aeroSequenceID(ReceivedSequenceID), false, 1);
    917a:	83 ea       	ldi	r24, 0xA3	; 163
    917c:	94 e1       	ldi	r25, 0x14	; 20
    917e:	07 30       	cpi	r16, 0x07	; 7
    9180:	40 f4       	brcc	.+16     	; 0x9192 <AeroModule_Web::sendCommand(void*)+0x116>
    9182:	e0 2f       	mov	r30, r16
    9184:	f0 e0       	ldi	r31, 0x00	; 0
    9186:	ee 0f       	add	r30, r30
    9188:	ff 1f       	adc	r31, r31
    918a:	e4 5a       	subi	r30, 0xA4	; 164
    918c:	f7 4f       	sbci	r31, 0xF7	; 247
    918e:	80 81       	ld	r24, Z
    9190:	91 81       	ldd	r25, Z+1	; 0x01
    9192:	41 e0       	ldi	r20, 0x01	; 1
    9194:	60 e0       	ldi	r22, 0x00	; 0
    9196:	0e 94 85 16 	call	0x2d0a	; 0x2d0a <logToSerials(__FlashStringHelper const*, bool, unsigned char)>
b:\Gbox420\Gbox420\Gbox420_Mega_Main\build\sketch\src\Modules_Web/AeroModule_Web.cpp:313
        logToSerials(F("; Data:"), false, 1);
    919a:	41 e0       	ldi	r20, 0x01	; 1
    919c:	60 e0       	ldi	r22, 0x00	; 0
    919e:	83 ec       	ldi	r24, 0xC3	; 195
    91a0:	91 e1       	ldi	r25, 0x11	; 17
    91a2:	0e 94 85 16 	call	0x2d0a	; 0x2d0a <logToSerials(__FlashStringHelper const*, bool, unsigned char)>
b:\Gbox420\Gbox420\Gbox420_Mega_Main\build\sketch\src\Modules_Web/AeroModule_Web.cpp:316
      }

      switch (ReceivedSequenceID)
    91a6:	03 30       	cpi	r16, 0x03	; 3
    91a8:	11 05       	cpc	r17, r1
    91aa:	09 f4       	brne	.+2      	; 0x91ae <AeroModule_Web::sendCommand(void*)+0x132>
    91ac:	56 c0       	rjmp	.+172    	; 0x925a <AeroModule_Web::sendCommand(void*)+0x1de>
    91ae:	40 f4       	brcc	.+16     	; 0x91c0 <AeroModule_Web::sendCommand(void*)+0x144>
    91b0:	01 30       	cpi	r16, 0x01	; 1
    91b2:	11 05       	cpc	r17, r1
    91b4:	11 f1       	breq	.+68     	; 0x91fa <AeroModule_Web::sendCommand(void*)+0x17e>
b:\Gbox420\Gbox420\Gbox420_Mega_Main\build\sketch\src\Modules_Web/AeroModule_Web.cpp:392
        {
          logToSerials(F("-"), true, 1); ///< Reset messages does not have any data
        }
        break;
      default:
        logToSerials(F("SequenceID unknown"), true, 1);
    91b6:	41 e0       	ldi	r20, 0x01	; 1
    91b8:	61 e0       	ldi	r22, 0x01	; 1
    91ba:	8e ea       	ldi	r24, 0xAE	; 174
    91bc:	91 e1       	ldi	r25, 0x11	; 17
    91be:	1a c0       	rjmp	.+52     	; 0x91f4 <AeroModule_Web::sendCommand(void*)+0x178>
b:\Gbox420\Gbox420\Gbox420_Mega_Main\build\sketch\src\Modules_Web/AeroModule_Web.cpp:316
        logToSerials(F("; Response:"), false, 1);
        logToSerials(toText_aeroSequenceID(ReceivedSequenceID), false, 1);
        logToSerials(F("; Data:"), false, 1);
      }

      switch (ReceivedSequenceID)
    91c0:	05 30       	cpi	r16, 0x05	; 5
    91c2:	11 05       	cpc	r17, r1
    91c4:	09 f4       	brne	.+2      	; 0x91c8 <AeroModule_Web::sendCommand(void*)+0x14c>
    91c6:	d5 c0       	rjmp	.+426    	; 0x9372 <AeroModule_Web::sendCommand(void*)+0x2f6>
    91c8:	06 30       	cpi	r16, 0x06	; 6
    91ca:	11 05       	cpc	r17, r1
    91cc:	a1 f7       	brne	.-24     	; 0x91b6 <AeroModule_Web::sendCommand(void*)+0x13a>
b:\Gbox420\Gbox420\Gbox420_Mega_Main\build\sketch\src\Modules_Web/AeroModule_Web.cpp:386
          AeroCommand2ToSend.DrainPressureTank = false;
        if (AeroResponse2Received.ConfirmTareWeight)
          AeroCommand2ToSend.TareWeight = false;
        break;
      case AeroMessages::AeroReset:
        if (*(Parent->SerialReportWireless))
    91ce:	ea 85       	ldd	r30, Y+10	; 0x0a
    91d0:	fb 85       	ldd	r31, Y+11	; 0x0b
    91d2:	a0 81       	ld	r26, Z
    91d4:	b1 81       	ldd	r27, Z+1	; 0x01
    91d6:	52 97       	sbiw	r26, 0x12	; 18
    91d8:	8d 91       	ld	r24, X+
    91da:	9c 91       	ld	r25, X
    91dc:	e8 0f       	add	r30, r24
    91de:	f9 1f       	adc	r31, r25
    91e0:	00 88       	ldd	r0, Z+16	; 0x10
    91e2:	f1 89       	ldd	r31, Z+17	; 0x11
    91e4:	e0 2d       	mov	r30, r0
    91e6:	80 81       	ld	r24, Z
    91e8:	88 23       	and	r24, r24
    91ea:	39 f1       	breq	.+78     	; 0x923a <AeroModule_Web::sendCommand(void*)+0x1be>
b:\Gbox420\Gbox420\Gbox420_Mega_Main\build\sketch\src\Modules_Web/AeroModule_Web.cpp:388
        {
          logToSerials(F("-"), true, 1); ///< Reset messages does not have any data
    91ec:	41 e0       	ldi	r20, 0x01	; 1
    91ee:	61 e0       	ldi	r22, 0x01	; 1
    91f0:	81 ec       	ldi	r24, 0xC1	; 193
    91f2:	91 e1       	ldi	r25, 0x11	; 17
b:\Gbox420\Gbox420\Gbox420_Mega_Main\build\sketch\src\Modules_Web/AeroModule_Web.cpp:392
        }
        break;
      default:
        logToSerials(F("SequenceID unknown"), true, 1);
    91f4:	0e 94 85 16 	call	0x2d0a	; 0x2d0a <logToSerials(__FlashStringHelper const*, bool, unsigned char)>
b:\Gbox420\Gbox420\Gbox420_Mega_Main\build\sketch\src\Modules_Web/AeroModule_Web.cpp:393
        break;
    91f8:	20 c0       	rjmp	.+64     	; 0x923a <AeroModule_Web::sendCommand(void*)+0x1be>
b:\Gbox420\Gbox420\Gbox420_Mega_Main\build\sketch\src\Modules_Web/AeroModule_Web.cpp:319
      }

      switch (ReceivedSequenceID)
      {
      case AeroMessages::AeroModuleResponse1:
        memcpy(&AeroModuleResponse1Received, ReceivedResponse, sizeof(struct AeroModuleResponse));
    91fa:	ec 81       	ldd	r30, Y+4	; 0x04
    91fc:	fd 81       	ldd	r31, Y+5	; 0x05
    91fe:	80 81       	ld	r24, Z
    9200:	91 81       	ldd	r25, Z+1	; 0x01
    9202:	a2 81       	ldd	r26, Z+2	; 0x02
    9204:	80 93 fe 13 	sts	0x13FE, r24	; 0x8013fe <AeroModuleResponse1Received>
    9208:	90 93 ff 13 	sts	0x13FF, r25	; 0x8013ff <AeroModuleResponse1Received+0x1>
    920c:	a0 93 00 14 	sts	0x1400, r26	; 0x801400 <AeroModuleResponse1Received+0x2>
b:\Gbox420\Gbox420\Gbox420_Mega_Main\build\sketch\src\Modules_Web/AeroModule_Web.cpp:320
        if (*(Parent->SerialReportWireless))
    9210:	ea 85       	ldd	r30, Y+10	; 0x0a
    9212:	fb 85       	ldd	r31, Y+11	; 0x0b
    9214:	a0 81       	ld	r26, Z
    9216:	b1 81       	ldd	r27, Z+1	; 0x01
    9218:	52 97       	sbiw	r26, 0x12	; 18
    921a:	8d 91       	ld	r24, X+
    921c:	9c 91       	ld	r25, X
    921e:	e8 0f       	add	r30, r24
    9220:	f9 1f       	adc	r31, r25
    9222:	00 88       	ldd	r0, Z+16	; 0x10
    9224:	f1 89       	ldd	r31, Z+17	; 0x11
    9226:	e0 2d       	mov	r30, r0
    9228:	80 81       	ld	r24, Z
    922a:	88 23       	and	r24, r24
    922c:	31 f0       	breq	.+12     	; 0x923a <AeroModule_Web::sendCommand(void*)+0x1be>
b:\Gbox420\Gbox420\Gbox420_Mega_Main\build\sketch\src\Modules_Web/AeroModule_Web.cpp:322
        {
          logToSerials(AeroModuleResponse1Received.Status, true, 1);
    922e:	41 e0       	ldi	r20, 0x01	; 1
    9230:	61 e0       	ldi	r22, 0x01	; 1
    9232:	80 e0       	ldi	r24, 0x00	; 0
    9234:	94 e1       	ldi	r25, 0x14	; 20
    9236:	0e 94 5a 47 	call	0x8eb4	; 0x8eb4 <void logToSerials<bool>(bool&, bool, unsigned char)>
b:\Gbox420\Gbox420\Gbox420_Mega_Main\build\sketch\src\Modules_Web/AeroModule_Web.cpp:395
        break;
      default:
        logToSerials(F("SequenceID unknown"), true, 1);
        break;
      }
      LastResponseReceived = millis();
    923a:	0e 94 67 85 	call	0x10ace	; 0x10ace <millis>
    923e:	6e 83       	std	Y+6, r22	; 0x06
    9240:	7f 83       	std	Y+7, r23	; 0x07
    9242:	88 87       	std	Y+8, r24	; 0x08
    9244:	99 87       	std	Y+9, r25	; 0x09
b:\Gbox420\Gbox420\Gbox420_Mega_Main\build\sketch\src\Modules_Web/AeroModule_Web.cpp:413
    {
      OnlineStatus = false;
    }
  }
  return ReceivedSequenceID;
}
    9246:	c8 01       	movw	r24, r16
    9248:	df 91       	pop	r29
    924a:	cf 91       	pop	r28
    924c:	1f 91       	pop	r17
    924e:	0f 91       	pop	r16
    9250:	ff 90       	pop	r15
    9252:	ef 90       	pop	r14
    9254:	df 90       	pop	r13
    9256:	cf 90       	pop	r12
    9258:	08 95       	ret
b:\Gbox420\Gbox420\Gbox420_Mega_Main\build\sketch\src\Modules_Web/AeroModule_Web.cpp:326
        {
          logToSerials(AeroModuleResponse1Received.Status, true, 1);
        }
        break;
      case AeroMessages::AeroResponse1:
        memcpy(&AeroResponse1Received, ReceivedResponse, sizeof(struct AeroResponse_P1));
    925a:	ec 81       	ldd	r30, Y+4	; 0x04
    925c:	fd 81       	ldd	r31, Y+5	; 0x05
    925e:	88 e1       	ldi	r24, 0x18	; 24
    9260:	af ec       	ldi	r26, 0xCF	; 207
    9262:	b3 e1       	ldi	r27, 0x13	; 19
    9264:	01 90       	ld	r0, Z+
    9266:	0d 92       	st	X+, r0
    9268:	8a 95       	dec	r24
    926a:	e1 f7       	brne	.-8      	; 0x9264 <AeroModule_Web::sendCommand(void*)+0x1e8>
b:\Gbox420\Gbox420\Gbox420_Mega_Main\build\sketch\src\Modules_Web/AeroModule_Web.cpp:327
        if (*(Parent->SerialReportWireless))
    926c:	ea 85       	ldd	r30, Y+10	; 0x0a
    926e:	fb 85       	ldd	r31, Y+11	; 0x0b
    9270:	a0 81       	ld	r26, Z
    9272:	b1 81       	ldd	r27, Z+1	; 0x01
    9274:	52 97       	sbiw	r26, 0x12	; 18
    9276:	8d 91       	ld	r24, X+
    9278:	9c 91       	ld	r25, X
    927a:	e8 0f       	add	r30, r24
    927c:	f9 1f       	adc	r31, r25
    927e:	00 88       	ldd	r0, Z+16	; 0x10
    9280:	f1 89       	ldd	r31, Z+17	; 0x11
    9282:	e0 2d       	mov	r30, r0
    9284:	80 81       	ld	r24, Z
    9286:	88 23       	and	r24, r24
    9288:	09 f4       	brne	.+2      	; 0x928c <AeroModule_Web::sendCommand(void*)+0x210>
    928a:	4a c0       	rjmp	.+148    	; 0x9320 <AeroModule_Web::sendCommand(void*)+0x2a4>
b:\Gbox420\Gbox420\Gbox420_Mega_Main\build\sketch\src\Modules_Web/AeroModule_Web.cpp:329
        {
          logToSerials(AeroResponse1Received.ConfirmSprayEnabled, false, 1);
    928c:	41 e0       	ldi	r20, 0x01	; 1
    928e:	60 e0       	ldi	r22, 0x00	; 0
    9290:	81 ed       	ldi	r24, 0xD1	; 209
    9292:	93 e1       	ldi	r25, 0x13	; 19
    9294:	0e 94 5a 47 	call	0x8eb4	; 0x8eb4 <void logToSerials<bool>(bool&, bool, unsigned char)>
b:\Gbox420\Gbox420\Gbox420_Mega_Main\build\sketch\src\Modules_Web/AeroModule_Web.cpp:330
          logToSerials(AeroResponse1Received.ConfirmSprayDisabled, false, 1);
    9298:	41 e0       	ldi	r20, 0x01	; 1
    929a:	60 e0       	ldi	r22, 0x00	; 0
    929c:	82 ed       	ldi	r24, 0xD2	; 210
    929e:	93 e1       	ldi	r25, 0x13	; 19
    92a0:	0e 94 5a 47 	call	0x8eb4	; 0x8eb4 <void logToSerials<bool>(bool&, bool, unsigned char)>
b:\Gbox420\Gbox420\Gbox420_Mega_Main\build\sketch\src\Modules_Web/AeroModule_Web.cpp:331
          logToSerials(AeroResponse1Received.ConfirmSprayNow, false, 1);
    92a4:	41 e0       	ldi	r20, 0x01	; 1
    92a6:	60 e0       	ldi	r22, 0x00	; 0
    92a8:	83 ed       	ldi	r24, 0xD3	; 211
    92aa:	93 e1       	ldi	r25, 0x13	; 19
    92ac:	0e 94 5a 47 	call	0x8eb4	; 0x8eb4 <void logToSerials<bool>(bool&, bool, unsigned char)>
b:\Gbox420\Gbox420\Gbox420_Mega_Main\build\sketch\src\Modules_Web/AeroModule_Web.cpp:332
          logToSerials(AeroResponse1Received.ConfirmSprayOff, false, 1);
    92b0:	41 e0       	ldi	r20, 0x01	; 1
    92b2:	60 e0       	ldi	r22, 0x00	; 0
    92b4:	84 ed       	ldi	r24, 0xD4	; 212
    92b6:	93 e1       	ldi	r25, 0x13	; 19
    92b8:	0e 94 5a 47 	call	0x8eb4	; 0x8eb4 <void logToSerials<bool>(bool&, bool, unsigned char)>
b:\Gbox420\Gbox420\Gbox420_Mega_Main\build\sketch\src\Modules_Web/AeroModule_Web.cpp:333
          logToSerials(toText((int)AeroResponse1Received.AeroState), false, 1);
    92bc:	80 91 d5 13 	lds	r24, 0x13D5	; 0x8013d5 <AeroResponse1Received+0x6>
    92c0:	90 91 d6 13 	lds	r25, 0x13D6	; 0x8013d6 <AeroResponse1Received+0x7>
    92c4:	0e 94 95 33 	call	0x672a	; 0x672a <toText(int)>
    92c8:	41 e0       	ldi	r20, 0x01	; 1
    92ca:	60 e0       	ldi	r22, 0x00	; 0
    92cc:	0e 94 a7 47 	call	0x8f4e	; 0x8f4e <void logToSerials<char>(char*, bool, unsigned char)>
b:\Gbox420\Gbox420\Gbox420_Mega_Main\build\sketch\src\Modules_Web/AeroModule_Web.cpp:334
          logToSerials(AeroResponse1Received.PressureTankPresent, false, 1);
    92d0:	41 e0       	ldi	r20, 0x01	; 1
    92d2:	60 e0       	ldi	r22, 0x00	; 0
    92d4:	87 ed       	ldi	r24, 0xD7	; 215
    92d6:	93 e1       	ldi	r25, 0x13	; 19
    92d8:	0e 94 5a 47 	call	0x8eb4	; 0x8eb4 <void logToSerials<bool>(bool&, bool, unsigned char)>
b:\Gbox420\Gbox420\Gbox420_Mega_Main\build\sketch\src\Modules_Web/AeroModule_Web.cpp:335
          logToSerials(AeroResponse1Received.SprayEnabled, false, 1);
    92dc:	41 e0       	ldi	r20, 0x01	; 1
    92de:	60 e0       	ldi	r22, 0x00	; 0
    92e0:	88 ed       	ldi	r24, 0xD8	; 216
    92e2:	93 e1       	ldi	r25, 0x13	; 19
    92e4:	0e 94 5a 47 	call	0x8eb4	; 0x8eb4 <void logToSerials<bool>(bool&, bool, unsigned char)>
b:\Gbox420\Gbox420\Gbox420_Mega_Main\build\sketch\src\Modules_Web/AeroModule_Web.cpp:336
          logToSerials(AeroResponse1Received.Pressure, false, 1);
    92e8:	41 e0       	ldi	r20, 0x01	; 1
    92ea:	60 e0       	ldi	r22, 0x00	; 0
    92ec:	89 ed       	ldi	r24, 0xD9	; 217
    92ee:	93 e1       	ldi	r25, 0x13	; 19
    92f0:	0e 94 eb 47 	call	0x8fd6	; 0x8fd6 <void logToSerials<float>(float&, bool, unsigned char)>
b:\Gbox420\Gbox420\Gbox420_Mega_Main\build\sketch\src\Modules_Web/AeroModule_Web.cpp:337
          logToSerials(toText((int)AeroResponse1Received.PumpState), false, 1);
    92f4:	80 91 dd 13 	lds	r24, 0x13DD	; 0x8013dd <AeroResponse1Received+0xe>
    92f8:	90 91 de 13 	lds	r25, 0x13DE	; 0x8013de <AeroResponse1Received+0xf>
    92fc:	0e 94 95 33 	call	0x672a	; 0x672a <toText(int)>
    9300:	41 e0       	ldi	r20, 0x01	; 1
    9302:	60 e0       	ldi	r22, 0x00	; 0
    9304:	0e 94 a7 47 	call	0x8f4e	; 0x8f4e <void logToSerials<char>(char*, bool, unsigned char)>
b:\Gbox420\Gbox420\Gbox420_Mega_Main\build\sketch\src\Modules_Web/AeroModule_Web.cpp:338
          logToSerials(AeroResponse1Received.LastSprayPressure, false, 1);
    9308:	41 e0       	ldi	r20, 0x01	; 1
    930a:	60 e0       	ldi	r22, 0x00	; 0
    930c:	8f ed       	ldi	r24, 0xDF	; 223
    930e:	93 e1       	ldi	r25, 0x13	; 19
    9310:	0e 94 eb 47 	call	0x8fd6	; 0x8fd6 <void logToSerials<float>(float&, bool, unsigned char)>
b:\Gbox420\Gbox420\Gbox420_Mega_Main\build\sketch\src\Modules_Web/AeroModule_Web.cpp:339
          logToSerials(AeroResponse1Received.Weight, true, 1);
    9314:	41 e0       	ldi	r20, 0x01	; 1
    9316:	61 e0       	ldi	r22, 0x01	; 1
    9318:	83 ee       	ldi	r24, 0xE3	; 227
    931a:	93 e1       	ldi	r25, 0x13	; 19
    931c:	0e 94 eb 47 	call	0x8fd6	; 0x8fd6 <void logToSerials<float>(float&, bool, unsigned char)>
b:\Gbox420\Gbox420\Gbox420_Mega_Main\build\sketch\src\Modules_Web/AeroModule_Web.cpp:341
        }
        if (AeroCommand1ToSend.SprayEnabled || AeroCommand1ToSend.SprayDisabled || AeroCommand1ToSend.SprayNow || AeroCommand1ToSend.SprayOff)
    9320:	80 91 ea 13 	lds	r24, 0x13EA	; 0x8013ea <AeroCommand1ToSend+0x3>
    9324:	81 11       	cpse	r24, r1
    9326:	0c c0       	rjmp	.+24     	; 0x9340 <AeroModule_Web::sendCommand(void*)+0x2c4>
b:\Gbox420\Gbox420\Gbox420_Mega_Main\build\sketch\src\Modules_Web/AeroModule_Web.cpp:341 (discriminator 1)
    9328:	80 91 eb 13 	lds	r24, 0x13EB	; 0x8013eb <AeroCommand1ToSend+0x4>
    932c:	81 11       	cpse	r24, r1
    932e:	08 c0       	rjmp	.+16     	; 0x9340 <AeroModule_Web::sendCommand(void*)+0x2c4>
b:\Gbox420\Gbox420\Gbox420_Mega_Main\build\sketch\src\Modules_Web/AeroModule_Web.cpp:341 (discriminator 2)
    9330:	80 91 ec 13 	lds	r24, 0x13EC	; 0x8013ec <AeroCommand1ToSend+0x5>
    9334:	81 11       	cpse	r24, r1
    9336:	04 c0       	rjmp	.+8      	; 0x9340 <AeroModule_Web::sendCommand(void*)+0x2c4>
b:\Gbox420\Gbox420\Gbox420_Mega_Main\build\sketch\src\Modules_Web/AeroModule_Web.cpp:341 (discriminator 3)
    9338:	80 91 ed 13 	lds	r24, 0x13ED	; 0x8013ed <AeroCommand1ToSend+0x6>
    933c:	88 23       	and	r24, r24
    933e:	11 f0       	breq	.+4      	; 0x9344 <AeroModule_Web::sendCommand(void*)+0x2c8>
b:\Gbox420\Gbox420\Gbox420_Mega_Main\build\sketch\src\Modules_Web/AeroModule_Web.cpp:343
        {
          SyncRequested = true; ///< Force another message exchange when a command is active
    9340:	81 e0       	ldi	r24, 0x01	; 1
    9342:	8a 83       	std	Y+2, r24	; 0x02
b:\Gbox420\Gbox420\Gbox420_Mega_Main\build\sketch\src\Modules_Web/AeroModule_Web.cpp:345
        }
        if (AeroResponse1Received.ConfirmSprayEnabled)
    9344:	80 91 d1 13 	lds	r24, 0x13D1	; 0x8013d1 <AeroResponse1Received+0x2>
    9348:	81 11       	cpse	r24, r1
b:\Gbox420\Gbox420\Gbox420_Mega_Main\build\sketch\src\Modules_Web/AeroModule_Web.cpp:346
          AeroCommand1ToSend.SprayEnabled = false; //Turn off the Flag once the Receiver confirms processing it
    934a:	10 92 ea 13 	sts	0x13EA, r1	; 0x8013ea <AeroCommand1ToSend+0x3>
b:\Gbox420\Gbox420\Gbox420_Mega_Main\build\sketch\src\Modules_Web/AeroModule_Web.cpp:347
        if (AeroResponse1Received.ConfirmSprayDisabled)
    934e:	80 91 d2 13 	lds	r24, 0x13D2	; 0x8013d2 <AeroResponse1Received+0x3>
    9352:	81 11       	cpse	r24, r1
b:\Gbox420\Gbox420\Gbox420_Mega_Main\build\sketch\src\Modules_Web/AeroModule_Web.cpp:348
          AeroCommand1ToSend.SprayDisabled = false;
    9354:	10 92 eb 13 	sts	0x13EB, r1	; 0x8013eb <AeroCommand1ToSend+0x4>
b:\Gbox420\Gbox420\Gbox420_Mega_Main\build\sketch\src\Modules_Web/AeroModule_Web.cpp:349
        if (AeroResponse1Received.ConfirmSprayNow)
    9358:	80 91 d3 13 	lds	r24, 0x13D3	; 0x8013d3 <AeroResponse1Received+0x4>
    935c:	81 11       	cpse	r24, r1
b:\Gbox420\Gbox420\Gbox420_Mega_Main\build\sketch\src\Modules_Web/AeroModule_Web.cpp:350
          AeroCommand1ToSend.SprayNow = false;
    935e:	10 92 ec 13 	sts	0x13EC, r1	; 0x8013ec <AeroCommand1ToSend+0x5>
b:\Gbox420\Gbox420\Gbox420_Mega_Main\build\sketch\src\Modules_Web/AeroModule_Web.cpp:351
        if (AeroResponse1Received.ConfirmSprayOff)
    9362:	80 91 d4 13 	lds	r24, 0x13D4	; 0x8013d4 <AeroResponse1Received+0x5>
    9366:	88 23       	and	r24, r24
    9368:	09 f4       	brne	.+2      	; 0x936c <AeroModule_Web::sendCommand(void*)+0x2f0>
    936a:	67 cf       	rjmp	.-306    	; 0x923a <AeroModule_Web::sendCommand(void*)+0x1be>
b:\Gbox420\Gbox420\Gbox420_Mega_Main\build\sketch\src\Modules_Web/AeroModule_Web.cpp:352
          AeroCommand1ToSend.SprayOff = false;
    936c:	10 92 ed 13 	sts	0x13ED, r1	; 0x8013ed <AeroCommand1ToSend+0x6>
    9370:	64 cf       	rjmp	.-312    	; 0x923a <AeroModule_Web::sendCommand(void*)+0x1be>
b:\Gbox420\Gbox420\Gbox420_Mega_Main\build\sketch\src\Modules_Web/AeroModule_Web.cpp:355
        break;
      case AeroMessages::AeroResponse2:
        memcpy(&AeroResponse2Received, ReceivedResponse, sizeof(struct AeroResponse_P2));
    9372:	ec 81       	ldd	r30, Y+4	; 0x04
    9374:	fd 81       	ldd	r31, Y+5	; 0x05
    9376:	89 e0       	ldi	r24, 0x09	; 9
    9378:	a8 eb       	ldi	r26, 0xB8	; 184
    937a:	b3 e1       	ldi	r27, 0x13	; 19
    937c:	01 90       	ld	r0, Z+
    937e:	0d 92       	st	X+, r0
    9380:	8a 95       	dec	r24
    9382:	e1 f7       	brne	.-8      	; 0x937c <AeroModule_Web::sendCommand(void*)+0x300>
b:\Gbox420\Gbox420\Gbox420_Mega_Main\build\sketch\src\Modules_Web/AeroModule_Web.cpp:356
        if (*(Parent->SerialReportWireless))
    9384:	ea 85       	ldd	r30, Y+10	; 0x0a
    9386:	fb 85       	ldd	r31, Y+11	; 0x0b
    9388:	a0 81       	ld	r26, Z
    938a:	b1 81       	ldd	r27, Z+1	; 0x01
    938c:	52 97       	sbiw	r26, 0x12	; 18
    938e:	8d 91       	ld	r24, X+
    9390:	9c 91       	ld	r25, X
    9392:	e8 0f       	add	r30, r24
    9394:	f9 1f       	adc	r31, r25
    9396:	00 88       	ldd	r0, Z+16	; 0x10
    9398:	f1 89       	ldd	r31, Z+17	; 0x11
    939a:	e0 2d       	mov	r30, r0
    939c:	80 81       	ld	r24, Z
    939e:	88 23       	and	r24, r24
    93a0:	51 f1       	breq	.+84     	; 0x93f6 <AeroModule_Web::sendCommand(void*)+0x37a>
b:\Gbox420\Gbox420\Gbox420_Mega_Main\build\sketch\src\Modules_Web/AeroModule_Web.cpp:358
        {
          logToSerials(AeroResponse2Received.ConfirmPumpOn, false, 1);
    93a2:	41 e0       	ldi	r20, 0x01	; 1
    93a4:	60 e0       	ldi	r22, 0x00	; 0
    93a6:	8a eb       	ldi	r24, 0xBA	; 186
    93a8:	93 e1       	ldi	r25, 0x13	; 19
    93aa:	0e 94 5a 47 	call	0x8eb4	; 0x8eb4 <void logToSerials<bool>(bool&, bool, unsigned char)>
b:\Gbox420\Gbox420\Gbox420_Mega_Main\build\sketch\src\Modules_Web/AeroModule_Web.cpp:359
          logToSerials(AeroResponse2Received.ConfirmPumpOff, false, 1);
    93ae:	41 e0       	ldi	r20, 0x01	; 1
    93b0:	60 e0       	ldi	r22, 0x00	; 0
    93b2:	8b eb       	ldi	r24, 0xBB	; 187
    93b4:	93 e1       	ldi	r25, 0x13	; 19
    93b6:	0e 94 5a 47 	call	0x8eb4	; 0x8eb4 <void logToSerials<bool>(bool&, bool, unsigned char)>
b:\Gbox420\Gbox420\Gbox420_Mega_Main\build\sketch\src\Modules_Web/AeroModule_Web.cpp:360
          logToSerials(AeroResponse2Received.ConfirmPumpDisable, false, 1);
    93ba:	41 e0       	ldi	r20, 0x01	; 1
    93bc:	60 e0       	ldi	r22, 0x00	; 0
    93be:	8c eb       	ldi	r24, 0xBC	; 188
    93c0:	93 e1       	ldi	r25, 0x13	; 19
    93c2:	0e 94 5a 47 	call	0x8eb4	; 0x8eb4 <void logToSerials<bool>(bool&, bool, unsigned char)>
b:\Gbox420\Gbox420\Gbox420_Mega_Main\build\sketch\src\Modules_Web/AeroModule_Web.cpp:361
          logToSerials(AeroResponse2Received.ConfirmMixReservoir, false, 1);
    93c6:	41 e0       	ldi	r20, 0x01	; 1
    93c8:	60 e0       	ldi	r22, 0x00	; 0
    93ca:	8d eb       	ldi	r24, 0xBD	; 189
    93cc:	93 e1       	ldi	r25, 0x13	; 19
    93ce:	0e 94 5a 47 	call	0x8eb4	; 0x8eb4 <void logToSerials<bool>(bool&, bool, unsigned char)>
b:\Gbox420\Gbox420\Gbox420_Mega_Main\build\sketch\src\Modules_Web/AeroModule_Web.cpp:362
          logToSerials(AeroResponse2Received.ConfirmRefillPressureTank, false, 1);
    93d2:	41 e0       	ldi	r20, 0x01	; 1
    93d4:	60 e0       	ldi	r22, 0x00	; 0
    93d6:	8e eb       	ldi	r24, 0xBE	; 190
    93d8:	93 e1       	ldi	r25, 0x13	; 19
    93da:	0e 94 5a 47 	call	0x8eb4	; 0x8eb4 <void logToSerials<bool>(bool&, bool, unsigned char)>
b:\Gbox420\Gbox420\Gbox420_Mega_Main\build\sketch\src\Modules_Web/AeroModule_Web.cpp:363
          logToSerials(AeroResponse2Received.ConfirmDrainPressureTank, false, 1);
    93de:	41 e0       	ldi	r20, 0x01	; 1
    93e0:	60 e0       	ldi	r22, 0x00	; 0
    93e2:	8f eb       	ldi	r24, 0xBF	; 191
    93e4:	93 e1       	ldi	r25, 0x13	; 19
    93e6:	0e 94 5a 47 	call	0x8eb4	; 0x8eb4 <void logToSerials<bool>(bool&, bool, unsigned char)>
b:\Gbox420\Gbox420\Gbox420_Mega_Main\build\sketch\src\Modules_Web/AeroModule_Web.cpp:364
          logToSerials(AeroResponse2Received.ConfirmTareWeight, true, 1);
    93ea:	41 e0       	ldi	r20, 0x01	; 1
    93ec:	61 e0       	ldi	r22, 0x01	; 1
    93ee:	80 ec       	ldi	r24, 0xC0	; 192
    93f0:	93 e1       	ldi	r25, 0x13	; 19
    93f2:	0e 94 5a 47 	call	0x8eb4	; 0x8eb4 <void logToSerials<bool>(bool&, bool, unsigned char)>
b:\Gbox420\Gbox420\Gbox420_Mega_Main\build\sketch\src\Modules_Web/AeroModule_Web.cpp:366
        }
        if (AeroCommand2ToSend.PumpOn || AeroCommand2ToSend.PumpOff || AeroCommand2ToSend.PumpDisable || AeroCommand2ToSend.MixReservoir || AeroCommand2ToSend.RefillPressureTank || AeroCommand2ToSend.DrainPressureTank || AeroCommand2ToSend.TareWeight)
    93f6:	80 91 c3 13 	lds	r24, 0x13C3	; 0x8013c3 <AeroCommand2ToSend+0x2>
    93fa:	81 11       	cpse	r24, r1
    93fc:	18 c0       	rjmp	.+48     	; 0x942e <AeroModule_Web::sendCommand(void*)+0x3b2>
b:\Gbox420\Gbox420\Gbox420_Mega_Main\build\sketch\src\Modules_Web/AeroModule_Web.cpp:366 (discriminator 1)
    93fe:	80 91 c4 13 	lds	r24, 0x13C4	; 0x8013c4 <AeroCommand2ToSend+0x3>
    9402:	81 11       	cpse	r24, r1
    9404:	14 c0       	rjmp	.+40     	; 0x942e <AeroModule_Web::sendCommand(void*)+0x3b2>
b:\Gbox420\Gbox420\Gbox420_Mega_Main\build\sketch\src\Modules_Web/AeroModule_Web.cpp:366 (discriminator 2)
    9406:	80 91 c5 13 	lds	r24, 0x13C5	; 0x8013c5 <AeroCommand2ToSend+0x4>
    940a:	81 11       	cpse	r24, r1
    940c:	10 c0       	rjmp	.+32     	; 0x942e <AeroModule_Web::sendCommand(void*)+0x3b2>
b:\Gbox420\Gbox420\Gbox420_Mega_Main\build\sketch\src\Modules_Web/AeroModule_Web.cpp:366 (discriminator 3)
    940e:	80 91 c6 13 	lds	r24, 0x13C6	; 0x8013c6 <AeroCommand2ToSend+0x5>
    9412:	81 11       	cpse	r24, r1
    9414:	0c c0       	rjmp	.+24     	; 0x942e <AeroModule_Web::sendCommand(void*)+0x3b2>
b:\Gbox420\Gbox420\Gbox420_Mega_Main\build\sketch\src\Modules_Web/AeroModule_Web.cpp:366 (discriminator 4)
    9416:	80 91 c7 13 	lds	r24, 0x13C7	; 0x8013c7 <AeroCommand2ToSend+0x6>
    941a:	81 11       	cpse	r24, r1
    941c:	08 c0       	rjmp	.+16     	; 0x942e <AeroModule_Web::sendCommand(void*)+0x3b2>
b:\Gbox420\Gbox420\Gbox420_Mega_Main\build\sketch\src\Modules_Web/AeroModule_Web.cpp:366 (discriminator 5)
    941e:	80 91 c8 13 	lds	r24, 0x13C8	; 0x8013c8 <AeroCommand2ToSend+0x7>
    9422:	81 11       	cpse	r24, r1
    9424:	04 c0       	rjmp	.+8      	; 0x942e <AeroModule_Web::sendCommand(void*)+0x3b2>
b:\Gbox420\Gbox420\Gbox420_Mega_Main\build\sketch\src\Modules_Web/AeroModule_Web.cpp:366 (discriminator 6)
    9426:	80 91 c9 13 	lds	r24, 0x13C9	; 0x8013c9 <AeroCommand2ToSend+0x8>
    942a:	88 23       	and	r24, r24
    942c:	11 f0       	breq	.+4      	; 0x9432 <AeroModule_Web::sendCommand(void*)+0x3b6>
b:\Gbox420\Gbox420\Gbox420_Mega_Main\build\sketch\src\Modules_Web/AeroModule_Web.cpp:368
        {
          SyncRequested = true; ///< Force another message exchange when a command is active
    942e:	81 e0       	ldi	r24, 0x01	; 1
    9430:	8a 83       	std	Y+2, r24	; 0x02
b:\Gbox420\Gbox420\Gbox420_Mega_Main\build\sketch\src\Modules_Web/AeroModule_Web.cpp:370
        }
        if (AeroResponse2Received.ConfirmPumpOn)
    9432:	80 91 ba 13 	lds	r24, 0x13BA	; 0x8013ba <AeroResponse2Received+0x2>
    9436:	81 11       	cpse	r24, r1
b:\Gbox420\Gbox420\Gbox420_Mega_Main\build\sketch\src\Modules_Web/AeroModule_Web.cpp:371
          AeroCommand2ToSend.PumpOn = false; //Turn off the Flag once the Receiver confirms processing it
    9438:	10 92 c3 13 	sts	0x13C3, r1	; 0x8013c3 <AeroCommand2ToSend+0x2>
b:\Gbox420\Gbox420\Gbox420_Mega_Main\build\sketch\src\Modules_Web/AeroModule_Web.cpp:372
        if (AeroResponse2Received.ConfirmPumpOff)
    943c:	80 91 bb 13 	lds	r24, 0x13BB	; 0x8013bb <AeroResponse2Received+0x3>
    9440:	81 11       	cpse	r24, r1
b:\Gbox420\Gbox420\Gbox420_Mega_Main\build\sketch\src\Modules_Web/AeroModule_Web.cpp:373
          AeroCommand2ToSend.PumpOff = false;
    9442:	10 92 c4 13 	sts	0x13C4, r1	; 0x8013c4 <AeroCommand2ToSend+0x3>
b:\Gbox420\Gbox420\Gbox420_Mega_Main\build\sketch\src\Modules_Web/AeroModule_Web.cpp:374
        if (AeroResponse2Received.ConfirmPumpDisable)
    9446:	80 91 bc 13 	lds	r24, 0x13BC	; 0x8013bc <AeroResponse2Received+0x4>
    944a:	81 11       	cpse	r24, r1
b:\Gbox420\Gbox420\Gbox420_Mega_Main\build\sketch\src\Modules_Web/AeroModule_Web.cpp:375
          AeroCommand2ToSend.PumpDisable = false;
    944c:	10 92 c5 13 	sts	0x13C5, r1	; 0x8013c5 <AeroCommand2ToSend+0x4>
b:\Gbox420\Gbox420\Gbox420_Mega_Main\build\sketch\src\Modules_Web/AeroModule_Web.cpp:376
        if (AeroResponse2Received.ConfirmMixReservoir)
    9450:	80 91 bd 13 	lds	r24, 0x13BD	; 0x8013bd <AeroResponse2Received+0x5>
    9454:	81 11       	cpse	r24, r1
b:\Gbox420\Gbox420\Gbox420_Mega_Main\build\sketch\src\Modules_Web/AeroModule_Web.cpp:377
          AeroCommand2ToSend.MixReservoir = false;
    9456:	10 92 c6 13 	sts	0x13C6, r1	; 0x8013c6 <AeroCommand2ToSend+0x5>
b:\Gbox420\Gbox420\Gbox420_Mega_Main\build\sketch\src\Modules_Web/AeroModule_Web.cpp:378
        if (AeroResponse2Received.ConfirmRefillPressureTank)
    945a:	80 91 be 13 	lds	r24, 0x13BE	; 0x8013be <AeroResponse2Received+0x6>
    945e:	81 11       	cpse	r24, r1
b:\Gbox420\Gbox420\Gbox420_Mega_Main\build\sketch\src\Modules_Web/AeroModule_Web.cpp:379
          AeroCommand2ToSend.RefillPressureTank = false;
    9460:	10 92 c7 13 	sts	0x13C7, r1	; 0x8013c7 <AeroCommand2ToSend+0x6>
b:\Gbox420\Gbox420\Gbox420_Mega_Main\build\sketch\src\Modules_Web/AeroModule_Web.cpp:380
        if (AeroResponse2Received.ConfirmDrainPressureTank)
    9464:	80 91 bf 13 	lds	r24, 0x13BF	; 0x8013bf <AeroResponse2Received+0x7>
    9468:	81 11       	cpse	r24, r1
b:\Gbox420\Gbox420\Gbox420_Mega_Main\build\sketch\src\Modules_Web/AeroModule_Web.cpp:381
          AeroCommand2ToSend.DrainPressureTank = false;
    946a:	10 92 c8 13 	sts	0x13C8, r1	; 0x8013c8 <AeroCommand2ToSend+0x7>
b:\Gbox420\Gbox420\Gbox420_Mega_Main\build\sketch\src\Modules_Web/AeroModule_Web.cpp:382
        if (AeroResponse2Received.ConfirmTareWeight)
    946e:	80 91 c0 13 	lds	r24, 0x13C0	; 0x8013c0 <AeroResponse2Received+0x8>
    9472:	88 23       	and	r24, r24
    9474:	09 f4       	brne	.+2      	; 0x9478 <AeroModule_Web::sendCommand(void*)+0x3fc>
    9476:	e1 ce       	rjmp	.-574    	; 0x923a <AeroModule_Web::sendCommand(void*)+0x1be>
b:\Gbox420\Gbox420\Gbox420_Mega_Main\build\sketch\src\Modules_Web/AeroModule_Web.cpp:383
          AeroCommand2ToSend.TareWeight = false;
    9478:	10 92 c9 13 	sts	0x13C9, r1	; 0x8013c9 <AeroCommand2ToSend+0x8>
    947c:	de ce       	rjmp	.-580    	; 0x923a <AeroModule_Web::sendCommand(void*)+0x1be>
b:\Gbox420\Gbox420\Gbox420_Mega_Main\build\sketch\src\Modules_Web/AeroModule_Web.cpp:399
      }
      LastResponseReceived = millis();
    }
    else
    {
      if (*(Parent->SerialReportWireless))
    947e:	a0 81       	ld	r26, Z
    9480:	b1 81       	ldd	r27, Z+1	; 0x01
    9482:	52 97       	sbiw	r26, 0x12	; 18
    9484:	8d 91       	ld	r24, X+
    9486:	9c 91       	ld	r25, X
    9488:	e8 0f       	add	r30, r24
    948a:	f9 1f       	adc	r31, r25
    948c:	00 88       	ldd	r0, Z+16	; 0x10
    948e:	f1 89       	ldd	r31, Z+17	; 0x11
    9490:	e0 2d       	mov	r30, r0
    9492:	80 81       	ld	r24, Z
    9494:	88 23       	and	r24, r24
    9496:	09 f4       	brne	.+2      	; 0x949a <AeroModule_Web::sendCommand(void*)+0x41e>
    9498:	d6 ce       	rjmp	.-596    	; 0x9246 <AeroModule_Web::sendCommand(void*)+0x1ca>
b:\Gbox420\Gbox420\Gbox420_Mega_Main\build\sketch\src\Modules_Web/AeroModule_Web.cpp:400
        logToSerials(F("; Ack received without data"), true, 1);
    949a:	41 e0       	ldi	r20, 0x01	; 1
    949c:	61 e0       	ldi	r22, 0x01	; 1
    949e:	82 e9       	ldi	r24, 0x92	; 146
    94a0:	91 e1       	ldi	r25, 0x11	; 17
    94a2:	0e 94 85 16 	call	0x2d0a	; 0x2d0a <logToSerials(__FlashStringHelper const*, bool, unsigned char)>
    94a6:	cf ce       	rjmp	.-610    	; 0x9246 <AeroModule_Web::sendCommand(void*)+0x1ca>
b:\Gbox420\Gbox420\Gbox420_Mega_Main\build\sketch\src\Modules_Web/AeroModule_Web.cpp:405
    }
  }
  else
  {
    if (*(Parent->SerialReportWireless))
    94a8:	ea 85       	ldd	r30, Y+10	; 0x0a
    94aa:	fb 85       	ldd	r31, Y+11	; 0x0b
    94ac:	a0 81       	ld	r26, Z
    94ae:	b1 81       	ldd	r27, Z+1	; 0x01
    94b0:	52 97       	sbiw	r26, 0x12	; 18
    94b2:	8d 91       	ld	r24, X+
    94b4:	9c 91       	ld	r25, X
    94b6:	e8 0f       	add	r30, r24
    94b8:	f9 1f       	adc	r31, r25
    94ba:	00 88       	ldd	r0, Z+16	; 0x10
    94bc:	f1 89       	ldd	r31, Z+17	; 0x11
    94be:	e0 2d       	mov	r30, r0
    94c0:	80 81       	ld	r24, Z
    94c2:	88 23       	and	r24, r24
    94c4:	31 f0       	breq	.+12     	; 0x94d2 <AeroModule_Web::sendCommand(void*)+0x456>
b:\Gbox420\Gbox420\Gbox420_Mega_Main\build\sketch\src\Modules_Web/AeroModule_Web.cpp:406
      logToSerials(F("; No response"), true, 1);
    94c6:	41 e0       	ldi	r20, 0x01	; 1
    94c8:	61 e0       	ldi	r22, 0x01	; 1
    94ca:	84 e8       	ldi	r24, 0x84	; 132
    94cc:	91 e1       	ldi	r25, 0x11	; 17
    94ce:	0e 94 85 16 	call	0x2d0a	; 0x2d0a <logToSerials(__FlashStringHelper const*, bool, unsigned char)>
b:\Gbox420\Gbox420\Gbox420_Mega_Main\build\sketch\src\Modules_Web/AeroModule_Web.cpp:407
    if (millis() - LastResponseReceived > WirelessReceiveTimeout)
    94d2:	0e 94 67 85 	call	0x10ace	; 0x10ace <millis>
    94d6:	ce 80       	ldd	r12, Y+6	; 0x06
    94d8:	df 80       	ldd	r13, Y+7	; 0x07
    94da:	e8 84       	ldd	r14, Y+8	; 0x08
    94dc:	f9 84       	ldd	r15, Y+9	; 0x09
    94de:	6c 19       	sub	r22, r12
    94e0:	7d 09       	sbc	r23, r13
    94e2:	8e 09       	sbc	r24, r14
    94e4:	9f 09       	sbc	r25, r15
    94e6:	69 3e       	cpi	r22, 0xE9	; 233
    94e8:	7d 4f       	sbci	r23, 0xFD	; 253
    94ea:	81 05       	cpc	r24, r1
    94ec:	91 05       	cpc	r25, r1
    94ee:	08 f4       	brcc	.+2      	; 0x94f2 <AeroModule_Web::sendCommand(void*)+0x476>
    94f0:	aa ce       	rjmp	.-684    	; 0x9246 <AeroModule_Web::sendCommand(void*)+0x1ca>
b:\Gbox420\Gbox420\Gbox420_Mega_Main\build\sketch\src\Modules_Web/AeroModule_Web.cpp:409
    {
      OnlineStatus = false;
    94f2:	1b 82       	std	Y+3, r1	; 0x03
b:\Gbox420\Gbox420\Gbox420_Mega_Main\build\sketch\src\Modules_Web/AeroModule_Web.cpp:412
    }
  }
  return ReceivedSequenceID;
    94f4:	a8 ce       	rjmp	.-688    	; 0x9246 <AeroModule_Web::sendCommand(void*)+0x1ca>

000094f6 <AeroModule_Web::sendMessages()>:
_ZN14AeroModule_Web12sendMessagesEv():
b:\Gbox420\Gbox420\Gbox420_Mega_Main\build\sketch\src\Modules_Web/AeroModule_Web.cpp:275

/**
* @brief Exchange messages with the wireless Aeroponics module
*/
void AeroModule_Web::sendMessages()
{
    94f6:	cf 93       	push	r28
    94f8:	df 93       	push	r29
    94fa:	ec 01       	movw	r28, r24
b:\Gbox420\Gbox420\Gbox420_Mega_Main\build\sketch\src\Modules_Web/AeroModule_Web.cpp:276
  updateCommands();
    94fc:	0e 94 8e 45 	call	0x8b1c	; 0x8b1c <AeroModule_Web::updateCommands()>
b:\Gbox420\Gbox420\Gbox420_Mega_Main\build\sketch\src\Modules_Web/AeroModule_Web.cpp:277
  sendCommand(&AeroResetToSend);          ///< special Command, resets communication to first message
    9500:	66 eb       	ldi	r22, 0xB6	; 182
    9502:	73 e1       	ldi	r23, 0x13	; 19
    9504:	ce 01       	movw	r24, r28
    9506:	0e 94 3e 48 	call	0x907c	; 0x907c <AeroModule_Web::sendCommand(void*)>
b:\Gbox420\Gbox420\Gbox420_Mega_Main\build\sketch\src\Modules_Web/AeroModule_Web.cpp:278
  sendCommand(&AeroModuleCommand1ToSend); ///< Command - Response exchange
    950a:	61 e0       	ldi	r22, 0x01	; 1
    950c:	74 e1       	ldi	r23, 0x14	; 20
    950e:	ce 01       	movw	r24, r28
    9510:	0e 94 3e 48 	call	0x907c	; 0x907c <AeroModule_Web::sendCommand(void*)>
b:\Gbox420\Gbox420\Gbox420_Mega_Main\build\sketch\src\Modules_Web/AeroModule_Web.cpp:279
  sendCommand(&AeroCommand1ToSend);
    9514:	67 ee       	ldi	r22, 0xE7	; 231
    9516:	73 e1       	ldi	r23, 0x13	; 19
    9518:	ce 01       	movw	r24, r28
    951a:	0e 94 3e 48 	call	0x907c	; 0x907c <AeroModule_Web::sendCommand(void*)>
b:\Gbox420\Gbox420\Gbox420_Mega_Main\build\sketch\src\Modules_Web/AeroModule_Web.cpp:280
  sendCommand(&AeroCommand2ToSend); ///< Command - Response exchange
    951e:	61 ec       	ldi	r22, 0xC1	; 193
    9520:	73 e1       	ldi	r23, 0x13	; 19
    9522:	ce 01       	movw	r24, r28
    9524:	0e 94 3e 48 	call	0x907c	; 0x907c <AeroModule_Web::sendCommand(void*)>
b:\Gbox420\Gbox420\Gbox420_Mega_Main\build\sketch\src\Modules_Web/AeroModule_Web.cpp:281
  if (*(Parent->SerialReportWireless) && *Debug)
    9528:	ea 85       	ldd	r30, Y+10	; 0x0a
    952a:	fb 85       	ldd	r31, Y+11	; 0x0b
    952c:	a0 81       	ld	r26, Z
    952e:	b1 81       	ldd	r27, Z+1	; 0x01
    9530:	52 97       	sbiw	r26, 0x12	; 18
    9532:	8d 91       	ld	r24, X+
    9534:	9c 91       	ld	r25, X
    9536:	e8 0f       	add	r30, r24
    9538:	f9 1f       	adc	r31, r25
    953a:	00 88       	ldd	r0, Z+16	; 0x10
    953c:	f1 89       	ldd	r31, Z+17	; 0x11
    953e:	e0 2d       	mov	r30, r0
    9540:	80 81       	ld	r24, Z
    9542:	88 23       	and	r24, r24
    9544:	79 f0       	breq	.+30     	; 0x9564 <AeroModule_Web::sendMessages()+0x6e>
b:\Gbox420\Gbox420\Gbox420_Mega_Main\build\sketch\src\Modules_Web/AeroModule_Web.cpp:281 (discriminator 1)
    9546:	e0 91 b7 0c 	lds	r30, 0x0CB7	; 0x800cb7 <Debug>
    954a:	f0 91 b8 0c 	lds	r31, 0x0CB8	; 0x800cb8 <Debug+0x1>
    954e:	80 81       	ld	r24, Z
    9550:	88 23       	and	r24, r24
    9552:	41 f0       	breq	.+16     	; 0x9564 <AeroModule_Web::sendMessages()+0x6e>
b:\Gbox420\Gbox420\Gbox420_Mega_Main\build\sketch\src\Modules_Web/AeroModule_Web.cpp:283
  {
    logToSerials(F("Message exchange finished"), true, 1);
    9554:	41 e0       	ldi	r20, 0x01	; 1
    9556:	61 e0       	ldi	r22, 0x01	; 1
    9558:	80 ee       	ldi	r24, 0xE0	; 224
    955a:	91 e1       	ldi	r25, 0x11	; 17
b:\Gbox420\Gbox420\Gbox420_Mega_Main\build\sketch\src\Modules_Web/AeroModule_Web.cpp:285
  }
}
    955c:	df 91       	pop	r29
    955e:	cf 91       	pop	r28
b:\Gbox420\Gbox420\Gbox420_Mega_Main\build\sketch\src\Modules_Web/AeroModule_Web.cpp:283
  sendCommand(&AeroModuleCommand1ToSend); ///< Command - Response exchange
  sendCommand(&AeroCommand1ToSend);
  sendCommand(&AeroCommand2ToSend); ///< Command - Response exchange
  if (*(Parent->SerialReportWireless) && *Debug)
  {
    logToSerials(F("Message exchange finished"), true, 1);
    9560:	0c 94 85 16 	jmp	0x2d0a	; 0x2d0a <logToSerials(__FlashStringHelper const*, bool, unsigned char)>
b:\Gbox420\Gbox420\Gbox420_Mega_Main\build\sketch\src\Modules_Web/AeroModule_Web.cpp:285
  }
}
    9564:	df 91       	pop	r29
    9566:	cf 91       	pop	r28
    9568:	08 95       	ret

0000956a <AeroModule_Web::refresh_Sec()>:
_ZN14AeroModule_Web11refresh_SecEv():
b:\Gbox420\Gbox420\Gbox420_Mega_Main\build\sketch\src\Modules_Web/AeroModule_Web.cpp:245

/**
* @brief Refresh state, Called every second
*/
void AeroModule_Web::refresh_Sec()
{
    956a:	cf 93       	push	r28
    956c:	df 93       	push	r29
    956e:	ec 01       	movw	r28, r24
b:\Gbox420\Gbox420\Gbox420_Mega_Main\build\sketch\src\Modules_Web/AeroModule_Web.cpp:246
  Common::refresh_Sec();
    9570:	e8 81       	ld	r30, Y
    9572:	f9 81       	ldd	r31, Y+1	; 0x01
    9574:	36 97       	sbiw	r30, 0x06	; 6
    9576:	80 81       	ld	r24, Z
    9578:	91 81       	ldd	r25, Z+1	; 0x01
    957a:	8c 0f       	add	r24, r28
    957c:	9d 1f       	adc	r25, r29
    957e:	0e 94 b8 18 	call	0x3170	; 0x3170 <Common::refresh_Sec()>
b:\Gbox420\Gbox420\Gbox420_Mega_Main\build\sketch\src\Modules_Web/AeroModule_Web.cpp:247
  if (SyncRequested)
    9582:	8a 81       	ldd	r24, Y+2	; 0x02
    9584:	88 23       	and	r24, r24
    9586:	31 f0       	breq	.+12     	; 0x9594 <AeroModule_Web::refresh_Sec()+0x2a>
b:\Gbox420\Gbox420\Gbox420_Mega_Main\build\sketch\src\Modules_Web/AeroModule_Web.cpp:249
  {
    SyncRequested = false;
    9588:	1a 82       	std	Y+2, r1	; 0x02
b:\Gbox420\Gbox420\Gbox420_Mega_Main\build\sketch\src\Modules_Web/AeroModule_Web.cpp:250
    sendMessages();
    958a:	ce 01       	movw	r24, r28
b:\Gbox420\Gbox420\Gbox420_Mega_Main\build\sketch\src\Modules_Web/AeroModule_Web.cpp:252
  }
}
    958c:	df 91       	pop	r29
    958e:	cf 91       	pop	r28
b:\Gbox420\Gbox420\Gbox420_Mega_Main\build\sketch\src\Modules_Web/AeroModule_Web.cpp:250
{
  Common::refresh_Sec();
  if (SyncRequested)
  {
    SyncRequested = false;
    sendMessages();
    9590:	0c 94 7b 4a 	jmp	0x94f6	; 0x94f6 <AeroModule_Web::sendMessages()>
b:\Gbox420\Gbox420\Gbox420_Mega_Main\build\sketch\src\Modules_Web/AeroModule_Web.cpp:252
  }
}
    9594:	df 91       	pop	r29
    9596:	cf 91       	pop	r28
    9598:	08 95       	ret

0000959a <virtual thunk to AeroModule_Web::refresh_Sec()>:
_ZTv0_n8_N14AeroModule_Web11refresh_SecEv():
    959a:	dc 01       	movw	r26, r24
    959c:	ed 91       	ld	r30, X+
    959e:	fc 91       	ld	r31, X
    95a0:	38 97       	sbiw	r30, 0x08	; 8
    95a2:	20 81       	ld	r18, Z
    95a4:	31 81       	ldd	r19, Z+1	; 0x01
    95a6:	82 0f       	add	r24, r18
    95a8:	93 1f       	adc	r25, r19
    95aa:	0c 94 b5 4a 	jmp	0x956a	; 0x956a <AeroModule_Web::refresh_Sec()>

000095ae <AeroModule_Web::refresh_FiveSec()>:
_ZN14AeroModule_Web15refresh_FiveSecEv():
b:\Gbox420\Gbox420\Gbox420_Mega_Main\build\sketch\src\Modules_Web/AeroModule_Web.cpp:258

/**
* @brief Refresh state, Called every five seconds
*/
void AeroModule_Web::refresh_FiveSec()
{
    95ae:	cf 93       	push	r28
    95b0:	df 93       	push	r29
    95b2:	ec 01       	movw	r28, r24
b:\Gbox420\Gbox420\Gbox420_Mega_Main\build\sketch\src\Modules_Web/AeroModule_Web.cpp:259
  Common::refresh_FiveSec();
    95b4:	e8 81       	ld	r30, Y
    95b6:	f9 81       	ldd	r31, Y+1	; 0x01
    95b8:	36 97       	sbiw	r30, 0x06	; 6
    95ba:	80 81       	ld	r24, Z
    95bc:	91 81       	ldd	r25, Z+1	; 0x01
    95be:	8c 0f       	add	r24, r28
    95c0:	9d 1f       	adc	r25, r29
    95c2:	0e 94 cd 18 	call	0x319a	; 0x319a <Common::refresh_FiveSec()>
b:\Gbox420\Gbox420\Gbox420_Mega_Main\build\sketch\src\Modules_Web/AeroModule_Web.cpp:260
  sendMessages();
    95c6:	ce 01       	movw	r24, r28
b:\Gbox420\Gbox420\Gbox420_Mega_Main\build\sketch\src\Modules_Web/AeroModule_Web.cpp:261
}
    95c8:	df 91       	pop	r29
    95ca:	cf 91       	pop	r28
b:\Gbox420\Gbox420\Gbox420_Mega_Main\build\sketch\src\Modules_Web/AeroModule_Web.cpp:260
* @brief Refresh state, Called every five seconds
*/
void AeroModule_Web::refresh_FiveSec()
{
  Common::refresh_FiveSec();
  sendMessages();
    95cc:	0c 94 7b 4a 	jmp	0x94f6	; 0x94f6 <AeroModule_Web::sendMessages()>

000095d0 <virtual thunk to AeroModule_Web::refresh_FiveSec()>:
_ZTv0_n10_N14AeroModule_Web15refresh_FiveSecEv():
    95d0:	dc 01       	movw	r26, r24
    95d2:	ed 91       	ld	r30, X+
    95d4:	fc 91       	ld	r31, X
    95d6:	3a 97       	sbiw	r30, 0x0a	; 10
    95d8:	20 81       	ld	r18, Z
    95da:	31 81       	ldd	r19, Z+1	; 0x01
    95dc:	82 0f       	add	r24, r18
    95de:	93 1f       	adc	r25, r19
    95e0:	0c 94 d7 4a 	jmp	0x95ae	; 0x95ae <AeroModule_Web::refresh_FiveSec()>

000095e4 <_GLOBAL__sub_I_AeroModuleCommand1ToSend>:
_ZN18AeroCommonTemplateC4E12AeroMessages():
b:\gbox420\gbox420\gbox420_mega_main\build\sketch\src/wirelesscommands_aero.h:68

struct AeroCommonTemplate ///< Aeroponics wireless template - Shared between Command and Respone packages
{
   AeroCommonTemplate(AeroMessages SequenceID)
   {
      this->SequenceID = SequenceID;
    95e4:	e1 e0       	ldi	r30, 0x01	; 1
    95e6:	f4 e1       	ldi	r31, 0x14	; 20
    95e8:	11 82       	std	Z+1, r1	; 0x01
    95ea:	10 82       	st	Z, r1
_ZN17AeroModuleCommandC4E12AeroMessages():
b:\gbox420\gbox420\gbox420_mega_main\build\sketch\src/wirelesscommands_aero.h:75
   AeroMessages SequenceID; ///< Commands and Responses can span across multiple 32byte packages. Packages with 0 SequenceID represent the initial attempt to exchange data
};

struct AeroModuleCommand : AeroCommonTemplate ///< Aeroponics wireless module commands
{
   AeroModuleCommand(__attribute__((unused)) AeroMessages SequenceID) : AeroCommonTemplate(SequenceID) {}
    95ec:	12 82       	std	Z+2, r1	; 0x02
    95ee:	13 82       	std	Z+3, r1	; 0x03
    95f0:	14 82       	std	Z+4, r1	; 0x04
    95f2:	15 82       	std	Z+5, r1	; 0x05
    95f4:	81 e0       	ldi	r24, 0x01	; 1
    95f6:	86 83       	std	Z+6, r24	; 0x06
    95f8:	87 83       	std	Z+7, r24	; 0x07
    95fa:	11 86       	std	Z+9, r1	; 0x09
    95fc:	10 86       	std	Z+8, r1	; 0x08
    95fe:	82 87       	std	Z+10, r24	; 0x0a
    9600:	83 87       	std	Z+11, r24	; 0x0b
    9602:	84 87       	std	Z+12, r24	; 0x0c
    9604:	85 87       	std	Z+13, r24	; 0x0d
    9606:	86 87       	std	Z+14, r24	; 0x0e
_ZN18AeroCommonTemplateC4E12AeroMessages():
b:\gbox420\gbox420\gbox420_mega_main\build\sketch\src/wirelesscommands_aero.h:68

struct AeroCommonTemplate ///< Aeroponics wireless template - Shared between Command and Respone packages
{
   AeroCommonTemplate(AeroMessages SequenceID)
   {
      this->SequenceID = SequenceID;
    9608:	ee ef       	ldi	r30, 0xFE	; 254
    960a:	f3 e1       	ldi	r31, 0x13	; 19
    960c:	21 e0       	ldi	r18, 0x01	; 1
    960e:	30 e0       	ldi	r19, 0x00	; 0
    9610:	31 83       	std	Z+1, r19	; 0x01
    9612:	20 83       	st	Z, r18
_ZN18AeroModuleResponseC4E12AeroMessages():
b:\gbox420\gbox420\gbox420_mega_main\build\sketch\src/wirelesscommands_aero.h:90
   bool SerialReportWireless = true;
};

struct AeroModuleResponse : AeroCommonTemplate ///< Aeroponics wireless module response
{
   AeroModuleResponse(__attribute__((unused)) AeroMessages SequenceID) : AeroCommonTemplate(SequenceID) {}
    9614:	12 82       	std	Z+2, r1	; 0x02
_ZN18AeroCommonTemplateC4E12AeroMessages():
b:\gbox420\gbox420\gbox420_mega_main\build\sketch\src/wirelesscommands_aero.h:68

struct AeroCommonTemplate ///< Aeroponics wireless template - Shared between Command and Respone packages
{
   AeroCommonTemplate(AeroMessages SequenceID)
   {
      this->SequenceID = SequenceID;
    9616:	e7 ee       	ldi	r30, 0xE7	; 231
    9618:	f3 e1       	ldi	r31, 0x13	; 19
    961a:	22 e0       	ldi	r18, 0x02	; 2
    961c:	30 e0       	ldi	r19, 0x00	; 0
    961e:	31 83       	std	Z+1, r19	; 0x01
    9620:	20 83       	st	Z, r18
_ZN14AeroCommand_P1C4E12AeroMessages():
b:\gbox420\gbox420\gbox420_mega_main\build\sketch\src/wirelesscommands_aero.h:97
   bool Status = false;
};

struct AeroCommand_P1 : AeroCommonTemplate ///< Aeroponics wireless commands - Part1
{
   AeroCommand_P1(__attribute__((unused)) AeroMessages SequenceID) : AeroCommonTemplate(SequenceID) {}
    9622:	82 83       	std	Z+2, r24	; 0x02
    9624:	13 82       	std	Z+3, r1	; 0x03
    9626:	14 82       	std	Z+4, r1	; 0x04
    9628:	15 82       	std	Z+5, r1	; 0x05
    962a:	16 82       	std	Z+6, r1	; 0x06
    962c:	17 82       	std	Z+7, r1	; 0x07
    962e:	10 86       	std	Z+8, r1	; 0x08
    9630:	11 86       	std	Z+9, r1	; 0x09
    9632:	12 86       	std	Z+10, r1	; 0x0a
    9634:	14 86       	std	Z+12, r1	; 0x0c
    9636:	13 86       	std	Z+11, r1	; 0x0b
    9638:	16 86       	std	Z+14, r1	; 0x0e
    963a:	15 86       	std	Z+13, r1	; 0x0d
    963c:	17 86       	std	Z+15, r1	; 0x0f
    963e:	10 8a       	std	Z+16, r1	; 0x10
    9640:	11 8a       	std	Z+17, r1	; 0x11
    9642:	12 8a       	std	Z+18, r1	; 0x12
    9644:	13 8a       	std	Z+19, r1	; 0x13
    9646:	14 8a       	std	Z+20, r1	; 0x14
    9648:	15 8a       	std	Z+21, r1	; 0x15
    964a:	16 8a       	std	Z+22, r1	; 0x16
_ZN18AeroCommonTemplateC4E12AeroMessages():
b:\gbox420\gbox420\gbox420_mega_main\build\sketch\src/wirelesscommands_aero.h:68

struct AeroCommonTemplate ///< Aeroponics wireless template - Shared between Command and Respone packages
{
   AeroCommonTemplate(AeroMessages SequenceID)
   {
      this->SequenceID = SequenceID;
    964c:	ef ec       	ldi	r30, 0xCF	; 207
    964e:	f3 e1       	ldi	r31, 0x13	; 19
    9650:	83 e0       	ldi	r24, 0x03	; 3
    9652:	90 e0       	ldi	r25, 0x00	; 0
    9654:	91 83       	std	Z+1, r25	; 0x01
    9656:	80 83       	st	Z, r24
_ZN15AeroResponse_P1C4E12AeroMessages():
b:\gbox420\gbox420\gbox420_mega_main\build\sketch\src/wirelesscommands_aero.h:113
   float MaxPressure = 0.0;
};

struct AeroResponse_P1 : AeroCommonTemplate ///< Aeroponics wireless response - Part1
{
   AeroResponse_P1(__attribute__((unused)) AeroMessages SequenceID) : AeroCommonTemplate(SequenceID) {}
    9658:	12 82       	std	Z+2, r1	; 0x02
    965a:	13 82       	std	Z+3, r1	; 0x03
    965c:	14 82       	std	Z+4, r1	; 0x04
    965e:	15 82       	std	Z+5, r1	; 0x05
    9660:	17 82       	std	Z+7, r1	; 0x07
    9662:	16 82       	std	Z+6, r1	; 0x06
    9664:	10 86       	std	Z+8, r1	; 0x08
    9666:	11 86       	std	Z+9, r1	; 0x09
    9668:	12 86       	std	Z+10, r1	; 0x0a
    966a:	13 86       	std	Z+11, r1	; 0x0b
    966c:	14 86       	std	Z+12, r1	; 0x0c
    966e:	15 86       	std	Z+13, r1	; 0x0d
    9670:	17 86       	std	Z+15, r1	; 0x0f
    9672:	16 86       	std	Z+14, r1	; 0x0e
    9674:	10 8a       	std	Z+16, r1	; 0x10
    9676:	11 8a       	std	Z+17, r1	; 0x11
    9678:	12 8a       	std	Z+18, r1	; 0x12
    967a:	13 8a       	std	Z+19, r1	; 0x13
    967c:	14 8a       	std	Z+20, r1	; 0x14
    967e:	15 8a       	std	Z+21, r1	; 0x15
    9680:	16 8a       	std	Z+22, r1	; 0x16
    9682:	17 8a       	std	Z+23, r1	; 0x17
_ZN18AeroCommonTemplateC4E12AeroMessages():
b:\gbox420\gbox420\gbox420_mega_main\build\sketch\src/wirelesscommands_aero.h:68

struct AeroCommonTemplate ///< Aeroponics wireless template - Shared between Command and Respone packages
{
   AeroCommonTemplate(AeroMessages SequenceID)
   {
      this->SequenceID = SequenceID;
    9684:	e1 ec       	ldi	r30, 0xC1	; 193
    9686:	f3 e1       	ldi	r31, 0x13	; 19
    9688:	84 e0       	ldi	r24, 0x04	; 4
    968a:	90 e0       	ldi	r25, 0x00	; 0
    968c:	91 83       	std	Z+1, r25	; 0x01
    968e:	80 83       	st	Z, r24
_ZN14AeroCommand_P2C4E12AeroMessages():
b:\gbox420\gbox420\gbox420_mega_main\build\sketch\src/wirelesscommands_aero.h:130
   float Weight = 0.0;
};

struct AeroCommand_P2 : AeroCommonTemplate ///< Aeroponics wireless commands - Part2
{
   AeroCommand_P2(__attribute__((unused)) AeroMessages SequenceID) : AeroCommonTemplate(SequenceID) {}
    9690:	12 82       	std	Z+2, r1	; 0x02
    9692:	13 82       	std	Z+3, r1	; 0x03
    9694:	14 82       	std	Z+4, r1	; 0x04
    9696:	15 82       	std	Z+5, r1	; 0x05
    9698:	16 82       	std	Z+6, r1	; 0x06
    969a:	17 82       	std	Z+7, r1	; 0x07
    969c:	10 86       	std	Z+8, r1	; 0x08
    969e:	11 86       	std	Z+9, r1	; 0x09
    96a0:	13 86       	std	Z+11, r1	; 0x0b
    96a2:	12 86       	std	Z+10, r1	; 0x0a
    96a4:	15 86       	std	Z+13, r1	; 0x0d
    96a6:	14 86       	std	Z+12, r1	; 0x0c
_ZN18AeroCommonTemplateC4E12AeroMessages():
b:\gbox420\gbox420\gbox420_mega_main\build\sketch\src/wirelesscommands_aero.h:68

struct AeroCommonTemplate ///< Aeroponics wireless template - Shared between Command and Respone packages
{
   AeroCommonTemplate(AeroMessages SequenceID)
   {
      this->SequenceID = SequenceID;
    96a8:	e8 eb       	ldi	r30, 0xB8	; 184
    96aa:	f3 e1       	ldi	r31, 0x13	; 19
    96ac:	85 e0       	ldi	r24, 0x05	; 5
    96ae:	90 e0       	ldi	r25, 0x00	; 0
    96b0:	91 83       	std	Z+1, r25	; 0x01
    96b2:	80 83       	st	Z, r24
_ZN15AeroResponse_P2C4E12AeroMessages():
b:\gbox420\gbox420\gbox420_mega_main\build\sketch\src/wirelesscommands_aero.h:147
   uint16_t PumpTimeOut = 0;
};

struct AeroResponse_P2 : AeroCommonTemplate ///< Aeroponics wireless response - Part2
{
   AeroResponse_P2(__attribute__((unused)) AeroMessages SequenceID) : AeroCommonTemplate(SequenceID) {}
    96b4:	12 82       	std	Z+2, r1	; 0x02
    96b6:	13 82       	std	Z+3, r1	; 0x03
    96b8:	14 82       	std	Z+4, r1	; 0x04
    96ba:	15 82       	std	Z+5, r1	; 0x05
    96bc:	16 82       	std	Z+6, r1	; 0x06
    96be:	17 82       	std	Z+7, r1	; 0x07
    96c0:	10 86       	std	Z+8, r1	; 0x08
_ZN18AeroCommonTemplateC4E12AeroMessages():
b:\gbox420\gbox420\gbox420_mega_main\build\sketch\src/wirelesscommands_aero.h:68

struct AeroCommonTemplate ///< Aeroponics wireless template - Shared between Command and Respone packages
{
   AeroCommonTemplate(AeroMessages SequenceID)
   {
      this->SequenceID = SequenceID;
    96c2:	86 e0       	ldi	r24, 0x06	; 6
    96c4:	90 e0       	ldi	r25, 0x00	; 0
    96c6:	90 93 b7 13 	sts	0x13B7, r25	; 0x8013b7 <AeroResetToSend+0x1>
    96ca:	80 93 b6 13 	sts	0x13B6, r24	; 0x8013b6 <AeroResetToSend>
_GLOBAL__sub_I_AeroModuleCommand1ToSend():
b:\Gbox420\Gbox420\Gbox420_Mega_Main\build\sketch\src\Modules_Web/AeroModule_Web.cpp:438
  AeroCommand1ToSend.MinPressure = DefaultSettings->MinPressure;
  AeroCommand1ToSend.MaxPressure = DefaultSettings->MaxPressure;
  AeroCommand2ToSend.PumpSpeed = DefaultSettings->PumpSpeed;
  AeroCommand2ToSend.PumpTimeOut = DefaultSettings->PumpTimeOut;
  AeroCommand2ToSend.PumpPrimingTime = DefaultSettings->PrimingTime;
    96ce:	08 95       	ret

000096d0 <AeroModule_Web::report(bool)>:
_ZN14AeroModule_Web6reportEb():
b:\Gbox420\Gbox420\Gbox420_Mega_Main\build\sketch\src\Modules_Web/AeroModule_Web.cpp:34

/**
* @brief Report current state in a JSON format to the LongMessage buffer
*/
void AeroModule_Web::report(bool FriendlyFormat)
{
    96d0:	0f 93       	push	r16
    96d2:	1f 93       	push	r17
    96d4:	cf 93       	push	r28
    96d6:	8c 01       	movw	r16, r24
    96d8:	c6 2f       	mov	r28, r22
b:\Gbox420\Gbox420\Gbox420_Mega_Main\build\sketch\src\Modules_Web/AeroModule_Web.cpp:35
  Common::report(true); ///< Adds "NAME":{  to the LongMessage buffer. The curly bracket { needs to be closed at the end
    96da:	dc 01       	movw	r26, r24
    96dc:	ed 91       	ld	r30, X+
    96de:	fc 91       	ld	r31, X
    96e0:	36 97       	sbiw	r30, 0x06	; 6
    96e2:	80 81       	ld	r24, Z
    96e4:	91 81       	ldd	r25, Z+1	; 0x01
    96e6:	61 e0       	ldi	r22, 0x01	; 1
    96e8:	80 0f       	add	r24, r16
    96ea:	91 1f       	adc	r25, r17
    96ec:	0e 94 0e 19 	call	0x321c	; 0x321c <Common::report(bool)>
b:\Gbox420\Gbox420\Gbox420_Mega_Main\build\sketch\src\Modules_Web/AeroModule_Web.cpp:36
  strcat_P(LongMessage, (PGM_P)F("\"S\":\""));
    96f0:	68 e8       	ldi	r22, 0x88	; 136
    96f2:	74 e1       	ldi	r23, 0x14	; 20
    96f4:	81 e3       	ldi	r24, 0x31	; 49
    96f6:	9e e0       	ldi	r25, 0x0E	; 14
    96f8:	0e 94 da 94 	call	0x129b4	; 0x129b4 <strcat_P>
b:\Gbox420\Gbox420\Gbox420_Mega_Main\build\sketch\src\Modules_Web/AeroModule_Web.cpp:37
  strcat(LongMessage, FriendlyFormat ? toText_onlineStatus(OnlineStatus) : toText(OnlineStatus));
    96fc:	cc 23       	and	r28, r28
    96fe:	09 f4       	brne	.+2      	; 0x9702 <AeroModule_Web::report(bool)+0x32>
    9700:	4b c1       	rjmp	.+662    	; 0x9998 <AeroModule_Web::report(bool)+0x2c8>
b:\Gbox420\Gbox420\Gbox420_Mega_Main\build\sketch\src\Modules_Web/AeroModule_Web.cpp:37 (discriminator 1)
    9702:	f8 01       	movw	r30, r16
    9704:	83 81       	ldd	r24, Z+3	; 0x03
    9706:	0e 94 03 35 	call	0x6a06	; 0x6a06 <toText_onlineStatus(bool)>
b:\Gbox420\Gbox420\Gbox420_Mega_Main\build\sketch\src\Modules_Web/AeroModule_Web.cpp:37 (discriminator 4)
    970a:	bc 01       	movw	r22, r24
    970c:	81 e3       	ldi	r24, 0x31	; 49
    970e:	9e e0       	ldi	r25, 0x0E	; 14
    9710:	0e 94 23 95 	call	0x12a46	; 0x12a46 <strcat>
b:\Gbox420\Gbox420\Gbox420_Mega_Main\build\sketch\src\Modules_Web/AeroModule_Web.cpp:38 (discriminator 4)
  strcat_P(LongMessage, (PGM_P)F("\",\"P\":\""));
    9714:	60 e8       	ldi	r22, 0x80	; 128
    9716:	74 e1       	ldi	r23, 0x14	; 20
    9718:	81 e3       	ldi	r24, 0x31	; 49
    971a:	9e e0       	ldi	r25, 0x0E	; 14
    971c:	0e 94 da 94 	call	0x129b4	; 0x129b4 <strcat_P>
    9720:	60 91 d9 13 	lds	r22, 0x13D9	; 0x8013d9 <AeroResponse1Received+0xa>
    9724:	70 91 da 13 	lds	r23, 0x13DA	; 0x8013da <AeroResponse1Received+0xb>
    9728:	80 91 db 13 	lds	r24, 0x13DB	; 0x8013db <AeroResponse1Received+0xc>
    972c:	90 91 dc 13 	lds	r25, 0x13DC	; 0x8013dc <AeroResponse1Received+0xd>
b:\Gbox420\Gbox420\Gbox420_Mega_Main\build\sketch\src\Modules_Web/AeroModule_Web.cpp:39 (discriminator 4)
  strcat(LongMessage, FriendlyFormat ? toText_pressure(AeroResponse1Received.Pressure) : toText(AeroResponse1Received.Pressure));
    9730:	cc 23       	and	r28, r28
    9732:	09 f4       	brne	.+2      	; 0x9736 <AeroModule_Web::report(bool)+0x66>
    9734:	38 c1       	rjmp	.+624    	; 0x99a6 <AeroModule_Web::report(bool)+0x2d6>
b:\Gbox420\Gbox420\Gbox420_Mega_Main\build\sketch\src\Modules_Web/AeroModule_Web.cpp:39 (discriminator 1)
    9736:	0e 94 70 34 	call	0x68e0	; 0x68e0 <toText_pressure(float)>
b:\Gbox420\Gbox420\Gbox420_Mega_Main\build\sketch\src\Modules_Web/AeroModule_Web.cpp:39 (discriminator 4)
    973a:	bc 01       	movw	r22, r24
    973c:	81 e3       	ldi	r24, 0x31	; 49
    973e:	9e e0       	ldi	r25, 0x0E	; 14
    9740:	0e 94 23 95 	call	0x12a46	; 0x12a46 <strcat>
b:\Gbox420\Gbox420\Gbox420_Mega_Main\build\sketch\src\Modules_Web/AeroModule_Web.cpp:40 (discriminator 4)
  strcat_P(LongMessage, (PGM_P)F("\",\"W\":\""));
    9744:	68 e7       	ldi	r22, 0x78	; 120
    9746:	74 e1       	ldi	r23, 0x14	; 20
    9748:	81 e3       	ldi	r24, 0x31	; 49
    974a:	9e e0       	ldi	r25, 0x0E	; 14
    974c:	0e 94 da 94 	call	0x129b4	; 0x129b4 <strcat_P>
    9750:	60 91 e3 13 	lds	r22, 0x13E3	; 0x8013e3 <AeroResponse1Received+0x14>
    9754:	70 91 e4 13 	lds	r23, 0x13E4	; 0x8013e4 <AeroResponse1Received+0x15>
    9758:	80 91 e5 13 	lds	r24, 0x13E5	; 0x8013e5 <AeroResponse1Received+0x16>
    975c:	90 91 e6 13 	lds	r25, 0x13E6	; 0x8013e6 <AeroResponse1Received+0x17>
b:\Gbox420\Gbox420\Gbox420_Mega_Main\build\sketch\src\Modules_Web/AeroModule_Web.cpp:41 (discriminator 4)
  strcat(LongMessage, FriendlyFormat ? toText_weight(AeroResponse1Received.Weight) : toText(AeroResponse1Received.Weight));
    9760:	cc 23       	and	r28, r28
    9762:	09 f4       	brne	.+2      	; 0x9766 <AeroModule_Web::report(bool)+0x96>
    9764:	23 c1       	rjmp	.+582    	; 0x99ac <AeroModule_Web::report(bool)+0x2dc>
b:\Gbox420\Gbox420\Gbox420_Mega_Main\build\sketch\src\Modules_Web/AeroModule_Web.cpp:41 (discriminator 1)
    9766:	0e 94 8e 34 	call	0x691c	; 0x691c <toText_weight(float)>
b:\Gbox420\Gbox420\Gbox420_Mega_Main\build\sketch\src\Modules_Web/AeroModule_Web.cpp:41 (discriminator 4)
    976a:	bc 01       	movw	r22, r24
    976c:	81 e3       	ldi	r24, 0x31	; 49
    976e:	9e e0       	ldi	r25, 0x0E	; 14
    9770:	0e 94 23 95 	call	0x12a46	; 0x12a46 <strcat>
b:\Gbox420\Gbox420\Gbox420_Mega_Main\build\sketch\src\Modules_Web/AeroModule_Web.cpp:42 (discriminator 4)
  strcat_P(LongMessage, (PGM_P)F("\",\"Ma\":\""));
    9774:	6f e6       	ldi	r22, 0x6F	; 111
    9776:	74 e1       	ldi	r23, 0x14	; 20
    9778:	81 e3       	ldi	r24, 0x31	; 49
    977a:	9e e0       	ldi	r25, 0x0E	; 14
    977c:	0e 94 da 94 	call	0x129b4	; 0x129b4 <strcat_P>
    9780:	60 91 fa 13 	lds	r22, 0x13FA	; 0x8013fa <AeroCommand1ToSend+0x13>
    9784:	70 91 fb 13 	lds	r23, 0x13FB	; 0x8013fb <AeroCommand1ToSend+0x14>
    9788:	80 91 fc 13 	lds	r24, 0x13FC	; 0x8013fc <AeroCommand1ToSend+0x15>
    978c:	90 91 fd 13 	lds	r25, 0x13FD	; 0x8013fd <AeroCommand1ToSend+0x16>
b:\Gbox420\Gbox420\Gbox420_Mega_Main\build\sketch\src\Modules_Web/AeroModule_Web.cpp:43 (discriminator 4)
  strcat(LongMessage, FriendlyFormat ? toText_pressure(AeroCommand1ToSend.MaxPressure) : toText(AeroCommand1ToSend.MaxPressure));
    9790:	cc 23       	and	r28, r28
    9792:	09 f4       	brne	.+2      	; 0x9796 <AeroModule_Web::report(bool)+0xc6>
    9794:	0e c1       	rjmp	.+540    	; 0x99b2 <AeroModule_Web::report(bool)+0x2e2>
b:\Gbox420\Gbox420\Gbox420_Mega_Main\build\sketch\src\Modules_Web/AeroModule_Web.cpp:43 (discriminator 1)
    9796:	0e 94 70 34 	call	0x68e0	; 0x68e0 <toText_pressure(float)>
b:\Gbox420\Gbox420\Gbox420_Mega_Main\build\sketch\src\Modules_Web/AeroModule_Web.cpp:43 (discriminator 4)
    979a:	bc 01       	movw	r22, r24
    979c:	81 e3       	ldi	r24, 0x31	; 49
    979e:	9e e0       	ldi	r25, 0x0E	; 14
    97a0:	0e 94 23 95 	call	0x12a46	; 0x12a46 <strcat>
b:\Gbox420\Gbox420\Gbox420_Mega_Main\build\sketch\src\Modules_Web/AeroModule_Web.cpp:44 (discriminator 4)
  if (AeroResponse1Received.PressureTankPresent)
    97a4:	80 91 d7 13 	lds	r24, 0x13D7	; 0x8013d7 <AeroResponse1Received+0x8>
    97a8:	88 23       	and	r24, r24
    97aa:	09 f4       	brne	.+2      	; 0x97ae <AeroModule_Web::report(bool)+0xde>
    97ac:	08 c1       	rjmp	.+528    	; 0x99be <AeroModule_Web::report(bool)+0x2ee>
b:\Gbox420\Gbox420\Gbox420_Mega_Main\build\sketch\src\Modules_Web/AeroModule_Web.cpp:46
  {
    strcat_P(LongMessage, (PGM_P)F("\",\"Mi\":\""));
    97ae:	66 e6       	ldi	r22, 0x66	; 102
    97b0:	74 e1       	ldi	r23, 0x14	; 20
    97b2:	81 e3       	ldi	r24, 0x31	; 49
    97b4:	9e e0       	ldi	r25, 0x0E	; 14
    97b6:	0e 94 da 94 	call	0x129b4	; 0x129b4 <strcat_P>
    97ba:	60 91 f6 13 	lds	r22, 0x13F6	; 0x8013f6 <AeroCommand1ToSend+0xf>
    97be:	70 91 f7 13 	lds	r23, 0x13F7	; 0x8013f7 <AeroCommand1ToSend+0x10>
    97c2:	80 91 f8 13 	lds	r24, 0x13F8	; 0x8013f8 <AeroCommand1ToSend+0x11>
    97c6:	90 91 f9 13 	lds	r25, 0x13F9	; 0x8013f9 <AeroCommand1ToSend+0x12>
b:\Gbox420\Gbox420\Gbox420_Mega_Main\build\sketch\src\Modules_Web/AeroModule_Web.cpp:47
    strcat(LongMessage, FriendlyFormat ? toText_pressure(AeroCommand1ToSend.MinPressure) : toText(AeroCommand1ToSend.MinPressure));
    97ca:	cc 23       	and	r28, r28
    97cc:	09 f4       	brne	.+2      	; 0x97d0 <AeroModule_Web::report(bool)+0x100>
    97ce:	f4 c0       	rjmp	.+488    	; 0x99b8 <AeroModule_Web::report(bool)+0x2e8>
b:\Gbox420\Gbox420\Gbox420_Mega_Main\build\sketch\src\Modules_Web/AeroModule_Web.cpp:47 (discriminator 1)
    97d0:	0e 94 70 34 	call	0x68e0	; 0x68e0 <toText_pressure(float)>
b:\Gbox420\Gbox420\Gbox420_Mega_Main\build\sketch\src\Modules_Web/AeroModule_Web.cpp:47 (discriminator 4)
    97d4:	bc 01       	movw	r22, r24
    97d6:	81 e3       	ldi	r24, 0x31	; 49
    97d8:	9e e0       	ldi	r25, 0x0E	; 14
    97da:	0e 94 23 95 	call	0x12a46	; 0x12a46 <strcat>
b:\Gbox420\Gbox420\Gbox420_Mega_Main\build\sketch\src\Modules_Web/AeroModule_Web.cpp:48 (discriminator 4)
    strcat_P(LongMessage, (PGM_P)F("\",\"AS\":\""));
    97de:	6d e5       	ldi	r22, 0x5D	; 93
    97e0:	74 e1       	ldi	r23, 0x14	; 20
    97e2:	81 e3       	ldi	r24, 0x31	; 49
    97e4:	9e e0       	ldi	r25, 0x0E	; 14
    97e6:	0e 94 da 94 	call	0x129b4	; 0x129b4 <strcat_P>
    97ea:	80 91 d5 13 	lds	r24, 0x13D5	; 0x8013d5 <AeroResponse1Received+0x6>
    97ee:	90 91 d6 13 	lds	r25, 0x13D6	; 0x8013d6 <AeroResponse1Received+0x7>
b:\Gbox420\Gbox420\Gbox420_Mega_Main\build\sketch\src\Modules_Web/AeroModule_Web.cpp:49 (discriminator 4)
    strcat(LongMessage, FriendlyFormat ? toText_aeroTankState((AeroTankStates)AeroResponse1Received.AeroState) : toText(AeroResponse1Received.AeroState));
    97f2:	cc 23       	and	r28, r28
    97f4:	09 f4       	brne	.+2      	; 0x97f8 <AeroModule_Web::report(bool)+0x128>
    97f6:	f2 c0       	rjmp	.+484    	; 0x99dc <AeroModule_Web::report(bool)+0x30c>
b:\Gbox420\Gbox420\Gbox420_Mega_Main\build\sketch\src\Modules_Web/AeroModule_Web.cpp:49 (discriminator 1)
    97f8:	0e 94 83 35 	call	0x6b06	; 0x6b06 <toText_aeroTankState(AeroTankStates)>
b:\Gbox420\Gbox420\Gbox420_Mega_Main\build\sketch\src\Modules_Web/AeroModule_Web.cpp:54 (discriminator 4)
  }
  else
  {
    strcat_P(LongMessage, (PGM_P)F("\",\"AS\":\""));
    strcat(LongMessage, FriendlyFormat ? toText_aeroNoTankState((AeroNoTankStates)AeroResponse1Received.AeroState) : toText(AeroResponse1Received.AeroState));
    97fc:	bc 01       	movw	r22, r24
    97fe:	81 e3       	ldi	r24, 0x31	; 49
    9800:	9e e0       	ldi	r25, 0x0E	; 14
    9802:	0e 94 23 95 	call	0x12a46	; 0x12a46 <strcat>
b:\Gbox420\Gbox420\Gbox420_Mega_Main\build\sketch\src\Modules_Web/AeroModule_Web.cpp:56 (discriminator 4)
  }
  strcat_P(LongMessage, (PGM_P)F("\",\"LS\":\""));
    9806:	6b e4       	ldi	r22, 0x4B	; 75
    9808:	74 e1       	ldi	r23, 0x14	; 20
    980a:	81 e3       	ldi	r24, 0x31	; 49
    980c:	9e e0       	ldi	r25, 0x0E	; 14
    980e:	0e 94 da 94 	call	0x129b4	; 0x129b4 <strcat_P>
    9812:	60 91 df 13 	lds	r22, 0x13DF	; 0x8013df <AeroResponse1Received+0x10>
    9816:	70 91 e0 13 	lds	r23, 0x13E0	; 0x8013e0 <AeroResponse1Received+0x11>
    981a:	80 91 e1 13 	lds	r24, 0x13E1	; 0x8013e1 <AeroResponse1Received+0x12>
    981e:	90 91 e2 13 	lds	r25, 0x13E2	; 0x8013e2 <AeroResponse1Received+0x13>
b:\Gbox420\Gbox420\Gbox420_Mega_Main\build\sketch\src\Modules_Web/AeroModule_Web.cpp:57 (discriminator 4)
  strcat(LongMessage, FriendlyFormat ? toText_pressure(AeroResponse1Received.LastSprayPressure) : toText(AeroResponse1Received.LastSprayPressure));
    9822:	cc 23       	and	r28, r28
    9824:	09 f4       	brne	.+2      	; 0x9828 <AeroModule_Web::report(bool)+0x158>
    9826:	dd c0       	rjmp	.+442    	; 0x99e2 <AeroModule_Web::report(bool)+0x312>
b:\Gbox420\Gbox420\Gbox420_Mega_Main\build\sketch\src\Modules_Web/AeroModule_Web.cpp:57 (discriminator 1)
    9828:	0e 94 70 34 	call	0x68e0	; 0x68e0 <toText_pressure(float)>
b:\Gbox420\Gbox420\Gbox420_Mega_Main\build\sketch\src\Modules_Web/AeroModule_Web.cpp:57 (discriminator 4)
    982c:	bc 01       	movw	r22, r24
    982e:	81 e3       	ldi	r24, 0x31	; 49
    9830:	9e e0       	ldi	r25, 0x0E	; 14
    9832:	0e 94 23 95 	call	0x12a46	; 0x12a46 <strcat>
b:\Gbox420\Gbox420\Gbox420_Mega_Main\build\sketch\src\Modules_Web/AeroModule_Web.cpp:58 (discriminator 4)
  strcat_P(LongMessage, (PGM_P)F("\",\"PSt\":\""));
    9836:	61 e4       	ldi	r22, 0x41	; 65
    9838:	74 e1       	ldi	r23, 0x14	; 20
    983a:	81 e3       	ldi	r24, 0x31	; 49
    983c:	9e e0       	ldi	r25, 0x0E	; 14
    983e:	0e 94 da 94 	call	0x129b4	; 0x129b4 <strcat_P>
    9842:	80 91 dd 13 	lds	r24, 0x13DD	; 0x8013dd <AeroResponse1Received+0xe>
    9846:	90 91 de 13 	lds	r25, 0x13DE	; 0x8013de <AeroResponse1Received+0xf>
b:\Gbox420\Gbox420\Gbox420_Mega_Main\build\sketch\src\Modules_Web/AeroModule_Web.cpp:59 (discriminator 4)
  strcat(LongMessage, FriendlyFormat ? toText_pressurePumpState(AeroResponse1Received.PumpState) : toText((int)AeroResponse1Received.PumpState));
    984a:	cc 23       	and	r28, r28
    984c:	09 f4       	brne	.+2      	; 0x9850 <AeroModule_Web::report(bool)+0x180>
    984e:	cc c0       	rjmp	.+408    	; 0x99e8 <AeroModule_Web::report(bool)+0x318>
b:\Gbox420\Gbox420\Gbox420_Mega_Main\build\sketch\src\Modules_Web/AeroModule_Web.cpp:59 (discriminator 1)
    9850:	0e 94 51 35 	call	0x6aa2	; 0x6aa2 <toText_pressurePumpState(PressurePumpStates)>
b:\Gbox420\Gbox420\Gbox420_Mega_Main\build\sketch\src\Modules_Web/AeroModule_Web.cpp:59 (discriminator 4)
    9854:	bc 01       	movw	r22, r24
    9856:	81 e3       	ldi	r24, 0x31	; 49
    9858:	9e e0       	ldi	r25, 0x0E	; 14
    985a:	0e 94 23 95 	call	0x12a46	; 0x12a46 <strcat>
b:\Gbox420\Gbox420\Gbox420_Mega_Main\build\sketch\src\Modules_Web/AeroModule_Web.cpp:60 (discriminator 4)
  strcat_P(LongMessage, (PGM_P)F("\",\"PS\":\""));
    985e:	68 e3       	ldi	r22, 0x38	; 56
    9860:	74 e1       	ldi	r23, 0x14	; 20
    9862:	81 e3       	ldi	r24, 0x31	; 49
    9864:	9e e0       	ldi	r25, 0x0E	; 14
    9866:	0e 94 da 94 	call	0x129b4	; 0x129b4 <strcat_P>
    986a:	60 91 ca 13 	lds	r22, 0x13CA	; 0x8013ca <AeroCommand2ToSend+0x9>
b:\Gbox420\Gbox420\Gbox420_Mega_Main\build\sketch\src\Modules_Web/AeroModule_Web.cpp:61 (discriminator 4)
  strcat(LongMessage, FriendlyFormat ? toText_percentage(AeroCommand2ToSend.PumpSpeed) : toText(AeroCommand2ToSend.PumpSpeed));
    986e:	cc 23       	and	r28, r28
    9870:	09 f4       	brne	.+2      	; 0x9874 <AeroModule_Web::report(bool)+0x1a4>
    9872:	bd c0       	rjmp	.+378    	; 0x99ee <AeroModule_Web::report(bool)+0x31e>
b:\Gbox420\Gbox420\Gbox420_Mega_Main\build\sketch\src\Modules_Web/AeroModule_Web.cpp:61 (discriminator 1)
    9874:	70 e0       	ldi	r23, 0x00	; 0
    9876:	90 e0       	ldi	r25, 0x00	; 0
    9878:	80 e0       	ldi	r24, 0x00	; 0
    987a:	0e 94 89 90 	call	0x12112	; 0x12112 <__floatunsisf>
    987e:	0e 94 ac 34 	call	0x6958	; 0x6958 <toText_percentage(float)>
b:\Gbox420\Gbox420\Gbox420_Mega_Main\build\sketch\src\Modules_Web/AeroModule_Web.cpp:61 (discriminator 4)
    9882:	bc 01       	movw	r22, r24
    9884:	81 e3       	ldi	r24, 0x31	; 49
    9886:	9e e0       	ldi	r25, 0x0E	; 14
    9888:	0e 94 23 95 	call	0x12a46	; 0x12a46 <strcat>
b:\Gbox420\Gbox420\Gbox420_Mega_Main\build\sketch\src\Modules_Web/AeroModule_Web.cpp:62 (discriminator 4)
  strcat_P(LongMessage, (PGM_P)F("\",\"PT\":\""));
    988c:	6f e2       	ldi	r22, 0x2F	; 47
    988e:	74 e1       	ldi	r23, 0x14	; 20
    9890:	81 e3       	ldi	r24, 0x31	; 49
    9892:	9e e0       	ldi	r25, 0x0E	; 14
    9894:	0e 94 da 94 	call	0x129b4	; 0x129b4 <strcat_P>
    9898:	80 91 cd 13 	lds	r24, 0x13CD	; 0x8013cd <AeroCommand2ToSend+0xc>
    989c:	90 91 ce 13 	lds	r25, 0x13CE	; 0x8013ce <AeroCommand2ToSend+0xd>
b:\Gbox420\Gbox420\Gbox420_Mega_Main\build\sketch\src\Modules_Web/AeroModule_Web.cpp:63 (discriminator 4)
  strcat(LongMessage, FriendlyFormat ? toText_second(AeroCommand2ToSend.PumpTimeOut) : toText(AeroCommand2ToSend.PumpTimeOut));
    98a0:	cc 23       	and	r28, r28
    98a2:	09 f4       	brne	.+2      	; 0x98a6 <AeroModule_Web::report(bool)+0x1d6>
    98a4:	a9 c0       	rjmp	.+338    	; 0x99f8 <AeroModule_Web::report(bool)+0x328>
b:\Gbox420\Gbox420\Gbox420_Mega_Main\build\sketch\src\Modules_Web/AeroModule_Web.cpp:63 (discriminator 1)
    98a6:	0e 94 bd 34 	call	0x697a	; 0x697a <toText_second(int)>
b:\Gbox420\Gbox420\Gbox420_Mega_Main\build\sketch\src\Modules_Web/AeroModule_Web.cpp:63 (discriminator 4)
    98aa:	bc 01       	movw	r22, r24
    98ac:	81 e3       	ldi	r24, 0x31	; 49
    98ae:	9e e0       	ldi	r25, 0x0E	; 14
    98b0:	0e 94 23 95 	call	0x12a46	; 0x12a46 <strcat>
b:\Gbox420\Gbox420\Gbox420_Mega_Main\build\sketch\src\Modules_Web/AeroModule_Web.cpp:64 (discriminator 4)
  strcat_P(LongMessage, (PGM_P)F("\",\"PP\":\""));
    98b4:	66 e2       	ldi	r22, 0x26	; 38
    98b6:	74 e1       	ldi	r23, 0x14	; 20
    98b8:	81 e3       	ldi	r24, 0x31	; 49
    98ba:	9e e0       	ldi	r25, 0x0E	; 14
    98bc:	0e 94 da 94 	call	0x129b4	; 0x129b4 <strcat_P>
    98c0:	80 91 cb 13 	lds	r24, 0x13CB	; 0x8013cb <AeroCommand2ToSend+0xa>
    98c4:	90 91 cc 13 	lds	r25, 0x13CC	; 0x8013cc <AeroCommand2ToSend+0xb>
b:\Gbox420\Gbox420\Gbox420_Mega_Main\build\sketch\src\Modules_Web/AeroModule_Web.cpp:65 (discriminator 4)
  strcat(LongMessage, FriendlyFormat ? toText_second(AeroCommand2ToSend.PumpPrimingTime) : toText(AeroCommand2ToSend.PumpPrimingTime));
    98c8:	cc 23       	and	r28, r28
    98ca:	09 f4       	brne	.+2      	; 0x98ce <AeroModule_Web::report(bool)+0x1fe>
    98cc:	98 c0       	rjmp	.+304    	; 0x99fe <AeroModule_Web::report(bool)+0x32e>
b:\Gbox420\Gbox420\Gbox420_Mega_Main\build\sketch\src\Modules_Web/AeroModule_Web.cpp:65 (discriminator 1)
    98ce:	0e 94 bd 34 	call	0x697a	; 0x697a <toText_second(int)>
b:\Gbox420\Gbox420\Gbox420_Mega_Main\build\sketch\src\Modules_Web/AeroModule_Web.cpp:65 (discriminator 4)
    98d2:	bc 01       	movw	r22, r24
    98d4:	81 e3       	ldi	r24, 0x31	; 49
    98d6:	9e e0       	ldi	r25, 0x0E	; 14
    98d8:	0e 94 23 95 	call	0x12a46	; 0x12a46 <strcat>
b:\Gbox420\Gbox420\Gbox420_Mega_Main\build\sketch\src\Modules_Web/AeroModule_Web.cpp:66 (discriminator 4)
  strcat_P(LongMessage, (PGM_P)F("\",\"SE\":\""));
    98dc:	6d e1       	ldi	r22, 0x1D	; 29
    98de:	74 e1       	ldi	r23, 0x14	; 20
    98e0:	81 e3       	ldi	r24, 0x31	; 49
    98e2:	9e e0       	ldi	r25, 0x0E	; 14
    98e4:	0e 94 da 94 	call	0x129b4	; 0x129b4 <strcat_P>
b:\Gbox420\Gbox420\Gbox420_Mega_Main\build\sketch\src\Modules_Web/AeroModule_Web.cpp:67 (discriminator 4)
  strcat(LongMessage, FriendlyFormat ? toText_enabledDisabled(AeroResponse1Received.SprayEnabled) : toText(AeroResponse1Received.SprayEnabled));
    98e8:	80 91 d8 13 	lds	r24, 0x13D8	; 0x8013d8 <AeroResponse1Received+0x9>
    98ec:	cc 23       	and	r28, r28
    98ee:	09 f4       	brne	.+2      	; 0x98f2 <AeroModule_Web::report(bool)+0x222>
    98f0:	89 c0       	rjmp	.+274    	; 0x9a04 <AeroModule_Web::report(bool)+0x334>
b:\Gbox420\Gbox420\Gbox420_Mega_Main\build\sketch\src\Modules_Web/AeroModule_Web.cpp:67 (discriminator 1)
    98f2:	0e 94 e9 34 	call	0x69d2	; 0x69d2 <toText_enabledDisabled(bool)>
b:\Gbox420\Gbox420\Gbox420_Mega_Main\build\sketch\src\Modules_Web/AeroModule_Web.cpp:67 (discriminator 4)
    98f6:	bc 01       	movw	r22, r24
    98f8:	81 e3       	ldi	r24, 0x31	; 49
    98fa:	9e e0       	ldi	r25, 0x0E	; 14
    98fc:	0e 94 23 95 	call	0x12a46	; 0x12a46 <strcat>
b:\Gbox420\Gbox420\Gbox420_Mega_Main\build\sketch\src\Modules_Web/AeroModule_Web.cpp:68 (discriminator 4)
  strcat_P(LongMessage, (PGM_P)F("\",\"D\":\""));
    9900:	65 e1       	ldi	r22, 0x15	; 21
    9902:	74 e1       	ldi	r23, 0x14	; 20
    9904:	81 e3       	ldi	r24, 0x31	; 49
    9906:	9e e0       	ldi	r25, 0x0E	; 14
    9908:	0e 94 da 94 	call	0x129b4	; 0x129b4 <strcat_P>
b:\Gbox420\Gbox420\Gbox420_Mega_Main\build\sketch\src\Modules_Web/AeroModule_Web.cpp:69 (discriminator 4)
  strcat(LongMessage, FriendlyFormat ? toText_second(AeroCommand1ToSend.Duration) : toText(AeroCommand1ToSend.Duration));
    990c:	60 91 ee 13 	lds	r22, 0x13EE	; 0x8013ee <AeroCommand1ToSend+0x7>
    9910:	70 91 ef 13 	lds	r23, 0x13EF	; 0x8013ef <AeroCommand1ToSend+0x8>
    9914:	80 91 f0 13 	lds	r24, 0x13F0	; 0x8013f0 <AeroCommand1ToSend+0x9>
    9918:	90 91 f1 13 	lds	r25, 0x13F1	; 0x8013f1 <AeroCommand1ToSend+0xa>
    991c:	cc 23       	and	r28, r28
    991e:	09 f4       	brne	.+2      	; 0x9922 <AeroModule_Web::report(bool)+0x252>
    9920:	75 c0       	rjmp	.+234    	; 0x9a0c <AeroModule_Web::report(bool)+0x33c>
b:\Gbox420\Gbox420\Gbox420_Mega_Main\build\sketch\src\Modules_Web/AeroModule_Web.cpp:69 (discriminator 1)
    9922:	0e 94 53 90 	call	0x120a6	; 0x120a6 <__fixsfsi>
    9926:	cb 01       	movw	r24, r22
    9928:	0e 94 bd 34 	call	0x697a	; 0x697a <toText_second(int)>
b:\Gbox420\Gbox420\Gbox420_Mega_Main\build\sketch\src\Modules_Web/AeroModule_Web.cpp:69 (discriminator 4)
    992c:	bc 01       	movw	r22, r24
    992e:	81 e3       	ldi	r24, 0x31	; 49
    9930:	9e e0       	ldi	r25, 0x0E	; 14
    9932:	0e 94 23 95 	call	0x12a46	; 0x12a46 <strcat>
b:\Gbox420\Gbox420\Gbox420_Mega_Main\build\sketch\src\Modules_Web/AeroModule_Web.cpp:70 (discriminator 4)
  strcat_P(LongMessage, (PGM_P)F("\",\"DI\":\""));
    9936:	6c e0       	ldi	r22, 0x0C	; 12
    9938:	74 e1       	ldi	r23, 0x14	; 20
    993a:	81 e3       	ldi	r24, 0x31	; 49
    993c:	9e e0       	ldi	r25, 0x0E	; 14
    993e:	0e 94 da 94 	call	0x129b4	; 0x129b4 <strcat_P>
    9942:	80 91 f2 13 	lds	r24, 0x13F2	; 0x8013f2 <AeroCommand1ToSend+0xb>
    9946:	90 91 f3 13 	lds	r25, 0x13F3	; 0x8013f3 <AeroCommand1ToSend+0xc>
b:\Gbox420\Gbox420\Gbox420_Mega_Main\build\sketch\src\Modules_Web/AeroModule_Web.cpp:71 (discriminator 4)
  strcat(LongMessage, FriendlyFormat ? toText_second(AeroCommand1ToSend.DayInterval) : toText(AeroCommand1ToSend.DayInterval));
    994a:	cc 23       	and	r28, r28
    994c:	09 f4       	brne	.+2      	; 0x9950 <AeroModule_Web::report(bool)+0x280>
    994e:	61 c0       	rjmp	.+194    	; 0x9a12 <AeroModule_Web::report(bool)+0x342>
b:\Gbox420\Gbox420\Gbox420_Mega_Main\build\sketch\src\Modules_Web/AeroModule_Web.cpp:71 (discriminator 1)
    9950:	0e 94 bd 34 	call	0x697a	; 0x697a <toText_second(int)>
b:\Gbox420\Gbox420\Gbox420_Mega_Main\build\sketch\src\Modules_Web/AeroModule_Web.cpp:71 (discriminator 4)
    9954:	bc 01       	movw	r22, r24
    9956:	81 e3       	ldi	r24, 0x31	; 49
    9958:	9e e0       	ldi	r25, 0x0E	; 14
    995a:	0e 94 23 95 	call	0x12a46	; 0x12a46 <strcat>
b:\Gbox420\Gbox420\Gbox420_Mega_Main\build\sketch\src\Modules_Web/AeroModule_Web.cpp:72 (discriminator 4)
  strcat_P(LongMessage, (PGM_P)F("\",\"NI\":\""));
    995e:	63 e0       	ldi	r22, 0x03	; 3
    9960:	74 e1       	ldi	r23, 0x14	; 20
    9962:	81 e3       	ldi	r24, 0x31	; 49
    9964:	9e e0       	ldi	r25, 0x0E	; 14
    9966:	0e 94 da 94 	call	0x129b4	; 0x129b4 <strcat_P>
    996a:	80 91 f4 13 	lds	r24, 0x13F4	; 0x8013f4 <AeroCommand1ToSend+0xd>
    996e:	90 91 f5 13 	lds	r25, 0x13F5	; 0x8013f5 <AeroCommand1ToSend+0xe>
b:\Gbox420\Gbox420\Gbox420_Mega_Main\build\sketch\src\Modules_Web/AeroModule_Web.cpp:73 (discriminator 4)
  strcat(LongMessage, FriendlyFormat ? toText_second(AeroCommand1ToSend.NightInterval) : toText(AeroCommand1ToSend.NightInterval));
    9972:	cc 23       	and	r28, r28
    9974:	09 f4       	brne	.+2      	; 0x9978 <AeroModule_Web::report(bool)+0x2a8>
    9976:	50 c0       	rjmp	.+160    	; 0x9a18 <AeroModule_Web::report(bool)+0x348>
b:\Gbox420\Gbox420\Gbox420_Mega_Main\build\sketch\src\Modules_Web/AeroModule_Web.cpp:73 (discriminator 1)
    9978:	0e 94 bd 34 	call	0x697a	; 0x697a <toText_second(int)>
b:\Gbox420\Gbox420\Gbox420_Mega_Main\build\sketch\src\Modules_Web/AeroModule_Web.cpp:73 (discriminator 4)
    997c:	bc 01       	movw	r22, r24
    997e:	81 e3       	ldi	r24, 0x31	; 49
    9980:	9e e0       	ldi	r25, 0x0E	; 14
    9982:	0e 94 23 95 	call	0x12a46	; 0x12a46 <strcat>
b:\Gbox420\Gbox420\Gbox420_Mega_Main\build\sketch\src\Modules_Web/AeroModule_Web.cpp:74 (discriminator 4)
  strcat_P(LongMessage, (PGM_P)F("\"}")); ///< closing the curly bracket at the end of the JSON
    9986:	60 e0       	ldi	r22, 0x00	; 0
    9988:	74 e1       	ldi	r23, 0x14	; 20
    998a:	81 e3       	ldi	r24, 0x31	; 49
    998c:	9e e0       	ldi	r25, 0x0E	; 14
b:\Gbox420\Gbox420\Gbox420_Mega_Main\build\sketch\src\Modules_Web/AeroModule_Web.cpp:75 (discriminator 4)
}
    998e:	cf 91       	pop	r28
    9990:	1f 91       	pop	r17
    9992:	0f 91       	pop	r16
b:\Gbox420\Gbox420\Gbox420_Mega_Main\build\sketch\src\Modules_Web/AeroModule_Web.cpp:74 (discriminator 4)
  strcat(LongMessage, FriendlyFormat ? toText_second(AeroCommand1ToSend.Duration) : toText(AeroCommand1ToSend.Duration));
  strcat_P(LongMessage, (PGM_P)F("\",\"DI\":\""));
  strcat(LongMessage, FriendlyFormat ? toText_second(AeroCommand1ToSend.DayInterval) : toText(AeroCommand1ToSend.DayInterval));
  strcat_P(LongMessage, (PGM_P)F("\",\"NI\":\""));
  strcat(LongMessage, FriendlyFormat ? toText_second(AeroCommand1ToSend.NightInterval) : toText(AeroCommand1ToSend.NightInterval));
  strcat_P(LongMessage, (PGM_P)F("\"}")); ///< closing the curly bracket at the end of the JSON
    9994:	0c 94 da 94 	jmp	0x129b4	; 0x129b4 <strcat_P>
b:\Gbox420\Gbox420\Gbox420_Mega_Main\build\sketch\src\Modules_Web/AeroModule_Web.cpp:37 (discriminator 2)
*/
void AeroModule_Web::report(bool FriendlyFormat)
{
  Common::report(true); ///< Adds "NAME":{  to the LongMessage buffer. The curly bracket { needs to be closed at the end
  strcat_P(LongMessage, (PGM_P)F("\"S\":\""));
  strcat(LongMessage, FriendlyFormat ? toText_onlineStatus(OnlineStatus) : toText(OnlineStatus));
    9998:	d8 01       	movw	r26, r16
    999a:	13 96       	adiw	r26, 0x03	; 3
    999c:	8c 91       	ld	r24, X
    999e:	90 e0       	ldi	r25, 0x00	; 0
    99a0:	0e 94 95 33 	call	0x672a	; 0x672a <toText(int)>
    99a4:	b2 ce       	rjmp	.-668    	; 0x970a <AeroModule_Web::report(bool)+0x3a>
b:\Gbox420\Gbox420\Gbox420_Mega_Main\build\sketch\src\Modules_Web/AeroModule_Web.cpp:39 (discriminator 2)
  strcat_P(LongMessage, (PGM_P)F("\",\"P\":\""));
  strcat(LongMessage, FriendlyFormat ? toText_pressure(AeroResponse1Received.Pressure) : toText(AeroResponse1Received.Pressure));
    99a6:	0e 94 a5 33 	call	0x674a	; 0x674a <toText(float)>
    99aa:	c7 ce       	rjmp	.-626    	; 0x973a <AeroModule_Web::report(bool)+0x6a>
b:\Gbox420\Gbox420\Gbox420_Mega_Main\build\sketch\src\Modules_Web/AeroModule_Web.cpp:41 (discriminator 2)
  strcat_P(LongMessage, (PGM_P)F("\",\"W\":\""));
  strcat(LongMessage, FriendlyFormat ? toText_weight(AeroResponse1Received.Weight) : toText(AeroResponse1Received.Weight));
    99ac:	0e 94 a5 33 	call	0x674a	; 0x674a <toText(float)>
    99b0:	dc ce       	rjmp	.-584    	; 0x976a <AeroModule_Web::report(bool)+0x9a>
b:\Gbox420\Gbox420\Gbox420_Mega_Main\build\sketch\src\Modules_Web/AeroModule_Web.cpp:43 (discriminator 2)
  strcat_P(LongMessage, (PGM_P)F("\",\"Ma\":\""));
  strcat(LongMessage, FriendlyFormat ? toText_pressure(AeroCommand1ToSend.MaxPressure) : toText(AeroCommand1ToSend.MaxPressure));
    99b2:	0e 94 a5 33 	call	0x674a	; 0x674a <toText(float)>
    99b6:	f1 ce       	rjmp	.-542    	; 0x979a <AeroModule_Web::report(bool)+0xca>
b:\Gbox420\Gbox420\Gbox420_Mega_Main\build\sketch\src\Modules_Web/AeroModule_Web.cpp:47 (discriminator 2)
  if (AeroResponse1Received.PressureTankPresent)
  {
    strcat_P(LongMessage, (PGM_P)F("\",\"Mi\":\""));
    strcat(LongMessage, FriendlyFormat ? toText_pressure(AeroCommand1ToSend.MinPressure) : toText(AeroCommand1ToSend.MinPressure));
    99b8:	0e 94 a5 33 	call	0x674a	; 0x674a <toText(float)>
    99bc:	0b cf       	rjmp	.-490    	; 0x97d4 <AeroModule_Web::report(bool)+0x104>
b:\Gbox420\Gbox420\Gbox420_Mega_Main\build\sketch\src\Modules_Web/AeroModule_Web.cpp:53
    strcat_P(LongMessage, (PGM_P)F("\",\"AS\":\""));
    strcat(LongMessage, FriendlyFormat ? toText_aeroTankState((AeroTankStates)AeroResponse1Received.AeroState) : toText(AeroResponse1Received.AeroState));
  }
  else
  {
    strcat_P(LongMessage, (PGM_P)F("\",\"AS\":\""));
    99be:	64 e5       	ldi	r22, 0x54	; 84
    99c0:	74 e1       	ldi	r23, 0x14	; 20
    99c2:	81 e3       	ldi	r24, 0x31	; 49
    99c4:	9e e0       	ldi	r25, 0x0E	; 14
    99c6:	0e 94 da 94 	call	0x129b4	; 0x129b4 <strcat_P>
    99ca:	80 91 d5 13 	lds	r24, 0x13D5	; 0x8013d5 <AeroResponse1Received+0x6>
    99ce:	90 91 d6 13 	lds	r25, 0x13D6	; 0x8013d6 <AeroResponse1Received+0x7>
b:\Gbox420\Gbox420\Gbox420_Mega_Main\build\sketch\src\Modules_Web/AeroModule_Web.cpp:54
    strcat(LongMessage, FriendlyFormat ? toText_aeroNoTankState((AeroNoTankStates)AeroResponse1Received.AeroState) : toText(AeroResponse1Received.AeroState));
    99d2:	cc 23       	and	r28, r28
    99d4:	19 f0       	breq	.+6      	; 0x99dc <AeroModule_Web::report(bool)+0x30c>
b:\Gbox420\Gbox420\Gbox420_Mega_Main\build\sketch\src\Modules_Web/AeroModule_Web.cpp:54 (discriminator 1)
    99d6:	0e 94 b5 35 	call	0x6b6a	; 0x6b6a <toText_aeroNoTankState(AeroNoTankStates)>
    99da:	10 cf       	rjmp	.-480    	; 0x97fc <AeroModule_Web::report(bool)+0x12c>
b:\Gbox420\Gbox420\Gbox420_Mega_Main\build\sketch\src\Modules_Web/AeroModule_Web.cpp:54 (discriminator 2)
    99dc:	0e 94 95 33 	call	0x672a	; 0x672a <toText(int)>
    99e0:	0d cf       	rjmp	.-486    	; 0x97fc <AeroModule_Web::report(bool)+0x12c>
b:\Gbox420\Gbox420\Gbox420_Mega_Main\build\sketch\src\Modules_Web/AeroModule_Web.cpp:57 (discriminator 2)
  }
  strcat_P(LongMessage, (PGM_P)F("\",\"LS\":\""));
  strcat(LongMessage, FriendlyFormat ? toText_pressure(AeroResponse1Received.LastSprayPressure) : toText(AeroResponse1Received.LastSprayPressure));
    99e2:	0e 94 a5 33 	call	0x674a	; 0x674a <toText(float)>
    99e6:	22 cf       	rjmp	.-444    	; 0x982c <AeroModule_Web::report(bool)+0x15c>
b:\Gbox420\Gbox420\Gbox420_Mega_Main\build\sketch\src\Modules_Web/AeroModule_Web.cpp:59 (discriminator 2)
  strcat_P(LongMessage, (PGM_P)F("\",\"PSt\":\""));
  strcat(LongMessage, FriendlyFormat ? toText_pressurePumpState(AeroResponse1Received.PumpState) : toText((int)AeroResponse1Received.PumpState));
    99e8:	0e 94 95 33 	call	0x672a	; 0x672a <toText(int)>
    99ec:	33 cf       	rjmp	.-410    	; 0x9854 <AeroModule_Web::report(bool)+0x184>
b:\Gbox420\Gbox420\Gbox420_Mega_Main\build\sketch\src\Modules_Web/AeroModule_Web.cpp:61 (discriminator 2)
  strcat_P(LongMessage, (PGM_P)F("\",\"PS\":\""));
  strcat(LongMessage, FriendlyFormat ? toText_percentage(AeroCommand2ToSend.PumpSpeed) : toText(AeroCommand2ToSend.PumpSpeed));
    99ee:	86 2f       	mov	r24, r22
    99f0:	90 e0       	ldi	r25, 0x00	; 0
    99f2:	0e 94 95 33 	call	0x672a	; 0x672a <toText(int)>
    99f6:	45 cf       	rjmp	.-374    	; 0x9882 <AeroModule_Web::report(bool)+0x1b2>
b:\Gbox420\Gbox420\Gbox420_Mega_Main\build\sketch\src\Modules_Web/AeroModule_Web.cpp:63 (discriminator 2)
  strcat_P(LongMessage, (PGM_P)F("\",\"PT\":\""));
  strcat(LongMessage, FriendlyFormat ? toText_second(AeroCommand2ToSend.PumpTimeOut) : toText(AeroCommand2ToSend.PumpTimeOut));
    99f8:	0e 94 9d 33 	call	0x673a	; 0x673a <toText(unsigned int)>
    99fc:	56 cf       	rjmp	.-340    	; 0x98aa <AeroModule_Web::report(bool)+0x1da>
b:\Gbox420\Gbox420\Gbox420_Mega_Main\build\sketch\src\Modules_Web/AeroModule_Web.cpp:65 (discriminator 2)
  strcat_P(LongMessage, (PGM_P)F("\",\"PP\":\""));
  strcat(LongMessage, FriendlyFormat ? toText_second(AeroCommand2ToSend.PumpPrimingTime) : toText(AeroCommand2ToSend.PumpPrimingTime));
    99fe:	0e 94 95 33 	call	0x672a	; 0x672a <toText(int)>
    9a02:	67 cf       	rjmp	.-306    	; 0x98d2 <AeroModule_Web::report(bool)+0x202>
b:\Gbox420\Gbox420\Gbox420_Mega_Main\build\sketch\src\Modules_Web/AeroModule_Web.cpp:67 (discriminator 2)
  strcat_P(LongMessage, (PGM_P)F("\",\"SE\":\""));
  strcat(LongMessage, FriendlyFormat ? toText_enabledDisabled(AeroResponse1Received.SprayEnabled) : toText(AeroResponse1Received.SprayEnabled));
    9a04:	90 e0       	ldi	r25, 0x00	; 0
    9a06:	0e 94 95 33 	call	0x672a	; 0x672a <toText(int)>
    9a0a:	75 cf       	rjmp	.-278    	; 0x98f6 <AeroModule_Web::report(bool)+0x226>
b:\Gbox420\Gbox420\Gbox420_Mega_Main\build\sketch\src\Modules_Web/AeroModule_Web.cpp:69 (discriminator 2)
  strcat_P(LongMessage, (PGM_P)F("\",\"D\":\""));
  strcat(LongMessage, FriendlyFormat ? toText_second(AeroCommand1ToSend.Duration) : toText(AeroCommand1ToSend.Duration));
    9a0c:	0e 94 a5 33 	call	0x674a	; 0x674a <toText(float)>
    9a10:	8d cf       	rjmp	.-230    	; 0x992c <AeroModule_Web::report(bool)+0x25c>
b:\Gbox420\Gbox420\Gbox420_Mega_Main\build\sketch\src\Modules_Web/AeroModule_Web.cpp:71 (discriminator 2)
  strcat_P(LongMessage, (PGM_P)F("\",\"DI\":\""));
  strcat(LongMessage, FriendlyFormat ? toText_second(AeroCommand1ToSend.DayInterval) : toText(AeroCommand1ToSend.DayInterval));
    9a12:	0e 94 95 33 	call	0x672a	; 0x672a <toText(int)>
    9a16:	9e cf       	rjmp	.-196    	; 0x9954 <AeroModule_Web::report(bool)+0x284>
b:\Gbox420\Gbox420\Gbox420_Mega_Main\build\sketch\src\Modules_Web/AeroModule_Web.cpp:73 (discriminator 2)
  strcat_P(LongMessage, (PGM_P)F("\",\"NI\":\""));
  strcat(LongMessage, FriendlyFormat ? toText_second(AeroCommand1ToSend.NightInterval) : toText(AeroCommand1ToSend.NightInterval));
    9a18:	0e 94 95 33 	call	0x672a	; 0x672a <toText(int)>
    9a1c:	af cf       	rjmp	.-162    	; 0x997c <AeroModule_Web::report(bool)+0x2ac>

00009a1e <virtual thunk to AeroModule_Web::report(bool)>:
_ZTv0_n6_N14AeroModule_Web6reportEb():
    9a1e:	dc 01       	movw	r26, r24
    9a20:	ed 91       	ld	r30, X+
    9a22:	fc 91       	ld	r31, X
    9a24:	36 97       	sbiw	r30, 0x06	; 6
    9a26:	20 81       	ld	r18, Z
    9a28:	31 81       	ldd	r19, Z+1	; 0x01
    9a2a:	82 0f       	add	r24, r18
    9a2c:	93 1f       	adc	r25, r19
    9a2e:	0c 94 68 4b 	jmp	0x96d0	; 0x96d0 <AeroModule_Web::report(bool)>

00009a32 <HempyModule_Web::refresh_Minute()>:
_ZN15HempyModule_Web14refresh_MinuteEv():
b:\Gbox420\Gbox420\Gbox420_Mega_Main\build\sketch\src\Modules_Web/HempyModule_Web.cpp:28
  Parent->addToRefreshQueue_Minute(this);
  Parent->addToWebsiteQueue_Load(this);
  Parent->addToWebsiteQueue_Refresh(this);
  Parent->addToCommandQueue(this);
  logToSerials(F("HempyModule_Web ready"), true, 3);
}
    9a32:	dc 01       	movw	r26, r24
    9a34:	ed 91       	ld	r30, X+
    9a36:	fc 91       	ld	r31, X
    9a38:	36 97       	sbiw	r30, 0x06	; 6
    9a3a:	20 81       	ld	r18, Z
    9a3c:	31 81       	ldd	r19, Z+1	; 0x01
    9a3e:	82 0f       	add	r24, r18
    9a40:	93 1f       	adc	r25, r19
    9a42:	0c 94 e2 18 	jmp	0x31c4	; 0x31c4 <Common::refresh_Minute()>

00009a46 <virtual thunk to HempyModule_Web::refresh_Minute()>:
_ZTv0_n12_N15HempyModule_Web14refresh_MinuteEv():
    9a46:	dc 01       	movw	r26, r24
    9a48:	ed 91       	ld	r30, X+
    9a4a:	fc 91       	ld	r31, X
    9a4c:	3c 97       	sbiw	r30, 0x0c	; 12
    9a4e:	20 81       	ld	r18, Z
    9a50:	31 81       	ldd	r19, Z+1	; 0x01
    9a52:	82 0f       	add	r24, r18
    9a54:	93 1f       	adc	r25, r19
    9a56:	0c 94 19 4d 	jmp	0x9a32	; 0x9a32 <HempyModule_Web::refresh_Minute()>

00009a5a <HempyModule_Web::websiteEvent_Load(char*)>:
_ZN15HempyModule_Web17websiteEvent_LoadEPc():
    9a5a:	cf 92       	push	r12
    9a5c:	df 92       	push	r13
    9a5e:	ef 92       	push	r14
    9a60:	ff 92       	push	r15
    9a62:	0f 93       	push	r16
    9a64:	1f 93       	push	r17
    9a66:	cf 93       	push	r28
    9a68:	df 93       	push	r29
    9a6a:	ec 01       	movw	r28, r24
    9a6c:	07 e6       	ldi	r16, 0x67	; 103
    9a6e:	14 e1       	ldi	r17, 0x14	; 20
    9a70:	f8 01       	movw	r30, r16
    9a72:	67 85       	ldd	r22, Z+15	; 0x0f
    9a74:	70 89       	ldd	r23, Z+16	; 0x10
    9a76:	81 89       	ldd	r24, Z+17	; 0x11
    9a78:	92 89       	ldd	r25, Z+18	; 0x12
    9a7a:	0e 94 a5 33 	call	0x674a	; 0x674a <toText(float)>
    9a7e:	7c 01       	movw	r14, r24
    9a80:	e8 81       	ld	r30, Y
    9a82:	f9 81       	ldd	r31, Y+1	; 0x01
    9a84:	36 97       	sbiw	r30, 0x06	; 6
    9a86:	80 81       	ld	r24, Z
    9a88:	91 81       	ldd	r25, Z+1	; 0x01
    9a8a:	41 e0       	ldi	r20, 0x01	; 1
    9a8c:	61 e8       	ldi	r22, 0x81	; 129
    9a8e:	78 e1       	ldi	r23, 0x18	; 24
    9a90:	8c 0f       	add	r24, r28
    9a92:	9d 1f       	adc	r25, r29
    9a94:	0e 94 7e 19 	call	0x32fc	; 0x32fc <Common::getName(__FlashStringHelper const*, bool)>
    9a98:	a7 01       	movw	r20, r14
    9a9a:	bc 01       	movw	r22, r24
    9a9c:	89 ee       	ldi	r24, 0xE9	; 233
    9a9e:	9c e0       	ldi	r25, 0x0C	; 12
    9aa0:	0e 94 a9 77 	call	0xef52	; 0xef52 <ELClientWebServer::setArgString(char const*, char const*)>
    9aa4:	f8 01       	movw	r30, r16
    9aa6:	63 89       	ldd	r22, Z+19	; 0x13
    9aa8:	74 89       	ldd	r23, Z+20	; 0x14
    9aaa:	85 89       	ldd	r24, Z+21	; 0x15
    9aac:	96 89       	ldd	r25, Z+22	; 0x16
    9aae:	0e 94 a5 33 	call	0x674a	; 0x674a <toText(float)>
    9ab2:	7c 01       	movw	r14, r24
    9ab4:	e8 81       	ld	r30, Y
    9ab6:	f9 81       	ldd	r31, Y+1	; 0x01
    9ab8:	36 97       	sbiw	r30, 0x06	; 6
    9aba:	80 81       	ld	r24, Z
    9abc:	91 81       	ldd	r25, Z+1	; 0x01
    9abe:	41 e0       	ldi	r20, 0x01	; 1
    9ac0:	6c e7       	ldi	r22, 0x7C	; 124
    9ac2:	78 e1       	ldi	r23, 0x18	; 24
    9ac4:	8c 0f       	add	r24, r28
    9ac6:	9d 1f       	adc	r25, r29
    9ac8:	0e 94 7e 19 	call	0x32fc	; 0x32fc <Common::getName(__FlashStringHelper const*, bool)>
    9acc:	a7 01       	movw	r20, r14
    9ace:	bc 01       	movw	r22, r24
    9ad0:	89 ee       	ldi	r24, 0xE9	; 233
    9ad2:	9c e0       	ldi	r25, 0x0C	; 12
    9ad4:	0e 94 a9 77 	call	0xef52	; 0xef52 <ELClientWebServer::setArgString(char const*, char const*)>
    9ad8:	f8 01       	movw	r30, r16
    9ada:	67 89       	ldd	r22, Z+23	; 0x17
    9adc:	70 8d       	ldd	r23, Z+24	; 0x18
    9ade:	81 8d       	ldd	r24, Z+25	; 0x19
    9ae0:	92 8d       	ldd	r25, Z+26	; 0x1a
    9ae2:	0e 94 a5 33 	call	0x674a	; 0x674a <toText(float)>
    9ae6:	7c 01       	movw	r14, r24
    9ae8:	e8 81       	ld	r30, Y
    9aea:	f9 81       	ldd	r31, Y+1	; 0x01
    9aec:	36 97       	sbiw	r30, 0x06	; 6
    9aee:	80 81       	ld	r24, Z
    9af0:	91 81       	ldd	r25, Z+1	; 0x01
    9af2:	41 e0       	ldi	r20, 0x01	; 1
    9af4:	67 e7       	ldi	r22, 0x77	; 119
    9af6:	78 e1       	ldi	r23, 0x18	; 24
    9af8:	8c 0f       	add	r24, r28
    9afa:	9d 1f       	adc	r25, r29
    9afc:	0e 94 7e 19 	call	0x32fc	; 0x32fc <Common::getName(__FlashStringHelper const*, bool)>
    9b00:	a7 01       	movw	r20, r14
    9b02:	bc 01       	movw	r22, r24
    9b04:	89 ee       	ldi	r24, 0xE9	; 233
    9b06:	9c e0       	ldi	r25, 0x0C	; 12
    9b08:	0e 94 a9 77 	call	0xef52	; 0xef52 <ELClientWebServer::setArgString(char const*, char const*)>
    9b0c:	f8 01       	movw	r30, r16
    9b0e:	c0 84       	ldd	r12, Z+8	; 0x08
    9b10:	d1 2c       	mov	r13, r1
    9b12:	f1 2c       	mov	r15, r1
    9b14:	e1 2c       	mov	r14, r1
    9b16:	e8 81       	ld	r30, Y
    9b18:	f9 81       	ldd	r31, Y+1	; 0x01
    9b1a:	36 97       	sbiw	r30, 0x06	; 6
    9b1c:	80 81       	ld	r24, Z
    9b1e:	91 81       	ldd	r25, Z+1	; 0x01
    9b20:	41 e0       	ldi	r20, 0x01	; 1
    9b22:	62 e7       	ldi	r22, 0x72	; 114
    9b24:	78 e1       	ldi	r23, 0x18	; 24
    9b26:	8c 0f       	add	r24, r28
    9b28:	9d 1f       	adc	r25, r29
    9b2a:	0e 94 7e 19 	call	0x32fc	; 0x32fc <Common::getName(__FlashStringHelper const*, bool)>
    9b2e:	a7 01       	movw	r20, r14
    9b30:	96 01       	movw	r18, r12
    9b32:	bc 01       	movw	r22, r24
    9b34:	89 ee       	ldi	r24, 0xE9	; 233
    9b36:	9c e0       	ldi	r25, 0x0C	; 12
    9b38:	0e 94 17 79 	call	0xf22e	; 0xf22e <ELClientWebServer::setArgInt(char const*, long)>
    9b3c:	f8 01       	movw	r30, r16
    9b3e:	c1 84       	ldd	r12, Z+9	; 0x09
    9b40:	d2 84       	ldd	r13, Z+10	; 0x0a
    9b42:	f1 2c       	mov	r15, r1
    9b44:	e1 2c       	mov	r14, r1
    9b46:	e8 81       	ld	r30, Y
    9b48:	f9 81       	ldd	r31, Y+1	; 0x01
    9b4a:	36 97       	sbiw	r30, 0x06	; 6
    9b4c:	80 81       	ld	r24, Z
    9b4e:	91 81       	ldd	r25, Z+1	; 0x01
    9b50:	41 e0       	ldi	r20, 0x01	; 1
    9b52:	6e e6       	ldi	r22, 0x6E	; 110
    9b54:	78 e1       	ldi	r23, 0x18	; 24
    9b56:	8c 0f       	add	r24, r28
    9b58:	9d 1f       	adc	r25, r29
    9b5a:	0e 94 7e 19 	call	0x32fc	; 0x32fc <Common::getName(__FlashStringHelper const*, bool)>
    9b5e:	a7 01       	movw	r20, r14
    9b60:	96 01       	movw	r18, r12
    9b62:	bc 01       	movw	r22, r24
    9b64:	89 ee       	ldi	r24, 0xE9	; 233
    9b66:	9c e0       	ldi	r25, 0x0C	; 12
    9b68:	0e 94 17 79 	call	0xf22e	; 0xf22e <ELClientWebServer::setArgInt(char const*, long)>
    9b6c:	f8 01       	movw	r30, r16
    9b6e:	c3 8c       	ldd	r12, Z+27	; 0x1b
    9b70:	d4 8c       	ldd	r13, Z+28	; 0x1c
    9b72:	f1 2c       	mov	r15, r1
    9b74:	e1 2c       	mov	r14, r1
    9b76:	e8 81       	ld	r30, Y
    9b78:	f9 81       	ldd	r31, Y+1	; 0x01
    9b7a:	36 97       	sbiw	r30, 0x06	; 6
    9b7c:	80 81       	ld	r24, Z
    9b7e:	91 81       	ldd	r25, Z+1	; 0x01
    9b80:	41 e0       	ldi	r20, 0x01	; 1
    9b82:	6a e6       	ldi	r22, 0x6A	; 106
    9b84:	78 e1       	ldi	r23, 0x18	; 24
    9b86:	8c 0f       	add	r24, r28
    9b88:	9d 1f       	adc	r25, r29
    9b8a:	0e 94 7e 19 	call	0x32fc	; 0x32fc <Common::getName(__FlashStringHelper const*, bool)>
    9b8e:	a7 01       	movw	r20, r14
    9b90:	96 01       	movw	r18, r12
    9b92:	bc 01       	movw	r22, r24
    9b94:	89 ee       	ldi	r24, 0xE9	; 233
    9b96:	9c e0       	ldi	r25, 0x0C	; 12
    9b98:	0e 94 17 79 	call	0xf22e	; 0xf22e <ELClientWebServer::setArgInt(char const*, long)>
    9b9c:	60 91 5f 14 	lds	r22, 0x145F	; 0x80145f <HempyBucketResponse1Received+0x14>
    9ba0:	70 91 60 14 	lds	r23, 0x1460	; 0x801460 <HempyBucketResponse1Received+0x15>
    9ba4:	80 91 61 14 	lds	r24, 0x1461	; 0x801461 <HempyBucketResponse1Received+0x16>
    9ba8:	90 91 62 14 	lds	r25, 0x1462	; 0x801462 <HempyBucketResponse1Received+0x17>
    9bac:	0e 94 a5 33 	call	0x674a	; 0x674a <toText(float)>
    9bb0:	8c 01       	movw	r16, r24
    9bb2:	e8 81       	ld	r30, Y
    9bb4:	f9 81       	ldd	r31, Y+1	; 0x01
    9bb6:	36 97       	sbiw	r30, 0x06	; 6
    9bb8:	80 81       	ld	r24, Z
    9bba:	91 81       	ldd	r25, Z+1	; 0x01
    9bbc:	41 e0       	ldi	r20, 0x01	; 1
    9bbe:	65 e6       	ldi	r22, 0x65	; 101
    9bc0:	78 e1       	ldi	r23, 0x18	; 24
    9bc2:	8c 0f       	add	r24, r28
    9bc4:	9d 1f       	adc	r25, r29
    9bc6:	0e 94 7e 19 	call	0x32fc	; 0x32fc <Common::getName(__FlashStringHelper const*, bool)>
    9bca:	a8 01       	movw	r20, r16
    9bcc:	bc 01       	movw	r22, r24
    9bce:	89 ee       	ldi	r24, 0xE9	; 233
    9bd0:	9c e0       	ldi	r25, 0x0C	; 12
    9bd2:	0e 94 a9 77 	call	0xef52	; 0xef52 <ELClientWebServer::setArgString(char const*, char const*)>
    9bd6:	0e e2       	ldi	r16, 0x2E	; 46
    9bd8:	14 e1       	ldi	r17, 0x14	; 20
    9bda:	f8 01       	movw	r30, r16
    9bdc:	67 85       	ldd	r22, Z+15	; 0x0f
    9bde:	70 89       	ldd	r23, Z+16	; 0x10
    9be0:	81 89       	ldd	r24, Z+17	; 0x11
    9be2:	92 89       	ldd	r25, Z+18	; 0x12
    9be4:	0e 94 a5 33 	call	0x674a	; 0x674a <toText(float)>
    9be8:	7c 01       	movw	r14, r24
    9bea:	e8 81       	ld	r30, Y
    9bec:	f9 81       	ldd	r31, Y+1	; 0x01
    9bee:	36 97       	sbiw	r30, 0x06	; 6
    9bf0:	80 81       	ld	r24, Z
    9bf2:	91 81       	ldd	r25, Z+1	; 0x01
    9bf4:	41 e0       	ldi	r20, 0x01	; 1
    9bf6:	60 e6       	ldi	r22, 0x60	; 96
    9bf8:	78 e1       	ldi	r23, 0x18	; 24
    9bfa:	8c 0f       	add	r24, r28
    9bfc:	9d 1f       	adc	r25, r29
    9bfe:	0e 94 7e 19 	call	0x32fc	; 0x32fc <Common::getName(__FlashStringHelper const*, bool)>
    9c02:	a7 01       	movw	r20, r14
    9c04:	bc 01       	movw	r22, r24
    9c06:	89 ee       	ldi	r24, 0xE9	; 233
    9c08:	9c e0       	ldi	r25, 0x0C	; 12
    9c0a:	0e 94 a9 77 	call	0xef52	; 0xef52 <ELClientWebServer::setArgString(char const*, char const*)>
    9c0e:	f8 01       	movw	r30, r16
    9c10:	63 89       	ldd	r22, Z+19	; 0x13
    9c12:	74 89       	ldd	r23, Z+20	; 0x14
    9c14:	85 89       	ldd	r24, Z+21	; 0x15
    9c16:	96 89       	ldd	r25, Z+22	; 0x16
    9c18:	0e 94 a5 33 	call	0x674a	; 0x674a <toText(float)>
    9c1c:	7c 01       	movw	r14, r24
    9c1e:	e8 81       	ld	r30, Y
    9c20:	f9 81       	ldd	r31, Y+1	; 0x01
    9c22:	36 97       	sbiw	r30, 0x06	; 6
    9c24:	80 81       	ld	r24, Z
    9c26:	91 81       	ldd	r25, Z+1	; 0x01
    9c28:	41 e0       	ldi	r20, 0x01	; 1
    9c2a:	6b e5       	ldi	r22, 0x5B	; 91
    9c2c:	78 e1       	ldi	r23, 0x18	; 24
    9c2e:	8c 0f       	add	r24, r28
    9c30:	9d 1f       	adc	r25, r29
    9c32:	0e 94 7e 19 	call	0x32fc	; 0x32fc <Common::getName(__FlashStringHelper const*, bool)>
    9c36:	a7 01       	movw	r20, r14
    9c38:	bc 01       	movw	r22, r24
    9c3a:	89 ee       	ldi	r24, 0xE9	; 233
    9c3c:	9c e0       	ldi	r25, 0x0C	; 12
    9c3e:	0e 94 a9 77 	call	0xef52	; 0xef52 <ELClientWebServer::setArgString(char const*, char const*)>
    9c42:	f8 01       	movw	r30, r16
    9c44:	67 89       	ldd	r22, Z+23	; 0x17
    9c46:	70 8d       	ldd	r23, Z+24	; 0x18
    9c48:	81 8d       	ldd	r24, Z+25	; 0x19
    9c4a:	92 8d       	ldd	r25, Z+26	; 0x1a
    9c4c:	0e 94 a5 33 	call	0x674a	; 0x674a <toText(float)>
    9c50:	7c 01       	movw	r14, r24
    9c52:	e8 81       	ld	r30, Y
    9c54:	f9 81       	ldd	r31, Y+1	; 0x01
    9c56:	36 97       	sbiw	r30, 0x06	; 6
    9c58:	80 81       	ld	r24, Z
    9c5a:	91 81       	ldd	r25, Z+1	; 0x01
    9c5c:	41 e0       	ldi	r20, 0x01	; 1
    9c5e:	66 e5       	ldi	r22, 0x56	; 86
    9c60:	78 e1       	ldi	r23, 0x18	; 24
    9c62:	8c 0f       	add	r24, r28
    9c64:	9d 1f       	adc	r25, r29
    9c66:	0e 94 7e 19 	call	0x32fc	; 0x32fc <Common::getName(__FlashStringHelper const*, bool)>
    9c6a:	a7 01       	movw	r20, r14
    9c6c:	bc 01       	movw	r22, r24
    9c6e:	89 ee       	ldi	r24, 0xE9	; 233
    9c70:	9c e0       	ldi	r25, 0x0C	; 12
    9c72:	0e 94 a9 77 	call	0xef52	; 0xef52 <ELClientWebServer::setArgString(char const*, char const*)>
    9c76:	f8 01       	movw	r30, r16
    9c78:	c0 84       	ldd	r12, Z+8	; 0x08
    9c7a:	d1 2c       	mov	r13, r1
    9c7c:	f1 2c       	mov	r15, r1
    9c7e:	e1 2c       	mov	r14, r1
    9c80:	e8 81       	ld	r30, Y
    9c82:	f9 81       	ldd	r31, Y+1	; 0x01
    9c84:	36 97       	sbiw	r30, 0x06	; 6
    9c86:	80 81       	ld	r24, Z
    9c88:	91 81       	ldd	r25, Z+1	; 0x01
    9c8a:	41 e0       	ldi	r20, 0x01	; 1
    9c8c:	61 e5       	ldi	r22, 0x51	; 81
    9c8e:	78 e1       	ldi	r23, 0x18	; 24
    9c90:	8c 0f       	add	r24, r28
    9c92:	9d 1f       	adc	r25, r29
    9c94:	0e 94 7e 19 	call	0x32fc	; 0x32fc <Common::getName(__FlashStringHelper const*, bool)>
    9c98:	a7 01       	movw	r20, r14
    9c9a:	96 01       	movw	r18, r12
    9c9c:	bc 01       	movw	r22, r24
    9c9e:	89 ee       	ldi	r24, 0xE9	; 233
    9ca0:	9c e0       	ldi	r25, 0x0C	; 12
    9ca2:	0e 94 17 79 	call	0xf22e	; 0xf22e <ELClientWebServer::setArgInt(char const*, long)>
    9ca6:	f8 01       	movw	r30, r16
    9ca8:	c1 84       	ldd	r12, Z+9	; 0x09
    9caa:	d2 84       	ldd	r13, Z+10	; 0x0a
    9cac:	f1 2c       	mov	r15, r1
    9cae:	e1 2c       	mov	r14, r1
    9cb0:	e8 81       	ld	r30, Y
    9cb2:	f9 81       	ldd	r31, Y+1	; 0x01
    9cb4:	36 97       	sbiw	r30, 0x06	; 6
    9cb6:	80 81       	ld	r24, Z
    9cb8:	91 81       	ldd	r25, Z+1	; 0x01
    9cba:	41 e0       	ldi	r20, 0x01	; 1
    9cbc:	6d e4       	ldi	r22, 0x4D	; 77
    9cbe:	78 e1       	ldi	r23, 0x18	; 24
    9cc0:	8c 0f       	add	r24, r28
    9cc2:	9d 1f       	adc	r25, r29
    9cc4:	0e 94 7e 19 	call	0x32fc	; 0x32fc <Common::getName(__FlashStringHelper const*, bool)>
    9cc8:	a7 01       	movw	r20, r14
    9cca:	96 01       	movw	r18, r12
    9ccc:	bc 01       	movw	r22, r24
    9cce:	89 ee       	ldi	r24, 0xE9	; 233
    9cd0:	9c e0       	ldi	r25, 0x0C	; 12
    9cd2:	0e 94 17 79 	call	0xf22e	; 0xf22e <ELClientWebServer::setArgInt(char const*, long)>
    9cd6:	f8 01       	movw	r30, r16
    9cd8:	c3 8c       	ldd	r12, Z+27	; 0x1b
    9cda:	d4 8c       	ldd	r13, Z+28	; 0x1c
    9cdc:	f1 2c       	mov	r15, r1
    9cde:	e1 2c       	mov	r14, r1
    9ce0:	e8 81       	ld	r30, Y
    9ce2:	f9 81       	ldd	r31, Y+1	; 0x01
    9ce4:	36 97       	sbiw	r30, 0x06	; 6
    9ce6:	80 81       	ld	r24, Z
    9ce8:	91 81       	ldd	r25, Z+1	; 0x01
    9cea:	41 e0       	ldi	r20, 0x01	; 1
    9cec:	69 e4       	ldi	r22, 0x49	; 73
    9cee:	78 e1       	ldi	r23, 0x18	; 24
    9cf0:	8c 0f       	add	r24, r28
    9cf2:	9d 1f       	adc	r25, r29
    9cf4:	0e 94 7e 19 	call	0x32fc	; 0x32fc <Common::getName(__FlashStringHelper const*, bool)>
    9cf8:	a7 01       	movw	r20, r14
    9cfa:	96 01       	movw	r18, r12
    9cfc:	bc 01       	movw	r22, r24
    9cfe:	89 ee       	ldi	r24, 0xE9	; 233
    9d00:	9c e0       	ldi	r25, 0x0C	; 12
    9d02:	0e 94 17 79 	call	0xf22e	; 0xf22e <ELClientWebServer::setArgInt(char const*, long)>
    9d06:	60 91 26 14 	lds	r22, 0x1426	; 0x801426 <HempyBucketResponse2Received+0x14>
    9d0a:	70 91 27 14 	lds	r23, 0x1427	; 0x801427 <HempyBucketResponse2Received+0x15>
    9d0e:	80 91 28 14 	lds	r24, 0x1428	; 0x801428 <HempyBucketResponse2Received+0x16>
    9d12:	90 91 29 14 	lds	r25, 0x1429	; 0x801429 <HempyBucketResponse2Received+0x17>
    9d16:	0e 94 a5 33 	call	0x674a	; 0x674a <toText(float)>
    9d1a:	8c 01       	movw	r16, r24
    9d1c:	e8 81       	ld	r30, Y
    9d1e:	f9 81       	ldd	r31, Y+1	; 0x01
    9d20:	36 97       	sbiw	r30, 0x06	; 6
    9d22:	80 81       	ld	r24, Z
    9d24:	91 81       	ldd	r25, Z+1	; 0x01
    9d26:	41 e0       	ldi	r20, 0x01	; 1
    9d28:	64 e4       	ldi	r22, 0x44	; 68
    9d2a:	78 e1       	ldi	r23, 0x18	; 24
    9d2c:	8c 0f       	add	r24, r28
    9d2e:	9d 1f       	adc	r25, r29
    9d30:	0e 94 7e 19 	call	0x32fc	; 0x32fc <Common::getName(__FlashStringHelper const*, bool)>
    9d34:	a8 01       	movw	r20, r16
    9d36:	bc 01       	movw	r22, r24
    9d38:	89 ee       	ldi	r24, 0xE9	; 233
    9d3a:	9c e0       	ldi	r25, 0x0C	; 12
    9d3c:	df 91       	pop	r29
    9d3e:	cf 91       	pop	r28
    9d40:	1f 91       	pop	r17
    9d42:	0f 91       	pop	r16
    9d44:	ff 90       	pop	r15
    9d46:	ef 90       	pop	r14
    9d48:	df 90       	pop	r13
    9d4a:	cf 90       	pop	r12
    9d4c:	0c 94 a9 77 	jmp	0xef52	; 0xef52 <ELClientWebServer::setArgString(char const*, char const*)>

00009d50 <HempyModule_Web::websiteEvent_Refresh(char*)>:
_ZN15HempyModule_Web20websiteEvent_RefreshEPc():
    9d50:	ef 92       	push	r14
    9d52:	ff 92       	push	r15
    9d54:	0f 93       	push	r16
    9d56:	1f 93       	push	r17
    9d58:	cf 93       	push	r28
    9d5a:	df 93       	push	r29
    9d5c:	ec 01       	movw	r28, r24
    9d5e:	8b 81       	ldd	r24, Y+3	; 0x03
    9d60:	0e 94 03 35 	call	0x6a06	; 0x6a06 <toText_onlineStatus(bool)>
    9d64:	8c 01       	movw	r16, r24
    9d66:	e8 81       	ld	r30, Y
    9d68:	f9 81       	ldd	r31, Y+1	; 0x01
    9d6a:	36 97       	sbiw	r30, 0x06	; 6
    9d6c:	80 81       	ld	r24, Z
    9d6e:	91 81       	ldd	r25, Z+1	; 0x01
    9d70:	41 e0       	ldi	r20, 0x01	; 1
    9d72:	62 e4       	ldi	r22, 0x42	; 66
    9d74:	78 e1       	ldi	r23, 0x18	; 24
    9d76:	8c 0f       	add	r24, r28
    9d78:	9d 1f       	adc	r25, r29
    9d7a:	0e 94 7e 19 	call	0x32fc	; 0x32fc <Common::getName(__FlashStringHelper const*, bool)>
    9d7e:	a8 01       	movw	r20, r16
    9d80:	bc 01       	movw	r22, r24
    9d82:	89 ee       	ldi	r24, 0xE9	; 233
    9d84:	9c e0       	ldi	r25, 0x0C	; 12
    9d86:	0e 94 a9 77 	call	0xef52	; 0xef52 <ELClientWebServer::setArgString(char const*, char const*)>
    9d8a:	8b e4       	ldi	r24, 0x4B	; 75
    9d8c:	e8 2e       	mov	r14, r24
    9d8e:	84 e1       	ldi	r24, 0x14	; 20
    9d90:	f8 2e       	mov	r15, r24
    9d92:	f7 01       	movw	r30, r14
    9d94:	64 85       	ldd	r22, Z+12	; 0x0c
    9d96:	75 85       	ldd	r23, Z+13	; 0x0d
    9d98:	86 85       	ldd	r24, Z+14	; 0x0e
    9d9a:	97 85       	ldd	r25, Z+15	; 0x0f
    9d9c:	0e 94 8e 34 	call	0x691c	; 0x691c <toText_weight(float)>
    9da0:	8c 01       	movw	r16, r24
    9da2:	e8 81       	ld	r30, Y
    9da4:	f9 81       	ldd	r31, Y+1	; 0x01
    9da6:	36 97       	sbiw	r30, 0x06	; 6
    9da8:	80 81       	ld	r24, Z
    9daa:	91 81       	ldd	r25, Z+1	; 0x01
    9dac:	41 e0       	ldi	r20, 0x01	; 1
    9dae:	6e e3       	ldi	r22, 0x3E	; 62
    9db0:	78 e1       	ldi	r23, 0x18	; 24
    9db2:	8c 0f       	add	r24, r28
    9db4:	9d 1f       	adc	r25, r29
    9db6:	0e 94 7e 19 	call	0x32fc	; 0x32fc <Common::getName(__FlashStringHelper const*, bool)>
    9dba:	a8 01       	movw	r20, r16
    9dbc:	bc 01       	movw	r22, r24
    9dbe:	89 ee       	ldi	r24, 0xE9	; 233
    9dc0:	9c e0       	ldi	r25, 0x0C	; 12
    9dc2:	0e 94 a9 77 	call	0xef52	; 0xef52 <ELClientWebServer::setArgString(char const*, char const*)>
    9dc6:	f7 01       	movw	r30, r14
    9dc8:	60 89       	ldd	r22, Z+16	; 0x10
    9dca:	71 89       	ldd	r23, Z+17	; 0x11
    9dcc:	82 89       	ldd	r24, Z+18	; 0x12
    9dce:	93 89       	ldd	r25, Z+19	; 0x13
    9dd0:	0e 94 8e 34 	call	0x691c	; 0x691c <toText_weight(float)>
    9dd4:	8c 01       	movw	r16, r24
    9dd6:	e8 81       	ld	r30, Y
    9dd8:	f9 81       	ldd	r31, Y+1	; 0x01
    9dda:	36 97       	sbiw	r30, 0x06	; 6
    9ddc:	80 81       	ld	r24, Z
    9dde:	91 81       	ldd	r25, Z+1	; 0x01
    9de0:	41 e0       	ldi	r20, 0x01	; 1
    9de2:	69 e3       	ldi	r22, 0x39	; 57
    9de4:	78 e1       	ldi	r23, 0x18	; 24
    9de6:	8c 0f       	add	r24, r28
    9de8:	9d 1f       	adc	r25, r29
    9dea:	0e 94 7e 19 	call	0x32fc	; 0x32fc <Common::getName(__FlashStringHelper const*, bool)>
    9dee:	a8 01       	movw	r20, r16
    9df0:	bc 01       	movw	r22, r24
    9df2:	89 ee       	ldi	r24, 0xE9	; 233
    9df4:	9c e0       	ldi	r25, 0x0C	; 12
    9df6:	0e 94 a9 77 	call	0xef52	; 0xef52 <ELClientWebServer::setArgString(char const*, char const*)>
    9dfa:	f7 01       	movw	r30, r14
    9dfc:	00 8d       	ldd	r16, Z+24	; 0x18
    9dfe:	11 8d       	ldd	r17, Z+25	; 0x19
    9e00:	22 8d       	ldd	r18, Z+26	; 0x1a
    9e02:	33 8d       	ldd	r19, Z+27	; 0x1b
    9e04:	64 89       	ldd	r22, Z+20	; 0x14
    9e06:	75 89       	ldd	r23, Z+21	; 0x15
    9e08:	86 89       	ldd	r24, Z+22	; 0x16
    9e0a:	97 89       	ldd	r25, Z+23	; 0x17
    9e0c:	42 ec       	ldi	r20, 0xC2	; 194
    9e0e:	58 e0       	ldi	r21, 0x08	; 8
    9e10:	0e 94 c9 33 	call	0x6792	; 0x6792 <toText(float, char const*, float)>
    9e14:	8c 01       	movw	r16, r24
    9e16:	e8 81       	ld	r30, Y
    9e18:	f9 81       	ldd	r31, Y+1	; 0x01
    9e1a:	36 97       	sbiw	r30, 0x06	; 6
    9e1c:	80 81       	ld	r24, Z
    9e1e:	91 81       	ldd	r25, Z+1	; 0x01
    9e20:	41 e0       	ldi	r20, 0x01	; 1
    9e22:	63 e3       	ldi	r22, 0x33	; 51
    9e24:	78 e1       	ldi	r23, 0x18	; 24
    9e26:	8c 0f       	add	r24, r28
    9e28:	9d 1f       	adc	r25, r29
    9e2a:	0e 94 7e 19 	call	0x32fc	; 0x32fc <Common::getName(__FlashStringHelper const*, bool)>
    9e2e:	a8 01       	movw	r20, r16
    9e30:	bc 01       	movw	r22, r24
    9e32:	89 ee       	ldi	r24, 0xE9	; 233
    9e34:	9c e0       	ldi	r25, 0x0C	; 12
    9e36:	0e 94 a9 77 	call	0xef52	; 0xef52 <ELClientWebServer::setArgString(char const*, char const*)>
    9e3a:	f7 01       	movw	r30, r14
    9e3c:	82 81       	ldd	r24, Z+2	; 0x02
    9e3e:	93 81       	ldd	r25, Z+3	; 0x03
    9e40:	0e 94 db 35 	call	0x6bb6	; 0x6bb6 <toText_hempyState(HempyStates)>
    9e44:	8c 01       	movw	r16, r24
    9e46:	e8 81       	ld	r30, Y
    9e48:	f9 81       	ldd	r31, Y+1	; 0x01
    9e4a:	36 97       	sbiw	r30, 0x06	; 6
    9e4c:	80 81       	ld	r24, Z
    9e4e:	91 81       	ldd	r25, Z+1	; 0x01
    9e50:	41 e0       	ldi	r20, 0x01	; 1
    9e52:	6f e2       	ldi	r22, 0x2F	; 47
    9e54:	78 e1       	ldi	r23, 0x18	; 24
    9e56:	8c 0f       	add	r24, r28
    9e58:	9d 1f       	adc	r25, r29
    9e5a:	0e 94 7e 19 	call	0x32fc	; 0x32fc <Common::getName(__FlashStringHelper const*, bool)>
    9e5e:	a8 01       	movw	r20, r16
    9e60:	bc 01       	movw	r22, r24
    9e62:	89 ee       	ldi	r24, 0xE9	; 233
    9e64:	9c e0       	ldi	r25, 0x0C	; 12
    9e66:	0e 94 a9 77 	call	0xef52	; 0xef52 <ELClientWebServer::setArgString(char const*, char const*)>
    9e6a:	f7 01       	movw	r30, r14
    9e6c:	84 81       	ldd	r24, Z+4	; 0x04
    9e6e:	95 81       	ldd	r25, Z+5	; 0x05
    9e70:	0e 94 3a 35 	call	0x6a74	; 0x6a74 <toText_waterPumpState(WaterPumpStates)>
    9e74:	8c 01       	movw	r16, r24
    9e76:	e8 81       	ld	r30, Y
    9e78:	f9 81       	ldd	r31, Y+1	; 0x01
    9e7a:	36 97       	sbiw	r30, 0x06	; 6
    9e7c:	80 81       	ld	r24, Z
    9e7e:	91 81       	ldd	r25, Z+1	; 0x01
    9e80:	41 e0       	ldi	r20, 0x01	; 1
    9e82:	6b e2       	ldi	r22, 0x2B	; 43
    9e84:	78 e1       	ldi	r23, 0x18	; 24
    9e86:	8c 0f       	add	r24, r28
    9e88:	9d 1f       	adc	r25, r29
    9e8a:	0e 94 7e 19 	call	0x32fc	; 0x32fc <Common::getName(__FlashStringHelper const*, bool)>
    9e8e:	a8 01       	movw	r20, r16
    9e90:	bc 01       	movw	r22, r24
    9e92:	89 ee       	ldi	r24, 0xE9	; 233
    9e94:	9c e0       	ldi	r25, 0x0C	; 12
    9e96:	0e 94 a9 77 	call	0xef52	; 0xef52 <ELClientWebServer::setArgString(char const*, char const*)>
    9e9a:	92 e1       	ldi	r25, 0x12	; 18
    9e9c:	e9 2e       	mov	r14, r25
    9e9e:	94 e1       	ldi	r25, 0x14	; 20
    9ea0:	f9 2e       	mov	r15, r25
    9ea2:	f7 01       	movw	r30, r14
    9ea4:	64 85       	ldd	r22, Z+12	; 0x0c
    9ea6:	75 85       	ldd	r23, Z+13	; 0x0d
    9ea8:	86 85       	ldd	r24, Z+14	; 0x0e
    9eaa:	97 85       	ldd	r25, Z+15	; 0x0f
    9eac:	0e 94 8e 34 	call	0x691c	; 0x691c <toText_weight(float)>
    9eb0:	8c 01       	movw	r16, r24
    9eb2:	e8 81       	ld	r30, Y
    9eb4:	f9 81       	ldd	r31, Y+1	; 0x01
    9eb6:	36 97       	sbiw	r30, 0x06	; 6
    9eb8:	80 81       	ld	r24, Z
    9eba:	91 81       	ldd	r25, Z+1	; 0x01
    9ebc:	41 e0       	ldi	r20, 0x01	; 1
    9ebe:	67 e2       	ldi	r22, 0x27	; 39
    9ec0:	78 e1       	ldi	r23, 0x18	; 24
    9ec2:	8c 0f       	add	r24, r28
    9ec4:	9d 1f       	adc	r25, r29
    9ec6:	0e 94 7e 19 	call	0x32fc	; 0x32fc <Common::getName(__FlashStringHelper const*, bool)>
    9eca:	a8 01       	movw	r20, r16
    9ecc:	bc 01       	movw	r22, r24
    9ece:	89 ee       	ldi	r24, 0xE9	; 233
    9ed0:	9c e0       	ldi	r25, 0x0C	; 12
    9ed2:	0e 94 a9 77 	call	0xef52	; 0xef52 <ELClientWebServer::setArgString(char const*, char const*)>
    9ed6:	f7 01       	movw	r30, r14
    9ed8:	60 89       	ldd	r22, Z+16	; 0x10
    9eda:	71 89       	ldd	r23, Z+17	; 0x11
    9edc:	82 89       	ldd	r24, Z+18	; 0x12
    9ede:	93 89       	ldd	r25, Z+19	; 0x13
    9ee0:	0e 94 8e 34 	call	0x691c	; 0x691c <toText_weight(float)>
    9ee4:	8c 01       	movw	r16, r24
    9ee6:	e8 81       	ld	r30, Y
    9ee8:	f9 81       	ldd	r31, Y+1	; 0x01
    9eea:	36 97       	sbiw	r30, 0x06	; 6
    9eec:	80 81       	ld	r24, Z
    9eee:	91 81       	ldd	r25, Z+1	; 0x01
    9ef0:	41 e0       	ldi	r20, 0x01	; 1
    9ef2:	62 e2       	ldi	r22, 0x22	; 34
    9ef4:	78 e1       	ldi	r23, 0x18	; 24
    9ef6:	8c 0f       	add	r24, r28
    9ef8:	9d 1f       	adc	r25, r29
    9efa:	0e 94 7e 19 	call	0x32fc	; 0x32fc <Common::getName(__FlashStringHelper const*, bool)>
    9efe:	a8 01       	movw	r20, r16
    9f00:	bc 01       	movw	r22, r24
    9f02:	89 ee       	ldi	r24, 0xE9	; 233
    9f04:	9c e0       	ldi	r25, 0x0C	; 12
    9f06:	0e 94 a9 77 	call	0xef52	; 0xef52 <ELClientWebServer::setArgString(char const*, char const*)>
    9f0a:	f7 01       	movw	r30, r14
    9f0c:	00 8d       	ldd	r16, Z+24	; 0x18
    9f0e:	11 8d       	ldd	r17, Z+25	; 0x19
    9f10:	22 8d       	ldd	r18, Z+26	; 0x1a
    9f12:	33 8d       	ldd	r19, Z+27	; 0x1b
    9f14:	64 89       	ldd	r22, Z+20	; 0x14
    9f16:	75 89       	ldd	r23, Z+21	; 0x15
    9f18:	86 89       	ldd	r24, Z+22	; 0x16
    9f1a:	97 89       	ldd	r25, Z+23	; 0x17
    9f1c:	42 ec       	ldi	r20, 0xC2	; 194
    9f1e:	58 e0       	ldi	r21, 0x08	; 8
    9f20:	0e 94 c9 33 	call	0x6792	; 0x6792 <toText(float, char const*, float)>
    9f24:	8c 01       	movw	r16, r24
    9f26:	e8 81       	ld	r30, Y
    9f28:	f9 81       	ldd	r31, Y+1	; 0x01
    9f2a:	36 97       	sbiw	r30, 0x06	; 6
    9f2c:	80 81       	ld	r24, Z
    9f2e:	91 81       	ldd	r25, Z+1	; 0x01
    9f30:	41 e0       	ldi	r20, 0x01	; 1
    9f32:	6c e1       	ldi	r22, 0x1C	; 28
    9f34:	78 e1       	ldi	r23, 0x18	; 24
    9f36:	8c 0f       	add	r24, r28
    9f38:	9d 1f       	adc	r25, r29
    9f3a:	0e 94 7e 19 	call	0x32fc	; 0x32fc <Common::getName(__FlashStringHelper const*, bool)>
    9f3e:	a8 01       	movw	r20, r16
    9f40:	bc 01       	movw	r22, r24
    9f42:	89 ee       	ldi	r24, 0xE9	; 233
    9f44:	9c e0       	ldi	r25, 0x0C	; 12
    9f46:	0e 94 a9 77 	call	0xef52	; 0xef52 <ELClientWebServer::setArgString(char const*, char const*)>
    9f4a:	f7 01       	movw	r30, r14
    9f4c:	82 81       	ldd	r24, Z+2	; 0x02
    9f4e:	93 81       	ldd	r25, Z+3	; 0x03
    9f50:	0e 94 db 35 	call	0x6bb6	; 0x6bb6 <toText_hempyState(HempyStates)>
    9f54:	8c 01       	movw	r16, r24
    9f56:	e8 81       	ld	r30, Y
    9f58:	f9 81       	ldd	r31, Y+1	; 0x01
    9f5a:	36 97       	sbiw	r30, 0x06	; 6
    9f5c:	80 81       	ld	r24, Z
    9f5e:	91 81       	ldd	r25, Z+1	; 0x01
    9f60:	41 e0       	ldi	r20, 0x01	; 1
    9f62:	68 e1       	ldi	r22, 0x18	; 24
    9f64:	78 e1       	ldi	r23, 0x18	; 24
    9f66:	8c 0f       	add	r24, r28
    9f68:	9d 1f       	adc	r25, r29
    9f6a:	0e 94 7e 19 	call	0x32fc	; 0x32fc <Common::getName(__FlashStringHelper const*, bool)>
    9f6e:	a8 01       	movw	r20, r16
    9f70:	bc 01       	movw	r22, r24
    9f72:	89 ee       	ldi	r24, 0xE9	; 233
    9f74:	9c e0       	ldi	r25, 0x0C	; 12
    9f76:	0e 94 a9 77 	call	0xef52	; 0xef52 <ELClientWebServer::setArgString(char const*, char const*)>
    9f7a:	f7 01       	movw	r30, r14
    9f7c:	84 81       	ldd	r24, Z+4	; 0x04
    9f7e:	95 81       	ldd	r25, Z+5	; 0x05
    9f80:	0e 94 3a 35 	call	0x6a74	; 0x6a74 <toText_waterPumpState(WaterPumpStates)>
    9f84:	7c 01       	movw	r14, r24
    9f86:	e8 81       	ld	r30, Y
    9f88:	f9 81       	ldd	r31, Y+1	; 0x01
    9f8a:	36 97       	sbiw	r30, 0x06	; 6
    9f8c:	80 81       	ld	r24, Z
    9f8e:	91 81       	ldd	r25, Z+1	; 0x01
    9f90:	41 e0       	ldi	r20, 0x01	; 1
    9f92:	64 e1       	ldi	r22, 0x14	; 20
    9f94:	78 e1       	ldi	r23, 0x18	; 24
    9f96:	8c 0f       	add	r24, r28
    9f98:	9d 1f       	adc	r25, r29
    9f9a:	0e 94 7e 19 	call	0x32fc	; 0x32fc <Common::getName(__FlashStringHelper const*, bool)>
    9f9e:	a7 01       	movw	r20, r14
    9fa0:	bc 01       	movw	r22, r24
    9fa2:	89 ee       	ldi	r24, 0xE9	; 233
    9fa4:	9c e0       	ldi	r25, 0x0C	; 12
    9fa6:	df 91       	pop	r29
    9fa8:	cf 91       	pop	r28
    9faa:	1f 91       	pop	r17
    9fac:	0f 91       	pop	r16
    9fae:	ff 90       	pop	r15
    9fb0:	ef 90       	pop	r14
    9fb2:	0c 94 a9 77 	jmp	0xef52	; 0xef52 <ELClientWebServer::setArgString(char const*, char const*)>

00009fb6 <HempyModule_Web::commandEvent(char*, char*)>:
_ZN15HempyModule_Web12commandEventEPcS0_():
    9fb6:	cf 92       	push	r12
    9fb8:	df 92       	push	r13
    9fba:	ff 92       	push	r15
    9fbc:	0f 93       	push	r16
    9fbe:	1f 93       	push	r17
    9fc0:	cf 93       	push	r28
    9fc2:	df 93       	push	r29
    9fc4:	ec 01       	movw	r28, r24
    9fc6:	8a 01       	movw	r16, r20
    9fc8:	e8 81       	ld	r30, Y
    9fca:	f9 81       	ldd	r31, Y+1	; 0x01
    9fcc:	36 97       	sbiw	r30, 0x06	; 6
    9fce:	80 81       	ld	r24, Z
    9fd0:	91 81       	ldd	r25, Z+1	; 0x01
    9fd2:	8c 0f       	add	r24, r28
    9fd4:	9d 1f       	adc	r25, r29
    9fd6:	0e 94 25 19 	call	0x324a	; 0x324a <Common::isThisMine(char const*)>
    9fda:	f8 2e       	mov	r15, r24
    9fdc:	88 23       	and	r24, r24
    9fde:	09 f4       	brne	.+2      	; 0x9fe2 <HempyModule_Web::commandEvent(char*, char*)+0x2c>
    9fe0:	c9 c0       	rjmp	.+402    	; 0xa174 <HempyModule_Web::commandEvent(char*, char*)+0x1be>
    9fe2:	6f e0       	ldi	r22, 0x0F	; 15
    9fe4:	78 e1       	ldi	r23, 0x18	; 24
    9fe6:	81 eb       	ldi	r24, 0xB1	; 177
    9fe8:	9d e0       	ldi	r25, 0x0D	; 13
    9fea:	0e 94 e5 94 	call	0x129ca	; 0x129ca <strcmp_P>
    9fee:	89 2b       	or	r24, r25
    9ff0:	b9 f4       	brne	.+46     	; 0xa020 <HempyModule_Web::commandEvent(char*, char*)+0x6a>
    9ff2:	81 e0       	ldi	r24, 0x01	; 1
    9ff4:	80 93 6a 14 	sts	0x146A, r24	; 0x80146a <HempyBucketCommand1ToSend+0x3>
    9ff8:	ea 85       	ldd	r30, Y+10	; 0x0a
    9ffa:	fb 85       	ldd	r31, Y+11	; 0x0b
    9ffc:	a0 81       	ld	r26, Z
    9ffe:	b1 81       	ldd	r27, Z+1	; 0x01
    a000:	50 97       	sbiw	r26, 0x10	; 16
    a002:	8d 91       	ld	r24, X+
    a004:	9c 91       	ld	r25, X
    a006:	8e 0f       	add	r24, r30
    a008:	9f 1f       	adc	r25, r31
    a00a:	dc 01       	movw	r26, r24
    a00c:	ed 91       	ld	r30, X+
    a00e:	fc 91       	ld	r31, X
    a010:	02 84       	ldd	r0, Z+10	; 0x0a
    a012:	f3 85       	ldd	r31, Z+11	; 0x0b
    a014:	e0 2d       	mov	r30, r0
    a016:	40 e0       	ldi	r20, 0x00	; 0
    a018:	68 ef       	ldi	r22, 0xF8	; 248
    a01a:	77 e1       	ldi	r23, 0x17	; 23
    a01c:	19 95       	eicall
    a01e:	a8 c0       	rjmp	.+336    	; 0xa170 <HempyModule_Web::commandEvent(char*, char*)+0x1ba>
    a020:	62 ef       	ldi	r22, 0xF2	; 242
    a022:	77 e1       	ldi	r23, 0x17	; 23
    a024:	81 eb       	ldi	r24, 0xB1	; 177
    a026:	9d e0       	ldi	r25, 0x0D	; 13
    a028:	0e 94 e5 94 	call	0x129ca	; 0x129ca <strcmp_P>
    a02c:	89 2b       	or	r24, r25
    a02e:	b1 f4       	brne	.+44     	; 0xa05c <HempyModule_Web::commandEvent(char*, char*)+0xa6>
    a030:	81 e0       	ldi	r24, 0x01	; 1
    a032:	80 93 6b 14 	sts	0x146B, r24	; 0x80146b <HempyBucketCommand1ToSend+0x4>
    a036:	ea 85       	ldd	r30, Y+10	; 0x0a
    a038:	fb 85       	ldd	r31, Y+11	; 0x0b
    a03a:	a0 81       	ld	r26, Z
    a03c:	b1 81       	ldd	r27, Z+1	; 0x01
    a03e:	50 97       	sbiw	r26, 0x10	; 16
    a040:	8d 91       	ld	r24, X+
    a042:	9c 91       	ld	r25, X
    a044:	8e 0f       	add	r24, r30
    a046:	9f 1f       	adc	r25, r31
    a048:	dc 01       	movw	r26, r24
    a04a:	ed 91       	ld	r30, X+
    a04c:	fc 91       	ld	r31, X
    a04e:	02 84       	ldd	r0, Z+10	; 0x0a
    a050:	f3 85       	ldd	r31, Z+11	; 0x0b
    a052:	e0 2d       	mov	r30, r0
    a054:	40 e0       	ldi	r20, 0x00	; 0
    a056:	66 ed       	ldi	r22, 0xD6	; 214
    a058:	77 e1       	ldi	r23, 0x17	; 23
    a05a:	e0 cf       	rjmp	.-64     	; 0xa01c <HempyModule_Web::commandEvent(char*, char*)+0x66>
    a05c:	60 ed       	ldi	r22, 0xD0	; 208
    a05e:	77 e1       	ldi	r23, 0x17	; 23
    a060:	81 eb       	ldi	r24, 0xB1	; 177
    a062:	9d e0       	ldi	r25, 0x0D	; 13
    a064:	0e 94 e5 94 	call	0x129ca	; 0x129ca <strcmp_P>
    a068:	89 2b       	or	r24, r25
    a06a:	b1 f4       	brne	.+44     	; 0xa098 <HempyModule_Web::commandEvent(char*, char*)+0xe2>
    a06c:	81 e0       	ldi	r24, 0x01	; 1
    a06e:	80 93 69 14 	sts	0x1469, r24	; 0x801469 <HempyBucketCommand1ToSend+0x2>
    a072:	ea 85       	ldd	r30, Y+10	; 0x0a
    a074:	fb 85       	ldd	r31, Y+11	; 0x0b
    a076:	a0 81       	ld	r26, Z
    a078:	b1 81       	ldd	r27, Z+1	; 0x01
    a07a:	50 97       	sbiw	r26, 0x10	; 16
    a07c:	8d 91       	ld	r24, X+
    a07e:	9c 91       	ld	r25, X
    a080:	8e 0f       	add	r24, r30
    a082:	9f 1f       	adc	r25, r31
    a084:	dc 01       	movw	r26, r24
    a086:	ed 91       	ld	r30, X+
    a088:	fc 91       	ld	r31, X
    a08a:	02 84       	ldd	r0, Z+10	; 0x0a
    a08c:	f3 85       	ldd	r31, Z+11	; 0x0b
    a08e:	e0 2d       	mov	r30, r0
    a090:	40 e0       	ldi	r20, 0x00	; 0
    a092:	69 eb       	ldi	r22, 0xB9	; 185
    a094:	77 e1       	ldi	r23, 0x17	; 23
    a096:	c2 cf       	rjmp	.-124    	; 0xa01c <HempyModule_Web::commandEvent(char*, char*)+0x66>
    a098:	61 eb       	ldi	r22, 0xB1	; 177
    a09a:	77 e1       	ldi	r23, 0x17	; 23
    a09c:	81 eb       	ldi	r24, 0xB1	; 177
    a09e:	9d e0       	ldi	r25, 0x0D	; 13
    a0a0:	0e 94 e5 94 	call	0x129ca	; 0x129ca <strcmp_P>
    a0a4:	89 2b       	or	r24, r25
    a0a6:	b1 f4       	brne	.+44     	; 0xa0d4 <HempyModule_Web::commandEvent(char*, char*)+0x11e>
    a0a8:	81 e0       	ldi	r24, 0x01	; 1
    a0aa:	80 93 6c 14 	sts	0x146C, r24	; 0x80146c <HempyBucketCommand1ToSend+0x5>
    a0ae:	ea 85       	ldd	r30, Y+10	; 0x0a
    a0b0:	fb 85       	ldd	r31, Y+11	; 0x0b
    a0b2:	a0 81       	ld	r26, Z
    a0b4:	b1 81       	ldd	r27, Z+1	; 0x01
    a0b6:	50 97       	sbiw	r26, 0x10	; 16
    a0b8:	8d 91       	ld	r24, X+
    a0ba:	9c 91       	ld	r25, X
    a0bc:	8e 0f       	add	r24, r30
    a0be:	9f 1f       	adc	r25, r31
    a0c0:	dc 01       	movw	r26, r24
    a0c2:	ed 91       	ld	r30, X+
    a0c4:	fc 91       	ld	r31, X
    a0c6:	02 84       	ldd	r0, Z+10	; 0x0a
    a0c8:	f3 85       	ldd	r31, Z+11	; 0x0b
    a0ca:	e0 2d       	mov	r30, r0
    a0cc:	40 e0       	ldi	r20, 0x00	; 0
    a0ce:	6b e9       	ldi	r22, 0x9B	; 155
    a0d0:	77 e1       	ldi	r23, 0x17	; 23
    a0d2:	a4 cf       	rjmp	.-184    	; 0xa01c <HempyModule_Web::commandEvent(char*, char*)+0x66>
    a0d4:	62 e9       	ldi	r22, 0x92	; 146
    a0d6:	77 e1       	ldi	r23, 0x17	; 23
    a0d8:	81 eb       	ldi	r24, 0xB1	; 177
    a0da:	9d e0       	ldi	r25, 0x0D	; 13
    a0dc:	0e 94 e5 94 	call	0x129ca	; 0x129ca <strcmp_P>
    a0e0:	89 2b       	or	r24, r25
    a0e2:	b1 f4       	brne	.+44     	; 0xa110 <HempyModule_Web::commandEvent(char*, char*)+0x15a>
    a0e4:	81 e0       	ldi	r24, 0x01	; 1
    a0e6:	80 93 6d 14 	sts	0x146D, r24	; 0x80146d <HempyBucketCommand1ToSend+0x6>
    a0ea:	ea 85       	ldd	r30, Y+10	; 0x0a
    a0ec:	fb 85       	ldd	r31, Y+11	; 0x0b
    a0ee:	a0 81       	ld	r26, Z
    a0f0:	b1 81       	ldd	r27, Z+1	; 0x01
    a0f2:	50 97       	sbiw	r26, 0x10	; 16
    a0f4:	8d 91       	ld	r24, X+
    a0f6:	9c 91       	ld	r25, X
    a0f8:	8e 0f       	add	r24, r30
    a0fa:	9f 1f       	adc	r25, r31
    a0fc:	dc 01       	movw	r26, r24
    a0fe:	ed 91       	ld	r30, X+
    a100:	fc 91       	ld	r31, X
    a102:	02 84       	ldd	r0, Z+10	; 0x0a
    a104:	f3 85       	ldd	r31, Z+11	; 0x0b
    a106:	e0 2d       	mov	r30, r0
    a108:	40 e0       	ldi	r20, 0x00	; 0
    a10a:	6a e7       	ldi	r22, 0x7A	; 122
    a10c:	77 e1       	ldi	r23, 0x17	; 23
    a10e:	86 cf       	rjmp	.-244    	; 0xa01c <HempyModule_Web::commandEvent(char*, char*)+0x66>
    a110:	61 e7       	ldi	r22, 0x71	; 113
    a112:	77 e1       	ldi	r23, 0x17	; 23
    a114:	81 eb       	ldi	r24, 0xB1	; 177
    a116:	9d e0       	ldi	r25, 0x0D	; 13
    a118:	0e 94 e5 94 	call	0x129ca	; 0x129ca <strcmp_P>
    a11c:	89 2b       	or	r24, r25
    a11e:	b1 f4       	brne	.+44     	; 0xa14c <HempyModule_Web::commandEvent(char*, char*)+0x196>
    a120:	81 e0       	ldi	r24, 0x01	; 1
    a122:	80 93 6e 14 	sts	0x146E, r24	; 0x80146e <HempyBucketCommand1ToSend+0x7>
    a126:	ea 85       	ldd	r30, Y+10	; 0x0a
    a128:	fb 85       	ldd	r31, Y+11	; 0x0b
    a12a:	a0 81       	ld	r26, Z
    a12c:	b1 81       	ldd	r27, Z+1	; 0x01
    a12e:	50 97       	sbiw	r26, 0x10	; 16
    a130:	8d 91       	ld	r24, X+
    a132:	9c 91       	ld	r25, X
    a134:	8e 0f       	add	r24, r30
    a136:	9f 1f       	adc	r25, r31
    a138:	dc 01       	movw	r26, r24
    a13a:	ed 91       	ld	r30, X+
    a13c:	fc 91       	ld	r31, X
    a13e:	02 84       	ldd	r0, Z+10	; 0x0a
    a140:	f3 85       	ldd	r31, Z+11	; 0x0b
    a142:	e0 2d       	mov	r30, r0
    a144:	40 e0       	ldi	r20, 0x00	; 0
    a146:	65 e5       	ldi	r22, 0x55	; 85
    a148:	77 e1       	ldi	r23, 0x17	; 23
    a14a:	68 cf       	rjmp	.-304    	; 0xa01c <HempyModule_Web::commandEvent(char*, char*)+0x66>
    a14c:	60 e5       	ldi	r22, 0x50	; 80
    a14e:	77 e1       	ldi	r23, 0x17	; 23
    a150:	81 eb       	ldi	r24, 0xB1	; 177
    a152:	9d e0       	ldi	r25, 0x0D	; 13
    a154:	0e 94 e5 94 	call	0x129ca	; 0x129ca <strcmp_P>
    a158:	89 2b       	or	r24, r25
    a15a:	a9 f4       	brne	.+42     	; 0xa186 <HempyModule_Web::commandEvent(char*, char*)+0x1d0>
    a15c:	ca 88       	ldd	r12, Y+18	; 0x12
    a15e:	db 88       	ldd	r13, Y+19	; 0x13
    a160:	c8 01       	movw	r24, r16
    a162:	0e 94 38 35 	call	0x6a70	; 0x6a70 <toFloat(char*)>
    a166:	f6 01       	movw	r30, r12
    a168:	60 83       	st	Z, r22
    a16a:	71 83       	std	Z+1, r23	; 0x01
    a16c:	82 83       	std	Z+2, r24	; 0x02
    a16e:	93 83       	std	Z+3, r25	; 0x03
    a170:	81 e0       	ldi	r24, 0x01	; 1
    a172:	8a 83       	std	Y+2, r24	; 0x02
    a174:	8f 2d       	mov	r24, r15
    a176:	df 91       	pop	r29
    a178:	cf 91       	pop	r28
    a17a:	1f 91       	pop	r17
    a17c:	0f 91       	pop	r16
    a17e:	ff 90       	pop	r15
    a180:	df 90       	pop	r13
    a182:	cf 90       	pop	r12
    a184:	08 95       	ret
    a186:	6b e4       	ldi	r22, 0x4B	; 75
    a188:	77 e1       	ldi	r23, 0x17	; 23
    a18a:	81 eb       	ldi	r24, 0xB1	; 177
    a18c:	9d e0       	ldi	r25, 0x0D	; 13
    a18e:	0e 94 e5 94 	call	0x129ca	; 0x129ca <strcmp_P>
    a192:	89 2b       	or	r24, r25
    a194:	f9 f4       	brne	.+62     	; 0xa1d4 <HempyModule_Web::commandEvent(char*, char*)+0x21e>
    a196:	ca 88       	ldd	r12, Y+18	; 0x12
    a198:	db 88       	ldd	r13, Y+19	; 0x13
    a19a:	c8 01       	movw	r24, r16
    a19c:	0e 94 38 35 	call	0x6a70	; 0x6a70 <toFloat(char*)>
    a1a0:	d6 01       	movw	r26, r12
    a1a2:	14 96       	adiw	r26, 0x04	; 4
    a1a4:	6d 93       	st	X+, r22
    a1a6:	7d 93       	st	X+, r23
    a1a8:	8d 93       	st	X+, r24
    a1aa:	9c 93       	st	X, r25
    a1ac:	17 97       	sbiw	r26, 0x07	; 7
    a1ae:	ea 85       	ldd	r30, Y+10	; 0x0a
    a1b0:	fb 85       	ldd	r31, Y+11	; 0x0b
    a1b2:	a0 81       	ld	r26, Z
    a1b4:	b1 81       	ldd	r27, Z+1	; 0x01
    a1b6:	50 97       	sbiw	r26, 0x10	; 16
    a1b8:	8d 91       	ld	r24, X+
    a1ba:	9c 91       	ld	r25, X
    a1bc:	8e 0f       	add	r24, r30
    a1be:	9f 1f       	adc	r25, r31
    a1c0:	dc 01       	movw	r26, r24
    a1c2:	ed 91       	ld	r30, X+
    a1c4:	fc 91       	ld	r31, X
    a1c6:	02 84       	ldd	r0, Z+10	; 0x0a
    a1c8:	f3 85       	ldd	r31, Z+11	; 0x0b
    a1ca:	e0 2d       	mov	r30, r0
    a1cc:	40 e0       	ldi	r20, 0x00	; 0
    a1ce:	62 e3       	ldi	r22, 0x32	; 50
    a1d0:	77 e1       	ldi	r23, 0x17	; 23
    a1d2:	24 cf       	rjmp	.-440    	; 0xa01c <HempyModule_Web::commandEvent(char*, char*)+0x66>
    a1d4:	6d e2       	ldi	r22, 0x2D	; 45
    a1d6:	77 e1       	ldi	r23, 0x17	; 23
    a1d8:	81 eb       	ldi	r24, 0xB1	; 177
    a1da:	9d e0       	ldi	r25, 0x0D	; 13
    a1dc:	0e 94 e5 94 	call	0x129ca	; 0x129ca <strcmp_P>
    a1e0:	89 2b       	or	r24, r25
    a1e2:	e9 f4       	brne	.+58     	; 0xa21e <HempyModule_Web::commandEvent(char*, char*)+0x268>
    a1e4:	ca 88       	ldd	r12, Y+18	; 0x12
    a1e6:	db 88       	ldd	r13, Y+19	; 0x13
    a1e8:	c8 01       	movw	r24, r16
    a1ea:	0e 94 38 35 	call	0x6a70	; 0x6a70 <toFloat(char*)>
    a1ee:	f6 01       	movw	r30, r12
    a1f0:	60 87       	std	Z+8, r22	; 0x08
    a1f2:	71 87       	std	Z+9, r23	; 0x09
    a1f4:	82 87       	std	Z+10, r24	; 0x0a
    a1f6:	93 87       	std	Z+11, r25	; 0x0b
    a1f8:	ea 85       	ldd	r30, Y+10	; 0x0a
    a1fa:	fb 85       	ldd	r31, Y+11	; 0x0b
    a1fc:	a0 81       	ld	r26, Z
    a1fe:	b1 81       	ldd	r27, Z+1	; 0x01
    a200:	50 97       	sbiw	r26, 0x10	; 16
    a202:	8d 91       	ld	r24, X+
    a204:	9c 91       	ld	r25, X
    a206:	8e 0f       	add	r24, r30
    a208:	9f 1f       	adc	r25, r31
    a20a:	dc 01       	movw	r26, r24
    a20c:	ed 91       	ld	r30, X+
    a20e:	fc 91       	ld	r31, X
    a210:	02 84       	ldd	r0, Z+10	; 0x0a
    a212:	f3 85       	ldd	r31, Z+11	; 0x0b
    a214:	e0 2d       	mov	r30, r0
    a216:	40 e0       	ldi	r20, 0x00	; 0
    a218:	60 e1       	ldi	r22, 0x10	; 16
    a21a:	77 e1       	ldi	r23, 0x17	; 23
    a21c:	ff ce       	rjmp	.-514    	; 0xa01c <HempyModule_Web::commandEvent(char*, char*)+0x66>
    a21e:	6b e0       	ldi	r22, 0x0B	; 11
    a220:	77 e1       	ldi	r23, 0x17	; 23
    a222:	81 eb       	ldi	r24, 0xB1	; 177
    a224:	9d e0       	ldi	r25, 0x0D	; 13
    a226:	0e 94 e5 94 	call	0x129ca	; 0x129ca <strcmp_P>
    a22a:	89 2b       	or	r24, r25
    a22c:	c9 f4       	brne	.+50     	; 0xa260 <HempyModule_Web::commandEvent(char*, char*)+0x2aa>
    a22e:	c8 01       	movw	r24, r16
    a230:	0e 94 36 35 	call	0x6a6c	; 0x6a6c <toInt(char*)>
    a234:	ea 89       	ldd	r30, Y+18	; 0x12
    a236:	fb 89       	ldd	r31, Y+19	; 0x13
    a238:	84 87       	std	Z+12, r24	; 0x0c
    a23a:	ea 85       	ldd	r30, Y+10	; 0x0a
    a23c:	fb 85       	ldd	r31, Y+11	; 0x0b
    a23e:	a0 81       	ld	r26, Z
    a240:	b1 81       	ldd	r27, Z+1	; 0x01
    a242:	50 97       	sbiw	r26, 0x10	; 16
    a244:	8d 91       	ld	r24, X+
    a246:	9c 91       	ld	r25, X
    a248:	8e 0f       	add	r24, r30
    a24a:	9f 1f       	adc	r25, r31
    a24c:	dc 01       	movw	r26, r24
    a24e:	ed 91       	ld	r30, X+
    a250:	fc 91       	ld	r31, X
    a252:	02 84       	ldd	r0, Z+10	; 0x0a
    a254:	f3 85       	ldd	r31, Z+11	; 0x0b
    a256:	e0 2d       	mov	r30, r0
    a258:	40 e0       	ldi	r20, 0x00	; 0
    a25a:	66 ef       	ldi	r22, 0xF6	; 246
    a25c:	76 e1       	ldi	r23, 0x16	; 22
    a25e:	de ce       	rjmp	.-580    	; 0xa01c <HempyModule_Web::commandEvent(char*, char*)+0x66>
    a260:	62 ef       	ldi	r22, 0xF2	; 242
    a262:	76 e1       	ldi	r23, 0x16	; 22
    a264:	81 eb       	ldi	r24, 0xB1	; 177
    a266:	9d e0       	ldi	r25, 0x0D	; 13
    a268:	0e 94 e5 94 	call	0x129ca	; 0x129ca <strcmp_P>
    a26c:	89 2b       	or	r24, r25
    a26e:	d1 f4       	brne	.+52     	; 0xa2a4 <HempyModule_Web::commandEvent(char*, char*)+0x2ee>
    a270:	c8 01       	movw	r24, r16
    a272:	0e 94 36 35 	call	0x6a6c	; 0x6a6c <toInt(char*)>
    a276:	ea 89       	ldd	r30, Y+18	; 0x12
    a278:	fb 89       	ldd	r31, Y+19	; 0x13
    a27a:	96 87       	std	Z+14, r25	; 0x0e
    a27c:	85 87       	std	Z+13, r24	; 0x0d
    a27e:	ea 85       	ldd	r30, Y+10	; 0x0a
    a280:	fb 85       	ldd	r31, Y+11	; 0x0b
    a282:	a0 81       	ld	r26, Z
    a284:	b1 81       	ldd	r27, Z+1	; 0x01
    a286:	50 97       	sbiw	r26, 0x10	; 16
    a288:	8d 91       	ld	r24, X+
    a28a:	9c 91       	ld	r25, X
    a28c:	8e 0f       	add	r24, r30
    a28e:	9f 1f       	adc	r25, r31
    a290:	dc 01       	movw	r26, r24
    a292:	ed 91       	ld	r30, X+
    a294:	fc 91       	ld	r31, X
    a296:	02 84       	ldd	r0, Z+10	; 0x0a
    a298:	f3 85       	ldd	r31, Z+11	; 0x0b
    a29a:	e0 2d       	mov	r30, r0
    a29c:	40 e0       	ldi	r20, 0x00	; 0
    a29e:	6b ed       	ldi	r22, 0xDB	; 219
    a2a0:	76 e1       	ldi	r23, 0x16	; 22
    a2a2:	bc ce       	rjmp	.-648    	; 0xa01c <HempyModule_Web::commandEvent(char*, char*)+0x66>
    a2a4:	67 ed       	ldi	r22, 0xD7	; 215
    a2a6:	76 e1       	ldi	r23, 0x16	; 22
    a2a8:	81 eb       	ldi	r24, 0xB1	; 177
    a2aa:	9d e0       	ldi	r25, 0x0D	; 13
    a2ac:	0e 94 e5 94 	call	0x129ca	; 0x129ca <strcmp_P>
    a2b0:	89 2b       	or	r24, r25
    a2b2:	d1 f4       	brne	.+52     	; 0xa2e8 <HempyModule_Web::commandEvent(char*, char*)+0x332>
    a2b4:	c8 01       	movw	r24, r16
    a2b6:	0e 94 36 35 	call	0x6a6c	; 0x6a6c <toInt(char*)>
    a2ba:	ea 89       	ldd	r30, Y+18	; 0x12
    a2bc:	fb 89       	ldd	r31, Y+19	; 0x13
    a2be:	90 8b       	std	Z+16, r25	; 0x10
    a2c0:	87 87       	std	Z+15, r24	; 0x0f
    a2c2:	ea 85       	ldd	r30, Y+10	; 0x0a
    a2c4:	fb 85       	ldd	r31, Y+11	; 0x0b
    a2c6:	a0 81       	ld	r26, Z
    a2c8:	b1 81       	ldd	r27, Z+1	; 0x01
    a2ca:	50 97       	sbiw	r26, 0x10	; 16
    a2cc:	8d 91       	ld	r24, X+
    a2ce:	9c 91       	ld	r25, X
    a2d0:	8e 0f       	add	r24, r30
    a2d2:	9f 1f       	adc	r25, r31
    a2d4:	dc 01       	movw	r26, r24
    a2d6:	ed 91       	ld	r30, X+
    a2d8:	fc 91       	ld	r31, X
    a2da:	02 84       	ldd	r0, Z+10	; 0x0a
    a2dc:	f3 85       	ldd	r31, Z+11	; 0x0b
    a2de:	e0 2d       	mov	r30, r0
    a2e0:	40 e0       	ldi	r20, 0x00	; 0
    a2e2:	61 ec       	ldi	r22, 0xC1	; 193
    a2e4:	76 e1       	ldi	r23, 0x16	; 22
    a2e6:	9a ce       	rjmp	.-716    	; 0xa01c <HempyModule_Web::commandEvent(char*, char*)+0x66>
    a2e8:	6c eb       	ldi	r22, 0xBC	; 188
    a2ea:	76 e1       	ldi	r23, 0x16	; 22
    a2ec:	81 eb       	ldi	r24, 0xB1	; 177
    a2ee:	9d e0       	ldi	r25, 0x0D	; 13
    a2f0:	0e 94 e5 94 	call	0x129ca	; 0x129ca <strcmp_P>
    a2f4:	89 2b       	or	r24, r25
    a2f6:	f1 f4       	brne	.+60     	; 0xa334 <HempyModule_Web::commandEvent(char*, char*)+0x37e>
    a2f8:	c8 01       	movw	r24, r16
    a2fa:	0e 94 38 35 	call	0x6a70	; 0x6a70 <toFloat(char*)>
    a2fe:	60 93 72 14 	sts	0x1472, r22	; 0x801472 <HempyBucketCommand1ToSend+0xb>
    a302:	70 93 73 14 	sts	0x1473, r23	; 0x801473 <HempyBucketCommand1ToSend+0xc>
    a306:	80 93 74 14 	sts	0x1474, r24	; 0x801474 <HempyBucketCommand1ToSend+0xd>
    a30a:	90 93 75 14 	sts	0x1475, r25	; 0x801475 <HempyBucketCommand1ToSend+0xe>
    a30e:	ea 85       	ldd	r30, Y+10	; 0x0a
    a310:	fb 85       	ldd	r31, Y+11	; 0x0b
    a312:	a0 81       	ld	r26, Z
    a314:	b1 81       	ldd	r27, Z+1	; 0x01
    a316:	50 97       	sbiw	r26, 0x10	; 16
    a318:	8d 91       	ld	r24, X+
    a31a:	9c 91       	ld	r25, X
    a31c:	8e 0f       	add	r24, r30
    a31e:	9f 1f       	adc	r25, r31
    a320:	dc 01       	movw	r26, r24
    a322:	ed 91       	ld	r30, X+
    a324:	fc 91       	ld	r31, X
    a326:	02 84       	ldd	r0, Z+10	; 0x0a
    a328:	f3 85       	ldd	r31, Z+11	; 0x0b
    a32a:	e0 2d       	mov	r30, r0
    a32c:	40 e0       	ldi	r20, 0x00	; 0
    a32e:	66 ea       	ldi	r22, 0xA6	; 166
    a330:	76 e1       	ldi	r23, 0x16	; 22
    a332:	74 ce       	rjmp	.-792    	; 0xa01c <HempyModule_Web::commandEvent(char*, char*)+0x66>
    a334:	61 ea       	ldi	r22, 0xA1	; 161
    a336:	76 e1       	ldi	r23, 0x16	; 22
    a338:	81 eb       	ldi	r24, 0xB1	; 177
    a33a:	9d e0       	ldi	r25, 0x0D	; 13
    a33c:	0e 94 e5 94 	call	0x129ca	; 0x129ca <strcmp_P>
    a340:	89 2b       	or	r24, r25
    a342:	b1 f4       	brne	.+44     	; 0xa370 <HempyModule_Web::commandEvent(char*, char*)+0x3ba>
    a344:	81 e0       	ldi	r24, 0x01	; 1
    a346:	80 93 31 14 	sts	0x1431, r24	; 0x801431 <HempyBucketCommand2ToSend+0x3>
    a34a:	ea 85       	ldd	r30, Y+10	; 0x0a
    a34c:	fb 85       	ldd	r31, Y+11	; 0x0b
    a34e:	a0 81       	ld	r26, Z
    a350:	b1 81       	ldd	r27, Z+1	; 0x01
    a352:	50 97       	sbiw	r26, 0x10	; 16
    a354:	8d 91       	ld	r24, X+
    a356:	9c 91       	ld	r25, X
    a358:	8e 0f       	add	r24, r30
    a35a:	9f 1f       	adc	r25, r31
    a35c:	dc 01       	movw	r26, r24
    a35e:	ed 91       	ld	r30, X+
    a360:	fc 91       	ld	r31, X
    a362:	02 84       	ldd	r0, Z+10	; 0x0a
    a364:	f3 85       	ldd	r31, Z+11	; 0x0b
    a366:	e0 2d       	mov	r30, r0
    a368:	40 e0       	ldi	r20, 0x00	; 0
    a36a:	6a e8       	ldi	r22, 0x8A	; 138
    a36c:	76 e1       	ldi	r23, 0x16	; 22
    a36e:	56 ce       	rjmp	.-852    	; 0xa01c <HempyModule_Web::commandEvent(char*, char*)+0x66>
    a370:	64 e8       	ldi	r22, 0x84	; 132
    a372:	76 e1       	ldi	r23, 0x16	; 22
    a374:	81 eb       	ldi	r24, 0xB1	; 177
    a376:	9d e0       	ldi	r25, 0x0D	; 13
    a378:	0e 94 e5 94 	call	0x129ca	; 0x129ca <strcmp_P>
    a37c:	89 2b       	or	r24, r25
    a37e:	b1 f4       	brne	.+44     	; 0xa3ac <HempyModule_Web::commandEvent(char*, char*)+0x3f6>
    a380:	81 e0       	ldi	r24, 0x01	; 1
    a382:	80 93 32 14 	sts	0x1432, r24	; 0x801432 <HempyBucketCommand2ToSend+0x4>
    a386:	ea 85       	ldd	r30, Y+10	; 0x0a
    a388:	fb 85       	ldd	r31, Y+11	; 0x0b
    a38a:	a0 81       	ld	r26, Z
    a38c:	b1 81       	ldd	r27, Z+1	; 0x01
    a38e:	50 97       	sbiw	r26, 0x10	; 16
    a390:	8d 91       	ld	r24, X+
    a392:	9c 91       	ld	r25, X
    a394:	8e 0f       	add	r24, r30
    a396:	9f 1f       	adc	r25, r31
    a398:	dc 01       	movw	r26, r24
    a39a:	ed 91       	ld	r30, X+
    a39c:	fc 91       	ld	r31, X
    a39e:	02 84       	ldd	r0, Z+10	; 0x0a
    a3a0:	f3 85       	ldd	r31, Z+11	; 0x0b
    a3a2:	e0 2d       	mov	r30, r0
    a3a4:	40 e0       	ldi	r20, 0x00	; 0
    a3a6:	68 e6       	ldi	r22, 0x68	; 104
    a3a8:	76 e1       	ldi	r23, 0x16	; 22
    a3aa:	38 ce       	rjmp	.-912    	; 0xa01c <HempyModule_Web::commandEvent(char*, char*)+0x66>
    a3ac:	62 e6       	ldi	r22, 0x62	; 98
    a3ae:	76 e1       	ldi	r23, 0x16	; 22
    a3b0:	81 eb       	ldi	r24, 0xB1	; 177
    a3b2:	9d e0       	ldi	r25, 0x0D	; 13
    a3b4:	0e 94 e5 94 	call	0x129ca	; 0x129ca <strcmp_P>
    a3b8:	89 2b       	or	r24, r25
    a3ba:	b1 f4       	brne	.+44     	; 0xa3e8 <HempyModule_Web::commandEvent(char*, char*)+0x432>
    a3bc:	81 e0       	ldi	r24, 0x01	; 1
    a3be:	80 93 30 14 	sts	0x1430, r24	; 0x801430 <HempyBucketCommand2ToSend+0x2>
    a3c2:	ea 85       	ldd	r30, Y+10	; 0x0a
    a3c4:	fb 85       	ldd	r31, Y+11	; 0x0b
    a3c6:	a0 81       	ld	r26, Z
    a3c8:	b1 81       	ldd	r27, Z+1	; 0x01
    a3ca:	50 97       	sbiw	r26, 0x10	; 16
    a3cc:	8d 91       	ld	r24, X+
    a3ce:	9c 91       	ld	r25, X
    a3d0:	8e 0f       	add	r24, r30
    a3d2:	9f 1f       	adc	r25, r31
    a3d4:	dc 01       	movw	r26, r24
    a3d6:	ed 91       	ld	r30, X+
    a3d8:	fc 91       	ld	r31, X
    a3da:	02 84       	ldd	r0, Z+10	; 0x0a
    a3dc:	f3 85       	ldd	r31, Z+11	; 0x0b
    a3de:	e0 2d       	mov	r30, r0
    a3e0:	40 e0       	ldi	r20, 0x00	; 0
    a3e2:	6b e4       	ldi	r22, 0x4B	; 75
    a3e4:	76 e1       	ldi	r23, 0x16	; 22
    a3e6:	1a ce       	rjmp	.-972    	; 0xa01c <HempyModule_Web::commandEvent(char*, char*)+0x66>
    a3e8:	63 e4       	ldi	r22, 0x43	; 67
    a3ea:	76 e1       	ldi	r23, 0x16	; 22
    a3ec:	81 eb       	ldi	r24, 0xB1	; 177
    a3ee:	9d e0       	ldi	r25, 0x0D	; 13
    a3f0:	0e 94 e5 94 	call	0x129ca	; 0x129ca <strcmp_P>
    a3f4:	89 2b       	or	r24, r25
    a3f6:	b1 f4       	brne	.+44     	; 0xa424 <HempyModule_Web::commandEvent(char*, char*)+0x46e>
    a3f8:	81 e0       	ldi	r24, 0x01	; 1
    a3fa:	80 93 33 14 	sts	0x1433, r24	; 0x801433 <HempyBucketCommand2ToSend+0x5>
    a3fe:	ea 85       	ldd	r30, Y+10	; 0x0a
    a400:	fb 85       	ldd	r31, Y+11	; 0x0b
    a402:	a0 81       	ld	r26, Z
    a404:	b1 81       	ldd	r27, Z+1	; 0x01
    a406:	50 97       	sbiw	r26, 0x10	; 16
    a408:	8d 91       	ld	r24, X+
    a40a:	9c 91       	ld	r25, X
    a40c:	8e 0f       	add	r24, r30
    a40e:	9f 1f       	adc	r25, r31
    a410:	dc 01       	movw	r26, r24
    a412:	ed 91       	ld	r30, X+
    a414:	fc 91       	ld	r31, X
    a416:	02 84       	ldd	r0, Z+10	; 0x0a
    a418:	f3 85       	ldd	r31, Z+11	; 0x0b
    a41a:	e0 2d       	mov	r30, r0
    a41c:	40 e0       	ldi	r20, 0x00	; 0
    a41e:	6d e2       	ldi	r22, 0x2D	; 45
    a420:	76 e1       	ldi	r23, 0x16	; 22
    a422:	fc cd       	rjmp	.-1032   	; 0xa01c <HempyModule_Web::commandEvent(char*, char*)+0x66>
    a424:	64 e2       	ldi	r22, 0x24	; 36
    a426:	76 e1       	ldi	r23, 0x16	; 22
    a428:	81 eb       	ldi	r24, 0xB1	; 177
    a42a:	9d e0       	ldi	r25, 0x0D	; 13
    a42c:	0e 94 e5 94 	call	0x129ca	; 0x129ca <strcmp_P>
    a430:	89 2b       	or	r24, r25
    a432:	b1 f4       	brne	.+44     	; 0xa460 <HempyModule_Web::commandEvent(char*, char*)+0x4aa>
    a434:	81 e0       	ldi	r24, 0x01	; 1
    a436:	80 93 34 14 	sts	0x1434, r24	; 0x801434 <HempyBucketCommand2ToSend+0x6>
    a43a:	ea 85       	ldd	r30, Y+10	; 0x0a
    a43c:	fb 85       	ldd	r31, Y+11	; 0x0b
    a43e:	a0 81       	ld	r26, Z
    a440:	b1 81       	ldd	r27, Z+1	; 0x01
    a442:	50 97       	sbiw	r26, 0x10	; 16
    a444:	8d 91       	ld	r24, X+
    a446:	9c 91       	ld	r25, X
    a448:	8e 0f       	add	r24, r30
    a44a:	9f 1f       	adc	r25, r31
    a44c:	dc 01       	movw	r26, r24
    a44e:	ed 91       	ld	r30, X+
    a450:	fc 91       	ld	r31, X
    a452:	02 84       	ldd	r0, Z+10	; 0x0a
    a454:	f3 85       	ldd	r31, Z+11	; 0x0b
    a456:	e0 2d       	mov	r30, r0
    a458:	40 e0       	ldi	r20, 0x00	; 0
    a45a:	6c e0       	ldi	r22, 0x0C	; 12
    a45c:	76 e1       	ldi	r23, 0x16	; 22
    a45e:	de cd       	rjmp	.-1092   	; 0xa01c <HempyModule_Web::commandEvent(char*, char*)+0x66>
    a460:	63 e0       	ldi	r22, 0x03	; 3
    a462:	76 e1       	ldi	r23, 0x16	; 22
    a464:	81 eb       	ldi	r24, 0xB1	; 177
    a466:	9d e0       	ldi	r25, 0x0D	; 13
    a468:	0e 94 e5 94 	call	0x129ca	; 0x129ca <strcmp_P>
    a46c:	89 2b       	or	r24, r25
    a46e:	b1 f4       	brne	.+44     	; 0xa49c <HempyModule_Web::commandEvent(char*, char*)+0x4e6>
    a470:	81 e0       	ldi	r24, 0x01	; 1
    a472:	80 93 35 14 	sts	0x1435, r24	; 0x801435 <HempyBucketCommand2ToSend+0x7>
    a476:	ea 85       	ldd	r30, Y+10	; 0x0a
    a478:	fb 85       	ldd	r31, Y+11	; 0x0b
    a47a:	a0 81       	ld	r26, Z
    a47c:	b1 81       	ldd	r27, Z+1	; 0x01
    a47e:	50 97       	sbiw	r26, 0x10	; 16
    a480:	8d 91       	ld	r24, X+
    a482:	9c 91       	ld	r25, X
    a484:	8e 0f       	add	r24, r30
    a486:	9f 1f       	adc	r25, r31
    a488:	dc 01       	movw	r26, r24
    a48a:	ed 91       	ld	r30, X+
    a48c:	fc 91       	ld	r31, X
    a48e:	02 84       	ldd	r0, Z+10	; 0x0a
    a490:	f3 85       	ldd	r31, Z+11	; 0x0b
    a492:	e0 2d       	mov	r30, r0
    a494:	40 e0       	ldi	r20, 0x00	; 0
    a496:	67 ee       	ldi	r22, 0xE7	; 231
    a498:	75 e1       	ldi	r23, 0x15	; 21
    a49a:	c0 cd       	rjmp	.-1152   	; 0xa01c <HempyModule_Web::commandEvent(char*, char*)+0x66>
    a49c:	62 ee       	ldi	r22, 0xE2	; 226
    a49e:	75 e1       	ldi	r23, 0x15	; 21
    a4a0:	81 eb       	ldi	r24, 0xB1	; 177
    a4a2:	9d e0       	ldi	r25, 0x0D	; 13
    a4a4:	0e 94 e5 94 	call	0x129ca	; 0x129ca <strcmp_P>
    a4a8:	89 2b       	or	r24, r25
    a4aa:	59 f4       	brne	.+22     	; 0xa4c2 <HempyModule_Web::commandEvent(char*, char*)+0x50c>
    a4ac:	ca 88       	ldd	r12, Y+18	; 0x12
    a4ae:	db 88       	ldd	r13, Y+19	; 0x13
    a4b0:	c8 01       	movw	r24, r16
    a4b2:	0e 94 38 35 	call	0x6a70	; 0x6a70 <toFloat(char*)>
    a4b6:	f6 01       	movw	r30, r12
    a4b8:	61 8b       	std	Z+17, r22	; 0x11
    a4ba:	72 8b       	std	Z+18, r23	; 0x12
    a4bc:	83 8b       	std	Z+19, r24	; 0x13
    a4be:	94 8b       	std	Z+20, r25	; 0x14
    a4c0:	57 ce       	rjmp	.-850    	; 0xa170 <HempyModule_Web::commandEvent(char*, char*)+0x1ba>
    a4c2:	6d ed       	ldi	r22, 0xDD	; 221
    a4c4:	75 e1       	ldi	r23, 0x15	; 21
    a4c6:	81 eb       	ldi	r24, 0xB1	; 177
    a4c8:	9d e0       	ldi	r25, 0x0D	; 13
    a4ca:	0e 94 e5 94 	call	0x129ca	; 0x129ca <strcmp_P>
    a4ce:	89 2b       	or	r24, r25
    a4d0:	f9 f4       	brne	.+62     	; 0xa510 <HempyModule_Web::commandEvent(char*, char*)+0x55a>
    a4d2:	ca 88       	ldd	r12, Y+18	; 0x12
    a4d4:	db 88       	ldd	r13, Y+19	; 0x13
    a4d6:	c8 01       	movw	r24, r16
    a4d8:	0e 94 38 35 	call	0x6a70	; 0x6a70 <toFloat(char*)>
    a4dc:	d6 01       	movw	r26, r12
    a4de:	55 96       	adiw	r26, 0x15	; 21
    a4e0:	6d 93       	st	X+, r22
    a4e2:	7d 93       	st	X+, r23
    a4e4:	8d 93       	st	X+, r24
    a4e6:	9c 93       	st	X, r25
    a4e8:	58 97       	sbiw	r26, 0x18	; 24
    a4ea:	ea 85       	ldd	r30, Y+10	; 0x0a
    a4ec:	fb 85       	ldd	r31, Y+11	; 0x0b
    a4ee:	a0 81       	ld	r26, Z
    a4f0:	b1 81       	ldd	r27, Z+1	; 0x01
    a4f2:	50 97       	sbiw	r26, 0x10	; 16
    a4f4:	8d 91       	ld	r24, X+
    a4f6:	9c 91       	ld	r25, X
    a4f8:	8e 0f       	add	r24, r30
    a4fa:	9f 1f       	adc	r25, r31
    a4fc:	dc 01       	movw	r26, r24
    a4fe:	ed 91       	ld	r30, X+
    a500:	fc 91       	ld	r31, X
    a502:	02 84       	ldd	r0, Z+10	; 0x0a
    a504:	f3 85       	ldd	r31, Z+11	; 0x0b
    a506:	e0 2d       	mov	r30, r0
    a508:	40 e0       	ldi	r20, 0x00	; 0
    a50a:	64 ec       	ldi	r22, 0xC4	; 196
    a50c:	75 e1       	ldi	r23, 0x15	; 21
    a50e:	86 cd       	rjmp	.-1268   	; 0xa01c <HempyModule_Web::commandEvent(char*, char*)+0x66>
    a510:	6f eb       	ldi	r22, 0xBF	; 191
    a512:	75 e1       	ldi	r23, 0x15	; 21
    a514:	81 eb       	ldi	r24, 0xB1	; 177
    a516:	9d e0       	ldi	r25, 0x0D	; 13
    a518:	0e 94 e5 94 	call	0x129ca	; 0x129ca <strcmp_P>
    a51c:	89 2b       	or	r24, r25
    a51e:	e9 f4       	brne	.+58     	; 0xa55a <HempyModule_Web::commandEvent(char*, char*)+0x5a4>
    a520:	ca 88       	ldd	r12, Y+18	; 0x12
    a522:	db 88       	ldd	r13, Y+19	; 0x13
    a524:	c8 01       	movw	r24, r16
    a526:	0e 94 38 35 	call	0x6a70	; 0x6a70 <toFloat(char*)>
    a52a:	f6 01       	movw	r30, r12
    a52c:	61 8f       	std	Z+25, r22	; 0x19
    a52e:	72 8f       	std	Z+26, r23	; 0x1a
    a530:	83 8f       	std	Z+27, r24	; 0x1b
    a532:	94 8f       	std	Z+28, r25	; 0x1c
    a534:	ea 85       	ldd	r30, Y+10	; 0x0a
    a536:	fb 85       	ldd	r31, Y+11	; 0x0b
    a538:	a0 81       	ld	r26, Z
    a53a:	b1 81       	ldd	r27, Z+1	; 0x01
    a53c:	50 97       	sbiw	r26, 0x10	; 16
    a53e:	8d 91       	ld	r24, X+
    a540:	9c 91       	ld	r25, X
    a542:	8e 0f       	add	r24, r30
    a544:	9f 1f       	adc	r25, r31
    a546:	dc 01       	movw	r26, r24
    a548:	ed 91       	ld	r30, X+
    a54a:	fc 91       	ld	r31, X
    a54c:	02 84       	ldd	r0, Z+10	; 0x0a
    a54e:	f3 85       	ldd	r31, Z+11	; 0x0b
    a550:	e0 2d       	mov	r30, r0
    a552:	40 e0       	ldi	r20, 0x00	; 0
    a554:	62 ea       	ldi	r22, 0xA2	; 162
    a556:	75 e1       	ldi	r23, 0x15	; 21
    a558:	61 cd       	rjmp	.-1342   	; 0xa01c <HempyModule_Web::commandEvent(char*, char*)+0x66>
    a55a:	6d e9       	ldi	r22, 0x9D	; 157
    a55c:	75 e1       	ldi	r23, 0x15	; 21
    a55e:	81 eb       	ldi	r24, 0xB1	; 177
    a560:	9d e0       	ldi	r25, 0x0D	; 13
    a562:	0e 94 e5 94 	call	0x129ca	; 0x129ca <strcmp_P>
    a566:	89 2b       	or	r24, r25
    a568:	c9 f4       	brne	.+50     	; 0xa59c <HempyModule_Web::commandEvent(char*, char*)+0x5e6>
    a56a:	c8 01       	movw	r24, r16
    a56c:	0e 94 36 35 	call	0x6a6c	; 0x6a6c <toInt(char*)>
    a570:	ea 89       	ldd	r30, Y+18	; 0x12
    a572:	fb 89       	ldd	r31, Y+19	; 0x13
    a574:	85 8f       	std	Z+29, r24	; 0x1d
    a576:	ea 85       	ldd	r30, Y+10	; 0x0a
    a578:	fb 85       	ldd	r31, Y+11	; 0x0b
    a57a:	a0 81       	ld	r26, Z
    a57c:	b1 81       	ldd	r27, Z+1	; 0x01
    a57e:	50 97       	sbiw	r26, 0x10	; 16
    a580:	8d 91       	ld	r24, X+
    a582:	9c 91       	ld	r25, X
    a584:	8e 0f       	add	r24, r30
    a586:	9f 1f       	adc	r25, r31
    a588:	dc 01       	movw	r26, r24
    a58a:	ed 91       	ld	r30, X+
    a58c:	fc 91       	ld	r31, X
    a58e:	02 84       	ldd	r0, Z+10	; 0x0a
    a590:	f3 85       	ldd	r31, Z+11	; 0x0b
    a592:	e0 2d       	mov	r30, r0
    a594:	40 e0       	ldi	r20, 0x00	; 0
    a596:	68 e8       	ldi	r22, 0x88	; 136
    a598:	75 e1       	ldi	r23, 0x15	; 21
    a59a:	40 cd       	rjmp	.-1408   	; 0xa01c <HempyModule_Web::commandEvent(char*, char*)+0x66>
    a59c:	64 e8       	ldi	r22, 0x84	; 132
    a59e:	75 e1       	ldi	r23, 0x15	; 21
    a5a0:	81 eb       	ldi	r24, 0xB1	; 177
    a5a2:	9d e0       	ldi	r25, 0x0D	; 13
    a5a4:	0e 94 e5 94 	call	0x129ca	; 0x129ca <strcmp_P>
    a5a8:	89 2b       	or	r24, r25
    a5aa:	d1 f4       	brne	.+52     	; 0xa5e0 <HempyModule_Web::commandEvent(char*, char*)+0x62a>
    a5ac:	c8 01       	movw	r24, r16
    a5ae:	0e 94 36 35 	call	0x6a6c	; 0x6a6c <toInt(char*)>
    a5b2:	ea 89       	ldd	r30, Y+18	; 0x12
    a5b4:	fb 89       	ldd	r31, Y+19	; 0x13
    a5b6:	97 8f       	std	Z+31, r25	; 0x1f
    a5b8:	86 8f       	std	Z+30, r24	; 0x1e
    a5ba:	ea 85       	ldd	r30, Y+10	; 0x0a
    a5bc:	fb 85       	ldd	r31, Y+11	; 0x0b
    a5be:	a0 81       	ld	r26, Z
    a5c0:	b1 81       	ldd	r27, Z+1	; 0x01
    a5c2:	50 97       	sbiw	r26, 0x10	; 16
    a5c4:	8d 91       	ld	r24, X+
    a5c6:	9c 91       	ld	r25, X
    a5c8:	8e 0f       	add	r24, r30
    a5ca:	9f 1f       	adc	r25, r31
    a5cc:	dc 01       	movw	r26, r24
    a5ce:	ed 91       	ld	r30, X+
    a5d0:	fc 91       	ld	r31, X
    a5d2:	02 84       	ldd	r0, Z+10	; 0x0a
    a5d4:	f3 85       	ldd	r31, Z+11	; 0x0b
    a5d6:	e0 2d       	mov	r30, r0
    a5d8:	40 e0       	ldi	r20, 0x00	; 0
    a5da:	6d e6       	ldi	r22, 0x6D	; 109
    a5dc:	75 e1       	ldi	r23, 0x15	; 21
    a5de:	1e cd       	rjmp	.-1476   	; 0xa01c <HempyModule_Web::commandEvent(char*, char*)+0x66>
    a5e0:	69 e6       	ldi	r22, 0x69	; 105
    a5e2:	75 e1       	ldi	r23, 0x15	; 21
    a5e4:	81 eb       	ldi	r24, 0xB1	; 177
    a5e6:	9d e0       	ldi	r25, 0x0D	; 13
    a5e8:	0e 94 e5 94 	call	0x129ca	; 0x129ca <strcmp_P>
    a5ec:	89 2b       	or	r24, r25
    a5ee:	d1 f4       	brne	.+52     	; 0xa624 <HempyModule_Web::commandEvent(char*, char*)+0x66e>
    a5f0:	c8 01       	movw	r24, r16
    a5f2:	0e 94 36 35 	call	0x6a6c	; 0x6a6c <toInt(char*)>
    a5f6:	ea 89       	ldd	r30, Y+18	; 0x12
    a5f8:	fb 89       	ldd	r31, Y+19	; 0x13
    a5fa:	91 a3       	std	Z+33, r25	; 0x21
    a5fc:	80 a3       	std	Z+32, r24	; 0x20
    a5fe:	ea 85       	ldd	r30, Y+10	; 0x0a
    a600:	fb 85       	ldd	r31, Y+11	; 0x0b
    a602:	a0 81       	ld	r26, Z
    a604:	b1 81       	ldd	r27, Z+1	; 0x01
    a606:	50 97       	sbiw	r26, 0x10	; 16
    a608:	8d 91       	ld	r24, X+
    a60a:	9c 91       	ld	r25, X
    a60c:	8e 0f       	add	r24, r30
    a60e:	9f 1f       	adc	r25, r31
    a610:	dc 01       	movw	r26, r24
    a612:	ed 91       	ld	r30, X+
    a614:	fc 91       	ld	r31, X
    a616:	02 84       	ldd	r0, Z+10	; 0x0a
    a618:	f3 85       	ldd	r31, Z+11	; 0x0b
    a61a:	e0 2d       	mov	r30, r0
    a61c:	40 e0       	ldi	r20, 0x00	; 0
    a61e:	63 e5       	ldi	r22, 0x53	; 83
    a620:	75 e1       	ldi	r23, 0x15	; 21
    a622:	fc cc       	rjmp	.-1544   	; 0xa01c <HempyModule_Web::commandEvent(char*, char*)+0x66>
    a624:	6e e4       	ldi	r22, 0x4E	; 78
    a626:	75 e1       	ldi	r23, 0x15	; 21
    a628:	81 eb       	ldi	r24, 0xB1	; 177
    a62a:	9d e0       	ldi	r25, 0x0D	; 13
    a62c:	0e 94 e5 94 	call	0x129ca	; 0x129ca <strcmp_P>
    a630:	89 2b       	or	r24, r25
    a632:	f1 f4       	brne	.+60     	; 0xa670 <HempyModule_Web::commandEvent(char*, char*)+0x6ba>
    a634:	c8 01       	movw	r24, r16
    a636:	0e 94 38 35 	call	0x6a70	; 0x6a70 <toFloat(char*)>
    a63a:	60 93 39 14 	sts	0x1439, r22	; 0x801439 <HempyBucketCommand2ToSend+0xb>
    a63e:	70 93 3a 14 	sts	0x143A, r23	; 0x80143a <HempyBucketCommand2ToSend+0xc>
    a642:	80 93 3b 14 	sts	0x143B, r24	; 0x80143b <HempyBucketCommand2ToSend+0xd>
    a646:	90 93 3c 14 	sts	0x143C, r25	; 0x80143c <HempyBucketCommand2ToSend+0xe>
    a64a:	ea 85       	ldd	r30, Y+10	; 0x0a
    a64c:	fb 85       	ldd	r31, Y+11	; 0x0b
    a64e:	a0 81       	ld	r26, Z
    a650:	b1 81       	ldd	r27, Z+1	; 0x01
    a652:	50 97       	sbiw	r26, 0x10	; 16
    a654:	8d 91       	ld	r24, X+
    a656:	9c 91       	ld	r25, X
    a658:	8e 0f       	add	r24, r30
    a65a:	9f 1f       	adc	r25, r31
    a65c:	dc 01       	movw	r26, r24
    a65e:	ed 91       	ld	r30, X+
    a660:	fc 91       	ld	r31, X
    a662:	02 84       	ldd	r0, Z+10	; 0x0a
    a664:	f3 85       	ldd	r31, Z+11	; 0x0b
    a666:	e0 2d       	mov	r30, r0
    a668:	40 e0       	ldi	r20, 0x00	; 0
    a66a:	68 e3       	ldi	r22, 0x38	; 56
    a66c:	75 e1       	ldi	r23, 0x15	; 21
    a66e:	d6 cc       	rjmp	.-1620   	; 0xa01c <HempyModule_Web::commandEvent(char*, char*)+0x66>
    a670:	f1 2c       	mov	r15, r1
    a672:	80 cd       	rjmp	.-1280   	; 0xa174 <HempyModule_Web::commandEvent(char*, char*)+0x1be>

0000a674 <virtual thunk to HempyModule_Web::commandEvent(char*, char*)>:
_ZTv0_n14_N15HempyModule_Web12commandEventEPcS0_():
    a674:	dc 01       	movw	r26, r24
    a676:	ed 91       	ld	r30, X+
    a678:	fc 91       	ld	r31, X
    a67a:	3e 97       	sbiw	r30, 0x0e	; 14
    a67c:	20 81       	ld	r18, Z
    a67e:	31 81       	ldd	r19, Z+1	; 0x01
    a680:	82 0f       	add	r24, r18
    a682:	93 1f       	adc	r25, r19
    a684:	0c 94 db 4f 	jmp	0x9fb6	; 0x9fb6 <HempyModule_Web::commandEvent(char*, char*)>

0000a688 <HempyModule_Web::updateCommands()>:
_ZN15HempyModule_Web14updateCommandsEv():
    a688:	cf 93       	push	r28
    a68a:	df 93       	push	r29
    a68c:	ec 01       	movw	r28, r24
    a68e:	0e 94 5c 7c 	call	0xf8b8	; 0xf8b8 <now()>
    a692:	e7 e8       	ldi	r30, 0x87	; 135
    a694:	f4 e1       	ldi	r31, 0x14	; 20
    a696:	62 83       	std	Z+2, r22	; 0x02
    a698:	73 83       	std	Z+3, r23	; 0x03
    a69a:	84 83       	std	Z+4, r24	; 0x04
    a69c:	95 83       	std	Z+5, r25	; 0x05
    a69e:	a0 91 b7 0c 	lds	r26, 0x0CB7	; 0x800cb7 <Debug>
    a6a2:	b0 91 b8 0c 	lds	r27, 0x0CB8	; 0x800cb8 <Debug+0x1>
    a6a6:	8c 91       	ld	r24, X
    a6a8:	86 83       	std	Z+6, r24	; 0x06
    a6aa:	a0 91 b5 0c 	lds	r26, 0x0CB5	; 0x800cb5 <Metric>
    a6ae:	b0 91 b6 0c 	lds	r27, 0x0CB6	; 0x800cb6 <Metric+0x1>
    a6b2:	8c 91       	ld	r24, X
    a6b4:	87 83       	std	Z+7, r24	; 0x07
    a6b6:	4a 85       	ldd	r20, Y+10	; 0x0a
    a6b8:	5b 85       	ldd	r21, Y+11	; 0x0b
    a6ba:	da 01       	movw	r26, r20
    a6bc:	8d 91       	ld	r24, X+
    a6be:	9c 91       	ld	r25, X
    a6c0:	42 97       	sbiw	r24, 0x12	; 18
    a6c2:	dc 01       	movw	r26, r24
    a6c4:	2d 91       	ld	r18, X+
    a6c6:	3c 91       	ld	r19, X
    a6c8:	24 0f       	add	r18, r20
    a6ca:	35 1f       	adc	r19, r21
    a6cc:	d9 01       	movw	r26, r18
    a6ce:	14 96       	adiw	r26, 0x04	; 4
    a6d0:	2d 91       	ld	r18, X+
    a6d2:	3c 91       	ld	r19, X
    a6d4:	d9 01       	movw	r26, r18
    a6d6:	2d 91       	ld	r18, X+
    a6d8:	3c 91       	ld	r19, X
    a6da:	31 87       	std	Z+9, r19	; 0x09
    a6dc:	20 87       	std	Z+8, r18	; 0x08
    a6de:	dc 01       	movw	r26, r24
    a6e0:	8d 91       	ld	r24, X+
    a6e2:	9c 91       	ld	r25, X
    a6e4:	da 01       	movw	r26, r20
    a6e6:	a8 0f       	add	r26, r24
    a6e8:	b9 1f       	adc	r27, r25
    a6ea:	18 96       	adiw	r26, 0x08	; 8
    a6ec:	0d 90       	ld	r0, X+
    a6ee:	bc 91       	ld	r27, X
    a6f0:	a0 2d       	mov	r26, r0
    a6f2:	8c 91       	ld	r24, X
    a6f4:	82 87       	std	Z+10, r24	; 0x0a
    a6f6:	2a 85       	ldd	r18, Y+10	; 0x0a
    a6f8:	3b 85       	ldd	r19, Y+11	; 0x0b
    a6fa:	d9 01       	movw	r26, r18
    a6fc:	8d 91       	ld	r24, X+
    a6fe:	9c 91       	ld	r25, X
    a700:	42 97       	sbiw	r24, 0x12	; 18
    a702:	dc 01       	movw	r26, r24
    a704:	8d 91       	ld	r24, X+
    a706:	9c 91       	ld	r25, X
    a708:	d9 01       	movw	r26, r18
    a70a:	a8 0f       	add	r26, r24
    a70c:	b9 1f       	adc	r27, r25
    a70e:	1a 96       	adiw	r26, 0x0a	; 10
    a710:	0d 90       	ld	r0, X+
    a712:	bc 91       	ld	r27, X
    a714:	a0 2d       	mov	r26, r0
    a716:	8c 91       	ld	r24, X
    a718:	83 87       	std	Z+11, r24	; 0x0b
    a71a:	2a 85       	ldd	r18, Y+10	; 0x0a
    a71c:	3b 85       	ldd	r19, Y+11	; 0x0b
    a71e:	d9 01       	movw	r26, r18
    a720:	8d 91       	ld	r24, X+
    a722:	9c 91       	ld	r25, X
    a724:	42 97       	sbiw	r24, 0x12	; 18
    a726:	dc 01       	movw	r26, r24
    a728:	8d 91       	ld	r24, X+
    a72a:	9c 91       	ld	r25, X
    a72c:	d9 01       	movw	r26, r18
    a72e:	a8 0f       	add	r26, r24
    a730:	b9 1f       	adc	r27, r25
    a732:	1c 96       	adiw	r26, 0x0c	; 12
    a734:	0d 90       	ld	r0, X+
    a736:	bc 91       	ld	r27, X
    a738:	a0 2d       	mov	r26, r0
    a73a:	8c 91       	ld	r24, X
    a73c:	84 87       	std	Z+12, r24	; 0x0c
    a73e:	2a 85       	ldd	r18, Y+10	; 0x0a
    a740:	3b 85       	ldd	r19, Y+11	; 0x0b
    a742:	d9 01       	movw	r26, r18
    a744:	8d 91       	ld	r24, X+
    a746:	9c 91       	ld	r25, X
    a748:	42 97       	sbiw	r24, 0x12	; 18
    a74a:	dc 01       	movw	r26, r24
    a74c:	8d 91       	ld	r24, X+
    a74e:	9c 91       	ld	r25, X
    a750:	d9 01       	movw	r26, r18
    a752:	a8 0f       	add	r26, r24
    a754:	b9 1f       	adc	r27, r25
    a756:	1e 96       	adiw	r26, 0x0e	; 14
    a758:	0d 90       	ld	r0, X+
    a75a:	bc 91       	ld	r27, X
    a75c:	a0 2d       	mov	r26, r0
    a75e:	8c 91       	ld	r24, X
    a760:	85 87       	std	Z+13, r24	; 0x0d
    a762:	2a 85       	ldd	r18, Y+10	; 0x0a
    a764:	3b 85       	ldd	r19, Y+11	; 0x0b
    a766:	d9 01       	movw	r26, r18
    a768:	8d 91       	ld	r24, X+
    a76a:	9c 91       	ld	r25, X
    a76c:	42 97       	sbiw	r24, 0x12	; 18
    a76e:	dc 01       	movw	r26, r24
    a770:	8d 91       	ld	r24, X+
    a772:	9c 91       	ld	r25, X
    a774:	d9 01       	movw	r26, r18
    a776:	a8 0f       	add	r26, r24
    a778:	b9 1f       	adc	r27, r25
    a77a:	50 96       	adiw	r26, 0x10	; 16
    a77c:	0d 90       	ld	r0, X+
    a77e:	bc 91       	ld	r27, X
    a780:	a0 2d       	mov	r26, r0
    a782:	8c 91       	ld	r24, X
    a784:	86 87       	std	Z+14, r24	; 0x0e
    a786:	e7 e6       	ldi	r30, 0x67	; 103
    a788:	f4 e1       	ldi	r31, 0x14	; 20
    a78a:	aa 89       	ldd	r26, Y+18	; 0x12
    a78c:	bb 89       	ldd	r27, Y+19	; 0x13
    a78e:	8d 91       	ld	r24, X+
    a790:	9d 91       	ld	r25, X+
    a792:	0d 90       	ld	r0, X+
    a794:	bc 91       	ld	r27, X
    a796:	a0 2d       	mov	r26, r0
    a798:	87 87       	std	Z+15, r24	; 0x0f
    a79a:	90 8b       	std	Z+16, r25	; 0x10
    a79c:	a1 8b       	std	Z+17, r26	; 0x11
    a79e:	b2 8b       	std	Z+18, r27	; 0x12
    a7a0:	aa 89       	ldd	r26, Y+18	; 0x12
    a7a2:	bb 89       	ldd	r27, Y+19	; 0x13
    a7a4:	14 96       	adiw	r26, 0x04	; 4
    a7a6:	8d 91       	ld	r24, X+
    a7a8:	9d 91       	ld	r25, X+
    a7aa:	0d 90       	ld	r0, X+
    a7ac:	bc 91       	ld	r27, X
    a7ae:	a0 2d       	mov	r26, r0
    a7b0:	83 8b       	std	Z+19, r24	; 0x13
    a7b2:	94 8b       	std	Z+20, r25	; 0x14
    a7b4:	a5 8b       	std	Z+21, r26	; 0x15
    a7b6:	b6 8b       	std	Z+22, r27	; 0x16
    a7b8:	aa 89       	ldd	r26, Y+18	; 0x12
    a7ba:	bb 89       	ldd	r27, Y+19	; 0x13
    a7bc:	18 96       	adiw	r26, 0x08	; 8
    a7be:	8d 91       	ld	r24, X+
    a7c0:	9d 91       	ld	r25, X+
    a7c2:	0d 90       	ld	r0, X+
    a7c4:	bc 91       	ld	r27, X
    a7c6:	a0 2d       	mov	r26, r0
    a7c8:	87 8b       	std	Z+23, r24	; 0x17
    a7ca:	90 8f       	std	Z+24, r25	; 0x18
    a7cc:	a1 8f       	std	Z+25, r26	; 0x19
    a7ce:	b2 8f       	std	Z+26, r27	; 0x1a
    a7d0:	aa 89       	ldd	r26, Y+18	; 0x12
    a7d2:	bb 89       	ldd	r27, Y+19	; 0x13
    a7d4:	1f 96       	adiw	r26, 0x0f	; 15
    a7d6:	8d 91       	ld	r24, X+
    a7d8:	9c 91       	ld	r25, X
    a7da:	94 8f       	std	Z+28, r25	; 0x1c
    a7dc:	83 8f       	std	Z+27, r24	; 0x1b
    a7de:	aa 89       	ldd	r26, Y+18	; 0x12
    a7e0:	bb 89       	ldd	r27, Y+19	; 0x13
    a7e2:	1c 96       	adiw	r26, 0x0c	; 12
    a7e4:	8c 91       	ld	r24, X
    a7e6:	1c 97       	sbiw	r26, 0x0c	; 12
    a7e8:	80 87       	std	Z+8, r24	; 0x08
    a7ea:	1d 96       	adiw	r26, 0x0d	; 13
    a7ec:	8d 91       	ld	r24, X+
    a7ee:	9c 91       	ld	r25, X
    a7f0:	1e 97       	sbiw	r26, 0x0e	; 14
    a7f2:	92 87       	std	Z+10, r25	; 0x0a
    a7f4:	81 87       	std	Z+9, r24	; 0x09
    a7f6:	ee e2       	ldi	r30, 0x2E	; 46
    a7f8:	f4 e1       	ldi	r31, 0x14	; 20
    a7fa:	51 96       	adiw	r26, 0x11	; 17
    a7fc:	8d 91       	ld	r24, X+
    a7fe:	9d 91       	ld	r25, X+
    a800:	0d 90       	ld	r0, X+
    a802:	bc 91       	ld	r27, X
    a804:	a0 2d       	mov	r26, r0
    a806:	87 87       	std	Z+15, r24	; 0x0f
    a808:	90 8b       	std	Z+16, r25	; 0x10
    a80a:	a1 8b       	std	Z+17, r26	; 0x11
    a80c:	b2 8b       	std	Z+18, r27	; 0x12
    a80e:	aa 89       	ldd	r26, Y+18	; 0x12
    a810:	bb 89       	ldd	r27, Y+19	; 0x13
    a812:	55 96       	adiw	r26, 0x15	; 21
    a814:	8d 91       	ld	r24, X+
    a816:	9d 91       	ld	r25, X+
    a818:	0d 90       	ld	r0, X+
    a81a:	bc 91       	ld	r27, X
    a81c:	a0 2d       	mov	r26, r0
    a81e:	83 8b       	std	Z+19, r24	; 0x13
    a820:	94 8b       	std	Z+20, r25	; 0x14
    a822:	a5 8b       	std	Z+21, r26	; 0x15
    a824:	b6 8b       	std	Z+22, r27	; 0x16
    a826:	aa 89       	ldd	r26, Y+18	; 0x12
    a828:	bb 89       	ldd	r27, Y+19	; 0x13
    a82a:	59 96       	adiw	r26, 0x19	; 25
    a82c:	8d 91       	ld	r24, X+
    a82e:	9d 91       	ld	r25, X+
    a830:	0d 90       	ld	r0, X+
    a832:	bc 91       	ld	r27, X
    a834:	a0 2d       	mov	r26, r0
    a836:	87 8b       	std	Z+23, r24	; 0x17
    a838:	90 8f       	std	Z+24, r25	; 0x18
    a83a:	a1 8f       	std	Z+25, r26	; 0x19
    a83c:	b2 8f       	std	Z+26, r27	; 0x1a
    a83e:	aa 89       	ldd	r26, Y+18	; 0x12
    a840:	bb 89       	ldd	r27, Y+19	; 0x13
    a842:	90 96       	adiw	r26, 0x20	; 32
    a844:	8d 91       	ld	r24, X+
    a846:	9c 91       	ld	r25, X
    a848:	94 8f       	std	Z+28, r25	; 0x1c
    a84a:	83 8f       	std	Z+27, r24	; 0x1b
    a84c:	aa 89       	ldd	r26, Y+18	; 0x12
    a84e:	bb 89       	ldd	r27, Y+19	; 0x13
    a850:	5d 96       	adiw	r26, 0x1d	; 29
    a852:	8c 91       	ld	r24, X
    a854:	5d 97       	sbiw	r26, 0x1d	; 29
    a856:	80 87       	std	Z+8, r24	; 0x08
    a858:	5e 96       	adiw	r26, 0x1e	; 30
    a85a:	8d 91       	ld	r24, X+
    a85c:	9c 91       	ld	r25, X
    a85e:	92 87       	std	Z+10, r25	; 0x0a
    a860:	81 87       	std	Z+9, r24	; 0x09
    a862:	df 91       	pop	r29
    a864:	cf 91       	pop	r28
    a866:	08 95       	ret

0000a868 <HempyModule_Web::HempyModule_Web(__FlashStringHelper const*, MainModule*, Settings::HempyModuleSettings*)>:
_ZN15HempyModule_WebC4EPK19__FlashStringHelperP10MainModulePN8Settings19HempyModuleSettingsE():
    a868:	8f 92       	push	r8
    a86a:	9f 92       	push	r9
    a86c:	af 92       	push	r10
    a86e:	bf 92       	push	r11
    a870:	cf 92       	push	r12
    a872:	df 92       	push	r13
    a874:	ef 92       	push	r14
    a876:	ff 92       	push	r15
    a878:	0f 93       	push	r16
    a87a:	1f 93       	push	r17
    a87c:	cf 93       	push	r28
    a87e:	df 93       	push	r29
    a880:	ec 01       	movw	r28, r24
    a882:	6b 01       	movw	r12, r22
    a884:	4a 01       	movw	r8, r20
    a886:	59 01       	movw	r10, r18
    a888:	67 2b       	or	r22, r23
    a88a:	21 f0       	breq	.+8      	; 0xa894 <HempyModule_Web::HempyModule_Web(__FlashStringHelper const*, MainModule*, Settings::HempyModuleSettings*)+0x2c>
    a88c:	b9 01       	movw	r22, r18
    a88e:	44 96       	adiw	r24, 0x14	; 20
    a890:	0e 94 f7 18 	call	0x31ee	; 0x31ee <Common::Common(__FlashStringHelper const*)>
    a894:	f4 01       	movw	r30, r8
    a896:	32 96       	adiw	r30, 0x02	; 2
    a898:	c1 14       	cp	r12, r1
    a89a:	d1 04       	cpc	r13, r1
    a89c:	11 f0       	breq	.+4      	; 0xa8a2 <HempyModule_Web::HempyModule_Web(__FlashStringHelper const*, MainModule*, Settings::HempyModuleSettings*)+0x3a>
    a89e:	e8 ef       	ldi	r30, 0xF8	; 248
    a8a0:	f8 e0       	ldi	r31, 0x08	; 8
Common_Web():
    a8a2:	80 81       	ld	r24, Z
    a8a4:	91 81       	ldd	r25, Z+1	; 0x01
    a8a6:	99 83       	std	Y+1, r25	; 0x01
    a8a8:	88 83       	st	Y, r24
    a8aa:	22 81       	ldd	r18, Z+2	; 0x02
    a8ac:	33 81       	ldd	r19, Z+3	; 0x03
    a8ae:	06 97       	sbiw	r24, 0x06	; 6
    a8b0:	dc 01       	movw	r26, r24
    a8b2:	ed 91       	ld	r30, X+
    a8b4:	fc 91       	ld	r31, X
    a8b6:	ec 0f       	add	r30, r28
    a8b8:	fd 1f       	adc	r31, r29
    a8ba:	31 83       	std	Z+1, r19	; 0x01
    a8bc:	20 83       	st	Z, r18
_ZN15HempyModule_WebC4EPK19__FlashStringHelperP10MainModulePN8Settings19HempyModuleSettingsE():
    a8be:	84 e0       	ldi	r24, 0x04	; 4
    a8c0:	99 e0       	ldi	r25, 0x09	; 9
    a8c2:	c1 14       	cp	r12, r1
    a8c4:	d1 04       	cpc	r13, r1
    a8c6:	19 f4       	brne	.+6      	; 0xa8ce <HempyModule_Web::HempyModule_Web(__FlashStringHelper const*, MainModule*, Settings::HempyModuleSettings*)+0x66>
    a8c8:	f4 01       	movw	r30, r8
    a8ca:	80 81       	ld	r24, Z
    a8cc:	91 81       	ldd	r25, Z+1	; 0x01
    a8ce:	99 83       	std	Y+1, r25	; 0x01
    a8d0:	88 83       	st	Y, r24
    a8d2:	c1 14       	cp	r12, r1
    a8d4:	d1 04       	cpc	r13, r1
    a8d6:	09 f0       	breq	.+2      	; 0xa8da <HempyModule_Web::HempyModule_Web(__FlashStringHelper const*, MainModule*, Settings::HempyModuleSettings*)+0x72>
    a8d8:	b2 c0       	rjmp	.+356    	; 0xaa3e <HempyModule_Web::HempyModule_Web(__FlashStringHelper const*, MainModule*, Settings::HempyModuleSettings*)+0x1d6>
    a8da:	d4 01       	movw	r26, r8
    a8dc:	16 96       	adiw	r26, 0x06	; 6
    a8de:	2d 91       	ld	r18, X+
    a8e0:	3c 91       	ld	r19, X
    a8e2:	06 97       	sbiw	r24, 0x06	; 6
    a8e4:	fc 01       	movw	r30, r24
    a8e6:	80 81       	ld	r24, Z
    a8e8:	91 81       	ldd	r25, Z+1	; 0x01
    a8ea:	8c 0f       	add	r24, r28
    a8ec:	9d 1f       	adc	r25, r29
    a8ee:	dc 01       	movw	r26, r24
    a8f0:	2d 93       	st	X+, r18
    a8f2:	3c 93       	st	X, r19
    a8f4:	81 e0       	ldi	r24, 0x01	; 1
    a8f6:	8a 83       	std	Y+2, r24	; 0x02
    a8f8:	1b 82       	std	Y+3, r1	; 0x03
    a8fa:	80 e2       	ldi	r24, 0x20	; 32
    a8fc:	90 e0       	ldi	r25, 0x00	; 0
    a8fe:	0e 94 74 92 	call	0x124e8	; 0x124e8 <malloc>
    a902:	9d 83       	std	Y+5, r25	; 0x05
    a904:	8c 83       	std	Y+4, r24	; 0x04
    a906:	1e 82       	std	Y+6, r1	; 0x06
    a908:	1f 82       	std	Y+7, r1	; 0x07
    a90a:	18 86       	std	Y+8, r1	; 0x08
    a90c:	19 86       	std	Y+9, r1	; 0x09
    a90e:	1b 87       	std	Y+11, r17	; 0x0b
    a910:	0a 87       	std	Y+10, r16	; 0x0a
    a912:	fb 8a       	std	Y+19, r15	; 0x13
    a914:	ea 8a       	std	Y+18, r14	; 0x12
    a916:	ce 01       	movw	r24, r28
    a918:	0e 94 44 53 	call	0xa688	; 0xa688 <HempyModule_Web::updateCommands()>
    a91c:	46 e0       	ldi	r20, 0x06	; 6
    a91e:	50 e0       	ldi	r21, 0x00	; 0
    a920:	b5 01       	movw	r22, r10
    a922:	ce 01       	movw	r24, r28
    a924:	0c 96       	adiw	r24, 0x0c	; 12
    a926:	0e 94 d1 94 	call	0x129a2	; 0x129a2 <memcpy_P>
    a92a:	d8 01       	movw	r26, r16
    a92c:	ed 91       	ld	r30, X+
    a92e:	fc 91       	ld	r31, X
    a930:	72 97       	sbiw	r30, 0x12	; 18
    a932:	80 81       	ld	r24, Z
    a934:	91 81       	ldd	r25, Z+1	; 0x01
    a936:	80 0f       	add	r24, r16
    a938:	91 1f       	adc	r25, r17
    a93a:	64 e1       	ldi	r22, 0x14	; 20
    a93c:	70 e0       	ldi	r23, 0x00	; 0
    a93e:	c1 14       	cp	r12, r1
    a940:	d1 04       	cpc	r13, r1
    a942:	29 f4       	brne	.+10     	; 0xa94e <HempyModule_Web::HempyModule_Web(__FlashStringHelper const*, MainModule*, Settings::HempyModuleSettings*)+0xe6>
    a944:	e8 81       	ld	r30, Y
    a946:	f9 81       	ldd	r31, Y+1	; 0x01
    a948:	36 97       	sbiw	r30, 0x06	; 6
    a94a:	60 81       	ld	r22, Z
    a94c:	71 81       	ldd	r23, Z+1	; 0x01
    a94e:	6c 0f       	add	r22, r28
    a950:	7d 1f       	adc	r23, r29
    a952:	0e 94 5b 1b 	call	0x36b6	; 0x36b6 <Module::addToReportQueue(Common*)>
    a956:	d8 01       	movw	r26, r16
    a958:	ed 91       	ld	r30, X+
    a95a:	fc 91       	ld	r31, X
    a95c:	72 97       	sbiw	r30, 0x12	; 18
    a95e:	80 81       	ld	r24, Z
    a960:	91 81       	ldd	r25, Z+1	; 0x01
    a962:	80 0f       	add	r24, r16
    a964:	91 1f       	adc	r25, r17
    a966:	64 e1       	ldi	r22, 0x14	; 20
    a968:	70 e0       	ldi	r23, 0x00	; 0
    a96a:	c1 14       	cp	r12, r1
    a96c:	d1 04       	cpc	r13, r1
    a96e:	29 f4       	brne	.+10     	; 0xa97a <HempyModule_Web::HempyModule_Web(__FlashStringHelper const*, MainModule*, Settings::HempyModuleSettings*)+0x112>
    a970:	e8 81       	ld	r30, Y
    a972:	f9 81       	ldd	r31, Y+1	; 0x01
    a974:	36 97       	sbiw	r30, 0x06	; 6
    a976:	60 81       	ld	r22, Z
    a978:	71 81       	ldd	r23, Z+1	; 0x01
    a97a:	6c 0f       	add	r22, r28
    a97c:	7d 1f       	adc	r23, r29
    a97e:	0e 94 75 1b 	call	0x36ea	; 0x36ea <Module::addToRefreshQueue_Sec(Common*)>
    a982:	d8 01       	movw	r26, r16
    a984:	ed 91       	ld	r30, X+
    a986:	fc 91       	ld	r31, X
    a988:	72 97       	sbiw	r30, 0x12	; 18
    a98a:	80 81       	ld	r24, Z
    a98c:	91 81       	ldd	r25, Z+1	; 0x01
    a98e:	80 0f       	add	r24, r16
    a990:	91 1f       	adc	r25, r17
    a992:	64 e1       	ldi	r22, 0x14	; 20
    a994:	70 e0       	ldi	r23, 0x00	; 0
    a996:	c1 14       	cp	r12, r1
    a998:	d1 04       	cpc	r13, r1
    a99a:	29 f4       	brne	.+10     	; 0xa9a6 <HempyModule_Web::HempyModule_Web(__FlashStringHelper const*, MainModule*, Settings::HempyModuleSettings*)+0x13e>
    a99c:	e8 81       	ld	r30, Y
    a99e:	f9 81       	ldd	r31, Y+1	; 0x01
    a9a0:	36 97       	sbiw	r30, 0x06	; 6
    a9a2:	60 81       	ld	r22, Z
    a9a4:	71 81       	ldd	r23, Z+1	; 0x01
    a9a6:	6c 0f       	add	r22, r28
    a9a8:	7d 1f       	adc	r23, r29
    a9aa:	0e 94 8f 1b 	call	0x371e	; 0x371e <Module::addToRefreshQueue_FiveSec(Common*)>
    a9ae:	d8 01       	movw	r26, r16
    a9b0:	ed 91       	ld	r30, X+
    a9b2:	fc 91       	ld	r31, X
    a9b4:	72 97       	sbiw	r30, 0x12	; 18
    a9b6:	80 81       	ld	r24, Z
    a9b8:	91 81       	ldd	r25, Z+1	; 0x01
    a9ba:	80 0f       	add	r24, r16
    a9bc:	91 1f       	adc	r25, r17
    a9be:	64 e1       	ldi	r22, 0x14	; 20
    a9c0:	70 e0       	ldi	r23, 0x00	; 0
    a9c2:	cd 28       	or	r12, r13
    a9c4:	29 f4       	brne	.+10     	; 0xa9d0 <HempyModule_Web::HempyModule_Web(__FlashStringHelper const*, MainModule*, Settings::HempyModuleSettings*)+0x168>
    a9c6:	e8 81       	ld	r30, Y
    a9c8:	f9 81       	ldd	r31, Y+1	; 0x01
    a9ca:	36 97       	sbiw	r30, 0x06	; 6
    a9cc:	60 81       	ld	r22, Z
    a9ce:	71 81       	ldd	r23, Z+1	; 0x01
    a9d0:	6c 0f       	add	r22, r28
    a9d2:	7d 1f       	adc	r23, r29
    a9d4:	0e 94 a9 1b 	call	0x3752	; 0x3752 <Module::addToRefreshQueue_Minute(Common*)>
    a9d8:	d8 01       	movw	r26, r16
    a9da:	ed 91       	ld	r30, X+
    a9dc:	fc 91       	ld	r31, X
    a9de:	70 97       	sbiw	r30, 0x10	; 16
    a9e0:	80 81       	ld	r24, Z
    a9e2:	91 81       	ldd	r25, Z+1	; 0x01
    a9e4:	be 01       	movw	r22, r28
    a9e6:	80 0f       	add	r24, r16
    a9e8:	91 1f       	adc	r25, r17
    a9ea:	0e 94 83 37 	call	0x6f06	; 0x6f06 <Module_Web::addToWebsiteQueue_Load(Common_Web*)>
    a9ee:	d8 01       	movw	r26, r16
    a9f0:	ed 91       	ld	r30, X+
    a9f2:	fc 91       	ld	r31, X
    a9f4:	70 97       	sbiw	r30, 0x10	; 16
    a9f6:	80 81       	ld	r24, Z
    a9f8:	91 81       	ldd	r25, Z+1	; 0x01
    a9fa:	be 01       	movw	r22, r28
    a9fc:	80 0f       	add	r24, r16
    a9fe:	91 1f       	adc	r25, r17
    aa00:	0e 94 9d 37 	call	0x6f3a	; 0x6f3a <Module_Web::addToWebsiteQueue_Refresh(Common_Web*)>
    aa04:	d8 01       	movw	r26, r16
    aa06:	ed 91       	ld	r30, X+
    aa08:	fc 91       	ld	r31, X
    aa0a:	70 97       	sbiw	r30, 0x10	; 16
    aa0c:	80 81       	ld	r24, Z
    aa0e:	91 81       	ldd	r25, Z+1	; 0x01
    aa10:	be 01       	movw	r22, r28
    aa12:	80 0f       	add	r24, r16
    aa14:	91 1f       	adc	r25, r17
    aa16:	0e 94 b7 37 	call	0x6f6e	; 0x6f6e <Module_Web::addToCommandQueue(Common_Web*)>
    aa1a:	43 e0       	ldi	r20, 0x03	; 3
    aa1c:	61 e0       	ldi	r22, 0x01	; 1
    aa1e:	8b e7       	ldi	r24, 0x7B	; 123
    aa20:	99 e1       	ldi	r25, 0x19	; 25
    aa22:	df 91       	pop	r29
    aa24:	cf 91       	pop	r28
    aa26:	1f 91       	pop	r17
    aa28:	0f 91       	pop	r16
    aa2a:	ff 90       	pop	r15
    aa2c:	ef 90       	pop	r14
    aa2e:	df 90       	pop	r13
    aa30:	cf 90       	pop	r12
    aa32:	bf 90       	pop	r11
    aa34:	af 90       	pop	r10
    aa36:	9f 90       	pop	r9
    aa38:	8f 90       	pop	r8
    aa3a:	0c 94 85 16 	jmp	0x2d0a	; 0x2d0a <logToSerials(__FlashStringHelper const*, bool, unsigned char)>
    aa3e:	20 e2       	ldi	r18, 0x20	; 32
    aa40:	39 e0       	ldi	r19, 0x09	; 9
    aa42:	84 e1       	ldi	r24, 0x14	; 20
    aa44:	90 e0       	ldi	r25, 0x00	; 0
    aa46:	51 cf       	rjmp	.-350    	; 0xa8ea <HempyModule_Web::HempyModule_Web(__FlashStringHelper const*, MainModule*, Settings::HempyModuleSettings*)+0x82>

0000aa48 <HempyModule_Web::HempyModule_Web(__FlashStringHelper const*, MainModule*, Settings::HempyModuleSettings*)>:
_ZN15HempyModule_WebC1EPK19__FlashStringHelperP10MainModulePN8Settings19HempyModuleSettingsE():
b:\Gbox420\Gbox420\Gbox420_Mega_Main\build\sketch\src\Modules_Web/HempyModule_Web.cpp:14
struct HempyCommonTemplate HempyResetToSend = {HempyMessages::HempyReset};                       ///< Special command to fetch the next Response from the Receiver

/**
* @brief Constructor: creates an instance of the class, loads the EEPROM stored persistent settings and subscribes to events
*/
HempyModule_Web::HempyModule_Web(const __FlashStringHelper *Name, MainModule *Parent, Settings::HempyModuleSettings *DefaultSettings) : Common(Name), Common_Web(Name)
    aa48:	ef 92       	push	r14
    aa4a:	ff 92       	push	r15
    aa4c:	0f 93       	push	r16
    aa4e:	1f 93       	push	r17
b:\Gbox420\Gbox420\Gbox420_Mega_Main\build\sketch\src\Modules_Web/HempyModule_Web.cpp:28
  Parent->addToRefreshQueue_Minute(this);
  Parent->addToWebsiteQueue_Load(this);
  Parent->addToWebsiteQueue_Refresh(this);
  Parent->addToCommandQueue(this);
  logToSerials(F("HempyModule_Web ready"), true, 3);
}
    aa50:	79 01       	movw	r14, r18
    aa52:	8a 01       	movw	r16, r20
    aa54:	9b 01       	movw	r18, r22
    aa56:	50 e0       	ldi	r21, 0x00	; 0
    aa58:	40 e0       	ldi	r20, 0x00	; 0
    aa5a:	61 e0       	ldi	r22, 0x01	; 1
    aa5c:	70 e0       	ldi	r23, 0x00	; 0
    aa5e:	0e 94 34 54 	call	0xa868	; 0xa868 <HempyModule_Web::HempyModule_Web(__FlashStringHelper const*, MainModule*, Settings::HempyModuleSettings*)>
    aa62:	1f 91       	pop	r17
    aa64:	0f 91       	pop	r16
    aa66:	ff 90       	pop	r15
    aa68:	ef 90       	pop	r14
    aa6a:	08 95       	ret

0000aa6c <HempyModule_Web::sendCommand(void*)>:
_ZN15HempyModule_Web11sendCommandEPv():
b:\Gbox420\Gbox420\Gbox420_Mega_Main\build\sketch\src\Modules_Web/HempyModule_Web.cpp:306
    logToSerials(F("Message exchange finished"), true, 1);
  }
}

HempyMessages HempyModule_Web::sendCommand(void *CommandToSend)
{
    aa6c:	cf 92       	push	r12
    aa6e:	df 92       	push	r13
    aa70:	ef 92       	push	r14
    aa72:	ff 92       	push	r15
    aa74:	0f 93       	push	r16
    aa76:	1f 93       	push	r17
    aa78:	cf 93       	push	r28
    aa7a:	df 93       	push	r29
    aa7c:	ec 01       	movw	r28, r24
    aa7e:	7b 01       	movw	r14, r22
b:\Gbox420\Gbox420\Gbox420_Mega_Main\build\sketch\src\Modules_Web/HempyModule_Web.cpp:309
  HempyMessages SequenceIDToSend = ((HempyCommonTemplate *)CommandToSend)->SequenceID;
  HempyMessages ReceivedSequenceID;
  if (*(Parent->SerialReportWireless))
    aa80:	ea 85       	ldd	r30, Y+10	; 0x0a
    aa82:	fb 85       	ldd	r31, Y+11	; 0x0b
    aa84:	a0 81       	ld	r26, Z
    aa86:	b1 81       	ldd	r27, Z+1	; 0x01
    aa88:	52 97       	sbiw	r26, 0x12	; 18
    aa8a:	8d 91       	ld	r24, X+
    aa8c:	9c 91       	ld	r25, X
    aa8e:	e8 0f       	add	r30, r24
    aa90:	f9 1f       	adc	r31, r25
    aa92:	00 88       	ldd	r0, Z+16	; 0x10
    aa94:	f1 89       	ldd	r31, Z+17	; 0x11
    aa96:	e0 2d       	mov	r30, r0
    aa98:	80 81       	ld	r24, Z
    aa9a:	88 23       	and	r24, r24
    aa9c:	c9 f0       	breq	.+50     	; 0xaad0 <HempyModule_Web::sendCommand(void*)+0x64>
b:\Gbox420\Gbox420\Gbox420_Mega_Main\build\sketch\src\Modules_Web/HempyModule_Web.cpp:307
  }
}

HempyMessages HempyModule_Web::sendCommand(void *CommandToSend)
{
  HempyMessages SequenceIDToSend = ((HempyCommonTemplate *)CommandToSend)->SequenceID;
    aa9e:	fb 01       	movw	r30, r22
    aaa0:	d0 80       	ld	r13, Z
b:\Gbox420\Gbox420\Gbox420_Mega_Main\build\sketch\src\Modules_Web/HempyModule_Web.cpp:311
  HempyMessages ReceivedSequenceID;
  if (*(Parent->SerialReportWireless))
  {
    logToSerials(F("Sending:"), false, 1);
    aaa2:	41 e0       	ldi	r20, 0x01	; 1
    aaa4:	60 e0       	ldi	r22, 0x00	; 0
    aaa6:	85 e1       	ldi	r24, 0x15	; 21
    aaa8:	95 e1       	ldi	r25, 0x15	; 21
    aaaa:	0e 94 85 16 	call	0x2d0a	; 0x2d0a <logToSerials(__FlashStringHelper const*, bool, unsigned char)>
    aaae:	f6 e0       	ldi	r31, 0x06	; 6
b:\Gbox420\Gbox420\Gbox420_Mega_Main\build\sketch\src\Modules_Web/HempyModule_Web.cpp:312
    logToSerials(toText_hempySequenceID(SequenceIDToSend), false, 1);
    aab0:	81 e9       	ldi	r24, 0x91	; 145
    aab2:	99 e1       	ldi	r25, 0x19	; 25
    aab4:	fd 15       	cp	r31, r13
    aab6:	40 f0       	brcs	.+16     	; 0xaac8 <HempyModule_Web::sendCommand(void*)+0x5c>
    aab8:	ed 2d       	mov	r30, r13
    aaba:	f0 e0       	ldi	r31, 0x00	; 0
    aabc:	ee 0f       	add	r30, r30
    aabe:	ff 1f       	adc	r31, r31
    aac0:	ec 53       	subi	r30, 0x3C	; 60
    aac2:	f7 4f       	sbci	r31, 0xF7	; 247
    aac4:	80 81       	ld	r24, Z
    aac6:	91 81       	ldd	r25, Z+1	; 0x01
    aac8:	41 e0       	ldi	r20, 0x01	; 1
    aaca:	60 e0       	ldi	r22, 0x00	; 0
    aacc:	0e 94 85 16 	call	0x2d0a	; 0x2d0a <logToSerials(__FlashStringHelper const*, bool, unsigned char)>
b:\Gbox420\Gbox420\Gbox420_Mega_Main\build\sketch\src\Modules_Web/HempyModule_Web.cpp:314
  }
  Parent->Wireless->openWritingPipe(WirelessChannel);
    aad0:	ea 85       	ldd	r30, Y+10	; 0x0a
    aad2:	fb 85       	ldd	r31, Y+11	; 0x0b
    aad4:	be 01       	movw	r22, r28
    aad6:	64 5f       	subi	r22, 0xF4	; 244
    aad8:	7f 4f       	sbci	r23, 0xFF	; 255
    aada:	82 81       	ldd	r24, Z+2	; 0x02
    aadc:	93 81       	ldd	r25, Z+3	; 0x03
    aade:	0e 94 e2 68 	call	0xd1c4	; 0xd1c4 <RF24::openWritingPipe(unsigned char const*)>
b:\Gbox420\Gbox420\Gbox420_Mega_Main\build\sketch\src\Modules_Web/HempyModule_Web.cpp:315
  Parent->Wireless->flush_rx(); ///< Dump all previously received but unprocessed messages
    aae2:	ea 85       	ldd	r30, Y+10	; 0x0a
    aae4:	fb 85       	ldd	r31, Y+11	; 0x0b
    aae6:	82 81       	ldd	r24, Z+2	; 0x02
    aae8:	93 81       	ldd	r25, Z+3	; 0x03
    aaea:	0e 94 eb 66 	call	0xcdd6	; 0xcdd6 <RF24::flush_rx()>
b:\Gbox420\Gbox420\Gbox420_Mega_Main\build\sketch\src\Modules_Web/HempyModule_Web.cpp:316
  if (Parent->Wireless->write(CommandToSend, WirelessPayloadSize))
    aaee:	ea 85       	ldd	r30, Y+10	; 0x0a
    aaf0:	fb 85       	ldd	r31, Y+11	; 0x0b
    aaf2:	40 e2       	ldi	r20, 0x20	; 32
    aaf4:	b7 01       	movw	r22, r14
    aaf6:	82 81       	ldd	r24, Z+2	; 0x02
    aaf8:	93 81       	ldd	r25, Z+3	; 0x03
    aafa:	0e 94 ba 68 	call	0xd174	; 0xd174 <RF24::write(void const*, unsigned char)>
    aafe:	88 23       	and	r24, r24
    ab00:	09 f4       	brne	.+2      	; 0xab04 <HempyModule_Web::sendCommand(void*)+0x98>
    ab02:	32 c2       	rjmp	.+1124   	; 0xaf68 <HempyModule_Web::sendCommand(void*)+0x4fc>
b:\Gbox420\Gbox420\Gbox420_Mega_Main\build\sketch\src\Modules_Web/HempyModule_Web.cpp:318
  {
    delay(50); ///< give a little time to the nRF024L01+ chip to update the isAckPayloadAvailable flag
    ab04:	62 e3       	ldi	r22, 0x32	; 50
    ab06:	70 e0       	ldi	r23, 0x00	; 0
    ab08:	80 e0       	ldi	r24, 0x00	; 0
    ab0a:	90 e0       	ldi	r25, 0x00	; 0
    ab0c:	0e 94 98 85 	call	0x10b30	; 0x10b30 <delay>
b:\Gbox420\Gbox420\Gbox420_Mega_Main\build\sketch\src\Modules_Web/HempyModule_Web.cpp:319
    if (Parent->Wireless->isAckPayloadAvailable())
    ab10:	ea 85       	ldd	r30, Y+10	; 0x0a
    ab12:	fb 85       	ldd	r31, Y+11	; 0x0b
    ab14:	82 81       	ldd	r24, Z+2	; 0x02
    ab16:	93 81       	ldd	r25, Z+3	; 0x03
    ab18:	0e 94 64 69 	call	0xd2c8	; 0xd2c8 <RF24::isAckPayloadAvailable()>
    ab1c:	ea 85       	ldd	r30, Y+10	; 0x0a
    ab1e:	fb 85       	ldd	r31, Y+11	; 0x0b
    ab20:	88 23       	and	r24, r24
    ab22:	09 f4       	brne	.+2      	; 0xab26 <HempyModule_Web::sendCommand(void*)+0xba>
    ab24:	0c c2       	rjmp	.+1048   	; 0xaf3e <HempyModule_Web::sendCommand(void*)+0x4d2>
b:\Gbox420\Gbox420\Gbox420_Mega_Main\build\sketch\src\Modules_Web/HempyModule_Web.cpp:321
    {
      OnlineStatus = true; ///< Mark that the module responded
    ab26:	81 e0       	ldi	r24, 0x01	; 1
    ab28:	8b 83       	std	Y+3, r24	; 0x03
b:\Gbox420\Gbox420\Gbox420_Mega_Main\build\sketch\src\Modules_Web/HempyModule_Web.cpp:322
      Parent->Wireless->read(ReceivedResponse, WirelessPayloadSize);
    ab2a:	6c 81       	ldd	r22, Y+4	; 0x04
    ab2c:	7d 81       	ldd	r23, Y+5	; 0x05
    ab2e:	40 e2       	ldi	r20, 0x20	; 32
    ab30:	82 81       	ldd	r24, Z+2	; 0x02
    ab32:	93 81       	ldd	r25, Z+3	; 0x03
    ab34:	0e 94 d5 68 	call	0xd1aa	; 0xd1aa <RF24::read(void*, unsigned char)>
b:\Gbox420\Gbox420\Gbox420_Mega_Main\build\sketch\src\Modules_Web/HempyModule_Web.cpp:323
      ReceivedSequenceID = ((HempyCommonTemplate *)ReceivedResponse)->SequenceID;
    ab38:	ec 81       	ldd	r30, Y+4	; 0x04
    ab3a:	fd 81       	ldd	r31, Y+5	; 0x05
    ab3c:	00 81       	ld	r16, Z
    ab3e:	11 81       	ldd	r17, Z+1	; 0x01
b:\Gbox420\Gbox420\Gbox420_Mega_Main\build\sketch\src\Modules_Web/HempyModule_Web.cpp:324
      if (*(Parent->SerialReportWireless))
    ab40:	ea 85       	ldd	r30, Y+10	; 0x0a
    ab42:	fb 85       	ldd	r31, Y+11	; 0x0b
    ab44:	a0 81       	ld	r26, Z
    ab46:	b1 81       	ldd	r27, Z+1	; 0x01
    ab48:	52 97       	sbiw	r26, 0x12	; 18
    ab4a:	8d 91       	ld	r24, X+
    ab4c:	9c 91       	ld	r25, X
    ab4e:	e8 0f       	add	r30, r24
    ab50:	f9 1f       	adc	r31, r25
    ab52:	00 88       	ldd	r0, Z+16	; 0x10
    ab54:	f1 89       	ldd	r31, Z+17	; 0x11
    ab56:	e0 2d       	mov	r30, r0
    ab58:	80 81       	ld	r24, Z
    ab5a:	88 23       	and	r24, r24
    ab5c:	09 f4       	brne	.+2      	; 0xab60 <HempyModule_Web::sendCommand(void*)+0xf4>
    ab5e:	2a c2       	rjmp	.+1108   	; 0xafb4 <HempyModule_Web::sendCommand(void*)+0x548>
b:\Gbox420\Gbox420\Gbox420_Mega_Main\build\sketch\src\Modules_Web/HempyModule_Web.cpp:326
      {
        logToSerials(F("; Response:"), false, 1);
    ab60:	41 e0       	ldi	r20, 0x01	; 1
    ab62:	60 e0       	ldi	r22, 0x00	; 0
    ab64:	89 e0       	ldi	r24, 0x09	; 9
    ab66:	95 e1       	ldi	r25, 0x15	; 21
    ab68:	0e 94 85 16 	call	0x2d0a	; 0x2d0a <logToSerials(__FlashStringHelper const*, bool, unsigned char)>
b:\Gbox420\Gbox420\Gbox420_Mega_Main\build\sketch\src\Modules_Web/HempyModule_Web.cpp:327
        logToSerials(toText_hempySequenceID(ReceivedSequenceID), false, 1);
    ab6c:	81 e9       	ldi	r24, 0x91	; 145
    ab6e:	99 e1       	ldi	r25, 0x19	; 25
    ab70:	07 30       	cpi	r16, 0x07	; 7
    ab72:	40 f4       	brcc	.+16     	; 0xab84 <HempyModule_Web::sendCommand(void*)+0x118>
    ab74:	e0 2f       	mov	r30, r16
    ab76:	f0 e0       	ldi	r31, 0x00	; 0
    ab78:	ee 0f       	add	r30, r30
    ab7a:	ff 1f       	adc	r31, r31
    ab7c:	ec 53       	subi	r30, 0x3C	; 60
    ab7e:	f7 4f       	sbci	r31, 0xF7	; 247
    ab80:	80 81       	ld	r24, Z
    ab82:	91 81       	ldd	r25, Z+1	; 0x01
    ab84:	41 e0       	ldi	r20, 0x01	; 1
    ab86:	60 e0       	ldi	r22, 0x00	; 0
    ab88:	0e 94 85 16 	call	0x2d0a	; 0x2d0a <logToSerials(__FlashStringHelper const*, bool, unsigned char)>
b:\Gbox420\Gbox420\Gbox420_Mega_Main\build\sketch\src\Modules_Web/HempyModule_Web.cpp:328
        logToSerials(F("; Data:"), false, 1);
    ab8c:	41 e0       	ldi	r20, 0x01	; 1
    ab8e:	60 e0       	ldi	r22, 0x00	; 0
    ab90:	81 e0       	ldi	r24, 0x01	; 1
    ab92:	95 e1       	ldi	r25, 0x15	; 21
    ab94:	0e 94 85 16 	call	0x2d0a	; 0x2d0a <logToSerials(__FlashStringHelper const*, bool, unsigned char)>
b:\Gbox420\Gbox420\Gbox420_Mega_Main\build\sketch\src\Modules_Web/HempyModule_Web.cpp:331
      }

      switch (ReceivedSequenceID)
    ab98:	03 30       	cpi	r16, 0x03	; 3
    ab9a:	11 05       	cpc	r17, r1
    ab9c:	c1 f1       	breq	.+112    	; 0xac0e <HempyModule_Web::sendCommand(void*)+0x1a2>
    ab9e:	c8 f4       	brcc	.+50     	; 0xabd2 <HempyModule_Web::sendCommand(void*)+0x166>
    aba0:	01 30       	cpi	r16, 0x01	; 1
    aba2:	11 05       	cpc	r17, r1
    aba4:	09 f4       	brne	.+2      	; 0xaba8 <HempyModule_Web::sendCommand(void*)+0x13c>
    aba6:	0e c2       	rjmp	.+1052   	; 0xafc4 <HempyModule_Web::sendCommand(void*)+0x558>
b:\Gbox420\Gbox420\Gbox420_Mega_Main\build\sketch\src\Modules_Web/HempyModule_Web.cpp:425
        {
          logToSerials(F("-"), true, 1); ///< Reset messages does not have any data
        }
        break;
      default:
        if (*(Parent->SerialReportWireless))
    aba8:	ea 85       	ldd	r30, Y+10	; 0x0a
    abaa:	fb 85       	ldd	r31, Y+11	; 0x0b
    abac:	a0 81       	ld	r26, Z
    abae:	b1 81       	ldd	r27, Z+1	; 0x01
    abb0:	52 97       	sbiw	r26, 0x12	; 18
    abb2:	8d 91       	ld	r24, X+
    abb4:	9c 91       	ld	r25, X
    abb6:	e8 0f       	add	r30, r24
    abb8:	f9 1f       	adc	r31, r25
    abba:	00 88       	ldd	r0, Z+16	; 0x10
    abbc:	f1 89       	ldd	r31, Z+17	; 0x11
    abbe:	e0 2d       	mov	r30, r0
    abc0:	80 81       	ld	r24, Z
    abc2:	88 23       	and	r24, r24
    abc4:	09 f4       	brne	.+2      	; 0xabc8 <HempyModule_Web::sendCommand(void*)+0x15c>
    abc6:	1e c2       	rjmp	.+1084   	; 0xb004 <HempyModule_Web::sendCommand(void*)+0x598>
b:\Gbox420\Gbox420\Gbox420_Mega_Main\build\sketch\src\Modules_Web/HempyModule_Web.cpp:427
        {
          logToSerials(F("SequenceID unknown"), true, 1);
    abc8:	41 e0       	ldi	r20, 0x01	; 1
    abca:	61 e0       	ldi	r22, 0x01	; 1
    abcc:	8c ee       	ldi	r24, 0xEC	; 236
    abce:	94 e1       	ldi	r25, 0x14	; 20
    abd0:	1b c0       	rjmp	.+54     	; 0xac08 <HempyModule_Web::sendCommand(void*)+0x19c>
b:\Gbox420\Gbox420\Gbox420_Mega_Main\build\sketch\src\Modules_Web/HempyModule_Web.cpp:331
        logToSerials(F("; Response:"), false, 1);
        logToSerials(toText_hempySequenceID(ReceivedSequenceID), false, 1);
        logToSerials(F("; Data:"), false, 1);
      }

      switch (ReceivedSequenceID)
    abd2:	05 30       	cpi	r16, 0x05	; 5
    abd4:	11 05       	cpc	r17, r1
    abd6:	09 f4       	brne	.+2      	; 0xabda <HempyModule_Web::sendCommand(void*)+0x16e>
    abd8:	e6 c0       	rjmp	.+460    	; 0xada6 <HempyModule_Web::sendCommand(void*)+0x33a>
    abda:	06 30       	cpi	r16, 0x06	; 6
    abdc:	11 05       	cpc	r17, r1
    abde:	21 f7       	brne	.-56     	; 0xaba8 <HempyModule_Web::sendCommand(void*)+0x13c>
b:\Gbox420\Gbox420\Gbox420_Mega_Main\build\sketch\src\Modules_Web/HempyModule_Web.cpp:419
        {
          HempyBucketCommand2ToSend.DryWeight = NAN;
        }
        break;
      case HempyMessages::HempyReset:
        if (*(Parent->SerialReportWireless))
    abe0:	ea 85       	ldd	r30, Y+10	; 0x0a
    abe2:	fb 85       	ldd	r31, Y+11	; 0x0b
    abe4:	a0 81       	ld	r26, Z
    abe6:	b1 81       	ldd	r27, Z+1	; 0x01
    abe8:	52 97       	sbiw	r26, 0x12	; 18
    abea:	8d 91       	ld	r24, X+
    abec:	9c 91       	ld	r25, X
    abee:	e8 0f       	add	r30, r24
    abf0:	f9 1f       	adc	r31, r25
    abf2:	00 88       	ldd	r0, Z+16	; 0x10
    abf4:	f1 89       	ldd	r31, Z+17	; 0x11
    abf6:	e0 2d       	mov	r30, r0
    abf8:	80 81       	ld	r24, Z
    abfa:	88 23       	and	r24, r24
    abfc:	09 f4       	brne	.+2      	; 0xac00 <HempyModule_Web::sendCommand(void*)+0x194>
    abfe:	02 c2       	rjmp	.+1028   	; 0xb004 <HempyModule_Web::sendCommand(void*)+0x598>
b:\Gbox420\Gbox420\Gbox420_Mega_Main\build\sketch\src\Modules_Web/HempyModule_Web.cpp:421
        {
          logToSerials(F("-"), true, 1); ///< Reset messages does not have any data
    ac00:	41 e0       	ldi	r20, 0x01	; 1
    ac02:	61 e0       	ldi	r22, 0x01	; 1
    ac04:	8f ef       	ldi	r24, 0xFF	; 255
    ac06:	94 e1       	ldi	r25, 0x14	; 20
b:\Gbox420\Gbox420\Gbox420_Mega_Main\build\sketch\src\Modules_Web/HempyModule_Web.cpp:427
        }
        break;
      default:
        if (*(Parent->SerialReportWireless))
        {
          logToSerials(F("SequenceID unknown"), true, 1);
    ac08:	0e 94 85 16 	call	0x2d0a	; 0x2d0a <logToSerials(__FlashStringHelper const*, bool, unsigned char)>
    ac0c:	fb c1       	rjmp	.+1014   	; 0xb004 <HempyModule_Web::sendCommand(void*)+0x598>
b:\Gbox420\Gbox420\Gbox420_Mega_Main\build\sketch\src\Modules_Web/HempyModule_Web.cpp:341
        {
          logToSerials(HempyModuleResponse1Received.Status, true, 1);
        }
        break;
      case HempyMessages::HempyBucketResponse1:
        memcpy(&HempyBucketResponse1Received, ReceivedResponse, sizeof(struct HempyBucketResponse));
    ac0e:	ec 81       	ldd	r30, Y+4	; 0x04
    ac10:	fd 81       	ldd	r31, Y+5	; 0x05
    ac12:	8c e1       	ldi	r24, 0x1C	; 28
    ac14:	ab e4       	ldi	r26, 0x4B	; 75
    ac16:	b4 e1       	ldi	r27, 0x14	; 20
    ac18:	01 90       	ld	r0, Z+
    ac1a:	0d 92       	st	X+, r0
    ac1c:	8a 95       	dec	r24
    ac1e:	e1 f7       	brne	.-8      	; 0xac18 <HempyModule_Web::sendCommand(void*)+0x1ac>
b:\Gbox420\Gbox420\Gbox420_Mega_Main\build\sketch\src\Modules_Web/HempyModule_Web.cpp:342
        if (*(Parent->SerialReportWireless))
    ac20:	ea 85       	ldd	r30, Y+10	; 0x0a
    ac22:	fb 85       	ldd	r31, Y+11	; 0x0b
    ac24:	a0 81       	ld	r26, Z
    ac26:	b1 81       	ldd	r27, Z+1	; 0x01
    ac28:	52 97       	sbiw	r26, 0x12	; 18
    ac2a:	8d 91       	ld	r24, X+
    ac2c:	9c 91       	ld	r25, X
    ac2e:	e8 0f       	add	r30, r24
    ac30:	f9 1f       	adc	r31, r25
    ac32:	00 88       	ldd	r0, Z+16	; 0x10
    ac34:	f1 89       	ldd	r31, Z+17	; 0x11
    ac36:	e0 2d       	mov	r30, r0
    ac38:	80 81       	ld	r24, Z
    ac3a:	88 23       	and	r24, r24
    ac3c:	09 f4       	brne	.+2      	; 0xac40 <HempyModule_Web::sendCommand(void*)+0x1d4>
    ac3e:	50 c0       	rjmp	.+160    	; 0xace0 <HempyModule_Web::sendCommand(void*)+0x274>
b:\Gbox420\Gbox420\Gbox420_Mega_Main\build\sketch\src\Modules_Web/HempyModule_Web.cpp:344
        {
          logToSerials(HempyBucketResponse1Received.ConfirmDisable, false, 1);
    ac40:	41 e0       	ldi	r20, 0x01	; 1
    ac42:	60 e0       	ldi	r22, 0x00	; 0
    ac44:	81 e5       	ldi	r24, 0x51	; 81
    ac46:	94 e1       	ldi	r25, 0x14	; 20
    ac48:	0e 94 5a 47 	call	0x8eb4	; 0x8eb4 <void logToSerials<bool>(bool&, bool, unsigned char)>
b:\Gbox420\Gbox420\Gbox420_Mega_Main\build\sketch\src\Modules_Web/HempyModule_Web.cpp:345
          logToSerials(HempyBucketResponse1Received.ConfirmStartWatering, false, 1);
    ac4c:	41 e0       	ldi	r20, 0x01	; 1
    ac4e:	60 e0       	ldi	r22, 0x00	; 0
    ac50:	82 e5       	ldi	r24, 0x52	; 82
    ac52:	94 e1       	ldi	r25, 0x14	; 20
    ac54:	0e 94 5a 47 	call	0x8eb4	; 0x8eb4 <void logToSerials<bool>(bool&, bool, unsigned char)>
b:\Gbox420\Gbox420\Gbox420_Mega_Main\build\sketch\src\Modules_Web/HempyModule_Web.cpp:346
          logToSerials(HempyBucketResponse1Received.ConfirmStopWatering, false, 1);
    ac58:	41 e0       	ldi	r20, 0x01	; 1
    ac5a:	60 e0       	ldi	r22, 0x00	; 0
    ac5c:	83 e5       	ldi	r24, 0x53	; 83
    ac5e:	94 e1       	ldi	r25, 0x14	; 20
    ac60:	0e 94 5a 47 	call	0x8eb4	; 0x8eb4 <void logToSerials<bool>(bool&, bool, unsigned char)>
b:\Gbox420\Gbox420\Gbox420_Mega_Main\build\sketch\src\Modules_Web/HempyModule_Web.cpp:347
          logToSerials(HempyBucketResponse1Received.ConfirmTareWeightB, false, 1);
    ac64:	41 e0       	ldi	r20, 0x01	; 1
    ac66:	60 e0       	ldi	r22, 0x00	; 0
    ac68:	84 e5       	ldi	r24, 0x54	; 84
    ac6a:	94 e1       	ldi	r25, 0x14	; 20
    ac6c:	0e 94 5a 47 	call	0x8eb4	; 0x8eb4 <void logToSerials<bool>(bool&, bool, unsigned char)>
b:\Gbox420\Gbox420\Gbox420_Mega_Main\build\sketch\src\Modules_Web/HempyModule_Web.cpp:348
          logToSerials(HempyBucketResponse1Received.ConfirmTareWeightDW, false, 1);
    ac70:	41 e0       	ldi	r20, 0x01	; 1
    ac72:	60 e0       	ldi	r22, 0x00	; 0
    ac74:	85 e5       	ldi	r24, 0x55	; 85
    ac76:	94 e1       	ldi	r25, 0x14	; 20
    ac78:	0e 94 5a 47 	call	0x8eb4	; 0x8eb4 <void logToSerials<bool>(bool&, bool, unsigned char)>
b:\Gbox420\Gbox420\Gbox420_Mega_Main\build\sketch\src\Modules_Web/HempyModule_Web.cpp:349
          logToSerials(HempyBucketResponse1Received.ConfirmTareWeightWR, false, 1);
    ac7c:	41 e0       	ldi	r20, 0x01	; 1
    ac7e:	60 e0       	ldi	r22, 0x00	; 0
    ac80:	86 e5       	ldi	r24, 0x56	; 86
    ac82:	94 e1       	ldi	r25, 0x14	; 20
    ac84:	0e 94 5a 47 	call	0x8eb4	; 0x8eb4 <void logToSerials<bool>(bool&, bool, unsigned char)>
b:\Gbox420\Gbox420\Gbox420_Mega_Main\build\sketch\src\Modules_Web/HempyModule_Web.cpp:350
          logToSerials(toText((int)HempyBucketResponse1Received.HempyState), false, 1);
    ac88:	80 91 4d 14 	lds	r24, 0x144D	; 0x80144d <HempyBucketResponse1Received+0x2>
    ac8c:	90 91 4e 14 	lds	r25, 0x144E	; 0x80144e <HempyBucketResponse1Received+0x3>
    ac90:	0e 94 95 33 	call	0x672a	; 0x672a <toText(int)>
    ac94:	41 e0       	ldi	r20, 0x01	; 1
    ac96:	60 e0       	ldi	r22, 0x00	; 0
    ac98:	0e 94 a7 47 	call	0x8f4e	; 0x8f4e <void logToSerials<char>(char*, bool, unsigned char)>
b:\Gbox420\Gbox420\Gbox420_Mega_Main\build\sketch\src\Modules_Web/HempyModule_Web.cpp:351
          logToSerials(toText((int)HempyBucketResponse1Received.PumpState), false, 1);
    ac9c:	80 91 4f 14 	lds	r24, 0x144F	; 0x80144f <HempyBucketResponse1Received+0x4>
    aca0:	90 91 50 14 	lds	r25, 0x1450	; 0x801450 <HempyBucketResponse1Received+0x5>
    aca4:	0e 94 95 33 	call	0x672a	; 0x672a <toText(int)>
    aca8:	41 e0       	ldi	r20, 0x01	; 1
    acaa:	60 e0       	ldi	r22, 0x00	; 0
    acac:	0e 94 a7 47 	call	0x8f4e	; 0x8f4e <void logToSerials<char>(char*, bool, unsigned char)>
b:\Gbox420\Gbox420\Gbox420_Mega_Main\build\sketch\src\Modules_Web/HempyModule_Web.cpp:352
          logToSerials(HempyBucketResponse1Received.WeightB, false, 1);
    acb0:	41 e0       	ldi	r20, 0x01	; 1
    acb2:	60 e0       	ldi	r22, 0x00	; 0
    acb4:	87 e5       	ldi	r24, 0x57	; 87
    acb6:	94 e1       	ldi	r25, 0x14	; 20
    acb8:	0e 94 eb 47 	call	0x8fd6	; 0x8fd6 <void logToSerials<float>(float&, bool, unsigned char)>
b:\Gbox420\Gbox420\Gbox420_Mega_Main\build\sketch\src\Modules_Web/HempyModule_Web.cpp:353
          logToSerials(HempyBucketResponse1Received.WeightWR, false, 1);
    acbc:	41 e0       	ldi	r20, 0x01	; 1
    acbe:	60 e0       	ldi	r22, 0x00	; 0
    acc0:	8b e5       	ldi	r24, 0x5B	; 91
    acc2:	94 e1       	ldi	r25, 0x14	; 20
    acc4:	0e 94 eb 47 	call	0x8fd6	; 0x8fd6 <void logToSerials<float>(float&, bool, unsigned char)>
b:\Gbox420\Gbox420\Gbox420_Mega_Main\build\sketch\src\Modules_Web/HempyModule_Web.cpp:354
          logToSerials(HempyBucketResponse1Received.DryWeight, false, 1);
    acc8:	41 e0       	ldi	r20, 0x01	; 1
    acca:	60 e0       	ldi	r22, 0x00	; 0
    accc:	8f e5       	ldi	r24, 0x5F	; 95
    acce:	94 e1       	ldi	r25, 0x14	; 20
    acd0:	0e 94 eb 47 	call	0x8fd6	; 0x8fd6 <void logToSerials<float>(float&, bool, unsigned char)>
b:\Gbox420\Gbox420\Gbox420_Mega_Main\build\sketch\src\Modules_Web/HempyModule_Web.cpp:355
          logToSerials(HempyBucketResponse1Received.WetWeight, true, 1);
    acd4:	41 e0       	ldi	r20, 0x01	; 1
    acd6:	61 e0       	ldi	r22, 0x01	; 1
    acd8:	83 e6       	ldi	r24, 0x63	; 99
    acda:	94 e1       	ldi	r25, 0x14	; 20
    acdc:	0e 94 eb 47 	call	0x8fd6	; 0x8fd6 <void logToSerials<float>(float&, bool, unsigned char)>
b:\Gbox420\Gbox420\Gbox420_Mega_Main\build\sketch\src\Modules_Web/HempyModule_Web.cpp:357
        }
        if (HempyBucketCommand1ToSend.Disable || HempyBucketCommand1ToSend.StartWatering || HempyBucketCommand1ToSend.StopWatering || HempyBucketCommand1ToSend.TareWeightB || HempyBucketCommand1ToSend.TareWeightDW || HempyBucketCommand1ToSend.TareWeightWR) ///< Turn off command flags
    ace0:	80 91 69 14 	lds	r24, 0x1469	; 0x801469 <HempyBucketCommand1ToSend+0x2>
    ace4:	81 11       	cpse	r24, r1
    ace6:	14 c0       	rjmp	.+40     	; 0xad10 <HempyModule_Web::sendCommand(void*)+0x2a4>
b:\Gbox420\Gbox420\Gbox420_Mega_Main\build\sketch\src\Modules_Web/HempyModule_Web.cpp:357 (discriminator 1)
    ace8:	80 91 6a 14 	lds	r24, 0x146A	; 0x80146a <HempyBucketCommand1ToSend+0x3>
    acec:	81 11       	cpse	r24, r1
    acee:	10 c0       	rjmp	.+32     	; 0xad10 <HempyModule_Web::sendCommand(void*)+0x2a4>
b:\Gbox420\Gbox420\Gbox420_Mega_Main\build\sketch\src\Modules_Web/HempyModule_Web.cpp:357 (discriminator 2)
    acf0:	80 91 6b 14 	lds	r24, 0x146B	; 0x80146b <HempyBucketCommand1ToSend+0x4>
    acf4:	81 11       	cpse	r24, r1
    acf6:	0c c0       	rjmp	.+24     	; 0xad10 <HempyModule_Web::sendCommand(void*)+0x2a4>
b:\Gbox420\Gbox420\Gbox420_Mega_Main\build\sketch\src\Modules_Web/HempyModule_Web.cpp:357 (discriminator 3)
    acf8:	80 91 6c 14 	lds	r24, 0x146C	; 0x80146c <HempyBucketCommand1ToSend+0x5>
    acfc:	81 11       	cpse	r24, r1
    acfe:	08 c0       	rjmp	.+16     	; 0xad10 <HempyModule_Web::sendCommand(void*)+0x2a4>
b:\Gbox420\Gbox420\Gbox420_Mega_Main\build\sketch\src\Modules_Web/HempyModule_Web.cpp:357 (discriminator 4)
    ad00:	80 91 6d 14 	lds	r24, 0x146D	; 0x80146d <HempyBucketCommand1ToSend+0x6>
    ad04:	81 11       	cpse	r24, r1
    ad06:	04 c0       	rjmp	.+8      	; 0xad10 <HempyModule_Web::sendCommand(void*)+0x2a4>
b:\Gbox420\Gbox420\Gbox420_Mega_Main\build\sketch\src\Modules_Web/HempyModule_Web.cpp:357 (discriminator 5)
    ad08:	80 91 6e 14 	lds	r24, 0x146E	; 0x80146e <HempyBucketCommand1ToSend+0x7>
    ad0c:	88 23       	and	r24, r24
    ad0e:	11 f0       	breq	.+4      	; 0xad14 <HempyModule_Web::sendCommand(void*)+0x2a8>
b:\Gbox420\Gbox420\Gbox420_Mega_Main\build\sketch\src\Modules_Web/HempyModule_Web.cpp:359
        {
          SyncRequested = true; ///< Force a second packet to actualize the response
    ad10:	81 e0       	ldi	r24, 0x01	; 1
    ad12:	8a 83       	std	Y+2, r24	; 0x02
b:\Gbox420\Gbox420\Gbox420_Mega_Main\build\sketch\src\Modules_Web/HempyModule_Web.cpp:361
        }
        if (HempyBucketResponse1Received.ConfirmDisable)
    ad14:	80 91 51 14 	lds	r24, 0x1451	; 0x801451 <HempyBucketResponse1Received+0x6>
    ad18:	81 11       	cpse	r24, r1
b:\Gbox420\Gbox420\Gbox420_Mega_Main\build\sketch\src\Modules_Web/HempyModule_Web.cpp:362
          HempyBucketCommand1ToSend.Disable = false; //Turn off the Flag once the Receiver confirms processing it
    ad1a:	10 92 69 14 	sts	0x1469, r1	; 0x801469 <HempyBucketCommand1ToSend+0x2>
b:\Gbox420\Gbox420\Gbox420_Mega_Main\build\sketch\src\Modules_Web/HempyModule_Web.cpp:363
        if (HempyBucketResponse1Received.ConfirmStartWatering)
    ad1e:	80 91 52 14 	lds	r24, 0x1452	; 0x801452 <HempyBucketResponse1Received+0x7>
    ad22:	81 11       	cpse	r24, r1
b:\Gbox420\Gbox420\Gbox420_Mega_Main\build\sketch\src\Modules_Web/HempyModule_Web.cpp:364
          HempyBucketCommand1ToSend.StartWatering = false;
    ad24:	10 92 6a 14 	sts	0x146A, r1	; 0x80146a <HempyBucketCommand1ToSend+0x3>
b:\Gbox420\Gbox420\Gbox420_Mega_Main\build\sketch\src\Modules_Web/HempyModule_Web.cpp:365
        if (HempyBucketResponse1Received.ConfirmStopWatering)
    ad28:	80 91 53 14 	lds	r24, 0x1453	; 0x801453 <HempyBucketResponse1Received+0x8>
    ad2c:	81 11       	cpse	r24, r1
b:\Gbox420\Gbox420\Gbox420_Mega_Main\build\sketch\src\Modules_Web/HempyModule_Web.cpp:366
          HempyBucketCommand1ToSend.StopWatering = false;
    ad2e:	10 92 6b 14 	sts	0x146B, r1	; 0x80146b <HempyBucketCommand1ToSend+0x4>
b:\Gbox420\Gbox420\Gbox420_Mega_Main\build\sketch\src\Modules_Web/HempyModule_Web.cpp:367
        if (HempyBucketResponse1Received.ConfirmTareWeightB)
    ad32:	80 91 54 14 	lds	r24, 0x1454	; 0x801454 <HempyBucketResponse1Received+0x9>
    ad36:	81 11       	cpse	r24, r1
b:\Gbox420\Gbox420\Gbox420_Mega_Main\build\sketch\src\Modules_Web/HempyModule_Web.cpp:368
          HempyBucketCommand1ToSend.TareWeightB = false;
    ad38:	10 92 6c 14 	sts	0x146C, r1	; 0x80146c <HempyBucketCommand1ToSend+0x5>
b:\Gbox420\Gbox420\Gbox420_Mega_Main\build\sketch\src\Modules_Web/HempyModule_Web.cpp:369
        if (HempyBucketResponse1Received.ConfirmTareWeightDW)
    ad3c:	80 91 55 14 	lds	r24, 0x1455	; 0x801455 <HempyBucketResponse1Received+0xa>
    ad40:	81 11       	cpse	r24, r1
b:\Gbox420\Gbox420\Gbox420_Mega_Main\build\sketch\src\Modules_Web/HempyModule_Web.cpp:370
          HempyBucketCommand1ToSend.TareWeightDW = false;
    ad42:	10 92 6d 14 	sts	0x146D, r1	; 0x80146d <HempyBucketCommand1ToSend+0x6>
b:\Gbox420\Gbox420\Gbox420_Mega_Main\build\sketch\src\Modules_Web/HempyModule_Web.cpp:371
        if (HempyBucketResponse1Received.ConfirmTareWeightWR)
    ad46:	80 91 56 14 	lds	r24, 0x1456	; 0x801456 <HempyBucketResponse1Received+0xb>
    ad4a:	81 11       	cpse	r24, r1
b:\Gbox420\Gbox420\Gbox420_Mega_Main\build\sketch\src\Modules_Web/HempyModule_Web.cpp:372
          HempyBucketCommand1ToSend.TareWeightWR = false;
    ad4c:	10 92 6e 14 	sts	0x146E, r1	; 0x80146e <HempyBucketCommand1ToSend+0x7>
b:\Gbox420\Gbox420\Gbox420_Mega_Main\build\sketch\src\Modules_Web/HempyModule_Web.cpp:374

        if (!isnan(HempyBucketCommand1ToSend.DryWeight) && HempyBucketResponse1Received.DryWeight == HempyBucketCommand1ToSend.DryWeight)
    ad50:	c0 90 72 14 	lds	r12, 0x1472	; 0x801472 <HempyBucketCommand1ToSend+0xb>
    ad54:	d0 90 73 14 	lds	r13, 0x1473	; 0x801473 <HempyBucketCommand1ToSend+0xc>
    ad58:	e0 90 74 14 	lds	r14, 0x1474	; 0x801474 <HempyBucketCommand1ToSend+0xd>
    ad5c:	f0 90 75 14 	lds	r15, 0x1475	; 0x801475 <HempyBucketCommand1ToSend+0xe>
    ad60:	a7 01       	movw	r20, r14
    ad62:	96 01       	movw	r18, r12
    ad64:	c7 01       	movw	r24, r14
    ad66:	b6 01       	movw	r22, r12
    ad68:	0e 94 ad 91 	call	0x1235a	; 0x1235a <__unordsf2>
    ad6c:	81 11       	cpse	r24, r1
    ad6e:	4a c1       	rjmp	.+660    	; 0xb004 <HempyModule_Web::sendCommand(void*)+0x598>
b:\Gbox420\Gbox420\Gbox420_Mega_Main\build\sketch\src\Modules_Web/HempyModule_Web.cpp:374 (discriminator 1)
    ad70:	a7 01       	movw	r20, r14
    ad72:	96 01       	movw	r18, r12
    ad74:	60 91 5f 14 	lds	r22, 0x145F	; 0x80145f <HempyBucketResponse1Received+0x14>
    ad78:	70 91 60 14 	lds	r23, 0x1460	; 0x801460 <HempyBucketResponse1Received+0x15>
    ad7c:	80 91 61 14 	lds	r24, 0x1461	; 0x801461 <HempyBucketResponse1Received+0x16>
    ad80:	90 91 62 14 	lds	r25, 0x1462	; 0x801462 <HempyBucketResponse1Received+0x17>
    ad84:	0e 94 dc 8f 	call	0x11fb8	; 0x11fb8 <__cmpsf2>
    ad88:	81 11       	cpse	r24, r1
    ad8a:	3c c1       	rjmp	.+632    	; 0xb004 <HempyModule_Web::sendCommand(void*)+0x598>
b:\Gbox420\Gbox420\Gbox420_Mega_Main\build\sketch\src\Modules_Web/HempyModule_Web.cpp:376
        {
          HempyBucketCommand1ToSend.DryWeight = NAN;
    ad8c:	80 e0       	ldi	r24, 0x00	; 0
    ad8e:	90 e0       	ldi	r25, 0x00	; 0
    ad90:	a0 ec       	ldi	r26, 0xC0	; 192
    ad92:	bf e7       	ldi	r27, 0x7F	; 127
    ad94:	80 93 72 14 	sts	0x1472, r24	; 0x801472 <HempyBucketCommand1ToSend+0xb>
    ad98:	90 93 73 14 	sts	0x1473, r25	; 0x801473 <HempyBucketCommand1ToSend+0xc>
    ad9c:	a0 93 74 14 	sts	0x1474, r26	; 0x801474 <HempyBucketCommand1ToSend+0xd>
    ada0:	b0 93 75 14 	sts	0x1475, r27	; 0x801475 <HempyBucketCommand1ToSend+0xe>
    ada4:	2f c1       	rjmp	.+606    	; 0xb004 <HempyModule_Web::sendCommand(void*)+0x598>
b:\Gbox420\Gbox420\Gbox420_Mega_Main\build\sketch\src\Modules_Web/HempyModule_Web.cpp:380
        }
        break;
      case HempyMessages::HempyBucketResponse2:
        memcpy(&HempyBucketResponse2Received, ReceivedResponse, sizeof(struct HempyBucketResponse));
    ada6:	ec 81       	ldd	r30, Y+4	; 0x04
    ada8:	fd 81       	ldd	r31, Y+5	; 0x05
    adaa:	8c e1       	ldi	r24, 0x1C	; 28
    adac:	a2 e1       	ldi	r26, 0x12	; 18
    adae:	b4 e1       	ldi	r27, 0x14	; 20
    adb0:	01 90       	ld	r0, Z+
    adb2:	0d 92       	st	X+, r0
    adb4:	8a 95       	dec	r24
    adb6:	e1 f7       	brne	.-8      	; 0xadb0 <HempyModule_Web::sendCommand(void*)+0x344>
b:\Gbox420\Gbox420\Gbox420_Mega_Main\build\sketch\src\Modules_Web/HempyModule_Web.cpp:381
        if (*(Parent->SerialReportWireless))
    adb8:	ea 85       	ldd	r30, Y+10	; 0x0a
    adba:	fb 85       	ldd	r31, Y+11	; 0x0b
    adbc:	a0 81       	ld	r26, Z
    adbe:	b1 81       	ldd	r27, Z+1	; 0x01
    adc0:	52 97       	sbiw	r26, 0x12	; 18
    adc2:	8d 91       	ld	r24, X+
    adc4:	9c 91       	ld	r25, X
    adc6:	e8 0f       	add	r30, r24
    adc8:	f9 1f       	adc	r31, r25
    adca:	00 88       	ldd	r0, Z+16	; 0x10
    adcc:	f1 89       	ldd	r31, Z+17	; 0x11
    adce:	e0 2d       	mov	r30, r0
    add0:	80 81       	ld	r24, Z
    add2:	88 23       	and	r24, r24
    add4:	09 f4       	brne	.+2      	; 0xadd8 <HempyModule_Web::sendCommand(void*)+0x36c>
    add6:	50 c0       	rjmp	.+160    	; 0xae78 <HempyModule_Web::sendCommand(void*)+0x40c>
b:\Gbox420\Gbox420\Gbox420_Mega_Main\build\sketch\src\Modules_Web/HempyModule_Web.cpp:383
        {
          logToSerials(HempyBucketResponse2Received.ConfirmDisable, false, 1);
    add8:	41 e0       	ldi	r20, 0x01	; 1
    adda:	60 e0       	ldi	r22, 0x00	; 0
    addc:	88 e1       	ldi	r24, 0x18	; 24
    adde:	94 e1       	ldi	r25, 0x14	; 20
    ade0:	0e 94 5a 47 	call	0x8eb4	; 0x8eb4 <void logToSerials<bool>(bool&, bool, unsigned char)>
b:\Gbox420\Gbox420\Gbox420_Mega_Main\build\sketch\src\Modules_Web/HempyModule_Web.cpp:384
          logToSerials(HempyBucketResponse2Received.ConfirmStartWatering, false, 1);
    ade4:	41 e0       	ldi	r20, 0x01	; 1
    ade6:	60 e0       	ldi	r22, 0x00	; 0
    ade8:	89 e1       	ldi	r24, 0x19	; 25
    adea:	94 e1       	ldi	r25, 0x14	; 20
    adec:	0e 94 5a 47 	call	0x8eb4	; 0x8eb4 <void logToSerials<bool>(bool&, bool, unsigned char)>
b:\Gbox420\Gbox420\Gbox420_Mega_Main\build\sketch\src\Modules_Web/HempyModule_Web.cpp:385
          logToSerials(HempyBucketResponse2Received.ConfirmStopWatering, false, 1);
    adf0:	41 e0       	ldi	r20, 0x01	; 1
    adf2:	60 e0       	ldi	r22, 0x00	; 0
    adf4:	8a e1       	ldi	r24, 0x1A	; 26
    adf6:	94 e1       	ldi	r25, 0x14	; 20
    adf8:	0e 94 5a 47 	call	0x8eb4	; 0x8eb4 <void logToSerials<bool>(bool&, bool, unsigned char)>
b:\Gbox420\Gbox420\Gbox420_Mega_Main\build\sketch\src\Modules_Web/HempyModule_Web.cpp:386
          logToSerials(HempyBucketResponse2Received.ConfirmTareWeightB, false, 1);
    adfc:	41 e0       	ldi	r20, 0x01	; 1
    adfe:	60 e0       	ldi	r22, 0x00	; 0
    ae00:	8b e1       	ldi	r24, 0x1B	; 27
    ae02:	94 e1       	ldi	r25, 0x14	; 20
    ae04:	0e 94 5a 47 	call	0x8eb4	; 0x8eb4 <void logToSerials<bool>(bool&, bool, unsigned char)>
b:\Gbox420\Gbox420\Gbox420_Mega_Main\build\sketch\src\Modules_Web/HempyModule_Web.cpp:387
          logToSerials(HempyBucketResponse2Received.ConfirmTareWeightDW, false, 1);
    ae08:	41 e0       	ldi	r20, 0x01	; 1
    ae0a:	60 e0       	ldi	r22, 0x00	; 0
    ae0c:	8c e1       	ldi	r24, 0x1C	; 28
    ae0e:	94 e1       	ldi	r25, 0x14	; 20
    ae10:	0e 94 5a 47 	call	0x8eb4	; 0x8eb4 <void logToSerials<bool>(bool&, bool, unsigned char)>
b:\Gbox420\Gbox420\Gbox420_Mega_Main\build\sketch\src\Modules_Web/HempyModule_Web.cpp:388
          logToSerials(HempyBucketResponse2Received.ConfirmTareWeightWR, false, 1);
    ae14:	41 e0       	ldi	r20, 0x01	; 1
    ae16:	60 e0       	ldi	r22, 0x00	; 0
    ae18:	8d e1       	ldi	r24, 0x1D	; 29
    ae1a:	94 e1       	ldi	r25, 0x14	; 20
    ae1c:	0e 94 5a 47 	call	0x8eb4	; 0x8eb4 <void logToSerials<bool>(bool&, bool, unsigned char)>
b:\Gbox420\Gbox420\Gbox420_Mega_Main\build\sketch\src\Modules_Web/HempyModule_Web.cpp:389
          logToSerials(toText((int)HempyBucketResponse2Received.HempyState), false, 1);
    ae20:	80 91 14 14 	lds	r24, 0x1414	; 0x801414 <HempyBucketResponse2Received+0x2>
    ae24:	90 91 15 14 	lds	r25, 0x1415	; 0x801415 <HempyBucketResponse2Received+0x3>
    ae28:	0e 94 95 33 	call	0x672a	; 0x672a <toText(int)>
    ae2c:	41 e0       	ldi	r20, 0x01	; 1
    ae2e:	60 e0       	ldi	r22, 0x00	; 0
    ae30:	0e 94 a7 47 	call	0x8f4e	; 0x8f4e <void logToSerials<char>(char*, bool, unsigned char)>
b:\Gbox420\Gbox420\Gbox420_Mega_Main\build\sketch\src\Modules_Web/HempyModule_Web.cpp:390
          logToSerials(toText((int)HempyBucketResponse2Received.PumpState), false, 1);
    ae34:	80 91 16 14 	lds	r24, 0x1416	; 0x801416 <HempyBucketResponse2Received+0x4>
    ae38:	90 91 17 14 	lds	r25, 0x1417	; 0x801417 <HempyBucketResponse2Received+0x5>
    ae3c:	0e 94 95 33 	call	0x672a	; 0x672a <toText(int)>
    ae40:	41 e0       	ldi	r20, 0x01	; 1
    ae42:	60 e0       	ldi	r22, 0x00	; 0
    ae44:	0e 94 a7 47 	call	0x8f4e	; 0x8f4e <void logToSerials<char>(char*, bool, unsigned char)>
b:\Gbox420\Gbox420\Gbox420_Mega_Main\build\sketch\src\Modules_Web/HempyModule_Web.cpp:391
          logToSerials(HempyBucketResponse2Received.WeightB, false, 1);
    ae48:	41 e0       	ldi	r20, 0x01	; 1
    ae4a:	60 e0       	ldi	r22, 0x00	; 0
    ae4c:	8e e1       	ldi	r24, 0x1E	; 30
    ae4e:	94 e1       	ldi	r25, 0x14	; 20
    ae50:	0e 94 eb 47 	call	0x8fd6	; 0x8fd6 <void logToSerials<float>(float&, bool, unsigned char)>
b:\Gbox420\Gbox420\Gbox420_Mega_Main\build\sketch\src\Modules_Web/HempyModule_Web.cpp:392
          logToSerials(HempyBucketResponse2Received.WeightWR, false, 1);
    ae54:	41 e0       	ldi	r20, 0x01	; 1
    ae56:	60 e0       	ldi	r22, 0x00	; 0
    ae58:	82 e2       	ldi	r24, 0x22	; 34
    ae5a:	94 e1       	ldi	r25, 0x14	; 20
    ae5c:	0e 94 eb 47 	call	0x8fd6	; 0x8fd6 <void logToSerials<float>(float&, bool, unsigned char)>
b:\Gbox420\Gbox420\Gbox420_Mega_Main\build\sketch\src\Modules_Web/HempyModule_Web.cpp:393
          logToSerials(HempyBucketResponse2Received.DryWeight, false, 1);
    ae60:	41 e0       	ldi	r20, 0x01	; 1
    ae62:	60 e0       	ldi	r22, 0x00	; 0
    ae64:	86 e2       	ldi	r24, 0x26	; 38
    ae66:	94 e1       	ldi	r25, 0x14	; 20
    ae68:	0e 94 eb 47 	call	0x8fd6	; 0x8fd6 <void logToSerials<float>(float&, bool, unsigned char)>
b:\Gbox420\Gbox420\Gbox420_Mega_Main\build\sketch\src\Modules_Web/HempyModule_Web.cpp:394
          logToSerials(HempyBucketResponse2Received.WetWeight, true, 1);
    ae6c:	41 e0       	ldi	r20, 0x01	; 1
    ae6e:	61 e0       	ldi	r22, 0x01	; 1
    ae70:	8a e2       	ldi	r24, 0x2A	; 42
    ae72:	94 e1       	ldi	r25, 0x14	; 20
    ae74:	0e 94 eb 47 	call	0x8fd6	; 0x8fd6 <void logToSerials<float>(float&, bool, unsigned char)>
b:\Gbox420\Gbox420\Gbox420_Mega_Main\build\sketch\src\Modules_Web/HempyModule_Web.cpp:396
        }
        if (HempyBucketCommand2ToSend.Disable || HempyBucketCommand2ToSend.StartWatering || HempyBucketCommand2ToSend.StopWatering || HempyBucketCommand2ToSend.TareWeightB || HempyBucketCommand2ToSend.TareWeightDW || HempyBucketCommand2ToSend.TareWeightWR) ///< Turn off command flags
    ae78:	80 91 30 14 	lds	r24, 0x1430	; 0x801430 <HempyBucketCommand2ToSend+0x2>
    ae7c:	81 11       	cpse	r24, r1
    ae7e:	14 c0       	rjmp	.+40     	; 0xaea8 <HempyModule_Web::sendCommand(void*)+0x43c>
b:\Gbox420\Gbox420\Gbox420_Mega_Main\build\sketch\src\Modules_Web/HempyModule_Web.cpp:396 (discriminator 1)
    ae80:	80 91 31 14 	lds	r24, 0x1431	; 0x801431 <HempyBucketCommand2ToSend+0x3>
    ae84:	81 11       	cpse	r24, r1
    ae86:	10 c0       	rjmp	.+32     	; 0xaea8 <HempyModule_Web::sendCommand(void*)+0x43c>
b:\Gbox420\Gbox420\Gbox420_Mega_Main\build\sketch\src\Modules_Web/HempyModule_Web.cpp:396 (discriminator 2)
    ae88:	80 91 32 14 	lds	r24, 0x1432	; 0x801432 <HempyBucketCommand2ToSend+0x4>
    ae8c:	81 11       	cpse	r24, r1
    ae8e:	0c c0       	rjmp	.+24     	; 0xaea8 <HempyModule_Web::sendCommand(void*)+0x43c>
b:\Gbox420\Gbox420\Gbox420_Mega_Main\build\sketch\src\Modules_Web/HempyModule_Web.cpp:396 (discriminator 3)
    ae90:	80 91 33 14 	lds	r24, 0x1433	; 0x801433 <HempyBucketCommand2ToSend+0x5>
    ae94:	81 11       	cpse	r24, r1
    ae96:	08 c0       	rjmp	.+16     	; 0xaea8 <HempyModule_Web::sendCommand(void*)+0x43c>
b:\Gbox420\Gbox420\Gbox420_Mega_Main\build\sketch\src\Modules_Web/HempyModule_Web.cpp:396 (discriminator 4)
    ae98:	80 91 34 14 	lds	r24, 0x1434	; 0x801434 <HempyBucketCommand2ToSend+0x6>
    ae9c:	81 11       	cpse	r24, r1
    ae9e:	04 c0       	rjmp	.+8      	; 0xaea8 <HempyModule_Web::sendCommand(void*)+0x43c>
b:\Gbox420\Gbox420\Gbox420_Mega_Main\build\sketch\src\Modules_Web/HempyModule_Web.cpp:396 (discriminator 5)
    aea0:	80 91 35 14 	lds	r24, 0x1435	; 0x801435 <HempyBucketCommand2ToSend+0x7>
    aea4:	88 23       	and	r24, r24
    aea6:	11 f0       	breq	.+4      	; 0xaeac <HempyModule_Web::sendCommand(void*)+0x440>
b:\Gbox420\Gbox420\Gbox420_Mega_Main\build\sketch\src\Modules_Web/HempyModule_Web.cpp:398
        {
          SyncRequested = true; ///< Force another message exchange when a command is active
    aea8:	81 e0       	ldi	r24, 0x01	; 1
    aeaa:	8a 83       	std	Y+2, r24	; 0x02
b:\Gbox420\Gbox420\Gbox420_Mega_Main\build\sketch\src\Modules_Web/HempyModule_Web.cpp:400
        }
        if (HempyBucketResponse2Received.ConfirmDisable)
    aeac:	80 91 18 14 	lds	r24, 0x1418	; 0x801418 <HempyBucketResponse2Received+0x6>
    aeb0:	81 11       	cpse	r24, r1
b:\Gbox420\Gbox420\Gbox420_Mega_Main\build\sketch\src\Modules_Web/HempyModule_Web.cpp:401
          HempyBucketCommand2ToSend.Disable = false; //Turn off the Flag once the Receiver confirms processing it
    aeb2:	10 92 30 14 	sts	0x1430, r1	; 0x801430 <HempyBucketCommand2ToSend+0x2>
b:\Gbox420\Gbox420\Gbox420_Mega_Main\build\sketch\src\Modules_Web/HempyModule_Web.cpp:402
        if (HempyBucketResponse2Received.ConfirmStartWatering)
    aeb6:	80 91 19 14 	lds	r24, 0x1419	; 0x801419 <HempyBucketResponse2Received+0x7>
    aeba:	81 11       	cpse	r24, r1
b:\Gbox420\Gbox420\Gbox420_Mega_Main\build\sketch\src\Modules_Web/HempyModule_Web.cpp:403
          HempyBucketCommand2ToSend.StartWatering = false;
    aebc:	10 92 31 14 	sts	0x1431, r1	; 0x801431 <HempyBucketCommand2ToSend+0x3>
b:\Gbox420\Gbox420\Gbox420_Mega_Main\build\sketch\src\Modules_Web/HempyModule_Web.cpp:404
        if (HempyBucketResponse2Received.ConfirmStopWatering)
    aec0:	80 91 1a 14 	lds	r24, 0x141A	; 0x80141a <HempyBucketResponse2Received+0x8>
    aec4:	81 11       	cpse	r24, r1
b:\Gbox420\Gbox420\Gbox420_Mega_Main\build\sketch\src\Modules_Web/HempyModule_Web.cpp:405
          HempyBucketCommand2ToSend.StopWatering = false;
    aec6:	10 92 32 14 	sts	0x1432, r1	; 0x801432 <HempyBucketCommand2ToSend+0x4>
b:\Gbox420\Gbox420\Gbox420_Mega_Main\build\sketch\src\Modules_Web/HempyModule_Web.cpp:406
        if (HempyBucketResponse2Received.ConfirmTareWeightB)
    aeca:	80 91 1b 14 	lds	r24, 0x141B	; 0x80141b <HempyBucketResponse2Received+0x9>
    aece:	81 11       	cpse	r24, r1
b:\Gbox420\Gbox420\Gbox420_Mega_Main\build\sketch\src\Modules_Web/HempyModule_Web.cpp:407
          HempyBucketCommand2ToSend.TareWeightB = false;
    aed0:	10 92 33 14 	sts	0x1433, r1	; 0x801433 <HempyBucketCommand2ToSend+0x5>
b:\Gbox420\Gbox420\Gbox420_Mega_Main\build\sketch\src\Modules_Web/HempyModule_Web.cpp:408
        if (HempyBucketResponse2Received.ConfirmTareWeightDW)
    aed4:	80 91 1c 14 	lds	r24, 0x141C	; 0x80141c <HempyBucketResponse2Received+0xa>
    aed8:	81 11       	cpse	r24, r1
b:\Gbox420\Gbox420\Gbox420_Mega_Main\build\sketch\src\Modules_Web/HempyModule_Web.cpp:409
          HempyBucketCommand2ToSend.TareWeightDW = false;
    aeda:	10 92 34 14 	sts	0x1434, r1	; 0x801434 <HempyBucketCommand2ToSend+0x6>
b:\Gbox420\Gbox420\Gbox420_Mega_Main\build\sketch\src\Modules_Web/HempyModule_Web.cpp:410
        if (HempyBucketResponse2Received.ConfirmTareWeightWR)
    aede:	80 91 1d 14 	lds	r24, 0x141D	; 0x80141d <HempyBucketResponse2Received+0xb>
    aee2:	81 11       	cpse	r24, r1
b:\Gbox420\Gbox420\Gbox420_Mega_Main\build\sketch\src\Modules_Web/HempyModule_Web.cpp:411
          HempyBucketCommand2ToSend.TareWeightWR = false;
    aee4:	10 92 35 14 	sts	0x1435, r1	; 0x801435 <HempyBucketCommand2ToSend+0x7>
b:\Gbox420\Gbox420\Gbox420_Mega_Main\build\sketch\src\Modules_Web/HempyModule_Web.cpp:413

        if (!isnan(HempyBucketCommand2ToSend.DryWeight) && HempyBucketResponse2Received.DryWeight == HempyBucketCommand2ToSend.DryWeight)
    aee8:	c0 90 39 14 	lds	r12, 0x1439	; 0x801439 <HempyBucketCommand2ToSend+0xb>
    aeec:	d0 90 3a 14 	lds	r13, 0x143A	; 0x80143a <HempyBucketCommand2ToSend+0xc>
    aef0:	e0 90 3b 14 	lds	r14, 0x143B	; 0x80143b <HempyBucketCommand2ToSend+0xd>
    aef4:	f0 90 3c 14 	lds	r15, 0x143C	; 0x80143c <HempyBucketCommand2ToSend+0xe>
    aef8:	a7 01       	movw	r20, r14
    aefa:	96 01       	movw	r18, r12
    aefc:	c7 01       	movw	r24, r14
    aefe:	b6 01       	movw	r22, r12
    af00:	0e 94 ad 91 	call	0x1235a	; 0x1235a <__unordsf2>
    af04:	81 11       	cpse	r24, r1
    af06:	7e c0       	rjmp	.+252    	; 0xb004 <HempyModule_Web::sendCommand(void*)+0x598>
b:\Gbox420\Gbox420\Gbox420_Mega_Main\build\sketch\src\Modules_Web/HempyModule_Web.cpp:413 (discriminator 1)
    af08:	a7 01       	movw	r20, r14
    af0a:	96 01       	movw	r18, r12
    af0c:	60 91 26 14 	lds	r22, 0x1426	; 0x801426 <HempyBucketResponse2Received+0x14>
    af10:	70 91 27 14 	lds	r23, 0x1427	; 0x801427 <HempyBucketResponse2Received+0x15>
    af14:	80 91 28 14 	lds	r24, 0x1428	; 0x801428 <HempyBucketResponse2Received+0x16>
    af18:	90 91 29 14 	lds	r25, 0x1429	; 0x801429 <HempyBucketResponse2Received+0x17>
    af1c:	0e 94 dc 8f 	call	0x11fb8	; 0x11fb8 <__cmpsf2>
    af20:	81 11       	cpse	r24, r1
    af22:	70 c0       	rjmp	.+224    	; 0xb004 <HempyModule_Web::sendCommand(void*)+0x598>
b:\Gbox420\Gbox420\Gbox420_Mega_Main\build\sketch\src\Modules_Web/HempyModule_Web.cpp:415
        {
          HempyBucketCommand2ToSend.DryWeight = NAN;
    af24:	80 e0       	ldi	r24, 0x00	; 0
    af26:	90 e0       	ldi	r25, 0x00	; 0
    af28:	a0 ec       	ldi	r26, 0xC0	; 192
    af2a:	bf e7       	ldi	r27, 0x7F	; 127
    af2c:	80 93 39 14 	sts	0x1439, r24	; 0x801439 <HempyBucketCommand2ToSend+0xb>
    af30:	90 93 3a 14 	sts	0x143A, r25	; 0x80143a <HempyBucketCommand2ToSend+0xc>
    af34:	a0 93 3b 14 	sts	0x143B, r26	; 0x80143b <HempyBucketCommand2ToSend+0xd>
    af38:	b0 93 3c 14 	sts	0x143C, r27	; 0x80143c <HempyBucketCommand2ToSend+0xe>
    af3c:	63 c0       	rjmp	.+198    	; 0xb004 <HempyModule_Web::sendCommand(void*)+0x598>
b:\Gbox420\Gbox420\Gbox420_Mega_Main\build\sketch\src\Modules_Web/HempyModule_Web.cpp:435
      }
      LastResponseReceived = millis();
    }
    else
    {
      if (*(Parent->SerialReportWireless))
    af3e:	a0 81       	ld	r26, Z
    af40:	b1 81       	ldd	r27, Z+1	; 0x01
    af42:	52 97       	sbiw	r26, 0x12	; 18
    af44:	8d 91       	ld	r24, X+
    af46:	9c 91       	ld	r25, X
    af48:	e8 0f       	add	r30, r24
    af4a:	f9 1f       	adc	r31, r25
    af4c:	00 88       	ldd	r0, Z+16	; 0x10
    af4e:	f1 89       	ldd	r31, Z+17	; 0x11
    af50:	e0 2d       	mov	r30, r0
    af52:	80 81       	ld	r24, Z
    af54:	88 23       	and	r24, r24
    af56:	09 f4       	brne	.+2      	; 0xaf5a <HempyModule_Web::sendCommand(void*)+0x4ee>
    af58:	5b c0       	rjmp	.+182    	; 0xb010 <HempyModule_Web::sendCommand(void*)+0x5a4>
b:\Gbox420\Gbox420\Gbox420_Mega_Main\build\sketch\src\Modules_Web/HempyModule_Web.cpp:436
        logToSerials(F("; Ack received without data"), true, 1); ///< Indicates a communication problem - Make sure to have bypass capacitors across the 3.3V power line and ground powering the nRF24L01+
    af5a:	41 e0       	ldi	r20, 0x01	; 1
    af5c:	61 e0       	ldi	r22, 0x01	; 1
    af5e:	80 ed       	ldi	r24, 0xD0	; 208
    af60:	94 e1       	ldi	r25, 0x14	; 20
    af62:	0e 94 85 16 	call	0x2d0a	; 0x2d0a <logToSerials(__FlashStringHelper const*, bool, unsigned char)>
    af66:	54 c0       	rjmp	.+168    	; 0xb010 <HempyModule_Web::sendCommand(void*)+0x5a4>
b:\Gbox420\Gbox420\Gbox420_Mega_Main\build\sketch\src\Modules_Web/HempyModule_Web.cpp:441
    }
  }
  else
  {
    if (*(Parent->SerialReportWireless))
    af68:	ea 85       	ldd	r30, Y+10	; 0x0a
    af6a:	fb 85       	ldd	r31, Y+11	; 0x0b
    af6c:	a0 81       	ld	r26, Z
    af6e:	b1 81       	ldd	r27, Z+1	; 0x01
    af70:	52 97       	sbiw	r26, 0x12	; 18
    af72:	8d 91       	ld	r24, X+
    af74:	9c 91       	ld	r25, X
    af76:	e8 0f       	add	r30, r24
    af78:	f9 1f       	adc	r31, r25
    af7a:	00 88       	ldd	r0, Z+16	; 0x10
    af7c:	f1 89       	ldd	r31, Z+17	; 0x11
    af7e:	e0 2d       	mov	r30, r0
    af80:	80 81       	ld	r24, Z
    af82:	88 23       	and	r24, r24
    af84:	31 f0       	breq	.+12     	; 0xaf92 <HempyModule_Web::sendCommand(void*)+0x526>
b:\Gbox420\Gbox420\Gbox420_Mega_Main\build\sketch\src\Modules_Web/HempyModule_Web.cpp:442
      logToSerials(F("; No response"), true, 1);
    af86:	41 e0       	ldi	r20, 0x01	; 1
    af88:	61 e0       	ldi	r22, 0x01	; 1
    af8a:	82 ec       	ldi	r24, 0xC2	; 194
    af8c:	94 e1       	ldi	r25, 0x14	; 20
    af8e:	0e 94 85 16 	call	0x2d0a	; 0x2d0a <logToSerials(__FlashStringHelper const*, bool, unsigned char)>
b:\Gbox420\Gbox420\Gbox420_Mega_Main\build\sketch\src\Modules_Web/HempyModule_Web.cpp:443
    if (millis() - LastResponseReceived > WirelessReceiveTimeout)
    af92:	0e 94 67 85 	call	0x10ace	; 0x10ace <millis>
    af96:	ce 80       	ldd	r12, Y+6	; 0x06
    af98:	df 80       	ldd	r13, Y+7	; 0x07
    af9a:	e8 84       	ldd	r14, Y+8	; 0x08
    af9c:	f9 84       	ldd	r15, Y+9	; 0x09
    af9e:	6c 19       	sub	r22, r12
    afa0:	7d 09       	sbc	r23, r13
    afa2:	8e 09       	sbc	r24, r14
    afa4:	9f 09       	sbc	r25, r15
    afa6:	69 3e       	cpi	r22, 0xE9	; 233
    afa8:	7d 4f       	sbci	r23, 0xFD	; 253
    afaa:	81 05       	cpc	r24, r1
    afac:	91 05       	cpc	r25, r1
    afae:	80 f1       	brcs	.+96     	; 0xb010 <HempyModule_Web::sendCommand(void*)+0x5a4>
b:\Gbox420\Gbox420\Gbox420_Mega_Main\build\sketch\src\Modules_Web/HempyModule_Web.cpp:445
    {
      OnlineStatus = false; ///< Comment this out if you have modules that do not return any data
    afb0:	1b 82       	std	Y+3, r1	; 0x03
b:\Gbox420\Gbox420\Gbox420_Mega_Main\build\sketch\src\Modules_Web/HempyModule_Web.cpp:448
    }
  }
  return ReceivedSequenceID;
    afb2:	2e c0       	rjmp	.+92     	; 0xb010 <HempyModule_Web::sendCommand(void*)+0x5a4>
b:\Gbox420\Gbox420\Gbox420_Mega_Main\build\sketch\src\Modules_Web/HempyModule_Web.cpp:331
        logToSerials(F("; Response:"), false, 1);
        logToSerials(toText_hempySequenceID(ReceivedSequenceID), false, 1);
        logToSerials(F("; Data:"), false, 1);
      }

      switch (ReceivedSequenceID)
    afb4:	03 30       	cpi	r16, 0x03	; 3
    afb6:	11 05       	cpc	r17, r1
    afb8:	09 f4       	brne	.+2      	; 0xafbc <HempyModule_Web::sendCommand(void*)+0x550>
    afba:	29 ce       	rjmp	.-942    	; 0xac0e <HempyModule_Web::sendCommand(void*)+0x1a2>
    afbc:	98 f5       	brcc	.+102    	; 0xb024 <HempyModule_Web::sendCommand(void*)+0x5b8>
    afbe:	01 30       	cpi	r16, 0x01	; 1
    afc0:	11 05       	cpc	r17, r1
    afc2:	01 f5       	brne	.+64     	; 0xb004 <HempyModule_Web::sendCommand(void*)+0x598>
b:\Gbox420\Gbox420\Gbox420_Mega_Main\build\sketch\src\Modules_Web/HempyModule_Web.cpp:334
      {
      case HempyMessages::HempyModuleResponse1:
        memcpy(&HempyModuleResponse1Received, ReceivedResponse, sizeof(struct HempyModuleResponse));
    afc4:	ec 81       	ldd	r30, Y+4	; 0x04
    afc6:	fd 81       	ldd	r31, Y+5	; 0x05
    afc8:	80 81       	ld	r24, Z
    afca:	91 81       	ldd	r25, Z+1	; 0x01
    afcc:	a2 81       	ldd	r26, Z+2	; 0x02
    afce:	80 93 84 14 	sts	0x1484, r24	; 0x801484 <HempyModuleResponse1Received>
    afd2:	90 93 85 14 	sts	0x1485, r25	; 0x801485 <HempyModuleResponse1Received+0x1>
    afd6:	a0 93 86 14 	sts	0x1486, r26	; 0x801486 <HempyModuleResponse1Received+0x2>
b:\Gbox420\Gbox420\Gbox420_Mega_Main\build\sketch\src\Modules_Web/HempyModule_Web.cpp:335
        if (*(Parent->SerialReportWireless))
    afda:	ea 85       	ldd	r30, Y+10	; 0x0a
    afdc:	fb 85       	ldd	r31, Y+11	; 0x0b
    afde:	a0 81       	ld	r26, Z
    afe0:	b1 81       	ldd	r27, Z+1	; 0x01
    afe2:	52 97       	sbiw	r26, 0x12	; 18
    afe4:	8d 91       	ld	r24, X+
    afe6:	9c 91       	ld	r25, X
    afe8:	e8 0f       	add	r30, r24
    afea:	f9 1f       	adc	r31, r25
    afec:	00 88       	ldd	r0, Z+16	; 0x10
    afee:	f1 89       	ldd	r31, Z+17	; 0x11
    aff0:	e0 2d       	mov	r30, r0
    aff2:	80 81       	ld	r24, Z
    aff4:	88 23       	and	r24, r24
    aff6:	31 f0       	breq	.+12     	; 0xb004 <HempyModule_Web::sendCommand(void*)+0x598>
b:\Gbox420\Gbox420\Gbox420_Mega_Main\build\sketch\src\Modules_Web/HempyModule_Web.cpp:337
        {
          logToSerials(HempyModuleResponse1Received.Status, true, 1);
    aff8:	41 e0       	ldi	r20, 0x01	; 1
    affa:	61 e0       	ldi	r22, 0x01	; 1
    affc:	86 e8       	ldi	r24, 0x86	; 134
    affe:	94 e1       	ldi	r25, 0x14	; 20
    b000:	0e 94 5a 47 	call	0x8eb4	; 0x8eb4 <void logToSerials<bool>(bool&, bool, unsigned char)>
b:\Gbox420\Gbox420\Gbox420_Mega_Main\build\sketch\src\Modules_Web/HempyModule_Web.cpp:431
        {
          logToSerials(F("SequenceID unknown"), true, 1);
        }
        break;
      }
      LastResponseReceived = millis();
    b004:	0e 94 67 85 	call	0x10ace	; 0x10ace <millis>
    b008:	6e 83       	std	Y+6, r22	; 0x06
    b00a:	7f 83       	std	Y+7, r23	; 0x07
    b00c:	88 87       	std	Y+8, r24	; 0x08
    b00e:	99 87       	std	Y+9, r25	; 0x09
b:\Gbox420\Gbox420\Gbox420_Mega_Main\build\sketch\src\Modules_Web/HempyModule_Web.cpp:449
    {
      OnlineStatus = false; ///< Comment this out if you have modules that do not return any data
    }
  }
  return ReceivedSequenceID;
}
    b010:	c8 01       	movw	r24, r16
    b012:	df 91       	pop	r29
    b014:	cf 91       	pop	r28
    b016:	1f 91       	pop	r17
    b018:	0f 91       	pop	r16
    b01a:	ff 90       	pop	r15
    b01c:	ef 90       	pop	r14
    b01e:	df 90       	pop	r13
    b020:	cf 90       	pop	r12
    b022:	08 95       	ret
b:\Gbox420\Gbox420\Gbox420_Mega_Main\build\sketch\src\Modules_Web/HempyModule_Web.cpp:331
        logToSerials(F("; Response:"), false, 1);
        logToSerials(toText_hempySequenceID(ReceivedSequenceID), false, 1);
        logToSerials(F("; Data:"), false, 1);
      }

      switch (ReceivedSequenceID)
    b024:	05 30       	cpi	r16, 0x05	; 5
    b026:	11 05       	cpc	r17, r1
    b028:	09 f4       	brne	.+2      	; 0xb02c <HempyModule_Web::sendCommand(void*)+0x5c0>
    b02a:	bd ce       	rjmp	.-646    	; 0xada6 <HempyModule_Web::sendCommand(void*)+0x33a>
    b02c:	06 30       	cpi	r16, 0x06	; 6
    b02e:	11 05       	cpc	r17, r1
    b030:	09 f4       	brne	.+2      	; 0xb034 <HempyModule_Web::sendCommand(void*)+0x5c8>
    b032:	d6 cd       	rjmp	.-1108   	; 0xabe0 <HempyModule_Web::sendCommand(void*)+0x174>
    b034:	e7 cf       	rjmp	.-50     	; 0xb004 <HempyModule_Web::sendCommand(void*)+0x598>

0000b036 <HempyModule_Web::sendMessages()>:
_ZN15HempyModule_Web12sendMessagesEv():
b:\Gbox420\Gbox420\Gbox420_Mega_Main\build\sketch\src\Modules_Web/HempyModule_Web.cpp:293
{
  Common::refresh_Minute();
}

void HempyModule_Web::sendMessages()
{
    b036:	cf 93       	push	r28
    b038:	df 93       	push	r29
    b03a:	ec 01       	movw	r28, r24
b:\Gbox420\Gbox420\Gbox420_Mega_Main\build\sketch\src\Modules_Web/HempyModule_Web.cpp:294
  updateCommands();
    b03c:	0e 94 44 53 	call	0xa688	; 0xa688 <HempyModule_Web::updateCommands()>
b:\Gbox420\Gbox420\Gbox420_Mega_Main\build\sketch\src\Modules_Web/HempyModule_Web.cpp:295
  sendCommand(&HempyResetToSend);          ///< special Command, resets communication to first message
    b040:	60 e1       	ldi	r22, 0x10	; 16
    b042:	74 e1       	ldi	r23, 0x14	; 20
    b044:	ce 01       	movw	r24, r28
    b046:	0e 94 36 55 	call	0xaa6c	; 0xaa6c <HempyModule_Web::sendCommand(void*)>
b:\Gbox420\Gbox420\Gbox420_Mega_Main\build\sketch\src\Modules_Web/HempyModule_Web.cpp:296
  sendCommand(&HempyModuleCommand1ToSend); ///< Command - Response exchange
    b04a:	67 e8       	ldi	r22, 0x87	; 135
    b04c:	74 e1       	ldi	r23, 0x14	; 20
    b04e:	ce 01       	movw	r24, r28
    b050:	0e 94 36 55 	call	0xaa6c	; 0xaa6c <HempyModule_Web::sendCommand(void*)>
b:\Gbox420\Gbox420\Gbox420_Mega_Main\build\sketch\src\Modules_Web/HempyModule_Web.cpp:297
  sendCommand(&HempyBucketCommand1ToSend); ///< Command - Response exchange
    b054:	67 e6       	ldi	r22, 0x67	; 103
    b056:	74 e1       	ldi	r23, 0x14	; 20
    b058:	ce 01       	movw	r24, r28
    b05a:	0e 94 36 55 	call	0xaa6c	; 0xaa6c <HempyModule_Web::sendCommand(void*)>
b:\Gbox420\Gbox420\Gbox420_Mega_Main\build\sketch\src\Modules_Web/HempyModule_Web.cpp:298
  sendCommand(&HempyBucketCommand2ToSend); ///< Command - Response exchange
    b05e:	6e e2       	ldi	r22, 0x2E	; 46
    b060:	74 e1       	ldi	r23, 0x14	; 20
    b062:	ce 01       	movw	r24, r28
    b064:	0e 94 36 55 	call	0xaa6c	; 0xaa6c <HempyModule_Web::sendCommand(void*)>
b:\Gbox420\Gbox420\Gbox420_Mega_Main\build\sketch\src\Modules_Web/HempyModule_Web.cpp:299
  if (*(Parent->SerialReportWireless) && *Debug)
    b068:	ea 85       	ldd	r30, Y+10	; 0x0a
    b06a:	fb 85       	ldd	r31, Y+11	; 0x0b
    b06c:	a0 81       	ld	r26, Z
    b06e:	b1 81       	ldd	r27, Z+1	; 0x01
    b070:	52 97       	sbiw	r26, 0x12	; 18
    b072:	8d 91       	ld	r24, X+
    b074:	9c 91       	ld	r25, X
    b076:	e8 0f       	add	r30, r24
    b078:	f9 1f       	adc	r31, r25
    b07a:	00 88       	ldd	r0, Z+16	; 0x10
    b07c:	f1 89       	ldd	r31, Z+17	; 0x11
    b07e:	e0 2d       	mov	r30, r0
    b080:	80 81       	ld	r24, Z
    b082:	88 23       	and	r24, r24
    b084:	79 f0       	breq	.+30     	; 0xb0a4 <HempyModule_Web::sendMessages()+0x6e>
b:\Gbox420\Gbox420\Gbox420_Mega_Main\build\sketch\src\Modules_Web/HempyModule_Web.cpp:299 (discriminator 1)
    b086:	e0 91 b7 0c 	lds	r30, 0x0CB7	; 0x800cb7 <Debug>
    b08a:	f0 91 b8 0c 	lds	r31, 0x0CB8	; 0x800cb8 <Debug+0x1>
    b08e:	80 81       	ld	r24, Z
    b090:	88 23       	and	r24, r24
    b092:	41 f0       	breq	.+16     	; 0xb0a4 <HempyModule_Web::sendMessages()+0x6e>
b:\Gbox420\Gbox420\Gbox420_Mega_Main\build\sketch\src\Modules_Web/HempyModule_Web.cpp:301
  {
    logToSerials(F("Message exchange finished"), true, 1);
    b094:	41 e0       	ldi	r20, 0x01	; 1
    b096:	61 e0       	ldi	r22, 0x01	; 1
    b098:	8e e1       	ldi	r24, 0x1E	; 30
    b09a:	95 e1       	ldi	r25, 0x15	; 21
b:\Gbox420\Gbox420\Gbox420_Mega_Main\build\sketch\src\Modules_Web/HempyModule_Web.cpp:303
  }
}
    b09c:	df 91       	pop	r29
    b09e:	cf 91       	pop	r28
b:\Gbox420\Gbox420\Gbox420_Mega_Main\build\sketch\src\Modules_Web/HempyModule_Web.cpp:301
  sendCommand(&HempyModuleCommand1ToSend); ///< Command - Response exchange
  sendCommand(&HempyBucketCommand1ToSend); ///< Command - Response exchange
  sendCommand(&HempyBucketCommand2ToSend); ///< Command - Response exchange
  if (*(Parent->SerialReportWireless) && *Debug)
  {
    logToSerials(F("Message exchange finished"), true, 1);
    b0a0:	0c 94 85 16 	jmp	0x2d0a	; 0x2d0a <logToSerials(__FlashStringHelper const*, bool, unsigned char)>
b:\Gbox420\Gbox420\Gbox420_Mega_Main\build\sketch\src\Modules_Web/HempyModule_Web.cpp:303
  }
}
    b0a4:	df 91       	pop	r29
    b0a6:	cf 91       	pop	r28
    b0a8:	08 95       	ret

0000b0aa <HempyModule_Web::refresh_Sec()>:
_ZN15HempyModule_Web11refresh_SecEv():
b:\Gbox420\Gbox420\Gbox420_Mega_Main\build\sketch\src\Modules_Web/HempyModule_Web.cpp:270
    return true;
  }
}

void HempyModule_Web::refresh_Sec()
{
    b0aa:	cf 93       	push	r28
    b0ac:	df 93       	push	r29
    b0ae:	ec 01       	movw	r28, r24
b:\Gbox420\Gbox420\Gbox420_Mega_Main\build\sketch\src\Modules_Web/HempyModule_Web.cpp:271
  Common::refresh_Sec();
    b0b0:	e8 81       	ld	r30, Y
    b0b2:	f9 81       	ldd	r31, Y+1	; 0x01
    b0b4:	36 97       	sbiw	r30, 0x06	; 6
    b0b6:	80 81       	ld	r24, Z
    b0b8:	91 81       	ldd	r25, Z+1	; 0x01
    b0ba:	8c 0f       	add	r24, r28
    b0bc:	9d 1f       	adc	r25, r29
    b0be:	0e 94 b8 18 	call	0x3170	; 0x3170 <Common::refresh_Sec()>
b:\Gbox420\Gbox420\Gbox420_Mega_Main\build\sketch\src\Modules_Web/HempyModule_Web.cpp:272
  if (SyncRequested)
    b0c2:	8a 81       	ldd	r24, Y+2	; 0x02
    b0c4:	88 23       	and	r24, r24
    b0c6:	31 f0       	breq	.+12     	; 0xb0d4 <HempyModule_Web::refresh_Sec()+0x2a>
b:\Gbox420\Gbox420\Gbox420_Mega_Main\build\sketch\src\Modules_Web/HempyModule_Web.cpp:274
  {
    SyncRequested = false;
    b0c8:	1a 82       	std	Y+2, r1	; 0x02
b:\Gbox420\Gbox420\Gbox420_Mega_Main\build\sketch\src\Modules_Web/HempyModule_Web.cpp:276
    //syncModule(WirelessChannel,&Command,&Response);
    sendMessages();
    b0ca:	ce 01       	movw	r24, r28
b:\Gbox420\Gbox420\Gbox420_Mega_Main\build\sketch\src\Modules_Web/HempyModule_Web.cpp:278
  }
}
    b0cc:	df 91       	pop	r29
    b0ce:	cf 91       	pop	r28
b:\Gbox420\Gbox420\Gbox420_Mega_Main\build\sketch\src\Modules_Web/HempyModule_Web.cpp:276
  Common::refresh_Sec();
  if (SyncRequested)
  {
    SyncRequested = false;
    //syncModule(WirelessChannel,&Command,&Response);
    sendMessages();
    b0d0:	0c 94 1b 58 	jmp	0xb036	; 0xb036 <HempyModule_Web::sendMessages()>
b:\Gbox420\Gbox420\Gbox420_Mega_Main\build\sketch\src\Modules_Web/HempyModule_Web.cpp:278
  }
}
    b0d4:	df 91       	pop	r29
    b0d6:	cf 91       	pop	r28
    b0d8:	08 95       	ret

0000b0da <virtual thunk to HempyModule_Web::refresh_Sec()>:
_ZTv0_n8_N15HempyModule_Web11refresh_SecEv():
    b0da:	dc 01       	movw	r26, r24
    b0dc:	ed 91       	ld	r30, X+
    b0de:	fc 91       	ld	r31, X
    b0e0:	38 97       	sbiw	r30, 0x08	; 8
    b0e2:	20 81       	ld	r18, Z
    b0e4:	31 81       	ldd	r19, Z+1	; 0x01
    b0e6:	82 0f       	add	r24, r18
    b0e8:	93 1f       	adc	r25, r19
    b0ea:	0c 94 55 58 	jmp	0xb0aa	; 0xb0aa <HempyModule_Web::refresh_Sec()>

0000b0ee <HempyModule_Web::refresh_FiveSec()>:
_ZN15HempyModule_Web15refresh_FiveSecEv():
b:\Gbox420\Gbox420\Gbox420_Mega_Main\build\sketch\src\Modules_Web/HempyModule_Web.cpp:281

void HempyModule_Web::refresh_FiveSec()
{
    b0ee:	cf 93       	push	r28
    b0f0:	df 93       	push	r29
    b0f2:	ec 01       	movw	r28, r24
b:\Gbox420\Gbox420\Gbox420_Mega_Main\build\sketch\src\Modules_Web/HempyModule_Web.cpp:282
  Common::refresh_FiveSec();
    b0f4:	e8 81       	ld	r30, Y
    b0f6:	f9 81       	ldd	r31, Y+1	; 0x01
    b0f8:	36 97       	sbiw	r30, 0x06	; 6
    b0fa:	80 81       	ld	r24, Z
    b0fc:	91 81       	ldd	r25, Z+1	; 0x01
    b0fe:	8c 0f       	add	r24, r28
    b100:	9d 1f       	adc	r25, r29
    b102:	0e 94 cd 18 	call	0x319a	; 0x319a <Common::refresh_FiveSec()>
b:\Gbox420\Gbox420\Gbox420_Mega_Main\build\sketch\src\Modules_Web/HempyModule_Web.cpp:284
  //syncModule(WirelessChannel,&Command,&Response);
  sendMessages();
    b106:	ce 01       	movw	r24, r28
b:\Gbox420\Gbox420\Gbox420_Mega_Main\build\sketch\src\Modules_Web/HempyModule_Web.cpp:285
}
    b108:	df 91       	pop	r29
    b10a:	cf 91       	pop	r28
b:\Gbox420\Gbox420\Gbox420_Mega_Main\build\sketch\src\Modules_Web/HempyModule_Web.cpp:284

void HempyModule_Web::refresh_FiveSec()
{
  Common::refresh_FiveSec();
  //syncModule(WirelessChannel,&Command,&Response);
  sendMessages();
    b10c:	0c 94 1b 58 	jmp	0xb036	; 0xb036 <HempyModule_Web::sendMessages()>

0000b110 <virtual thunk to HempyModule_Web::refresh_FiveSec()>:
_ZTv0_n10_N15HempyModule_Web15refresh_FiveSecEv():
    b110:	dc 01       	movw	r26, r24
    b112:	ed 91       	ld	r30, X+
    b114:	fc 91       	ld	r31, X
    b116:	3a 97       	sbiw	r30, 0x0a	; 10
    b118:	20 81       	ld	r18, Z
    b11a:	31 81       	ldd	r19, Z+1	; 0x01
    b11c:	82 0f       	add	r24, r18
    b11e:	93 1f       	adc	r25, r19
    b120:	0c 94 77 58 	jmp	0xb0ee	; 0xb0ee <HempyModule_Web::refresh_FiveSec()>

0000b124 <_GLOBAL__sub_I_HempyModuleCommand1ToSend>:
_ZN19HempyCommonTemplateC4E13HempyMessages():
b:\gbox420\gbox420\gbox420_mega_main\build\sketch\src/wirelesscommands_hempy.h:66
struct HempyCommonTemplate ///< Hempy wireless template - Shared between Command and Respone packages
{
   HempyMessages SequenceID; ///< Commands and Responses can span across multiple 32byte packages. Packages with 0 SequenceID represent the initial attempt to exchange data
   HempyCommonTemplate(HempyMessages SequenceID)
   {
      this->SequenceID = SequenceID;
    b124:	e7 e8       	ldi	r30, 0x87	; 135
    b126:	f4 e1       	ldi	r31, 0x14	; 20
    b128:	11 82       	std	Z+1, r1	; 0x01
    b12a:	10 82       	st	Z, r1
_ZN18HempyModuleCommandC4E13HempyMessages():
b:\gbox420\gbox420\gbox420_mega_main\build\sketch\src/wirelesscommands_hempy.h:72
   }
};

struct HempyModuleCommand : HempyCommonTemplate ///< Hempy module wireless command
{
   HempyModuleCommand(__attribute__((unused)) HempyMessages SequenceID) : HempyCommonTemplate(SequenceID) {}
    b12c:	12 82       	std	Z+2, r1	; 0x02
    b12e:	13 82       	std	Z+3, r1	; 0x03
    b130:	14 82       	std	Z+4, r1	; 0x04
    b132:	15 82       	std	Z+5, r1	; 0x05
    b134:	81 e0       	ldi	r24, 0x01	; 1
    b136:	86 83       	std	Z+6, r24	; 0x06
    b138:	87 83       	std	Z+7, r24	; 0x07
    b13a:	11 86       	std	Z+9, r1	; 0x09
    b13c:	10 86       	std	Z+8, r1	; 0x08
    b13e:	82 87       	std	Z+10, r24	; 0x0a
    b140:	83 87       	std	Z+11, r24	; 0x0b
    b142:	84 87       	std	Z+12, r24	; 0x0c
    b144:	85 87       	std	Z+13, r24	; 0x0d
    b146:	86 87       	std	Z+14, r24	; 0x0e
_ZN19HempyCommonTemplateC4E13HempyMessages():
b:\gbox420\gbox420\gbox420_mega_main\build\sketch\src/wirelesscommands_hempy.h:66
struct HempyCommonTemplate ///< Hempy wireless template - Shared between Command and Respone packages
{
   HempyMessages SequenceID; ///< Commands and Responses can span across multiple 32byte packages. Packages with 0 SequenceID represent the initial attempt to exchange data
   HempyCommonTemplate(HempyMessages SequenceID)
   {
      this->SequenceID = SequenceID;
    b148:	e4 e8       	ldi	r30, 0x84	; 132
    b14a:	f4 e1       	ldi	r31, 0x14	; 20
    b14c:	81 e0       	ldi	r24, 0x01	; 1
    b14e:	90 e0       	ldi	r25, 0x00	; 0
    b150:	91 83       	std	Z+1, r25	; 0x01
    b152:	80 83       	st	Z, r24
_ZN19HempyModuleResponseC4E13HempyMessages():
b:\gbox420\gbox420\gbox420_mega_main\build\sketch\src/wirelesscommands_hempy.h:87
   bool SerialReportWireless = true;
};

struct HempyModuleResponse : HempyCommonTemplate ///< Hempy module wireless response
{
   HempyModuleResponse(__attribute__((unused)) HempyMessages SequenceID) : HempyCommonTemplate(SequenceID) {}
    b154:	12 82       	std	Z+2, r1	; 0x02
_ZN19HempyCommonTemplateC4E13HempyMessages():
b:\gbox420\gbox420\gbox420_mega_main\build\sketch\src/wirelesscommands_hempy.h:66
struct HempyCommonTemplate ///< Hempy wireless template - Shared between Command and Respone packages
{
   HempyMessages SequenceID; ///< Commands and Responses can span across multiple 32byte packages. Packages with 0 SequenceID represent the initial attempt to exchange data
   HempyCommonTemplate(HempyMessages SequenceID)
   {
      this->SequenceID = SequenceID;
    b156:	e7 e6       	ldi	r30, 0x67	; 103
    b158:	f4 e1       	ldi	r31, 0x14	; 20
    b15a:	82 e0       	ldi	r24, 0x02	; 2
    b15c:	90 e0       	ldi	r25, 0x00	; 0
    b15e:	91 83       	std	Z+1, r25	; 0x01
    b160:	80 83       	st	Z, r24
_ZN18HempyBucketCommandC4E13HempyMessages():
b:\gbox420\gbox420\gbox420_mega_main\build\sketch\src/wirelesscommands_hempy.h:94
   bool Status = false;
};

struct HempyBucketCommand : HempyCommonTemplate ///< Hempy bucket wireless command
{
   HempyBucketCommand(__attribute__((unused)) HempyMessages SequenceID) : HempyCommonTemplate(SequenceID) {}
    b162:	12 82       	std	Z+2, r1	; 0x02
    b164:	13 82       	std	Z+3, r1	; 0x03
    b166:	14 82       	std	Z+4, r1	; 0x04
    b168:	15 82       	std	Z+5, r1	; 0x05
    b16a:	16 82       	std	Z+6, r1	; 0x06
    b16c:	17 82       	std	Z+7, r1	; 0x07
    b16e:	10 86       	std	Z+8, r1	; 0x08
    b170:	12 86       	std	Z+10, r1	; 0x0a
    b172:	11 86       	std	Z+9, r1	; 0x09
    b174:	80 e0       	ldi	r24, 0x00	; 0
    b176:	90 e0       	ldi	r25, 0x00	; 0
    b178:	a0 ec       	ldi	r26, 0xC0	; 192
    b17a:	bf e7       	ldi	r27, 0x7F	; 127
    b17c:	83 87       	std	Z+11, r24	; 0x0b
    b17e:	94 87       	std	Z+12, r25	; 0x0c
    b180:	a5 87       	std	Z+13, r26	; 0x0d
    b182:	b6 87       	std	Z+14, r27	; 0x0e
    b184:	17 86       	std	Z+15, r1	; 0x0f
    b186:	10 8a       	std	Z+16, r1	; 0x10
    b188:	11 8a       	std	Z+17, r1	; 0x11
    b18a:	12 8a       	std	Z+18, r1	; 0x12
    b18c:	13 8a       	std	Z+19, r1	; 0x13
    b18e:	14 8a       	std	Z+20, r1	; 0x14
    b190:	15 8a       	std	Z+21, r1	; 0x15
    b192:	16 8a       	std	Z+22, r1	; 0x16
    b194:	17 8a       	std	Z+23, r1	; 0x17
    b196:	10 8e       	std	Z+24, r1	; 0x18
    b198:	11 8e       	std	Z+25, r1	; 0x19
    b19a:	12 8e       	std	Z+26, r1	; 0x1a
    b19c:	14 8e       	std	Z+28, r1	; 0x1c
    b19e:	13 8e       	std	Z+27, r1	; 0x1b
_ZN19HempyCommonTemplateC4E13HempyMessages():
b:\gbox420\gbox420\gbox420_mega_main\build\sketch\src/wirelesscommands_hempy.h:66
struct HempyCommonTemplate ///< Hempy wireless template - Shared between Command and Respone packages
{
   HempyMessages SequenceID; ///< Commands and Responses can span across multiple 32byte packages. Packages with 0 SequenceID represent the initial attempt to exchange data
   HempyCommonTemplate(HempyMessages SequenceID)
   {
      this->SequenceID = SequenceID;
    b1a0:	eb e4       	ldi	r30, 0x4B	; 75
    b1a2:	f4 e1       	ldi	r31, 0x14	; 20
    b1a4:	23 e0       	ldi	r18, 0x03	; 3
    b1a6:	30 e0       	ldi	r19, 0x00	; 0
    b1a8:	31 83       	std	Z+1, r19	; 0x01
    b1aa:	20 83       	st	Z, r18
_ZN19HempyBucketResponseC4E13HempyMessages():
b:\gbox420\gbox420\gbox420_mega_main\build\sketch\src/wirelesscommands_hempy.h:113
   uint16_t DrainWaitTime = 0;
};

struct HempyBucketResponse : HempyCommonTemplate ///< Hempy bucket wireless response
{
   HempyBucketResponse(__attribute__((unused)) HempyMessages SequenceID) : HempyCommonTemplate(SequenceID) {}
    b1ac:	13 82       	std	Z+3, r1	; 0x03
    b1ae:	12 82       	std	Z+2, r1	; 0x02
    b1b0:	15 82       	std	Z+5, r1	; 0x05
    b1b2:	14 82       	std	Z+4, r1	; 0x04
    b1b4:	16 82       	std	Z+6, r1	; 0x06
    b1b6:	17 82       	std	Z+7, r1	; 0x07
    b1b8:	10 86       	std	Z+8, r1	; 0x08
    b1ba:	11 86       	std	Z+9, r1	; 0x09
    b1bc:	12 86       	std	Z+10, r1	; 0x0a
    b1be:	13 86       	std	Z+11, r1	; 0x0b
    b1c0:	14 86       	std	Z+12, r1	; 0x0c
    b1c2:	15 86       	std	Z+13, r1	; 0x0d
    b1c4:	16 86       	std	Z+14, r1	; 0x0e
    b1c6:	17 86       	std	Z+15, r1	; 0x0f
    b1c8:	10 8a       	std	Z+16, r1	; 0x10
    b1ca:	11 8a       	std	Z+17, r1	; 0x11
    b1cc:	12 8a       	std	Z+18, r1	; 0x12
    b1ce:	13 8a       	std	Z+19, r1	; 0x13
    b1d0:	14 8a       	std	Z+20, r1	; 0x14
    b1d2:	15 8a       	std	Z+21, r1	; 0x15
    b1d4:	16 8a       	std	Z+22, r1	; 0x16
    b1d6:	17 8a       	std	Z+23, r1	; 0x17
    b1d8:	10 8e       	std	Z+24, r1	; 0x18
    b1da:	11 8e       	std	Z+25, r1	; 0x19
    b1dc:	12 8e       	std	Z+26, r1	; 0x1a
    b1de:	13 8e       	std	Z+27, r1	; 0x1b
_ZN19HempyCommonTemplateC4E13HempyMessages():
b:\gbox420\gbox420\gbox420_mega_main\build\sketch\src/wirelesscommands_hempy.h:66
struct HempyCommonTemplate ///< Hempy wireless template - Shared between Command and Respone packages
{
   HempyMessages SequenceID; ///< Commands and Responses can span across multiple 32byte packages. Packages with 0 SequenceID represent the initial attempt to exchange data
   HempyCommonTemplate(HempyMessages SequenceID)
   {
      this->SequenceID = SequenceID;
    b1e0:	ee e2       	ldi	r30, 0x2E	; 46
    b1e2:	f4 e1       	ldi	r31, 0x14	; 20
    b1e4:	24 e0       	ldi	r18, 0x04	; 4
    b1e6:	30 e0       	ldi	r19, 0x00	; 0
    b1e8:	31 83       	std	Z+1, r19	; 0x01
    b1ea:	20 83       	st	Z, r18
_ZN18HempyBucketCommandC4E13HempyMessages():
b:\gbox420\gbox420\gbox420_mega_main\build\sketch\src/wirelesscommands_hempy.h:94
   bool Status = false;
};

struct HempyBucketCommand : HempyCommonTemplate ///< Hempy bucket wireless command
{
   HempyBucketCommand(__attribute__((unused)) HempyMessages SequenceID) : HempyCommonTemplate(SequenceID) {}
    b1ec:	12 82       	std	Z+2, r1	; 0x02
    b1ee:	13 82       	std	Z+3, r1	; 0x03
    b1f0:	14 82       	std	Z+4, r1	; 0x04
    b1f2:	15 82       	std	Z+5, r1	; 0x05
    b1f4:	16 82       	std	Z+6, r1	; 0x06
    b1f6:	17 82       	std	Z+7, r1	; 0x07
    b1f8:	10 86       	std	Z+8, r1	; 0x08
    b1fa:	12 86       	std	Z+10, r1	; 0x0a
    b1fc:	11 86       	std	Z+9, r1	; 0x09
    b1fe:	83 87       	std	Z+11, r24	; 0x0b
    b200:	94 87       	std	Z+12, r25	; 0x0c
    b202:	a5 87       	std	Z+13, r26	; 0x0d
    b204:	b6 87       	std	Z+14, r27	; 0x0e
    b206:	17 86       	std	Z+15, r1	; 0x0f
    b208:	10 8a       	std	Z+16, r1	; 0x10
    b20a:	11 8a       	std	Z+17, r1	; 0x11
    b20c:	12 8a       	std	Z+18, r1	; 0x12
    b20e:	13 8a       	std	Z+19, r1	; 0x13
    b210:	14 8a       	std	Z+20, r1	; 0x14
    b212:	15 8a       	std	Z+21, r1	; 0x15
    b214:	16 8a       	std	Z+22, r1	; 0x16
    b216:	17 8a       	std	Z+23, r1	; 0x17
    b218:	10 8e       	std	Z+24, r1	; 0x18
    b21a:	11 8e       	std	Z+25, r1	; 0x19
    b21c:	12 8e       	std	Z+26, r1	; 0x1a
    b21e:	14 8e       	std	Z+28, r1	; 0x1c
    b220:	13 8e       	std	Z+27, r1	; 0x1b
_ZN19HempyCommonTemplateC4E13HempyMessages():
b:\gbox420\gbox420\gbox420_mega_main\build\sketch\src/wirelesscommands_hempy.h:66
struct HempyCommonTemplate ///< Hempy wireless template - Shared between Command and Respone packages
{
   HempyMessages SequenceID; ///< Commands and Responses can span across multiple 32byte packages. Packages with 0 SequenceID represent the initial attempt to exchange data
   HempyCommonTemplate(HempyMessages SequenceID)
   {
      this->SequenceID = SequenceID;
    b222:	e2 e1       	ldi	r30, 0x12	; 18
    b224:	f4 e1       	ldi	r31, 0x14	; 20
    b226:	85 e0       	ldi	r24, 0x05	; 5
    b228:	90 e0       	ldi	r25, 0x00	; 0
    b22a:	91 83       	std	Z+1, r25	; 0x01
    b22c:	80 83       	st	Z, r24
_ZN19HempyBucketResponseC4E13HempyMessages():
b:\gbox420\gbox420\gbox420_mega_main\build\sketch\src/wirelesscommands_hempy.h:113
   uint16_t DrainWaitTime = 0;
};

struct HempyBucketResponse : HempyCommonTemplate ///< Hempy bucket wireless response
{
   HempyBucketResponse(__attribute__((unused)) HempyMessages SequenceID) : HempyCommonTemplate(SequenceID) {}
    b22e:	13 82       	std	Z+3, r1	; 0x03
    b230:	12 82       	std	Z+2, r1	; 0x02
    b232:	15 82       	std	Z+5, r1	; 0x05
    b234:	14 82       	std	Z+4, r1	; 0x04
    b236:	16 82       	std	Z+6, r1	; 0x06
    b238:	17 82       	std	Z+7, r1	; 0x07
    b23a:	10 86       	std	Z+8, r1	; 0x08
    b23c:	11 86       	std	Z+9, r1	; 0x09
    b23e:	12 86       	std	Z+10, r1	; 0x0a
    b240:	13 86       	std	Z+11, r1	; 0x0b
    b242:	14 86       	std	Z+12, r1	; 0x0c
    b244:	15 86       	std	Z+13, r1	; 0x0d
    b246:	16 86       	std	Z+14, r1	; 0x0e
    b248:	17 86       	std	Z+15, r1	; 0x0f
    b24a:	10 8a       	std	Z+16, r1	; 0x10
    b24c:	11 8a       	std	Z+17, r1	; 0x11
    b24e:	12 8a       	std	Z+18, r1	; 0x12
    b250:	13 8a       	std	Z+19, r1	; 0x13
    b252:	14 8a       	std	Z+20, r1	; 0x14
    b254:	15 8a       	std	Z+21, r1	; 0x15
    b256:	16 8a       	std	Z+22, r1	; 0x16
    b258:	17 8a       	std	Z+23, r1	; 0x17
    b25a:	10 8e       	std	Z+24, r1	; 0x18
    b25c:	11 8e       	std	Z+25, r1	; 0x19
    b25e:	12 8e       	std	Z+26, r1	; 0x1a
    b260:	13 8e       	std	Z+27, r1	; 0x1b
_ZN19HempyCommonTemplateC4E13HempyMessages():
b:\gbox420\gbox420\gbox420_mega_main\build\sketch\src/wirelesscommands_hempy.h:66
struct HempyCommonTemplate ///< Hempy wireless template - Shared between Command and Respone packages
{
   HempyMessages SequenceID; ///< Commands and Responses can span across multiple 32byte packages. Packages with 0 SequenceID represent the initial attempt to exchange data
   HempyCommonTemplate(HempyMessages SequenceID)
   {
      this->SequenceID = SequenceID;
    b262:	86 e0       	ldi	r24, 0x06	; 6
    b264:	90 e0       	ldi	r25, 0x00	; 0
    b266:	90 93 11 14 	sts	0x1411, r25	; 0x801411 <HempyResetToSend+0x1>
    b26a:	80 93 10 14 	sts	0x1410, r24	; 0x801410 <HempyResetToSend>
_GLOBAL__sub_I_HempyModuleCommand1ToSend():
b:\Gbox420\Gbox420\Gbox420_Mega_Main\build\sketch\src\Modules_Web/HempyModule_Web.cpp:474
  HempyBucketCommand2ToSend.OverflowTarget = DefaultSettings->OverflowTarget_B2;
  HempyBucketCommand2ToSend.WasteLimit = DefaultSettings->WasteLimit_B2;
  HempyBucketCommand2ToSend.DrainWaitTime = DefaultSettings->DrainWaitTime_B2;
  HempyBucketCommand2ToSend.PumpSpeed = DefaultSettings->PumpSpeed_B2;
  HempyBucketCommand2ToSend.PumpTimeOut = DefaultSettings->PumpTimeOut_B2;
    b26e:	08 95       	ret

0000b270 <HempyModule_Web::report(bool)>:
_ZN15HempyModule_Web6reportEb():
b:\Gbox420\Gbox420\Gbox420_Mega_Main\build\sketch\src\Modules_Web/HempyModule_Web.cpp:34

/**
* @brief Report current state in a JSON format to the LongMessage buffer
*/
void HempyModule_Web::report(bool FriendlyFormat)
{
    b270:	0f 93       	push	r16
    b272:	1f 93       	push	r17
    b274:	cf 93       	push	r28
    b276:	8c 01       	movw	r16, r24
    b278:	c6 2f       	mov	r28, r22
b:\Gbox420\Gbox420\Gbox420_Mega_Main\build\sketch\src\Modules_Web/HempyModule_Web.cpp:35
  Common::report(true); ///< Adds "NAME":{  to the LongMessage buffer. The curly bracket { needs to be closed at the end
    b27a:	dc 01       	movw	r26, r24
    b27c:	ed 91       	ld	r30, X+
    b27e:	fc 91       	ld	r31, X
    b280:	36 97       	sbiw	r30, 0x06	; 6
    b282:	80 81       	ld	r24, Z
    b284:	91 81       	ldd	r25, Z+1	; 0x01
    b286:	61 e0       	ldi	r22, 0x01	; 1
    b288:	80 0f       	add	r24, r16
    b28a:	91 1f       	adc	r25, r17
    b28c:	0e 94 0e 19 	call	0x321c	; 0x321c <Common::report(bool)>
b:\Gbox420\Gbox420\Gbox420_Mega_Main\build\sketch\src\Modules_Web/HempyModule_Web.cpp:36
  strcat_P(LongMessage, (PGM_P)F("\"S\":\""));
    b290:	65 e7       	ldi	r22, 0x75	; 117
    b292:	79 e1       	ldi	r23, 0x19	; 25
    b294:	81 e3       	ldi	r24, 0x31	; 49
    b296:	9e e0       	ldi	r25, 0x0E	; 14
    b298:	0e 94 da 94 	call	0x129b4	; 0x129b4 <strcat_P>
b:\Gbox420\Gbox420\Gbox420_Mega_Main\build\sketch\src\Modules_Web/HempyModule_Web.cpp:37
  strcat(LongMessage, FriendlyFormat ? toText_onlineStatus(OnlineStatus) : toText(OnlineStatus));
    b29c:	cc 23       	and	r28, r28
    b29e:	09 f4       	brne	.+2      	; 0xb2a2 <HempyModule_Web::report(bool)+0x32>
    b2a0:	30 c2       	rjmp	.+1120   	; 0xb702 <HempyModule_Web::report(bool)+0x492>
b:\Gbox420\Gbox420\Gbox420_Mega_Main\build\sketch\src\Modules_Web/HempyModule_Web.cpp:37 (discriminator 1)
    b2a2:	f8 01       	movw	r30, r16
    b2a4:	83 81       	ldd	r24, Z+3	; 0x03
    b2a6:	0e 94 03 35 	call	0x6a06	; 0x6a06 <toText_onlineStatus(bool)>
b:\Gbox420\Gbox420\Gbox420_Mega_Main\build\sketch\src\Modules_Web/HempyModule_Web.cpp:37 (discriminator 4)
    b2aa:	bc 01       	movw	r22, r24
    b2ac:	81 e3       	ldi	r24, 0x31	; 49
    b2ae:	9e e0       	ldi	r25, 0x0E	; 14
    b2b0:	0e 94 23 95 	call	0x12a46	; 0x12a46 <strcat>
b:\Gbox420\Gbox420\Gbox420_Mega_Main\build\sketch\src\Modules_Web/HempyModule_Web.cpp:38 (discriminator 4)
  strcat_P(LongMessage, (PGM_P)F("\",\"H1\":\""));
    b2b4:	6c e6       	ldi	r22, 0x6C	; 108
    b2b6:	79 e1       	ldi	r23, 0x19	; 25
    b2b8:	81 e3       	ldi	r24, 0x31	; 49
    b2ba:	9e e0       	ldi	r25, 0x0E	; 14
    b2bc:	0e 94 da 94 	call	0x129b4	; 0x129b4 <strcat_P>
    b2c0:	80 91 4d 14 	lds	r24, 0x144D	; 0x80144d <HempyBucketResponse1Received+0x2>
    b2c4:	90 91 4e 14 	lds	r25, 0x144E	; 0x80144e <HempyBucketResponse1Received+0x3>
b:\Gbox420\Gbox420\Gbox420_Mega_Main\build\sketch\src\Modules_Web/HempyModule_Web.cpp:39 (discriminator 4)
  strcat(LongMessage, FriendlyFormat ? toText_hempyState(HempyBucketResponse1Received.HempyState) : toText((int)HempyBucketResponse1Received.HempyState));
    b2c8:	cc 23       	and	r28, r28
    b2ca:	09 f4       	brne	.+2      	; 0xb2ce <HempyModule_Web::report(bool)+0x5e>
    b2cc:	21 c2       	rjmp	.+1090   	; 0xb710 <HempyModule_Web::report(bool)+0x4a0>
b:\Gbox420\Gbox420\Gbox420_Mega_Main\build\sketch\src\Modules_Web/HempyModule_Web.cpp:39 (discriminator 1)
    b2ce:	0e 94 db 35 	call	0x6bb6	; 0x6bb6 <toText_hempyState(HempyStates)>
b:\Gbox420\Gbox420\Gbox420_Mega_Main\build\sketch\src\Modules_Web/HempyModule_Web.cpp:39 (discriminator 4)
    b2d2:	bc 01       	movw	r22, r24
    b2d4:	81 e3       	ldi	r24, 0x31	; 49
    b2d6:	9e e0       	ldi	r25, 0x0E	; 14
    b2d8:	0e 94 23 95 	call	0x12a46	; 0x12a46 <strcat>
b:\Gbox420\Gbox420\Gbox420_Mega_Main\build\sketch\src\Modules_Web/HempyModule_Web.cpp:40 (discriminator 4)
  strcat_P(LongMessage, (PGM_P)F("\",\"P1\":\""));
    b2dc:	63 e6       	ldi	r22, 0x63	; 99
    b2de:	79 e1       	ldi	r23, 0x19	; 25
    b2e0:	81 e3       	ldi	r24, 0x31	; 49
    b2e2:	9e e0       	ldi	r25, 0x0E	; 14
    b2e4:	0e 94 da 94 	call	0x129b4	; 0x129b4 <strcat_P>
    b2e8:	80 91 4f 14 	lds	r24, 0x144F	; 0x80144f <HempyBucketResponse1Received+0x4>
    b2ec:	90 91 50 14 	lds	r25, 0x1450	; 0x801450 <HempyBucketResponse1Received+0x5>
b:\Gbox420\Gbox420\Gbox420_Mega_Main\build\sketch\src\Modules_Web/HempyModule_Web.cpp:41 (discriminator 4)
  strcat(LongMessage, FriendlyFormat ? toText_waterPumpState(HempyBucketResponse1Received.PumpState) : toText((int)HempyBucketResponse1Received.PumpState));
    b2f0:	cc 23       	and	r28, r28
    b2f2:	09 f4       	brne	.+2      	; 0xb2f6 <HempyModule_Web::report(bool)+0x86>
    b2f4:	10 c2       	rjmp	.+1056   	; 0xb716 <HempyModule_Web::report(bool)+0x4a6>
b:\Gbox420\Gbox420\Gbox420_Mega_Main\build\sketch\src\Modules_Web/HempyModule_Web.cpp:41 (discriminator 1)
    b2f6:	0e 94 3a 35 	call	0x6a74	; 0x6a74 <toText_waterPumpState(WaterPumpStates)>
b:\Gbox420\Gbox420\Gbox420_Mega_Main\build\sketch\src\Modules_Web/HempyModule_Web.cpp:41 (discriminator 4)
    b2fa:	bc 01       	movw	r22, r24
    b2fc:	81 e3       	ldi	r24, 0x31	; 49
    b2fe:	9e e0       	ldi	r25, 0x0E	; 14
    b300:	0e 94 23 95 	call	0x12a46	; 0x12a46 <strcat>
b:\Gbox420\Gbox420\Gbox420_Mega_Main\build\sketch\src\Modules_Web/HempyModule_Web.cpp:42 (discriminator 4)
  strcat_P(LongMessage, (PGM_P)F("\",\"PS1\":\""));
    b304:	69 e5       	ldi	r22, 0x59	; 89
    b306:	79 e1       	ldi	r23, 0x19	; 25
    b308:	81 e3       	ldi	r24, 0x31	; 49
    b30a:	9e e0       	ldi	r25, 0x0E	; 14
    b30c:	0e 94 da 94 	call	0x129b4	; 0x129b4 <strcat_P>
    b310:	60 91 6f 14 	lds	r22, 0x146F	; 0x80146f <HempyBucketCommand1ToSend+0x8>
b:\Gbox420\Gbox420\Gbox420_Mega_Main\build\sketch\src\Modules_Web/HempyModule_Web.cpp:43 (discriminator 4)
  strcat(LongMessage, FriendlyFormat ? toText_percentage(HempyBucketCommand1ToSend.PumpSpeed) : toText(HempyBucketCommand1ToSend.PumpSpeed));
    b314:	cc 23       	and	r28, r28
    b316:	09 f4       	brne	.+2      	; 0xb31a <HempyModule_Web::report(bool)+0xaa>
    b318:	01 c2       	rjmp	.+1026   	; 0xb71c <HempyModule_Web::report(bool)+0x4ac>
b:\Gbox420\Gbox420\Gbox420_Mega_Main\build\sketch\src\Modules_Web/HempyModule_Web.cpp:43 (discriminator 1)
    b31a:	70 e0       	ldi	r23, 0x00	; 0
    b31c:	90 e0       	ldi	r25, 0x00	; 0
    b31e:	80 e0       	ldi	r24, 0x00	; 0
    b320:	0e 94 89 90 	call	0x12112	; 0x12112 <__floatunsisf>
    b324:	0e 94 ac 34 	call	0x6958	; 0x6958 <toText_percentage(float)>
b:\Gbox420\Gbox420\Gbox420_Mega_Main\build\sketch\src\Modules_Web/HempyModule_Web.cpp:43 (discriminator 4)
    b328:	bc 01       	movw	r22, r24
    b32a:	81 e3       	ldi	r24, 0x31	; 49
    b32c:	9e e0       	ldi	r25, 0x0E	; 14
    b32e:	0e 94 23 95 	call	0x12a46	; 0x12a46 <strcat>
b:\Gbox420\Gbox420\Gbox420_Mega_Main\build\sketch\src\Modules_Web/HempyModule_Web.cpp:44 (discriminator 4)
  strcat_P(LongMessage, (PGM_P)F("\",\"PT1\":\""));
    b332:	6f e4       	ldi	r22, 0x4F	; 79
    b334:	79 e1       	ldi	r23, 0x19	; 25
    b336:	81 e3       	ldi	r24, 0x31	; 49
    b338:	9e e0       	ldi	r25, 0x0E	; 14
    b33a:	0e 94 da 94 	call	0x129b4	; 0x129b4 <strcat_P>
    b33e:	80 91 70 14 	lds	r24, 0x1470	; 0x801470 <HempyBucketCommand1ToSend+0x9>
    b342:	90 91 71 14 	lds	r25, 0x1471	; 0x801471 <HempyBucketCommand1ToSend+0xa>
b:\Gbox420\Gbox420\Gbox420_Mega_Main\build\sketch\src\Modules_Web/HempyModule_Web.cpp:45 (discriminator 4)
  strcat(LongMessage, FriendlyFormat ? toText_second(HempyBucketCommand1ToSend.PumpTimeOut) : toText(HempyBucketCommand1ToSend.PumpTimeOut));
    b346:	cc 23       	and	r28, r28
    b348:	09 f4       	brne	.+2      	; 0xb34c <HempyModule_Web::report(bool)+0xdc>
    b34a:	ed c1       	rjmp	.+986    	; 0xb726 <HempyModule_Web::report(bool)+0x4b6>
b:\Gbox420\Gbox420\Gbox420_Mega_Main\build\sketch\src\Modules_Web/HempyModule_Web.cpp:45 (discriminator 1)
    b34c:	0e 94 bd 34 	call	0x697a	; 0x697a <toText_second(int)>
b:\Gbox420\Gbox420\Gbox420_Mega_Main\build\sketch\src\Modules_Web/HempyModule_Web.cpp:45 (discriminator 4)
    b350:	bc 01       	movw	r22, r24
    b352:	81 e3       	ldi	r24, 0x31	; 49
    b354:	9e e0       	ldi	r25, 0x0E	; 14
    b356:	0e 94 23 95 	call	0x12a46	; 0x12a46 <strcat>
b:\Gbox420\Gbox420\Gbox420_Mega_Main\build\sketch\src\Modules_Web/HempyModule_Web.cpp:46 (discriminator 4)
  strcat_P(LongMessage, (PGM_P)F("\",\"DT1\":\""));
    b35a:	65 e4       	ldi	r22, 0x45	; 69
    b35c:	79 e1       	ldi	r23, 0x19	; 25
    b35e:	81 e3       	ldi	r24, 0x31	; 49
    b360:	9e e0       	ldi	r25, 0x0E	; 14
    b362:	0e 94 da 94 	call	0x129b4	; 0x129b4 <strcat_P>
    b366:	80 91 82 14 	lds	r24, 0x1482	; 0x801482 <HempyBucketCommand1ToSend+0x1b>
    b36a:	90 91 83 14 	lds	r25, 0x1483	; 0x801483 <HempyBucketCommand1ToSend+0x1c>
b:\Gbox420\Gbox420\Gbox420_Mega_Main\build\sketch\src\Modules_Web/HempyModule_Web.cpp:47 (discriminator 4)
  strcat(LongMessage, FriendlyFormat ? toText_second(HempyBucketCommand1ToSend.DrainWaitTime) : toText(HempyBucketCommand1ToSend.DrainWaitTime));
    b36e:	cc 23       	and	r28, r28
    b370:	09 f4       	brne	.+2      	; 0xb374 <HempyModule_Web::report(bool)+0x104>
    b372:	dc c1       	rjmp	.+952    	; 0xb72c <HempyModule_Web::report(bool)+0x4bc>
b:\Gbox420\Gbox420\Gbox420_Mega_Main\build\sketch\src\Modules_Web/HempyModule_Web.cpp:47 (discriminator 1)
    b374:	0e 94 bd 34 	call	0x697a	; 0x697a <toText_second(int)>
b:\Gbox420\Gbox420\Gbox420_Mega_Main\build\sketch\src\Modules_Web/HempyModule_Web.cpp:47 (discriminator 4)
    b378:	bc 01       	movw	r22, r24
    b37a:	81 e3       	ldi	r24, 0x31	; 49
    b37c:	9e e0       	ldi	r25, 0x0E	; 14
    b37e:	0e 94 23 95 	call	0x12a46	; 0x12a46 <strcat>
b:\Gbox420\Gbox420\Gbox420_Mega_Main\build\sketch\src\Modules_Web/HempyModule_Web.cpp:48 (discriminator 4)
  strcat_P(LongMessage, (PGM_P)F("\",\"WB1\":\""));
    b382:	6b e3       	ldi	r22, 0x3B	; 59
    b384:	79 e1       	ldi	r23, 0x19	; 25
    b386:	81 e3       	ldi	r24, 0x31	; 49
    b388:	9e e0       	ldi	r25, 0x0E	; 14
    b38a:	0e 94 da 94 	call	0x129b4	; 0x129b4 <strcat_P>
    b38e:	60 91 57 14 	lds	r22, 0x1457	; 0x801457 <HempyBucketResponse1Received+0xc>
    b392:	70 91 58 14 	lds	r23, 0x1458	; 0x801458 <HempyBucketResponse1Received+0xd>
    b396:	80 91 59 14 	lds	r24, 0x1459	; 0x801459 <HempyBucketResponse1Received+0xe>
    b39a:	90 91 5a 14 	lds	r25, 0x145A	; 0x80145a <HempyBucketResponse1Received+0xf>
b:\Gbox420\Gbox420\Gbox420_Mega_Main\build\sketch\src\Modules_Web/HempyModule_Web.cpp:49 (discriminator 4)
  strcat(LongMessage, FriendlyFormat ? toText_weight(HempyBucketResponse1Received.WeightB) : toText(HempyBucketResponse1Received.WeightB));
    b39e:	cc 23       	and	r28, r28
    b3a0:	09 f4       	brne	.+2      	; 0xb3a4 <HempyModule_Web::report(bool)+0x134>
    b3a2:	c7 c1       	rjmp	.+910    	; 0xb732 <HempyModule_Web::report(bool)+0x4c2>
b:\Gbox420\Gbox420\Gbox420_Mega_Main\build\sketch\src\Modules_Web/HempyModule_Web.cpp:49 (discriminator 1)
    b3a4:	0e 94 8e 34 	call	0x691c	; 0x691c <toText_weight(float)>
b:\Gbox420\Gbox420\Gbox420_Mega_Main\build\sketch\src\Modules_Web/HempyModule_Web.cpp:49 (discriminator 4)
    b3a8:	bc 01       	movw	r22, r24
    b3aa:	81 e3       	ldi	r24, 0x31	; 49
    b3ac:	9e e0       	ldi	r25, 0x0E	; 14
    b3ae:	0e 94 23 95 	call	0x12a46	; 0x12a46 <strcat>
b:\Gbox420\Gbox420\Gbox420_Mega_Main\build\sketch\src\Modules_Web/HempyModule_Web.cpp:50 (discriminator 4)
  strcat_P(LongMessage, (PGM_P)F("\",\"WR1\":\""));
    b3b2:	61 e3       	ldi	r22, 0x31	; 49
    b3b4:	79 e1       	ldi	r23, 0x19	; 25
    b3b6:	81 e3       	ldi	r24, 0x31	; 49
    b3b8:	9e e0       	ldi	r25, 0x0E	; 14
    b3ba:	0e 94 da 94 	call	0x129b4	; 0x129b4 <strcat_P>
    b3be:	60 91 5b 14 	lds	r22, 0x145B	; 0x80145b <HempyBucketResponse1Received+0x10>
    b3c2:	70 91 5c 14 	lds	r23, 0x145C	; 0x80145c <HempyBucketResponse1Received+0x11>
    b3c6:	80 91 5d 14 	lds	r24, 0x145D	; 0x80145d <HempyBucketResponse1Received+0x12>
    b3ca:	90 91 5e 14 	lds	r25, 0x145E	; 0x80145e <HempyBucketResponse1Received+0x13>
b:\Gbox420\Gbox420\Gbox420_Mega_Main\build\sketch\src\Modules_Web/HempyModule_Web.cpp:51 (discriminator 4)
  strcat(LongMessage, FriendlyFormat ? toText_weight(HempyBucketResponse1Received.WeightWR) : toText(HempyBucketResponse1Received.WeightWR));
    b3ce:	cc 23       	and	r28, r28
    b3d0:	09 f4       	brne	.+2      	; 0xb3d4 <HempyModule_Web::report(bool)+0x164>
    b3d2:	b2 c1       	rjmp	.+868    	; 0xb738 <HempyModule_Web::report(bool)+0x4c8>
b:\Gbox420\Gbox420\Gbox420_Mega_Main\build\sketch\src\Modules_Web/HempyModule_Web.cpp:51 (discriminator 1)
    b3d4:	0e 94 8e 34 	call	0x691c	; 0x691c <toText_weight(float)>
b:\Gbox420\Gbox420\Gbox420_Mega_Main\build\sketch\src\Modules_Web/HempyModule_Web.cpp:51 (discriminator 4)
    b3d8:	bc 01       	movw	r22, r24
    b3da:	81 e3       	ldi	r24, 0x31	; 49
    b3dc:	9e e0       	ldi	r25, 0x0E	; 14
    b3de:	0e 94 23 95 	call	0x12a46	; 0x12a46 <strcat>
b:\Gbox420\Gbox420\Gbox420_Mega_Main\build\sketch\src\Modules_Web/HempyModule_Web.cpp:52 (discriminator 4)
  strcat_P(LongMessage, (PGM_P)F("\",\"DW1\":\""));
    b3e2:	67 e2       	ldi	r22, 0x27	; 39
    b3e4:	79 e1       	ldi	r23, 0x19	; 25
    b3e6:	81 e3       	ldi	r24, 0x31	; 49
    b3e8:	9e e0       	ldi	r25, 0x0E	; 14
    b3ea:	0e 94 da 94 	call	0x129b4	; 0x129b4 <strcat_P>
    b3ee:	60 91 5f 14 	lds	r22, 0x145F	; 0x80145f <HempyBucketResponse1Received+0x14>
    b3f2:	70 91 60 14 	lds	r23, 0x1460	; 0x801460 <HempyBucketResponse1Received+0x15>
    b3f6:	80 91 61 14 	lds	r24, 0x1461	; 0x801461 <HempyBucketResponse1Received+0x16>
    b3fa:	90 91 62 14 	lds	r25, 0x1462	; 0x801462 <HempyBucketResponse1Received+0x17>
b:\Gbox420\Gbox420\Gbox420_Mega_Main\build\sketch\src\Modules_Web/HempyModule_Web.cpp:53 (discriminator 4)
  strcat(LongMessage, FriendlyFormat ? toText_weight(HempyBucketResponse1Received.DryWeight) : toText(HempyBucketResponse1Received.DryWeight));
    b3fe:	cc 23       	and	r28, r28
    b400:	09 f4       	brne	.+2      	; 0xb404 <HempyModule_Web::report(bool)+0x194>
    b402:	9d c1       	rjmp	.+826    	; 0xb73e <HempyModule_Web::report(bool)+0x4ce>
b:\Gbox420\Gbox420\Gbox420_Mega_Main\build\sketch\src\Modules_Web/HempyModule_Web.cpp:53 (discriminator 1)
    b404:	0e 94 8e 34 	call	0x691c	; 0x691c <toText_weight(float)>
b:\Gbox420\Gbox420\Gbox420_Mega_Main\build\sketch\src\Modules_Web/HempyModule_Web.cpp:53 (discriminator 4)
    b408:	bc 01       	movw	r22, r24
    b40a:	81 e3       	ldi	r24, 0x31	; 49
    b40c:	9e e0       	ldi	r25, 0x0E	; 14
    b40e:	0e 94 23 95 	call	0x12a46	; 0x12a46 <strcat>
b:\Gbox420\Gbox420\Gbox420_Mega_Main\build\sketch\src\Modules_Web/HempyModule_Web.cpp:54 (discriminator 4)
  strcat_P(LongMessage, (PGM_P)F("\",\"WW1\":\""));
    b412:	6d e1       	ldi	r22, 0x1D	; 29
    b414:	79 e1       	ldi	r23, 0x19	; 25
    b416:	81 e3       	ldi	r24, 0x31	; 49
    b418:	9e e0       	ldi	r25, 0x0E	; 14
    b41a:	0e 94 da 94 	call	0x129b4	; 0x129b4 <strcat_P>
    b41e:	60 91 63 14 	lds	r22, 0x1463	; 0x801463 <HempyBucketResponse1Received+0x18>
    b422:	70 91 64 14 	lds	r23, 0x1464	; 0x801464 <HempyBucketResponse1Received+0x19>
    b426:	80 91 65 14 	lds	r24, 0x1465	; 0x801465 <HempyBucketResponse1Received+0x1a>
    b42a:	90 91 66 14 	lds	r25, 0x1466	; 0x801466 <HempyBucketResponse1Received+0x1b>
b:\Gbox420\Gbox420\Gbox420_Mega_Main\build\sketch\src\Modules_Web/HempyModule_Web.cpp:55 (discriminator 4)
  strcat(LongMessage, FriendlyFormat ? toText_weight(HempyBucketResponse1Received.WetWeight) : toText(HempyBucketResponse1Received.WetWeight));
    b42e:	cc 23       	and	r28, r28
    b430:	09 f4       	brne	.+2      	; 0xb434 <HempyModule_Web::report(bool)+0x1c4>
    b432:	88 c1       	rjmp	.+784    	; 0xb744 <HempyModule_Web::report(bool)+0x4d4>
b:\Gbox420\Gbox420\Gbox420_Mega_Main\build\sketch\src\Modules_Web/HempyModule_Web.cpp:55 (discriminator 1)
    b434:	0e 94 8e 34 	call	0x691c	; 0x691c <toText_weight(float)>
b:\Gbox420\Gbox420\Gbox420_Mega_Main\build\sketch\src\Modules_Web/HempyModule_Web.cpp:55 (discriminator 4)
    b438:	bc 01       	movw	r22, r24
    b43a:	81 e3       	ldi	r24, 0x31	; 49
    b43c:	9e e0       	ldi	r25, 0x0E	; 14
    b43e:	0e 94 23 95 	call	0x12a46	; 0x12a46 <strcat>
b:\Gbox420\Gbox420\Gbox420_Mega_Main\build\sketch\src\Modules_Web/HempyModule_Web.cpp:56 (discriminator 4)
  strcat_P(LongMessage, (PGM_P)F("\",\"ET1\":\""));
    b442:	63 e1       	ldi	r22, 0x13	; 19
    b444:	79 e1       	ldi	r23, 0x19	; 25
    b446:	81 e3       	ldi	r24, 0x31	; 49
    b448:	9e e0       	ldi	r25, 0x0E	; 14
    b44a:	0e 94 da 94 	call	0x129b4	; 0x129b4 <strcat_P>
    b44e:	60 91 76 14 	lds	r22, 0x1476	; 0x801476 <HempyBucketCommand1ToSend+0xf>
    b452:	70 91 77 14 	lds	r23, 0x1477	; 0x801477 <HempyBucketCommand1ToSend+0x10>
    b456:	80 91 78 14 	lds	r24, 0x1478	; 0x801478 <HempyBucketCommand1ToSend+0x11>
    b45a:	90 91 79 14 	lds	r25, 0x1479	; 0x801479 <HempyBucketCommand1ToSend+0x12>
b:\Gbox420\Gbox420\Gbox420_Mega_Main\build\sketch\src\Modules_Web/HempyModule_Web.cpp:57 (discriminator 4)
  strcat(LongMessage, FriendlyFormat ? toText_weight(HempyBucketCommand1ToSend.EvaporationTarget) : toText(HempyBucketCommand1ToSend.EvaporationTarget));
    b45e:	cc 23       	and	r28, r28
    b460:	09 f4       	brne	.+2      	; 0xb464 <HempyModule_Web::report(bool)+0x1f4>
    b462:	73 c1       	rjmp	.+742    	; 0xb74a <HempyModule_Web::report(bool)+0x4da>
b:\Gbox420\Gbox420\Gbox420_Mega_Main\build\sketch\src\Modules_Web/HempyModule_Web.cpp:57 (discriminator 1)
    b464:	0e 94 8e 34 	call	0x691c	; 0x691c <toText_weight(float)>
b:\Gbox420\Gbox420\Gbox420_Mega_Main\build\sketch\src\Modules_Web/HempyModule_Web.cpp:57 (discriminator 4)
    b468:	bc 01       	movw	r22, r24
    b46a:	81 e3       	ldi	r24, 0x31	; 49
    b46c:	9e e0       	ldi	r25, 0x0E	; 14
    b46e:	0e 94 23 95 	call	0x12a46	; 0x12a46 <strcat>
b:\Gbox420\Gbox420\Gbox420_Mega_Main\build\sketch\src\Modules_Web/HempyModule_Web.cpp:58 (discriminator 4)
  strcat_P(LongMessage, (PGM_P)F("\",\"OT1\":\""));
    b472:	69 e0       	ldi	r22, 0x09	; 9
    b474:	79 e1       	ldi	r23, 0x19	; 25
    b476:	81 e3       	ldi	r24, 0x31	; 49
    b478:	9e e0       	ldi	r25, 0x0E	; 14
    b47a:	0e 94 da 94 	call	0x129b4	; 0x129b4 <strcat_P>
    b47e:	60 91 7a 14 	lds	r22, 0x147A	; 0x80147a <HempyBucketCommand1ToSend+0x13>
    b482:	70 91 7b 14 	lds	r23, 0x147B	; 0x80147b <HempyBucketCommand1ToSend+0x14>
    b486:	80 91 7c 14 	lds	r24, 0x147C	; 0x80147c <HempyBucketCommand1ToSend+0x15>
    b48a:	90 91 7d 14 	lds	r25, 0x147D	; 0x80147d <HempyBucketCommand1ToSend+0x16>
b:\Gbox420\Gbox420\Gbox420_Mega_Main\build\sketch\src\Modules_Web/HempyModule_Web.cpp:59 (discriminator 4)
  strcat(LongMessage, FriendlyFormat ? toText_weight(HempyBucketCommand1ToSend.OverflowTarget) : toText(HempyBucketCommand1ToSend.OverflowTarget));
    b48e:	cc 23       	and	r28, r28
    b490:	09 f4       	brne	.+2      	; 0xb494 <HempyModule_Web::report(bool)+0x224>
    b492:	5e c1       	rjmp	.+700    	; 0xb750 <HempyModule_Web::report(bool)+0x4e0>
b:\Gbox420\Gbox420\Gbox420_Mega_Main\build\sketch\src\Modules_Web/HempyModule_Web.cpp:59 (discriminator 1)
    b494:	0e 94 8e 34 	call	0x691c	; 0x691c <toText_weight(float)>
b:\Gbox420\Gbox420\Gbox420_Mega_Main\build\sketch\src\Modules_Web/HempyModule_Web.cpp:59 (discriminator 4)
    b498:	bc 01       	movw	r22, r24
    b49a:	81 e3       	ldi	r24, 0x31	; 49
    b49c:	9e e0       	ldi	r25, 0x0E	; 14
    b49e:	0e 94 23 95 	call	0x12a46	; 0x12a46 <strcat>
b:\Gbox420\Gbox420\Gbox420_Mega_Main\build\sketch\src\Modules_Web/HempyModule_Web.cpp:60 (discriminator 4)
  strcat_P(LongMessage, (PGM_P)F("\",\"WL1\":\""));
    b4a2:	6f ef       	ldi	r22, 0xFF	; 255
    b4a4:	78 e1       	ldi	r23, 0x18	; 24
    b4a6:	81 e3       	ldi	r24, 0x31	; 49
    b4a8:	9e e0       	ldi	r25, 0x0E	; 14
    b4aa:	0e 94 da 94 	call	0x129b4	; 0x129b4 <strcat_P>
    b4ae:	60 91 7e 14 	lds	r22, 0x147E	; 0x80147e <HempyBucketCommand1ToSend+0x17>
    b4b2:	70 91 7f 14 	lds	r23, 0x147F	; 0x80147f <HempyBucketCommand1ToSend+0x18>
    b4b6:	80 91 80 14 	lds	r24, 0x1480	; 0x801480 <HempyBucketCommand1ToSend+0x19>
    b4ba:	90 91 81 14 	lds	r25, 0x1481	; 0x801481 <HempyBucketCommand1ToSend+0x1a>
b:\Gbox420\Gbox420\Gbox420_Mega_Main\build\sketch\src\Modules_Web/HempyModule_Web.cpp:61 (discriminator 4)
  strcat(LongMessage, FriendlyFormat ? toText_weight(HempyBucketCommand1ToSend.WasteLimit) : toText(HempyBucketCommand1ToSend.WasteLimit));
    b4be:	cc 23       	and	r28, r28
    b4c0:	09 f4       	brne	.+2      	; 0xb4c4 <HempyModule_Web::report(bool)+0x254>
    b4c2:	49 c1       	rjmp	.+658    	; 0xb756 <HempyModule_Web::report(bool)+0x4e6>
b:\Gbox420\Gbox420\Gbox420_Mega_Main\build\sketch\src\Modules_Web/HempyModule_Web.cpp:61 (discriminator 1)
    b4c4:	0e 94 8e 34 	call	0x691c	; 0x691c <toText_weight(float)>
b:\Gbox420\Gbox420\Gbox420_Mega_Main\build\sketch\src\Modules_Web/HempyModule_Web.cpp:61 (discriminator 4)
    b4c8:	bc 01       	movw	r22, r24
    b4ca:	81 e3       	ldi	r24, 0x31	; 49
    b4cc:	9e e0       	ldi	r25, 0x0E	; 14
    b4ce:	0e 94 23 95 	call	0x12a46	; 0x12a46 <strcat>
b:\Gbox420\Gbox420\Gbox420_Mega_Main\build\sketch\src\Modules_Web/HempyModule_Web.cpp:62 (discriminator 4)
  strcat_P(LongMessage, (PGM_P)F("\",\"H2\":\""));
    b4d2:	66 ef       	ldi	r22, 0xF6	; 246
    b4d4:	78 e1       	ldi	r23, 0x18	; 24
    b4d6:	81 e3       	ldi	r24, 0x31	; 49
    b4d8:	9e e0       	ldi	r25, 0x0E	; 14
    b4da:	0e 94 da 94 	call	0x129b4	; 0x129b4 <strcat_P>
    b4de:	80 91 14 14 	lds	r24, 0x1414	; 0x801414 <HempyBucketResponse2Received+0x2>
    b4e2:	90 91 15 14 	lds	r25, 0x1415	; 0x801415 <HempyBucketResponse2Received+0x3>
b:\Gbox420\Gbox420\Gbox420_Mega_Main\build\sketch\src\Modules_Web/HempyModule_Web.cpp:63 (discriminator 4)
  strcat(LongMessage, FriendlyFormat ? toText_hempyState(HempyBucketResponse2Received.HempyState) : toText((int)HempyBucketResponse2Received.HempyState));
    b4e6:	cc 23       	and	r28, r28
    b4e8:	09 f4       	brne	.+2      	; 0xb4ec <HempyModule_Web::report(bool)+0x27c>
    b4ea:	38 c1       	rjmp	.+624    	; 0xb75c <HempyModule_Web::report(bool)+0x4ec>
b:\Gbox420\Gbox420\Gbox420_Mega_Main\build\sketch\src\Modules_Web/HempyModule_Web.cpp:63 (discriminator 1)
    b4ec:	0e 94 db 35 	call	0x6bb6	; 0x6bb6 <toText_hempyState(HempyStates)>
b:\Gbox420\Gbox420\Gbox420_Mega_Main\build\sketch\src\Modules_Web/HempyModule_Web.cpp:63 (discriminator 4)
    b4f0:	bc 01       	movw	r22, r24
    b4f2:	81 e3       	ldi	r24, 0x31	; 49
    b4f4:	9e e0       	ldi	r25, 0x0E	; 14
    b4f6:	0e 94 23 95 	call	0x12a46	; 0x12a46 <strcat>
b:\Gbox420\Gbox420\Gbox420_Mega_Main\build\sketch\src\Modules_Web/HempyModule_Web.cpp:64 (discriminator 4)
  strcat_P(LongMessage, (PGM_P)F("\",\"P2\":\""));
    b4fa:	6d ee       	ldi	r22, 0xED	; 237
    b4fc:	78 e1       	ldi	r23, 0x18	; 24
    b4fe:	81 e3       	ldi	r24, 0x31	; 49
    b500:	9e e0       	ldi	r25, 0x0E	; 14
    b502:	0e 94 da 94 	call	0x129b4	; 0x129b4 <strcat_P>
    b506:	80 91 16 14 	lds	r24, 0x1416	; 0x801416 <HempyBucketResponse2Received+0x4>
    b50a:	90 91 17 14 	lds	r25, 0x1417	; 0x801417 <HempyBucketResponse2Received+0x5>
b:\Gbox420\Gbox420\Gbox420_Mega_Main\build\sketch\src\Modules_Web/HempyModule_Web.cpp:65 (discriminator 4)
  strcat(LongMessage, FriendlyFormat ? toText_waterPumpState(HempyBucketResponse2Received.PumpState) : toText((int)HempyBucketResponse2Received.PumpState));
    b50e:	cc 23       	and	r28, r28
    b510:	09 f4       	brne	.+2      	; 0xb514 <HempyModule_Web::report(bool)+0x2a4>
    b512:	27 c1       	rjmp	.+590    	; 0xb762 <HempyModule_Web::report(bool)+0x4f2>
b:\Gbox420\Gbox420\Gbox420_Mega_Main\build\sketch\src\Modules_Web/HempyModule_Web.cpp:65 (discriminator 1)
    b514:	0e 94 3a 35 	call	0x6a74	; 0x6a74 <toText_waterPumpState(WaterPumpStates)>
b:\Gbox420\Gbox420\Gbox420_Mega_Main\build\sketch\src\Modules_Web/HempyModule_Web.cpp:65 (discriminator 4)
    b518:	bc 01       	movw	r22, r24
    b51a:	81 e3       	ldi	r24, 0x31	; 49
    b51c:	9e e0       	ldi	r25, 0x0E	; 14
    b51e:	0e 94 23 95 	call	0x12a46	; 0x12a46 <strcat>
b:\Gbox420\Gbox420\Gbox420_Mega_Main\build\sketch\src\Modules_Web/HempyModule_Web.cpp:66 (discriminator 4)
  strcat_P(LongMessage, (PGM_P)F("\",\"PS2\":\""));
    b522:	63 ee       	ldi	r22, 0xE3	; 227
    b524:	78 e1       	ldi	r23, 0x18	; 24
    b526:	81 e3       	ldi	r24, 0x31	; 49
    b528:	9e e0       	ldi	r25, 0x0E	; 14
    b52a:	0e 94 da 94 	call	0x129b4	; 0x129b4 <strcat_P>
    b52e:	60 91 36 14 	lds	r22, 0x1436	; 0x801436 <HempyBucketCommand2ToSend+0x8>
b:\Gbox420\Gbox420\Gbox420_Mega_Main\build\sketch\src\Modules_Web/HempyModule_Web.cpp:67 (discriminator 4)
  strcat(LongMessage, FriendlyFormat ? toText_percentage(HempyBucketCommand2ToSend.PumpSpeed) : toText(HempyBucketCommand2ToSend.PumpSpeed));
    b532:	cc 23       	and	r28, r28
    b534:	09 f4       	brne	.+2      	; 0xb538 <HempyModule_Web::report(bool)+0x2c8>
    b536:	18 c1       	rjmp	.+560    	; 0xb768 <HempyModule_Web::report(bool)+0x4f8>
b:\Gbox420\Gbox420\Gbox420_Mega_Main\build\sketch\src\Modules_Web/HempyModule_Web.cpp:67 (discriminator 1)
    b538:	70 e0       	ldi	r23, 0x00	; 0
    b53a:	90 e0       	ldi	r25, 0x00	; 0
    b53c:	80 e0       	ldi	r24, 0x00	; 0
    b53e:	0e 94 89 90 	call	0x12112	; 0x12112 <__floatunsisf>
    b542:	0e 94 ac 34 	call	0x6958	; 0x6958 <toText_percentage(float)>
b:\Gbox420\Gbox420\Gbox420_Mega_Main\build\sketch\src\Modules_Web/HempyModule_Web.cpp:67 (discriminator 4)
    b546:	bc 01       	movw	r22, r24
    b548:	81 e3       	ldi	r24, 0x31	; 49
    b54a:	9e e0       	ldi	r25, 0x0E	; 14
    b54c:	0e 94 23 95 	call	0x12a46	; 0x12a46 <strcat>
b:\Gbox420\Gbox420\Gbox420_Mega_Main\build\sketch\src\Modules_Web/HempyModule_Web.cpp:68 (discriminator 4)
  strcat_P(LongMessage, (PGM_P)F("\",\"PT2\":\""));
    b550:	69 ed       	ldi	r22, 0xD9	; 217
    b552:	78 e1       	ldi	r23, 0x18	; 24
    b554:	81 e3       	ldi	r24, 0x31	; 49
    b556:	9e e0       	ldi	r25, 0x0E	; 14
    b558:	0e 94 da 94 	call	0x129b4	; 0x129b4 <strcat_P>
    b55c:	80 91 37 14 	lds	r24, 0x1437	; 0x801437 <HempyBucketCommand2ToSend+0x9>
    b560:	90 91 38 14 	lds	r25, 0x1438	; 0x801438 <HempyBucketCommand2ToSend+0xa>
b:\Gbox420\Gbox420\Gbox420_Mega_Main\build\sketch\src\Modules_Web/HempyModule_Web.cpp:69 (discriminator 4)
  strcat(LongMessage, FriendlyFormat ? toText_second(HempyBucketCommand2ToSend.PumpTimeOut) : toText(HempyBucketCommand2ToSend.PumpTimeOut));
    b564:	cc 23       	and	r28, r28
    b566:	09 f4       	brne	.+2      	; 0xb56a <HempyModule_Web::report(bool)+0x2fa>
    b568:	04 c1       	rjmp	.+520    	; 0xb772 <HempyModule_Web::report(bool)+0x502>
b:\Gbox420\Gbox420\Gbox420_Mega_Main\build\sketch\src\Modules_Web/HempyModule_Web.cpp:69 (discriminator 1)
    b56a:	0e 94 bd 34 	call	0x697a	; 0x697a <toText_second(int)>
b:\Gbox420\Gbox420\Gbox420_Mega_Main\build\sketch\src\Modules_Web/HempyModule_Web.cpp:69 (discriminator 4)
    b56e:	bc 01       	movw	r22, r24
    b570:	81 e3       	ldi	r24, 0x31	; 49
    b572:	9e e0       	ldi	r25, 0x0E	; 14
    b574:	0e 94 23 95 	call	0x12a46	; 0x12a46 <strcat>
b:\Gbox420\Gbox420\Gbox420_Mega_Main\build\sketch\src\Modules_Web/HempyModule_Web.cpp:70 (discriminator 4)
  strcat_P(LongMessage, (PGM_P)F("\",\"DT2\":\""));
    b578:	6f ec       	ldi	r22, 0xCF	; 207
    b57a:	78 e1       	ldi	r23, 0x18	; 24
    b57c:	81 e3       	ldi	r24, 0x31	; 49
    b57e:	9e e0       	ldi	r25, 0x0E	; 14
    b580:	0e 94 da 94 	call	0x129b4	; 0x129b4 <strcat_P>
    b584:	80 91 49 14 	lds	r24, 0x1449	; 0x801449 <HempyBucketCommand2ToSend+0x1b>
    b588:	90 91 4a 14 	lds	r25, 0x144A	; 0x80144a <HempyBucketCommand2ToSend+0x1c>
b:\Gbox420\Gbox420\Gbox420_Mega_Main\build\sketch\src\Modules_Web/HempyModule_Web.cpp:71 (discriminator 4)
  strcat(LongMessage, FriendlyFormat ? toText_second(HempyBucketCommand2ToSend.DrainWaitTime) : toText(HempyBucketCommand2ToSend.DrainWaitTime));
    b58c:	cc 23       	and	r28, r28
    b58e:	09 f4       	brne	.+2      	; 0xb592 <HempyModule_Web::report(bool)+0x322>
    b590:	f3 c0       	rjmp	.+486    	; 0xb778 <HempyModule_Web::report(bool)+0x508>
b:\Gbox420\Gbox420\Gbox420_Mega_Main\build\sketch\src\Modules_Web/HempyModule_Web.cpp:71 (discriminator 1)
    b592:	0e 94 bd 34 	call	0x697a	; 0x697a <toText_second(int)>
b:\Gbox420\Gbox420\Gbox420_Mega_Main\build\sketch\src\Modules_Web/HempyModule_Web.cpp:71 (discriminator 4)
    b596:	bc 01       	movw	r22, r24
    b598:	81 e3       	ldi	r24, 0x31	; 49
    b59a:	9e e0       	ldi	r25, 0x0E	; 14
    b59c:	0e 94 23 95 	call	0x12a46	; 0x12a46 <strcat>
b:\Gbox420\Gbox420\Gbox420_Mega_Main\build\sketch\src\Modules_Web/HempyModule_Web.cpp:72 (discriminator 4)
  strcat_P(LongMessage, (PGM_P)F("\",\"WB2\":\""));
    b5a0:	65 ec       	ldi	r22, 0xC5	; 197
    b5a2:	78 e1       	ldi	r23, 0x18	; 24
    b5a4:	81 e3       	ldi	r24, 0x31	; 49
    b5a6:	9e e0       	ldi	r25, 0x0E	; 14
    b5a8:	0e 94 da 94 	call	0x129b4	; 0x129b4 <strcat_P>
    b5ac:	60 91 1e 14 	lds	r22, 0x141E	; 0x80141e <HempyBucketResponse2Received+0xc>
    b5b0:	70 91 1f 14 	lds	r23, 0x141F	; 0x80141f <HempyBucketResponse2Received+0xd>
    b5b4:	80 91 20 14 	lds	r24, 0x1420	; 0x801420 <HempyBucketResponse2Received+0xe>
    b5b8:	90 91 21 14 	lds	r25, 0x1421	; 0x801421 <HempyBucketResponse2Received+0xf>
b:\Gbox420\Gbox420\Gbox420_Mega_Main\build\sketch\src\Modules_Web/HempyModule_Web.cpp:73 (discriminator 4)
  strcat(LongMessage, FriendlyFormat ? toText_weight(HempyBucketResponse2Received.WeightB) : toText(HempyBucketResponse2Received.WeightB));
    b5bc:	cc 23       	and	r28, r28
    b5be:	09 f4       	brne	.+2      	; 0xb5c2 <HempyModule_Web::report(bool)+0x352>
    b5c0:	de c0       	rjmp	.+444    	; 0xb77e <HempyModule_Web::report(bool)+0x50e>
b:\Gbox420\Gbox420\Gbox420_Mega_Main\build\sketch\src\Modules_Web/HempyModule_Web.cpp:73 (discriminator 1)
    b5c2:	0e 94 8e 34 	call	0x691c	; 0x691c <toText_weight(float)>
b:\Gbox420\Gbox420\Gbox420_Mega_Main\build\sketch\src\Modules_Web/HempyModule_Web.cpp:73 (discriminator 4)
    b5c6:	bc 01       	movw	r22, r24
    b5c8:	81 e3       	ldi	r24, 0x31	; 49
    b5ca:	9e e0       	ldi	r25, 0x0E	; 14
    b5cc:	0e 94 23 95 	call	0x12a46	; 0x12a46 <strcat>
b:\Gbox420\Gbox420\Gbox420_Mega_Main\build\sketch\src\Modules_Web/HempyModule_Web.cpp:74 (discriminator 4)
  strcat_P(LongMessage, (PGM_P)F("\",\"WR2\":\""));
    b5d0:	6b eb       	ldi	r22, 0xBB	; 187
    b5d2:	78 e1       	ldi	r23, 0x18	; 24
    b5d4:	81 e3       	ldi	r24, 0x31	; 49
    b5d6:	9e e0       	ldi	r25, 0x0E	; 14
    b5d8:	0e 94 da 94 	call	0x129b4	; 0x129b4 <strcat_P>
    b5dc:	60 91 22 14 	lds	r22, 0x1422	; 0x801422 <HempyBucketResponse2Received+0x10>
    b5e0:	70 91 23 14 	lds	r23, 0x1423	; 0x801423 <HempyBucketResponse2Received+0x11>
    b5e4:	80 91 24 14 	lds	r24, 0x1424	; 0x801424 <HempyBucketResponse2Received+0x12>
    b5e8:	90 91 25 14 	lds	r25, 0x1425	; 0x801425 <HempyBucketResponse2Received+0x13>
b:\Gbox420\Gbox420\Gbox420_Mega_Main\build\sketch\src\Modules_Web/HempyModule_Web.cpp:75 (discriminator 4)
  strcat(LongMessage, FriendlyFormat ? toText_weight(HempyBucketResponse2Received.WeightWR) : toText(HempyBucketResponse2Received.WeightWR));
    b5ec:	cc 23       	and	r28, r28
    b5ee:	09 f4       	brne	.+2      	; 0xb5f2 <HempyModule_Web::report(bool)+0x382>
    b5f0:	c9 c0       	rjmp	.+402    	; 0xb784 <HempyModule_Web::report(bool)+0x514>
b:\Gbox420\Gbox420\Gbox420_Mega_Main\build\sketch\src\Modules_Web/HempyModule_Web.cpp:75 (discriminator 1)
    b5f2:	0e 94 8e 34 	call	0x691c	; 0x691c <toText_weight(float)>
b:\Gbox420\Gbox420\Gbox420_Mega_Main\build\sketch\src\Modules_Web/HempyModule_Web.cpp:75 (discriminator 4)
    b5f6:	bc 01       	movw	r22, r24
    b5f8:	81 e3       	ldi	r24, 0x31	; 49
    b5fa:	9e e0       	ldi	r25, 0x0E	; 14
    b5fc:	0e 94 23 95 	call	0x12a46	; 0x12a46 <strcat>
b:\Gbox420\Gbox420\Gbox420_Mega_Main\build\sketch\src\Modules_Web/HempyModule_Web.cpp:76 (discriminator 4)
  strcat_P(LongMessage, (PGM_P)F("\",\"DW2\":\""));
    b600:	61 eb       	ldi	r22, 0xB1	; 177
    b602:	78 e1       	ldi	r23, 0x18	; 24
    b604:	81 e3       	ldi	r24, 0x31	; 49
    b606:	9e e0       	ldi	r25, 0x0E	; 14
    b608:	0e 94 da 94 	call	0x129b4	; 0x129b4 <strcat_P>
    b60c:	60 91 26 14 	lds	r22, 0x1426	; 0x801426 <HempyBucketResponse2Received+0x14>
    b610:	70 91 27 14 	lds	r23, 0x1427	; 0x801427 <HempyBucketResponse2Received+0x15>
    b614:	80 91 28 14 	lds	r24, 0x1428	; 0x801428 <HempyBucketResponse2Received+0x16>
    b618:	90 91 29 14 	lds	r25, 0x1429	; 0x801429 <HempyBucketResponse2Received+0x17>
b:\Gbox420\Gbox420\Gbox420_Mega_Main\build\sketch\src\Modules_Web/HempyModule_Web.cpp:77 (discriminator 4)
  strcat(LongMessage, FriendlyFormat ? toText_weight(HempyBucketResponse2Received.DryWeight) : toText(HempyBucketResponse2Received.DryWeight));
    b61c:	cc 23       	and	r28, r28
    b61e:	09 f4       	brne	.+2      	; 0xb622 <HempyModule_Web::report(bool)+0x3b2>
    b620:	b4 c0       	rjmp	.+360    	; 0xb78a <HempyModule_Web::report(bool)+0x51a>
b:\Gbox420\Gbox420\Gbox420_Mega_Main\build\sketch\src\Modules_Web/HempyModule_Web.cpp:77 (discriminator 1)
    b622:	0e 94 8e 34 	call	0x691c	; 0x691c <toText_weight(float)>
b:\Gbox420\Gbox420\Gbox420_Mega_Main\build\sketch\src\Modules_Web/HempyModule_Web.cpp:77 (discriminator 4)
    b626:	bc 01       	movw	r22, r24
    b628:	81 e3       	ldi	r24, 0x31	; 49
    b62a:	9e e0       	ldi	r25, 0x0E	; 14
    b62c:	0e 94 23 95 	call	0x12a46	; 0x12a46 <strcat>
b:\Gbox420\Gbox420\Gbox420_Mega_Main\build\sketch\src\Modules_Web/HempyModule_Web.cpp:78 (discriminator 4)
  strcat_P(LongMessage, (PGM_P)F("\",\"WW2\":\""));
    b630:	67 ea       	ldi	r22, 0xA7	; 167
    b632:	78 e1       	ldi	r23, 0x18	; 24
    b634:	81 e3       	ldi	r24, 0x31	; 49
    b636:	9e e0       	ldi	r25, 0x0E	; 14
    b638:	0e 94 da 94 	call	0x129b4	; 0x129b4 <strcat_P>
    b63c:	60 91 2a 14 	lds	r22, 0x142A	; 0x80142a <HempyBucketResponse2Received+0x18>
    b640:	70 91 2b 14 	lds	r23, 0x142B	; 0x80142b <HempyBucketResponse2Received+0x19>
    b644:	80 91 2c 14 	lds	r24, 0x142C	; 0x80142c <HempyBucketResponse2Received+0x1a>
    b648:	90 91 2d 14 	lds	r25, 0x142D	; 0x80142d <HempyBucketResponse2Received+0x1b>
b:\Gbox420\Gbox420\Gbox420_Mega_Main\build\sketch\src\Modules_Web/HempyModule_Web.cpp:79 (discriminator 4)
  strcat(LongMessage, FriendlyFormat ? toText_weight(HempyBucketResponse2Received.WetWeight) : toText(HempyBucketResponse2Received.WetWeight));
    b64c:	cc 23       	and	r28, r28
    b64e:	09 f4       	brne	.+2      	; 0xb652 <HempyModule_Web::report(bool)+0x3e2>
    b650:	9f c0       	rjmp	.+318    	; 0xb790 <HempyModule_Web::report(bool)+0x520>
b:\Gbox420\Gbox420\Gbox420_Mega_Main\build\sketch\src\Modules_Web/HempyModule_Web.cpp:79 (discriminator 1)
    b652:	0e 94 8e 34 	call	0x691c	; 0x691c <toText_weight(float)>
b:\Gbox420\Gbox420\Gbox420_Mega_Main\build\sketch\src\Modules_Web/HempyModule_Web.cpp:79 (discriminator 4)
    b656:	bc 01       	movw	r22, r24
    b658:	81 e3       	ldi	r24, 0x31	; 49
    b65a:	9e e0       	ldi	r25, 0x0E	; 14
    b65c:	0e 94 23 95 	call	0x12a46	; 0x12a46 <strcat>
b:\Gbox420\Gbox420\Gbox420_Mega_Main\build\sketch\src\Modules_Web/HempyModule_Web.cpp:80 (discriminator 4)
  strcat_P(LongMessage, (PGM_P)F("\",\"ET2\":\""));
    b660:	6d e9       	ldi	r22, 0x9D	; 157
    b662:	78 e1       	ldi	r23, 0x18	; 24
    b664:	81 e3       	ldi	r24, 0x31	; 49
    b666:	9e e0       	ldi	r25, 0x0E	; 14
    b668:	0e 94 da 94 	call	0x129b4	; 0x129b4 <strcat_P>
    b66c:	60 91 3d 14 	lds	r22, 0x143D	; 0x80143d <HempyBucketCommand2ToSend+0xf>
    b670:	70 91 3e 14 	lds	r23, 0x143E	; 0x80143e <HempyBucketCommand2ToSend+0x10>
    b674:	80 91 3f 14 	lds	r24, 0x143F	; 0x80143f <HempyBucketCommand2ToSend+0x11>
    b678:	90 91 40 14 	lds	r25, 0x1440	; 0x801440 <HempyBucketCommand2ToSend+0x12>
b:\Gbox420\Gbox420\Gbox420_Mega_Main\build\sketch\src\Modules_Web/HempyModule_Web.cpp:81 (discriminator 4)
  strcat(LongMessage, FriendlyFormat ? toText_weight(HempyBucketCommand2ToSend.EvaporationTarget) : toText(HempyBucketCommand2ToSend.EvaporationTarget));
    b67c:	cc 23       	and	r28, r28
    b67e:	09 f4       	brne	.+2      	; 0xb682 <HempyModule_Web::report(bool)+0x412>
    b680:	8a c0       	rjmp	.+276    	; 0xb796 <HempyModule_Web::report(bool)+0x526>
b:\Gbox420\Gbox420\Gbox420_Mega_Main\build\sketch\src\Modules_Web/HempyModule_Web.cpp:81 (discriminator 1)
    b682:	0e 94 8e 34 	call	0x691c	; 0x691c <toText_weight(float)>
b:\Gbox420\Gbox420\Gbox420_Mega_Main\build\sketch\src\Modules_Web/HempyModule_Web.cpp:81 (discriminator 4)
    b686:	bc 01       	movw	r22, r24
    b688:	81 e3       	ldi	r24, 0x31	; 49
    b68a:	9e e0       	ldi	r25, 0x0E	; 14
    b68c:	0e 94 23 95 	call	0x12a46	; 0x12a46 <strcat>
b:\Gbox420\Gbox420\Gbox420_Mega_Main\build\sketch\src\Modules_Web/HempyModule_Web.cpp:82 (discriminator 4)
  strcat_P(LongMessage, (PGM_P)F("\",\"OT2\":\""));
    b690:	63 e9       	ldi	r22, 0x93	; 147
    b692:	78 e1       	ldi	r23, 0x18	; 24
    b694:	81 e3       	ldi	r24, 0x31	; 49
    b696:	9e e0       	ldi	r25, 0x0E	; 14
    b698:	0e 94 da 94 	call	0x129b4	; 0x129b4 <strcat_P>
    b69c:	60 91 41 14 	lds	r22, 0x1441	; 0x801441 <HempyBucketCommand2ToSend+0x13>
    b6a0:	70 91 42 14 	lds	r23, 0x1442	; 0x801442 <HempyBucketCommand2ToSend+0x14>
    b6a4:	80 91 43 14 	lds	r24, 0x1443	; 0x801443 <HempyBucketCommand2ToSend+0x15>
    b6a8:	90 91 44 14 	lds	r25, 0x1444	; 0x801444 <HempyBucketCommand2ToSend+0x16>
b:\Gbox420\Gbox420\Gbox420_Mega_Main\build\sketch\src\Modules_Web/HempyModule_Web.cpp:83 (discriminator 4)
  strcat(LongMessage, FriendlyFormat ? toText_weight(HempyBucketCommand2ToSend.OverflowTarget) : toText(HempyBucketCommand2ToSend.OverflowTarget));
    b6ac:	cc 23       	and	r28, r28
    b6ae:	09 f4       	brne	.+2      	; 0xb6b2 <HempyModule_Web::report(bool)+0x442>
    b6b0:	75 c0       	rjmp	.+234    	; 0xb79c <HempyModule_Web::report(bool)+0x52c>
b:\Gbox420\Gbox420\Gbox420_Mega_Main\build\sketch\src\Modules_Web/HempyModule_Web.cpp:83 (discriminator 1)
    b6b2:	0e 94 8e 34 	call	0x691c	; 0x691c <toText_weight(float)>
b:\Gbox420\Gbox420\Gbox420_Mega_Main\build\sketch\src\Modules_Web/HempyModule_Web.cpp:83 (discriminator 4)
    b6b6:	bc 01       	movw	r22, r24
    b6b8:	81 e3       	ldi	r24, 0x31	; 49
    b6ba:	9e e0       	ldi	r25, 0x0E	; 14
    b6bc:	0e 94 23 95 	call	0x12a46	; 0x12a46 <strcat>
b:\Gbox420\Gbox420\Gbox420_Mega_Main\build\sketch\src\Modules_Web/HempyModule_Web.cpp:84 (discriminator 4)
  strcat_P(LongMessage, (PGM_P)F("\",\"WL2\":\""));
    b6c0:	69 e8       	ldi	r22, 0x89	; 137
    b6c2:	78 e1       	ldi	r23, 0x18	; 24
    b6c4:	81 e3       	ldi	r24, 0x31	; 49
    b6c6:	9e e0       	ldi	r25, 0x0E	; 14
    b6c8:	0e 94 da 94 	call	0x129b4	; 0x129b4 <strcat_P>
    b6cc:	60 91 45 14 	lds	r22, 0x1445	; 0x801445 <HempyBucketCommand2ToSend+0x17>
    b6d0:	70 91 46 14 	lds	r23, 0x1446	; 0x801446 <HempyBucketCommand2ToSend+0x18>
    b6d4:	80 91 47 14 	lds	r24, 0x1447	; 0x801447 <HempyBucketCommand2ToSend+0x19>
    b6d8:	90 91 48 14 	lds	r25, 0x1448	; 0x801448 <HempyBucketCommand2ToSend+0x1a>
b:\Gbox420\Gbox420\Gbox420_Mega_Main\build\sketch\src\Modules_Web/HempyModule_Web.cpp:85 (discriminator 4)
  strcat(LongMessage, FriendlyFormat ? toText_weight(HempyBucketCommand2ToSend.WasteLimit) : toText(HempyBucketCommand2ToSend.WasteLimit));
    b6dc:	cc 23       	and	r28, r28
    b6de:	09 f4       	brne	.+2      	; 0xb6e2 <HempyModule_Web::report(bool)+0x472>
    b6e0:	60 c0       	rjmp	.+192    	; 0xb7a2 <HempyModule_Web::report(bool)+0x532>
b:\Gbox420\Gbox420\Gbox420_Mega_Main\build\sketch\src\Modules_Web/HempyModule_Web.cpp:85 (discriminator 1)
    b6e2:	0e 94 8e 34 	call	0x691c	; 0x691c <toText_weight(float)>
b:\Gbox420\Gbox420\Gbox420_Mega_Main\build\sketch\src\Modules_Web/HempyModule_Web.cpp:85 (discriminator 4)
    b6e6:	bc 01       	movw	r22, r24
    b6e8:	81 e3       	ldi	r24, 0x31	; 49
    b6ea:	9e e0       	ldi	r25, 0x0E	; 14
    b6ec:	0e 94 23 95 	call	0x12a46	; 0x12a46 <strcat>
b:\Gbox420\Gbox420\Gbox420_Mega_Main\build\sketch\src\Modules_Web/HempyModule_Web.cpp:86 (discriminator 4)
  strcat_P(LongMessage, (PGM_P)F("\"}")); ///< closing the curly bracket at the end of the JSON
    b6f0:	66 e8       	ldi	r22, 0x86	; 134
    b6f2:	78 e1       	ldi	r23, 0x18	; 24
    b6f4:	81 e3       	ldi	r24, 0x31	; 49
    b6f6:	9e e0       	ldi	r25, 0x0E	; 14
b:\Gbox420\Gbox420\Gbox420_Mega_Main\build\sketch\src\Modules_Web/HempyModule_Web.cpp:87 (discriminator 4)
}
    b6f8:	cf 91       	pop	r28
    b6fa:	1f 91       	pop	r17
    b6fc:	0f 91       	pop	r16
b:\Gbox420\Gbox420\Gbox420_Mega_Main\build\sketch\src\Modules_Web/HempyModule_Web.cpp:86 (discriminator 4)
  strcat(LongMessage, FriendlyFormat ? toText_weight(HempyBucketCommand2ToSend.EvaporationTarget) : toText(HempyBucketCommand2ToSend.EvaporationTarget));
  strcat_P(LongMessage, (PGM_P)F("\",\"OT2\":\""));
  strcat(LongMessage, FriendlyFormat ? toText_weight(HempyBucketCommand2ToSend.OverflowTarget) : toText(HempyBucketCommand2ToSend.OverflowTarget));
  strcat_P(LongMessage, (PGM_P)F("\",\"WL2\":\""));
  strcat(LongMessage, FriendlyFormat ? toText_weight(HempyBucketCommand2ToSend.WasteLimit) : toText(HempyBucketCommand2ToSend.WasteLimit));
  strcat_P(LongMessage, (PGM_P)F("\"}")); ///< closing the curly bracket at the end of the JSON
    b6fe:	0c 94 da 94 	jmp	0x129b4	; 0x129b4 <strcat_P>
b:\Gbox420\Gbox420\Gbox420_Mega_Main\build\sketch\src\Modules_Web/HempyModule_Web.cpp:37 (discriminator 2)
*/
void HempyModule_Web::report(bool FriendlyFormat)
{
  Common::report(true); ///< Adds "NAME":{  to the LongMessage buffer. The curly bracket { needs to be closed at the end
  strcat_P(LongMessage, (PGM_P)F("\"S\":\""));
  strcat(LongMessage, FriendlyFormat ? toText_onlineStatus(OnlineStatus) : toText(OnlineStatus));
    b702:	d8 01       	movw	r26, r16
    b704:	13 96       	adiw	r26, 0x03	; 3
    b706:	8c 91       	ld	r24, X
    b708:	90 e0       	ldi	r25, 0x00	; 0
    b70a:	0e 94 95 33 	call	0x672a	; 0x672a <toText(int)>
    b70e:	cd cd       	rjmp	.-1126   	; 0xb2aa <HempyModule_Web::report(bool)+0x3a>
b:\Gbox420\Gbox420\Gbox420_Mega_Main\build\sketch\src\Modules_Web/HempyModule_Web.cpp:39 (discriminator 2)
  strcat_P(LongMessage, (PGM_P)F("\",\"H1\":\""));
  strcat(LongMessage, FriendlyFormat ? toText_hempyState(HempyBucketResponse1Received.HempyState) : toText((int)HempyBucketResponse1Received.HempyState));
    b710:	0e 94 95 33 	call	0x672a	; 0x672a <toText(int)>
    b714:	de cd       	rjmp	.-1092   	; 0xb2d2 <HempyModule_Web::report(bool)+0x62>
b:\Gbox420\Gbox420\Gbox420_Mega_Main\build\sketch\src\Modules_Web/HempyModule_Web.cpp:41 (discriminator 2)
  strcat_P(LongMessage, (PGM_P)F("\",\"P1\":\""));
  strcat(LongMessage, FriendlyFormat ? toText_waterPumpState(HempyBucketResponse1Received.PumpState) : toText((int)HempyBucketResponse1Received.PumpState));
    b716:	0e 94 95 33 	call	0x672a	; 0x672a <toText(int)>
    b71a:	ef cd       	rjmp	.-1058   	; 0xb2fa <HempyModule_Web::report(bool)+0x8a>
b:\Gbox420\Gbox420\Gbox420_Mega_Main\build\sketch\src\Modules_Web/HempyModule_Web.cpp:43 (discriminator 2)
  strcat_P(LongMessage, (PGM_P)F("\",\"PS1\":\""));
  strcat(LongMessage, FriendlyFormat ? toText_percentage(HempyBucketCommand1ToSend.PumpSpeed) : toText(HempyBucketCommand1ToSend.PumpSpeed));
    b71c:	86 2f       	mov	r24, r22
    b71e:	90 e0       	ldi	r25, 0x00	; 0
    b720:	0e 94 95 33 	call	0x672a	; 0x672a <toText(int)>
    b724:	01 ce       	rjmp	.-1022   	; 0xb328 <HempyModule_Web::report(bool)+0xb8>
b:\Gbox420\Gbox420\Gbox420_Mega_Main\build\sketch\src\Modules_Web/HempyModule_Web.cpp:45 (discriminator 2)
  strcat_P(LongMessage, (PGM_P)F("\",\"PT1\":\""));
  strcat(LongMessage, FriendlyFormat ? toText_second(HempyBucketCommand1ToSend.PumpTimeOut) : toText(HempyBucketCommand1ToSend.PumpTimeOut));
    b726:	0e 94 9d 33 	call	0x673a	; 0x673a <toText(unsigned int)>
    b72a:	12 ce       	rjmp	.-988    	; 0xb350 <HempyModule_Web::report(bool)+0xe0>
b:\Gbox420\Gbox420\Gbox420_Mega_Main\build\sketch\src\Modules_Web/HempyModule_Web.cpp:47 (discriminator 2)
  strcat_P(LongMessage, (PGM_P)F("\",\"DT1\":\""));
  strcat(LongMessage, FriendlyFormat ? toText_second(HempyBucketCommand1ToSend.DrainWaitTime) : toText(HempyBucketCommand1ToSend.DrainWaitTime));
    b72c:	0e 94 9d 33 	call	0x673a	; 0x673a <toText(unsigned int)>
    b730:	23 ce       	rjmp	.-954    	; 0xb378 <HempyModule_Web::report(bool)+0x108>
b:\Gbox420\Gbox420\Gbox420_Mega_Main\build\sketch\src\Modules_Web/HempyModule_Web.cpp:49 (discriminator 2)
  strcat_P(LongMessage, (PGM_P)F("\",\"WB1\":\""));
  strcat(LongMessage, FriendlyFormat ? toText_weight(HempyBucketResponse1Received.WeightB) : toText(HempyBucketResponse1Received.WeightB));
    b732:	0e 94 a5 33 	call	0x674a	; 0x674a <toText(float)>
    b736:	38 ce       	rjmp	.-912    	; 0xb3a8 <HempyModule_Web::report(bool)+0x138>
b:\Gbox420\Gbox420\Gbox420_Mega_Main\build\sketch\src\Modules_Web/HempyModule_Web.cpp:51 (discriminator 2)
  strcat_P(LongMessage, (PGM_P)F("\",\"WR1\":\""));
  strcat(LongMessage, FriendlyFormat ? toText_weight(HempyBucketResponse1Received.WeightWR) : toText(HempyBucketResponse1Received.WeightWR));
    b738:	0e 94 a5 33 	call	0x674a	; 0x674a <toText(float)>
    b73c:	4d ce       	rjmp	.-870    	; 0xb3d8 <HempyModule_Web::report(bool)+0x168>
b:\Gbox420\Gbox420\Gbox420_Mega_Main\build\sketch\src\Modules_Web/HempyModule_Web.cpp:53 (discriminator 2)
  strcat_P(LongMessage, (PGM_P)F("\",\"DW1\":\""));
  strcat(LongMessage, FriendlyFormat ? toText_weight(HempyBucketResponse1Received.DryWeight) : toText(HempyBucketResponse1Received.DryWeight));
    b73e:	0e 94 a5 33 	call	0x674a	; 0x674a <toText(float)>
    b742:	62 ce       	rjmp	.-828    	; 0xb408 <HempyModule_Web::report(bool)+0x198>
b:\Gbox420\Gbox420\Gbox420_Mega_Main\build\sketch\src\Modules_Web/HempyModule_Web.cpp:55 (discriminator 2)
  strcat_P(LongMessage, (PGM_P)F("\",\"WW1\":\""));
  strcat(LongMessage, FriendlyFormat ? toText_weight(HempyBucketResponse1Received.WetWeight) : toText(HempyBucketResponse1Received.WetWeight));
    b744:	0e 94 a5 33 	call	0x674a	; 0x674a <toText(float)>
    b748:	77 ce       	rjmp	.-786    	; 0xb438 <HempyModule_Web::report(bool)+0x1c8>
b:\Gbox420\Gbox420\Gbox420_Mega_Main\build\sketch\src\Modules_Web/HempyModule_Web.cpp:57 (discriminator 2)
  strcat_P(LongMessage, (PGM_P)F("\",\"ET1\":\""));
  strcat(LongMessage, FriendlyFormat ? toText_weight(HempyBucketCommand1ToSend.EvaporationTarget) : toText(HempyBucketCommand1ToSend.EvaporationTarget));
    b74a:	0e 94 a5 33 	call	0x674a	; 0x674a <toText(float)>
    b74e:	8c ce       	rjmp	.-744    	; 0xb468 <HempyModule_Web::report(bool)+0x1f8>
b:\Gbox420\Gbox420\Gbox420_Mega_Main\build\sketch\src\Modules_Web/HempyModule_Web.cpp:59 (discriminator 2)
  strcat_P(LongMessage, (PGM_P)F("\",\"OT1\":\""));
  strcat(LongMessage, FriendlyFormat ? toText_weight(HempyBucketCommand1ToSend.OverflowTarget) : toText(HempyBucketCommand1ToSend.OverflowTarget));
    b750:	0e 94 a5 33 	call	0x674a	; 0x674a <toText(float)>
    b754:	a1 ce       	rjmp	.-702    	; 0xb498 <HempyModule_Web::report(bool)+0x228>
b:\Gbox420\Gbox420\Gbox420_Mega_Main\build\sketch\src\Modules_Web/HempyModule_Web.cpp:61 (discriminator 2)
  strcat_P(LongMessage, (PGM_P)F("\",\"WL1\":\""));
  strcat(LongMessage, FriendlyFormat ? toText_weight(HempyBucketCommand1ToSend.WasteLimit) : toText(HempyBucketCommand1ToSend.WasteLimit));
    b756:	0e 94 a5 33 	call	0x674a	; 0x674a <toText(float)>
    b75a:	b6 ce       	rjmp	.-660    	; 0xb4c8 <HempyModule_Web::report(bool)+0x258>
b:\Gbox420\Gbox420\Gbox420_Mega_Main\build\sketch\src\Modules_Web/HempyModule_Web.cpp:63 (discriminator 2)
  strcat_P(LongMessage, (PGM_P)F("\",\"H2\":\""));
  strcat(LongMessage, FriendlyFormat ? toText_hempyState(HempyBucketResponse2Received.HempyState) : toText((int)HempyBucketResponse2Received.HempyState));
    b75c:	0e 94 95 33 	call	0x672a	; 0x672a <toText(int)>
    b760:	c7 ce       	rjmp	.-626    	; 0xb4f0 <HempyModule_Web::report(bool)+0x280>
b:\Gbox420\Gbox420\Gbox420_Mega_Main\build\sketch\src\Modules_Web/HempyModule_Web.cpp:65 (discriminator 2)
  strcat_P(LongMessage, (PGM_P)F("\",\"P2\":\""));
  strcat(LongMessage, FriendlyFormat ? toText_waterPumpState(HempyBucketResponse2Received.PumpState) : toText((int)HempyBucketResponse2Received.PumpState));
    b762:	0e 94 95 33 	call	0x672a	; 0x672a <toText(int)>
    b766:	d8 ce       	rjmp	.-592    	; 0xb518 <HempyModule_Web::report(bool)+0x2a8>
b:\Gbox420\Gbox420\Gbox420_Mega_Main\build\sketch\src\Modules_Web/HempyModule_Web.cpp:67 (discriminator 2)
  strcat_P(LongMessage, (PGM_P)F("\",\"PS2\":\""));
  strcat(LongMessage, FriendlyFormat ? toText_percentage(HempyBucketCommand2ToSend.PumpSpeed) : toText(HempyBucketCommand2ToSend.PumpSpeed));
    b768:	86 2f       	mov	r24, r22
    b76a:	90 e0       	ldi	r25, 0x00	; 0
    b76c:	0e 94 95 33 	call	0x672a	; 0x672a <toText(int)>
    b770:	ea ce       	rjmp	.-556    	; 0xb546 <HempyModule_Web::report(bool)+0x2d6>
b:\Gbox420\Gbox420\Gbox420_Mega_Main\build\sketch\src\Modules_Web/HempyModule_Web.cpp:69 (discriminator 2)
  strcat_P(LongMessage, (PGM_P)F("\",\"PT2\":\""));
  strcat(LongMessage, FriendlyFormat ? toText_second(HempyBucketCommand2ToSend.PumpTimeOut) : toText(HempyBucketCommand2ToSend.PumpTimeOut));
    b772:	0e 94 9d 33 	call	0x673a	; 0x673a <toText(unsigned int)>
    b776:	fb ce       	rjmp	.-522    	; 0xb56e <HempyModule_Web::report(bool)+0x2fe>
b:\Gbox420\Gbox420\Gbox420_Mega_Main\build\sketch\src\Modules_Web/HempyModule_Web.cpp:71 (discriminator 2)
  strcat_P(LongMessage, (PGM_P)F("\",\"DT2\":\""));
  strcat(LongMessage, FriendlyFormat ? toText_second(HempyBucketCommand2ToSend.DrainWaitTime) : toText(HempyBucketCommand2ToSend.DrainWaitTime));
    b778:	0e 94 9d 33 	call	0x673a	; 0x673a <toText(unsigned int)>
    b77c:	0c cf       	rjmp	.-488    	; 0xb596 <HempyModule_Web::report(bool)+0x326>
b:\Gbox420\Gbox420\Gbox420_Mega_Main\build\sketch\src\Modules_Web/HempyModule_Web.cpp:73 (discriminator 2)
  strcat_P(LongMessage, (PGM_P)F("\",\"WB2\":\""));
  strcat(LongMessage, FriendlyFormat ? toText_weight(HempyBucketResponse2Received.WeightB) : toText(HempyBucketResponse2Received.WeightB));
    b77e:	0e 94 a5 33 	call	0x674a	; 0x674a <toText(float)>
    b782:	21 cf       	rjmp	.-446    	; 0xb5c6 <HempyModule_Web::report(bool)+0x356>
b:\Gbox420\Gbox420\Gbox420_Mega_Main\build\sketch\src\Modules_Web/HempyModule_Web.cpp:75 (discriminator 2)
  strcat_P(LongMessage, (PGM_P)F("\",\"WR2\":\""));
  strcat(LongMessage, FriendlyFormat ? toText_weight(HempyBucketResponse2Received.WeightWR) : toText(HempyBucketResponse2Received.WeightWR));
    b784:	0e 94 a5 33 	call	0x674a	; 0x674a <toText(float)>
    b788:	36 cf       	rjmp	.-404    	; 0xb5f6 <HempyModule_Web::report(bool)+0x386>
b:\Gbox420\Gbox420\Gbox420_Mega_Main\build\sketch\src\Modules_Web/HempyModule_Web.cpp:77 (discriminator 2)
  strcat_P(LongMessage, (PGM_P)F("\",\"DW2\":\""));
  strcat(LongMessage, FriendlyFormat ? toText_weight(HempyBucketResponse2Received.DryWeight) : toText(HempyBucketResponse2Received.DryWeight));
    b78a:	0e 94 a5 33 	call	0x674a	; 0x674a <toText(float)>
    b78e:	4b cf       	rjmp	.-362    	; 0xb626 <HempyModule_Web::report(bool)+0x3b6>
b:\Gbox420\Gbox420\Gbox420_Mega_Main\build\sketch\src\Modules_Web/HempyModule_Web.cpp:79 (discriminator 2)
  strcat_P(LongMessage, (PGM_P)F("\",\"WW2\":\""));
  strcat(LongMessage, FriendlyFormat ? toText_weight(HempyBucketResponse2Received.WetWeight) : toText(HempyBucketResponse2Received.WetWeight));
    b790:	0e 94 a5 33 	call	0x674a	; 0x674a <toText(float)>
    b794:	60 cf       	rjmp	.-320    	; 0xb656 <HempyModule_Web::report(bool)+0x3e6>
b:\Gbox420\Gbox420\Gbox420_Mega_Main\build\sketch\src\Modules_Web/HempyModule_Web.cpp:81 (discriminator 2)
  strcat_P(LongMessage, (PGM_P)F("\",\"ET2\":\""));
  strcat(LongMessage, FriendlyFormat ? toText_weight(HempyBucketCommand2ToSend.EvaporationTarget) : toText(HempyBucketCommand2ToSend.EvaporationTarget));
    b796:	0e 94 a5 33 	call	0x674a	; 0x674a <toText(float)>
    b79a:	75 cf       	rjmp	.-278    	; 0xb686 <HempyModule_Web::report(bool)+0x416>
b:\Gbox420\Gbox420\Gbox420_Mega_Main\build\sketch\src\Modules_Web/HempyModule_Web.cpp:83 (discriminator 2)
  strcat_P(LongMessage, (PGM_P)F("\",\"OT2\":\""));
  strcat(LongMessage, FriendlyFormat ? toText_weight(HempyBucketCommand2ToSend.OverflowTarget) : toText(HempyBucketCommand2ToSend.OverflowTarget));
    b79c:	0e 94 a5 33 	call	0x674a	; 0x674a <toText(float)>
    b7a0:	8a cf       	rjmp	.-236    	; 0xb6b6 <HempyModule_Web::report(bool)+0x446>
b:\Gbox420\Gbox420\Gbox420_Mega_Main\build\sketch\src\Modules_Web/HempyModule_Web.cpp:85 (discriminator 2)
  strcat_P(LongMessage, (PGM_P)F("\",\"WL2\":\""));
  strcat(LongMessage, FriendlyFormat ? toText_weight(HempyBucketCommand2ToSend.WasteLimit) : toText(HempyBucketCommand2ToSend.WasteLimit));
    b7a2:	0e 94 a5 33 	call	0x674a	; 0x674a <toText(float)>
    b7a6:	9f cf       	rjmp	.-194    	; 0xb6e6 <HempyModule_Web::report(bool)+0x476>

0000b7a8 <virtual thunk to HempyModule_Web::report(bool)>:
_ZTv0_n6_N15HempyModule_Web6reportEb():
    b7a8:	dc 01       	movw	r26, r24
    b7aa:	ed 91       	ld	r30, X+
    b7ac:	fc 91       	ld	r31, X
    b7ae:	36 97       	sbiw	r30, 0x06	; 6
    b7b0:	20 81       	ld	r18, Z
    b7b2:	31 81       	ldd	r19, Z+1	; 0x01
    b7b4:	82 0f       	add	r24, r18
    b7b6:	93 1f       	adc	r25, r19
    b7b8:	0c 94 38 59 	jmp	0xb270	; 0xb270 <HempyModule_Web::report(bool)>

0000b7bc <MainModule::websiteEvent_Load(char*)>:
_ZN10MainModule17websiteEvent_LoadEPc():
b:\Gbox420\Gbox420\Gbox420_Mega_Main\build\sketch\src\Modules_Web/MainModule_Web.cpp:132
  {
    return toText_onOff(getDayMode());
  }
  else
  {
    return toText(getDayMode());
    b7bc:	08 95       	ret

0000b7be <MainModule::websiteEvent_Refresh(char*)>:
_ZN10MainModule20websiteEvent_RefreshEPc():
    b7be:	cf 93       	push	r28
    b7c0:	df 93       	push	r29
    b7c2:	ec 01       	movw	r28, r24
    b7c4:	e8 81       	ld	r30, Y
    b7c6:	f9 81       	ldd	r31, Y+1	; 0x01
    b7c8:	72 97       	sbiw	r30, 0x12	; 18
    b7ca:	80 81       	ld	r24, Z
    b7cc:	91 81       	ldd	r25, Z+1	; 0x01
    b7ce:	60 e0       	ldi	r22, 0x00	; 0
    b7d0:	8c 0f       	add	r24, r28
    b7d2:	9d 1f       	adc	r25, r29
    b7d4:	0e 94 c3 1b 	call	0x3786	; 0x3786 <Module::getFormattedTime(bool)>
    b7d8:	ac 01       	movw	r20, r24
    b7da:	64 eb       	ldi	r22, 0xB4	; 180
    b7dc:	79 e1       	ldi	r23, 0x19	; 25
    b7de:	89 ee       	ldi	r24, 0xE9	; 233
    b7e0:	9c e0       	ldi	r25, 0x0C	; 12
    b7e2:	0e 94 0a 78 	call	0xf014	; 0xf014 <ELClientWebServer::setArgString(__FlashStringHelper const*, char const*)>
    b7e6:	e8 81       	ld	r30, Y
    b7e8:	f9 81       	ldd	r31, Y+1	; 0x01
    b7ea:	70 97       	sbiw	r30, 0x10	; 16
    b7ec:	80 81       	ld	r24, Z
    b7ee:	91 81       	ldd	r25, Z+1	; 0x01
    b7f0:	41 e0       	ldi	r20, 0x01	; 1
    b7f2:	60 e0       	ldi	r22, 0x00	; 0
    b7f4:	8c 0f       	add	r24, r28
    b7f6:	9d 1f       	adc	r25, r29
    b7f8:	0e 94 2f 38 	call	0x705e	; 0x705e <Module_Web::eventLogToJSON(bool, bool)>
    b7fc:	ac 01       	movw	r20, r24
    b7fe:	60 eb       	ldi	r22, 0xB0	; 176
    b800:	79 e1       	ldi	r23, 0x19	; 25
    b802:	89 ee       	ldi	r24, 0xE9	; 233
    b804:	9c e0       	ldi	r25, 0x0C	; 12
    b806:	df 91       	pop	r29
    b808:	cf 91       	pop	r28
    b80a:	0c 94 44 77 	jmp	0xee88	; 0xee88 <ELClientWebServer::setArgJson(__FlashStringHelper const*, char const*)>

0000b80e <MainModule::commandEvent(char*, char*)>:
_ZN10MainModule12commandEventEPcS0_():
    b80e:	dc 01       	movw	r26, r24
    b810:	ed 91       	ld	r30, X+
    b812:	fc 91       	ld	r31, X
    b814:	36 97       	sbiw	r30, 0x06	; 6
    b816:	20 81       	ld	r18, Z
    b818:	31 81       	ldd	r19, Z+1	; 0x01
    b81a:	82 0f       	add	r24, r18
    b81c:	93 1f       	adc	r25, r19
    b81e:	0c 94 25 19 	jmp	0x324a	; 0x324a <Common::isThisMine(char const*)>

0000b822 <virtual thunk to MainModule::commandEvent(char*, char*)>:
_ZTv0_n14_N10MainModule12commandEventEPcS0_():
    b822:	dc 01       	movw	r26, r24
    b824:	ed 91       	ld	r30, X+
    b826:	fc 91       	ld	r31, X
    b828:	3e 97       	sbiw	r30, 0x0e	; 14
    b82a:	20 81       	ld	r18, Z
    b82c:	31 81       	ldd	r19, Z+1	; 0x01
    b82e:	82 0f       	add	r24, r18
    b830:	93 1f       	adc	r25, r19
    b832:	0c 94 07 5c 	jmp	0xb80e	; 0xb80e <MainModule::commandEvent(char*, char*)>

0000b836 <MainModule::refresh_FiveSec()>:
_ZN10MainModule15refresh_FiveSecEv():
    b836:	dc 01       	movw	r26, r24
    b838:	ed 91       	ld	r30, X+
    b83a:	fc 91       	ld	r31, X
    b83c:	70 97       	sbiw	r30, 0x10	; 16
    b83e:	20 81       	ld	r18, Z
    b840:	31 81       	ldd	r19, Z+1	; 0x01
    b842:	82 0f       	add	r24, r18
    b844:	93 1f       	adc	r25, r19
    b846:	0c 94 57 40 	jmp	0x80ae	; 0x80ae <Module_Web::refresh_FiveSec()>

0000b84a <virtual thunk to MainModule::refresh_FiveSec()>:
_ZTv0_n10_N10MainModule15refresh_FiveSecEv():
    b84a:	dc 01       	movw	r26, r24
    b84c:	ed 91       	ld	r30, X+
    b84e:	fc 91       	ld	r31, X
    b850:	3a 97       	sbiw	r30, 0x0a	; 10
    b852:	20 81       	ld	r18, Z
    b854:	31 81       	ldd	r19, Z+1	; 0x01
    b856:	82 0f       	add	r24, r18
    b858:	93 1f       	adc	r25, r19
    b85a:	0c 94 1b 5c 	jmp	0xb836	; 0xb836 <MainModule::refresh_FiveSec()>

0000b85e <virtual thunk to MainModule::refresh_FiveSec()>:
_ZTv0_n18_N10MainModule15refresh_FiveSecEv():
    b85e:	dc 01       	movw	r26, r24
    b860:	ed 91       	ld	r30, X+
    b862:	fc 91       	ld	r31, X
    b864:	72 97       	sbiw	r30, 0x12	; 18
    b866:	20 81       	ld	r18, Z
    b868:	31 81       	ldd	r19, Z+1	; 0x01
    b86a:	82 0f       	add	r24, r18
    b86c:	93 1f       	adc	r25, r19
    b86e:	0c 94 1b 5c 	jmp	0xb836	; 0xb836 <MainModule::refresh_FiveSec()>

0000b872 <MainModule::refresh_Minute()>:
_ZN10MainModule14refresh_MinuteEv():
    b872:	dc 01       	movw	r26, r24
    b874:	ed 91       	ld	r30, X+
    b876:	fc 91       	ld	r31, X
    b878:	70 97       	sbiw	r30, 0x10	; 16
    b87a:	20 81       	ld	r18, Z
    b87c:	31 81       	ldd	r19, Z+1	; 0x01
    b87e:	82 0f       	add	r24, r18
    b880:	93 1f       	adc	r25, r19
    b882:	0c 94 02 3d 	jmp	0x7a04	; 0x7a04 <Module_Web::refresh_Minute()>

0000b886 <virtual thunk to MainModule::refresh_Minute()>:
_ZTv0_n12_N10MainModule14refresh_MinuteEv():
    b886:	dc 01       	movw	r26, r24
    b888:	ed 91       	ld	r30, X+
    b88a:	fc 91       	ld	r31, X
    b88c:	3c 97       	sbiw	r30, 0x0c	; 12
    b88e:	20 81       	ld	r18, Z
    b890:	31 81       	ldd	r19, Z+1	; 0x01
    b892:	82 0f       	add	r24, r18
    b894:	93 1f       	adc	r25, r19
    b896:	0c 94 39 5c 	jmp	0xb872	; 0xb872 <MainModule::refresh_Minute()>

0000b89a <virtual thunk to MainModule::refresh_Minute()>:
_ZTv0_n20_N10MainModule14refresh_MinuteEv():
    b89a:	dc 01       	movw	r26, r24
    b89c:	ed 91       	ld	r30, X+
    b89e:	fc 91       	ld	r31, X
    b8a0:	74 97       	sbiw	r30, 0x14	; 20
    b8a2:	20 81       	ld	r18, Z
    b8a4:	31 81       	ldd	r19, Z+1	; 0x01
    b8a6:	82 0f       	add	r24, r18
    b8a8:	93 1f       	adc	r25, r19
    b8aa:	0c 94 39 5c 	jmp	0xb872	; 0xb872 <MainModule::refresh_Minute()>

0000b8ae <MainModule::MainModule(__FlashStringHelper const*, Settings::MainModuleSettings*, RF24*)>:
_ZN10MainModuleC4EPK19__FlashStringHelperPN8Settings18MainModuleSettingsEP4RF24():
    b8ae:	8f 92       	push	r8
    b8b0:	9f 92       	push	r9
    b8b2:	af 92       	push	r10
    b8b4:	bf 92       	push	r11
    b8b6:	cf 92       	push	r12
    b8b8:	df 92       	push	r13
    b8ba:	ef 92       	push	r14
    b8bc:	ff 92       	push	r15
    b8be:	0f 93       	push	r16
    b8c0:	1f 93       	push	r17
    b8c2:	cf 93       	push	r28
    b8c4:	df 93       	push	r29
    b8c6:	ec 01       	movw	r28, r24
    b8c8:	6b 01       	movw	r12, r22
    b8ca:	4a 01       	movw	r8, r20
    b8cc:	59 01       	movw	r10, r18
    b8ce:	67 2b       	or	r22, r23
    b8d0:	09 f4       	brne	.+2      	; 0xb8d4 <MainModule::MainModule(__FlashStringHelper const*, Settings::MainModuleSettings*, RF24*)+0x26>
    b8d2:	f4 c2       	rjmp	.+1512   	; 0xbebc <MainModule::MainModule(__FlashStringHelper const*, Settings::MainModuleSettings*, RF24*)+0x60e>
    b8d4:	b9 01       	movw	r22, r18
    b8d6:	4c 96       	adiw	r24, 0x1c	; 28
    b8d8:	0e 94 f7 18 	call	0x31ee	; 0x31ee <Common::Common(__FlashStringHelper const*)>
Common_Web():
    b8dc:	88 ea       	ldi	r24, 0xA8	; 168
    b8de:	99 e0       	ldi	r25, 0x09	; 9
    b8e0:	99 83       	std	Y+1, r25	; 0x01
    b8e2:	88 83       	st	Y, r24
    b8e4:	8c eb       	ldi	r24, 0xBC	; 188
    b8e6:	99 e0       	ldi	r25, 0x09	; 9
    b8e8:	9d 8f       	std	Y+29, r25	; 0x1d
    b8ea:	8c 8f       	std	Y+28, r24	; 0x1c
_ZN10MainModuleC4EPK19__FlashStringHelperPN8Settings18MainModuleSettingsEP4RF24():
    b8ec:	a5 01       	movw	r20, r10
    b8ee:	6c ed       	ldi	r22, 0xDC	; 220
    b8f0:	79 e0       	ldi	r23, 0x09	; 9
    b8f2:	ce 01       	movw	r24, r28
    b8f4:	8a 50       	subi	r24, 0x0A	; 10
    b8f6:	9f 4f       	sbci	r25, 0xFF	; 255
    b8f8:	0e 94 7e 1a 	call	0x34fc	; 0x34fc <Module::Module(__FlashStringHelper const*)>
    b8fc:	a5 01       	movw	r20, r10
    b8fe:	64 ed       	ldi	r22, 0xD4	; 212
    b900:	79 e0       	ldi	r23, 0x09	; 9
    b902:	ce 01       	movw	r24, r28
    b904:	80 96       	adiw	r24, 0x20	; 32
    b906:	0e 94 24 37 	call	0x6e48	; 0x6e48 <Module_Web::Module_Web(__FlashStringHelper const*)>
    b90a:	82 ef       	ldi	r24, 0xF2	; 242
    b90c:	99 e0       	ldi	r25, 0x09	; 9
    b90e:	99 83       	std	Y+1, r25	; 0x01
    b910:	88 83       	st	Y, r24
    b912:	c1 14       	cp	r12, r1
    b914:	d1 04       	cpc	r13, r1
    b916:	09 f0       	breq	.+2      	; 0xb91a <MainModule::MainModule(__FlashStringHelper const*, Settings::MainModuleSettings*, RF24*)+0x6c>
    b918:	c9 c2       	rjmp	.+1426   	; 0xbeac <MainModule::MainModule(__FlashStringHelper const*, Settings::MainModuleSettings*, RF24*)+0x5fe>
    b91a:	d4 01       	movw	r26, r8
    b91c:	12 96       	adiw	r26, 0x02	; 2
    b91e:	2d 91       	ld	r18, X+
    b920:	3c 91       	ld	r19, X
    b922:	0e 97       	sbiw	r24, 0x0e	; 14
    b924:	fc 01       	movw	r30, r24
    b926:	80 81       	ld	r24, Z
    b928:	91 81       	ldd	r25, Z+1	; 0x01
    b92a:	8c 0f       	add	r24, r28
    b92c:	9d 1f       	adc	r25, r29
    b92e:	dc 01       	movw	r26, r24
    b930:	2d 93       	st	X+, r18
    b932:	3c 93       	st	X, r19
    b934:	2c e0       	ldi	r18, 0x0C	; 12
    b936:	3a e0       	ldi	r19, 0x0A	; 10
    b938:	8c e1       	ldi	r24, 0x1C	; 28
    b93a:	90 e0       	ldi	r25, 0x00	; 0
    b93c:	c1 14       	cp	r12, r1
    b93e:	d1 04       	cpc	r13, r1
    b940:	41 f4       	brne	.+16     	; 0xb952 <MainModule::MainModule(__FlashStringHelper const*, Settings::MainModuleSettings*, RF24*)+0xa4>
    b942:	f4 01       	movw	r30, r8
    b944:	24 81       	ldd	r18, Z+4	; 0x04
    b946:	35 81       	ldd	r19, Z+5	; 0x05
    b948:	e8 81       	ld	r30, Y
    b94a:	f9 81       	ldd	r31, Y+1	; 0x01
    b94c:	36 97       	sbiw	r30, 0x06	; 6
    b94e:	80 81       	ld	r24, Z
    b950:	91 81       	ldd	r25, Z+1	; 0x01
    b952:	8c 0f       	add	r24, r28
    b954:	9d 1f       	adc	r25, r29
    b956:	dc 01       	movw	r26, r24
    b958:	2d 93       	st	X+, r18
    b95a:	3c 93       	st	X, r19
    b95c:	8e e2       	ldi	r24, 0x2E	; 46
    b95e:	9a e0       	ldi	r25, 0x0A	; 10
    b960:	e0 e2       	ldi	r30, 0x20	; 32
    b962:	f0 e0       	ldi	r31, 0x00	; 0
    b964:	c1 14       	cp	r12, r1
    b966:	d1 04       	cpc	r13, r1
    b968:	49 f4       	brne	.+18     	; 0xb97c <MainModule::MainModule(__FlashStringHelper const*, Settings::MainModuleSettings*, RF24*)+0xce>
    b96a:	f4 01       	movw	r30, r8
    b96c:	86 81       	ldd	r24, Z+6	; 0x06
    b96e:	97 81       	ldd	r25, Z+7	; 0x07
    b970:	e8 81       	ld	r30, Y
    b972:	f9 81       	ldd	r31, Y+1	; 0x01
    b974:	70 97       	sbiw	r30, 0x10	; 16
    b976:	01 90       	ld	r0, Z+
    b978:	f0 81       	ld	r31, Z
    b97a:	e0 2d       	mov	r30, r0
    b97c:	ec 0f       	add	r30, r28
    b97e:	fd 1f       	adc	r31, r29
    b980:	91 83       	std	Z+1, r25	; 0x01
    b982:	80 83       	st	Z, r24
    b984:	86 e4       	ldi	r24, 0x46	; 70
    b986:	9a e0       	ldi	r25, 0x0A	; 10
    b988:	a6 ef       	ldi	r26, 0xF6	; 246
    b98a:	b0 e0       	ldi	r27, 0x00	; 0
    b98c:	c1 14       	cp	r12, r1
    b98e:	d1 04       	cpc	r13, r1
    b990:	51 f4       	brne	.+20     	; 0xb9a6 <MainModule::MainModule(__FlashStringHelper const*, Settings::MainModuleSettings*, RF24*)+0xf8>
    b992:	d4 01       	movw	r26, r8
    b994:	18 96       	adiw	r26, 0x08	; 8
    b996:	8d 91       	ld	r24, X+
    b998:	9c 91       	ld	r25, X
    b99a:	a8 81       	ld	r26, Y
    b99c:	b9 81       	ldd	r27, Y+1	; 0x01
    b99e:	52 97       	sbiw	r26, 0x12	; 18
    b9a0:	0d 90       	ld	r0, X+
    b9a2:	bc 91       	ld	r27, X
    b9a4:	a0 2d       	mov	r26, r0
    b9a6:	ac 0f       	add	r26, r28
    b9a8:	bd 1f       	adc	r27, r29
    b9aa:	11 96       	adiw	r26, 0x01	; 1
    b9ac:	9c 93       	st	X, r25
    b9ae:	8e 93       	st	-X, r24
    b9b0:	1b 82       	std	Y+3, r1	; 0x03
    b9b2:	1a 82       	std	Y+2, r1	; 0x02
    b9b4:	1d 82       	std	Y+5, r1	; 0x05
    b9b6:	1c 82       	std	Y+4, r1	; 0x04
    b9b8:	1f 82       	std	Y+7, r1	; 0x07
    b9ba:	1e 82       	std	Y+6, r1	; 0x06
    b9bc:	19 86       	std	Y+9, r1	; 0x09
    b9be:	18 86       	std	Y+8, r1	; 0x08
    b9c0:	1b 86       	std	Y+11, r1	; 0x0b
    b9c2:	1a 86       	std	Y+10, r1	; 0x0a
    b9c4:	1d 86       	std	Y+13, r1	; 0x0d
    b9c6:	1c 86       	std	Y+12, r1	; 0x0c
    b9c8:	1f 86       	std	Y+15, r1	; 0x0f
    b9ca:	1e 86       	std	Y+14, r1	; 0x0e
    b9cc:	19 8a       	std	Y+17, r1	; 0x11
    b9ce:	18 8a       	std	Y+16, r1	; 0x10
    b9d0:	1b 8a       	std	Y+19, r1	; 0x13
    b9d2:	1a 8a       	std	Y+18, r1	; 0x12
    b9d4:	1d 8a       	std	Y+21, r1	; 0x15
    b9d6:	1c 8a       	std	Y+20, r1	; 0x14
    b9d8:	1f 8a       	std	Y+23, r1	; 0x17
    b9da:	1e 8a       	std	Y+22, r1	; 0x16
    b9dc:	19 8e       	std	Y+25, r1	; 0x19
    b9de:	18 8e       	std	Y+24, r1	; 0x18
    b9e0:	1b 8e       	std	Y+27, r1	; 0x1b
    b9e2:	1a 8e       	std	Y+26, r1	; 0x1a
    b9e4:	15 96       	adiw	r26, 0x05	; 5
    b9e6:	1c 93       	st	X, r17
    b9e8:	0e 93       	st	-X, r16
    b9ea:	14 97       	sbiw	r26, 0x04	; 4
    b9ec:	c8 01       	movw	r24, r16
    b9ee:	02 96       	adiw	r24, 0x02	; 2
    b9f0:	19 96       	adiw	r26, 0x09	; 9
    b9f2:	9c 93       	st	X, r25
    b9f4:	8e 93       	st	-X, r24
    b9f6:	18 97       	sbiw	r26, 0x08	; 8
    b9f8:	01 96       	adiw	r24, 0x01	; 1
    b9fa:	1b 96       	adiw	r26, 0x0b	; 11
    b9fc:	9c 93       	st	X, r25
    b9fe:	8e 93       	st	-X, r24
    ba00:	1a 97       	sbiw	r26, 0x0a	; 10
    ba02:	02 96       	adiw	r24, 0x02	; 2
    ba04:	1d 96       	adiw	r26, 0x0d	; 13
    ba06:	9c 93       	st	X, r25
    ba08:	8e 93       	st	-X, r24
    ba0a:	1c 97       	sbiw	r26, 0x0c	; 12
    ba0c:	01 97       	sbiw	r24, 0x01	; 1
    ba0e:	1f 96       	adiw	r26, 0x0f	; 15
    ba10:	9c 93       	st	X, r25
    ba12:	8e 93       	st	-X, r24
    ba14:	1e 97       	sbiw	r26, 0x0e	; 14
    ba16:	02 96       	adiw	r24, 0x02	; 2
    ba18:	51 96       	adiw	r26, 0x11	; 17
    ba1a:	9c 93       	st	X, r25
    ba1c:	8e 93       	st	-X, r24
    ba1e:	50 97       	sbiw	r26, 0x10	; 16
    ba20:	df 01       	movw	r26, r30
    ba22:	a5 53       	subi	r26, 0x35	; 53
    ba24:	bf 4f       	sbci	r27, 0xFF	; 255
    ba26:	01 96       	adiw	r24, 0x01	; 1
    ba28:	11 96       	adiw	r26, 0x01	; 1
    ba2a:	9c 93       	st	X, r25
    ba2c:	8e 93       	st	-X, r24
    ba2e:	12 96       	adiw	r26, 0x02	; 2
    ba30:	01 96       	adiw	r24, 0x01	; 1
    ba32:	11 96       	adiw	r26, 0x01	; 1
    ba34:	9c 93       	st	X, r25
    ba36:	8e 93       	st	-X, r24
    ba38:	13 96       	adiw	r26, 0x03	; 3
    ba3a:	02 96       	adiw	r24, 0x02	; 2
    ba3c:	8d 93       	st	X+, r24
    ba3e:	9c 93       	st	X, r25
    ba40:	ee 52       	subi	r30, 0x2E	; 46
    ba42:	ff 4f       	sbci	r31, 0xFF	; 255
    ba44:	05 5f       	subi	r16, 0xF5	; 245
    ba46:	1f 4f       	sbci	r17, 0xFF	; 255
    ba48:	11 83       	std	Z+1, r17	; 0x01
    ba4a:	00 83       	st	Z, r16
    ba4c:	40 e0       	ldi	r20, 0x00	; 0
    ba4e:	61 e0       	ldi	r22, 0x01	; 1
    ba50:	88 e2       	ldi	r24, 0x28	; 40
    ba52:	9a e1       	ldi	r25, 0x1A	; 26
    ba54:	0e 94 85 16 	call	0x2d0a	; 0x2d0a <logToSerials(__FlashStringHelper const*, bool, unsigned char)>
    ba58:	fb 82       	std	Y+3, r15	; 0x03
    ba5a:	ea 82       	std	Y+2, r14	; 0x02
    ba5c:	85 e1       	ldi	r24, 0x15	; 21
    ba5e:	90 e0       	ldi	r25, 0x00	; 0
    ba60:	0e 94 6d 8f 	call	0x11eda	; 0x11eda <operator new(unsigned int)>
    ba64:	8c 01       	movw	r16, r24
    ba66:	20 91 b9 0c 	lds	r18, 0x0CB9	; 0x800cb9 <ModuleSettings>
    ba6a:	30 91 ba 0c 	lds	r19, 0x0CBA	; 0x800cba <ModuleSettings+0x1>
    ba6e:	2b 5c       	subi	r18, 0xCB	; 203
    ba70:	3d 4f       	sbci	r19, 0xFD	; 253
    ba72:	40 e2       	ldi	r20, 0x20	; 32
    ba74:	50 e0       	ldi	r21, 0x00	; 0
    ba76:	c1 14       	cp	r12, r1
    ba78:	d1 04       	cpc	r13, r1
    ba7a:	29 f4       	brne	.+10     	; 0xba86 <MainModule::MainModule(__FlashStringHelper const*, Settings::MainModuleSettings*, RF24*)+0x1d8>
    ba7c:	e8 81       	ld	r30, Y
    ba7e:	f9 81       	ldd	r31, Y+1	; 0x01
    ba80:	70 97       	sbiw	r30, 0x10	; 16
    ba82:	40 81       	ld	r20, Z
    ba84:	51 81       	ldd	r21, Z+1	; 0x01
    ba86:	4c 0f       	add	r20, r28
    ba88:	5d 1f       	adc	r21, r29
    ba8a:	61 e2       	ldi	r22, 0x21	; 33
    ba8c:	7a e1       	ldi	r23, 0x1A	; 26
    ba8e:	c8 01       	movw	r24, r16
    ba90:	0e 94 30 32 	call	0x6460	; 0x6460 <Sound_Web::Sound_Web(__FlashStringHelper const*, Module_Web*, Settings::SoundSettings*)>
    ba94:	1d 83       	std	Y+5, r17	; 0x05
    ba96:	0c 83       	std	Y+4, r16	; 0x04
    ba98:	80 e2       	ldi	r24, 0x20	; 32
    ba9a:	90 e0       	ldi	r25, 0x00	; 0
    ba9c:	c1 14       	cp	r12, r1
    ba9e:	d1 04       	cpc	r13, r1
    baa0:	29 f4       	brne	.+10     	; 0xbaac <MainModule::MainModule(__FlashStringHelper const*, Settings::MainModuleSettings*, RF24*)+0x1fe>
    baa2:	e8 81       	ld	r30, Y
    baa4:	f9 81       	ldd	r31, Y+1	; 0x01
    baa6:	70 97       	sbiw	r30, 0x10	; 16
    baa8:	80 81       	ld	r24, Z
    baaa:	91 81       	ldd	r25, Z+1	; 0x01
    baac:	8c 0f       	add	r24, r28
    baae:	9d 1f       	adc	r25, r29
    bab0:	fc 01       	movw	r30, r24
    bab2:	13 83       	std	Z+3, r17	; 0x03
    bab4:	02 83       	std	Z+2, r16	; 0x02
    bab6:	84 e1       	ldi	r24, 0x14	; 20
    bab8:	90 e0       	ldi	r25, 0x00	; 0
    baba:	0e 94 6d 8f 	call	0x11eda	; 0x11eda <operator new(unsigned int)>
    babe:	8c 01       	movw	r16, r24
    bac0:	20 91 b9 0c 	lds	r18, 0x0CB9	; 0x800cb9 <ModuleSettings>
    bac4:	30 91 ba 0c 	lds	r19, 0x0CBA	; 0x800cba <ModuleSettings+0x1>
    bac8:	23 52       	subi	r18, 0x23	; 35
    baca:	3e 4f       	sbci	r19, 0xFE	; 254
    bacc:	40 e2       	ldi	r20, 0x20	; 32
    bace:	50 e0       	ldi	r21, 0x00	; 0
    bad0:	c1 14       	cp	r12, r1
    bad2:	d1 04       	cpc	r13, r1
    bad4:	29 f4       	brne	.+10     	; 0xbae0 <MainModule::MainModule(__FlashStringHelper const*, Settings::MainModuleSettings*, RF24*)+0x232>
    bad6:	e8 81       	ld	r30, Y
    bad8:	f9 81       	ldd	r31, Y+1	; 0x01
    bada:	70 97       	sbiw	r30, 0x10	; 16
    badc:	40 81       	ld	r20, Z
    bade:	51 81       	ldd	r21, Z+1	; 0x01
    bae0:	4c 0f       	add	r20, r28
    bae2:	5d 1f       	adc	r21, r29
    bae4:	6c e1       	ldi	r22, 0x1C	; 28
    bae6:	7a e1       	ldi	r23, 0x1A	; 26
    bae8:	c8 01       	movw	r24, r16
    baea:	0e 94 e6 2d 	call	0x5bcc	; 0x5bcc <Fan_Web::Fan_Web(__FlashStringHelper const*, Module_Web*, Settings::FanSettings*)>
    baee:	1f 83       	std	Y+7, r17	; 0x07
    baf0:	0e 83       	std	Y+6, r16	; 0x06
    baf2:	84 e1       	ldi	r24, 0x14	; 20
    baf4:	90 e0       	ldi	r25, 0x00	; 0
    baf6:	0e 94 6d 8f 	call	0x11eda	; 0x11eda <operator new(unsigned int)>
    bafa:	8c 01       	movw	r16, r24
    bafc:	20 91 b9 0c 	lds	r18, 0x0CB9	; 0x800cb9 <ModuleSettings>
    bb00:	30 91 ba 0c 	lds	r19, 0x0CBA	; 0x800cba <ModuleSettings+0x1>
    bb04:	2f 51       	subi	r18, 0x1F	; 31
    bb06:	3e 4f       	sbci	r19, 0xFE	; 254
    bb08:	40 e2       	ldi	r20, 0x20	; 32
    bb0a:	50 e0       	ldi	r21, 0x00	; 0
    bb0c:	c1 14       	cp	r12, r1
    bb0e:	d1 04       	cpc	r13, r1
    bb10:	29 f4       	brne	.+10     	; 0xbb1c <MainModule::MainModule(__FlashStringHelper const*, Settings::MainModuleSettings*, RF24*)+0x26e>
    bb12:	e8 81       	ld	r30, Y
    bb14:	f9 81       	ldd	r31, Y+1	; 0x01
    bb16:	70 97       	sbiw	r30, 0x10	; 16
    bb18:	40 81       	ld	r20, Z
    bb1a:	51 81       	ldd	r21, Z+1	; 0x01
    bb1c:	4c 0f       	add	r20, r28
    bb1e:	5d 1f       	adc	r21, r29
    bb20:	67 e1       	ldi	r22, 0x17	; 23
    bb22:	7a e1       	ldi	r23, 0x1A	; 26
    bb24:	c8 01       	movw	r24, r16
    bb26:	0e 94 e6 2d 	call	0x5bcc	; 0x5bcc <Fan_Web::Fan_Web(__FlashStringHelper const*, Module_Web*, Settings::FanSettings*)>
    bb2a:	19 87       	std	Y+9, r17	; 0x09
    bb2c:	08 87       	std	Y+8, r16	; 0x08
    bb2e:	80 e1       	ldi	r24, 0x10	; 16
    bb30:	90 e0       	ldi	r25, 0x00	; 0
    bb32:	0e 94 6d 8f 	call	0x11eda	; 0x11eda <operator new(unsigned int)>
    bb36:	8c 01       	movw	r16, r24
    bb38:	20 91 b9 0c 	lds	r18, 0x0CB9	; 0x800cb9 <ModuleSettings>
    bb3c:	30 91 ba 0c 	lds	r19, 0x0CBA	; 0x800cba <ModuleSettings+0x1>
    bb40:	27 52       	subi	r18, 0x27	; 39
    bb42:	3e 4f       	sbci	r19, 0xFE	; 254
    bb44:	40 e2       	ldi	r20, 0x20	; 32
    bb46:	50 e0       	ldi	r21, 0x00	; 0
    bb48:	c1 14       	cp	r12, r1
    bb4a:	d1 04       	cpc	r13, r1
    bb4c:	29 f4       	brne	.+10     	; 0xbb58 <MainModule::MainModule(__FlashStringHelper const*, Settings::MainModuleSettings*, RF24*)+0x2aa>
    bb4e:	e8 81       	ld	r30, Y
    bb50:	f9 81       	ldd	r31, Y+1	; 0x01
    bb52:	70 97       	sbiw	r30, 0x10	; 16
    bb54:	40 81       	ld	r20, Z
    bb56:	51 81       	ldd	r21, Z+1	; 0x01
    bb58:	4c 0f       	add	r20, r28
    bb5a:	5d 1f       	adc	r21, r29
    bb5c:	63 e1       	ldi	r22, 0x13	; 19
    bb5e:	7a e1       	ldi	r23, 0x1A	; 26
    bb60:	c8 01       	movw	r24, r16
    bb62:	0e 94 b5 2c 	call	0x596a	; 0x596a <AirPump_Web::AirPump_Web(__FlashStringHelper const*, Module_Web*, Settings::AirPumpSettings*)>
    bb66:	1b 87       	std	Y+11, r17	; 0x0b
    bb68:	0a 87       	std	Y+10, r16	; 0x0a
    bb6a:	86 e3       	ldi	r24, 0x36	; 54
    bb6c:	90 e0       	ldi	r25, 0x00	; 0
    bb6e:	0e 94 6d 8f 	call	0x11eda	; 0x11eda <operator new(unsigned int)>
    bb72:	8c 01       	movw	r16, r24
    bb74:	20 91 b9 0c 	lds	r18, 0x0CB9	; 0x800cb9 <ModuleSettings>
    bb78:	30 91 ba 0c 	lds	r19, 0x0CBA	; 0x800cba <ModuleSettings+0x1>
    bb7c:	2a 5e       	subi	r18, 0xEA	; 234
    bb7e:	3d 4f       	sbci	r19, 0xFD	; 253
    bb80:	40 e2       	ldi	r20, 0x20	; 32
    bb82:	50 e0       	ldi	r21, 0x00	; 0
    bb84:	c1 14       	cp	r12, r1
    bb86:	d1 04       	cpc	r13, r1
    bb88:	29 f4       	brne	.+10     	; 0xbb94 <MainModule::MainModule(__FlashStringHelper const*, Settings::MainModuleSettings*, RF24*)+0x2e6>
    bb8a:	e8 81       	ld	r30, Y
    bb8c:	f9 81       	ldd	r31, Y+1	; 0x01
    bb8e:	70 97       	sbiw	r30, 0x10	; 16
    bb90:	40 81       	ld	r20, Z
    bb92:	51 81       	ldd	r21, Z+1	; 0x01
    bb94:	4c 0f       	add	r20, r28
    bb96:	5d 1f       	adc	r21, r29
    bb98:	6f e0       	ldi	r22, 0x0F	; 15
    bb9a:	7a e1       	ldi	r23, 0x1A	; 26
    bb9c:	c8 01       	movw	r24, r16
    bb9e:	0e 94 ad 30 	call	0x615a	; 0x615a <Lights_Web::Lights_Web(__FlashStringHelper const*, Module_Web*, Settings::LightsSettings*)>
    bba2:	1d 87       	std	Y+13, r17	; 0x0d
    bba4:	0c 87       	std	Y+12, r16	; 0x0c
    bba6:	86 e3       	ldi	r24, 0x36	; 54
    bba8:	90 e0       	ldi	r25, 0x00	; 0
    bbaa:	0e 94 6d 8f 	call	0x11eda	; 0x11eda <operator new(unsigned int)>
    bbae:	8c 01       	movw	r16, r24
    bbb0:	20 91 b9 0c 	lds	r18, 0x0CB9	; 0x800cb9 <ModuleSettings>
    bbb4:	30 91 ba 0c 	lds	r19, 0x0CBA	; 0x800cba <ModuleSettings+0x1>
    bbb8:	2b 5d       	subi	r18, 0xDB	; 219
    bbba:	3d 4f       	sbci	r19, 0xFD	; 253
    bbbc:	40 e2       	ldi	r20, 0x20	; 32
    bbbe:	50 e0       	ldi	r21, 0x00	; 0
    bbc0:	c1 14       	cp	r12, r1
    bbc2:	d1 04       	cpc	r13, r1
    bbc4:	29 f4       	brne	.+10     	; 0xbbd0 <MainModule::MainModule(__FlashStringHelper const*, Settings::MainModuleSettings*, RF24*)+0x322>
    bbc6:	e8 81       	ld	r30, Y
    bbc8:	f9 81       	ldd	r31, Y+1	; 0x01
    bbca:	70 97       	sbiw	r30, 0x10	; 16
    bbcc:	40 81       	ld	r20, Z
    bbce:	51 81       	ldd	r21, Z+1	; 0x01
    bbd0:	4c 0f       	add	r20, r28
    bbd2:	5d 1f       	adc	r21, r29
    bbd4:	6b e0       	ldi	r22, 0x0B	; 11
    bbd6:	7a e1       	ldi	r23, 0x1A	; 26
    bbd8:	c8 01       	movw	r24, r16
    bbda:	0e 94 ad 30 	call	0x615a	; 0x615a <Lights_Web::Lights_Web(__FlashStringHelper const*, Module_Web*, Settings::LightsSettings*)>
    bbde:	1f 87       	std	Y+15, r17	; 0x0f
    bbe0:	0e 87       	std	Y+14, r16	; 0x0e
    bbe2:	84 e3       	ldi	r24, 0x34	; 52
    bbe4:	90 e0       	ldi	r25, 0x00	; 0
    bbe6:	0e 94 6d 8f 	call	0x11eda	; 0x11eda <operator new(unsigned int)>
    bbea:	7c 01       	movw	r14, r24
    bbec:	0c 85       	ldd	r16, Y+12	; 0x0c
    bbee:	1d 85       	ldd	r17, Y+13	; 0x0d
    bbf0:	01 15       	cp	r16, r1
    bbf2:	11 05       	cpc	r17, r1
    bbf4:	09 f4       	brne	.+2      	; 0xbbf8 <MainModule::MainModule(__FlashStringHelper const*, Settings::MainModuleSettings*, RF24*)+0x34a>
    bbf6:	5f c1       	rjmp	.+702    	; 0xbeb6 <MainModule::MainModule(__FlashStringHelper const*, Settings::MainModuleSettings*, RF24*)+0x608>
    bbf8:	0e 5f       	subi	r16, 0xFE	; 254
    bbfa:	1f 4f       	sbci	r17, 0xFF	; 255
    bbfc:	20 91 b9 0c 	lds	r18, 0x0CB9	; 0x800cb9 <ModuleSettings>
    bc00:	30 91 ba 0c 	lds	r19, 0x0CBA	; 0x800cba <ModuleSettings+0x1>
    bc04:	2c 5e       	subi	r18, 0xEC	; 236
    bc06:	3d 4f       	sbci	r19, 0xFD	; 253
    bc08:	40 e2       	ldi	r20, 0x20	; 32
    bc0a:	50 e0       	ldi	r21, 0x00	; 0
    bc0c:	c1 14       	cp	r12, r1
    bc0e:	d1 04       	cpc	r13, r1
    bc10:	29 f4       	brne	.+10     	; 0xbc1c <MainModule::MainModule(__FlashStringHelper const*, Settings::MainModuleSettings*, RF24*)+0x36e>
    bc12:	e8 81       	ld	r30, Y
    bc14:	f9 81       	ldd	r31, Y+1	; 0x01
    bc16:	70 97       	sbiw	r30, 0x10	; 16
    bc18:	40 81       	ld	r20, Z
    bc1a:	51 81       	ldd	r21, Z+1	; 0x01
    bc1c:	4c 0f       	add	r20, r28
    bc1e:	5d 1f       	adc	r21, r29
    bc20:	67 e0       	ldi	r22, 0x07	; 7
    bc22:	7a e1       	ldi	r23, 0x1A	; 26
    bc24:	c7 01       	movw	r24, r14
    bc26:	0e 94 98 2e 	call	0x5d30	; 0x5d30 <LightSensor_Web::LightSensor_Web(__FlashStringHelper const*, Module_Web*, Settings::LightSensorSettings*, Lights*)>
    bc2a:	f9 8a       	std	Y+17, r15	; 0x11
    bc2c:	e8 8a       	std	Y+16, r14	; 0x10
    bc2e:	86 e1       	ldi	r24, 0x16	; 22
    bc30:	90 e0       	ldi	r25, 0x00	; 0
    bc32:	0e 94 6d 8f 	call	0x11eda	; 0x11eda <operator new(unsigned int)>
    bc36:	8c 01       	movw	r16, r24
    bc38:	20 91 b9 0c 	lds	r18, 0x0CB9	; 0x800cb9 <ModuleSettings>
    bc3c:	30 91 ba 0c 	lds	r19, 0x0CBA	; 0x800cba <ModuleSettings+0x1>
    bc40:	25 52       	subi	r18, 0x25	; 37
    bc42:	3e 4f       	sbci	r19, 0xFE	; 254
    bc44:	40 e2       	ldi	r20, 0x20	; 32
    bc46:	50 e0       	ldi	r21, 0x00	; 0
    bc48:	c1 14       	cp	r12, r1
    bc4a:	d1 04       	cpc	r13, r1
    bc4c:	29 f4       	brne	.+10     	; 0xbc58 <MainModule::MainModule(__FlashStringHelper const*, Settings::MainModuleSettings*, RF24*)+0x3aa>
    bc4e:	e8 81       	ld	r30, Y
    bc50:	f9 81       	ldd	r31, Y+1	; 0x01
    bc52:	70 97       	sbiw	r30, 0x10	; 16
    bc54:	40 81       	ld	r20, Z
    bc56:	51 81       	ldd	r21, Z+1	; 0x01
    bc58:	4c 0f       	add	r20, r28
    bc5a:	5d 1f       	adc	r21, r29
    bc5c:	62 e0       	ldi	r22, 0x02	; 2
    bc5e:	7a e1       	ldi	r23, 0x1A	; 26
    bc60:	c8 01       	movw	r24, r16
    bc62:	0e 94 3c 2d 	call	0x5a78	; 0x5a78 <DHTSensor_Web::DHTSensor_Web(__FlashStringHelper const*, Module_Web*, Settings::DHTSensorSettings*)>
    bc66:	1d 8b       	std	Y+21, r17	; 0x15
    bc68:	0c 8b       	std	Y+20, r16	; 0x14
    bc6a:	86 e2       	ldi	r24, 0x26	; 38
    bc6c:	90 e0       	ldi	r25, 0x00	; 0
    bc6e:	0e 94 6d 8f 	call	0x11eda	; 0x11eda <operator new(unsigned int)>
    bc72:	8c 01       	movw	r16, r24
    bc74:	40 e2       	ldi	r20, 0x20	; 32
    bc76:	50 e0       	ldi	r21, 0x00	; 0
    bc78:	c1 14       	cp	r12, r1
    bc7a:	d1 04       	cpc	r13, r1
    bc7c:	29 f4       	brne	.+10     	; 0xbc88 <MainModule::MainModule(__FlashStringHelper const*, Settings::MainModuleSettings*, RF24*)+0x3da>
    bc7e:	e8 81       	ld	r30, Y
    bc80:	f9 81       	ldd	r31, Y+1	; 0x01
    bc82:	70 97       	sbiw	r30, 0x10	; 16
    bc84:	40 81       	ld	r20, Z
    bc86:	51 81       	ldd	r21, Z+1	; 0x01
    bc88:	4c 0f       	add	r20, r28
    bc8a:	5d 1f       	adc	r21, r29
    bc8c:	21 ef       	ldi	r18, 0xF1	; 241
    bc8e:	35 e1       	ldi	r19, 0x15	; 21
    bc90:	6d ef       	ldi	r22, 0xFD	; 253
    bc92:	79 e1       	ldi	r23, 0x19	; 25
    bc94:	c8 01       	movw	r24, r16
    bc96:	0e 94 93 31 	call	0x6326	; 0x6326 <PowerSensorV3_Web::PowerSensorV3_Web(__FlashStringHelper const*, Module_Web*, HardwareSerial*)>
    bc9a:	1b 8b       	std	Y+19, r17	; 0x13
    bc9c:	0a 8b       	std	Y+18, r16	; 0x12
    bc9e:	88 e1       	ldi	r24, 0x18	; 24
    bca0:	90 e0       	ldi	r25, 0x00	; 0
    bca2:	0e 94 6d 8f 	call	0x11eda	; 0x11eda <operator new(unsigned int)>
    bca6:	8c 01       	movw	r16, r24
    bca8:	20 91 b9 0c 	lds	r18, 0x0CB9	; 0x800cb9 <ModuleSettings>
    bcac:	30 91 ba 0c 	lds	r19, 0x0CBA	; 0x800cba <ModuleSettings+0x1>
    bcb0:	2e 50       	subi	r18, 0x0E	; 14
    bcb2:	3e 4f       	sbci	r19, 0xFE	; 254
    bcb4:	ae 01       	movw	r20, r28
    bcb6:	67 ef       	ldi	r22, 0xF7	; 247
    bcb8:	79 e1       	ldi	r23, 0x19	; 25
    bcba:	0e 94 24 55 	call	0xaa48	; 0xaa48 <HempyModule_Web::HempyModule_Web(__FlashStringHelper const*, MainModule*, Settings::HempyModuleSettings*)>
    bcbe:	1b 8f       	std	Y+27, r17	; 0x1b
    bcc0:	0a 8f       	std	Y+26, r16	; 0x1a
    bcc2:	88 e1       	ldi	r24, 0x18	; 24
    bcc4:	90 e0       	ldi	r25, 0x00	; 0
    bcc6:	0e 94 6d 8f 	call	0x11eda	; 0x11eda <operator new(unsigned int)>
    bcca:	8c 01       	movw	r16, r24
    bccc:	20 91 b9 0c 	lds	r18, 0x0CB9	; 0x800cb9 <ModuleSettings>
    bcd0:	30 91 ba 0c 	lds	r19, 0x0CBA	; 0x800cba <ModuleSettings+0x1>
    bcd4:	2e 53       	subi	r18, 0x3E	; 62
    bcd6:	3e 4f       	sbci	r19, 0xFE	; 254
    bcd8:	ae 01       	movw	r20, r28
    bcda:	61 ef       	ldi	r22, 0xF1	; 241
    bcdc:	79 e1       	ldi	r23, 0x19	; 25
    bcde:	0e 94 48 47 	call	0x8e90	; 0x8e90 <AeroModule_Web::AeroModule_Web(__FlashStringHelper const*, MainModule*, Settings::AeroModuleSettings*)>
    bce2:	1f 8b       	std	Y+23, r17	; 0x17
    bce4:	0e 8b       	std	Y+22, r16	; 0x16
    bce6:	88 e1       	ldi	r24, 0x18	; 24
    bce8:	90 e0       	ldi	r25, 0x00	; 0
    bcea:	0e 94 6d 8f 	call	0x11eda	; 0x11eda <operator new(unsigned int)>
    bcee:	8c 01       	movw	r16, r24
    bcf0:	20 91 b9 0c 	lds	r18, 0x0CB9	; 0x800cb9 <ModuleSettings>
    bcf4:	30 91 ba 0c 	lds	r19, 0x0CBA	; 0x800cba <ModuleSettings+0x1>
    bcf8:	2c 5c       	subi	r18, 0xCC	; 204
    bcfa:	3d 4f       	sbci	r19, 0xFD	; 253
    bcfc:	ae 01       	movw	r20, r28
    bcfe:	6c ee       	ldi	r22, 0xEC	; 236
    bd00:	79 e1       	ldi	r23, 0x19	; 25
    bd02:	0e 94 30 62 	call	0xc460	; 0xc460 <ReservoirModule_Web::ReservoirModule_Web(__FlashStringHelper const*, MainModule*, Settings::ReservoirModuleSettings*)>
    bd06:	19 8f       	std	Y+25, r17	; 0x19
    bd08:	08 8f       	std	Y+24, r16	; 0x18
    bd0a:	86 ef       	ldi	r24, 0xF6	; 246
    bd0c:	90 e0       	ldi	r25, 0x00	; 0
    bd0e:	c1 14       	cp	r12, r1
    bd10:	d1 04       	cpc	r13, r1
    bd12:	29 f4       	brne	.+10     	; 0xbd1e <MainModule::MainModule(__FlashStringHelper const*, Settings::MainModuleSettings*, RF24*)+0x470>
    bd14:	e8 81       	ld	r30, Y
    bd16:	f9 81       	ldd	r31, Y+1	; 0x01
    bd18:	72 97       	sbiw	r30, 0x12	; 18
    bd1a:	80 81       	ld	r24, Z
    bd1c:	91 81       	ldd	r25, Z+1	; 0x01
    bd1e:	8c 0f       	add	r24, r28
    bd20:	9d 1f       	adc	r25, r29
    bd22:	6c e1       	ldi	r22, 0x1C	; 28
    bd24:	70 e0       	ldi	r23, 0x00	; 0
    bd26:	c1 14       	cp	r12, r1
    bd28:	d1 04       	cpc	r13, r1
    bd2a:	29 f4       	brne	.+10     	; 0xbd36 <MainModule::MainModule(__FlashStringHelper const*, Settings::MainModuleSettings*, RF24*)+0x488>
    bd2c:	e8 81       	ld	r30, Y
    bd2e:	f9 81       	ldd	r31, Y+1	; 0x01
    bd30:	36 97       	sbiw	r30, 0x06	; 6
    bd32:	60 81       	ld	r22, Z
    bd34:	71 81       	ldd	r23, Z+1	; 0x01
    bd36:	6c 0f       	add	r22, r28
    bd38:	7d 1f       	adc	r23, r29
    bd3a:	0e 94 5b 1b 	call	0x36b6	; 0x36b6 <Module::addToReportQueue(Common*)>
    bd3e:	86 ef       	ldi	r24, 0xF6	; 246
    bd40:	90 e0       	ldi	r25, 0x00	; 0
    bd42:	c1 14       	cp	r12, r1
    bd44:	d1 04       	cpc	r13, r1
    bd46:	29 f4       	brne	.+10     	; 0xbd52 <MainModule::MainModule(__FlashStringHelper const*, Settings::MainModuleSettings*, RF24*)+0x4a4>
    bd48:	e8 81       	ld	r30, Y
    bd4a:	f9 81       	ldd	r31, Y+1	; 0x01
    bd4c:	72 97       	sbiw	r30, 0x12	; 18
    bd4e:	80 81       	ld	r24, Z
    bd50:	91 81       	ldd	r25, Z+1	; 0x01
    bd52:	8c 0f       	add	r24, r28
    bd54:	9d 1f       	adc	r25, r29
    bd56:	6c e1       	ldi	r22, 0x1C	; 28
    bd58:	70 e0       	ldi	r23, 0x00	; 0
    bd5a:	c1 14       	cp	r12, r1
    bd5c:	d1 04       	cpc	r13, r1
    bd5e:	29 f4       	brne	.+10     	; 0xbd6a <MainModule::MainModule(__FlashStringHelper const*, Settings::MainModuleSettings*, RF24*)+0x4bc>
    bd60:	e8 81       	ld	r30, Y
    bd62:	f9 81       	ldd	r31, Y+1	; 0x01
    bd64:	36 97       	sbiw	r30, 0x06	; 6
    bd66:	60 81       	ld	r22, Z
    bd68:	71 81       	ldd	r23, Z+1	; 0x01
    bd6a:	6c 0f       	add	r22, r28
    bd6c:	7d 1f       	adc	r23, r29
    bd6e:	0e 94 8f 1b 	call	0x371e	; 0x371e <Module::addToRefreshQueue_FiveSec(Common*)>
    bd72:	86 ef       	ldi	r24, 0xF6	; 246
    bd74:	90 e0       	ldi	r25, 0x00	; 0
    bd76:	c1 14       	cp	r12, r1
    bd78:	d1 04       	cpc	r13, r1
    bd7a:	29 f4       	brne	.+10     	; 0xbd86 <MainModule::MainModule(__FlashStringHelper const*, Settings::MainModuleSettings*, RF24*)+0x4d8>
    bd7c:	e8 81       	ld	r30, Y
    bd7e:	f9 81       	ldd	r31, Y+1	; 0x01
    bd80:	72 97       	sbiw	r30, 0x12	; 18
    bd82:	80 81       	ld	r24, Z
    bd84:	91 81       	ldd	r25, Z+1	; 0x01
    bd86:	8c 0f       	add	r24, r28
    bd88:	9d 1f       	adc	r25, r29
    bd8a:	6c e1       	ldi	r22, 0x1C	; 28
    bd8c:	70 e0       	ldi	r23, 0x00	; 0
    bd8e:	c1 14       	cp	r12, r1
    bd90:	d1 04       	cpc	r13, r1
    bd92:	29 f4       	brne	.+10     	; 0xbd9e <MainModule::MainModule(__FlashStringHelper const*, Settings::MainModuleSettings*, RF24*)+0x4f0>
    bd94:	e8 81       	ld	r30, Y
    bd96:	f9 81       	ldd	r31, Y+1	; 0x01
    bd98:	36 97       	sbiw	r30, 0x06	; 6
    bd9a:	60 81       	ld	r22, Z
    bd9c:	71 81       	ldd	r23, Z+1	; 0x01
    bd9e:	6c 0f       	add	r22, r28
    bda0:	7d 1f       	adc	r23, r29
    bda2:	0e 94 a9 1b 	call	0x3752	; 0x3752 <Module::addToRefreshQueue_Minute(Common*)>
    bda6:	80 e2       	ldi	r24, 0x20	; 32
    bda8:	90 e0       	ldi	r25, 0x00	; 0
    bdaa:	c1 14       	cp	r12, r1
    bdac:	d1 04       	cpc	r13, r1
    bdae:	29 f4       	brne	.+10     	; 0xbdba <MainModule::MainModule(__FlashStringHelper const*, Settings::MainModuleSettings*, RF24*)+0x50c>
    bdb0:	e8 81       	ld	r30, Y
    bdb2:	f9 81       	ldd	r31, Y+1	; 0x01
    bdb4:	70 97       	sbiw	r30, 0x10	; 16
    bdb6:	80 81       	ld	r24, Z
    bdb8:	91 81       	ldd	r25, Z+1	; 0x01
    bdba:	8c 0f       	add	r24, r28
    bdbc:	9d 1f       	adc	r25, r29
    bdbe:	70 e0       	ldi	r23, 0x00	; 0
    bdc0:	60 e0       	ldi	r22, 0x00	; 0
    bdc2:	c1 14       	cp	r12, r1
    bdc4:	d1 04       	cpc	r13, r1
    bdc6:	29 f4       	brne	.+10     	; 0xbdd2 <MainModule::MainModule(__FlashStringHelper const*, Settings::MainModuleSettings*, RF24*)+0x524>
    bdc8:	e8 81       	ld	r30, Y
    bdca:	f9 81       	ldd	r31, Y+1	; 0x01
    bdcc:	3e 97       	sbiw	r30, 0x0e	; 14
    bdce:	60 81       	ld	r22, Z
    bdd0:	71 81       	ldd	r23, Z+1	; 0x01
    bdd2:	6c 0f       	add	r22, r28
    bdd4:	7d 1f       	adc	r23, r29
    bdd6:	0e 94 83 37 	call	0x6f06	; 0x6f06 <Module_Web::addToWebsiteQueue_Load(Common_Web*)>
    bdda:	80 e2       	ldi	r24, 0x20	; 32
    bddc:	90 e0       	ldi	r25, 0x00	; 0
    bdde:	c1 14       	cp	r12, r1
    bde0:	d1 04       	cpc	r13, r1
    bde2:	29 f4       	brne	.+10     	; 0xbdee <MainModule::MainModule(__FlashStringHelper const*, Settings::MainModuleSettings*, RF24*)+0x540>
    bde4:	e8 81       	ld	r30, Y
    bde6:	f9 81       	ldd	r31, Y+1	; 0x01
    bde8:	70 97       	sbiw	r30, 0x10	; 16
    bdea:	80 81       	ld	r24, Z
    bdec:	91 81       	ldd	r25, Z+1	; 0x01
    bdee:	8c 0f       	add	r24, r28
    bdf0:	9d 1f       	adc	r25, r29
    bdf2:	70 e0       	ldi	r23, 0x00	; 0
    bdf4:	60 e0       	ldi	r22, 0x00	; 0
    bdf6:	c1 14       	cp	r12, r1
    bdf8:	d1 04       	cpc	r13, r1
    bdfa:	29 f4       	brne	.+10     	; 0xbe06 <MainModule::MainModule(__FlashStringHelper const*, Settings::MainModuleSettings*, RF24*)+0x558>
    bdfc:	e8 81       	ld	r30, Y
    bdfe:	f9 81       	ldd	r31, Y+1	; 0x01
    be00:	3e 97       	sbiw	r30, 0x0e	; 14
    be02:	60 81       	ld	r22, Z
    be04:	71 81       	ldd	r23, Z+1	; 0x01
    be06:	6c 0f       	add	r22, r28
    be08:	7d 1f       	adc	r23, r29
    be0a:	0e 94 9d 37 	call	0x6f3a	; 0x6f3a <Module_Web::addToWebsiteQueue_Refresh(Common_Web*)>
    be0e:	80 e2       	ldi	r24, 0x20	; 32
    be10:	90 e0       	ldi	r25, 0x00	; 0
    be12:	c1 14       	cp	r12, r1
    be14:	d1 04       	cpc	r13, r1
    be16:	29 f4       	brne	.+10     	; 0xbe22 <MainModule::MainModule(__FlashStringHelper const*, Settings::MainModuleSettings*, RF24*)+0x574>
    be18:	e8 81       	ld	r30, Y
    be1a:	f9 81       	ldd	r31, Y+1	; 0x01
    be1c:	70 97       	sbiw	r30, 0x10	; 16
    be1e:	80 81       	ld	r24, Z
    be20:	91 81       	ldd	r25, Z+1	; 0x01
    be22:	8c 0f       	add	r24, r28
    be24:	9d 1f       	adc	r25, r29
    be26:	70 e0       	ldi	r23, 0x00	; 0
    be28:	60 e0       	ldi	r22, 0x00	; 0
    be2a:	c1 14       	cp	r12, r1
    be2c:	d1 04       	cpc	r13, r1
    be2e:	29 f4       	brne	.+10     	; 0xbe3a <MainModule::MainModule(__FlashStringHelper const*, Settings::MainModuleSettings*, RF24*)+0x58c>
    be30:	e8 81       	ld	r30, Y
    be32:	f9 81       	ldd	r31, Y+1	; 0x01
    be34:	3e 97       	sbiw	r30, 0x0e	; 14
    be36:	60 81       	ld	r22, Z
    be38:	71 81       	ldd	r23, Z+1	; 0x01
    be3a:	6c 0f       	add	r22, r28
    be3c:	7d 1f       	adc	r23, r29
    be3e:	0e 94 b7 37 	call	0x6f6e	; 0x6f6e <Module_Web::addToCommandQueue(Common_Web*)>
    be42:	80 e2       	ldi	r24, 0x20	; 32
    be44:	90 e0       	ldi	r25, 0x00	; 0
    be46:	c1 14       	cp	r12, r1
    be48:	d1 04       	cpc	r13, r1
    be4a:	29 f4       	brne	.+10     	; 0xbe56 <MainModule::MainModule(__FlashStringHelper const*, Settings::MainModuleSettings*, RF24*)+0x5a8>
    be4c:	e8 81       	ld	r30, Y
    be4e:	f9 81       	ldd	r31, Y+1	; 0x01
    be50:	70 97       	sbiw	r30, 0x10	; 16
    be52:	80 81       	ld	r24, Z
    be54:	91 81       	ldd	r25, Z+1	; 0x01
    be56:	40 e0       	ldi	r20, 0x00	; 0
    be58:	65 ed       	ldi	r22, 0xD5	; 213
    be5a:	79 e1       	ldi	r23, 0x19	; 25
    be5c:	8c 0f       	add	r24, r28
    be5e:	9d 1f       	adc	r25, r29
    be60:	0e 94 41 36 	call	0x6c82	; 0x6c82 <Module_Web::addToLog(__FlashStringHelper const*, unsigned char)>
    be64:	40 e0       	ldi	r20, 0x00	; 0
    be66:	60 e0       	ldi	r22, 0x00	; 0
    be68:	c5 01       	movw	r24, r10
    be6a:	0e 94 85 16 	call	0x2d0a	; 0x2d0a <logToSerials(__FlashStringHelper const*, bool, unsigned char)>
    be6e:	41 e0       	ldi	r20, 0x01	; 1
    be70:	61 e0       	ldi	r22, 0x01	; 1
    be72:	8a ec       	ldi	r24, 0xCA	; 202
    be74:	99 e1       	ldi	r25, 0x19	; 25
    be76:	0e 94 85 16 	call	0x2d0a	; 0x2d0a <logToSerials(__FlashStringHelper const*, bool, unsigned char)>
    be7a:	86 ef       	ldi	r24, 0xF6	; 246
    be7c:	90 e0       	ldi	r25, 0x00	; 0
    be7e:	cd 28       	or	r12, r13
    be80:	29 f4       	brne	.+10     	; 0xbe8c <MainModule::MainModule(__FlashStringHelper const*, Settings::MainModuleSettings*, RF24*)+0x5de>
    be82:	e8 81       	ld	r30, Y
    be84:	f9 81       	ldd	r31, Y+1	; 0x01
    be86:	72 97       	sbiw	r30, 0x12	; 18
    be88:	80 81       	ld	r24, Z
    be8a:	91 81       	ldd	r25, Z+1	; 0x01
    be8c:	8c 0f       	add	r24, r28
    be8e:	9d 1f       	adc	r25, r29
    be90:	df 91       	pop	r29
    be92:	cf 91       	pop	r28
    be94:	1f 91       	pop	r17
    be96:	0f 91       	pop	r16
    be98:	ff 90       	pop	r15
    be9a:	ef 90       	pop	r14
    be9c:	df 90       	pop	r13
    be9e:	cf 90       	pop	r12
    bea0:	bf 90       	pop	r11
    bea2:	af 90       	pop	r10
    bea4:	9f 90       	pop	r9
    bea6:	8f 90       	pop	r8
    bea8:	0c 94 ff 1a 	jmp	0x35fe	; 0x35fe <Module::runAll()>
    beac:	22 ef       	ldi	r18, 0xF2	; 242
    beae:	39 e0       	ldi	r19, 0x09	; 9
    beb0:	90 e0       	ldi	r25, 0x00	; 0
    beb2:	80 e0       	ldi	r24, 0x00	; 0
    beb4:	3a cd       	rjmp	.-1420   	; 0xb92a <MainModule::MainModule(__FlashStringHelper const*, Settings::MainModuleSettings*, RF24*)+0x7c>
    beb6:	10 e0       	ldi	r17, 0x00	; 0
    beb8:	00 e0       	ldi	r16, 0x00	; 0
    beba:	a0 ce       	rjmp	.-704    	; 0xbbfc <MainModule::MainModule(__FlashStringHelper const*, Settings::MainModuleSettings*, RF24*)+0x34e>
    bebc:	da 01       	movw	r26, r20
    bebe:	8d 91       	ld	r24, X+
    bec0:	9c 91       	ld	r25, X
    bec2:	25 cd       	rjmp	.-1462   	; 0xb90e <MainModule::MainModule(__FlashStringHelper const*, Settings::MainModuleSettings*, RF24*)+0x60>

0000bec4 <MainModule::MainModule(__FlashStringHelper const*, Settings::MainModuleSettings*, RF24*)>:
_ZN10MainModuleC1EPK19__FlashStringHelperPN8Settings18MainModuleSettingsEP4RF24():
    bec4:	ef 92       	push	r14
    bec6:	ff 92       	push	r15
    bec8:	0f 93       	push	r16
    beca:	1f 93       	push	r17
    becc:	79 01       	movw	r14, r18
    bece:	8a 01       	movw	r16, r20
    bed0:	9b 01       	movw	r18, r22
    bed2:	50 e0       	ldi	r21, 0x00	; 0
    bed4:	40 e0       	ldi	r20, 0x00	; 0
    bed6:	61 e0       	ldi	r22, 0x01	; 1
    bed8:	70 e0       	ldi	r23, 0x00	; 0
    beda:	0e 94 57 5c 	call	0xb8ae	; 0xb8ae <MainModule::MainModule(__FlashStringHelper const*, Settings::MainModuleSettings*, RF24*)>
    bede:	1f 91       	pop	r17
    bee0:	0f 91       	pop	r16
    bee2:	ff 90       	pop	r15
    bee4:	ef 90       	pop	r14
    bee6:	08 95       	ret

0000bee8 <MainModule::getDayMode()>:
_ZN10MainModule10getDayModeEv():
    bee8:	cf 93       	push	r28
    beea:	df 93       	push	r29
    beec:	ec 01       	movw	r28, r24
    beee:	8c 85       	ldd	r24, Y+12	; 0x0c
    bef0:	9d 85       	ldd	r25, Y+13	; 0x0d
    bef2:	02 96       	adiw	r24, 0x02	; 2
    bef4:	0e 94 19 27 	call	0x4e32	; 0x4e32 <Lights::getStatus()>
    bef8:	88 23       	and	r24, r24
    befa:	21 f0       	breq	.+8      	; 0xbf04 <MainModule::getDayMode()+0x1c>
    befc:	81 e0       	ldi	r24, 0x01	; 1
    befe:	df 91       	pop	r29
    bf00:	cf 91       	pop	r28
    bf02:	08 95       	ret
    bf04:	8e 85       	ldd	r24, Y+14	; 0x0e
    bf06:	9f 85       	ldd	r25, Y+15	; 0x0f
    bf08:	02 96       	adiw	r24, 0x02	; 2
    bf0a:	0e 94 19 27 	call	0x4e32	; 0x4e32 <Lights::getStatus()>
    bf0e:	81 11       	cpse	r24, r1
    bf10:	f5 cf       	rjmp	.-22     	; 0xbefc <MainModule::getDayMode()+0x14>
    bf12:	88 89       	ldd	r24, Y+16	; 0x10
    bf14:	99 89       	ldd	r25, Y+17	; 0x11
    bf16:	02 96       	adiw	r24, 0x02	; 2
    bf18:	0e 94 d7 22 	call	0x45ae	; 0x45ae <LightSensor::getDark()>
    bf1c:	91 e0       	ldi	r25, 0x01	; 1
    bf1e:	89 27       	eor	r24, r25
    bf20:	ee cf       	rjmp	.-36     	; 0xbefe <MainModule::getDayMode()+0x16>

0000bf22 <MainModule::report(bool)>:
_ZN10MainModule6reportEb():
b:\Gbox420\Gbox420\Gbox420_Mega_Main\build\sketch\src\Modules_Web/MainModule_Web.cpp:67

/**
* @brief Report current state in a JSON format to the LongMessage buffer
*/
void MainModule::report(bool FriendlyFormat)
{
    bf22:	1f 93       	push	r17
    bf24:	cf 93       	push	r28
    bf26:	df 93       	push	r29
    bf28:	ec 01       	movw	r28, r24
    bf2a:	16 2f       	mov	r17, r22
b:\Gbox420\Gbox420\Gbox420_Mega_Main\build\sketch\src\Modules_Web/MainModule_Web.cpp:68
  Common::report(true); ///< Adds "NAME":{  to the LongMessage buffer. The curly bracket { needs to be closed at the end
    bf2c:	e8 81       	ld	r30, Y
    bf2e:	f9 81       	ldd	r31, Y+1	; 0x01
    bf30:	36 97       	sbiw	r30, 0x06	; 6
    bf32:	80 81       	ld	r24, Z
    bf34:	91 81       	ldd	r25, Z+1	; 0x01
    bf36:	61 e0       	ldi	r22, 0x01	; 1
    bf38:	8c 0f       	add	r24, r28
    bf3a:	9d 1f       	adc	r25, r29
    bf3c:	0e 94 0e 19 	call	0x321c	; 0x321c <Common::report(bool)>
b:\Gbox420\Gbox420\Gbox420_Mega_Main\build\sketch\src\Modules_Web/MainModule_Web.cpp:69
  strcat_P(LongMessage, (PGM_P)F("\"M\":\""));
    bf40:	64 ec       	ldi	r22, 0xC4	; 196
    bf42:	79 e1       	ldi	r23, 0x19	; 25
    bf44:	81 e3       	ldi	r24, 0x31	; 49
    bf46:	9e e0       	ldi	r25, 0x0E	; 14
    bf48:	0e 94 da 94 	call	0x129b4	; 0x129b4 <strcat_P>
b:\Gbox420\Gbox420\Gbox420_Mega_Main\build\sketch\src\Modules_Web/MainModule_Web.cpp:70
  strcat(LongMessage, getMetricText(FriendlyFormat));
    bf4c:	e8 81       	ld	r30, Y
    bf4e:	f9 81       	ldd	r31, Y+1	; 0x01
    bf50:	70 97       	sbiw	r30, 0x10	; 16
    bf52:	80 81       	ld	r24, Z
    bf54:	91 81       	ldd	r25, Z+1	; 0x01
    bf56:	61 2f       	mov	r22, r17
    bf58:	8c 0f       	add	r24, r28
    bf5a:	9d 1f       	adc	r25, r29
    bf5c:	0e 94 59 3c 	call	0x78b2	; 0x78b2 <Module_Web::getMetricText(bool)>
    bf60:	bc 01       	movw	r22, r24
    bf62:	81 e3       	ldi	r24, 0x31	; 49
    bf64:	9e e0       	ldi	r25, 0x0E	; 14
    bf66:	0e 94 23 95 	call	0x12a46	; 0x12a46 <strcat>
b:\Gbox420\Gbox420\Gbox420_Mega_Main\build\sketch\src\Modules_Web/MainModule_Web.cpp:71
  strcat_P(LongMessage, (PGM_P)F("\",\"D\":\""));
    bf6a:	6c eb       	ldi	r22, 0xBC	; 188
    bf6c:	79 e1       	ldi	r23, 0x19	; 25
    bf6e:	81 e3       	ldi	r24, 0x31	; 49
    bf70:	9e e0       	ldi	r25, 0x0E	; 14
    bf72:	0e 94 da 94 	call	0x129b4	; 0x129b4 <strcat_P>
b:\Gbox420\Gbox420\Gbox420_Mega_Main\build\sketch\src\Modules_Web/MainModule_Web.cpp:72
  strcat(LongMessage, getDebugText(FriendlyFormat));
    bf76:	e8 81       	ld	r30, Y
    bf78:	f9 81       	ldd	r31, Y+1	; 0x01
    bf7a:	70 97       	sbiw	r30, 0x10	; 16
    bf7c:	80 81       	ld	r24, Z
    bf7e:	91 81       	ldd	r25, Z+1	; 0x01
    bf80:	61 2f       	mov	r22, r17
    bf82:	8c 0f       	add	r24, r28
    bf84:	9d 1f       	adc	r25, r29
    bf86:	0e 94 28 3c 	call	0x7850	; 0x7850 <Module_Web::getDebugText(bool)>
    bf8a:	bc 01       	movw	r22, r24
    bf8c:	81 e3       	ldi	r24, 0x31	; 49
    bf8e:	9e e0       	ldi	r25, 0x0E	; 14
    bf90:	0e 94 23 95 	call	0x12a46	; 0x12a46 <strcat>
b:\Gbox420\Gbox420\Gbox420_Mega_Main\build\sketch\src\Modules_Web/MainModule_Web.cpp:73
  strcat_P(LongMessage, (PGM_P)F("\"}")); ///< closing the curly bracket at the end of the JSON
    bf94:	69 eb       	ldi	r22, 0xB9	; 185
    bf96:	79 e1       	ldi	r23, 0x19	; 25
    bf98:	81 e3       	ldi	r24, 0x31	; 49
    bf9a:	9e e0       	ldi	r25, 0x0E	; 14
b:\Gbox420\Gbox420\Gbox420_Mega_Main\build\sketch\src\Modules_Web/MainModule_Web.cpp:74
}
    bf9c:	df 91       	pop	r29
    bf9e:	cf 91       	pop	r28
    bfa0:	1f 91       	pop	r17
b:\Gbox420\Gbox420\Gbox420_Mega_Main\build\sketch\src\Modules_Web/MainModule_Web.cpp:73
  Common::report(true); ///< Adds "NAME":{  to the LongMessage buffer. The curly bracket { needs to be closed at the end
  strcat_P(LongMessage, (PGM_P)F("\"M\":\""));
  strcat(LongMessage, getMetricText(FriendlyFormat));
  strcat_P(LongMessage, (PGM_P)F("\",\"D\":\""));
  strcat(LongMessage, getDebugText(FriendlyFormat));
  strcat_P(LongMessage, (PGM_P)F("\"}")); ///< closing the curly bracket at the end of the JSON
    bfa2:	0c 94 da 94 	jmp	0x129b4	; 0x129b4 <strcat_P>

0000bfa6 <virtual thunk to MainModule::report(bool)>:
_ZTv0_n6_N10MainModule6reportEb():
    bfa6:	dc 01       	movw	r26, r24
    bfa8:	ed 91       	ld	r30, X+
    bfaa:	fc 91       	ld	r31, X
    bfac:	36 97       	sbiw	r30, 0x06	; 6
    bfae:	20 81       	ld	r18, Z
    bfb0:	31 81       	ldd	r19, Z+1	; 0x01
    bfb2:	82 0f       	add	r24, r18
    bfb4:	93 1f       	adc	r25, r19
    bfb6:	0c 94 91 5f 	jmp	0xbf22	; 0xbf22 <MainModule::report(bool)>

0000bfba <ReservoirModule_Web::websiteEvent_Load(char*)>:
_ZN19ReservoirModule_Web17websiteEvent_LoadEPc():
b:\Gbox420\Gbox420\Gbox420_Mega_Main\build\sketch\src\Modules_Web/ReservoirModule_Web.cpp:24
  Parent->addToRefreshQueue_Sec(this);
  Parent->addToRefreshQueue_FiveSec(this);
  Parent->addToWebsiteQueue_Refresh(this);
  Parent->addToCommandQueue(this);
  logToSerials(F("ReservoirModule_Web ready"), true, 3);
}
    bfba:	08 95       	ret

0000bfbc <ReservoirModule_Web::websiteEvent_Refresh(char*)>:
_ZN19ReservoirModule_Web20websiteEvent_RefreshEPc():
    bfbc:	ef 92       	push	r14
    bfbe:	ff 92       	push	r15
    bfc0:	0f 93       	push	r16
    bfc2:	1f 93       	push	r17
    bfc4:	cf 93       	push	r28
    bfc6:	df 93       	push	r29
    bfc8:	ec 01       	movw	r28, r24
    bfca:	8b 81       	ldd	r24, Y+3	; 0x03
    bfcc:	0e 94 03 35 	call	0x6a06	; 0x6a06 <toText_onlineStatus(bool)>
    bfd0:	8c 01       	movw	r16, r24
    bfd2:	e8 81       	ld	r30, Y
    bfd4:	f9 81       	ldd	r31, Y+1	; 0x01
    bfd6:	36 97       	sbiw	r30, 0x06	; 6
    bfd8:	80 81       	ld	r24, Z
    bfda:	91 81       	ldd	r25, Z+1	; 0x01
    bfdc:	41 e0       	ldi	r20, 0x01	; 1
    bfde:	69 ec       	ldi	r22, 0xC9	; 201
    bfe0:	7a e1       	ldi	r23, 0x1A	; 26
    bfe2:	8c 0f       	add	r24, r28
    bfe4:	9d 1f       	adc	r25, r29
    bfe6:	0e 94 7e 19 	call	0x32fc	; 0x32fc <Common::getName(__FlashStringHelper const*, bool)>
    bfea:	a8 01       	movw	r20, r16
    bfec:	bc 01       	movw	r22, r24
    bfee:	89 ee       	ldi	r24, 0xE9	; 233
    bff0:	9c e0       	ldi	r25, 0x0C	; 12
    bff2:	0e 94 a9 77 	call	0xef52	; 0xef52 <ELClientWebServer::setArgString(char const*, char const*)>
    bff6:	08 e9       	ldi	r16, 0x98	; 152
    bff8:	14 e1       	ldi	r17, 0x14	; 20
    bffa:	f8 01       	movw	r30, r16
    bffc:	63 81       	ldd	r22, Z+3	; 0x03
    bffe:	74 81       	ldd	r23, Z+4	; 0x04
    c000:	85 81       	ldd	r24, Z+5	; 0x05
    c002:	96 81       	ldd	r25, Z+6	; 0x06
    c004:	0e 94 a5 33 	call	0x674a	; 0x674a <toText(float)>
    c008:	7c 01       	movw	r14, r24
    c00a:	e8 81       	ld	r30, Y
    c00c:	f9 81       	ldd	r31, Y+1	; 0x01
    c00e:	36 97       	sbiw	r30, 0x06	; 6
    c010:	80 81       	ld	r24, Z
    c012:	91 81       	ldd	r25, Z+1	; 0x01
    c014:	41 e0       	ldi	r20, 0x01	; 1
    c016:	66 ec       	ldi	r22, 0xC6	; 198
    c018:	7a e1       	ldi	r23, 0x1A	; 26
    c01a:	8c 0f       	add	r24, r28
    c01c:	9d 1f       	adc	r25, r29
    c01e:	0e 94 7e 19 	call	0x32fc	; 0x32fc <Common::getName(__FlashStringHelper const*, bool)>
    c022:	a7 01       	movw	r20, r14
    c024:	bc 01       	movw	r22, r24
    c026:	89 ee       	ldi	r24, 0xE9	; 233
    c028:	9c e0       	ldi	r25, 0x0C	; 12
    c02a:	0e 94 a9 77 	call	0xef52	; 0xef52 <ELClientWebServer::setArgString(char const*, char const*)>
    c02e:	f8 01       	movw	r30, r16
    c030:	67 81       	ldd	r22, Z+7	; 0x07
    c032:	70 85       	ldd	r23, Z+8	; 0x08
    c034:	81 85       	ldd	r24, Z+9	; 0x09
    c036:	92 85       	ldd	r25, Z+10	; 0x0a
    c038:	0e 94 cb 34 	call	0x6996	; 0x6996 <toText_TDS(float)>
    c03c:	7c 01       	movw	r14, r24
    c03e:	e8 81       	ld	r30, Y
    c040:	f9 81       	ldd	r31, Y+1	; 0x01
    c042:	36 97       	sbiw	r30, 0x06	; 6
    c044:	80 81       	ld	r24, Z
    c046:	91 81       	ldd	r25, Z+1	; 0x01
    c048:	41 e0       	ldi	r20, 0x01	; 1
    c04a:	62 ec       	ldi	r22, 0xC2	; 194
    c04c:	7a e1       	ldi	r23, 0x1A	; 26
    c04e:	8c 0f       	add	r24, r28
    c050:	9d 1f       	adc	r25, r29
    c052:	0e 94 7e 19 	call	0x32fc	; 0x32fc <Common::getName(__FlashStringHelper const*, bool)>
    c056:	a7 01       	movw	r20, r14
    c058:	bc 01       	movw	r22, r24
    c05a:	89 ee       	ldi	r24, 0xE9	; 233
    c05c:	9c e0       	ldi	r25, 0x0C	; 12
    c05e:	0e 94 a9 77 	call	0xef52	; 0xef52 <ELClientWebServer::setArgString(char const*, char const*)>
    c062:	f8 01       	movw	r30, r16
    c064:	63 85       	ldd	r22, Z+11	; 0x0b
    c066:	74 85       	ldd	r23, Z+12	; 0x0c
    c068:	85 85       	ldd	r24, Z+13	; 0x0d
    c06a:	96 85       	ldd	r25, Z+14	; 0x0e
    c06c:	0e 94 8e 34 	call	0x691c	; 0x691c <toText_weight(float)>
    c070:	7c 01       	movw	r14, r24
    c072:	e8 81       	ld	r30, Y
    c074:	f9 81       	ldd	r31, Y+1	; 0x01
    c076:	36 97       	sbiw	r30, 0x06	; 6
    c078:	80 81       	ld	r24, Z
    c07a:	91 81       	ldd	r25, Z+1	; 0x01
    c07c:	41 e0       	ldi	r20, 0x01	; 1
    c07e:	60 ec       	ldi	r22, 0xC0	; 192
    c080:	7a e1       	ldi	r23, 0x1A	; 26
    c082:	8c 0f       	add	r24, r28
    c084:	9d 1f       	adc	r25, r29
    c086:	0e 94 7e 19 	call	0x32fc	; 0x32fc <Common::getName(__FlashStringHelper const*, bool)>
    c08a:	a7 01       	movw	r20, r14
    c08c:	bc 01       	movw	r22, r24
    c08e:	89 ee       	ldi	r24, 0xE9	; 233
    c090:	9c e0       	ldi	r25, 0x0C	; 12
    c092:	0e 94 a9 77 	call	0xef52	; 0xef52 <ELClientWebServer::setArgString(char const*, char const*)>
    c096:	f8 01       	movw	r30, r16
    c098:	67 85       	ldd	r22, Z+15	; 0x0f
    c09a:	70 89       	ldd	r23, Z+16	; 0x10
    c09c:	81 89       	ldd	r24, Z+17	; 0x11
    c09e:	92 89       	ldd	r25, Z+18	; 0x12
    c0a0:	0e 94 52 34 	call	0x68a4	; 0x68a4 <toText_temp(float)>
    c0a4:	7c 01       	movw	r14, r24
    c0a6:	e8 81       	ld	r30, Y
    c0a8:	f9 81       	ldd	r31, Y+1	; 0x01
    c0aa:	36 97       	sbiw	r30, 0x06	; 6
    c0ac:	80 81       	ld	r24, Z
    c0ae:	91 81       	ldd	r25, Z+1	; 0x01
    c0b0:	41 e0       	ldi	r20, 0x01	; 1
    c0b2:	6d eb       	ldi	r22, 0xBD	; 189
    c0b4:	7a e1       	ldi	r23, 0x1A	; 26
    c0b6:	8c 0f       	add	r24, r28
    c0b8:	9d 1f       	adc	r25, r29
    c0ba:	0e 94 7e 19 	call	0x32fc	; 0x32fc <Common::getName(__FlashStringHelper const*, bool)>
    c0be:	a7 01       	movw	r20, r14
    c0c0:	bc 01       	movw	r22, r24
    c0c2:	89 ee       	ldi	r24, 0xE9	; 233
    c0c4:	9c e0       	ldi	r25, 0x0C	; 12
    c0c6:	0e 94 a9 77 	call	0xef52	; 0xef52 <ELClientWebServer::setArgString(char const*, char const*)>
    c0ca:	f8 01       	movw	r30, r16
    c0cc:	63 89       	ldd	r22, Z+19	; 0x13
    c0ce:	74 89       	ldd	r23, Z+20	; 0x14
    c0d0:	85 89       	ldd	r24, Z+21	; 0x15
    c0d2:	96 89       	ldd	r25, Z+22	; 0x16
    c0d4:	0e 94 52 34 	call	0x68a4	; 0x68a4 <toText_temp(float)>
    c0d8:	7c 01       	movw	r14, r24
    c0da:	e8 81       	ld	r30, Y
    c0dc:	f9 81       	ldd	r31, Y+1	; 0x01
    c0de:	36 97       	sbiw	r30, 0x06	; 6
    c0e0:	80 81       	ld	r24, Z
    c0e2:	91 81       	ldd	r25, Z+1	; 0x01
    c0e4:	41 e0       	ldi	r20, 0x01	; 1
    c0e6:	6a eb       	ldi	r22, 0xBA	; 186
    c0e8:	7a e1       	ldi	r23, 0x1A	; 26
    c0ea:	8c 0f       	add	r24, r28
    c0ec:	9d 1f       	adc	r25, r29
    c0ee:	0e 94 7e 19 	call	0x32fc	; 0x32fc <Common::getName(__FlashStringHelper const*, bool)>
    c0f2:	a7 01       	movw	r20, r14
    c0f4:	bc 01       	movw	r22, r24
    c0f6:	89 ee       	ldi	r24, 0xE9	; 233
    c0f8:	9c e0       	ldi	r25, 0x0C	; 12
    c0fa:	0e 94 a9 77 	call	0xef52	; 0xef52 <ELClientWebServer::setArgString(char const*, char const*)>
    c0fe:	f8 01       	movw	r30, r16
    c100:	67 89       	ldd	r22, Z+23	; 0x17
    c102:	70 8d       	ldd	r23, Z+24	; 0x18
    c104:	81 8d       	ldd	r24, Z+25	; 0x19
    c106:	92 8d       	ldd	r25, Z+26	; 0x1a
    c108:	0e 94 ac 34 	call	0x6958	; 0x6958 <toText_percentage(float)>
    c10c:	8c 01       	movw	r16, r24
    c10e:	e8 81       	ld	r30, Y
    c110:	f9 81       	ldd	r31, Y+1	; 0x01
    c112:	36 97       	sbiw	r30, 0x06	; 6
    c114:	80 81       	ld	r24, Z
    c116:	91 81       	ldd	r25, Z+1	; 0x01
    c118:	41 e0       	ldi	r20, 0x01	; 1
    c11a:	68 eb       	ldi	r22, 0xB8	; 184
    c11c:	7a e1       	ldi	r23, 0x1A	; 26
    c11e:	8c 0f       	add	r24, r28
    c120:	9d 1f       	adc	r25, r29
    c122:	0e 94 7e 19 	call	0x32fc	; 0x32fc <Common::getName(__FlashStringHelper const*, bool)>
    c126:	a8 01       	movw	r20, r16
    c128:	bc 01       	movw	r22, r24
    c12a:	89 ee       	ldi	r24, 0xE9	; 233
    c12c:	9c e0       	ldi	r25, 0x0C	; 12
    c12e:	df 91       	pop	r29
    c130:	cf 91       	pop	r28
    c132:	1f 91       	pop	r17
    c134:	0f 91       	pop	r16
    c136:	ff 90       	pop	r15
    c138:	ef 90       	pop	r14
    c13a:	0c 94 a9 77 	jmp	0xef52	; 0xef52 <ELClientWebServer::setArgString(char const*, char const*)>

0000c13e <ReservoirModule_Web::commandEvent(char*, char*)>:
_ZN19ReservoirModule_Web12commandEventEPcS0_():
    c13e:	0f 93       	push	r16
    c140:	1f 93       	push	r17
    c142:	cf 93       	push	r28
    c144:	df 93       	push	r29
    c146:	ec 01       	movw	r28, r24
    c148:	e8 81       	ld	r30, Y
    c14a:	f9 81       	ldd	r31, Y+1	; 0x01
    c14c:	36 97       	sbiw	r30, 0x06	; 6
    c14e:	80 81       	ld	r24, Z
    c150:	91 81       	ldd	r25, Z+1	; 0x01
    c152:	8c 0f       	add	r24, r28
    c154:	9d 1f       	adc	r25, r29
    c156:	0e 94 25 19 	call	0x324a	; 0x324a <Common::isThisMine(char const*)>
    c15a:	18 2f       	mov	r17, r24
    c15c:	88 23       	and	r24, r24
    c15e:	f9 f0       	breq	.+62     	; 0xc19e <ReservoirModule_Web::commandEvent(char*, char*)+0x60>
    c160:	66 eb       	ldi	r22, 0xB6	; 182
    c162:	7a e1       	ldi	r23, 0x1A	; 26
    c164:	81 eb       	ldi	r24, 0xB1	; 177
    c166:	9d e0       	ldi	r25, 0x0D	; 13
    c168:	0e 94 e5 94 	call	0x129ca	; 0x129ca <strcmp_P>
    c16c:	89 2b       	or	r24, r25
    c16e:	e9 f4       	brne	.+58     	; 0xc1aa <ReservoirModule_Web::commandEvent(char*, char*)+0x6c>
    c170:	01 e0       	ldi	r16, 0x01	; 1
    c172:	00 93 b5 14 	sts	0x14B5, r16	; 0x8014b5 <ReservoirCommand1ToSend+0x2>
    c176:	ea 85       	ldd	r30, Y+10	; 0x0a
    c178:	fb 85       	ldd	r31, Y+11	; 0x0b
    c17a:	a0 81       	ld	r26, Z
    c17c:	b1 81       	ldd	r27, Z+1	; 0x01
    c17e:	50 97       	sbiw	r26, 0x10	; 16
    c180:	8d 91       	ld	r24, X+
    c182:	9c 91       	ld	r25, X
    c184:	8e 0f       	add	r24, r30
    c186:	9f 1f       	adc	r25, r31
    c188:	dc 01       	movw	r26, r24
    c18a:	ed 91       	ld	r30, X+
    c18c:	fc 91       	ld	r31, X
    c18e:	02 84       	ldd	r0, Z+10	; 0x0a
    c190:	f3 85       	ldd	r31, Z+11	; 0x0b
    c192:	e0 2d       	mov	r30, r0
    c194:	40 e0       	ldi	r20, 0x00	; 0
    c196:	6f e9       	ldi	r22, 0x9F	; 159
    c198:	7a e1       	ldi	r23, 0x1A	; 26
    c19a:	19 95       	eicall
    c19c:	0a 83       	std	Y+2, r16	; 0x02
    c19e:	81 2f       	mov	r24, r17
    c1a0:	df 91       	pop	r29
    c1a2:	cf 91       	pop	r28
    c1a4:	1f 91       	pop	r17
    c1a6:	0f 91       	pop	r16
    c1a8:	08 95       	ret
    c1aa:	10 e0       	ldi	r17, 0x00	; 0
    c1ac:	f8 cf       	rjmp	.-16     	; 0xc19e <ReservoirModule_Web::commandEvent(char*, char*)+0x60>

0000c1ae <virtual thunk to ReservoirModule_Web::commandEvent(char*, char*)>:
_ZTv0_n14_N19ReservoirModule_Web12commandEventEPcS0_():
    c1ae:	dc 01       	movw	r26, r24
    c1b0:	ed 91       	ld	r30, X+
    c1b2:	fc 91       	ld	r31, X
    c1b4:	3e 97       	sbiw	r30, 0x0e	; 14
    c1b6:	20 81       	ld	r18, Z
    c1b8:	31 81       	ldd	r19, Z+1	; 0x01
    c1ba:	82 0f       	add	r24, r18
    c1bc:	93 1f       	adc	r25, r19
    c1be:	0c 94 9f 60 	jmp	0xc13e	; 0xc13e <ReservoirModule_Web::commandEvent(char*, char*)>

0000c1c2 <ReservoirModule_Web::updateCommands()>:
_ZN19ReservoirModule_Web14updateCommandsEv():
    c1c2:	cf 93       	push	r28
    c1c4:	df 93       	push	r29
    c1c6:	ec 01       	movw	r28, r24
    c1c8:	0e 94 5c 7c 	call	0xf8b8	; 0xf8b8 <now()>
    c1cc:	e9 eb       	ldi	r30, 0xB9	; 185
    c1ce:	f4 e1       	ldi	r31, 0x14	; 20
    c1d0:	62 83       	std	Z+2, r22	; 0x02
    c1d2:	73 83       	std	Z+3, r23	; 0x03
    c1d4:	84 83       	std	Z+4, r24	; 0x04
    c1d6:	95 83       	std	Z+5, r25	; 0x05
    c1d8:	a0 91 b7 0c 	lds	r26, 0x0CB7	; 0x800cb7 <Debug>
    c1dc:	b0 91 b8 0c 	lds	r27, 0x0CB8	; 0x800cb8 <Debug+0x1>
    c1e0:	8c 91       	ld	r24, X
    c1e2:	86 83       	std	Z+6, r24	; 0x06
    c1e4:	a0 91 b5 0c 	lds	r26, 0x0CB5	; 0x800cb5 <Metric>
    c1e8:	b0 91 b6 0c 	lds	r27, 0x0CB6	; 0x800cb6 <Metric+0x1>
    c1ec:	8c 91       	ld	r24, X
    c1ee:	87 83       	std	Z+7, r24	; 0x07
    c1f0:	4a 85       	ldd	r20, Y+10	; 0x0a
    c1f2:	5b 85       	ldd	r21, Y+11	; 0x0b
    c1f4:	da 01       	movw	r26, r20
    c1f6:	8d 91       	ld	r24, X+
    c1f8:	9c 91       	ld	r25, X
    c1fa:	42 97       	sbiw	r24, 0x12	; 18
    c1fc:	dc 01       	movw	r26, r24
    c1fe:	2d 91       	ld	r18, X+
    c200:	3c 91       	ld	r19, X
    c202:	24 0f       	add	r18, r20
    c204:	35 1f       	adc	r19, r21
    c206:	d9 01       	movw	r26, r18
    c208:	14 96       	adiw	r26, 0x04	; 4
    c20a:	2d 91       	ld	r18, X+
    c20c:	3c 91       	ld	r19, X
    c20e:	d9 01       	movw	r26, r18
    c210:	2d 91       	ld	r18, X+
    c212:	3c 91       	ld	r19, X
    c214:	31 87       	std	Z+9, r19	; 0x09
    c216:	20 87       	std	Z+8, r18	; 0x08
    c218:	dc 01       	movw	r26, r24
    c21a:	8d 91       	ld	r24, X+
    c21c:	9c 91       	ld	r25, X
    c21e:	da 01       	movw	r26, r20
    c220:	a8 0f       	add	r26, r24
    c222:	b9 1f       	adc	r27, r25
    c224:	18 96       	adiw	r26, 0x08	; 8
    c226:	0d 90       	ld	r0, X+
    c228:	bc 91       	ld	r27, X
    c22a:	a0 2d       	mov	r26, r0
    c22c:	8c 91       	ld	r24, X
    c22e:	82 87       	std	Z+10, r24	; 0x0a
    c230:	2a 85       	ldd	r18, Y+10	; 0x0a
    c232:	3b 85       	ldd	r19, Y+11	; 0x0b
    c234:	d9 01       	movw	r26, r18
    c236:	8d 91       	ld	r24, X+
    c238:	9c 91       	ld	r25, X
    c23a:	42 97       	sbiw	r24, 0x12	; 18
    c23c:	dc 01       	movw	r26, r24
    c23e:	8d 91       	ld	r24, X+
    c240:	9c 91       	ld	r25, X
    c242:	d9 01       	movw	r26, r18
    c244:	a8 0f       	add	r26, r24
    c246:	b9 1f       	adc	r27, r25
    c248:	1a 96       	adiw	r26, 0x0a	; 10
    c24a:	0d 90       	ld	r0, X+
    c24c:	bc 91       	ld	r27, X
    c24e:	a0 2d       	mov	r26, r0
    c250:	8c 91       	ld	r24, X
    c252:	83 87       	std	Z+11, r24	; 0x0b
    c254:	2a 85       	ldd	r18, Y+10	; 0x0a
    c256:	3b 85       	ldd	r19, Y+11	; 0x0b
    c258:	d9 01       	movw	r26, r18
    c25a:	8d 91       	ld	r24, X+
    c25c:	9c 91       	ld	r25, X
    c25e:	42 97       	sbiw	r24, 0x12	; 18
    c260:	dc 01       	movw	r26, r24
    c262:	8d 91       	ld	r24, X+
    c264:	9c 91       	ld	r25, X
    c266:	d9 01       	movw	r26, r18
    c268:	a8 0f       	add	r26, r24
    c26a:	b9 1f       	adc	r27, r25
    c26c:	1c 96       	adiw	r26, 0x0c	; 12
    c26e:	0d 90       	ld	r0, X+
    c270:	bc 91       	ld	r27, X
    c272:	a0 2d       	mov	r26, r0
    c274:	8c 91       	ld	r24, X
    c276:	84 87       	std	Z+12, r24	; 0x0c
    c278:	2a 85       	ldd	r18, Y+10	; 0x0a
    c27a:	3b 85       	ldd	r19, Y+11	; 0x0b
    c27c:	d9 01       	movw	r26, r18
    c27e:	8d 91       	ld	r24, X+
    c280:	9c 91       	ld	r25, X
    c282:	42 97       	sbiw	r24, 0x12	; 18
    c284:	dc 01       	movw	r26, r24
    c286:	8d 91       	ld	r24, X+
    c288:	9c 91       	ld	r25, X
    c28a:	d9 01       	movw	r26, r18
    c28c:	a8 0f       	add	r26, r24
    c28e:	b9 1f       	adc	r27, r25
    c290:	1e 96       	adiw	r26, 0x0e	; 14
    c292:	0d 90       	ld	r0, X+
    c294:	bc 91       	ld	r27, X
    c296:	a0 2d       	mov	r26, r0
    c298:	8c 91       	ld	r24, X
    c29a:	85 87       	std	Z+13, r24	; 0x0d
    c29c:	aa 85       	ldd	r26, Y+10	; 0x0a
    c29e:	bb 85       	ldd	r27, Y+11	; 0x0b
    c2a0:	cd 91       	ld	r28, X+
    c2a2:	dc 91       	ld	r29, X
    c2a4:	11 97       	sbiw	r26, 0x01	; 1
    c2a6:	62 97       	sbiw	r28, 0x12	; 18
    c2a8:	88 81       	ld	r24, Y
    c2aa:	99 81       	ldd	r25, Y+1	; 0x01
    c2ac:	a8 0f       	add	r26, r24
    c2ae:	b9 1f       	adc	r27, r25
    c2b0:	50 96       	adiw	r26, 0x10	; 16
    c2b2:	0d 90       	ld	r0, X+
    c2b4:	bc 91       	ld	r27, X
    c2b6:	a0 2d       	mov	r26, r0
    c2b8:	8c 91       	ld	r24, X
    c2ba:	86 87       	std	Z+14, r24	; 0x0e
    c2bc:	df 91       	pop	r29
    c2be:	cf 91       	pop	r28
    c2c0:	08 95       	ret

0000c2c2 <ReservoirModule_Web::ReservoirModule_Web(__FlashStringHelper const*, MainModule*, Settings::ReservoirModuleSettings*)>:
_ZN19ReservoirModule_WebC4EPK19__FlashStringHelperP10MainModulePN8Settings23ReservoirModuleSettingsE():
    c2c2:	8f 92       	push	r8
    c2c4:	9f 92       	push	r9
    c2c6:	af 92       	push	r10
    c2c8:	bf 92       	push	r11
    c2ca:	cf 92       	push	r12
    c2cc:	df 92       	push	r13
    c2ce:	ef 92       	push	r14
    c2d0:	ff 92       	push	r15
    c2d2:	0f 93       	push	r16
    c2d4:	1f 93       	push	r17
    c2d6:	cf 93       	push	r28
    c2d8:	df 93       	push	r29
    c2da:	ec 01       	movw	r28, r24
    c2dc:	6b 01       	movw	r12, r22
    c2de:	4a 01       	movw	r8, r20
    c2e0:	59 01       	movw	r10, r18
    c2e2:	67 2b       	or	r22, r23
    c2e4:	21 f0       	breq	.+8      	; 0xc2ee <ReservoirModule_Web::ReservoirModule_Web(__FlashStringHelper const*, MainModule*, Settings::ReservoirModuleSettings*)+0x2c>
    c2e6:	b9 01       	movw	r22, r18
    c2e8:	44 96       	adiw	r24, 0x14	; 20
    c2ea:	0e 94 f7 18 	call	0x31ee	; 0x31ee <Common::Common(__FlashStringHelper const*)>
    c2ee:	f4 01       	movw	r30, r8
    c2f0:	32 96       	adiw	r30, 0x02	; 2
    c2f2:	c1 14       	cp	r12, r1
    c2f4:	d1 04       	cpc	r13, r1
    c2f6:	11 f0       	breq	.+4      	; 0xc2fc <ReservoirModule_Web::ReservoirModule_Web(__FlashStringHelper const*, MainModule*, Settings::ReservoirModuleSettings*)+0x3a>
    c2f8:	ea e7       	ldi	r30, 0x7A	; 122
    c2fa:	fa e0       	ldi	r31, 0x0A	; 10
Common_Web():
    c2fc:	80 81       	ld	r24, Z
    c2fe:	91 81       	ldd	r25, Z+1	; 0x01
    c300:	99 83       	std	Y+1, r25	; 0x01
    c302:	88 83       	st	Y, r24
    c304:	22 81       	ldd	r18, Z+2	; 0x02
    c306:	33 81       	ldd	r19, Z+3	; 0x03
    c308:	06 97       	sbiw	r24, 0x06	; 6
    c30a:	dc 01       	movw	r26, r24
    c30c:	ed 91       	ld	r30, X+
    c30e:	fc 91       	ld	r31, X
    c310:	ec 0f       	add	r30, r28
    c312:	fd 1f       	adc	r31, r29
    c314:	31 83       	std	Z+1, r19	; 0x01
    c316:	20 83       	st	Z, r18
_ZN19ReservoirModule_WebC4EPK19__FlashStringHelperP10MainModulePN8Settings23ReservoirModuleSettingsE():
    c318:	86 e8       	ldi	r24, 0x86	; 134
    c31a:	9a e0       	ldi	r25, 0x0A	; 10
    c31c:	c1 14       	cp	r12, r1
    c31e:	d1 04       	cpc	r13, r1
    c320:	19 f4       	brne	.+6      	; 0xc328 <ReservoirModule_Web::ReservoirModule_Web(__FlashStringHelper const*, MainModule*, Settings::ReservoirModuleSettings*)+0x66>
    c322:	f4 01       	movw	r30, r8
    c324:	80 81       	ld	r24, Z
    c326:	91 81       	ldd	r25, Z+1	; 0x01
    c328:	99 83       	std	Y+1, r25	; 0x01
    c32a:	88 83       	st	Y, r24
    c32c:	c1 14       	cp	r12, r1
    c32e:	d1 04       	cpc	r13, r1
    c330:	09 f0       	breq	.+2      	; 0xc334 <ReservoirModule_Web::ReservoirModule_Web(__FlashStringHelper const*, MainModule*, Settings::ReservoirModuleSettings*)+0x72>
    c332:	91 c0       	rjmp	.+290    	; 0xc456 <ReservoirModule_Web::ReservoirModule_Web(__FlashStringHelper const*, MainModule*, Settings::ReservoirModuleSettings*)+0x194>
    c334:	d4 01       	movw	r26, r8
    c336:	16 96       	adiw	r26, 0x06	; 6
    c338:	2d 91       	ld	r18, X+
    c33a:	3c 91       	ld	r19, X
    c33c:	06 97       	sbiw	r24, 0x06	; 6
    c33e:	fc 01       	movw	r30, r24
    c340:	80 81       	ld	r24, Z
    c342:	91 81       	ldd	r25, Z+1	; 0x01
    c344:	8c 0f       	add	r24, r28
    c346:	9d 1f       	adc	r25, r29
    c348:	dc 01       	movw	r26, r24
    c34a:	2d 93       	st	X+, r18
    c34c:	3c 93       	st	X, r19
    c34e:	81 e0       	ldi	r24, 0x01	; 1
    c350:	8a 83       	std	Y+2, r24	; 0x02
    c352:	1b 82       	std	Y+3, r1	; 0x03
    c354:	80 e2       	ldi	r24, 0x20	; 32
    c356:	90 e0       	ldi	r25, 0x00	; 0
    c358:	0e 94 74 92 	call	0x124e8	; 0x124e8 <malloc>
    c35c:	9d 83       	std	Y+5, r25	; 0x05
    c35e:	8c 83       	std	Y+4, r24	; 0x04
    c360:	1e 82       	std	Y+6, r1	; 0x06
    c362:	1f 82       	std	Y+7, r1	; 0x07
    c364:	18 86       	std	Y+8, r1	; 0x08
    c366:	19 86       	std	Y+9, r1	; 0x09
    c368:	1b 87       	std	Y+11, r17	; 0x0b
    c36a:	0a 87       	std	Y+10, r16	; 0x0a
    c36c:	fb 8a       	std	Y+19, r15	; 0x13
    c36e:	ea 8a       	std	Y+18, r14	; 0x12
    c370:	ce 01       	movw	r24, r28
    c372:	0e 94 e1 60 	call	0xc1c2	; 0xc1c2 <ReservoirModule_Web::updateCommands()>
    c376:	46 e0       	ldi	r20, 0x06	; 6
    c378:	50 e0       	ldi	r21, 0x00	; 0
    c37a:	b5 01       	movw	r22, r10
    c37c:	ce 01       	movw	r24, r28
    c37e:	0c 96       	adiw	r24, 0x0c	; 12
    c380:	0e 94 d1 94 	call	0x129a2	; 0x129a2 <memcpy_P>
    c384:	d8 01       	movw	r26, r16
    c386:	ed 91       	ld	r30, X+
    c388:	fc 91       	ld	r31, X
    c38a:	72 97       	sbiw	r30, 0x12	; 18
    c38c:	80 81       	ld	r24, Z
    c38e:	91 81       	ldd	r25, Z+1	; 0x01
    c390:	80 0f       	add	r24, r16
    c392:	91 1f       	adc	r25, r17
    c394:	64 e1       	ldi	r22, 0x14	; 20
    c396:	70 e0       	ldi	r23, 0x00	; 0
    c398:	c1 14       	cp	r12, r1
    c39a:	d1 04       	cpc	r13, r1
    c39c:	29 f4       	brne	.+10     	; 0xc3a8 <ReservoirModule_Web::ReservoirModule_Web(__FlashStringHelper const*, MainModule*, Settings::ReservoirModuleSettings*)+0xe6>
    c39e:	e8 81       	ld	r30, Y
    c3a0:	f9 81       	ldd	r31, Y+1	; 0x01
    c3a2:	36 97       	sbiw	r30, 0x06	; 6
    c3a4:	60 81       	ld	r22, Z
    c3a6:	71 81       	ldd	r23, Z+1	; 0x01
    c3a8:	6c 0f       	add	r22, r28
    c3aa:	7d 1f       	adc	r23, r29
    c3ac:	0e 94 5b 1b 	call	0x36b6	; 0x36b6 <Module::addToReportQueue(Common*)>
    c3b0:	d8 01       	movw	r26, r16
    c3b2:	ed 91       	ld	r30, X+
    c3b4:	fc 91       	ld	r31, X
    c3b6:	72 97       	sbiw	r30, 0x12	; 18
    c3b8:	80 81       	ld	r24, Z
    c3ba:	91 81       	ldd	r25, Z+1	; 0x01
    c3bc:	80 0f       	add	r24, r16
    c3be:	91 1f       	adc	r25, r17
    c3c0:	64 e1       	ldi	r22, 0x14	; 20
    c3c2:	70 e0       	ldi	r23, 0x00	; 0
    c3c4:	c1 14       	cp	r12, r1
    c3c6:	d1 04       	cpc	r13, r1
    c3c8:	29 f4       	brne	.+10     	; 0xc3d4 <ReservoirModule_Web::ReservoirModule_Web(__FlashStringHelper const*, MainModule*, Settings::ReservoirModuleSettings*)+0x112>
    c3ca:	e8 81       	ld	r30, Y
    c3cc:	f9 81       	ldd	r31, Y+1	; 0x01
    c3ce:	36 97       	sbiw	r30, 0x06	; 6
    c3d0:	60 81       	ld	r22, Z
    c3d2:	71 81       	ldd	r23, Z+1	; 0x01
    c3d4:	6c 0f       	add	r22, r28
    c3d6:	7d 1f       	adc	r23, r29
    c3d8:	0e 94 75 1b 	call	0x36ea	; 0x36ea <Module::addToRefreshQueue_Sec(Common*)>
    c3dc:	d8 01       	movw	r26, r16
    c3de:	ed 91       	ld	r30, X+
    c3e0:	fc 91       	ld	r31, X
    c3e2:	72 97       	sbiw	r30, 0x12	; 18
    c3e4:	80 81       	ld	r24, Z
    c3e6:	91 81       	ldd	r25, Z+1	; 0x01
    c3e8:	80 0f       	add	r24, r16
    c3ea:	91 1f       	adc	r25, r17
    c3ec:	64 e1       	ldi	r22, 0x14	; 20
    c3ee:	70 e0       	ldi	r23, 0x00	; 0
    c3f0:	cd 28       	or	r12, r13
    c3f2:	29 f4       	brne	.+10     	; 0xc3fe <ReservoirModule_Web::ReservoirModule_Web(__FlashStringHelper const*, MainModule*, Settings::ReservoirModuleSettings*)+0x13c>
    c3f4:	e8 81       	ld	r30, Y
    c3f6:	f9 81       	ldd	r31, Y+1	; 0x01
    c3f8:	36 97       	sbiw	r30, 0x06	; 6
    c3fa:	60 81       	ld	r22, Z
    c3fc:	71 81       	ldd	r23, Z+1	; 0x01
    c3fe:	6c 0f       	add	r22, r28
    c400:	7d 1f       	adc	r23, r29
    c402:	0e 94 8f 1b 	call	0x371e	; 0x371e <Module::addToRefreshQueue_FiveSec(Common*)>
    c406:	d8 01       	movw	r26, r16
    c408:	ed 91       	ld	r30, X+
    c40a:	fc 91       	ld	r31, X
    c40c:	70 97       	sbiw	r30, 0x10	; 16
    c40e:	80 81       	ld	r24, Z
    c410:	91 81       	ldd	r25, Z+1	; 0x01
    c412:	be 01       	movw	r22, r28
    c414:	80 0f       	add	r24, r16
    c416:	91 1f       	adc	r25, r17
    c418:	0e 94 9d 37 	call	0x6f3a	; 0x6f3a <Module_Web::addToWebsiteQueue_Refresh(Common_Web*)>
    c41c:	d8 01       	movw	r26, r16
    c41e:	ed 91       	ld	r30, X+
    c420:	fc 91       	ld	r31, X
    c422:	70 97       	sbiw	r30, 0x10	; 16
    c424:	80 81       	ld	r24, Z
    c426:	91 81       	ldd	r25, Z+1	; 0x01
    c428:	be 01       	movw	r22, r28
    c42a:	80 0f       	add	r24, r16
    c42c:	91 1f       	adc	r25, r17
    c42e:	0e 94 b7 37 	call	0x6f6e	; 0x6f6e <Module_Web::addToCommandQueue(Common_Web*)>
    c432:	43 e0       	ldi	r20, 0x03	; 3
    c434:	61 e0       	ldi	r22, 0x01	; 1
    c436:	86 e0       	ldi	r24, 0x06	; 6
    c438:	9b e1       	ldi	r25, 0x1B	; 27
    c43a:	df 91       	pop	r29
    c43c:	cf 91       	pop	r28
    c43e:	1f 91       	pop	r17
    c440:	0f 91       	pop	r16
    c442:	ff 90       	pop	r15
    c444:	ef 90       	pop	r14
    c446:	df 90       	pop	r13
    c448:	cf 90       	pop	r12
    c44a:	bf 90       	pop	r11
    c44c:	af 90       	pop	r10
    c44e:	9f 90       	pop	r9
    c450:	8f 90       	pop	r8
    c452:	0c 94 85 16 	jmp	0x2d0a	; 0x2d0a <logToSerials(__FlashStringHelper const*, bool, unsigned char)>
    c456:	20 ea       	ldi	r18, 0xA0	; 160
    c458:	3a e0       	ldi	r19, 0x0A	; 10
    c45a:	84 e1       	ldi	r24, 0x14	; 20
    c45c:	90 e0       	ldi	r25, 0x00	; 0
    c45e:	72 cf       	rjmp	.-284    	; 0xc344 <ReservoirModule_Web::ReservoirModule_Web(__FlashStringHelper const*, MainModule*, Settings::ReservoirModuleSettings*)+0x82>

0000c460 <ReservoirModule_Web::ReservoirModule_Web(__FlashStringHelper const*, MainModule*, Settings::ReservoirModuleSettings*)>:
_ZN19ReservoirModule_WebC1EPK19__FlashStringHelperP10MainModulePN8Settings23ReservoirModuleSettingsE():
b:\Gbox420\Gbox420\Gbox420_Mega_Main\build\sketch\src\Modules_Web/ReservoirModule_Web.cpp:12
struct ReservoirCommonTemplate ReservoirResetToSend = {ReservoirMessages::ReservoirReset};                       ///< Special command to fetch the next Response from the Receiver

/**
* @brief Constructor, creates an instance of the class, loads the EEPROM stored persistent settings and subscribes to events
*/
ReservoirModule_Web::ReservoirModule_Web(const __FlashStringHelper *Name, MainModule *Parent, Settings::ReservoirModuleSettings *DefaultSettings) : Common(Name), Common_Web(Name)
    c460:	ef 92       	push	r14
    c462:	ff 92       	push	r15
    c464:	0f 93       	push	r16
    c466:	1f 93       	push	r17
b:\Gbox420\Gbox420\Gbox420_Mega_Main\build\sketch\src\Modules_Web/ReservoirModule_Web.cpp:24
  Parent->addToRefreshQueue_Sec(this);
  Parent->addToRefreshQueue_FiveSec(this);
  Parent->addToWebsiteQueue_Refresh(this);
  Parent->addToCommandQueue(this);
  logToSerials(F("ReservoirModule_Web ready"), true, 3);
}
    c468:	79 01       	movw	r14, r18
    c46a:	8a 01       	movw	r16, r20
    c46c:	9b 01       	movw	r18, r22
    c46e:	50 e0       	ldi	r21, 0x00	; 0
    c470:	40 e0       	ldi	r20, 0x00	; 0
    c472:	61 e0       	ldi	r22, 0x01	; 1
    c474:	70 e0       	ldi	r23, 0x00	; 0
    c476:	0e 94 61 61 	call	0xc2c2	; 0xc2c2 <ReservoirModule_Web::ReservoirModule_Web(__FlashStringHelper const*, MainModule*, Settings::ReservoirModuleSettings*)>
    c47a:	1f 91       	pop	r17
    c47c:	0f 91       	pop	r16
    c47e:	ff 90       	pop	r15
    c480:	ef 90       	pop	r14
    c482:	08 95       	ret

0000c484 <ReservoirModule_Web::sendCommand(void*)>:
_ZN19ReservoirModule_Web11sendCommandEPv():
b:\Gbox420\Gbox420\Gbox420_Mega_Main\build\sketch\src\Modules_Web/ReservoirModule_Web.cpp:120

/**
* @brief Send a single command and process the Response received in the Acknowledgement package
*/
ReservoirMessages ReservoirModule_Web::sendCommand(void *CommandToSend)
{
    c484:	cf 92       	push	r12
    c486:	df 92       	push	r13
    c488:	ef 92       	push	r14
    c48a:	ff 92       	push	r15
    c48c:	0f 93       	push	r16
    c48e:	1f 93       	push	r17
    c490:	cf 93       	push	r28
    c492:	df 93       	push	r29
    c494:	ec 01       	movw	r28, r24
    c496:	7b 01       	movw	r14, r22
b:\Gbox420\Gbox420\Gbox420_Mega_Main\build\sketch\src\Modules_Web/ReservoirModule_Web.cpp:123
  ReservoirMessages SequenceIDToSend = ((ReservoirCommonTemplate *)CommandToSend)->SequenceID;
  ReservoirMessages ReceivedSequenceID;
  if (*(Parent->SerialReportWireless))
    c498:	ea 85       	ldd	r30, Y+10	; 0x0a
    c49a:	fb 85       	ldd	r31, Y+11	; 0x0b
    c49c:	a0 81       	ld	r26, Z
    c49e:	b1 81       	ldd	r27, Z+1	; 0x01
    c4a0:	52 97       	sbiw	r26, 0x12	; 18
    c4a2:	8d 91       	ld	r24, X+
    c4a4:	9c 91       	ld	r25, X
    c4a6:	e8 0f       	add	r30, r24
    c4a8:	f9 1f       	adc	r31, r25
    c4aa:	00 88       	ldd	r0, Z+16	; 0x10
    c4ac:	f1 89       	ldd	r31, Z+17	; 0x11
    c4ae:	e0 2d       	mov	r30, r0
    c4b0:	80 81       	ld	r24, Z
    c4b2:	88 23       	and	r24, r24
    c4b4:	c9 f0       	breq	.+50     	; 0xc4e8 <ReservoirModule_Web::sendCommand(void*)+0x64>
b:\Gbox420\Gbox420\Gbox420_Mega_Main\build\sketch\src\Modules_Web/ReservoirModule_Web.cpp:121
/**
* @brief Send a single command and process the Response received in the Acknowledgement package
*/
ReservoirMessages ReservoirModule_Web::sendCommand(void *CommandToSend)
{
  ReservoirMessages SequenceIDToSend = ((ReservoirCommonTemplate *)CommandToSend)->SequenceID;
    c4b6:	fb 01       	movw	r30, r22
    c4b8:	d0 80       	ld	r13, Z
b:\Gbox420\Gbox420\Gbox420_Mega_Main\build\sketch\src\Modules_Web/ReservoirModule_Web.cpp:125
  ReservoirMessages ReceivedSequenceID;
  if (*(Parent->SerialReportWireless))
  {
    logToSerials(F("Sending:"), false, 1);
    c4ba:	41 e0       	ldi	r20, 0x01	; 1
    c4bc:	60 e0       	ldi	r22, 0x00	; 0
    c4be:	8c e7       	ldi	r24, 0x7C	; 124
    c4c0:	9a e1       	ldi	r25, 0x1A	; 26
    c4c2:	0e 94 85 16 	call	0x2d0a	; 0x2d0a <logToSerials(__FlashStringHelper const*, bool, unsigned char)>
    c4c6:	f4 e0       	ldi	r31, 0x04	; 4
b:\Gbox420\Gbox420\Gbox420_Mega_Main\build\sketch\src\Modules_Web/ReservoirModule_Web.cpp:126
    logToSerials(toText_reservoirSequenceID(SequenceIDToSend), false, 1);
    c4c8:	80 e2       	ldi	r24, 0x20	; 32
    c4ca:	9b e1       	ldi	r25, 0x1B	; 27
    c4cc:	fd 15       	cp	r31, r13
    c4ce:	40 f0       	brcs	.+16     	; 0xc4e0 <ReservoirModule_Web::sendCommand(void*)+0x5c>
    c4d0:	ed 2d       	mov	r30, r13
    c4d2:	f0 e0       	ldi	r31, 0x00	; 0
    c4d4:	ee 0f       	add	r30, r30
    c4d6:	ff 1f       	adc	r31, r31
    c4d8:	e6 5b       	subi	r30, 0xB6	; 182
    c4da:	f5 4f       	sbci	r31, 0xF5	; 245
    c4dc:	80 81       	ld	r24, Z
    c4de:	91 81       	ldd	r25, Z+1	; 0x01
    c4e0:	41 e0       	ldi	r20, 0x01	; 1
    c4e2:	60 e0       	ldi	r22, 0x00	; 0
    c4e4:	0e 94 85 16 	call	0x2d0a	; 0x2d0a <logToSerials(__FlashStringHelper const*, bool, unsigned char)>
b:\Gbox420\Gbox420\Gbox420_Mega_Main\build\sketch\src\Modules_Web/ReservoirModule_Web.cpp:128
  }
  Parent->Wireless->openWritingPipe(WirelessChannel);
    c4e8:	ea 85       	ldd	r30, Y+10	; 0x0a
    c4ea:	fb 85       	ldd	r31, Y+11	; 0x0b
    c4ec:	be 01       	movw	r22, r28
    c4ee:	64 5f       	subi	r22, 0xF4	; 244
    c4f0:	7f 4f       	sbci	r23, 0xFF	; 255
    c4f2:	82 81       	ldd	r24, Z+2	; 0x02
    c4f4:	93 81       	ldd	r25, Z+3	; 0x03
    c4f6:	0e 94 e2 68 	call	0xd1c4	; 0xd1c4 <RF24::openWritingPipe(unsigned char const*)>
b:\Gbox420\Gbox420\Gbox420_Mega_Main\build\sketch\src\Modules_Web/ReservoirModule_Web.cpp:129
  Parent->Wireless->flush_rx(); ///< Dump all previously received but unprocessed messages
    c4fa:	ea 85       	ldd	r30, Y+10	; 0x0a
    c4fc:	fb 85       	ldd	r31, Y+11	; 0x0b
    c4fe:	82 81       	ldd	r24, Z+2	; 0x02
    c500:	93 81       	ldd	r25, Z+3	; 0x03
    c502:	0e 94 eb 66 	call	0xcdd6	; 0xcdd6 <RF24::flush_rx()>
b:\Gbox420\Gbox420\Gbox420_Mega_Main\build\sketch\src\Modules_Web/ReservoirModule_Web.cpp:130
  if (Parent->Wireless->write(CommandToSend, WirelessPayloadSize))
    c506:	ea 85       	ldd	r30, Y+10	; 0x0a
    c508:	fb 85       	ldd	r31, Y+11	; 0x0b
    c50a:	40 e2       	ldi	r20, 0x20	; 32
    c50c:	b7 01       	movw	r22, r14
    c50e:	82 81       	ldd	r24, Z+2	; 0x02
    c510:	93 81       	ldd	r25, Z+3	; 0x03
    c512:	0e 94 ba 68 	call	0xd174	; 0xd174 <RF24::write(void const*, unsigned char)>
    c516:	88 23       	and	r24, r24
    c518:	09 f4       	brne	.+2      	; 0xc51c <ReservoirModule_Web::sendCommand(void*)+0x98>
    c51a:	16 c1       	rjmp	.+556    	; 0xc748 <ReservoirModule_Web::sendCommand(void*)+0x2c4>
b:\Gbox420\Gbox420\Gbox420_Mega_Main\build\sketch\src\Modules_Web/ReservoirModule_Web.cpp:132
  {
    delay(50); ///< give a little time to the nRF024L01+ chip to update the isAckPayloadAvailable flag
    c51c:	62 e3       	ldi	r22, 0x32	; 50
    c51e:	70 e0       	ldi	r23, 0x00	; 0
    c520:	80 e0       	ldi	r24, 0x00	; 0
    c522:	90 e0       	ldi	r25, 0x00	; 0
    c524:	0e 94 98 85 	call	0x10b30	; 0x10b30 <delay>
b:\Gbox420\Gbox420\Gbox420_Mega_Main\build\sketch\src\Modules_Web/ReservoirModule_Web.cpp:133
    if (Parent->Wireless->isAckPayloadAvailable())
    c528:	ea 85       	ldd	r30, Y+10	; 0x0a
    c52a:	fb 85       	ldd	r31, Y+11	; 0x0b
    c52c:	82 81       	ldd	r24, Z+2	; 0x02
    c52e:	93 81       	ldd	r25, Z+3	; 0x03
    c530:	0e 94 64 69 	call	0xd2c8	; 0xd2c8 <RF24::isAckPayloadAvailable()>
    c534:	ea 85       	ldd	r30, Y+10	; 0x0a
    c536:	fb 85       	ldd	r31, Y+11	; 0x0b
    c538:	88 23       	and	r24, r24
    c53a:	09 f4       	brne	.+2      	; 0xc53e <ReservoirModule_Web::sendCommand(void*)+0xba>
    c53c:	f0 c0       	rjmp	.+480    	; 0xc71e <ReservoirModule_Web::sendCommand(void*)+0x29a>
b:\Gbox420\Gbox420\Gbox420_Mega_Main\build\sketch\src\Modules_Web/ReservoirModule_Web.cpp:135
    {
      OnlineStatus = true;
    c53e:	81 e0       	ldi	r24, 0x01	; 1
    c540:	8b 83       	std	Y+3, r24	; 0x03
b:\Gbox420\Gbox420\Gbox420_Mega_Main\build\sketch\src\Modules_Web/ReservoirModule_Web.cpp:136
      Parent->Wireless->read(ReceivedResponse, WirelessPayloadSize);
    c542:	6c 81       	ldd	r22, Y+4	; 0x04
    c544:	7d 81       	ldd	r23, Y+5	; 0x05
    c546:	40 e2       	ldi	r20, 0x20	; 32
    c548:	82 81       	ldd	r24, Z+2	; 0x02
    c54a:	93 81       	ldd	r25, Z+3	; 0x03
    c54c:	0e 94 d5 68 	call	0xd1aa	; 0xd1aa <RF24::read(void*, unsigned char)>
b:\Gbox420\Gbox420\Gbox420_Mega_Main\build\sketch\src\Modules_Web/ReservoirModule_Web.cpp:137
      ReceivedSequenceID = ((ReservoirCommonTemplate *)ReceivedResponse)->SequenceID;
    c550:	ec 81       	ldd	r30, Y+4	; 0x04
    c552:	fd 81       	ldd	r31, Y+5	; 0x05
    c554:	00 81       	ld	r16, Z
    c556:	11 81       	ldd	r17, Z+1	; 0x01
b:\Gbox420\Gbox420\Gbox420_Mega_Main\build\sketch\src\Modules_Web/ReservoirModule_Web.cpp:138
      if (*(Parent->SerialReportWireless))
    c558:	ea 85       	ldd	r30, Y+10	; 0x0a
    c55a:	fb 85       	ldd	r31, Y+11	; 0x0b
    c55c:	a0 81       	ld	r26, Z
    c55e:	b1 81       	ldd	r27, Z+1	; 0x01
    c560:	52 97       	sbiw	r26, 0x12	; 18
    c562:	8d 91       	ld	r24, X+
    c564:	9c 91       	ld	r25, X
    c566:	e8 0f       	add	r30, r24
    c568:	f9 1f       	adc	r31, r25
    c56a:	00 88       	ldd	r0, Z+16	; 0x10
    c56c:	f1 89       	ldd	r31, Z+17	; 0x11
    c56e:	e0 2d       	mov	r30, r0
    c570:	80 81       	ld	r24, Z
    c572:	88 23       	and	r24, r24
    c574:	09 f4       	brne	.+2      	; 0xc578 <ReservoirModule_Web::sendCommand(void*)+0xf4>
    c576:	0f c1       	rjmp	.+542    	; 0xc796 <ReservoirModule_Web::sendCommand(void*)+0x312>
b:\Gbox420\Gbox420\Gbox420_Mega_Main\build\sketch\src\Modules_Web/ReservoirModule_Web.cpp:140
      {
        logToSerials(F("; Response:"), false, 1);
    c578:	41 e0       	ldi	r20, 0x01	; 1
    c57a:	60 e0       	ldi	r22, 0x00	; 0
    c57c:	80 e7       	ldi	r24, 0x70	; 112
    c57e:	9a e1       	ldi	r25, 0x1A	; 26
    c580:	0e 94 85 16 	call	0x2d0a	; 0x2d0a <logToSerials(__FlashStringHelper const*, bool, unsigned char)>
b:\Gbox420\Gbox420\Gbox420_Mega_Main\build\sketch\src\Modules_Web/ReservoirModule_Web.cpp:141
        logToSerials(toText_reservoirSequenceID(ReceivedSequenceID), false, 1);
    c584:	80 e2       	ldi	r24, 0x20	; 32
    c586:	9b e1       	ldi	r25, 0x1B	; 27
    c588:	05 30       	cpi	r16, 0x05	; 5
    c58a:	40 f4       	brcc	.+16     	; 0xc59c <ReservoirModule_Web::sendCommand(void*)+0x118>
    c58c:	e0 2f       	mov	r30, r16
    c58e:	f0 e0       	ldi	r31, 0x00	; 0
    c590:	ee 0f       	add	r30, r30
    c592:	ff 1f       	adc	r31, r31
    c594:	e6 5b       	subi	r30, 0xB6	; 182
    c596:	f5 4f       	sbci	r31, 0xF5	; 245
    c598:	80 81       	ld	r24, Z
    c59a:	91 81       	ldd	r25, Z+1	; 0x01
    c59c:	41 e0       	ldi	r20, 0x01	; 1
    c59e:	60 e0       	ldi	r22, 0x00	; 0
    c5a0:	0e 94 85 16 	call	0x2d0a	; 0x2d0a <logToSerials(__FlashStringHelper const*, bool, unsigned char)>
b:\Gbox420\Gbox420\Gbox420_Mega_Main\build\sketch\src\Modules_Web/ReservoirModule_Web.cpp:142
        logToSerials(F("; Data:"), false, 1);
    c5a4:	41 e0       	ldi	r20, 0x01	; 1
    c5a6:	60 e0       	ldi	r22, 0x00	; 0
    c5a8:	88 e6       	ldi	r24, 0x68	; 104
    c5aa:	9a e1       	ldi	r25, 0x1A	; 26
    c5ac:	0e 94 85 16 	call	0x2d0a	; 0x2d0a <logToSerials(__FlashStringHelper const*, bool, unsigned char)>
b:\Gbox420\Gbox420\Gbox420_Mega_Main\build\sketch\src\Modules_Web/ReservoirModule_Web.cpp:145
      }

      switch (ReceivedSequenceID)
    c5b0:	03 30       	cpi	r16, 0x03	; 3
    c5b2:	11 05       	cpc	r17, r1
    c5b4:	c1 f1       	breq	.+112    	; 0xc626 <ReservoirModule_Web::sendCommand(void*)+0x1a2>
    c5b6:	04 30       	cpi	r16, 0x04	; 4
    c5b8:	11 05       	cpc	r17, r1
    c5ba:	09 f4       	brne	.+2      	; 0xc5be <ReservoirModule_Web::sendCommand(void*)+0x13a>
    c5bc:	84 c0       	rjmp	.+264    	; 0xc6c6 <ReservoirModule_Web::sendCommand(void*)+0x242>
    c5be:	01 30       	cpi	r16, 0x01	; 1
    c5c0:	11 05       	cpc	r17, r1
    c5c2:	09 f0       	breq	.+2      	; 0xc5c6 <ReservoirModule_Web::sendCommand(void*)+0x142>
    c5c4:	97 c0       	rjmp	.+302    	; 0xc6f4 <ReservoirModule_Web::sendCommand(void*)+0x270>
b:\Gbox420\Gbox420\Gbox420_Mega_Main\build\sketch\src\Modules_Web/ReservoirModule_Web.cpp:148
      {
      case ReservoirMessages::ReservoirModuleResponse1:
        memcpy(&ReservoirModuleResponse1Received, ReceivedResponse, sizeof(struct ReservoirModuleResponse));
    c5c6:	ec 81       	ldd	r30, Y+4	; 0x04
    c5c8:	fd 81       	ldd	r31, Y+5	; 0x05
    c5ca:	80 81       	ld	r24, Z
    c5cc:	91 81       	ldd	r25, Z+1	; 0x01
    c5ce:	a2 81       	ldd	r26, Z+2	; 0x02
    c5d0:	80 93 b6 14 	sts	0x14B6, r24	; 0x8014b6 <ReservoirModuleResponse1Received>
    c5d4:	90 93 b7 14 	sts	0x14B7, r25	; 0x8014b7 <ReservoirModuleResponse1Received+0x1>
    c5d8:	a0 93 b8 14 	sts	0x14B8, r26	; 0x8014b8 <ReservoirModuleResponse1Received+0x2>
b:\Gbox420\Gbox420\Gbox420_Mega_Main\build\sketch\src\Modules_Web/ReservoirModule_Web.cpp:149
        if (*(Parent->SerialReportWireless))
    c5dc:	ea 85       	ldd	r30, Y+10	; 0x0a
    c5de:	fb 85       	ldd	r31, Y+11	; 0x0b
    c5e0:	a0 81       	ld	r26, Z
    c5e2:	b1 81       	ldd	r27, Z+1	; 0x01
    c5e4:	52 97       	sbiw	r26, 0x12	; 18
    c5e6:	8d 91       	ld	r24, X+
    c5e8:	9c 91       	ld	r25, X
    c5ea:	e8 0f       	add	r30, r24
    c5ec:	f9 1f       	adc	r31, r25
    c5ee:	00 88       	ldd	r0, Z+16	; 0x10
    c5f0:	f1 89       	ldd	r31, Z+17	; 0x11
    c5f2:	e0 2d       	mov	r30, r0
    c5f4:	80 81       	ld	r24, Z
    c5f6:	88 23       	and	r24, r24
    c5f8:	31 f0       	breq	.+12     	; 0xc606 <ReservoirModule_Web::sendCommand(void*)+0x182>
b:\Gbox420\Gbox420\Gbox420_Mega_Main\build\sketch\src\Modules_Web/ReservoirModule_Web.cpp:151
        {
          logToSerials(ReservoirModuleResponse1Received.Status, true, 1);
    c5fa:	41 e0       	ldi	r20, 0x01	; 1
    c5fc:	61 e0       	ldi	r22, 0x01	; 1
    c5fe:	88 eb       	ldi	r24, 0xB8	; 184
    c600:	94 e1       	ldi	r25, 0x14	; 20
    c602:	0e 94 5a 47 	call	0x8eb4	; 0x8eb4 <void logToSerials<bool>(bool&, bool, unsigned char)>
b:\Gbox420\Gbox420\Gbox420_Mega_Main\build\sketch\src\Modules_Web/ReservoirModule_Web.cpp:186
        {
          logToSerials(F("SequenceID unknown"), true, 1);
        }
        break;
      }
      LastResponseReceived = millis();
    c606:	0e 94 67 85 	call	0x10ace	; 0x10ace <millis>
    c60a:	6e 83       	std	Y+6, r22	; 0x06
    c60c:	7f 83       	std	Y+7, r23	; 0x07
    c60e:	88 87       	std	Y+8, r24	; 0x08
    c610:	99 87       	std	Y+9, r25	; 0x09
b:\Gbox420\Gbox420\Gbox420_Mega_Main\build\sketch\src\Modules_Web/ReservoirModule_Web.cpp:204
    {
      OnlineStatus = false; ///< Comment this out if you have modules that do not return any data
    }
  }
  return ReceivedSequenceID;
}
    c612:	c8 01       	movw	r24, r16
    c614:	df 91       	pop	r29
    c616:	cf 91       	pop	r28
    c618:	1f 91       	pop	r17
    c61a:	0f 91       	pop	r16
    c61c:	ff 90       	pop	r15
    c61e:	ef 90       	pop	r14
    c620:	df 90       	pop	r13
    c622:	cf 90       	pop	r12
    c624:	08 95       	ret
b:\Gbox420\Gbox420\Gbox420_Mega_Main\build\sketch\src\Modules_Web/ReservoirModule_Web.cpp:155
        {
          logToSerials(ReservoirModuleResponse1Received.Status, true, 1);
        }
        break;
      case ReservoirMessages::ReservoirResponse1:
        memcpy(&ReservoirResponse1Received, ReceivedResponse, sizeof(struct ReservoirResponse));
    c626:	ec 81       	ldd	r30, Y+4	; 0x04
    c628:	fd 81       	ldd	r31, Y+5	; 0x05
    c62a:	8b e1       	ldi	r24, 0x1B	; 27
    c62c:	a8 e9       	ldi	r26, 0x98	; 152
    c62e:	b4 e1       	ldi	r27, 0x14	; 20
    c630:	01 90       	ld	r0, Z+
    c632:	0d 92       	st	X+, r0
    c634:	8a 95       	dec	r24
    c636:	e1 f7       	brne	.-8      	; 0xc630 <ReservoirModule_Web::sendCommand(void*)+0x1ac>
b:\Gbox420\Gbox420\Gbox420_Mega_Main\build\sketch\src\Modules_Web/ReservoirModule_Web.cpp:156
        if (*(Parent->SerialReportWireless))
    c638:	ea 85       	ldd	r30, Y+10	; 0x0a
    c63a:	fb 85       	ldd	r31, Y+11	; 0x0b
    c63c:	a0 81       	ld	r26, Z
    c63e:	b1 81       	ldd	r27, Z+1	; 0x01
    c640:	52 97       	sbiw	r26, 0x12	; 18
    c642:	8d 91       	ld	r24, X+
    c644:	9c 91       	ld	r25, X
    c646:	e8 0f       	add	r30, r24
    c648:	f9 1f       	adc	r31, r25
    c64a:	00 88       	ldd	r0, Z+16	; 0x10
    c64c:	f1 89       	ldd	r31, Z+17	; 0x11
    c64e:	e0 2d       	mov	r30, r0
    c650:	80 81       	ld	r24, Z
    c652:	88 23       	and	r24, r24
    c654:	51 f1       	breq	.+84     	; 0xc6aa <ReservoirModule_Web::sendCommand(void*)+0x226>
b:\Gbox420\Gbox420\Gbox420_Mega_Main\build\sketch\src\Modules_Web/ReservoirModule_Web.cpp:158
        {
          logToSerials(ReservoirResponse1Received.ConfirmTareWeight, false, 1);
    c656:	41 e0       	ldi	r20, 0x01	; 1
    c658:	60 e0       	ldi	r22, 0x00	; 0
    c65a:	8a e9       	ldi	r24, 0x9A	; 154
    c65c:	94 e1       	ldi	r25, 0x14	; 20
    c65e:	0e 94 5a 47 	call	0x8eb4	; 0x8eb4 <void logToSerials<bool>(bool&, bool, unsigned char)>
b:\Gbox420\Gbox420\Gbox420_Mega_Main\build\sketch\src\Modules_Web/ReservoirModule_Web.cpp:159
          logToSerials(ReservoirResponse1Received.PH, false, 1);
    c662:	41 e0       	ldi	r20, 0x01	; 1
    c664:	60 e0       	ldi	r22, 0x00	; 0
    c666:	8b e9       	ldi	r24, 0x9B	; 155
    c668:	94 e1       	ldi	r25, 0x14	; 20
    c66a:	0e 94 eb 47 	call	0x8fd6	; 0x8fd6 <void logToSerials<float>(float&, bool, unsigned char)>
b:\Gbox420\Gbox420\Gbox420_Mega_Main\build\sketch\src\Modules_Web/ReservoirModule_Web.cpp:160
          logToSerials(ReservoirResponse1Received.TDS, false, 1);
    c66e:	41 e0       	ldi	r20, 0x01	; 1
    c670:	60 e0       	ldi	r22, 0x00	; 0
    c672:	8f e9       	ldi	r24, 0x9F	; 159
    c674:	94 e1       	ldi	r25, 0x14	; 20
    c676:	0e 94 eb 47 	call	0x8fd6	; 0x8fd6 <void logToSerials<float>(float&, bool, unsigned char)>
b:\Gbox420\Gbox420\Gbox420_Mega_Main\build\sketch\src\Modules_Web/ReservoirModule_Web.cpp:161
          logToSerials(ReservoirResponse1Received.Weight, false, 1);
    c67a:	41 e0       	ldi	r20, 0x01	; 1
    c67c:	60 e0       	ldi	r22, 0x00	; 0
    c67e:	83 ea       	ldi	r24, 0xA3	; 163
    c680:	94 e1       	ldi	r25, 0x14	; 20
    c682:	0e 94 eb 47 	call	0x8fd6	; 0x8fd6 <void logToSerials<float>(float&, bool, unsigned char)>
b:\Gbox420\Gbox420\Gbox420_Mega_Main\build\sketch\src\Modules_Web/ReservoirModule_Web.cpp:162
          logToSerials(ReservoirResponse1Received.WaterTemperature, false, 1);
    c686:	41 e0       	ldi	r20, 0x01	; 1
    c688:	60 e0       	ldi	r22, 0x00	; 0
    c68a:	87 ea       	ldi	r24, 0xA7	; 167
    c68c:	94 e1       	ldi	r25, 0x14	; 20
    c68e:	0e 94 eb 47 	call	0x8fd6	; 0x8fd6 <void logToSerials<float>(float&, bool, unsigned char)>
b:\Gbox420\Gbox420\Gbox420_Mega_Main\build\sketch\src\Modules_Web/ReservoirModule_Web.cpp:163
          logToSerials(ReservoirResponse1Received.AirTemperature, false, 1);
    c692:	41 e0       	ldi	r20, 0x01	; 1
    c694:	60 e0       	ldi	r22, 0x00	; 0
    c696:	8b ea       	ldi	r24, 0xAB	; 171
    c698:	94 e1       	ldi	r25, 0x14	; 20
    c69a:	0e 94 eb 47 	call	0x8fd6	; 0x8fd6 <void logToSerials<float>(float&, bool, unsigned char)>
b:\Gbox420\Gbox420\Gbox420_Mega_Main\build\sketch\src\Modules_Web/ReservoirModule_Web.cpp:164
          logToSerials(ReservoirResponse1Received.Humidity, true, 1);
    c69e:	41 e0       	ldi	r20, 0x01	; 1
    c6a0:	61 e0       	ldi	r22, 0x01	; 1
    c6a2:	8f ea       	ldi	r24, 0xAF	; 175
    c6a4:	94 e1       	ldi	r25, 0x14	; 20
    c6a6:	0e 94 eb 47 	call	0x8fd6	; 0x8fd6 <void logToSerials<float>(float&, bool, unsigned char)>
b:\Gbox420\Gbox420\Gbox420_Mega_Main\build\sketch\src\Modules_Web/ReservoirModule_Web.cpp:166
        }
        if (ReservoirCommand1ToSend.TareWeight)
    c6aa:	80 91 b5 14 	lds	r24, 0x14B5	; 0x8014b5 <ReservoirCommand1ToSend+0x2>
    c6ae:	88 23       	and	r24, r24
    c6b0:	11 f0       	breq	.+4      	; 0xc6b6 <ReservoirModule_Web::sendCommand(void*)+0x232>
b:\Gbox420\Gbox420\Gbox420_Mega_Main\build\sketch\src\Modules_Web/ReservoirModule_Web.cpp:168
        {
          SyncRequested = true; ///< Force another message exchange when a command is active
    c6b2:	81 e0       	ldi	r24, 0x01	; 1
    c6b4:	8a 83       	std	Y+2, r24	; 0x02
b:\Gbox420\Gbox420\Gbox420_Mega_Main\build\sketch\src\Modules_Web/ReservoirModule_Web.cpp:170
        }
        if (ReservoirResponse1Received.ConfirmTareWeight)
    c6b6:	80 91 9a 14 	lds	r24, 0x149A	; 0x80149a <ReservoirResponse1Received+0x2>
    c6ba:	88 23       	and	r24, r24
    c6bc:	09 f4       	brne	.+2      	; 0xc6c0 <ReservoirModule_Web::sendCommand(void*)+0x23c>
    c6be:	a3 cf       	rjmp	.-186    	; 0xc606 <ReservoirModule_Web::sendCommand(void*)+0x182>
b:\Gbox420\Gbox420\Gbox420_Mega_Main\build\sketch\src\Modules_Web/ReservoirModule_Web.cpp:171
          ReservoirCommand1ToSend.TareWeight = false; //Turn off the Flag once the Receiver confirms processing it
    c6c0:	10 92 b5 14 	sts	0x14B5, r1	; 0x8014b5 <ReservoirCommand1ToSend+0x2>
    c6c4:	a0 cf       	rjmp	.-192    	; 0xc606 <ReservoirModule_Web::sendCommand(void*)+0x182>
b:\Gbox420\Gbox420\Gbox420_Mega_Main\build\sketch\src\Modules_Web/ReservoirModule_Web.cpp:174
        break;
      case ReservoirMessages::ReservoirReset:
        if (*(Parent->SerialReportWireless))
    c6c6:	ea 85       	ldd	r30, Y+10	; 0x0a
    c6c8:	fb 85       	ldd	r31, Y+11	; 0x0b
    c6ca:	a0 81       	ld	r26, Z
    c6cc:	b1 81       	ldd	r27, Z+1	; 0x01
    c6ce:	52 97       	sbiw	r26, 0x12	; 18
    c6d0:	8d 91       	ld	r24, X+
    c6d2:	9c 91       	ld	r25, X
    c6d4:	e8 0f       	add	r30, r24
    c6d6:	f9 1f       	adc	r31, r25
    c6d8:	00 88       	ldd	r0, Z+16	; 0x10
    c6da:	f1 89       	ldd	r31, Z+17	; 0x11
    c6dc:	e0 2d       	mov	r30, r0
    c6de:	80 81       	ld	r24, Z
    c6e0:	88 23       	and	r24, r24
    c6e2:	09 f4       	brne	.+2      	; 0xc6e6 <ReservoirModule_Web::sendCommand(void*)+0x262>
    c6e4:	90 cf       	rjmp	.-224    	; 0xc606 <ReservoirModule_Web::sendCommand(void*)+0x182>
b:\Gbox420\Gbox420\Gbox420_Mega_Main\build\sketch\src\Modules_Web/ReservoirModule_Web.cpp:176
        {
          logToSerials(F("-"), true, 1); ///< Reset messages does not have any data
    c6e6:	41 e0       	ldi	r20, 0x01	; 1
    c6e8:	61 e0       	ldi	r22, 0x01	; 1
    c6ea:	86 e6       	ldi	r24, 0x66	; 102
    c6ec:	9a e1       	ldi	r25, 0x1A	; 26
b:\Gbox420\Gbox420\Gbox420_Mega_Main\build\sketch\src\Modules_Web/ReservoirModule_Web.cpp:182
        }
        break;
      default:
        if (*(Parent->SerialReportWireless))
        {
          logToSerials(F("SequenceID unknown"), true, 1);
    c6ee:	0e 94 85 16 	call	0x2d0a	; 0x2d0a <logToSerials(__FlashStringHelper const*, bool, unsigned char)>
    c6f2:	89 cf       	rjmp	.-238    	; 0xc606 <ReservoirModule_Web::sendCommand(void*)+0x182>
b:\Gbox420\Gbox420\Gbox420_Mega_Main\build\sketch\src\Modules_Web/ReservoirModule_Web.cpp:180
        {
          logToSerials(F("-"), true, 1); ///< Reset messages does not have any data
        }
        break;
      default:
        if (*(Parent->SerialReportWireless))
    c6f4:	ea 85       	ldd	r30, Y+10	; 0x0a
    c6f6:	fb 85       	ldd	r31, Y+11	; 0x0b
    c6f8:	a0 81       	ld	r26, Z
    c6fa:	b1 81       	ldd	r27, Z+1	; 0x01
    c6fc:	52 97       	sbiw	r26, 0x12	; 18
    c6fe:	8d 91       	ld	r24, X+
    c700:	9c 91       	ld	r25, X
    c702:	e8 0f       	add	r30, r24
    c704:	f9 1f       	adc	r31, r25
    c706:	00 88       	ldd	r0, Z+16	; 0x10
    c708:	f1 89       	ldd	r31, Z+17	; 0x11
    c70a:	e0 2d       	mov	r30, r0
    c70c:	80 81       	ld	r24, Z
    c70e:	88 23       	and	r24, r24
    c710:	09 f4       	brne	.+2      	; 0xc714 <ReservoirModule_Web::sendCommand(void*)+0x290>
    c712:	79 cf       	rjmp	.-270    	; 0xc606 <ReservoirModule_Web::sendCommand(void*)+0x182>
b:\Gbox420\Gbox420\Gbox420_Mega_Main\build\sketch\src\Modules_Web/ReservoirModule_Web.cpp:182
        {
          logToSerials(F("SequenceID unknown"), true, 1);
    c714:	41 e0       	ldi	r20, 0x01	; 1
    c716:	61 e0       	ldi	r22, 0x01	; 1
    c718:	83 e5       	ldi	r24, 0x53	; 83
    c71a:	9a e1       	ldi	r25, 0x1A	; 26
    c71c:	e8 cf       	rjmp	.-48     	; 0xc6ee <ReservoirModule_Web::sendCommand(void*)+0x26a>
b:\Gbox420\Gbox420\Gbox420_Mega_Main\build\sketch\src\Modules_Web/ReservoirModule_Web.cpp:190
      }
      LastResponseReceived = millis();
    }
    else
    {
      if (*(Parent->SerialReportWireless))
    c71e:	a0 81       	ld	r26, Z
    c720:	b1 81       	ldd	r27, Z+1	; 0x01
    c722:	52 97       	sbiw	r26, 0x12	; 18
    c724:	8d 91       	ld	r24, X+
    c726:	9c 91       	ld	r25, X
    c728:	e8 0f       	add	r30, r24
    c72a:	f9 1f       	adc	r31, r25
    c72c:	00 88       	ldd	r0, Z+16	; 0x10
    c72e:	f1 89       	ldd	r31, Z+17	; 0x11
    c730:	e0 2d       	mov	r30, r0
    c732:	80 81       	ld	r24, Z
    c734:	88 23       	and	r24, r24
    c736:	09 f4       	brne	.+2      	; 0xc73a <ReservoirModule_Web::sendCommand(void*)+0x2b6>
    c738:	6c cf       	rjmp	.-296    	; 0xc612 <ReservoirModule_Web::sendCommand(void*)+0x18e>
b:\Gbox420\Gbox420\Gbox420_Mega_Main\build\sketch\src\Modules_Web/ReservoirModule_Web.cpp:191
        logToSerials(F("; Ack received without data"), true, 1);
    c73a:	41 e0       	ldi	r20, 0x01	; 1
    c73c:	61 e0       	ldi	r22, 0x01	; 1
    c73e:	87 e3       	ldi	r24, 0x37	; 55
    c740:	9a e1       	ldi	r25, 0x1A	; 26
    c742:	0e 94 85 16 	call	0x2d0a	; 0x2d0a <logToSerials(__FlashStringHelper const*, bool, unsigned char)>
    c746:	65 cf       	rjmp	.-310    	; 0xc612 <ReservoirModule_Web::sendCommand(void*)+0x18e>
b:\Gbox420\Gbox420\Gbox420_Mega_Main\build\sketch\src\Modules_Web/ReservoirModule_Web.cpp:196
    }
  }
  else
  {
    if (*(Parent->SerialReportWireless))
    c748:	ea 85       	ldd	r30, Y+10	; 0x0a
    c74a:	fb 85       	ldd	r31, Y+11	; 0x0b
    c74c:	a0 81       	ld	r26, Z
    c74e:	b1 81       	ldd	r27, Z+1	; 0x01
    c750:	52 97       	sbiw	r26, 0x12	; 18
    c752:	8d 91       	ld	r24, X+
    c754:	9c 91       	ld	r25, X
    c756:	e8 0f       	add	r30, r24
    c758:	f9 1f       	adc	r31, r25
    c75a:	00 88       	ldd	r0, Z+16	; 0x10
    c75c:	f1 89       	ldd	r31, Z+17	; 0x11
    c75e:	e0 2d       	mov	r30, r0
    c760:	80 81       	ld	r24, Z
    c762:	88 23       	and	r24, r24
    c764:	31 f0       	breq	.+12     	; 0xc772 <ReservoirModule_Web::sendCommand(void*)+0x2ee>
b:\Gbox420\Gbox420\Gbox420_Mega_Main\build\sketch\src\Modules_Web/ReservoirModule_Web.cpp:197
      logToSerials(F("; No response"), true, 1);
    c766:	41 e0       	ldi	r20, 0x01	; 1
    c768:	61 e0       	ldi	r22, 0x01	; 1
    c76a:	89 e2       	ldi	r24, 0x29	; 41
    c76c:	9a e1       	ldi	r25, 0x1A	; 26
    c76e:	0e 94 85 16 	call	0x2d0a	; 0x2d0a <logToSerials(__FlashStringHelper const*, bool, unsigned char)>
b:\Gbox420\Gbox420\Gbox420_Mega_Main\build\sketch\src\Modules_Web/ReservoirModule_Web.cpp:198
    if (millis() - LastResponseReceived > WirelessReceiveTimeout)
    c772:	0e 94 67 85 	call	0x10ace	; 0x10ace <millis>
    c776:	ce 80       	ldd	r12, Y+6	; 0x06
    c778:	df 80       	ldd	r13, Y+7	; 0x07
    c77a:	e8 84       	ldd	r14, Y+8	; 0x08
    c77c:	f9 84       	ldd	r15, Y+9	; 0x09
    c77e:	6c 19       	sub	r22, r12
    c780:	7d 09       	sbc	r23, r13
    c782:	8e 09       	sbc	r24, r14
    c784:	9f 09       	sbc	r25, r15
    c786:	69 3e       	cpi	r22, 0xE9	; 233
    c788:	7d 4f       	sbci	r23, 0xFD	; 253
    c78a:	81 05       	cpc	r24, r1
    c78c:	91 05       	cpc	r25, r1
    c78e:	08 f4       	brcc	.+2      	; 0xc792 <ReservoirModule_Web::sendCommand(void*)+0x30e>
    c790:	40 cf       	rjmp	.-384    	; 0xc612 <ReservoirModule_Web::sendCommand(void*)+0x18e>
b:\Gbox420\Gbox420\Gbox420_Mega_Main\build\sketch\src\Modules_Web/ReservoirModule_Web.cpp:200
    {
      OnlineStatus = false; ///< Comment this out if you have modules that do not return any data
    c792:	1b 82       	std	Y+3, r1	; 0x03
b:\Gbox420\Gbox420\Gbox420_Mega_Main\build\sketch\src\Modules_Web/ReservoirModule_Web.cpp:203
    }
  }
  return ReceivedSequenceID;
    c794:	3e cf       	rjmp	.-388    	; 0xc612 <ReservoirModule_Web::sendCommand(void*)+0x18e>
b:\Gbox420\Gbox420\Gbox420_Mega_Main\build\sketch\src\Modules_Web/ReservoirModule_Web.cpp:145
        logToSerials(F("; Response:"), false, 1);
        logToSerials(toText_reservoirSequenceID(ReceivedSequenceID), false, 1);
        logToSerials(F("; Data:"), false, 1);
      }

      switch (ReceivedSequenceID)
    c796:	03 30       	cpi	r16, 0x03	; 3
    c798:	11 05       	cpc	r17, r1
    c79a:	09 f4       	brne	.+2      	; 0xc79e <ReservoirModule_Web::sendCommand(void*)+0x31a>
    c79c:	44 cf       	rjmp	.-376    	; 0xc626 <ReservoirModule_Web::sendCommand(void*)+0x1a2>
    c79e:	04 30       	cpi	r16, 0x04	; 4
    c7a0:	11 05       	cpc	r17, r1
    c7a2:	09 f4       	brne	.+2      	; 0xc7a6 <ReservoirModule_Web::sendCommand(void*)+0x322>
    c7a4:	90 cf       	rjmp	.-224    	; 0xc6c6 <ReservoirModule_Web::sendCommand(void*)+0x242>
    c7a6:	01 30       	cpi	r16, 0x01	; 1
    c7a8:	11 05       	cpc	r17, r1
    c7aa:	09 f0       	breq	.+2      	; 0xc7ae <ReservoirModule_Web::sendCommand(void*)+0x32a>
    c7ac:	2c cf       	rjmp	.-424    	; 0xc606 <ReservoirModule_Web::sendCommand(void*)+0x182>
    c7ae:	0b cf       	rjmp	.-490    	; 0xc5c6 <ReservoirModule_Web::sendCommand(void*)+0x142>

0000c7b0 <ReservoirModule_Web::sendMessages()>:
_ZN19ReservoirModule_Web12sendMessagesEv():
b:\Gbox420\Gbox420\Gbox420_Mega_Main\build\sketch\src\Modules_Web/ReservoirModule_Web.cpp:105

/**
* @brief Exchange messages with the Reservoir module
*/
void ReservoirModule_Web::sendMessages()
{
    c7b0:	cf 93       	push	r28
    c7b2:	df 93       	push	r29
    c7b4:	ec 01       	movw	r28, r24
b:\Gbox420\Gbox420\Gbox420_Mega_Main\build\sketch\src\Modules_Web/ReservoirModule_Web.cpp:106
  updateCommands();
    c7b6:	0e 94 e1 60 	call	0xc1c2	; 0xc1c2 <ReservoirModule_Web::updateCommands()>
b:\Gbox420\Gbox420\Gbox420_Mega_Main\build\sketch\src\Modules_Web/ReservoirModule_Web.cpp:107
  sendCommand(&ReservoirResetToSend);          ///< special Command, resets communication to first message
    c7ba:	66 e9       	ldi	r22, 0x96	; 150
    c7bc:	74 e1       	ldi	r23, 0x14	; 20
    c7be:	ce 01       	movw	r24, r28
    c7c0:	0e 94 42 62 	call	0xc484	; 0xc484 <ReservoirModule_Web::sendCommand(void*)>
b:\Gbox420\Gbox420\Gbox420_Mega_Main\build\sketch\src\Modules_Web/ReservoirModule_Web.cpp:108
  sendCommand(&ReservoirModuleCommand1ToSend); ///< Module specific Command - Response exchange
    c7c4:	69 eb       	ldi	r22, 0xB9	; 185
    c7c6:	74 e1       	ldi	r23, 0x14	; 20
    c7c8:	ce 01       	movw	r24, r28
    c7ca:	0e 94 42 62 	call	0xc484	; 0xc484 <ReservoirModule_Web::sendCommand(void*)>
b:\Gbox420\Gbox420\Gbox420_Mega_Main\build\sketch\src\Modules_Web/ReservoirModule_Web.cpp:109
  sendCommand(&ReservoirCommand1ToSend);       ///< Command - Response exchange
    c7ce:	63 eb       	ldi	r22, 0xB3	; 179
    c7d0:	74 e1       	ldi	r23, 0x14	; 20
    c7d2:	ce 01       	movw	r24, r28
    c7d4:	0e 94 42 62 	call	0xc484	; 0xc484 <ReservoirModule_Web::sendCommand(void*)>
b:\Gbox420\Gbox420\Gbox420_Mega_Main\build\sketch\src\Modules_Web/ReservoirModule_Web.cpp:110
  if (*(Parent->SerialReportWireless) && *Debug)
    c7d8:	ea 85       	ldd	r30, Y+10	; 0x0a
    c7da:	fb 85       	ldd	r31, Y+11	; 0x0b
    c7dc:	a0 81       	ld	r26, Z
    c7de:	b1 81       	ldd	r27, Z+1	; 0x01
    c7e0:	52 97       	sbiw	r26, 0x12	; 18
    c7e2:	8d 91       	ld	r24, X+
    c7e4:	9c 91       	ld	r25, X
    c7e6:	e8 0f       	add	r30, r24
    c7e8:	f9 1f       	adc	r31, r25
    c7ea:	00 88       	ldd	r0, Z+16	; 0x10
    c7ec:	f1 89       	ldd	r31, Z+17	; 0x11
    c7ee:	e0 2d       	mov	r30, r0
    c7f0:	80 81       	ld	r24, Z
    c7f2:	88 23       	and	r24, r24
    c7f4:	79 f0       	breq	.+30     	; 0xc814 <ReservoirModule_Web::sendMessages()+0x64>
b:\Gbox420\Gbox420\Gbox420_Mega_Main\build\sketch\src\Modules_Web/ReservoirModule_Web.cpp:110 (discriminator 1)
    c7f6:	e0 91 b7 0c 	lds	r30, 0x0CB7	; 0x800cb7 <Debug>
    c7fa:	f0 91 b8 0c 	lds	r31, 0x0CB8	; 0x800cb8 <Debug+0x1>
    c7fe:	80 81       	ld	r24, Z
    c800:	88 23       	and	r24, r24
    c802:	41 f0       	breq	.+16     	; 0xc814 <ReservoirModule_Web::sendMessages()+0x64>
b:\Gbox420\Gbox420\Gbox420_Mega_Main\build\sketch\src\Modules_Web/ReservoirModule_Web.cpp:112
  {
    logToSerials(F("Message exchange finished"), true, 1);
    c804:	41 e0       	ldi	r20, 0x01	; 1
    c806:	61 e0       	ldi	r22, 0x01	; 1
    c808:	85 e8       	ldi	r24, 0x85	; 133
    c80a:	9a e1       	ldi	r25, 0x1A	; 26
b:\Gbox420\Gbox420\Gbox420_Mega_Main\build\sketch\src\Modules_Web/ReservoirModule_Web.cpp:114
  }
}
    c80c:	df 91       	pop	r29
    c80e:	cf 91       	pop	r28
b:\Gbox420\Gbox420\Gbox420_Mega_Main\build\sketch\src\Modules_Web/ReservoirModule_Web.cpp:112
  sendCommand(&ReservoirResetToSend);          ///< special Command, resets communication to first message
  sendCommand(&ReservoirModuleCommand1ToSend); ///< Module specific Command - Response exchange
  sendCommand(&ReservoirCommand1ToSend);       ///< Command - Response exchange
  if (*(Parent->SerialReportWireless) && *Debug)
  {
    logToSerials(F("Message exchange finished"), true, 1);
    c810:	0c 94 85 16 	jmp	0x2d0a	; 0x2d0a <logToSerials(__FlashStringHelper const*, bool, unsigned char)>
b:\Gbox420\Gbox420\Gbox420_Mega_Main\build\sketch\src\Modules_Web/ReservoirModule_Web.cpp:114
  }
}
    c814:	df 91       	pop	r29
    c816:	cf 91       	pop	r28
    c818:	08 95       	ret

0000c81a <ReservoirModule_Web::refresh_Sec()>:
_ZN19ReservoirModule_Web11refresh_SecEv():
b:\Gbox420\Gbox420\Gbox420_Mega_Main\build\sketch\src\Modules_Web/ReservoirModule_Web.cpp:86
    return true;
  }
}

void ReservoirModule_Web::refresh_Sec()
{
    c81a:	cf 93       	push	r28
    c81c:	df 93       	push	r29
    c81e:	ec 01       	movw	r28, r24
b:\Gbox420\Gbox420\Gbox420_Mega_Main\build\sketch\src\Modules_Web/ReservoirModule_Web.cpp:87
  Common::refresh_Sec();
    c820:	e8 81       	ld	r30, Y
    c822:	f9 81       	ldd	r31, Y+1	; 0x01
    c824:	36 97       	sbiw	r30, 0x06	; 6
    c826:	80 81       	ld	r24, Z
    c828:	91 81       	ldd	r25, Z+1	; 0x01
    c82a:	8c 0f       	add	r24, r28
    c82c:	9d 1f       	adc	r25, r29
    c82e:	0e 94 b8 18 	call	0x3170	; 0x3170 <Common::refresh_Sec()>
b:\Gbox420\Gbox420\Gbox420_Mega_Main\build\sketch\src\Modules_Web/ReservoirModule_Web.cpp:88
  if (SyncRequested)
    c832:	8a 81       	ldd	r24, Y+2	; 0x02
    c834:	88 23       	and	r24, r24
    c836:	31 f0       	breq	.+12     	; 0xc844 <ReservoirModule_Web::refresh_Sec()+0x2a>
b:\Gbox420\Gbox420\Gbox420_Mega_Main\build\sketch\src\Modules_Web/ReservoirModule_Web.cpp:90
  {
    SyncRequested = false;
    c838:	1a 82       	std	Y+2, r1	; 0x02
b:\Gbox420\Gbox420\Gbox420_Mega_Main\build\sketch\src\Modules_Web/ReservoirModule_Web.cpp:91
    sendMessages();
    c83a:	ce 01       	movw	r24, r28
b:\Gbox420\Gbox420\Gbox420_Mega_Main\build\sketch\src\Modules_Web/ReservoirModule_Web.cpp:93
  }
}
    c83c:	df 91       	pop	r29
    c83e:	cf 91       	pop	r28
b:\Gbox420\Gbox420\Gbox420_Mega_Main\build\sketch\src\Modules_Web/ReservoirModule_Web.cpp:91
{
  Common::refresh_Sec();
  if (SyncRequested)
  {
    SyncRequested = false;
    sendMessages();
    c840:	0c 94 d8 63 	jmp	0xc7b0	; 0xc7b0 <ReservoirModule_Web::sendMessages()>
b:\Gbox420\Gbox420\Gbox420_Mega_Main\build\sketch\src\Modules_Web/ReservoirModule_Web.cpp:93
  }
}
    c844:	df 91       	pop	r29
    c846:	cf 91       	pop	r28
    c848:	08 95       	ret

0000c84a <virtual thunk to ReservoirModule_Web::refresh_Sec()>:
_ZTv0_n8_N19ReservoirModule_Web11refresh_SecEv():
    c84a:	dc 01       	movw	r26, r24
    c84c:	ed 91       	ld	r30, X+
    c84e:	fc 91       	ld	r31, X
    c850:	38 97       	sbiw	r30, 0x08	; 8
    c852:	20 81       	ld	r18, Z
    c854:	31 81       	ldd	r19, Z+1	; 0x01
    c856:	82 0f       	add	r24, r18
    c858:	93 1f       	adc	r25, r19
    c85a:	0c 94 0d 64 	jmp	0xc81a	; 0xc81a <ReservoirModule_Web::refresh_Sec()>

0000c85e <ReservoirModule_Web::refresh_FiveSec()>:
_ZN19ReservoirModule_Web15refresh_FiveSecEv():
b:\Gbox420\Gbox420\Gbox420_Mega_Main\build\sketch\src\Modules_Web/ReservoirModule_Web.cpp:96

void ReservoirModule_Web::refresh_FiveSec()
{
    c85e:	cf 93       	push	r28
    c860:	df 93       	push	r29
    c862:	ec 01       	movw	r28, r24
b:\Gbox420\Gbox420\Gbox420_Mega_Main\build\sketch\src\Modules_Web/ReservoirModule_Web.cpp:97
  Common::refresh_FiveSec();
    c864:	e8 81       	ld	r30, Y
    c866:	f9 81       	ldd	r31, Y+1	; 0x01
    c868:	36 97       	sbiw	r30, 0x06	; 6
    c86a:	80 81       	ld	r24, Z
    c86c:	91 81       	ldd	r25, Z+1	; 0x01
    c86e:	8c 0f       	add	r24, r28
    c870:	9d 1f       	adc	r25, r29
    c872:	0e 94 cd 18 	call	0x319a	; 0x319a <Common::refresh_FiveSec()>
b:\Gbox420\Gbox420\Gbox420_Mega_Main\build\sketch\src\Modules_Web/ReservoirModule_Web.cpp:98
  sendMessages();
    c876:	ce 01       	movw	r24, r28
b:\Gbox420\Gbox420\Gbox420_Mega_Main\build\sketch\src\Modules_Web/ReservoirModule_Web.cpp:99
}
    c878:	df 91       	pop	r29
    c87a:	cf 91       	pop	r28
b:\Gbox420\Gbox420\Gbox420_Mega_Main\build\sketch\src\Modules_Web/ReservoirModule_Web.cpp:98
}

void ReservoirModule_Web::refresh_FiveSec()
{
  Common::refresh_FiveSec();
  sendMessages();
    c87c:	0c 94 d8 63 	jmp	0xc7b0	; 0xc7b0 <ReservoirModule_Web::sendMessages()>

0000c880 <virtual thunk to ReservoirModule_Web::refresh_FiveSec()>:
_ZTv0_n10_N19ReservoirModule_Web15refresh_FiveSecEv():
    c880:	dc 01       	movw	r26, r24
    c882:	ed 91       	ld	r30, X+
    c884:	fc 91       	ld	r31, X
    c886:	3a 97       	sbiw	r30, 0x0a	; 10
    c888:	20 81       	ld	r18, Z
    c88a:	31 81       	ldd	r19, Z+1	; 0x01
    c88c:	82 0f       	add	r24, r18
    c88e:	93 1f       	adc	r25, r19
    c890:	0c 94 2f 64 	jmp	0xc85e	; 0xc85e <ReservoirModule_Web::refresh_FiveSec()>

0000c894 <_GLOBAL__sub_I_ReservoirModuleCommand1ToSend>:
_ZN23ReservoirCommonTemplateC4E17ReservoirMessages():
b:\gbox420\gbox420\gbox420_mega_main\build\sketch\src/wirelesscommands_reservoir.h:58
struct ReservoirCommonTemplate ///< Shared between Command and Respone packages
{
   ReservoirMessages SequenceID; ///< Commands and Responses can span across multiple 32byte packages. Packages with 0 SequenceID represent the initial attempt to exchange data
   ReservoirCommonTemplate(ReservoirMessages SequenceID)
   {
      this->SequenceID = SequenceID;
    c894:	e9 eb       	ldi	r30, 0xB9	; 185
    c896:	f4 e1       	ldi	r31, 0x14	; 20
    c898:	11 82       	std	Z+1, r1	; 0x01
    c89a:	10 82       	st	Z, r1
_ZN22ReservoirModuleCommandC4E17ReservoirMessages():
b:\gbox420\gbox420\gbox420_mega_main\build\sketch\src/wirelesscommands_reservoir.h:64
   }
};

struct ReservoirModuleCommand : ReservoirCommonTemplate ///< Max 32 bytes. Command sent by the Main module
{
   ReservoirModuleCommand(__attribute__((unused)) ReservoirMessages SequenceID) : ReservoirCommonTemplate(SequenceID) {}
    c89c:	12 82       	std	Z+2, r1	; 0x02
    c89e:	13 82       	std	Z+3, r1	; 0x03
    c8a0:	14 82       	std	Z+4, r1	; 0x04
    c8a2:	15 82       	std	Z+5, r1	; 0x05
    c8a4:	81 e0       	ldi	r24, 0x01	; 1
    c8a6:	86 83       	std	Z+6, r24	; 0x06
    c8a8:	87 83       	std	Z+7, r24	; 0x07
    c8aa:	11 86       	std	Z+9, r1	; 0x09
    c8ac:	10 86       	std	Z+8, r1	; 0x08
    c8ae:	82 87       	std	Z+10, r24	; 0x0a
    c8b0:	83 87       	std	Z+11, r24	; 0x0b
    c8b2:	84 87       	std	Z+12, r24	; 0x0c
    c8b4:	85 87       	std	Z+13, r24	; 0x0d
    c8b6:	86 87       	std	Z+14, r24	; 0x0e
_ZN23ReservoirCommonTemplateC4E17ReservoirMessages():
b:\gbox420\gbox420\gbox420_mega_main\build\sketch\src/wirelesscommands_reservoir.h:58
struct ReservoirCommonTemplate ///< Shared between Command and Respone packages
{
   ReservoirMessages SequenceID; ///< Commands and Responses can span across multiple 32byte packages. Packages with 0 SequenceID represent the initial attempt to exchange data
   ReservoirCommonTemplate(ReservoirMessages SequenceID)
   {
      this->SequenceID = SequenceID;
    c8b8:	e6 eb       	ldi	r30, 0xB6	; 182
    c8ba:	f4 e1       	ldi	r31, 0x14	; 20
    c8bc:	81 e0       	ldi	r24, 0x01	; 1
    c8be:	90 e0       	ldi	r25, 0x00	; 0
    c8c0:	91 83       	std	Z+1, r25	; 0x01
    c8c2:	80 83       	st	Z, r24
_ZN23ReservoirModuleResponseC4E17ReservoirMessages():
b:\gbox420\gbox420\gbox420_mega_main\build\sketch\src/wirelesscommands_reservoir.h:79
   bool SerialReportWireless = true;
};

struct ReservoirModuleResponse : ReservoirCommonTemplate ///< Max 32 bytes. Response sent back to the Main module
{
   ReservoirModuleResponse(__attribute__((unused)) ReservoirMessages SequenceID) : ReservoirCommonTemplate(SequenceID) {}
    c8c4:	12 82       	std	Z+2, r1	; 0x02
_ZN23ReservoirCommonTemplateC4E17ReservoirMessages():
b:\gbox420\gbox420\gbox420_mega_main\build\sketch\src/wirelesscommands_reservoir.h:58
struct ReservoirCommonTemplate ///< Shared between Command and Respone packages
{
   ReservoirMessages SequenceID; ///< Commands and Responses can span across multiple 32byte packages. Packages with 0 SequenceID represent the initial attempt to exchange data
   ReservoirCommonTemplate(ReservoirMessages SequenceID)
   {
      this->SequenceID = SequenceID;
    c8c6:	e3 eb       	ldi	r30, 0xB3	; 179
    c8c8:	f4 e1       	ldi	r31, 0x14	; 20
    c8ca:	82 e0       	ldi	r24, 0x02	; 2
    c8cc:	90 e0       	ldi	r25, 0x00	; 0
    c8ce:	91 83       	std	Z+1, r25	; 0x01
    c8d0:	80 83       	st	Z, r24
_ZN16ReservoirCommandC4E17ReservoirMessages():
b:\gbox420\gbox420\gbox420_mega_main\build\sketch\src/wirelesscommands_reservoir.h:86
   bool Status = false;
};

struct ReservoirCommand : ReservoirCommonTemplate ///< Max 32 bytes. Command sent by the Main module
{
   ReservoirCommand(__attribute__((unused)) ReservoirMessages SequenceID) : ReservoirCommonTemplate(SequenceID) {}
    c8d2:	12 82       	std	Z+2, r1	; 0x02
_ZN23ReservoirCommonTemplateC4E17ReservoirMessages():
b:\gbox420\gbox420\gbox420_mega_main\build\sketch\src/wirelesscommands_reservoir.h:58
struct ReservoirCommonTemplate ///< Shared between Command and Respone packages
{
   ReservoirMessages SequenceID; ///< Commands and Responses can span across multiple 32byte packages. Packages with 0 SequenceID represent the initial attempt to exchange data
   ReservoirCommonTemplate(ReservoirMessages SequenceID)
   {
      this->SequenceID = SequenceID;
    c8d4:	e8 e9       	ldi	r30, 0x98	; 152
    c8d6:	f4 e1       	ldi	r31, 0x14	; 20
    c8d8:	83 e0       	ldi	r24, 0x03	; 3
    c8da:	90 e0       	ldi	r25, 0x00	; 0
    c8dc:	91 83       	std	Z+1, r25	; 0x01
    c8de:	80 83       	st	Z, r24
_ZN17ReservoirResponseC4E17ReservoirMessages():
b:\gbox420\gbox420\gbox420_mega_main\build\sketch\src/wirelesscommands_reservoir.h:93
   bool TareWeight = false;
};

struct ReservoirResponse : ReservoirCommonTemplate ///< Max 32 bytes. Response sent back to the Main module
{
   ReservoirResponse(__attribute__((unused)) ReservoirMessages SequenceID) : ReservoirCommonTemplate(SequenceID) {}
    c8e0:	12 82       	std	Z+2, r1	; 0x02
    c8e2:	13 82       	std	Z+3, r1	; 0x03
    c8e4:	14 82       	std	Z+4, r1	; 0x04
    c8e6:	15 82       	std	Z+5, r1	; 0x05
    c8e8:	16 82       	std	Z+6, r1	; 0x06
    c8ea:	17 82       	std	Z+7, r1	; 0x07
    c8ec:	10 86       	std	Z+8, r1	; 0x08
    c8ee:	11 86       	std	Z+9, r1	; 0x09
    c8f0:	12 86       	std	Z+10, r1	; 0x0a
    c8f2:	13 86       	std	Z+11, r1	; 0x0b
    c8f4:	14 86       	std	Z+12, r1	; 0x0c
    c8f6:	15 86       	std	Z+13, r1	; 0x0d
    c8f8:	16 86       	std	Z+14, r1	; 0x0e
    c8fa:	17 86       	std	Z+15, r1	; 0x0f
    c8fc:	10 8a       	std	Z+16, r1	; 0x10
    c8fe:	11 8a       	std	Z+17, r1	; 0x11
    c900:	12 8a       	std	Z+18, r1	; 0x12
    c902:	13 8a       	std	Z+19, r1	; 0x13
    c904:	14 8a       	std	Z+20, r1	; 0x14
    c906:	15 8a       	std	Z+21, r1	; 0x15
    c908:	16 8a       	std	Z+22, r1	; 0x16
    c90a:	17 8a       	std	Z+23, r1	; 0x17
    c90c:	10 8e       	std	Z+24, r1	; 0x18
    c90e:	11 8e       	std	Z+25, r1	; 0x19
    c910:	12 8e       	std	Z+26, r1	; 0x1a
_ZN23ReservoirCommonTemplateC4E17ReservoirMessages():
b:\gbox420\gbox420\gbox420_mega_main\build\sketch\src/wirelesscommands_reservoir.h:58
struct ReservoirCommonTemplate ///< Shared between Command and Respone packages
{
   ReservoirMessages SequenceID; ///< Commands and Responses can span across multiple 32byte packages. Packages with 0 SequenceID represent the initial attempt to exchange data
   ReservoirCommonTemplate(ReservoirMessages SequenceID)
   {
      this->SequenceID = SequenceID;
    c912:	84 e0       	ldi	r24, 0x04	; 4
    c914:	90 e0       	ldi	r25, 0x00	; 0
    c916:	90 93 97 14 	sts	0x1497, r25	; 0x801497 <ReservoirResetToSend+0x1>
    c91a:	80 93 96 14 	sts	0x1496, r24	; 0x801496 <ReservoirResetToSend>
_GLOBAL__sub_I_ReservoirModuleCommand1ToSend():
b:\Gbox420\Gbox420\Gbox420_Mega_Main\build\sketch\src\Modules_Web/ReservoirModule_Web.cpp:220
  ReservoirModuleCommand1ToSend.SerialReportDate = *(Parent->SerialReportDate);
  ReservoirModuleCommand1ToSend.SerialReportMemory = *(Parent->SerialReportMemory);
  ReservoirModuleCommand1ToSend.SerialReportJSONFriendly = *(Parent->SerialReportJSONFriendly);
  ReservoirModuleCommand1ToSend.SerialReportJSON = *(Parent->SerialReportJSON);
  ReservoirModuleCommand1ToSend.SerialReportWireless = *(Parent->SerialReportWireless);
    c91e:	08 95       	ret

0000c920 <ReservoirModule_Web::report(bool)>:
_ZN19ReservoirModule_Web6reportEb():
b:\Gbox420\Gbox420\Gbox420_Mega_Main\build\sketch\src\Modules_Web/ReservoirModule_Web.cpp:30

/**
* @brief Report the current state to the serial console
*/
void ReservoirModule_Web::report(bool FriendlyFormat)
{
    c920:	0f 93       	push	r16
    c922:	1f 93       	push	r17
    c924:	cf 93       	push	r28
    c926:	8c 01       	movw	r16, r24
    c928:	c6 2f       	mov	r28, r22
b:\Gbox420\Gbox420\Gbox420_Mega_Main\build\sketch\src\Modules_Web/ReservoirModule_Web.cpp:31
  Common::report(true); ///< Adds "NAME":{  to the LongMessage buffer. The curly bracket { needs to be closed at the end
    c92a:	dc 01       	movw	r26, r24
    c92c:	ed 91       	ld	r30, X+
    c92e:	fc 91       	ld	r31, X
    c930:	36 97       	sbiw	r30, 0x06	; 6
    c932:	80 81       	ld	r24, Z
    c934:	91 81       	ldd	r25, Z+1	; 0x01
    c936:	61 e0       	ldi	r22, 0x01	; 1
    c938:	80 0f       	add	r24, r16
    c93a:	91 1f       	adc	r25, r17
    c93c:	0e 94 0e 19 	call	0x321c	; 0x321c <Common::report(bool)>
b:\Gbox420\Gbox420\Gbox420_Mega_Main\build\sketch\src\Modules_Web/ReservoirModule_Web.cpp:32
  strcat_P(LongMessage, (PGM_P)F("\"S\":\""));
    c940:	60 e0       	ldi	r22, 0x00	; 0
    c942:	7b e1       	ldi	r23, 0x1B	; 27
    c944:	81 e3       	ldi	r24, 0x31	; 49
    c946:	9e e0       	ldi	r25, 0x0E	; 14
    c948:	0e 94 da 94 	call	0x129b4	; 0x129b4 <strcat_P>
b:\Gbox420\Gbox420\Gbox420_Mega_Main\build\sketch\src\Modules_Web/ReservoirModule_Web.cpp:33
  strcat(LongMessage, FriendlyFormat ? toText_onlineStatus(OnlineStatus) : toText(OnlineStatus));
    c94c:	cc 23       	and	r28, r28
    c94e:	09 f4       	brne	.+2      	; 0xc952 <ReservoirModule_Web::report(bool)+0x32>
    c950:	9d c0       	rjmp	.+314    	; 0xca8c <ReservoirModule_Web::report(bool)+0x16c>
b:\Gbox420\Gbox420\Gbox420_Mega_Main\build\sketch\src\Modules_Web/ReservoirModule_Web.cpp:33 (discriminator 1)
    c952:	f8 01       	movw	r30, r16
    c954:	83 81       	ldd	r24, Z+3	; 0x03
    c956:	0e 94 03 35 	call	0x6a06	; 0x6a06 <toText_onlineStatus(bool)>
b:\Gbox420\Gbox420\Gbox420_Mega_Main\build\sketch\src\Modules_Web/ReservoirModule_Web.cpp:33 (discriminator 4)
    c95a:	bc 01       	movw	r22, r24
    c95c:	81 e3       	ldi	r24, 0x31	; 49
    c95e:	9e e0       	ldi	r25, 0x0E	; 14
    c960:	0e 94 23 95 	call	0x12a46	; 0x12a46 <strcat>
b:\Gbox420\Gbox420\Gbox420_Mega_Main\build\sketch\src\Modules_Web/ReservoirModule_Web.cpp:34 (discriminator 4)
  strcat_P(LongMessage, (PGM_P)F("\",\"P\":\""));
    c964:	68 ef       	ldi	r22, 0xF8	; 248
    c966:	7a e1       	ldi	r23, 0x1A	; 26
    c968:	81 e3       	ldi	r24, 0x31	; 49
    c96a:	9e e0       	ldi	r25, 0x0E	; 14
    c96c:	0e 94 da 94 	call	0x129b4	; 0x129b4 <strcat_P>
b:\Gbox420\Gbox420\Gbox420_Mega_Main\build\sketch\src\Modules_Web/ReservoirModule_Web.cpp:35 (discriminator 4)
  strcat(LongMessage, toText(ReservoirResponse1Received.PH));
    c970:	60 91 9b 14 	lds	r22, 0x149B	; 0x80149b <ReservoirResponse1Received+0x3>
    c974:	70 91 9c 14 	lds	r23, 0x149C	; 0x80149c <ReservoirResponse1Received+0x4>
    c978:	80 91 9d 14 	lds	r24, 0x149D	; 0x80149d <ReservoirResponse1Received+0x5>
    c97c:	90 91 9e 14 	lds	r25, 0x149E	; 0x80149e <ReservoirResponse1Received+0x6>
    c980:	0e 94 a5 33 	call	0x674a	; 0x674a <toText(float)>
    c984:	bc 01       	movw	r22, r24
    c986:	81 e3       	ldi	r24, 0x31	; 49
    c988:	9e e0       	ldi	r25, 0x0E	; 14
    c98a:	0e 94 23 95 	call	0x12a46	; 0x12a46 <strcat>
b:\Gbox420\Gbox420\Gbox420_Mega_Main\build\sketch\src\Modules_Web/ReservoirModule_Web.cpp:36 (discriminator 4)
  strcat_P(LongMessage, (PGM_P)F("\",\"T\":\""));
    c98e:	60 ef       	ldi	r22, 0xF0	; 240
    c990:	7a e1       	ldi	r23, 0x1A	; 26
    c992:	81 e3       	ldi	r24, 0x31	; 49
    c994:	9e e0       	ldi	r25, 0x0E	; 14
    c996:	0e 94 da 94 	call	0x129b4	; 0x129b4 <strcat_P>
    c99a:	60 91 9f 14 	lds	r22, 0x149F	; 0x80149f <ReservoirResponse1Received+0x7>
    c99e:	70 91 a0 14 	lds	r23, 0x14A0	; 0x8014a0 <ReservoirResponse1Received+0x8>
    c9a2:	80 91 a1 14 	lds	r24, 0x14A1	; 0x8014a1 <ReservoirResponse1Received+0x9>
    c9a6:	90 91 a2 14 	lds	r25, 0x14A2	; 0x8014a2 <ReservoirResponse1Received+0xa>
b:\Gbox420\Gbox420\Gbox420_Mega_Main\build\sketch\src\Modules_Web/ReservoirModule_Web.cpp:37 (discriminator 4)
  strcat(LongMessage, FriendlyFormat ? toText_TDS(ReservoirResponse1Received.TDS) : toText(ReservoirResponse1Received.TDS));
    c9aa:	cc 23       	and	r28, r28
    c9ac:	09 f4       	brne	.+2      	; 0xc9b0 <ReservoirModule_Web::report(bool)+0x90>
    c9ae:	75 c0       	rjmp	.+234    	; 0xca9a <ReservoirModule_Web::report(bool)+0x17a>
b:\Gbox420\Gbox420\Gbox420_Mega_Main\build\sketch\src\Modules_Web/ReservoirModule_Web.cpp:37 (discriminator 1)
    c9b0:	0e 94 cb 34 	call	0x6996	; 0x6996 <toText_TDS(float)>
b:\Gbox420\Gbox420\Gbox420_Mega_Main\build\sketch\src\Modules_Web/ReservoirModule_Web.cpp:37 (discriminator 4)
    c9b4:	bc 01       	movw	r22, r24
    c9b6:	81 e3       	ldi	r24, 0x31	; 49
    c9b8:	9e e0       	ldi	r25, 0x0E	; 14
    c9ba:	0e 94 23 95 	call	0x12a46	; 0x12a46 <strcat>
b:\Gbox420\Gbox420\Gbox420_Mega_Main\build\sketch\src\Modules_Web/ReservoirModule_Web.cpp:38 (discriminator 4)
  strcat_P(LongMessage, (PGM_P)F("\",\"W\":\""));
    c9be:	68 ee       	ldi	r22, 0xE8	; 232
    c9c0:	7a e1       	ldi	r23, 0x1A	; 26
    c9c2:	81 e3       	ldi	r24, 0x31	; 49
    c9c4:	9e e0       	ldi	r25, 0x0E	; 14
    c9c6:	0e 94 da 94 	call	0x129b4	; 0x129b4 <strcat_P>
    c9ca:	60 91 a3 14 	lds	r22, 0x14A3	; 0x8014a3 <ReservoirResponse1Received+0xb>
    c9ce:	70 91 a4 14 	lds	r23, 0x14A4	; 0x8014a4 <ReservoirResponse1Received+0xc>
    c9d2:	80 91 a5 14 	lds	r24, 0x14A5	; 0x8014a5 <ReservoirResponse1Received+0xd>
    c9d6:	90 91 a6 14 	lds	r25, 0x14A6	; 0x8014a6 <ReservoirResponse1Received+0xe>
b:\Gbox420\Gbox420\Gbox420_Mega_Main\build\sketch\src\Modules_Web/ReservoirModule_Web.cpp:39 (discriminator 4)
  strcat(LongMessage, FriendlyFormat ? toText_weight(ReservoirResponse1Received.Weight) : toText(ReservoirResponse1Received.Weight));
    c9da:	cc 23       	and	r28, r28
    c9dc:	09 f4       	brne	.+2      	; 0xc9e0 <ReservoirModule_Web::report(bool)+0xc0>
    c9de:	60 c0       	rjmp	.+192    	; 0xcaa0 <ReservoirModule_Web::report(bool)+0x180>
b:\Gbox420\Gbox420\Gbox420_Mega_Main\build\sketch\src\Modules_Web/ReservoirModule_Web.cpp:39 (discriminator 1)
    c9e0:	0e 94 8e 34 	call	0x691c	; 0x691c <toText_weight(float)>
b:\Gbox420\Gbox420\Gbox420_Mega_Main\build\sketch\src\Modules_Web/ReservoirModule_Web.cpp:39 (discriminator 4)
    c9e4:	bc 01       	movw	r22, r24
    c9e6:	81 e3       	ldi	r24, 0x31	; 49
    c9e8:	9e e0       	ldi	r25, 0x0E	; 14
    c9ea:	0e 94 23 95 	call	0x12a46	; 0x12a46 <strcat>
b:\Gbox420\Gbox420\Gbox420_Mega_Main\build\sketch\src\Modules_Web/ReservoirModule_Web.cpp:40 (discriminator 4)
  strcat_P(LongMessage, (PGM_P)F("\",\"WT\":\""));
    c9ee:	6f ed       	ldi	r22, 0xDF	; 223
    c9f0:	7a e1       	ldi	r23, 0x1A	; 26
    c9f2:	81 e3       	ldi	r24, 0x31	; 49
    c9f4:	9e e0       	ldi	r25, 0x0E	; 14
    c9f6:	0e 94 da 94 	call	0x129b4	; 0x129b4 <strcat_P>
    c9fa:	60 91 a7 14 	lds	r22, 0x14A7	; 0x8014a7 <ReservoirResponse1Received+0xf>
    c9fe:	70 91 a8 14 	lds	r23, 0x14A8	; 0x8014a8 <ReservoirResponse1Received+0x10>
    ca02:	80 91 a9 14 	lds	r24, 0x14A9	; 0x8014a9 <ReservoirResponse1Received+0x11>
    ca06:	90 91 aa 14 	lds	r25, 0x14AA	; 0x8014aa <ReservoirResponse1Received+0x12>
b:\Gbox420\Gbox420\Gbox420_Mega_Main\build\sketch\src\Modules_Web/ReservoirModule_Web.cpp:41 (discriminator 4)
  strcat(LongMessage, FriendlyFormat ? toText_temp(ReservoirResponse1Received.WaterTemperature) : toText(ReservoirResponse1Received.WaterTemperature));
    ca0a:	cc 23       	and	r28, r28
    ca0c:	09 f4       	brne	.+2      	; 0xca10 <ReservoirModule_Web::report(bool)+0xf0>
    ca0e:	4b c0       	rjmp	.+150    	; 0xcaa6 <ReservoirModule_Web::report(bool)+0x186>
b:\Gbox420\Gbox420\Gbox420_Mega_Main\build\sketch\src\Modules_Web/ReservoirModule_Web.cpp:41 (discriminator 1)
    ca10:	0e 94 52 34 	call	0x68a4	; 0x68a4 <toText_temp(float)>
b:\Gbox420\Gbox420\Gbox420_Mega_Main\build\sketch\src\Modules_Web/ReservoirModule_Web.cpp:41 (discriminator 4)
    ca14:	bc 01       	movw	r22, r24
    ca16:	81 e3       	ldi	r24, 0x31	; 49
    ca18:	9e e0       	ldi	r25, 0x0E	; 14
    ca1a:	0e 94 23 95 	call	0x12a46	; 0x12a46 <strcat>
b:\Gbox420\Gbox420\Gbox420_Mega_Main\build\sketch\src\Modules_Web/ReservoirModule_Web.cpp:42 (discriminator 4)
  strcat_P(LongMessage, (PGM_P)F("\",\"AT\":\""));
    ca1e:	66 ed       	ldi	r22, 0xD6	; 214
    ca20:	7a e1       	ldi	r23, 0x1A	; 26
    ca22:	81 e3       	ldi	r24, 0x31	; 49
    ca24:	9e e0       	ldi	r25, 0x0E	; 14
    ca26:	0e 94 da 94 	call	0x129b4	; 0x129b4 <strcat_P>
    ca2a:	60 91 ab 14 	lds	r22, 0x14AB	; 0x8014ab <ReservoirResponse1Received+0x13>
    ca2e:	70 91 ac 14 	lds	r23, 0x14AC	; 0x8014ac <ReservoirResponse1Received+0x14>
    ca32:	80 91 ad 14 	lds	r24, 0x14AD	; 0x8014ad <ReservoirResponse1Received+0x15>
    ca36:	90 91 ae 14 	lds	r25, 0x14AE	; 0x8014ae <ReservoirResponse1Received+0x16>
b:\Gbox420\Gbox420\Gbox420_Mega_Main\build\sketch\src\Modules_Web/ReservoirModule_Web.cpp:43 (discriminator 4)
  strcat(LongMessage, FriendlyFormat ? toText_temp(ReservoirResponse1Received.AirTemperature) : toText(ReservoirResponse1Received.AirTemperature));
    ca3a:	cc 23       	and	r28, r28
    ca3c:	b9 f1       	breq	.+110    	; 0xcaac <ReservoirModule_Web::report(bool)+0x18c>
b:\Gbox420\Gbox420\Gbox420_Mega_Main\build\sketch\src\Modules_Web/ReservoirModule_Web.cpp:43 (discriminator 1)
    ca3e:	0e 94 52 34 	call	0x68a4	; 0x68a4 <toText_temp(float)>
b:\Gbox420\Gbox420\Gbox420_Mega_Main\build\sketch\src\Modules_Web/ReservoirModule_Web.cpp:43 (discriminator 4)
    ca42:	bc 01       	movw	r22, r24
    ca44:	81 e3       	ldi	r24, 0x31	; 49
    ca46:	9e e0       	ldi	r25, 0x0E	; 14
    ca48:	0e 94 23 95 	call	0x12a46	; 0x12a46 <strcat>
b:\Gbox420\Gbox420\Gbox420_Mega_Main\build\sketch\src\Modules_Web/ReservoirModule_Web.cpp:44 (discriminator 4)
  strcat_P(LongMessage, (PGM_P)F("\",\"H\":\""));
    ca4c:	6e ec       	ldi	r22, 0xCE	; 206
    ca4e:	7a e1       	ldi	r23, 0x1A	; 26
    ca50:	81 e3       	ldi	r24, 0x31	; 49
    ca52:	9e e0       	ldi	r25, 0x0E	; 14
    ca54:	0e 94 da 94 	call	0x129b4	; 0x129b4 <strcat_P>
    ca58:	60 91 af 14 	lds	r22, 0x14AF	; 0x8014af <ReservoirResponse1Received+0x17>
    ca5c:	70 91 b0 14 	lds	r23, 0x14B0	; 0x8014b0 <ReservoirResponse1Received+0x18>
    ca60:	80 91 b1 14 	lds	r24, 0x14B1	; 0x8014b1 <ReservoirResponse1Received+0x19>
    ca64:	90 91 b2 14 	lds	r25, 0x14B2	; 0x8014b2 <ReservoirResponse1Received+0x1a>
b:\Gbox420\Gbox420\Gbox420_Mega_Main\build\sketch\src\Modules_Web/ReservoirModule_Web.cpp:45 (discriminator 4)
  strcat(LongMessage, FriendlyFormat ? toText_percentage(ReservoirResponse1Received.Humidity) : toText(ReservoirResponse1Received.Humidity));
    ca68:	cc 23       	and	r28, r28
    ca6a:	19 f1       	breq	.+70     	; 0xcab2 <ReservoirModule_Web::report(bool)+0x192>
b:\Gbox420\Gbox420\Gbox420_Mega_Main\build\sketch\src\Modules_Web/ReservoirModule_Web.cpp:45 (discriminator 1)
    ca6c:	0e 94 ac 34 	call	0x6958	; 0x6958 <toText_percentage(float)>
b:\Gbox420\Gbox420\Gbox420_Mega_Main\build\sketch\src\Modules_Web/ReservoirModule_Web.cpp:45 (discriminator 4)
    ca70:	bc 01       	movw	r22, r24
    ca72:	81 e3       	ldi	r24, 0x31	; 49
    ca74:	9e e0       	ldi	r25, 0x0E	; 14
    ca76:	0e 94 23 95 	call	0x12a46	; 0x12a46 <strcat>
b:\Gbox420\Gbox420\Gbox420_Mega_Main\build\sketch\src\Modules_Web/ReservoirModule_Web.cpp:46 (discriminator 4)
  strcat_P(LongMessage, (PGM_P)F("\"}")); ///< closing the curly bracket at the end of the JSON
    ca7a:	6b ec       	ldi	r22, 0xCB	; 203
    ca7c:	7a e1       	ldi	r23, 0x1A	; 26
    ca7e:	81 e3       	ldi	r24, 0x31	; 49
    ca80:	9e e0       	ldi	r25, 0x0E	; 14
b:\Gbox420\Gbox420\Gbox420_Mega_Main\build\sketch\src\Modules_Web/ReservoirModule_Web.cpp:47 (discriminator 4)
}
    ca82:	cf 91       	pop	r28
    ca84:	1f 91       	pop	r17
    ca86:	0f 91       	pop	r16
b:\Gbox420\Gbox420\Gbox420_Mega_Main\build\sketch\src\Modules_Web/ReservoirModule_Web.cpp:46 (discriminator 4)
  strcat(LongMessage, FriendlyFormat ? toText_temp(ReservoirResponse1Received.WaterTemperature) : toText(ReservoirResponse1Received.WaterTemperature));
  strcat_P(LongMessage, (PGM_P)F("\",\"AT\":\""));
  strcat(LongMessage, FriendlyFormat ? toText_temp(ReservoirResponse1Received.AirTemperature) : toText(ReservoirResponse1Received.AirTemperature));
  strcat_P(LongMessage, (PGM_P)F("\",\"H\":\""));
  strcat(LongMessage, FriendlyFormat ? toText_percentage(ReservoirResponse1Received.Humidity) : toText(ReservoirResponse1Received.Humidity));
  strcat_P(LongMessage, (PGM_P)F("\"}")); ///< closing the curly bracket at the end of the JSON
    ca88:	0c 94 da 94 	jmp	0x129b4	; 0x129b4 <strcat_P>
b:\Gbox420\Gbox420\Gbox420_Mega_Main\build\sketch\src\Modules_Web/ReservoirModule_Web.cpp:33 (discriminator 2)
*/
void ReservoirModule_Web::report(bool FriendlyFormat)
{
  Common::report(true); ///< Adds "NAME":{  to the LongMessage buffer. The curly bracket { needs to be closed at the end
  strcat_P(LongMessage, (PGM_P)F("\"S\":\""));
  strcat(LongMessage, FriendlyFormat ? toText_onlineStatus(OnlineStatus) : toText(OnlineStatus));
    ca8c:	d8 01       	movw	r26, r16
    ca8e:	13 96       	adiw	r26, 0x03	; 3
    ca90:	8c 91       	ld	r24, X
    ca92:	90 e0       	ldi	r25, 0x00	; 0
    ca94:	0e 94 95 33 	call	0x672a	; 0x672a <toText(int)>
    ca98:	60 cf       	rjmp	.-320    	; 0xc95a <ReservoirModule_Web::report(bool)+0x3a>
b:\Gbox420\Gbox420\Gbox420_Mega_Main\build\sketch\src\Modules_Web/ReservoirModule_Web.cpp:37 (discriminator 2)
  strcat_P(LongMessage, (PGM_P)F("\",\"P\":\""));
  strcat(LongMessage, toText(ReservoirResponse1Received.PH));
  strcat_P(LongMessage, (PGM_P)F("\",\"T\":\""));
  strcat(LongMessage, FriendlyFormat ? toText_TDS(ReservoirResponse1Received.TDS) : toText(ReservoirResponse1Received.TDS));
    ca9a:	0e 94 a5 33 	call	0x674a	; 0x674a <toText(float)>
    ca9e:	8a cf       	rjmp	.-236    	; 0xc9b4 <ReservoirModule_Web::report(bool)+0x94>
b:\Gbox420\Gbox420\Gbox420_Mega_Main\build\sketch\src\Modules_Web/ReservoirModule_Web.cpp:39 (discriminator 2)
  strcat_P(LongMessage, (PGM_P)F("\",\"W\":\""));
  strcat(LongMessage, FriendlyFormat ? toText_weight(ReservoirResponse1Received.Weight) : toText(ReservoirResponse1Received.Weight));
    caa0:	0e 94 a5 33 	call	0x674a	; 0x674a <toText(float)>
    caa4:	9f cf       	rjmp	.-194    	; 0xc9e4 <ReservoirModule_Web::report(bool)+0xc4>
b:\Gbox420\Gbox420\Gbox420_Mega_Main\build\sketch\src\Modules_Web/ReservoirModule_Web.cpp:41 (discriminator 2)
  strcat_P(LongMessage, (PGM_P)F("\",\"WT\":\""));
  strcat(LongMessage, FriendlyFormat ? toText_temp(ReservoirResponse1Received.WaterTemperature) : toText(ReservoirResponse1Received.WaterTemperature));
    caa6:	0e 94 a5 33 	call	0x674a	; 0x674a <toText(float)>
    caaa:	b4 cf       	rjmp	.-152    	; 0xca14 <ReservoirModule_Web::report(bool)+0xf4>
b:\Gbox420\Gbox420\Gbox420_Mega_Main\build\sketch\src\Modules_Web/ReservoirModule_Web.cpp:43 (discriminator 2)
  strcat_P(LongMessage, (PGM_P)F("\",\"AT\":\""));
  strcat(LongMessage, FriendlyFormat ? toText_temp(ReservoirResponse1Received.AirTemperature) : toText(ReservoirResponse1Received.AirTemperature));
    caac:	0e 94 a5 33 	call	0x674a	; 0x674a <toText(float)>
    cab0:	c8 cf       	rjmp	.-112    	; 0xca42 <ReservoirModule_Web::report(bool)+0x122>
b:\Gbox420\Gbox420\Gbox420_Mega_Main\build\sketch\src\Modules_Web/ReservoirModule_Web.cpp:45 (discriminator 2)
  strcat_P(LongMessage, (PGM_P)F("\",\"H\":\""));
  strcat(LongMessage, FriendlyFormat ? toText_percentage(ReservoirResponse1Received.Humidity) : toText(ReservoirResponse1Received.Humidity));
    cab2:	0e 94 a5 33 	call	0x674a	; 0x674a <toText(float)>
    cab6:	dc cf       	rjmp	.-72     	; 0xca70 <ReservoirModule_Web::report(bool)+0x150>

0000cab8 <virtual thunk to ReservoirModule_Web::report(bool)>:
_ZTv0_n6_N19ReservoirModule_Web6reportEb():
    cab8:	dc 01       	movw	r26, r24
    caba:	ed 91       	ld	r30, X+
    cabc:	fc 91       	ld	r31, X
    cabe:	36 97       	sbiw	r30, 0x06	; 6
    cac0:	20 81       	ld	r18, Z
    cac2:	31 81       	ldd	r19, Z+1	; 0x01
    cac4:	82 0f       	add	r24, r18
    cac6:	93 1f       	adc	r25, r19
    cac8:	0c 94 90 64 	jmp	0xc920	; 0xc920 <ReservoirModule_Web::report(bool)>

0000cacc <SPIClass::transfer(unsigned char)>:
_ZN8SPIClass8transferEh():
C:\Program Files (x86)\Arduino\libraries\RF24-master/RF24.cpp:1606
/****************************************************************************/

void RF24::disableCRC(void)
{
    config_reg &= ~_BV(EN_CRC);
    write_register(NRF_CONFIG, config_reg);
    cacc:	8e bd       	out	0x2e, r24	; 46
    cace:	00 00       	nop
    cad0:	0d b4       	in	r0, 0x2d	; 45
    cad2:	07 fe       	sbrs	r0, 7
    cad4:	fd cf       	rjmp	.-6      	; 0xcad0 <SPIClass::transfer(unsigned char)+0x4>
    cad6:	8e b5       	in	r24, 0x2e	; 46
    cad8:	08 95       	ret

0000cada <RF24::csn(bool)>:
_ZN4RF243csnEb():
    cada:	cf 93       	push	r28
    cadc:	df 93       	push	r29
    cade:	ec 01       	movw	r28, r24
    cae0:	8a 81       	ldd	r24, Y+2	; 0x02
    cae2:	0e 94 c2 87 	call	0x10f84	; 0x10f84 <digitalWrite>
    cae6:	89 8d       	ldd	r24, Y+25	; 0x19
    cae8:	9a 8d       	ldd	r25, Y+26	; 0x1a
    caea:	df 91       	pop	r29
    caec:	cf 91       	pop	r28
    caee:	0c 94 d1 85 	jmp	0x10ba2	; 0x10ba2 <delayMicroseconds>

0000caf2 <RF24::ce(bool)>:
_ZN4RF242ceEb():
    caf2:	fc 01       	movw	r30, r24
    caf4:	20 81       	ld	r18, Z
    caf6:	31 81       	ldd	r19, Z+1	; 0x01
    caf8:	82 81       	ldd	r24, Z+2	; 0x02
    cafa:	93 81       	ldd	r25, Z+3	; 0x03
    cafc:	28 17       	cp	r18, r24
    cafe:	39 07       	cpc	r19, r25
    cb00:	19 f0       	breq	.+6      	; 0xcb08 <RF24::ce(bool)+0x16>
    cb02:	82 2f       	mov	r24, r18
    cb04:	0c 94 c2 87 	jmp	0x10f84	; 0x10f84 <digitalWrite>
    cb08:	08 95       	ret

0000cb0a <RF24::beginTransaction()>:
_ZN4RF2416beginTransactionEv():
    cb0a:	0f 93       	push	r16
    cb0c:	1f 93       	push	r17
    cb0e:	fc 01       	movw	r30, r24
    cb10:	04 81       	ldd	r16, Z+4	; 0x04
    cb12:	15 81       	ldd	r17, Z+5	; 0x05
    cb14:	26 81       	ldd	r18, Z+6	; 0x06
    cb16:	37 81       	ldd	r19, Z+7	; 0x07
_ZN11SPISettings17init_AlwaysInlineEmhh():
    cb18:	40 e0       	ldi	r20, 0x00	; 0
    cb1a:	52 e1       	ldi	r21, 0x12	; 18
    cb1c:	6a e7       	ldi	r22, 0x7A	; 122
    cb1e:	70 e0       	ldi	r23, 0x00	; 0
    cb20:	90 e0       	ldi	r25, 0x00	; 0
    cb22:	04 17       	cp	r16, r20
    cb24:	15 07       	cpc	r17, r21
    cb26:	26 07       	cpc	r18, r22
    cb28:	37 07       	cpc	r19, r23
    cb2a:	40 f4       	brcc	.+16     	; 0xcb3c <RF24::beginTransaction()+0x32>
    cb2c:	76 95       	lsr	r23
    cb2e:	67 95       	ror	r22
    cb30:	57 95       	ror	r21
    cb32:	47 95       	ror	r20
    cb34:	9f 5f       	subi	r25, 0xFF	; 255
    cb36:	96 30       	cpi	r25, 0x06	; 6
    cb38:	a1 f7       	brne	.-24     	; 0xcb22 <RF24::beginTransaction()+0x18>
    cb3a:	97 e0       	ldi	r25, 0x07	; 7
    cb3c:	39 2f       	mov	r19, r25
    cb3e:	30 6a       	ori	r19, 0xA0	; 160
    cb40:	36 95       	lsr	r19
    cb42:	90 95       	com	r25
    cb44:	91 70       	andi	r25, 0x01	; 1
_ZN8SPIClass16beginTransactionE11SPISettings():
    cb46:	80 91 ec 14 	lds	r24, 0x14EC	; 0x8014ec <SPIClass::interruptMode>
    cb4a:	88 23       	and	r24, r24
    cb4c:	81 f0       	breq	.+32     	; 0xcb6e <RF24::beginTransaction()+0x64>
    cb4e:	8f b7       	in	r24, 0x3f	; 63
    cb50:	f8 94       	cli
    cb52:	20 91 ec 14 	lds	r18, 0x14EC	; 0x8014ec <SPIClass::interruptMode>
    cb56:	21 30       	cpi	r18, 0x01	; 1
    cb58:	91 f4       	brne	.+36     	; 0xcb7e <RF24::beginTransaction()+0x74>
    cb5a:	2d b3       	in	r18, 0x1d	; 29
    cb5c:	20 93 ea 14 	sts	0x14EA, r18	; 0x8014ea <SPIClass::interruptSave>
    cb60:	4d b3       	in	r20, 0x1d	; 29
    cb62:	20 91 eb 14 	lds	r18, 0x14EB	; 0x8014eb <SPIClass::interruptMask>
    cb66:	20 95       	com	r18
    cb68:	24 23       	and	r18, r20
    cb6a:	2d bb       	out	0x1d, r18	; 29
    cb6c:	8f bf       	out	0x3f, r24	; 63
    cb6e:	3c bd       	out	0x2c, r19	; 44
    cb70:	9d bd       	out	0x2d, r25	; 45
_ZN4RF2416beginTransactionEv():
    cb72:	60 e0       	ldi	r22, 0x00	; 0
    cb74:	cf 01       	movw	r24, r30
    cb76:	1f 91       	pop	r17
    cb78:	0f 91       	pop	r16
    cb7a:	0c 94 6d 65 	jmp	0xcada	; 0xcada <RF24::csn(bool)>
_ZN8SPIClass16beginTransactionE11SPISettings():
    cb7e:	80 93 ea 14 	sts	0x14EA, r24	; 0x8014ea <SPIClass::interruptSave>
    cb82:	f5 cf       	rjmp	.-22     	; 0xcb6e <RF24::beginTransaction()+0x64>

0000cb84 <RF24::endTransaction()>:
_ZN4RF2414endTransactionEv():
    cb84:	61 e0       	ldi	r22, 0x01	; 1
    cb86:	0e 94 6d 65 	call	0xcada	; 0xcada <RF24::csn(bool)>
_ZN8SPIClass14endTransactionEv():
    cb8a:	80 91 ec 14 	lds	r24, 0x14EC	; 0x8014ec <SPIClass::interruptMode>
    cb8e:	88 23       	and	r24, r24
    cb90:	61 f0       	breq	.+24     	; 0xcbaa <RF24::endTransaction()+0x26>
    cb92:	9f b7       	in	r25, 0x3f	; 63
    cb94:	f8 94       	cli
    cb96:	20 91 ec 14 	lds	r18, 0x14EC	; 0x8014ec <SPIClass::interruptMode>
    cb9a:	80 91 ea 14 	lds	r24, 0x14EA	; 0x8014ea <SPIClass::interruptSave>
    cb9e:	21 30       	cpi	r18, 0x01	; 1
    cba0:	19 f4       	brne	.+6      	; 0xcba8 <RF24::endTransaction()+0x24>
    cba2:	8d bb       	out	0x1d, r24	; 29
    cba4:	9f bf       	out	0x3f, r25	; 63
    cba6:	08 95       	ret
    cba8:	8f bf       	out	0x3f, r24	; 63
_ZN4RF2414endTransactionEv():
    cbaa:	08 95       	ret

0000cbac <RF24::write_register(unsigned char, unsigned char, bool) [clone .part.1]>:
_ZN4RF2414write_registerEhhb():
    cbac:	1f 93       	push	r17
    cbae:	cf 93       	push	r28
    cbb0:	df 93       	push	r29
    cbb2:	ec 01       	movw	r28, r24
    cbb4:	16 2f       	mov	r17, r22
    cbb6:	0e 94 85 65 	call	0xcb0a	; 0xcb0a <RF24::beginTransaction()>
    cbba:	81 2f       	mov	r24, r17
    cbbc:	80 62       	ori	r24, 0x20	; 32
    cbbe:	0e 94 66 65 	call	0xcacc	; 0xcacc <SPIClass::transfer(unsigned char)>
    cbc2:	88 87       	std	Y+8, r24	; 0x08
    cbc4:	ce 01       	movw	r24, r28
    cbc6:	df 91       	pop	r29
    cbc8:	cf 91       	pop	r28
    cbca:	1f 91       	pop	r17
    cbcc:	0c 94 c2 65 	jmp	0xcb84	; 0xcb84 <RF24::endTransaction()>

0000cbd0 <RF24::read_register(unsigned char, unsigned char*, unsigned char)>:
_ZN4RF2413read_registerEhPhh():
    cbd0:	df 92       	push	r13
    cbd2:	ef 92       	push	r14
    cbd4:	ff 92       	push	r15
    cbd6:	0f 93       	push	r16
    cbd8:	1f 93       	push	r17
    cbda:	cf 93       	push	r28
    cbdc:	df 93       	push	r29
    cbde:	8c 01       	movw	r16, r24
    cbe0:	c6 2f       	mov	r28, r22
    cbe2:	d4 2e       	mov	r13, r20
    cbe4:	e5 2e       	mov	r14, r21
    cbe6:	f2 2e       	mov	r15, r18
    cbe8:	0e 94 85 65 	call	0xcb0a	; 0xcb0a <RF24::beginTransaction()>
    cbec:	8c 2f       	mov	r24, r28
    cbee:	0e 94 66 65 	call	0xcacc	; 0xcacc <SPIClass::transfer(unsigned char)>
    cbf2:	f8 01       	movw	r30, r16
    cbf4:	80 87       	std	Z+8, r24	; 0x08
    cbf6:	cd 2d       	mov	r28, r13
    cbf8:	de 2d       	mov	r29, r14
    cbfa:	fa 94       	dec	r15
    cbfc:	ff ef       	ldi	r31, 0xFF	; 255
    cbfe:	ff 16       	cp	r15, r31
    cc00:	29 f0       	breq	.+10     	; 0xcc0c <RF24::read_register(unsigned char, unsigned char*, unsigned char)+0x3c>
    cc02:	8f ef       	ldi	r24, 0xFF	; 255
    cc04:	0e 94 66 65 	call	0xcacc	; 0xcacc <SPIClass::transfer(unsigned char)>
    cc08:	89 93       	st	Y+, r24
    cc0a:	f7 cf       	rjmp	.-18     	; 0xcbfa <RF24::read_register(unsigned char, unsigned char*, unsigned char)+0x2a>
    cc0c:	c8 01       	movw	r24, r16
    cc0e:	df 91       	pop	r29
    cc10:	cf 91       	pop	r28
    cc12:	1f 91       	pop	r17
    cc14:	0f 91       	pop	r16
    cc16:	ff 90       	pop	r15
    cc18:	ef 90       	pop	r14
    cc1a:	df 90       	pop	r13
    cc1c:	0c 94 c2 65 	jmp	0xcb84	; 0xcb84 <RF24::endTransaction()>

0000cc20 <RF24::read_register(unsigned char)>:
_ZN4RF2413read_registerEh():
    cc20:	1f 93       	push	r17
    cc22:	cf 93       	push	r28
    cc24:	df 93       	push	r29
    cc26:	ec 01       	movw	r28, r24
    cc28:	16 2f       	mov	r17, r22
    cc2a:	0e 94 85 65 	call	0xcb0a	; 0xcb0a <RF24::beginTransaction()>
    cc2e:	81 2f       	mov	r24, r17
    cc30:	0e 94 66 65 	call	0xcacc	; 0xcacc <SPIClass::transfer(unsigned char)>
    cc34:	88 87       	std	Y+8, r24	; 0x08
    cc36:	8f ef       	ldi	r24, 0xFF	; 255
    cc38:	0e 94 66 65 	call	0xcacc	; 0xcacc <SPIClass::transfer(unsigned char)>
    cc3c:	18 2f       	mov	r17, r24
    cc3e:	ce 01       	movw	r24, r28
    cc40:	0e 94 c2 65 	call	0xcb84	; 0xcb84 <RF24::endTransaction()>
    cc44:	81 2f       	mov	r24, r17
    cc46:	df 91       	pop	r29
    cc48:	cf 91       	pop	r28
    cc4a:	1f 91       	pop	r17
    cc4c:	08 95       	ret

0000cc4e <RF24::write_register(unsigned char, unsigned char const*, unsigned char)>:
_ZN4RF2414write_registerEhPKhh():
    cc4e:	df 92       	push	r13
    cc50:	ef 92       	push	r14
    cc52:	ff 92       	push	r15
    cc54:	0f 93       	push	r16
    cc56:	1f 93       	push	r17
    cc58:	cf 93       	push	r28
    cc5a:	df 93       	push	r29
    cc5c:	8c 01       	movw	r16, r24
    cc5e:	c6 2f       	mov	r28, r22
    cc60:	d4 2e       	mov	r13, r20
    cc62:	e5 2e       	mov	r14, r21
    cc64:	f2 2e       	mov	r15, r18
    cc66:	0e 94 85 65 	call	0xcb0a	; 0xcb0a <RF24::beginTransaction()>
    cc6a:	8c 2f       	mov	r24, r28
    cc6c:	80 62       	ori	r24, 0x20	; 32
    cc6e:	0e 94 66 65 	call	0xcacc	; 0xcacc <SPIClass::transfer(unsigned char)>
    cc72:	f8 01       	movw	r30, r16
    cc74:	80 87       	std	Z+8, r24	; 0x08
    cc76:	cd 2d       	mov	r28, r13
    cc78:	de 2d       	mov	r29, r14
    cc7a:	fa 94       	dec	r15
    cc7c:	ff ef       	ldi	r31, 0xFF	; 255
    cc7e:	ff 16       	cp	r15, r31
    cc80:	21 f0       	breq	.+8      	; 0xcc8a <RF24::write_register(unsigned char, unsigned char const*, unsigned char)+0x3c>
    cc82:	89 91       	ld	r24, Y+
    cc84:	0e 94 66 65 	call	0xcacc	; 0xcacc <SPIClass::transfer(unsigned char)>
    cc88:	f8 cf       	rjmp	.-16     	; 0xcc7a <RF24::write_register(unsigned char, unsigned char const*, unsigned char)+0x2c>
    cc8a:	c8 01       	movw	r24, r16
    cc8c:	df 91       	pop	r29
    cc8e:	cf 91       	pop	r28
    cc90:	1f 91       	pop	r17
    cc92:	0f 91       	pop	r16
    cc94:	ff 90       	pop	r15
    cc96:	ef 90       	pop	r14
    cc98:	df 90       	pop	r13
    cc9a:	0c 94 c2 65 	jmp	0xcb84	; 0xcb84 <RF24::endTransaction()>

0000cc9e <RF24::write_register(unsigned char, unsigned char, bool)>:
_ZN4RF2414write_registerEhhb():
    cc9e:	0f 93       	push	r16
    cca0:	1f 93       	push	r17
    cca2:	cf 93       	push	r28
    cca4:	df 93       	push	r29
    cca6:	22 23       	and	r18, r18
    cca8:	31 f0       	breq	.+12     	; 0xccb6 <RF24::write_register(unsigned char, unsigned char, bool)+0x18>
    ccaa:	df 91       	pop	r29
    ccac:	cf 91       	pop	r28
    ccae:	1f 91       	pop	r17
    ccb0:	0f 91       	pop	r16
    ccb2:	0c 94 d6 65 	jmp	0xcbac	; 0xcbac <RF24::write_register(unsigned char, unsigned char, bool) [clone .part.1]>
    ccb6:	04 2f       	mov	r16, r20
    ccb8:	16 2f       	mov	r17, r22
    ccba:	ec 01       	movw	r28, r24
    ccbc:	0e 94 85 65 	call	0xcb0a	; 0xcb0a <RF24::beginTransaction()>
    ccc0:	81 2f       	mov	r24, r17
    ccc2:	80 62       	ori	r24, 0x20	; 32
    ccc4:	0e 94 66 65 	call	0xcacc	; 0xcacc <SPIClass::transfer(unsigned char)>
    ccc8:	88 87       	std	Y+8, r24	; 0x08
    ccca:	80 2f       	mov	r24, r16
    cccc:	0e 94 66 65 	call	0xcacc	; 0xcacc <SPIClass::transfer(unsigned char)>
    ccd0:	ce 01       	movw	r24, r28
    ccd2:	df 91       	pop	r29
    ccd4:	cf 91       	pop	r28
    ccd6:	1f 91       	pop	r17
    ccd8:	0f 91       	pop	r16
    ccda:	0c 94 c2 65 	jmp	0xcb84	; 0xcb84 <RF24::endTransaction()>

0000ccde <RF24::write_payload(void const*, unsigned char, unsigned char)>:
_ZN4RF2413write_payloadEPKvhh():
    ccde:	cf 92       	push	r12
    cce0:	df 92       	push	r13
    cce2:	ef 92       	push	r14
    cce4:	ff 92       	push	r15
    cce6:	0f 93       	push	r16
    cce8:	1f 93       	push	r17
    ccea:	cf 93       	push	r28
    ccec:	df 93       	push	r29
    ccee:	8c 01       	movw	r16, r24
    ccf0:	6b 01       	movw	r12, r22
    ccf2:	f2 2e       	mov	r15, r18
    ccf4:	fc 01       	movw	r30, r24
    ccf6:	82 85       	ldd	r24, Z+10	; 0x0a
    ccf8:	81 11       	cpse	r24, r1
    ccfa:	17 c0       	rjmp	.+46     	; 0xcd2a <RF24::write_payload(void const*, unsigned char, unsigned char)+0x4c>
    ccfc:	c1 85       	ldd	r28, Z+9	; 0x09
    ccfe:	dc 2f       	mov	r29, r28
    cd00:	4c 17       	cp	r20, r28
    cd02:	08 f4       	brcc	.+2      	; 0xcd06 <RF24::write_payload(void const*, unsigned char, unsigned char)+0x28>
    cd04:	d4 2f       	mov	r29, r20
    cd06:	cd 1b       	sub	r28, r29
    cd08:	c8 01       	movw	r24, r16
    cd0a:	0e 94 85 65 	call	0xcb0a	; 0xcb0a <RF24::beginTransaction()>
    cd0e:	8f 2d       	mov	r24, r15
    cd10:	0e 94 66 65 	call	0xcacc	; 0xcacc <SPIClass::transfer(unsigned char)>
    cd14:	f8 01       	movw	r30, r16
    cd16:	80 87       	std	Z+8, r24	; 0x08
    cd18:	76 01       	movw	r14, r12
    cd1a:	d1 50       	subi	r29, 0x01	; 1
    cd1c:	70 f0       	brcs	.+28     	; 0xcd3a <RF24::write_payload(void const*, unsigned char, unsigned char)+0x5c>
    cd1e:	f7 01       	movw	r30, r14
    cd20:	81 91       	ld	r24, Z+
    cd22:	7f 01       	movw	r14, r30
    cd24:	0e 94 66 65 	call	0xcacc	; 0xcacc <SPIClass::transfer(unsigned char)>
    cd28:	f8 cf       	rjmp	.-16     	; 0xcd1a <RF24::write_payload(void const*, unsigned char, unsigned char)+0x3c>
    cd2a:	c1 e0       	ldi	r28, 0x01	; 1
    cd2c:	41 11       	cpse	r20, r1
    cd2e:	c0 e0       	ldi	r28, 0x00	; 0
    cd30:	d4 2f       	mov	r29, r20
    cd32:	41 32       	cpi	r20, 0x21	; 33
    cd34:	48 f3       	brcs	.-46     	; 0xcd08 <RF24::write_payload(void const*, unsigned char, unsigned char)+0x2a>
    cd36:	d0 e2       	ldi	r29, 0x20	; 32
    cd38:	e7 cf       	rjmp	.-50     	; 0xcd08 <RF24::write_payload(void const*, unsigned char, unsigned char)+0x2a>
    cd3a:	c1 50       	subi	r28, 0x01	; 1
    cd3c:	20 f0       	brcs	.+8      	; 0xcd46 <RF24::write_payload(void const*, unsigned char, unsigned char)+0x68>
    cd3e:	80 e0       	ldi	r24, 0x00	; 0
    cd40:	0e 94 66 65 	call	0xcacc	; 0xcacc <SPIClass::transfer(unsigned char)>
    cd44:	fa cf       	rjmp	.-12     	; 0xcd3a <RF24::write_payload(void const*, unsigned char, unsigned char)+0x5c>
    cd46:	c8 01       	movw	r24, r16
    cd48:	df 91       	pop	r29
    cd4a:	cf 91       	pop	r28
    cd4c:	1f 91       	pop	r17
    cd4e:	0f 91       	pop	r16
    cd50:	ff 90       	pop	r15
    cd52:	ef 90       	pop	r14
    cd54:	df 90       	pop	r13
    cd56:	cf 90       	pop	r12
    cd58:	0c 94 c2 65 	jmp	0xcb84	; 0xcb84 <RF24::endTransaction()>

0000cd5c <RF24::read_payload(void*, unsigned char)>:
_ZN4RF2412read_payloadEPvh():
    cd5c:	cf 92       	push	r12
    cd5e:	df 92       	push	r13
    cd60:	ef 92       	push	r14
    cd62:	ff 92       	push	r15
    cd64:	0f 93       	push	r16
    cd66:	1f 93       	push	r17
    cd68:	cf 93       	push	r28
    cd6a:	df 93       	push	r29
    cd6c:	8c 01       	movw	r16, r24
    cd6e:	6b 01       	movw	r12, r22
    cd70:	fc 01       	movw	r30, r24
    cd72:	82 85       	ldd	r24, Z+10	; 0x0a
    cd74:	81 11       	cpse	r24, r1
    cd76:	18 c0       	rjmp	.+48     	; 0xcda8 <RF24::read_payload(void*, unsigned char)+0x4c>
    cd78:	c1 85       	ldd	r28, Z+9	; 0x09
    cd7a:	dc 2f       	mov	r29, r28
    cd7c:	4c 17       	cp	r20, r28
    cd7e:	08 f4       	brcc	.+2      	; 0xcd82 <RF24::read_payload(void*, unsigned char)+0x26>
    cd80:	d4 2f       	mov	r29, r20
    cd82:	cd 1b       	sub	r28, r29
    cd84:	c8 01       	movw	r24, r16
    cd86:	0e 94 85 65 	call	0xcb0a	; 0xcb0a <RF24::beginTransaction()>
    cd8a:	81 e6       	ldi	r24, 0x61	; 97
    cd8c:	0e 94 66 65 	call	0xcacc	; 0xcacc <SPIClass::transfer(unsigned char)>
    cd90:	f8 01       	movw	r30, r16
    cd92:	80 87       	std	Z+8, r24	; 0x08
    cd94:	76 01       	movw	r14, r12
    cd96:	d1 50       	subi	r29, 0x01	; 1
    cd98:	68 f0       	brcs	.+26     	; 0xcdb4 <RF24::read_payload(void*, unsigned char)+0x58>
    cd9a:	8f ef       	ldi	r24, 0xFF	; 255
    cd9c:	0e 94 66 65 	call	0xcacc	; 0xcacc <SPIClass::transfer(unsigned char)>
    cda0:	f7 01       	movw	r30, r14
    cda2:	81 93       	st	Z+, r24
    cda4:	7f 01       	movw	r14, r30
    cda6:	f7 cf       	rjmp	.-18     	; 0xcd96 <RF24::read_payload(void*, unsigned char)+0x3a>
    cda8:	d4 2f       	mov	r29, r20
    cdaa:	41 32       	cpi	r20, 0x21	; 33
    cdac:	08 f0       	brcs	.+2      	; 0xcdb0 <RF24::read_payload(void*, unsigned char)+0x54>
    cdae:	d0 e2       	ldi	r29, 0x20	; 32
    cdb0:	c0 e0       	ldi	r28, 0x00	; 0
    cdb2:	e8 cf       	rjmp	.-48     	; 0xcd84 <RF24::read_payload(void*, unsigned char)+0x28>
    cdb4:	c1 50       	subi	r28, 0x01	; 1
    cdb6:	20 f0       	brcs	.+8      	; 0xcdc0 <RF24::read_payload(void*, unsigned char)+0x64>
    cdb8:	8f ef       	ldi	r24, 0xFF	; 255
    cdba:	0e 94 66 65 	call	0xcacc	; 0xcacc <SPIClass::transfer(unsigned char)>
    cdbe:	fa cf       	rjmp	.-12     	; 0xcdb4 <RF24::read_payload(void*, unsigned char)+0x58>
    cdc0:	c8 01       	movw	r24, r16
    cdc2:	df 91       	pop	r29
    cdc4:	cf 91       	pop	r28
    cdc6:	1f 91       	pop	r17
    cdc8:	0f 91       	pop	r16
    cdca:	ff 90       	pop	r15
    cdcc:	ef 90       	pop	r14
    cdce:	df 90       	pop	r13
    cdd0:	cf 90       	pop	r12
    cdd2:	0c 94 c2 65 	jmp	0xcb84	; 0xcb84 <RF24::endTransaction()>

0000cdd6 <RF24::flush_rx()>:
_ZN4RF248flush_rxEv():
    cdd6:	cf 93       	push	r28
    cdd8:	df 93       	push	r29
    cdda:	ec 01       	movw	r28, r24
_ZN4RF2414write_registerEhhb():
    cddc:	62 ee       	ldi	r22, 0xE2	; 226
    cdde:	0e 94 d6 65 	call	0xcbac	; 0xcbac <RF24::write_register(unsigned char, unsigned char, bool) [clone .part.1]>
_ZN4RF248flush_rxEv():
    cde2:	88 85       	ldd	r24, Y+8	; 0x08
    cde4:	df 91       	pop	r29
    cde6:	cf 91       	pop	r28
    cde8:	08 95       	ret

0000cdea <RF24::flush_tx()>:
_ZN4RF248flush_txEv():
    cdea:	cf 93       	push	r28
    cdec:	df 93       	push	r29
    cdee:	ec 01       	movw	r28, r24
_ZN4RF2414write_registerEhhb():
    cdf0:	61 ee       	ldi	r22, 0xE1	; 225
    cdf2:	0e 94 d6 65 	call	0xcbac	; 0xcbac <RF24::write_register(unsigned char, unsigned char, bool) [clone .part.1]>
_ZN4RF248flush_txEv():
    cdf6:	88 85       	ldd	r24, Y+8	; 0x08
    cdf8:	df 91       	pop	r29
    cdfa:	cf 91       	pop	r28
    cdfc:	08 95       	ret

0000cdfe <RF24::get_status()>:
_ZN4RF2410get_statusEv():
    cdfe:	cf 93       	push	r28
    ce00:	df 93       	push	r29
    ce02:	ec 01       	movw	r28, r24
_ZN4RF2414write_registerEhhb():
    ce04:	6f ef       	ldi	r22, 0xFF	; 255
    ce06:	0e 94 d6 65 	call	0xcbac	; 0xcbac <RF24::write_register(unsigned char, unsigned char, bool) [clone .part.1]>
_ZN4RF2410get_statusEv():
    ce0a:	88 85       	ldd	r24, Y+8	; 0x08
    ce0c:	df 91       	pop	r29
    ce0e:	cf 91       	pop	r28
    ce10:	08 95       	ret

0000ce12 <RF24::print_byte_register(char const*, unsigned char, unsigned char)>:
_ZN4RF2419print_byte_registerEPKchh():
    ce12:	cf 92       	push	r12
    ce14:	df 92       	push	r13
    ce16:	ff 92       	push	r15
    ce18:	0f 93       	push	r16
    ce1a:	1f 93       	push	r17
    ce1c:	cf 93       	push	r28
    ce1e:	df 93       	push	r29
    ce20:	6c 01       	movw	r12, r24
    ce22:	c4 2f       	mov	r28, r20
    ce24:	d2 2f       	mov	r29, r18
    ce26:	7f 93       	push	r23
    ce28:	6f 93       	push	r22
    ce2a:	83 e2       	ldi	r24, 0x23	; 35
    ce2c:	9e e1       	ldi	r25, 0x1E	; 30
    ce2e:	9f 93       	push	r25
    ce30:	8f 93       	push	r24
    ce32:	0e 94 da 95 	call	0x12bb4	; 0x12bb4 <printf_P>
    ce36:	dc 0f       	add	r29, r28
    ce38:	0f 90       	pop	r0
    ce3a:	0f 90       	pop	r0
    ce3c:	0f 90       	pop	r0
    ce3e:	0f 90       	pop	r0
    ce40:	0b e1       	ldi	r16, 0x1B	; 27
    ce42:	1e e1       	ldi	r17, 0x1E	; 30
    ce44:	cd 17       	cp	r28, r29
    ce46:	99 f0       	breq	.+38     	; 0xce6e <RF24::print_byte_register(char const*, unsigned char, unsigned char)+0x5c>
    ce48:	ff 24       	eor	r15, r15
    ce4a:	f3 94       	inc	r15
    ce4c:	fc 0e       	add	r15, r28
    ce4e:	6c 2f       	mov	r22, r28
    ce50:	c6 01       	movw	r24, r12
    ce52:	0e 94 10 66 	call	0xcc20	; 0xcc20 <RF24::read_register(unsigned char)>
    ce56:	1f 92       	push	r1
    ce58:	8f 93       	push	r24
    ce5a:	1f 93       	push	r17
    ce5c:	0f 93       	push	r16
    ce5e:	0e 94 da 95 	call	0x12bb4	; 0x12bb4 <printf_P>
    ce62:	0f 90       	pop	r0
    ce64:	0f 90       	pop	r0
    ce66:	0f 90       	pop	r0
    ce68:	0f 90       	pop	r0
    ce6a:	cf 2d       	mov	r28, r15
    ce6c:	eb cf       	rjmp	.-42     	; 0xce44 <RF24::print_byte_register(char const*, unsigned char, unsigned char)+0x32>
    ce6e:	88 e1       	ldi	r24, 0x18	; 24
    ce70:	9e e1       	ldi	r25, 0x1E	; 30
    ce72:	9f 93       	push	r25
    ce74:	8f 93       	push	r24
    ce76:	0e 94 da 95 	call	0x12bb4	; 0x12bb4 <printf_P>
    ce7a:	0f 90       	pop	r0
    ce7c:	0f 90       	pop	r0
    ce7e:	df 91       	pop	r29
    ce80:	cf 91       	pop	r28
    ce82:	1f 91       	pop	r17
    ce84:	0f 91       	pop	r16
    ce86:	ff 90       	pop	r15
    ce88:	df 90       	pop	r13
    ce8a:	cf 90       	pop	r12
    ce8c:	08 95       	ret

0000ce8e <RF24::print_address_register(char const*, unsigned char, unsigned char)>:
_ZN4RF2422print_address_registerEPKchh():
    ce8e:	2f 92       	push	r2
    ce90:	3f 92       	push	r3
    ce92:	4f 92       	push	r4
    ce94:	5f 92       	push	r5
    ce96:	6f 92       	push	r6
    ce98:	7f 92       	push	r7
    ce9a:	8f 92       	push	r8
    ce9c:	9f 92       	push	r9
    ce9e:	af 92       	push	r10
    cea0:	bf 92       	push	r11
    cea2:	cf 92       	push	r12
    cea4:	df 92       	push	r13
    cea6:	ef 92       	push	r14
    cea8:	ff 92       	push	r15
    ceaa:	0f 93       	push	r16
    ceac:	1f 93       	push	r17
    ceae:	cf 93       	push	r28
    ceb0:	df 93       	push	r29
    ceb2:	1f 92       	push	r1
    ceb4:	cd b7       	in	r28, 0x3d	; 61
    ceb6:	de b7       	in	r29, 0x3e	; 62
    ceb8:	6c 01       	movw	r12, r24
    ceba:	24 2e       	mov	r2, r20
    cebc:	32 2e       	mov	r3, r18
    cebe:	4d b6       	in	r4, 0x3d	; 61
    cec0:	5e b6       	in	r5, 0x3e	; 62
    cec2:	7f 93       	push	r23
    cec4:	6f 93       	push	r22
    cec6:	83 e1       	ldi	r24, 0x13	; 19
    cec8:	9e e1       	ldi	r25, 0x1E	; 30
    ceca:	9f 93       	push	r25
    cecc:	8f 93       	push	r24
    cece:	0e 94 da 95 	call	0x12bb4	; 0x12bb4 <printf_P>
    ced2:	32 0c       	add	r3, r2
    ced4:	0f 90       	pop	r0
    ced6:	0f 90       	pop	r0
    ced8:	0f 90       	pop	r0
    ceda:	0f 90       	pop	r0
    cedc:	8f e0       	ldi	r24, 0x0F	; 15
    cede:	a8 2e       	mov	r10, r24
    cee0:	8e e1       	ldi	r24, 0x1E	; 30
    cee2:	b8 2e       	mov	r11, r24
    cee4:	9a e0       	ldi	r25, 0x0A	; 10
    cee6:	89 2e       	mov	r8, r25
    cee8:	9e e1       	ldi	r25, 0x1E	; 30
    ceea:	99 2e       	mov	r9, r25
    ceec:	23 14       	cp	r2, r3
    ceee:	e9 f1       	breq	.+122    	; 0xcf6a <RF24::print_address_register(char const*, unsigned char, unsigned char)+0xdc>
    cef0:	6d b6       	in	r6, 0x3d	; 61
    cef2:	7e b6       	in	r7, 0x3e	; 62
    cef4:	f6 01       	movw	r30, r12
    cef6:	21 89       	ldd	r18, Z+17	; 0x11
    cef8:	02 2f       	mov	r16, r18
    cefa:	10 e0       	ldi	r17, 0x00	; 0
    cefc:	8d b7       	in	r24, 0x3d	; 61
    cefe:	9e b7       	in	r25, 0x3e	; 62
    cf00:	80 1b       	sub	r24, r16
    cf02:	91 0b       	sbc	r25, r17
    cf04:	0f b6       	in	r0, 0x3f	; 63
    cf06:	f8 94       	cli
    cf08:	9e bf       	out	0x3e, r25	; 62
    cf0a:	0f be       	out	0x3f, r0	; 63
    cf0c:	8d bf       	out	0x3d, r24	; 61
    cf0e:	ed b7       	in	r30, 0x3d	; 61
    cf10:	fe b7       	in	r31, 0x3e	; 62
    cf12:	31 96       	adiw	r30, 0x01	; 1
    cf14:	7f 01       	movw	r14, r30
    cf16:	f1 e0       	ldi	r31, 0x01	; 1
    cf18:	f2 0d       	add	r31, r2
    cf1a:	f9 83       	std	Y+1, r31	; 0x01
    cf1c:	62 2d       	mov	r22, r2
    cf1e:	6f 71       	andi	r22, 0x1F	; 31
    cf20:	a7 01       	movw	r20, r14
    cf22:	c6 01       	movw	r24, r12
    cf24:	0e 94 e8 65 	call	0xcbd0	; 0xcbd0 <RF24::read_register(unsigned char, unsigned char*, unsigned char)>
    cf28:	bf 92       	push	r11
    cf2a:	af 92       	push	r10
    cf2c:	0e 94 da 95 	call	0x12bb4	; 0x12bb4 <printf_P>
    cf30:	0e 0d       	add	r16, r14
    cf32:	1f 1d       	adc	r17, r15
    cf34:	0f 90       	pop	r0
    cf36:	0f 90       	pop	r0
    cf38:	01 50       	subi	r16, 0x01	; 1
    cf3a:	11 09       	sbc	r17, r1
    cf3c:	0e 15       	cp	r16, r14
    cf3e:	1f 05       	cpc	r17, r15
    cf40:	68 f0       	brcs	.+26     	; 0xcf5c <RF24::print_address_register(char const*, unsigned char, unsigned char)+0xce>
    cf42:	f8 01       	movw	r30, r16
    cf44:	80 81       	ld	r24, Z
    cf46:	1f 92       	push	r1
    cf48:	8f 93       	push	r24
    cf4a:	9f 92       	push	r9
    cf4c:	8f 92       	push	r8
    cf4e:	0e 94 da 95 	call	0x12bb4	; 0x12bb4 <printf_P>
    cf52:	0f 90       	pop	r0
    cf54:	0f 90       	pop	r0
    cf56:	0f 90       	pop	r0
    cf58:	0f 90       	pop	r0
    cf5a:	ee cf       	rjmp	.-36     	; 0xcf38 <RF24::print_address_register(char const*, unsigned char, unsigned char)+0xaa>
    cf5c:	0f b6       	in	r0, 0x3f	; 63
    cf5e:	f8 94       	cli
    cf60:	7e be       	out	0x3e, r7	; 62
    cf62:	0f be       	out	0x3f, r0	; 63
    cf64:	6d be       	out	0x3d, r6	; 61
    cf66:	29 80       	ldd	r2, Y+1	; 0x01
    cf68:	c1 cf       	rjmp	.-126    	; 0xceec <RF24::print_address_register(char const*, unsigned char, unsigned char)+0x5e>
    cf6a:	87 e0       	ldi	r24, 0x07	; 7
    cf6c:	9e e1       	ldi	r25, 0x1E	; 30
    cf6e:	9f 93       	push	r25
    cf70:	8f 93       	push	r24
    cf72:	0e 94 da 95 	call	0x12bb4	; 0x12bb4 <printf_P>
    cf76:	0f 90       	pop	r0
    cf78:	0f 90       	pop	r0
    cf7a:	0f b6       	in	r0, 0x3f	; 63
    cf7c:	f8 94       	cli
    cf7e:	5e be       	out	0x3e, r5	; 62
    cf80:	0f be       	out	0x3f, r0	; 63
    cf82:	4d be       	out	0x3d, r4	; 61
    cf84:	0f 90       	pop	r0
    cf86:	df 91       	pop	r29
    cf88:	cf 91       	pop	r28
    cf8a:	1f 91       	pop	r17
    cf8c:	0f 91       	pop	r16
    cf8e:	ff 90       	pop	r15
    cf90:	ef 90       	pop	r14
    cf92:	df 90       	pop	r13
    cf94:	cf 90       	pop	r12
    cf96:	bf 90       	pop	r11
    cf98:	af 90       	pop	r10
    cf9a:	9f 90       	pop	r9
    cf9c:	8f 90       	pop	r8
    cf9e:	7f 90       	pop	r7
    cfa0:	6f 90       	pop	r6
    cfa2:	5f 90       	pop	r5
    cfa4:	4f 90       	pop	r4
    cfa6:	3f 90       	pop	r3
    cfa8:	2f 90       	pop	r2
    cfaa:	08 95       	ret

0000cfac <RF24::RF24(unsigned int, unsigned int, unsigned long)>:
_ZN4RF24C2Ejjm():
    cfac:	0f 93       	push	r16
    cfae:	1f 93       	push	r17
    cfb0:	fc 01       	movw	r30, r24
    cfb2:	71 83       	std	Z+1, r23	; 0x01
    cfb4:	60 83       	st	Z, r22
    cfb6:	53 83       	std	Z+3, r21	; 0x03
    cfb8:	42 83       	std	Z+2, r20	; 0x02
    cfba:	04 83       	std	Z+4, r16	; 0x04
    cfbc:	15 83       	std	Z+5, r17	; 0x05
    cfbe:	26 83       	std	Z+6, r18	; 0x06
    cfc0:	37 83       	std	Z+7, r19	; 0x07
    cfc2:	80 e2       	ldi	r24, 0x20	; 32
    cfc4:	81 87       	std	Z+9, r24	; 0x09
    cfc6:	81 e0       	ldi	r24, 0x01	; 1
    cfc8:	82 87       	std	Z+10, r24	; 0x0a
    cfca:	85 e0       	ldi	r24, 0x05	; 5
    cfcc:	81 8b       	std	Z+17, r24	; 0x11
    cfce:	13 8a       	std	Z+19, r1	; 0x13
    cfd0:	85 e0       	ldi	r24, 0x05	; 5
    cfd2:	90 e0       	ldi	r25, 0x00	; 0
    cfd4:	a0 e0       	ldi	r26, 0x00	; 0
    cfd6:	b0 e0       	ldi	r27, 0x00	; 0
    cfd8:	81 8f       	std	Z+25, r24	; 0x19
    cfda:	92 8f       	std	Z+26, r25	; 0x1a
    cfdc:	a3 8f       	std	Z+27, r26	; 0x1b
    cfde:	b4 8f       	std	Z+28, r27	; 0x1c
    cfe0:	14 86       	std	Z+12, r1	; 0x0c
    cfe2:	09 3b       	cpi	r16, 0xB9	; 185
    cfe4:	18 48       	sbci	r17, 0x88	; 136
    cfe6:	21 05       	cpc	r18, r1
    cfe8:	31 05       	cpc	r19, r1
    cfea:	40 f4       	brcc	.+16     	; 0xcffc <RF24::RF24(unsigned int, unsigned int, unsigned long)+0x50>
    cfec:	80 e8       	ldi	r24, 0x80	; 128
    cfee:	96 e9       	ldi	r25, 0x96	; 150
    cff0:	a8 e9       	ldi	r26, 0x98	; 152
    cff2:	b0 e0       	ldi	r27, 0x00	; 0
    cff4:	84 83       	std	Z+4, r24	; 0x04
    cff6:	95 83       	std	Z+5, r25	; 0x05
    cff8:	a6 83       	std	Z+6, r26	; 0x06
    cffa:	b7 83       	std	Z+7, r27	; 0x07
    cffc:	1f 91       	pop	r17
    cffe:	0f 91       	pop	r16
    d000:	08 95       	ret

0000d002 <RF24::setChannel(unsigned char)>:
_ZN4RF2410setChannelEh():
    d002:	46 2f       	mov	r20, r22
    d004:	6d 37       	cpi	r22, 0x7D	; 125
    d006:	08 f0       	brcs	.+2      	; 0xd00a <RF24::setChannel(unsigned char)+0x8>
    d008:	4d e7       	ldi	r20, 0x7D	; 125
    d00a:	20 e0       	ldi	r18, 0x00	; 0
    d00c:	65 e0       	ldi	r22, 0x05	; 5
    d00e:	0c 94 4f 66 	jmp	0xcc9e	; 0xcc9e <RF24::write_register(unsigned char, unsigned char, bool)>

0000d012 <RF24::getChannel()>:
_ZN4RF2410getChannelEv():
    d012:	65 e0       	ldi	r22, 0x05	; 5
    d014:	0c 94 10 66 	jmp	0xcc20	; 0xcc20 <RF24::read_register(unsigned char)>

0000d018 <RF24::setPayloadSize(unsigned char)>:
_ZN4RF2414setPayloadSizeEh():
    d018:	0f 93       	push	r16
    d01a:	1f 93       	push	r17
    d01c:	cf 93       	push	r28
    d01e:	8c 01       	movw	r16, r24
    d020:	66 23       	and	r22, r22
    d022:	a1 f0       	breq	.+40     	; 0xd04c <RF24::setPayloadSize(unsigned char)+0x34>
    d024:	61 32       	cpi	r22, 0x21	; 33
    d026:	08 f0       	brcs	.+2      	; 0xd02a <RF24::setPayloadSize(unsigned char)+0x12>
    d028:	60 e2       	ldi	r22, 0x20	; 32
    d02a:	f8 01       	movw	r30, r16
    d02c:	61 87       	std	Z+9, r22	; 0x09
    d02e:	c1 e1       	ldi	r28, 0x11	; 17
    d030:	20 e0       	ldi	r18, 0x00	; 0
    d032:	f8 01       	movw	r30, r16
    d034:	41 85       	ldd	r20, Z+9	; 0x09
    d036:	6c 2f       	mov	r22, r28
    d038:	c8 01       	movw	r24, r16
    d03a:	0e 94 4f 66 	call	0xcc9e	; 0xcc9e <RF24::write_register(unsigned char, unsigned char, bool)>
    d03e:	cf 5f       	subi	r28, 0xFF	; 255
    d040:	c7 31       	cpi	r28, 0x17	; 23
    d042:	b1 f7       	brne	.-20     	; 0xd030 <RF24::setPayloadSize(unsigned char)+0x18>
    d044:	cf 91       	pop	r28
    d046:	1f 91       	pop	r17
    d048:	0f 91       	pop	r16
    d04a:	08 95       	ret
    d04c:	61 e0       	ldi	r22, 0x01	; 1
    d04e:	ed cf       	rjmp	.-38     	; 0xd02a <RF24::setPayloadSize(unsigned char)+0x12>

0000d050 <RF24::stopListening()>:
_ZN4RF2413stopListeningEv():
    d050:	cf 93       	push	r28
    d052:	df 93       	push	r29
    d054:	ec 01       	movw	r28, r24
    d056:	60 e0       	ldi	r22, 0x00	; 0
    d058:	0e 94 79 65 	call	0xcaf2	; 0xcaf2 <RF24::ce(bool)>
    d05c:	8d 89       	ldd	r24, Y+21	; 0x15
    d05e:	9e 89       	ldd	r25, Y+22	; 0x16
    d060:	0e 94 d1 85 	call	0x10ba2	; 0x10ba2 <delayMicroseconds>
    d064:	8b 85       	ldd	r24, Y+11	; 0x0b
    d066:	88 23       	and	r24, r24
    d068:	19 f0       	breq	.+6      	; 0xd070 <RF24::stopListening()+0x20>
    d06a:	ce 01       	movw	r24, r28
    d06c:	0e 94 f5 66 	call	0xcdea	; 0xcdea <RF24::flush_tx()>
    d070:	4a 89       	ldd	r20, Y+18	; 0x12
    d072:	4e 7f       	andi	r20, 0xFE	; 254
    d074:	4a 8b       	std	Y+18, r20	; 0x12
    d076:	20 e0       	ldi	r18, 0x00	; 0
    d078:	60 e0       	ldi	r22, 0x00	; 0
    d07a:	ce 01       	movw	r24, r28
    d07c:	0e 94 4f 66 	call	0xcc9e	; 0xcc9e <RF24::write_register(unsigned char, unsigned char, bool)>
    d080:	62 e0       	ldi	r22, 0x02	; 2
    d082:	ce 01       	movw	r24, r28
    d084:	0e 94 10 66 	call	0xcc20	; 0xcc20 <RF24::read_register(unsigned char)>
    d088:	e7 e3       	ldi	r30, 0x37	; 55
    d08a:	fb e1       	ldi	r31, 0x1B	; 27
    d08c:	e4 91       	lpm	r30, Z
    d08e:	41 e0       	ldi	r20, 0x01	; 1
    d090:	50 e0       	ldi	r21, 0x00	; 0
    d092:	01 c0       	rjmp	.+2      	; 0xd096 <RF24::stopListening()+0x46>
    d094:	44 0f       	add	r20, r20
    d096:	ea 95       	dec	r30
    d098:	ea f7       	brpl	.-6      	; 0xd094 <RF24::stopListening()+0x44>
    d09a:	48 2b       	or	r20, r24
    d09c:	20 e0       	ldi	r18, 0x00	; 0
    d09e:	62 e0       	ldi	r22, 0x02	; 2
    d0a0:	ce 01       	movw	r24, r28
    d0a2:	df 91       	pop	r29
    d0a4:	cf 91       	pop	r28
    d0a6:	0c 94 4f 66 	jmp	0xcc9e	; 0xcc9e <RF24::write_register(unsigned char, unsigned char, bool)>

0000d0aa <RF24::powerUp()>:
_ZN4RF247powerUpEv():
    d0aa:	fc 01       	movw	r30, r24
    d0ac:	42 89       	ldd	r20, Z+18	; 0x12
    d0ae:	41 fd       	sbrc	r20, 1
    d0b0:	0a c0       	rjmp	.+20     	; 0xd0c6 <RF24::powerUp()+0x1c>
    d0b2:	42 60       	ori	r20, 0x02	; 2
    d0b4:	42 8b       	std	Z+18, r20	; 0x12
    d0b6:	20 e0       	ldi	r18, 0x00	; 0
    d0b8:	60 e0       	ldi	r22, 0x00	; 0
    d0ba:	0e 94 4f 66 	call	0xcc9e	; 0xcc9e <RF24::write_register(unsigned char, unsigned char, bool)>
    d0be:	88 e8       	ldi	r24, 0x88	; 136
    d0c0:	93 e1       	ldi	r25, 0x13	; 19
    d0c2:	0c 94 d1 85 	jmp	0x10ba2	; 0x10ba2 <delayMicroseconds>
    d0c6:	08 95       	ret

0000d0c8 <RF24::startFastWrite(void const*, unsigned char, bool, bool)>:
_ZN4RF2414startFastWriteEPKvhbb():
    d0c8:	0f 93       	push	r16
    d0ca:	cf 93       	push	r28
    d0cc:	df 93       	push	r29
    d0ce:	ec 01       	movw	r28, r24
    d0d0:	21 11       	cpse	r18, r1
    d0d2:	0d c0       	rjmp	.+26     	; 0xd0ee <RF24::startFastWrite(void const*, unsigned char, bool, bool)+0x26>
    d0d4:	20 ea       	ldi	r18, 0xA0	; 160
    d0d6:	ce 01       	movw	r24, r28
    d0d8:	0e 94 6f 66 	call	0xccde	; 0xccde <RF24::write_payload(void const*, unsigned char, unsigned char)>
    d0dc:	00 23       	and	r16, r16
    d0de:	49 f0       	breq	.+18     	; 0xd0f2 <RF24::startFastWrite(void const*, unsigned char, bool, bool)+0x2a>
    d0e0:	61 e0       	ldi	r22, 0x01	; 1
    d0e2:	ce 01       	movw	r24, r28
    d0e4:	df 91       	pop	r29
    d0e6:	cf 91       	pop	r28
    d0e8:	0f 91       	pop	r16
    d0ea:	0c 94 79 65 	jmp	0xcaf2	; 0xcaf2 <RF24::ce(bool)>
    d0ee:	20 eb       	ldi	r18, 0xB0	; 176
    d0f0:	f2 cf       	rjmp	.-28     	; 0xd0d6 <RF24::startFastWrite(void const*, unsigned char, bool, bool)+0xe>
    d0f2:	df 91       	pop	r29
    d0f4:	cf 91       	pop	r28
    d0f6:	0f 91       	pop	r16
    d0f8:	08 95       	ret

0000d0fa <RF24::write(void const*, unsigned char, bool)>:
_ZN4RF245writeEPKvhb():
    d0fa:	cf 92       	push	r12
    d0fc:	df 92       	push	r13
    d0fe:	ef 92       	push	r14
    d100:	ff 92       	push	r15
    d102:	0f 93       	push	r16
    d104:	cf 93       	push	r28
    d106:	df 93       	push	r29
    d108:	ec 01       	movw	r28, r24
    d10a:	01 e0       	ldi	r16, 0x01	; 1
    d10c:	0e 94 64 68 	call	0xd0c8	; 0xd0c8 <RF24::startFastWrite(void const*, unsigned char, bool, bool)>
    d110:	0e 94 67 85 	call	0x10ace	; 0x10ace <millis>
    d114:	6b 01       	movw	r12, r22
    d116:	7c 01       	movw	r14, r24
    d118:	ce 01       	movw	r24, r28
    d11a:	0e 94 ff 66 	call	0xcdfe	; 0xcdfe <RF24::get_status()>
    d11e:	80 73       	andi	r24, 0x30	; 48
    d120:	b1 f4       	brne	.+44     	; 0xd14e <RF24::write(void const*, unsigned char, bool)+0x54>
    d122:	0e 94 67 85 	call	0x10ace	; 0x10ace <millis>
    d126:	6c 19       	sub	r22, r12
    d128:	7d 09       	sbc	r23, r13
    d12a:	8e 09       	sbc	r24, r14
    d12c:	9f 09       	sbc	r25, r15
    d12e:	60 36       	cpi	r22, 0x60	; 96
    d130:	71 05       	cpc	r23, r1
    d132:	81 05       	cpc	r24, r1
    d134:	91 05       	cpc	r25, r1
    d136:	80 f3       	brcs	.-32     	; 0xd118 <RF24::write(void const*, unsigned char, bool)+0x1e>
_ZN4RF249errNotifyEv():
    d138:	81 e0       	ldi	r24, 0x01	; 1
    d13a:	8c 8b       	std	Y+20, r24	; 0x14
_ZN4RF245writeEPKvhb():
    d13c:	80 e0       	ldi	r24, 0x00	; 0
    d13e:	df 91       	pop	r29
    d140:	cf 91       	pop	r28
    d142:	0f 91       	pop	r16
    d144:	ff 90       	pop	r15
    d146:	ef 90       	pop	r14
    d148:	df 90       	pop	r13
    d14a:	cf 90       	pop	r12
    d14c:	08 95       	ret
    d14e:	60 e0       	ldi	r22, 0x00	; 0
    d150:	ce 01       	movw	r24, r28
    d152:	0e 94 79 65 	call	0xcaf2	; 0xcaf2 <RF24::ce(bool)>
    d156:	20 e0       	ldi	r18, 0x00	; 0
    d158:	40 e7       	ldi	r20, 0x70	; 112
    d15a:	67 e0       	ldi	r22, 0x07	; 7
    d15c:	ce 01       	movw	r24, r28
    d15e:	0e 94 4f 66 	call	0xcc9e	; 0xcc9e <RF24::write_register(unsigned char, unsigned char, bool)>
    d162:	88 85       	ldd	r24, Y+8	; 0x08
    d164:	84 ff       	sbrs	r24, 4
    d166:	04 c0       	rjmp	.+8      	; 0xd170 <RF24::write(void const*, unsigned char, bool)+0x76>
    d168:	ce 01       	movw	r24, r28
    d16a:	0e 94 f5 66 	call	0xcdea	; 0xcdea <RF24::flush_tx()>
    d16e:	e6 cf       	rjmp	.-52     	; 0xd13c <RF24::write(void const*, unsigned char, bool)+0x42>
    d170:	81 e0       	ldi	r24, 0x01	; 1
    d172:	e5 cf       	rjmp	.-54     	; 0xd13e <RF24::write(void const*, unsigned char, bool)+0x44>

0000d174 <RF24::write(void const*, unsigned char)>:
_ZN4RF245writeEPKvh():
    d174:	20 e0       	ldi	r18, 0x00	; 0
    d176:	0c 94 7d 68 	jmp	0xd0fa	; 0xd0fa <RF24::write(void const*, unsigned char, bool)>

0000d17a <RF24::available(unsigned char*)>:
_ZN4RF249availableEPh():
    d17a:	cf 93       	push	r28
    d17c:	df 93       	push	r29
    d17e:	eb 01       	movw	r28, r22
    d180:	0e 94 ff 66 	call	0xcdfe	; 0xcdfe <RF24::get_status()>
    d184:	90 e0       	ldi	r25, 0x00	; 0
    d186:	95 95       	asr	r25
    d188:	87 95       	ror	r24
    d18a:	87 70       	andi	r24, 0x07	; 7
    d18c:	86 30       	cpi	r24, 0x06	; 6
    d18e:	28 f4       	brcc	.+10     	; 0xd19a <RF24::available(unsigned char*)+0x20>
    d190:	20 97       	sbiw	r28, 0x00	; 0
    d192:	09 f0       	breq	.+2      	; 0xd196 <RF24::available(unsigned char*)+0x1c>
    d194:	88 83       	st	Y, r24
    d196:	81 e0       	ldi	r24, 0x01	; 1
    d198:	01 c0       	rjmp	.+2      	; 0xd19c <RF24::available(unsigned char*)+0x22>
    d19a:	80 e0       	ldi	r24, 0x00	; 0
    d19c:	df 91       	pop	r29
    d19e:	cf 91       	pop	r28
    d1a0:	08 95       	ret

0000d1a2 <RF24::available()>:
_ZN4RF249availableEv():
    d1a2:	70 e0       	ldi	r23, 0x00	; 0
    d1a4:	60 e0       	ldi	r22, 0x00	; 0
    d1a6:	0c 94 bd 68 	jmp	0xd17a	; 0xd17a <RF24::available(unsigned char*)>

0000d1aa <RF24::read(void*, unsigned char)>:
_ZN4RF244readEPvh():
    d1aa:	cf 93       	push	r28
    d1ac:	df 93       	push	r29
    d1ae:	ec 01       	movw	r28, r24
    d1b0:	0e 94 ae 66 	call	0xcd5c	; 0xcd5c <RF24::read_payload(void*, unsigned char)>
    d1b4:	20 e0       	ldi	r18, 0x00	; 0
    d1b6:	40 e4       	ldi	r20, 0x40	; 64
    d1b8:	67 e0       	ldi	r22, 0x07	; 7
    d1ba:	ce 01       	movw	r24, r28
    d1bc:	df 91       	pop	r29
    d1be:	cf 91       	pop	r28
    d1c0:	0c 94 4f 66 	jmp	0xcc9e	; 0xcc9e <RF24::write_register(unsigned char, unsigned char, bool)>

0000d1c4 <RF24::openWritingPipe(unsigned char const*)>:
_ZN4RF2415openWritingPipeEPKh():
    d1c4:	0f 93       	push	r16
    d1c6:	1f 93       	push	r17
    d1c8:	cf 93       	push	r28
    d1ca:	df 93       	push	r29
    d1cc:	ec 01       	movw	r28, r24
    d1ce:	8b 01       	movw	r16, r22
    d1d0:	29 89       	ldd	r18, Y+17	; 0x11
    d1d2:	ab 01       	movw	r20, r22
    d1d4:	6a e0       	ldi	r22, 0x0A	; 10
    d1d6:	0e 94 27 66 	call	0xcc4e	; 0xcc4e <RF24::write_register(unsigned char, unsigned char const*, unsigned char)>
    d1da:	29 89       	ldd	r18, Y+17	; 0x11
    d1dc:	a8 01       	movw	r20, r16
    d1de:	60 e1       	ldi	r22, 0x10	; 16
    d1e0:	ce 01       	movw	r24, r28
    d1e2:	df 91       	pop	r29
    d1e4:	cf 91       	pop	r28
    d1e6:	1f 91       	pop	r17
    d1e8:	0f 91       	pop	r16
    d1ea:	0c 94 27 66 	jmp	0xcc4e	; 0xcc4e <RF24::write_register(unsigned char, unsigned char const*, unsigned char)>

0000d1ee <RF24::setAddressWidth(unsigned char)>:
_ZN4RF2415setAddressWidthEh():
    d1ee:	0f 93       	push	r16
    d1f0:	1f 93       	push	r17
    d1f2:	cf 93       	push	r28
    d1f4:	8c 01       	movw	r16, r24
    d1f6:	ce ef       	ldi	r28, 0xFE	; 254
    d1f8:	c6 0f       	add	r28, r22
    d1fa:	69 f0       	breq	.+26     	; 0xd216 <RF24::setAddressWidth(unsigned char)+0x28>
    d1fc:	c3 70       	andi	r28, 0x03	; 3
    d1fe:	20 e0       	ldi	r18, 0x00	; 0
    d200:	4c 2f       	mov	r20, r28
    d202:	63 e0       	ldi	r22, 0x03	; 3
    d204:	0e 94 4f 66 	call	0xcc9e	; 0xcc9e <RF24::write_register(unsigned char, unsigned char, bool)>
    d208:	ce 5f       	subi	r28, 0xFE	; 254
    d20a:	f8 01       	movw	r30, r16
    d20c:	c1 8b       	std	Z+17, r28	; 0x11
    d20e:	cf 91       	pop	r28
    d210:	1f 91       	pop	r17
    d212:	0f 91       	pop	r16
    d214:	08 95       	ret
    d216:	20 e0       	ldi	r18, 0x00	; 0
    d218:	40 e0       	ldi	r20, 0x00	; 0
    d21a:	63 e0       	ldi	r22, 0x03	; 3
    d21c:	0e 94 4f 66 	call	0xcc9e	; 0xcc9e <RF24::write_register(unsigned char, unsigned char, bool)>
    d220:	82 e0       	ldi	r24, 0x02	; 2
    d222:	f8 01       	movw	r30, r16
    d224:	81 8b       	std	Z+17, r24	; 0x11
    d226:	f3 cf       	rjmp	.-26     	; 0xd20e <RF24::setAddressWidth(unsigned char)+0x20>

0000d228 <RF24::toggle_features()>:
_ZN4RF2415toggle_featuresEv():
    d228:	cf 93       	push	r28
    d22a:	df 93       	push	r29
    d22c:	ec 01       	movw	r28, r24
    d22e:	0e 94 85 65 	call	0xcb0a	; 0xcb0a <RF24::beginTransaction()>
    d232:	80 e5       	ldi	r24, 0x50	; 80
    d234:	0e 94 66 65 	call	0xcacc	; 0xcacc <SPIClass::transfer(unsigned char)>
    d238:	88 87       	std	Y+8, r24	; 0x08
    d23a:	83 e7       	ldi	r24, 0x73	; 115
    d23c:	0e 94 66 65 	call	0xcacc	; 0xcacc <SPIClass::transfer(unsigned char)>
    d240:	ce 01       	movw	r24, r28
    d242:	df 91       	pop	r29
    d244:	cf 91       	pop	r28
    d246:	0c 94 c2 65 	jmp	0xcb84	; 0xcb84 <RF24::endTransaction()>

0000d24a <RF24::enableDynamicPayloads()>:
_ZN4RF2421enableDynamicPayloadsEv():
    d24a:	cf 93       	push	r28
    d24c:	df 93       	push	r29
    d24e:	ec 01       	movw	r28, r24
    d250:	6d e1       	ldi	r22, 0x1D	; 29
    d252:	0e 94 10 66 	call	0xcc20	; 0xcc20 <RF24::read_register(unsigned char)>
    d256:	48 2f       	mov	r20, r24
    d258:	44 60       	ori	r20, 0x04	; 4
    d25a:	20 e0       	ldi	r18, 0x00	; 0
    d25c:	6d e1       	ldi	r22, 0x1D	; 29
    d25e:	ce 01       	movw	r24, r28
    d260:	0e 94 4f 66 	call	0xcc9e	; 0xcc9e <RF24::write_register(unsigned char, unsigned char, bool)>
    d264:	6c e1       	ldi	r22, 0x1C	; 28
    d266:	ce 01       	movw	r24, r28
    d268:	0e 94 10 66 	call	0xcc20	; 0xcc20 <RF24::read_register(unsigned char)>
    d26c:	48 2f       	mov	r20, r24
    d26e:	4f 63       	ori	r20, 0x3F	; 63
    d270:	20 e0       	ldi	r18, 0x00	; 0
    d272:	6c e1       	ldi	r22, 0x1C	; 28
    d274:	ce 01       	movw	r24, r28
    d276:	0e 94 4f 66 	call	0xcc9e	; 0xcc9e <RF24::write_register(unsigned char, unsigned char, bool)>
    d27a:	81 e0       	ldi	r24, 0x01	; 1
    d27c:	8a 87       	std	Y+10, r24	; 0x0a
    d27e:	df 91       	pop	r29
    d280:	cf 91       	pop	r28
    d282:	08 95       	ret

0000d284 <RF24::enableAckPayload()>:
_ZN4RF2416enableAckPayloadEv():
    d284:	cf 93       	push	r28
    d286:	df 93       	push	r29
    d288:	fc 01       	movw	r30, r24
    d28a:	23 85       	ldd	r18, Z+11	; 0x0b
    d28c:	21 11       	cpse	r18, r1
    d28e:	19 c0       	rjmp	.+50     	; 0xd2c2 <RF24::enableAckPayload()+0x3e>
    d290:	ec 01       	movw	r28, r24
    d292:	6d e1       	ldi	r22, 0x1D	; 29
    d294:	0e 94 10 66 	call	0xcc20	; 0xcc20 <RF24::read_register(unsigned char)>
    d298:	48 2f       	mov	r20, r24
    d29a:	46 60       	ori	r20, 0x06	; 6
    d29c:	20 e0       	ldi	r18, 0x00	; 0
    d29e:	6d e1       	ldi	r22, 0x1D	; 29
    d2a0:	ce 01       	movw	r24, r28
    d2a2:	0e 94 4f 66 	call	0xcc9e	; 0xcc9e <RF24::write_register(unsigned char, unsigned char, bool)>
    d2a6:	6c e1       	ldi	r22, 0x1C	; 28
    d2a8:	ce 01       	movw	r24, r28
    d2aa:	0e 94 10 66 	call	0xcc20	; 0xcc20 <RF24::read_register(unsigned char)>
    d2ae:	48 2f       	mov	r20, r24
    d2b0:	43 60       	ori	r20, 0x03	; 3
    d2b2:	20 e0       	ldi	r18, 0x00	; 0
    d2b4:	6c e1       	ldi	r22, 0x1C	; 28
    d2b6:	ce 01       	movw	r24, r28
    d2b8:	0e 94 4f 66 	call	0xcc9e	; 0xcc9e <RF24::write_register(unsigned char, unsigned char, bool)>
    d2bc:	81 e0       	ldi	r24, 0x01	; 1
    d2be:	8a 87       	std	Y+10, r24	; 0x0a
    d2c0:	8b 87       	std	Y+11, r24	; 0x0b
    d2c2:	df 91       	pop	r29
    d2c4:	cf 91       	pop	r28
    d2c6:	08 95       	ret

0000d2c8 <RF24::isAckPayloadAvailable()>:
_ZN4RF2421isAckPayloadAvailableEv():
    d2c8:	0c 94 d1 68 	jmp	0xd1a2	; 0xd1a2 <RF24::available()>

0000d2cc <RF24::setPALevel(unsigned char, bool)>:
_ZN4RF2410setPALevelEhb():
    d2cc:	0f 93       	push	r16
    d2ce:	1f 93       	push	r17
    d2d0:	cf 93       	push	r28
    d2d2:	df 93       	push	r29
    d2d4:	8c 01       	movw	r16, r24
    d2d6:	d6 2f       	mov	r29, r22
    d2d8:	c4 2f       	mov	r28, r20
    d2da:	66 e0       	ldi	r22, 0x06	; 6
    d2dc:	0e 94 10 66 	call	0xcc20	; 0xcc20 <RF24::read_register(unsigned char)>
    d2e0:	88 7f       	andi	r24, 0xF8	; 248
    d2e2:	d4 30       	cpi	r29, 0x04	; 4
    d2e4:	60 f0       	brcs	.+24     	; 0xd2fe <RF24::setPALevel(unsigned char, bool)+0x32>
    d2e6:	ca 5f       	subi	r28, 0xFA	; 250
    d2e8:	4c 2f       	mov	r20, r28
    d2ea:	48 2b       	or	r20, r24
    d2ec:	20 e0       	ldi	r18, 0x00	; 0
    d2ee:	66 e0       	ldi	r22, 0x06	; 6
    d2f0:	c8 01       	movw	r24, r16
    d2f2:	df 91       	pop	r29
    d2f4:	cf 91       	pop	r28
    d2f6:	1f 91       	pop	r17
    d2f8:	0f 91       	pop	r16
    d2fa:	0c 94 4f 66 	jmp	0xcc9e	; 0xcc9e <RF24::write_register(unsigned char, unsigned char, bool)>
    d2fe:	dd 0f       	add	r29, r29
    d300:	cd 0f       	add	r28, r29
    d302:	f2 cf       	rjmp	.-28     	; 0xd2e8 <RF24::setPALevel(unsigned char, bool)+0x1c>

0000d304 <RF24::getPALevel()>:
_ZN4RF2410getPALevelEv():
    d304:	66 e0       	ldi	r22, 0x06	; 6
    d306:	0e 94 10 66 	call	0xcc20	; 0xcc20 <RF24::read_register(unsigned char)>
    d30a:	90 e0       	ldi	r25, 0x00	; 0
    d30c:	95 95       	asr	r25
    d30e:	87 95       	ror	r24
    d310:	83 70       	andi	r24, 0x03	; 3
    d312:	08 95       	ret

0000d314 <RF24::setDataRate(rf24_datarate_e)>:
_ZN4RF2411setDataRateE15rf24_datarate_e():
    d314:	ef 92       	push	r14
    d316:	ff 92       	push	r15
    d318:	0f 93       	push	r16
    d31a:	1f 93       	push	r17
    d31c:	cf 93       	push	r28
    d31e:	8c 01       	movw	r16, r24
    d320:	7b 01       	movw	r14, r22
    d322:	66 e0       	ldi	r22, 0x06	; 6
    d324:	0e 94 10 66 	call	0xcc20	; 0xcc20 <RF24::read_register(unsigned char)>
    d328:	c8 2f       	mov	r28, r24
    d32a:	c7 7d       	andi	r28, 0xD7	; 215
    d32c:	82 e0       	ldi	r24, 0x02	; 2
    d32e:	e8 16       	cp	r14, r24
    d330:	f1 04       	cpc	r15, r1
    d332:	f1 f4       	brne	.+60     	; 0xd370 <RF24::setDataRate(rf24_datarate_e)+0x5c>
    d334:	c0 62       	ori	r28, 0x20	; 32
    d336:	8b e9       	ldi	r24, 0x9B	; 155
    d338:	90 e0       	ldi	r25, 0x00	; 0
    d33a:	a0 e0       	ldi	r26, 0x00	; 0
    d33c:	b0 e0       	ldi	r27, 0x00	; 0
    d33e:	f8 01       	movw	r30, r16
    d340:	85 8b       	std	Z+21, r24	; 0x15
    d342:	96 8b       	std	Z+22, r25	; 0x16
    d344:	a7 8b       	std	Z+23, r26	; 0x17
    d346:	b0 8f       	std	Z+24, r27	; 0x18
    d348:	20 e0       	ldi	r18, 0x00	; 0
    d34a:	4c 2f       	mov	r20, r28
    d34c:	66 e0       	ldi	r22, 0x06	; 6
    d34e:	c8 01       	movw	r24, r16
    d350:	0e 94 4f 66 	call	0xcc9e	; 0xcc9e <RF24::write_register(unsigned char, unsigned char, bool)>
    d354:	66 e0       	ldi	r22, 0x06	; 6
    d356:	c8 01       	movw	r24, r16
    d358:	0e 94 10 66 	call	0xcc20	; 0xcc20 <RF24::read_register(unsigned char)>
    d35c:	91 e0       	ldi	r25, 0x01	; 1
    d35e:	8c 13       	cpse	r24, r28
    d360:	90 e0       	ldi	r25, 0x00	; 0
    d362:	89 2f       	mov	r24, r25
    d364:	cf 91       	pop	r28
    d366:	1f 91       	pop	r17
    d368:	0f 91       	pop	r16
    d36a:	ff 90       	pop	r15
    d36c:	ef 90       	pop	r14
    d36e:	08 95       	ret
    d370:	85 e5       	ldi	r24, 0x55	; 85
    d372:	90 e0       	ldi	r25, 0x00	; 0
    d374:	a0 e0       	ldi	r26, 0x00	; 0
    d376:	b0 e0       	ldi	r27, 0x00	; 0
    d378:	ea 94       	dec	r14
    d37a:	ef 28       	or	r14, r15
    d37c:	01 f7       	brne	.-64     	; 0xd33e <RF24::setDataRate(rf24_datarate_e)+0x2a>
    d37e:	c8 60       	ori	r28, 0x08	; 8
    d380:	81 e4       	ldi	r24, 0x41	; 65
    d382:	90 e0       	ldi	r25, 0x00	; 0
    d384:	a0 e0       	ldi	r26, 0x00	; 0
    d386:	b0 e0       	ldi	r27, 0x00	; 0
    d388:	da cf       	rjmp	.-76     	; 0xd33e <RF24::setDataRate(rf24_datarate_e)+0x2a>

0000d38a <RF24::getDataRate()>:
_ZN4RF2411getDataRateEv():
    d38a:	66 e0       	ldi	r22, 0x06	; 6
    d38c:	0e 94 10 66 	call	0xcc20	; 0xcc20 <RF24::read_register(unsigned char)>
    d390:	28 2f       	mov	r18, r24
    d392:	28 72       	andi	r18, 0x28	; 40
    d394:	20 32       	cpi	r18, 0x20	; 32
    d396:	31 f0       	breq	.+12     	; 0xd3a4 <RF24::getDataRate()+0x1a>
    d398:	81 e0       	ldi	r24, 0x01	; 1
    d39a:	90 e0       	ldi	r25, 0x00	; 0
    d39c:	28 30       	cpi	r18, 0x08	; 8
    d39e:	21 f0       	breq	.+8      	; 0xd3a8 <RF24::getDataRate()+0x1e>
    d3a0:	80 e0       	ldi	r24, 0x00	; 0
    d3a2:	08 95       	ret
    d3a4:	82 e0       	ldi	r24, 0x02	; 2
    d3a6:	90 e0       	ldi	r25, 0x00	; 0
    d3a8:	08 95       	ret

0000d3aa <RF24::setCRCLength(rf24_crclength_e)>:
_ZN4RF2412setCRCLengthE16rf24_crclength_e():
    d3aa:	fc 01       	movw	r30, r24
    d3ac:	92 89       	ldd	r25, Z+18	; 0x12
    d3ae:	93 7f       	andi	r25, 0xF3	; 243
    d3b0:	61 15       	cp	r22, r1
    d3b2:	71 05       	cpc	r23, r1
    d3b4:	39 f4       	brne	.+14     	; 0xd3c4 <RF24::setCRCLength(rf24_crclength_e)+0x1a>
    d3b6:	92 8b       	std	Z+18, r25	; 0x12
    d3b8:	20 e0       	ldi	r18, 0x00	; 0
    d3ba:	42 89       	ldd	r20, Z+18	; 0x12
    d3bc:	60 e0       	ldi	r22, 0x00	; 0
    d3be:	cf 01       	movw	r24, r30
    d3c0:	0c 94 4f 66 	jmp	0xcc9e	; 0xcc9e <RF24::write_register(unsigned char, unsigned char, bool)>
    d3c4:	61 30       	cpi	r22, 0x01	; 1
    d3c6:	71 05       	cpc	r23, r1
    d3c8:	11 f4       	brne	.+4      	; 0xd3ce <RF24::setCRCLength(rf24_crclength_e)+0x24>
    d3ca:	98 60       	ori	r25, 0x08	; 8
    d3cc:	f4 cf       	rjmp	.-24     	; 0xd3b6 <RF24::setCRCLength(rf24_crclength_e)+0xc>
    d3ce:	9c 60       	ori	r25, 0x0C	; 12
    d3d0:	f2 cf       	rjmp	.-28     	; 0xd3b6 <RF24::setCRCLength(rf24_crclength_e)+0xc>

0000d3d2 <RF24::getCRCLength()>:
_ZN4RF2412getCRCLengthEv():
    d3d2:	1f 93       	push	r17
    d3d4:	cf 93       	push	r28
    d3d6:	df 93       	push	r29
    d3d8:	ec 01       	movw	r28, r24
    d3da:	61 e0       	ldi	r22, 0x01	; 1
    d3dc:	0e 94 10 66 	call	0xcc20	; 0xcc20 <RF24::read_register(unsigned char)>
    d3e0:	18 2f       	mov	r17, r24
    d3e2:	60 e0       	ldi	r22, 0x00	; 0
    d3e4:	ce 01       	movw	r24, r28
    d3e6:	0e 94 10 66 	call	0xcc20	; 0xcc20 <RF24::read_register(unsigned char)>
    d3ea:	8a 8b       	std	Y+18, r24	; 0x12
    d3ec:	83 fd       	sbrc	r24, 3
    d3ee:	02 c0       	rjmp	.+4      	; 0xd3f4 <RF24::getCRCLength()+0x22>
    d3f0:	11 23       	and	r17, r17
    d3f2:	41 f0       	breq	.+16     	; 0xd404 <RF24::getCRCLength()+0x32>
    d3f4:	82 fd       	sbrc	r24, 2
    d3f6:	09 c0       	rjmp	.+18     	; 0xd40a <RF24::getCRCLength()+0x38>
    d3f8:	81 e0       	ldi	r24, 0x01	; 1
    d3fa:	90 e0       	ldi	r25, 0x00	; 0
    d3fc:	df 91       	pop	r29
    d3fe:	cf 91       	pop	r28
    d400:	1f 91       	pop	r17
    d402:	08 95       	ret
    d404:	90 e0       	ldi	r25, 0x00	; 0
    d406:	80 e0       	ldi	r24, 0x00	; 0
    d408:	f9 cf       	rjmp	.-14     	; 0xd3fc <RF24::getCRCLength()+0x2a>
    d40a:	82 e0       	ldi	r24, 0x02	; 2
    d40c:	90 e0       	ldi	r25, 0x00	; 0
    d40e:	f6 cf       	rjmp	.-20     	; 0xd3fc <RF24::getCRCLength()+0x2a>

0000d410 <RF24::printPrettyDetails()>:
_ZN4RF2418printPrettyDetailsEv():
    d410:	bf 92       	push	r11
    d412:	cf 92       	push	r12
    d414:	df 92       	push	r13
    d416:	ef 92       	push	r14
    d418:	ff 92       	push	r15
    d41a:	0f 93       	push	r16
    d41c:	1f 93       	push	r17
    d41e:	cf 93       	push	r28
    d420:	df 93       	push	r29
    d422:	ec 01       	movw	r28, r24
    d424:	6c 81       	ldd	r22, Y+4	; 0x04
    d426:	7d 81       	ldd	r23, Y+5	; 0x05
    d428:	8e 81       	ldd	r24, Y+6	; 0x06
    d42a:	9f 81       	ldd	r25, Y+7	; 0x07
    d42c:	20 e4       	ldi	r18, 0x40	; 64
    d42e:	32 e4       	ldi	r19, 0x42	; 66
    d430:	4f e0       	ldi	r20, 0x0F	; 15
    d432:	50 e0       	ldi	r21, 0x00	; 0
    d434:	0e 94 ea 91 	call	0x123d4	; 0x123d4 <__udivmodsi4>
    d438:	1f 92       	push	r1
    d43a:	2f 93       	push	r18
    d43c:	8e e4       	ldi	r24, 0x4E	; 78
    d43e:	9d e1       	ldi	r25, 0x1D	; 29
    d440:	9f 93       	push	r25
    d442:	8f 93       	push	r24
    d444:	0e 94 da 95 	call	0x12bb4	; 0x12bb4 <printf_P>
    d448:	ce 01       	movw	r24, r28
    d44a:	0e 94 09 68 	call	0xd012	; 0xd012 <RF24::getChannel()>
    d44e:	28 2f       	mov	r18, r24
    d450:	30 e0       	ldi	r19, 0x00	; 0
    d452:	20 5a       	subi	r18, 0xA0	; 160
    d454:	36 4f       	sbci	r19, 0xF6	; 246
    d456:	3f 93       	push	r19
    d458:	2f 93       	push	r18
    d45a:	1f 92       	push	r1
    d45c:	8f 93       	push	r24
    d45e:	82 e3       	ldi	r24, 0x32	; 50
    d460:	9d e1       	ldi	r25, 0x1D	; 29
    d462:	9f 93       	push	r25
    d464:	8f 93       	push	r24
    d466:	0e 94 da 95 	call	0x12bb4	; 0x12bb4 <printf_P>
    d46a:	ce 01       	movw	r24, r28
    d46c:	0e 94 c5 69 	call	0xd38a	; 0xd38a <RF24::getDataRate()>
    d470:	fc 01       	movw	r30, r24
    d472:	ee 0f       	add	r30, r30
    d474:	ff 1f       	adc	r31, r31
    d476:	ec 51       	subi	r30, 0x1C	; 28
    d478:	f2 4e       	sbci	r31, 0xE2	; 226
    d47a:	85 91       	lpm	r24, Z+
    d47c:	94 91       	lpm	r25, Z
    d47e:	9f 93       	push	r25
    d480:	8f 93       	push	r24
    d482:	8f e1       	ldi	r24, 0x1F	; 31
    d484:	9d e1       	ldi	r25, 0x1D	; 29
    d486:	9f 93       	push	r25
    d488:	8f 93       	push	r24
    d48a:	0e 94 da 95 	call	0x12bb4	; 0x12bb4 <printf_P>
    d48e:	ce 01       	movw	r24, r28
    d490:	0e 94 82 69 	call	0xd304	; 0xd304 <RF24::getPALevel()>
    d494:	e8 2f       	mov	r30, r24
    d496:	f0 e0       	ldi	r31, 0x00	; 0
    d498:	ee 0f       	add	r30, r30
    d49a:	ff 1f       	adc	r31, r31
    d49c:	ed 56       	subi	r30, 0x6D	; 109
    d49e:	f2 4e       	sbci	r31, 0xE2	; 226
    d4a0:	85 91       	lpm	r24, Z+
    d4a2:	94 91       	lpm	r25, Z
    d4a4:	9f 93       	push	r25
    d4a6:	8f 93       	push	r24
    d4a8:	87 e0       	ldi	r24, 0x07	; 7
    d4aa:	9d e1       	ldi	r25, 0x1D	; 29
    d4ac:	9f 93       	push	r25
    d4ae:	8f 93       	push	r24
    d4b0:	0e 94 da 95 	call	0x12bb4	; 0x12bb4 <printf_P>
    d4b4:	66 e0       	ldi	r22, 0x06	; 6
    d4b6:	ce 01       	movw	r24, r28
    d4b8:	0e 94 10 66 	call	0xcc20	; 0xcc20 <RF24::read_register(unsigned char)>
    d4bc:	08 2f       	mov	r16, r24
    d4be:	01 70       	andi	r16, 0x01	; 1
    d4c0:	10 e0       	ldi	r17, 0x00	; 0
    d4c2:	f8 01       	movw	r30, r16
    d4c4:	ee 0f       	add	r30, r30
    d4c6:	ff 1f       	adc	r31, r31
    d4c8:	e9 59       	subi	r30, 0x99	; 153
    d4ca:	f2 4e       	sbci	r31, 0xE2	; 226
    d4cc:	85 91       	lpm	r24, Z+
    d4ce:	94 91       	lpm	r25, Z
    d4d0:	9f 93       	push	r25
    d4d2:	8f 93       	push	r24
    d4d4:	8b ee       	ldi	r24, 0xEB	; 235
    d4d6:	9c e1       	ldi	r25, 0x1C	; 28
    d4d8:	9f 93       	push	r25
    d4da:	8f 93       	push	r24
    d4dc:	0e 94 da 95 	call	0x12bb4	; 0x12bb4 <printf_P>
    d4e0:	ce 01       	movw	r24, r28
    d4e2:	0e 94 e9 69 	call	0xd3d2	; 0xd3d2 <RF24::getCRCLength()>
    d4e6:	fc 01       	movw	r30, r24
    d4e8:	ee 0f       	add	r30, r30
    d4ea:	ff 1f       	adc	r31, r31
    d4ec:	e0 54       	subi	r30, 0x40	; 64
    d4ee:	f2 4e       	sbci	r31, 0xE2	; 226
    d4f0:	85 91       	lpm	r24, Z+
    d4f2:	94 91       	lpm	r25, Z
    d4f4:	9f 93       	push	r25
    d4f6:	8f 93       	push	r24
    d4f8:	8a ed       	ldi	r24, 0xDA	; 218
    d4fa:	9c e1       	ldi	r25, 0x1C	; 28
    d4fc:	9f 93       	push	r25
    d4fe:	8f 93       	push	r24
    d500:	0e 94 da 95 	call	0x12bb4	; 0x12bb4 <printf_P>
    d504:	63 e0       	ldi	r22, 0x03	; 3
    d506:	ce 01       	movw	r24, r28
    d508:	0e 94 10 66 	call	0xcc20	; 0xcc20 <RF24::read_register(unsigned char)>
    d50c:	83 70       	andi	r24, 0x03	; 3
    d50e:	90 e0       	ldi	r25, 0x00	; 0
    d510:	02 96       	adiw	r24, 0x02	; 2
    d512:	9f 93       	push	r25
    d514:	8f 93       	push	r24
    d516:	8d eb       	ldi	r24, 0xBD	; 189
    d518:	9c e1       	ldi	r25, 0x1C	; 28
    d51a:	9f 93       	push	r25
    d51c:	8f 93       	push	r24
    d51e:	0e 94 da 95 	call	0x12bb4	; 0x12bb4 <printf_P>
    d522:	89 85       	ldd	r24, Y+9	; 0x09
    d524:	1f 92       	push	r1
    d526:	8f 93       	push	r24
    d528:	8a e9       	ldi	r24, 0x9A	; 154
    d52a:	9c e1       	ldi	r25, 0x1C	; 28
    d52c:	9f 93       	push	r25
    d52e:	8f 93       	push	r24
    d530:	0e 94 da 95 	call	0x12bb4	; 0x12bb4 <printf_P>
    d534:	2d b7       	in	r18, 0x3d	; 61
    d536:	3e b7       	in	r19, 0x3e	; 62
    d538:	2e 5d       	subi	r18, 0xDE	; 222
    d53a:	3f 4f       	sbci	r19, 0xFF	; 255
    d53c:	0f b6       	in	r0, 0x3f	; 63
    d53e:	f8 94       	cli
    d540:	3e bf       	out	0x3e, r19	; 62
    d542:	0f be       	out	0x3f, r0	; 63
    d544:	2d bf       	out	0x3d, r18	; 61
    d546:	64 e0       	ldi	r22, 0x04	; 4
    d548:	ce 01       	movw	r24, r28
    d54a:	0e 94 10 66 	call	0xcc20	; 0xcc20 <RF24::read_register(unsigned char)>
    d54e:	18 2f       	mov	r17, r24
    d550:	90 e0       	ldi	r25, 0x00	; 0
    d552:	e4 e0       	ldi	r30, 0x04	; 4
    d554:	95 95       	asr	r25
    d556:	87 95       	ror	r24
    d558:	ea 95       	dec	r30
    d55a:	e1 f7       	brne	.-8      	; 0xd554 <RF24::printPrettyDetails()+0x144>
    d55c:	01 96       	adiw	r24, 0x01	; 1
    d55e:	4a ef       	ldi	r20, 0xFA	; 250
    d560:	48 9f       	mul	r20, r24
    d562:	90 01       	movw	r18, r0
    d564:	49 9f       	mul	r20, r25
    d566:	30 0d       	add	r19, r0
    d568:	11 24       	eor	r1, r1
    d56a:	3f 93       	push	r19
    d56c:	2f 93       	push	r18
    d56e:	85 e7       	ldi	r24, 0x75	; 117
    d570:	9c e1       	ldi	r25, 0x1C	; 28
    d572:	9f 93       	push	r25
    d574:	8f 93       	push	r24
    d576:	0e 94 da 95 	call	0x12bb4	; 0x12bb4 <printf_P>
    d57a:	1f 70       	andi	r17, 0x0F	; 15
    d57c:	1f 92       	push	r1
    d57e:	1f 93       	push	r17
    d580:	82 e5       	ldi	r24, 0x52	; 82
    d582:	9c e1       	ldi	r25, 0x1C	; 28
    d584:	9f 93       	push	r25
    d586:	8f 93       	push	r24
    d588:	0e 94 da 95 	call	0x12bb4	; 0x12bb4 <printf_P>
    d58c:	68 e0       	ldi	r22, 0x08	; 8
    d58e:	ce 01       	movw	r24, r28
    d590:	0e 94 10 66 	call	0xcc20	; 0xcc20 <RF24::read_register(unsigned char)>
    d594:	18 2f       	mov	r17, r24
    d596:	90 e0       	ldi	r25, 0x00	; 0
    d598:	f4 e0       	ldi	r31, 0x04	; 4
    d59a:	95 95       	asr	r25
    d59c:	87 95       	ror	r24
    d59e:	fa 95       	dec	r31
    d5a0:	e1 f7       	brne	.-8      	; 0xd59a <RF24::printPrettyDetails()+0x18a>
    d5a2:	9f 93       	push	r25
    d5a4:	8f 93       	push	r24
    d5a6:	87 e2       	ldi	r24, 0x27	; 39
    d5a8:	9c e1       	ldi	r25, 0x1C	; 28
    d5aa:	9f 93       	push	r25
    d5ac:	8f 93       	push	r24
    d5ae:	0e 94 da 95 	call	0x12bb4	; 0x12bb4 <printf_P>
    d5b2:	1f 70       	andi	r17, 0x0F	; 15
    d5b4:	1f 92       	push	r1
    d5b6:	1f 93       	push	r17
    d5b8:	82 ef       	ldi	r24, 0xF2	; 242
    d5ba:	9b e1       	ldi	r25, 0x1B	; 27
    d5bc:	9f 93       	push	r25
    d5be:	8f 93       	push	r24
    d5c0:	0e 94 da 95 	call	0x12bb4	; 0x12bb4 <printf_P>
    d5c4:	6d e1       	ldi	r22, 0x1D	; 29
    d5c6:	ce 01       	movw	r24, r28
    d5c8:	0e 94 10 66 	call	0xcc20	; 0xcc20 <RF24::read_register(unsigned char)>
    d5cc:	18 2f       	mov	r17, r24
    d5ce:	34 e0       	ldi	r19, 0x04	; 4
    d5d0:	83 9f       	mul	r24, r19
    d5d2:	f0 01       	movw	r30, r0
    d5d4:	11 24       	eor	r1, r1
    d5d6:	e4 70       	andi	r30, 0x04	; 4
    d5d8:	ff 27       	eor	r31, r31
    d5da:	e9 59       	subi	r30, 0x99	; 153
    d5dc:	f2 4e       	sbci	r31, 0xE2	; 226
    d5de:	85 91       	lpm	r24, Z+
    d5e0:	94 91       	lpm	r25, Z
    d5e2:	9f 93       	push	r25
    d5e4:	8f 93       	push	r24
    d5e6:	82 ee       	ldi	r24, 0xE2	; 226
    d5e8:	9b e1       	ldi	r25, 0x1B	; 27
    d5ea:	9f 93       	push	r25
    d5ec:	8f 93       	push	r24
    d5ee:	0e 94 da 95 	call	0x12bb4	; 0x12bb4 <printf_P>
    d5f2:	11 fb       	bst	r17, 1
    d5f4:	ee 24       	eor	r14, r14
    d5f6:	e0 f8       	bld	r14, 0
    d5f8:	f1 2c       	mov	r15, r1
    d5fa:	f7 01       	movw	r30, r14
    d5fc:	ee 0f       	add	r30, r30
    d5fe:	ff 1f       	adc	r31, r31
    d600:	e9 59       	subi	r30, 0x99	; 153
    d602:	f2 4e       	sbci	r31, 0xE2	; 226
    d604:	85 91       	lpm	r24, Z+
    d606:	94 91       	lpm	r25, Z
    d608:	9f 93       	push	r25
    d60a:	8f 93       	push	r24
    d60c:	8a ec       	ldi	r24, 0xCA	; 202
    d60e:	9b e1       	ldi	r25, 0x1B	; 27
    d610:	9f 93       	push	r25
    d612:	8f 93       	push	r24
    d614:	0e 94 da 95 	call	0x12bb4	; 0x12bb4 <printf_P>
    d618:	6c e1       	ldi	r22, 0x1C	; 28
    d61a:	ce 01       	movw	r24, r28
    d61c:	0e 94 10 66 	call	0xcc20	; 0xcc20 <RF24::read_register(unsigned char)>
    d620:	2d b7       	in	r18, 0x3d	; 61
    d622:	3e b7       	in	r19, 0x3e	; 62
    d624:	28 5e       	subi	r18, 0xE8	; 232
    d626:	3f 4f       	sbci	r19, 0xFF	; 255
    d628:	0f b6       	in	r0, 0x3f	; 63
    d62a:	f8 94       	cli
    d62c:	3e bf       	out	0x3e, r19	; 62
    d62e:	0f be       	out	0x3f, r0	; 63
    d630:	2d bf       	out	0x3d, r18	; 61
    d632:	12 fb       	bst	r17, 2
    d634:	ee 27       	eor	r30, r30
    d636:	e0 f9       	bld	r30, 0
    d638:	81 11       	cpse	r24, r1
    d63a:	01 c0       	rjmp	.+2      	; 0xd63e <RF24::printPrettyDetails()+0x22e>
    d63c:	e0 e0       	ldi	r30, 0x00	; 0
    d63e:	f0 e0       	ldi	r31, 0x00	; 0
    d640:	ee 0f       	add	r30, r30
    d642:	ff 1f       	adc	r31, r31
    d644:	e9 59       	subi	r30, 0x99	; 153
    d646:	f2 4e       	sbci	r31, 0xE2	; 226
    d648:	85 91       	lpm	r24, Z+
    d64a:	94 91       	lpm	r25, Z
    d64c:	9f 93       	push	r25
    d64e:	8f 93       	push	r24
    d650:	84 eb       	ldi	r24, 0xB4	; 180
    d652:	9b e1       	ldi	r25, 0x1B	; 27
    d654:	9f 93       	push	r25
    d656:	8f 93       	push	r24
    d658:	0e 94 da 95 	call	0x12bb4	; 0x12bb4 <printf_P>
    d65c:	61 e0       	ldi	r22, 0x01	; 1
    d65e:	ce 01       	movw	r24, r28
    d660:	0e 94 10 66 	call	0xcc20	; 0xcc20 <RF24::read_register(unsigned char)>
    d664:	0f 90       	pop	r0
    d666:	0f 90       	pop	r0
    d668:	0f 90       	pop	r0
    d66a:	0f 90       	pop	r0
    d66c:	8f 33       	cpi	r24, 0x3F	; 63
    d66e:	11 f0       	breq	.+4      	; 0xd674 <RF24::printPrettyDetails()+0x264>
    d670:	81 11       	cpse	r24, r1
    d672:	77 c0       	rjmp	.+238    	; 0xd762 <RF24::printPrettyDetails()+0x352>
    d674:	e1 e0       	ldi	r30, 0x01	; 1
    d676:	f0 e0       	ldi	r31, 0x00	; 0
    d678:	81 11       	cpse	r24, r1
    d67a:	02 c0       	rjmp	.+4      	; 0xd680 <RF24::printPrettyDetails()+0x270>
    d67c:	f0 e0       	ldi	r31, 0x00	; 0
    d67e:	e0 e0       	ldi	r30, 0x00	; 0
    d680:	ee 0f       	add	r30, r30
    d682:	ff 1f       	adc	r31, r31
    d684:	e9 59       	subi	r30, 0x99	; 153
    d686:	f2 4e       	sbci	r31, 0xE2	; 226
    d688:	85 91       	lpm	r24, Z+
    d68a:	94 91       	lpm	r25, Z
    d68c:	9f 93       	push	r25
    d68e:	8f 93       	push	r24
    d690:	8b e9       	ldi	r24, 0x9B	; 155
    d692:	9b e1       	ldi	r25, 0x1B	; 27
    d694:	9f 93       	push	r25
    d696:	8f 93       	push	r24
    d698:	0e 94 da 95 	call	0x12bb4	; 0x12bb4 <printf_P>
    d69c:	0f 90       	pop	r0
    d69e:	0f 90       	pop	r0
    d6a0:	0f 90       	pop	r0
    d6a2:	0f 90       	pop	r0
    d6a4:	60 e0       	ldi	r22, 0x00	; 0
    d6a6:	ce 01       	movw	r24, r28
    d6a8:	0e 94 10 66 	call	0xcc20	; 0xcc20 <RF24::read_register(unsigned char)>
    d6ac:	8a 8b       	std	Y+18, r24	; 0x12
    d6ae:	80 ff       	sbrs	r24, 0
    d6b0:	87 c0       	rjmp	.+270    	; 0xd7c0 <RF24::printPrettyDetails()+0x3b0>
    d6b2:	82 e5       	ldi	r24, 0x52	; 82
    d6b4:	1f 92       	push	r1
    d6b6:	8f 93       	push	r24
    d6b8:	8e e5       	ldi	r24, 0x5E	; 94
    d6ba:	9b e1       	ldi	r25, 0x1B	; 27
    d6bc:	9f 93       	push	r25
    d6be:	8f 93       	push	r24
    d6c0:	0e 94 da 95 	call	0x12bb4	; 0x12bb4 <printf_P>
    d6c4:	21 e0       	ldi	r18, 0x01	; 1
    d6c6:	40 e1       	ldi	r20, 0x10	; 16
    d6c8:	62 e5       	ldi	r22, 0x52	; 82
    d6ca:	7b e1       	ldi	r23, 0x1B	; 27
    d6cc:	ce 01       	movw	r24, r28
    d6ce:	0e 94 47 67 	call	0xce8e	; 0xce8e <RF24::print_address_register(char const*, unsigned char, unsigned char)>
    d6d2:	62 e0       	ldi	r22, 0x02	; 2
    d6d4:	ce 01       	movw	r24, r28
    d6d6:	0e 94 10 66 	call	0xcc20	; 0xcc20 <RF24::read_register(unsigned char)>
    d6da:	0f 90       	pop	r0
    d6dc:	0f 90       	pop	r0
    d6de:	0f 90       	pop	r0
    d6e0:	0f 90       	pop	r0
    d6e2:	10 e0       	ldi	r17, 0x00	; 0
    d6e4:	00 e0       	ldi	r16, 0x00	; 0
    d6e6:	e8 2e       	mov	r14, r24
    d6e8:	f1 2c       	mov	r15, r1
    d6ea:	9f e3       	ldi	r25, 0x3F	; 63
    d6ec:	c9 2e       	mov	r12, r25
    d6ee:	9b e1       	ldi	r25, 0x1B	; 27
    d6f0:	d9 2e       	mov	r13, r25
    d6f2:	f7 01       	movw	r30, r14
    d6f4:	00 2e       	mov	r0, r16
    d6f6:	02 c0       	rjmp	.+4      	; 0xd6fc <RF24::printPrettyDetails()+0x2ec>
    d6f8:	f5 95       	asr	r31
    d6fa:	e7 95       	ror	r30
    d6fc:	0a 94       	dec	r0
    d6fe:	e2 f7       	brpl	.-8      	; 0xd6f8 <RF24::printPrettyDetails()+0x2e8>
    d700:	e1 70       	andi	r30, 0x01	; 1
    d702:	ff 27       	eor	r31, r31
    d704:	33 96       	adiw	r30, 0x03	; 3
    d706:	ee 0f       	add	r30, r30
    d708:	ff 1f       	adc	r31, r31
    d70a:	e9 59       	subi	r30, 0x99	; 153
    d70c:	f2 4e       	sbci	r31, 0xE2	; 226
    d70e:	85 91       	lpm	r24, Z+
    d710:	94 91       	lpm	r25, Z
    d712:	9f 93       	push	r25
    d714:	8f 93       	push	r24
    d716:	1f 93       	push	r17
    d718:	0f 93       	push	r16
    d71a:	df 92       	push	r13
    d71c:	cf 92       	push	r12
    d71e:	0e 94 da 95 	call	0x12bb4	; 0x12bb4 <printf_P>
    d722:	4a e0       	ldi	r20, 0x0A	; 10
    d724:	40 0f       	add	r20, r16
    d726:	0f 90       	pop	r0
    d728:	0f 90       	pop	r0
    d72a:	0f 90       	pop	r0
    d72c:	0f 90       	pop	r0
    d72e:	0f 90       	pop	r0
    d730:	0f 90       	pop	r0
    d732:	21 e0       	ldi	r18, 0x01	; 1
    d734:	02 30       	cpi	r16, 0x02	; 2
    d736:	08 f0       	brcs	.+2      	; 0xd73a <RF24::printPrettyDetails()+0x32a>
    d738:	45 c0       	rjmp	.+138    	; 0xd7c4 <RF24::printPrettyDetails()+0x3b4>
    d73a:	6e e3       	ldi	r22, 0x3E	; 62
    d73c:	7b e1       	ldi	r23, 0x1B	; 27
    d73e:	ce 01       	movw	r24, r28
    d740:	0e 94 47 67 	call	0xce8e	; 0xce8e <RF24::print_address_register(char const*, unsigned char, unsigned char)>
    d744:	0f 5f       	subi	r16, 0xFF	; 255
    d746:	1f 4f       	sbci	r17, 0xFF	; 255
    d748:	06 30       	cpi	r16, 0x06	; 6
    d74a:	11 05       	cpc	r17, r1
    d74c:	91 f6       	brne	.-92     	; 0xd6f2 <RF24::printPrettyDetails()+0x2e2>
    d74e:	df 91       	pop	r29
    d750:	cf 91       	pop	r28
    d752:	1f 91       	pop	r17
    d754:	0f 91       	pop	r16
    d756:	ff 90       	pop	r15
    d758:	ef 90       	pop	r14
    d75a:	df 90       	pop	r13
    d75c:	cf 90       	pop	r12
    d75e:	bf 90       	pop	r11
    d760:	08 95       	ret
    d762:	51 e3       	ldi	r21, 0x31	; 49
    d764:	80 ff       	sbrs	r24, 0
    d766:	50 e3       	ldi	r21, 0x30	; 48
    d768:	41 e3       	ldi	r20, 0x31	; 49
    d76a:	81 ff       	sbrs	r24, 1
    d76c:	40 e3       	ldi	r20, 0x30	; 48
    d76e:	31 e3       	ldi	r19, 0x31	; 49
    d770:	82 ff       	sbrs	r24, 2
    d772:	30 e3       	ldi	r19, 0x30	; 48
    d774:	21 e3       	ldi	r18, 0x31	; 49
    d776:	83 ff       	sbrs	r24, 3
    d778:	20 e3       	ldi	r18, 0x30	; 48
    d77a:	91 e3       	ldi	r25, 0x31	; 49
    d77c:	84 ff       	sbrs	r24, 4
    d77e:	90 e3       	ldi	r25, 0x30	; 48
    d780:	85 ff       	sbrs	r24, 5
    d782:	1c c0       	rjmp	.+56     	; 0xd7bc <RF24::printPrettyDetails()+0x3ac>
    d784:	81 e3       	ldi	r24, 0x31	; 49
    d786:	1f 92       	push	r1
    d788:	5f 93       	push	r21
    d78a:	1f 92       	push	r1
    d78c:	4f 93       	push	r20
    d78e:	1f 92       	push	r1
    d790:	3f 93       	push	r19
    d792:	1f 92       	push	r1
    d794:	2f 93       	push	r18
    d796:	1f 92       	push	r1
    d798:	9f 93       	push	r25
    d79a:	1f 92       	push	r1
    d79c:	8f 93       	push	r24
    d79e:	84 e7       	ldi	r24, 0x74	; 116
    d7a0:	9b e1       	ldi	r25, 0x1B	; 27
    d7a2:	9f 93       	push	r25
    d7a4:	8f 93       	push	r24
    d7a6:	0e 94 da 95 	call	0x12bb4	; 0x12bb4 <printf_P>
    d7aa:	8d b7       	in	r24, 0x3d	; 61
    d7ac:	9e b7       	in	r25, 0x3e	; 62
    d7ae:	0e 96       	adiw	r24, 0x0e	; 14
    d7b0:	0f b6       	in	r0, 0x3f	; 63
    d7b2:	f8 94       	cli
    d7b4:	9e bf       	out	0x3e, r25	; 62
    d7b6:	0f be       	out	0x3f, r0	; 63
    d7b8:	8d bf       	out	0x3d, r24	; 61
    d7ba:	74 cf       	rjmp	.-280    	; 0xd6a4 <RF24::printPrettyDetails()+0x294>
    d7bc:	80 e3       	ldi	r24, 0x30	; 48
    d7be:	e3 cf       	rjmp	.-58     	; 0xd786 <RF24::printPrettyDetails()+0x376>
    d7c0:	84 e5       	ldi	r24, 0x54	; 84
    d7c2:	78 cf       	rjmp	.-272    	; 0xd6b4 <RF24::printPrettyDetails()+0x2a4>
    d7c4:	6d e3       	ldi	r22, 0x3D	; 61
    d7c6:	7b e1       	ldi	r23, 0x1B	; 27
    d7c8:	ce 01       	movw	r24, r28
    d7ca:	0e 94 09 67 	call	0xce12	; 0xce12 <RF24::print_byte_register(char const*, unsigned char, unsigned char)>
    d7ce:	ba cf       	rjmp	.-140    	; 0xd744 <RF24::printPrettyDetails()+0x334>

0000d7d0 <RF24::setRetries(unsigned char, unsigned char)>:
_ZN4RF2410setRetriesEhh():
C:\Program Files (x86)\Arduino\libraries\RF24-master/RF24.cpp:1612
}

/****************************************************************************/
void RF24::setRetries(uint8_t delay, uint8_t count)
{
    write_register(SETUP_RETR, rf24_min(15, delay) << ARD | rf24_min(15, count));
    d7d0:	60 31       	cpi	r22, 0x10	; 16
    d7d2:	08 f0       	brcs	.+2      	; 0xd7d6 <RF24::setRetries(unsigned char, unsigned char)+0x6>
    d7d4:	6f e0       	ldi	r22, 0x0F	; 15
    d7d6:	20 e1       	ldi	r18, 0x10	; 16
    d7d8:	62 9f       	mul	r22, r18
    d7da:	b0 01       	movw	r22, r0
    d7dc:	11 24       	eor	r1, r1
    d7de:	40 31       	cpi	r20, 0x10	; 16
    d7e0:	08 f0       	brcs	.+2      	; 0xd7e4 <RF24::setRetries(unsigned char, unsigned char)+0x14>
    d7e2:	4f e0       	ldi	r20, 0x0F	; 15
    d7e4:	46 2b       	or	r20, r22
    d7e6:	20 e0       	ldi	r18, 0x00	; 0
    d7e8:	64 e0       	ldi	r22, 0x04	; 4
    d7ea:	0c 94 4f 66 	jmp	0xcc9e	; 0xcc9e <RF24::write_register(unsigned char, unsigned char, bool)>

0000d7ee <RF24::begin()>:
_ZN4RF245beginEv():
C:\Program Files (x86)\Arduino\libraries\RF24-master/RF24.cpp:666
#endif // !defined(MINIMAL)

/****************************************************************************/

bool RF24::begin(void)
{
    d7ee:	1f 93       	push	r17
    d7f0:	cf 93       	push	r28
    d7f2:	df 93       	push	r29
    d7f4:	ec 01       	movw	r28, r24
C:\Program Files (x86)\Arduino\libraries\RF24-master/RF24.cpp:711
      ce(LOW);
      csn(HIGH);
      delay(200);
    #else
      // Initialize pins
      if (ce_pin != csn_pin) {
    d7f6:	88 81       	ld	r24, Y
    d7f8:	99 81       	ldd	r25, Y+1	; 0x01
    d7fa:	2a 81       	ldd	r18, Y+2	; 0x02
    d7fc:	3b 81       	ldd	r19, Y+3	; 0x03
    d7fe:	82 17       	cp	r24, r18
    d800:	93 07       	cpc	r25, r19
    d802:	39 f0       	breq	.+14     	; 0xd812 <RF24::begin()+0x24>
C:\Program Files (x86)\Arduino\libraries\RF24-master/RF24.cpp:712
        pinMode(ce_pin, OUTPUT);
    d804:	61 e0       	ldi	r22, 0x01	; 1
    d806:	0e 94 86 87 	call	0x10f0c	; 0x10f0c <pinMode>
C:\Program Files (x86)\Arduino\libraries\RF24-master/RF24.cpp:713
        pinMode(csn_pin, OUTPUT);
    d80a:	61 e0       	ldi	r22, 0x01	; 1
    d80c:	8a 81       	ldd	r24, Y+2	; 0x02
    d80e:	0e 94 86 87 	call	0x10f0c	; 0x10f0c <pinMode>
C:\Program Files (x86)\Arduino\libraries\RF24-master/RF24.cpp:715
      }
      _SPI.begin();
    d812:	0e 94 27 7d 	call	0xfa4e	; 0xfa4e <SPIClass::begin()>
C:\Program Files (x86)\Arduino\libraries\RF24-master/RF24.cpp:716
      ce(LOW);
    d816:	60 e0       	ldi	r22, 0x00	; 0
    d818:	ce 01       	movw	r24, r28
    d81a:	0e 94 79 65 	call	0xcaf2	; 0xcaf2 <RF24::ce(bool)>
C:\Program Files (x86)\Arduino\libraries\RF24-master/RF24.cpp:717
      csn(HIGH);
    d81e:	61 e0       	ldi	r22, 0x01	; 1
    d820:	ce 01       	movw	r24, r28
    d822:	0e 94 6d 65 	call	0xcada	; 0xcada <RF24::csn(bool)>
C:\Program Files (x86)\Arduino\libraries\RF24-master/RF24.cpp:729
    // This is actually only required following power up but some settling time also appears to
    // be required after resets too. For full coverage, we'll always assume the worst.
    // Enabling 16b CRC is by far the most obvious case if the wrong timing is used - or skipped.
    // Technically we require 4.5ms + 14us as a worst case. We'll just call it 5ms for good measure.
    // WARNING: Delay is based on P-variant whereby non-P *may* require different timing.
    delay(5);
    d826:	65 e0       	ldi	r22, 0x05	; 5
    d828:	70 e0       	ldi	r23, 0x00	; 0
    d82a:	80 e0       	ldi	r24, 0x00	; 0
    d82c:	90 e0       	ldi	r25, 0x00	; 0
    d82e:	0e 94 98 85 	call	0x10b30	; 0x10b30 <delay>
C:\Program Files (x86)\Arduino\libraries\RF24-master/RF24.cpp:734

    // Set 1500uS (minimum for 32B payload in ESB@250KBPS) timeouts, to make testing a little easier
    // WARNING: If this is ever lowered, either 250KBS mode with AA is broken or maximum packet
    // sizes must never be used. See datasheet for a more complete explanation.
    setRetries(5, 15);
    d832:	4f e0       	ldi	r20, 0x0F	; 15
    d834:	65 e0       	ldi	r22, 0x05	; 5
    d836:	ce 01       	movw	r24, r28
    d838:	0e 94 e8 6b 	call	0xd7d0	; 0xd7d0 <RF24::setRetries(unsigned char, unsigned char)>
C:\Program Files (x86)\Arduino\libraries\RF24-master/RF24.cpp:738

    // Then set the data rate to the slowest (and most reliable) speed supported by all
    // hardware.
    setDataRate(RF24_1MBPS);
    d83c:	70 e0       	ldi	r23, 0x00	; 0
    d83e:	60 e0       	ldi	r22, 0x00	; 0
    d840:	ce 01       	movw	r24, r28
    d842:	0e 94 8a 69 	call	0xd314	; 0xd314 <RF24::setDataRate(rf24_datarate_e)>
C:\Program Files (x86)\Arduino\libraries\RF24-master/RF24.cpp:741

    // detect if is a plus variant & use old toggle features command accordingly
    uint8_t before_toggle = read_register(FEATURE);
    d846:	6d e1       	ldi	r22, 0x1D	; 29
    d848:	ce 01       	movw	r24, r28
    d84a:	0e 94 10 66 	call	0xcc20	; 0xcc20 <RF24::read_register(unsigned char)>
    d84e:	18 2f       	mov	r17, r24
C:\Program Files (x86)\Arduino\libraries\RF24-master/RF24.cpp:742
    toggle_features();
    d850:	ce 01       	movw	r24, r28
    d852:	0e 94 14 69 	call	0xd228	; 0xd228 <RF24::toggle_features()>
C:\Program Files (x86)\Arduino\libraries\RF24-master/RF24.cpp:743
    uint8_t after_toggle = read_register(FEATURE);
    d856:	6d e1       	ldi	r22, 0x1D	; 29
    d858:	ce 01       	movw	r24, r28
    d85a:	0e 94 10 66 	call	0xcc20	; 0xcc20 <RF24::read_register(unsigned char)>
C:\Program Files (x86)\Arduino\libraries\RF24-master/RF24.cpp:744
    _is_p_variant = before_toggle == after_toggle;
    d85e:	91 e0       	ldi	r25, 0x01	; 1
    d860:	18 13       	cpse	r17, r24
    d862:	90 e0       	ldi	r25, 0x00	; 0
    d864:	9b 8b       	std	Y+19, r25	; 0x13
C:\Program Files (x86)\Arduino\libraries\RF24-master/RF24.cpp:745
    if (after_toggle){
    d866:	88 23       	and	r24, r24
    d868:	59 f0       	breq	.+22     	; 0xd880 <RF24::begin()+0x92>
C:\Program Files (x86)\Arduino\libraries\RF24-master/RF24.cpp:746
        if (_is_p_variant){
    d86a:	18 13       	cpse	r17, r24
    d86c:	03 c0       	rjmp	.+6      	; 0xd874 <RF24::begin()+0x86>
C:\Program Files (x86)\Arduino\libraries\RF24-master/RF24.cpp:748
            // module did not experience power-on-reset (#401)
            toggle_features();
    d86e:	ce 01       	movw	r24, r28
    d870:	0e 94 14 69 	call	0xd228	; 0xd228 <RF24::toggle_features()>
C:\Program Files (x86)\Arduino\libraries\RF24-master/RF24.cpp:751
        }
        // allow use of multicast parameter and dynamic payloads by default
        write_register(FEATURE, 0);
    d874:	20 e0       	ldi	r18, 0x00	; 0
    d876:	40 e0       	ldi	r20, 0x00	; 0
    d878:	6d e1       	ldi	r22, 0x1D	; 29
    d87a:	ce 01       	movw	r24, r28
    d87c:	0e 94 4f 66 	call	0xcc9e	; 0xcc9e <RF24::write_register(unsigned char, unsigned char, bool)>
C:\Program Files (x86)\Arduino\libraries\RF24-master/RF24.cpp:753
    }
    ack_payloads_enabled = false;     // ack payloads disabled by default
    d880:	1b 86       	std	Y+11, r1	; 0x0b
C:\Program Files (x86)\Arduino\libraries\RF24-master/RF24.cpp:754
    write_register(DYNPD, 0);         // disable dynamic payloads by default (for all pipes)
    d882:	20 e0       	ldi	r18, 0x00	; 0
    d884:	40 e0       	ldi	r20, 0x00	; 0
    d886:	6c e1       	ldi	r22, 0x1C	; 28
    d888:	ce 01       	movw	r24, r28
    d88a:	0e 94 4f 66 	call	0xcc9e	; 0xcc9e <RF24::write_register(unsigned char, unsigned char, bool)>
C:\Program Files (x86)\Arduino\libraries\RF24-master/RF24.cpp:755
    dynamic_payloads_enabled = false;
    d88e:	1a 86       	std	Y+10, r1	; 0x0a
C:\Program Files (x86)\Arduino\libraries\RF24-master/RF24.cpp:756
    write_register(EN_AA, 0x3F);      // enable auto-ack on all pipes
    d890:	20 e0       	ldi	r18, 0x00	; 0
    d892:	4f e3       	ldi	r20, 0x3F	; 63
    d894:	61 e0       	ldi	r22, 0x01	; 1
    d896:	ce 01       	movw	r24, r28
    d898:	0e 94 4f 66 	call	0xcc9e	; 0xcc9e <RF24::write_register(unsigned char, unsigned char, bool)>
C:\Program Files (x86)\Arduino\libraries\RF24-master/RF24.cpp:757
    write_register(EN_RXADDR, 3);     // only open RX pipes 0 & 1
    d89c:	20 e0       	ldi	r18, 0x00	; 0
    d89e:	43 e0       	ldi	r20, 0x03	; 3
    d8a0:	62 e0       	ldi	r22, 0x02	; 2
    d8a2:	ce 01       	movw	r24, r28
    d8a4:	0e 94 4f 66 	call	0xcc9e	; 0xcc9e <RF24::write_register(unsigned char, unsigned char, bool)>
C:\Program Files (x86)\Arduino\libraries\RF24-master/RF24.cpp:758
    setPayloadSize(32);               // set static payload size to 32 (max) bytes by default
    d8a8:	60 e2       	ldi	r22, 0x20	; 32
    d8aa:	ce 01       	movw	r24, r28
    d8ac:	0e 94 0c 68 	call	0xd018	; 0xd018 <RF24::setPayloadSize(unsigned char)>
C:\Program Files (x86)\Arduino\libraries\RF24-master/RF24.cpp:759
    setAddressWidth(5);               // set default address length to (max) 5 bytes
    d8b0:	65 e0       	ldi	r22, 0x05	; 5
    d8b2:	ce 01       	movw	r24, r28
    d8b4:	0e 94 f7 68 	call	0xd1ee	; 0xd1ee <RF24::setAddressWidth(unsigned char)>
C:\Program Files (x86)\Arduino\libraries\RF24-master/RF24.cpp:764

    // Set up default configuration.  Callers can always change it later.
    // This channel should be universally safe and not bleed over into adjacent
    // spectrum.
    setChannel(76);
    d8b8:	6c e4       	ldi	r22, 0x4C	; 76
    d8ba:	ce 01       	movw	r24, r28
    d8bc:	0e 94 01 68 	call	0xd002	; 0xd002 <RF24::setChannel(unsigned char)>
C:\Program Files (x86)\Arduino\libraries\RF24-master/RF24.cpp:768

    // Reset current status
    // Notice reset and flush is the last thing we do
    write_register(NRF_STATUS, _BV(RX_DR) | _BV(TX_DS) | _BV(MAX_RT));
    d8c0:	20 e0       	ldi	r18, 0x00	; 0
    d8c2:	40 e7       	ldi	r20, 0x70	; 112
    d8c4:	67 e0       	ldi	r22, 0x07	; 7
    d8c6:	ce 01       	movw	r24, r28
    d8c8:	0e 94 4f 66 	call	0xcc9e	; 0xcc9e <RF24::write_register(unsigned char, unsigned char, bool)>
C:\Program Files (x86)\Arduino\libraries\RF24-master/RF24.cpp:772


    // Flush buffers
    flush_rx();
    d8cc:	ce 01       	movw	r24, r28
    d8ce:	0e 94 eb 66 	call	0xcdd6	; 0xcdd6 <RF24::flush_rx()>
C:\Program Files (x86)\Arduino\libraries\RF24-master/RF24.cpp:773
    flush_tx();
    d8d2:	ce 01       	movw	r24, r28
    d8d4:	0e 94 f5 66 	call	0xcdea	; 0xcdea <RF24::flush_tx()>
C:\Program Files (x86)\Arduino\libraries\RF24-master/RF24.cpp:782
    //      Enable PTX
    //      Power Up
    //      16-bit CRC (CRC required by auto-ack)
    // Do not write CE high so radio will remain in standby I mode
    // PTX should use only 22uA of power
    write_register(NRF_CONFIG, (_BV(EN_CRC) | _BV(CRCO)) );
    d8d8:	20 e0       	ldi	r18, 0x00	; 0
    d8da:	4c e0       	ldi	r20, 0x0C	; 12
    d8dc:	60 e0       	ldi	r22, 0x00	; 0
    d8de:	ce 01       	movw	r24, r28
    d8e0:	0e 94 4f 66 	call	0xcc9e	; 0xcc9e <RF24::write_register(unsigned char, unsigned char, bool)>
C:\Program Files (x86)\Arduino\libraries\RF24-master/RF24.cpp:783
    config_reg = read_register(NRF_CONFIG);
    d8e4:	60 e0       	ldi	r22, 0x00	; 0
    d8e6:	ce 01       	movw	r24, r28
    d8e8:	0e 94 10 66 	call	0xcc20	; 0xcc20 <RF24::read_register(unsigned char)>
    d8ec:	8a 8b       	std	Y+18, r24	; 0x12
C:\Program Files (x86)\Arduino\libraries\RF24-master/RF24.cpp:785

    powerUp();
    d8ee:	ce 01       	movw	r24, r28
    d8f0:	0e 94 55 68 	call	0xd0aa	; 0xd0aa <RF24::powerUp()>
C:\Program Files (x86)\Arduino\libraries\RF24-master/RF24.cpp:788

    // if config is not set correctly then there was a bad response from module
    return config_reg == (_BV(EN_CRC) | _BV(CRCO) | _BV(PWR_UP)) ? true : false;
    d8f4:	81 e0       	ldi	r24, 0x01	; 1
    d8f6:	9a 89       	ldd	r25, Y+18	; 0x12
    d8f8:	9e 30       	cpi	r25, 0x0E	; 14
    d8fa:	09 f0       	breq	.+2      	; 0xd8fe <RF24::begin()+0x110>
    d8fc:	80 e0       	ldi	r24, 0x00	; 0
C:\Program Files (x86)\Arduino\libraries\RF24-master/RF24.cpp:789
}
    d8fe:	df 91       	pop	r29
    d900:	cf 91       	pop	r28
    d902:	1f 91       	pop	r17
    d904:	08 95       	ret

0000d906 <__vector_35>:
__vector_35():
C:\Program Files (x86)\Arduino\libraries\Timer3/TimerThree.cpp:63 (discriminator 1)
  
	// sets data direction register for pwm output pin
	// activates the output pin
  if(pin == 5) { DDRE |= _BV(PORTE3); TCCR3A |= _BV(COM3A1); }
  if(pin == 2) { DDRE |= _BV(PORTE4); TCCR3A |= _BV(COM3B1); }
  if(pin == 3) { DDRE |= _BV(PORTE5); TCCR3A |= _BV(COM3C1); }
    d906:	1f 92       	push	r1
    d908:	0f 92       	push	r0
    d90a:	0f b6       	in	r0, 0x3f	; 63
    d90c:	0f 92       	push	r0
    d90e:	11 24       	eor	r1, r1
    d910:	0b b6       	in	r0, 0x3b	; 59
    d912:	0f 92       	push	r0
    d914:	2f 93       	push	r18
    d916:	3f 93       	push	r19
    d918:	4f 93       	push	r20
    d91a:	5f 93       	push	r21
    d91c:	6f 93       	push	r22
    d91e:	7f 93       	push	r23
    d920:	8f 93       	push	r24
    d922:	9f 93       	push	r25
    d924:	af 93       	push	r26
    d926:	bf 93       	push	r27
    d928:	ef 93       	push	r30
    d92a:	ff 93       	push	r31
    d92c:	e0 91 cb 14 	lds	r30, 0x14CB	; 0x8014cb <Timer3+0x3>
    d930:	f0 91 cc 14 	lds	r31, 0x14CC	; 0x8014cc <Timer3+0x4>
    d934:	19 95       	eicall
    d936:	ff 91       	pop	r31
    d938:	ef 91       	pop	r30
    d93a:	bf 91       	pop	r27
    d93c:	af 91       	pop	r26
    d93e:	9f 91       	pop	r25
    d940:	8f 91       	pop	r24
    d942:	7f 91       	pop	r23
    d944:	6f 91       	pop	r22
    d946:	5f 91       	pop	r21
    d948:	4f 91       	pop	r20
    d94a:	3f 91       	pop	r19
    d94c:	2f 91       	pop	r18
    d94e:	0f 90       	pop	r0
    d950:	0b be       	out	0x3b, r0	; 59
    d952:	0f 90       	pop	r0
    d954:	0f be       	out	0x3f, r0	; 63
    d956:	0f 90       	pop	r0
    d958:	1f 90       	pop	r1
    d95a:	18 95       	reti

0000d95c <TimerThree::setPeriod(long)>:
_ZN10TimerThree9setPeriodEl():
    d95c:	0f 93       	push	r16
    d95e:	1f 93       	push	r17
    d960:	fc 01       	movw	r30, r24
    d962:	13 e0       	ldi	r17, 0x03	; 3
    d964:	44 0f       	add	r20, r20
    d966:	55 1f       	adc	r21, r21
    d968:	66 1f       	adc	r22, r22
    d96a:	77 1f       	adc	r23, r23
    d96c:	1a 95       	dec	r17
    d96e:	d1 f7       	brne	.-12     	; 0xd964 <TimerThree::setPeriod(long)+0x8>
    d970:	41 15       	cp	r20, r1
    d972:	51 05       	cpc	r21, r1
    d974:	81 e0       	ldi	r24, 0x01	; 1
    d976:	68 07       	cpc	r22, r24
    d978:	71 05       	cpc	r23, r1
    d97a:	bc f4       	brge	.+46     	; 0xd9aa <TimerThree::setPeriod(long)+0x4e>
    d97c:	81 e0       	ldi	r24, 0x01	; 1
    d97e:	82 83       	std	Z+2, r24	; 0x02
    d980:	8a 01       	movw	r16, r20
    d982:	11 83       	std	Z+1, r17	; 0x01
    d984:	00 83       	st	Z, r16
    d986:	10 93 97 00 	sts	0x0097, r17	; 0x800097 <__TEXT_REGION_LENGTH__+0x700097>
    d98a:	00 93 96 00 	sts	0x0096, r16	; 0x800096 <__TEXT_REGION_LENGTH__+0x700096>
    d98e:	80 91 91 00 	lds	r24, 0x0091	; 0x800091 <__TEXT_REGION_LENGTH__+0x700091>
    d992:	88 7f       	andi	r24, 0xF8	; 248
    d994:	80 93 91 00 	sts	0x0091, r24	; 0x800091 <__TEXT_REGION_LENGTH__+0x700091>
    d998:	80 91 91 00 	lds	r24, 0x0091	; 0x800091 <__TEXT_REGION_LENGTH__+0x700091>
    d99c:	92 81       	ldd	r25, Z+2	; 0x02
    d99e:	89 2b       	or	r24, r25
    d9a0:	80 93 91 00 	sts	0x0091, r24	; 0x800091 <__TEXT_REGION_LENGTH__+0x700091>
    d9a4:	1f 91       	pop	r17
    d9a6:	0f 91       	pop	r16
    d9a8:	08 95       	ret
    d9aa:	8a 01       	movw	r16, r20
    d9ac:	9b 01       	movw	r18, r22
    d9ae:	b3 e0       	ldi	r27, 0x03	; 3
    d9b0:	35 95       	asr	r19
    d9b2:	27 95       	ror	r18
    d9b4:	17 95       	ror	r17
    d9b6:	07 95       	ror	r16
    d9b8:	ba 95       	dec	r27
    d9ba:	d1 f7       	brne	.-12     	; 0xd9b0 <TimerThree::setPeriod(long)+0x54>
    d9bc:	01 15       	cp	r16, r1
    d9be:	11 05       	cpc	r17, r1
    d9c0:	81 e0       	ldi	r24, 0x01	; 1
    d9c2:	28 07       	cpc	r18, r24
    d9c4:	31 05       	cpc	r19, r1
    d9c6:	1c f4       	brge	.+6      	; 0xd9ce <TimerThree::setPeriod(long)+0x72>
    d9c8:	82 e0       	ldi	r24, 0x02	; 2
    d9ca:	82 83       	std	Z+2, r24	; 0x02
    d9cc:	da cf       	rjmp	.-76     	; 0xd982 <TimerThree::setPeriod(long)+0x26>
    d9ce:	8a 01       	movw	r16, r20
    d9d0:	9b 01       	movw	r18, r22
    d9d2:	a6 e0       	ldi	r26, 0x06	; 6
    d9d4:	35 95       	asr	r19
    d9d6:	27 95       	ror	r18
    d9d8:	17 95       	ror	r17
    d9da:	07 95       	ror	r16
    d9dc:	aa 95       	dec	r26
    d9de:	d1 f7       	brne	.-12     	; 0xd9d4 <TimerThree::setPeriod(long)+0x78>
    d9e0:	01 15       	cp	r16, r1
    d9e2:	11 05       	cpc	r17, r1
    d9e4:	81 e0       	ldi	r24, 0x01	; 1
    d9e6:	28 07       	cpc	r18, r24
    d9e8:	31 05       	cpc	r19, r1
    d9ea:	14 f4       	brge	.+4      	; 0xd9f0 <TimerThree::setPeriod(long)+0x94>
    d9ec:	83 e0       	ldi	r24, 0x03	; 3
    d9ee:	ed cf       	rjmp	.-38     	; 0xd9ca <TimerThree::setPeriod(long)+0x6e>
    d9f0:	05 2f       	mov	r16, r21
    d9f2:	16 2f       	mov	r17, r22
    d9f4:	27 2f       	mov	r18, r23
    d9f6:	33 27       	eor	r19, r19
    d9f8:	27 fd       	sbrc	r18, 7
    d9fa:	3a 95       	dec	r19
    d9fc:	01 15       	cp	r16, r1
    d9fe:	11 05       	cpc	r17, r1
    da00:	81 e0       	ldi	r24, 0x01	; 1
    da02:	28 07       	cpc	r18, r24
    da04:	31 05       	cpc	r19, r1
    da06:	14 f4       	brge	.+4      	; 0xda0c <TimerThree::setPeriod(long)+0xb0>
    da08:	84 e0       	ldi	r24, 0x04	; 4
    da0a:	df cf       	rjmp	.-66     	; 0xd9ca <TimerThree::setPeriod(long)+0x6e>
    da0c:	8a 01       	movw	r16, r20
    da0e:	9b 01       	movw	r18, r22
    da10:	8a e0       	ldi	r24, 0x0A	; 10
    da12:	35 95       	asr	r19
    da14:	27 95       	ror	r18
    da16:	17 95       	ror	r17
    da18:	07 95       	ror	r16
    da1a:	8a 95       	dec	r24
    da1c:	d1 f7       	brne	.-12     	; 0xda12 <TimerThree::setPeriod(long)+0xb6>
    da1e:	85 e0       	ldi	r24, 0x05	; 5
    da20:	82 83       	std	Z+2, r24	; 0x02
    da22:	01 15       	cp	r16, r1
    da24:	11 05       	cpc	r17, r1
    da26:	81 e0       	ldi	r24, 0x01	; 1
    da28:	28 07       	cpc	r18, r24
    da2a:	31 05       	cpc	r19, r1
    da2c:	0c f4       	brge	.+2      	; 0xda30 <TimerThree::setPeriod(long)+0xd4>
    da2e:	a9 cf       	rjmp	.-174    	; 0xd982 <TimerThree::setPeriod(long)+0x26>
    da30:	0f ef       	ldi	r16, 0xFF	; 255
    da32:	1f ef       	ldi	r17, 0xFF	; 255
    da34:	20 e0       	ldi	r18, 0x00	; 0
    da36:	30 e0       	ldi	r19, 0x00	; 0
    da38:	a4 cf       	rjmp	.-184    	; 0xd982 <TimerThree::setPeriod(long)+0x26>

0000da3a <TimerThree::initialize(long)>:
_ZN10TimerThree10initializeEl():
    da3a:	10 92 90 00 	sts	0x0090, r1	; 0x800090 <__TEXT_REGION_LENGTH__+0x700090>
    da3e:	20 e1       	ldi	r18, 0x10	; 16
    da40:	20 93 91 00 	sts	0x0091, r18	; 0x800091 <__TEXT_REGION_LENGTH__+0x700091>
    da44:	0c 94 ae 6c 	jmp	0xd95c	; 0xd95c <TimerThree::setPeriod(long)>

0000da48 <TimerThree::start()>:
_ZN10TimerThree5startEv():
    da48:	e1 e9       	ldi	r30, 0x91	; 145
    da4a:	f0 e0       	ldi	r31, 0x00	; 0
    da4c:	20 81       	ld	r18, Z
    da4e:	dc 01       	movw	r26, r24
    da50:	12 96       	adiw	r26, 0x02	; 2
    da52:	8c 91       	ld	r24, X
    da54:	28 2b       	or	r18, r24
    da56:	20 83       	st	Z, r18
    da58:	08 95       	ret

0000da5a <TimerThree::attachInterrupt(void (*)(), long)>:
_ZN10TimerThree15attachInterruptEPFvvEl():
C:\Program Files (x86)\Arduino\libraries\Timer3/TimerThree.cpp:76
  if(pin == 2) TCCR3A &= ~_BV(COM3B1);   // clear the bit that enables pwm on PE4
  if(pin == 3) TCCR3A &= ~_BV(COM3C1);   // clear the bit that enables pwm on PE5
}

void TimerThree::attachInterrupt(void (*isr)(), long microseconds)
{
    da5a:	0f 93       	push	r16
    da5c:	1f 93       	push	r17
    da5e:	cf 93       	push	r28
    da60:	df 93       	push	r29
    da62:	ec 01       	movw	r28, r24
    da64:	8b 01       	movw	r16, r22
    da66:	ba 01       	movw	r22, r20
    da68:	a9 01       	movw	r20, r18
C:\Program Files (x86)\Arduino\libraries\Timer3/TimerThree.cpp:77
  if(microseconds > 0) setPeriod(microseconds);
    da6a:	14 16       	cp	r1, r20
    da6c:	15 06       	cpc	r1, r21
    da6e:	16 06       	cpc	r1, r22
    da70:	17 06       	cpc	r1, r23
    da72:	14 f4       	brge	.+4      	; 0xda78 <TimerThree::attachInterrupt(void (*)(), long)+0x1e>
C:\Program Files (x86)\Arduino\libraries\Timer3/TimerThree.cpp:77 (discriminator 1)
    da74:	0e 94 ae 6c 	call	0xd95c	; 0xd95c <TimerThree::setPeriod(long)>
C:\Program Files (x86)\Arduino\libraries\Timer3/TimerThree.cpp:78
  isrCallback = isr;                                       // register the user's callback with the real ISR
    da78:	1c 83       	std	Y+4, r17	; 0x04
    da7a:	0b 83       	std	Y+3, r16	; 0x03
C:\Program Files (x86)\Arduino\libraries\Timer3/TimerThree.cpp:79
  TIMSK3 = _BV(TOIE1);                                     // sets the timer overflow interrupt enable bit
    da7c:	81 e0       	ldi	r24, 0x01	; 1
    da7e:	80 93 71 00 	sts	0x0071, r24	; 0x800071 <__TEXT_REGION_LENGTH__+0x700071>
C:\Program Files (x86)\Arduino\libraries\Timer3/TimerThree.cpp:80
  sei();                                                   // ensures that interrupts are globally enabled
    da82:	78 94       	sei
C:\Program Files (x86)\Arduino\libraries\Timer3/TimerThree.cpp:81
  start();
    da84:	ce 01       	movw	r24, r28
C:\Program Files (x86)\Arduino\libraries\Timer3/TimerThree.cpp:82
}
    da86:	df 91       	pop	r29
    da88:	cf 91       	pop	r28
    da8a:	1f 91       	pop	r17
    da8c:	0f 91       	pop	r16
C:\Program Files (x86)\Arduino\libraries\Timer3/TimerThree.cpp:81
{
  if(microseconds > 0) setPeriod(microseconds);
  isrCallback = isr;                                       // register the user's callback with the real ISR
  TIMSK3 = _BV(TOIE1);                                     // sets the timer overflow interrupt enable bit
  sei();                                                   // ensures that interrupts are globally enabled
  start();
    da8e:	0c 94 24 6d 	jmp	0xda48	; 0xda48 <TimerThree::start()>

0000da92 <ELClient::write(unsigned char)>:
_ZN8ELClient5writeEh():
C:\Program Files (x86)\Arduino\libraries\ELClient/ELClient.cpp:305
  uint8_t temp = 0;
  while (pad--) {
    write(temp);
    crc = crc16Add(temp, crc);
  }
}
    da92:	cf 93       	push	r28
    da94:	df 93       	push	r29
    da96:	ec 01       	movw	r28, r24
    da98:	8a 85       	ldd	r24, Y+10	; 0x0a
    da9a:	9b 85       	ldd	r25, Y+11	; 0x0b
    da9c:	dc 01       	movw	r26, r24
    da9e:	ed 91       	ld	r30, X+
    daa0:	fc 91       	ld	r31, X
    daa2:	01 90       	ld	r0, Z+
    daa4:	f0 81       	ld	r31, Z
    daa6:	e0 2d       	mov	r30, r0
    daa8:	60 3c       	cpi	r22, 0xC0	; 192
    daaa:	29 f0       	breq	.+10     	; 0xdab6 <ELClient::write(unsigned char)+0x24>
    daac:	6b 3d       	cpi	r22, 0xDB	; 219
    daae:	79 f0       	breq	.+30     	; 0xdace <ELClient::write(unsigned char)+0x3c>
    dab0:	df 91       	pop	r29
    dab2:	cf 91       	pop	r28
    dab4:	19 94       	eijmp
    dab6:	6b ed       	ldi	r22, 0xDB	; 219
    dab8:	19 95       	eicall
    daba:	8a 85       	ldd	r24, Y+10	; 0x0a
    dabc:	9b 85       	ldd	r25, Y+11	; 0x0b
    dabe:	dc 01       	movw	r26, r24
    dac0:	ed 91       	ld	r30, X+
    dac2:	fc 91       	ld	r31, X
    dac4:	01 90       	ld	r0, Z+
    dac6:	f0 81       	ld	r31, Z
    dac8:	e0 2d       	mov	r30, r0
    daca:	6c ed       	ldi	r22, 0xDC	; 220
    dacc:	f1 cf       	rjmp	.-30     	; 0xdab0 <ELClient::write(unsigned char)+0x1e>
    dace:	6b ed       	ldi	r22, 0xDB	; 219
    dad0:	19 95       	eicall
    dad2:	8a 85       	ldd	r24, Y+10	; 0x0a
    dad4:	9b 85       	ldd	r25, Y+11	; 0x0b
    dad6:	dc 01       	movw	r26, r24
    dad8:	ed 91       	ld	r30, X+
    dada:	fc 91       	ld	r31, X
    dadc:	01 90       	ld	r0, Z+
    dade:	f0 81       	ld	r31, Z
    dae0:	e0 2d       	mov	r30, r0
    dae2:	6d ed       	ldi	r22, 0xDD	; 221
    dae4:	e5 cf       	rjmp	.-54     	; 0xdab0 <ELClient::write(unsigned char)+0x1e>

0000dae6 <ELClient::write(void*, unsigned int)>:
_ZN8ELClient5writeEPvj():
    dae6:	ef 92       	push	r14
    dae8:	ff 92       	push	r15
    daea:	0f 93       	push	r16
    daec:	1f 93       	push	r17
    daee:	cf 93       	push	r28
    daf0:	df 93       	push	r29
    daf2:	7c 01       	movw	r14, r24
    daf4:	eb 01       	movw	r28, r22
    daf6:	8b 01       	movw	r16, r22
    daf8:	04 0f       	add	r16, r20
    dafa:	15 1f       	adc	r17, r21
    dafc:	c0 17       	cp	r28, r16
    dafe:	d1 07       	cpc	r29, r17
    db00:	29 f0       	breq	.+10     	; 0xdb0c <ELClient::write(void*, unsigned int)+0x26>
    db02:	69 91       	ld	r22, Y+
    db04:	c7 01       	movw	r24, r14
    db06:	0e 94 49 6d 	call	0xda92	; 0xda92 <ELClient::write(unsigned char)>
    db0a:	f8 cf       	rjmp	.-16     	; 0xdafc <ELClient::write(void*, unsigned int)+0x16>
    db0c:	df 91       	pop	r29
    db0e:	cf 91       	pop	r28
    db10:	1f 91       	pop	r17
    db12:	0f 91       	pop	r16
    db14:	ff 90       	pop	r15
    db16:	ef 90       	pop	r14
    db18:	08 95       	ret

0000db1a <ELClient::Request()>:
_ZN8ELClient7RequestEv():
    db1a:	cf 93       	push	r28
    db1c:	df 93       	push	r29
    db1e:	ec 01       	movw	r28, r24
    db20:	bc 01       	movw	r22, r24
    db22:	63 5f       	subi	r22, 0xF3	; 243
    db24:	7f 4f       	sbci	r23, 0xFF	; 255
    db26:	42 e0       	ldi	r20, 0x02	; 2
    db28:	50 e0       	ldi	r21, 0x00	; 0
    db2a:	0e 94 73 6d 	call	0xdae6	; 0xdae6 <ELClient::write(void*, unsigned int)>
    db2e:	8a 85       	ldd	r24, Y+10	; 0x0a
    db30:	9b 85       	ldd	r25, Y+11	; 0x0b
    db32:	dc 01       	movw	r26, r24
    db34:	ed 91       	ld	r30, X+
    db36:	fc 91       	ld	r31, X
    db38:	01 90       	ld	r0, Z+
    db3a:	f0 81       	ld	r31, Z
    db3c:	e0 2d       	mov	r30, r0
    db3e:	60 ec       	ldi	r22, 0xC0	; 192
    db40:	df 91       	pop	r29
    db42:	cf 91       	pop	r28
    db44:	19 94       	eijmp

0000db46 <ELClient::ELClient(Stream*)>:
_ZN8ELClientC2EP6Stream():
    db46:	0f 93       	push	r16
    db48:	1f 93       	push	r17
    db4a:	cf 93       	push	r28
    db4c:	df 93       	push	r29
    db4e:	ec 01       	movw	r28, r24
    db50:	8b 01       	movw	r16, r22
    db52:	02 96       	adiw	r24, 0x02	; 2
    db54:	0e 94 38 7a 	call	0xf470	; 0xf470 <FP<void, void*>::FP()>
    db58:	1b 87       	std	Y+11, r17	; 0x0b
    db5a:	0a 87       	std	Y+10, r16	; 0x0a
    db5c:	1c 86       	std	Y+12, r1	; 0x0c
_ZN8ELClient4initEv():
    db5e:	ce 01       	movw	r24, r28
    db60:	46 96       	adiw	r24, 0x16	; 22
    db62:	98 8b       	std	Y+16, r25	; 0x10
    db64:	8f 87       	std	Y+15, r24	; 0x0f
    db66:	80 e8       	ldi	r24, 0x80	; 128
    db68:	90 e0       	ldi	r25, 0x00	; 0
    db6a:	9a 8b       	std	Y+18, r25	; 0x12
    db6c:	89 8b       	std	Y+17, r24	; 0x11
    db6e:	1c 8a       	std	Y+20, r1	; 0x14
    db70:	1b 8a       	std	Y+19, r1	; 0x13
    db72:	1d 8a       	std	Y+21, r1	; 0x15
_ZN8ELClientC2EP6Stream():
    db74:	df 91       	pop	r29
    db76:	cf 91       	pop	r28
    db78:	1f 91       	pop	r17
    db7a:	0f 91       	pop	r16
    db7c:	08 95       	ret

0000db7e <ELClient::DBG(char const*)>:
_ZN8ELClient3DBGEPKc():
    db7e:	fc 01       	movw	r30, r24
    db80:	24 85       	ldd	r18, Z+12	; 0x0c
    db82:	22 23       	and	r18, r18
    db84:	21 f0       	breq	.+8      	; 0xdb8e <ELClient::DBG(char const*)+0x10>
    db86:	80 81       	ld	r24, Z
    db88:	91 81       	ldd	r25, Z+1	; 0x01
    db8a:	0c 94 c3 8b 	jmp	0x11786	; 0x11786 <Print::println(char const*)>
    db8e:	08 95       	ret

0000db90 <ELClient::crc16Add(unsigned char, unsigned int)>:
_ZN8ELClient8crc16AddEhj():
    db90:	46 27       	eor	r20, r22
    db92:	54 27       	eor	r21, r20
    db94:	45 27       	eor	r20, r21
    db96:	54 27       	eor	r21, r20
    db98:	ca 01       	movw	r24, r20
    db9a:	24 e0       	ldi	r18, 0x04	; 4
    db9c:	88 0f       	add	r24, r24
    db9e:	99 1f       	adc	r25, r25
    dba0:	2a 95       	dec	r18
    dba2:	e1 f7       	brne	.-8      	; 0xdb9c <ELClient::crc16Add(unsigned char, unsigned int)+0xc>
    dba4:	88 27       	eor	r24, r24
    dba6:	90 7f       	andi	r25, 0xF0	; 240
    dba8:	84 27       	eor	r24, r20
    dbaa:	95 27       	eor	r25, r21
    dbac:	ac 01       	movw	r20, r24
    dbae:	45 2f       	mov	r20, r21
    dbb0:	55 27       	eor	r21, r21
    dbb2:	42 95       	swap	r20
    dbb4:	4f 70       	andi	r20, 0x0F	; 15
    dbb6:	84 27       	eor	r24, r20
    dbb8:	95 27       	eor	r25, r21
    dbba:	9c 01       	movw	r18, r24
    dbbc:	45 e0       	ldi	r20, 0x05	; 5
    dbbe:	36 95       	lsr	r19
    dbc0:	27 95       	ror	r18
    dbc2:	4a 95       	dec	r20
    dbc4:	e1 f7       	brne	.-8      	; 0xdbbe <ELClient::crc16Add(unsigned char, unsigned int)+0x2e>
    dbc6:	28 7f       	andi	r18, 0xF8	; 248
    dbc8:	37 70       	andi	r19, 0x07	; 7
    dbca:	82 27       	eor	r24, r18
    dbcc:	93 27       	eor	r25, r19
    dbce:	08 95       	ret

0000dbd0 <ELClient::crc16Data(unsigned char const*, unsigned int, unsigned int)>:
_ZN8ELClient9crc16DataEPKhjj():
    dbd0:	ef 92       	push	r14
    dbd2:	ff 92       	push	r15
    dbd4:	0f 93       	push	r16
    dbd6:	1f 93       	push	r17
    dbd8:	cf 93       	push	r28
    dbda:	df 93       	push	r29
    dbdc:	7c 01       	movw	r14, r24
    dbde:	eb 01       	movw	r28, r22
    dbe0:	8b 01       	movw	r16, r22
    dbe2:	04 0f       	add	r16, r20
    dbe4:	15 1f       	adc	r17, r21
    dbe6:	c9 01       	movw	r24, r18
    dbe8:	c0 17       	cp	r28, r16
    dbea:	d1 07       	cpc	r29, r17
    dbec:	31 f0       	breq	.+12     	; 0xdbfa <ELClient::crc16Data(unsigned char const*, unsigned int, unsigned int)+0x2a>
    dbee:	69 91       	ld	r22, Y+
    dbf0:	ac 01       	movw	r20, r24
    dbf2:	c7 01       	movw	r24, r14
    dbf4:	0e 94 c8 6d 	call	0xdb90	; 0xdb90 <ELClient::crc16Add(unsigned char, unsigned int)>
    dbf8:	f7 cf       	rjmp	.-18     	; 0xdbe8 <ELClient::crc16Data(unsigned char const*, unsigned int, unsigned int)+0x18>
    dbfa:	df 91       	pop	r29
    dbfc:	cf 91       	pop	r28
    dbfe:	1f 91       	pop	r17
    dc00:	0f 91       	pop	r16
    dc02:	ff 90       	pop	r15
    dc04:	ef 90       	pop	r14
    dc06:	08 95       	ret

0000dc08 <ELClient::protoCompletedCb()>:
_ZN8ELClient16protoCompletedCbEv():
    dc08:	af 92       	push	r10
    dc0a:	bf 92       	push	r11
    dc0c:	cf 92       	push	r12
    dc0e:	df 92       	push	r13
    dc10:	ef 92       	push	r14
    dc12:	ff 92       	push	r15
    dc14:	0f 93       	push	r16
    dc16:	1f 93       	push	r17
    dc18:	cf 93       	push	r28
    dc1a:	df 93       	push	r29
    dc1c:	00 d0       	rcall	.+0      	; 0xdc1e <ELClient::protoCompletedCb()+0x16>
    dc1e:	00 d0       	rcall	.+0      	; 0xdc20 <ELClient::protoCompletedCb()+0x18>
    dc20:	cd b7       	in	r28, 0x3d	; 61
    dc22:	de b7       	in	r29, 0x3e	; 62
    dc24:	8c 01       	movw	r16, r24
    dc26:	dc 01       	movw	r26, r24
    dc28:	1f 96       	adiw	r26, 0x0f	; 15
    dc2a:	ed 90       	ld	r14, X+
    dc2c:	fc 90       	ld	r15, X
    dc2e:	50 97       	sbiw	r26, 0x10	; 16
    dc30:	1c 96       	adiw	r26, 0x0c	; 12
    dc32:	8c 91       	ld	r24, X
    dc34:	1c 97       	sbiw	r26, 0x0c	; 12
    dc36:	88 23       	and	r24, r24
    dc38:	09 f4       	brne	.+2      	; 0xdc3c <ELClient::protoCompletedCb()+0x34>
    dc3a:	7d c0       	rjmp	.+250    	; 0xdd36 <ELClient::protoCompletedCb()+0x12e>
    dc3c:	6a ea       	ldi	r22, 0xAA	; 170
    dc3e:	7a e0       	ldi	r23, 0x0A	; 10
    dc40:	8d 91       	ld	r24, X+
    dc42:	9c 91       	ld	r25, X
    dc44:	0e 94 9e 8b 	call	0x1173c	; 0x1173c <Print::print(char const*)>
    dc48:	f8 01       	movw	r30, r16
    dc4a:	63 89       	ldd	r22, Z+19	; 0x13
    dc4c:	74 89       	ldd	r23, Z+20	; 0x14
    dc4e:	4a e0       	ldi	r20, 0x0A	; 10
    dc50:	50 e0       	ldi	r21, 0x00	; 0
    dc52:	80 81       	ld	r24, Z
    dc54:	91 81       	ldd	r25, Z+1	; 0x01
    dc56:	0e 94 bf 8c 	call	0x1197e	; 0x1197e <Print::print(unsigned int, int)>
    dc5a:	64 eb       	ldi	r22, 0xB4	; 180
    dc5c:	7a e0       	ldi	r23, 0x0A	; 10
    dc5e:	d8 01       	movw	r26, r16
    dc60:	8d 91       	ld	r24, X+
    dc62:	9c 91       	ld	r25, X
    dc64:	0e 94 9e 8b 	call	0x1173c	; 0x1173c <Print::print(char const*)>
    dc68:	f8 01       	movw	r30, r16
    dc6a:	47 85       	ldd	r20, Z+15	; 0x0f
    dc6c:	50 89       	ldd	r21, Z+16	; 0x10
    dc6e:	05 2e       	mov	r0, r21
    dc70:	00 0c       	add	r0, r0
    dc72:	66 0b       	sbc	r22, r22
    dc74:	77 0b       	sbc	r23, r23
    dc76:	20 e1       	ldi	r18, 0x10	; 16
    dc78:	30 e0       	ldi	r19, 0x00	; 0
    dc7a:	80 81       	ld	r24, Z
    dc7c:	91 81       	ldd	r25, Z+1	; 0x01
    dc7e:	0e 94 99 8c 	call	0x11932	; 0x11932 <Print::print(unsigned long, int)>
    dc82:	68 ed       	ldi	r22, 0xD8	; 216
    dc84:	7a e0       	ldi	r23, 0x0A	; 10
    dc86:	d8 01       	movw	r26, r16
    dc88:	8d 91       	ld	r24, X+
    dc8a:	9c 91       	ld	r25, X
    dc8c:	0e 94 9e 8b 	call	0x1173c	; 0x1173c <Print::print(char const*)>
    dc90:	f7 01       	movw	r30, r14
    dc92:	60 81       	ld	r22, Z
    dc94:	71 81       	ldd	r23, Z+1	; 0x01
    dc96:	40 e1       	ldi	r20, 0x10	; 16
    dc98:	50 e0       	ldi	r21, 0x00	; 0
    dc9a:	d8 01       	movw	r26, r16
    dc9c:	8d 91       	ld	r24, X+
    dc9e:	9c 91       	ld	r25, X
    dca0:	0e 94 bf 8c 	call	0x1197e	; 0x1197e <Print::print(unsigned int, int)>
    dca4:	69 ed       	ldi	r22, 0xD9	; 217
    dca6:	7a e0       	ldi	r23, 0x0A	; 10
    dca8:	f8 01       	movw	r30, r16
    dcaa:	80 81       	ld	r24, Z
    dcac:	91 81       	ldd	r25, Z+1	; 0x01
    dcae:	0e 94 9e 8b 	call	0x1173c	; 0x1173c <Print::print(char const*)>
    dcb2:	d7 01       	movw	r26, r14
    dcb4:	14 96       	adiw	r26, 0x04	; 4
    dcb6:	4d 91       	ld	r20, X+
    dcb8:	5d 91       	ld	r21, X+
    dcba:	6d 91       	ld	r22, X+
    dcbc:	7c 91       	ld	r23, X
    dcbe:	17 97       	sbiw	r26, 0x07	; 7
    dcc0:	20 e1       	ldi	r18, 0x10	; 16
    dcc2:	30 e0       	ldi	r19, 0x00	; 0
    dcc4:	f8 01       	movw	r30, r16
    dcc6:	80 81       	ld	r24, Z
    dcc8:	91 81       	ldd	r25, Z+1	; 0x01
    dcca:	0e 94 99 8c 	call	0x11932	; 0x11932 <Print::print(unsigned long, int)>
    dcce:	69 ed       	ldi	r22, 0xD9	; 217
    dcd0:	7a e0       	ldi	r23, 0x0A	; 10
    dcd2:	d8 01       	movw	r26, r16
    dcd4:	8d 91       	ld	r24, X+
    dcd6:	9c 91       	ld	r25, X
    dcd8:	0e 94 9e 8b 	call	0x1173c	; 0x1173c <Print::print(char const*)>
    dcdc:	f7 01       	movw	r30, r14
    dcde:	62 81       	ldd	r22, Z+2	; 0x02
    dce0:	73 81       	ldd	r23, Z+3	; 0x03
    dce2:	40 e1       	ldi	r20, 0x10	; 16
    dce4:	50 e0       	ldi	r21, 0x00	; 0
    dce6:	d8 01       	movw	r26, r16
    dce8:	8d 91       	ld	r24, X+
    dcea:	9c 91       	ld	r25, X
    dcec:	0e 94 bf 8c 	call	0x1197e	; 0x1197e <Print::print(unsigned int, int)>
    dcf0:	88 e0       	ldi	r24, 0x08	; 8
    dcf2:	c8 2e       	mov	r12, r24
    dcf4:	d1 2c       	mov	r13, r1
    dcf6:	f8 01       	movw	r30, r16
    dcf8:	80 81       	ld	r24, Z
    dcfa:	91 81       	ldd	r25, Z+1	; 0x01
    dcfc:	23 89       	ldd	r18, Z+19	; 0x13
    dcfe:	34 89       	ldd	r19, Z+20	; 0x14
    dd00:	c2 16       	cp	r12, r18
    dd02:	d3 06       	cpc	r13, r19
    dd04:	b0 f4       	brcc	.+44     	; 0xdd32 <ELClient::protoCompletedCb()+0x12a>
    dd06:	69 ed       	ldi	r22, 0xD9	; 217
    dd08:	7a e0       	ldi	r23, 0x0A	; 10
    dd0a:	0e 94 9e 8b 	call	0x1173c	; 0x1173c <Print::print(char const*)>
    dd0e:	d8 01       	movw	r26, r16
    dd10:	1f 96       	adiw	r26, 0x0f	; 15
    dd12:	ed 91       	ld	r30, X+
    dd14:	fc 91       	ld	r31, X
    dd16:	50 97       	sbiw	r26, 0x10	; 16
    dd18:	ec 0d       	add	r30, r12
    dd1a:	fd 1d       	adc	r31, r13
    dd1c:	40 e1       	ldi	r20, 0x10	; 16
    dd1e:	50 e0       	ldi	r21, 0x00	; 0
    dd20:	60 81       	ld	r22, Z
    dd22:	8d 91       	ld	r24, X+
    dd24:	9c 91       	ld	r25, X
    dd26:	0e 94 a6 8c 	call	0x1194c	; 0x1194c <Print::print(unsigned char, int)>
    dd2a:	bf ef       	ldi	r27, 0xFF	; 255
    dd2c:	cb 1a       	sub	r12, r27
    dd2e:	db 0a       	sbc	r13, r27
    dd30:	e2 cf       	rjmp	.-60     	; 0xdcf6 <ELClient::protoCompletedCb()+0xee>
    dd32:	0e 94 ad 8b 	call	0x1175a	; 0x1175a <Print::println()>
    dd36:	f8 01       	movw	r30, r16
    dd38:	a3 88       	ldd	r10, Z+19	; 0x13
    dd3a:	b4 88       	ldd	r11, Z+20	; 0x14
    dd3c:	f2 e0       	ldi	r31, 0x02	; 2
    dd3e:	af 1a       	sub	r10, r31
    dd40:	b1 08       	sbc	r11, r1
    dd42:	d8 01       	movw	r26, r16
    dd44:	1f 96       	adiw	r26, 0x0f	; 15
    dd46:	cd 90       	ld	r12, X+
    dd48:	dc 90       	ld	r13, X
    dd4a:	30 e0       	ldi	r19, 0x00	; 0
    dd4c:	20 e0       	ldi	r18, 0x00	; 0
    dd4e:	a5 01       	movw	r20, r10
    dd50:	b6 01       	movw	r22, r12
    dd52:	c8 01       	movw	r24, r16
    dd54:	0e 94 e8 6d 	call	0xdbd0	; 0xdbd0 <ELClient::crc16Data(unsigned char const*, unsigned int, unsigned int)>
    dd58:	ca 0c       	add	r12, r10
    dd5a:	db 1c       	adc	r13, r11
    dd5c:	f6 01       	movw	r30, r12
    dd5e:	20 81       	ld	r18, Z
    dd60:	31 81       	ldd	r19, Z+1	; 0x01
    dd62:	82 17       	cp	r24, r18
    dd64:	93 07       	cpc	r25, r19
    dd66:	41 f0       	breq	.+16     	; 0xdd78 <ELClient::protoCompletedCb()+0x170>
    dd68:	67 eb       	ldi	r22, 0xB7	; 183
    dd6a:	7a e0       	ldi	r23, 0x0A	; 10
    dd6c:	c8 01       	movw	r24, r16
    dd6e:	0e 94 bf 6d 	call	0xdb7e	; 0xdb7e <ELClient::DBG(char const*)>
    dd72:	f1 2c       	mov	r15, r1
    dd74:	e1 2c       	mov	r14, r1
    dd76:	33 c0       	rjmp	.+102    	; 0xddde <ELClient::protoCompletedCb()+0x1d6>
    dd78:	d7 01       	movw	r26, r14
    dd7a:	8d 91       	ld	r24, X+
    dd7c:	9c 91       	ld	r25, X
    dd7e:	82 30       	cpi	r24, 0x02	; 2
    dd80:	91 05       	cpc	r25, r1
    dd82:	a9 f0       	breq	.+42     	; 0xddae <ELClient::protoCompletedCb()+0x1a6>
    dd84:	83 30       	cpi	r24, 0x03	; 3
    dd86:	91 05       	cpc	r25, r1
    dd88:	e1 f1       	breq	.+120    	; 0xde02 <ELClient::protoCompletedCb()+0x1fa>
    dd8a:	01 97       	sbiw	r24, 0x01	; 1
    dd8c:	09 f0       	breq	.+2      	; 0xdd90 <ELClient::protoCompletedCb()+0x188>
    dd8e:	79 c0       	rjmp	.+242    	; 0xde82 <ELClient::protoCompletedCb()+0x27a>
    dd90:	6b ed       	ldi	r22, 0xDB	; 219
    dd92:	7a e0       	ldi	r23, 0x0A	; 10
    dd94:	f8 01       	movw	r30, r16
    dd96:	80 81       	ld	r24, Z
    dd98:	91 81       	ldd	r25, Z+1	; 0x01
    dd9a:	0e 94 c3 8b 	call	0x11786	; 0x11786 <Print::println(char const*)>
    dd9e:	d8 01       	movw	r26, r16
    dda0:	18 96       	adiw	r26, 0x08	; 8
    dda2:	ed 91       	ld	r30, X+
    dda4:	fc 91       	ld	r31, X
    dda6:	30 97       	sbiw	r30, 0x00	; 0
    dda8:	21 f3       	breq	.-56     	; 0xdd72 <ELClient::protoCompletedCb()+0x16a>
    ddaa:	19 95       	eicall
    ddac:	e2 cf       	rjmp	.-60     	; 0xdd72 <ELClient::protoCompletedCb()+0x16a>
    ddae:	f8 01       	movw	r30, r16
    ddb0:	84 85       	ldd	r24, Z+12	; 0x0c
    ddb2:	88 23       	and	r24, r24
    ddb4:	a1 f0       	breq	.+40     	; 0xddde <ELClient::protoCompletedCb()+0x1d6>
    ddb6:	68 ec       	ldi	r22, 0xC8	; 200
    ddb8:	7a e0       	ldi	r23, 0x0A	; 10
    ddba:	80 81       	ld	r24, Z
    ddbc:	91 81       	ldd	r25, Z+1	; 0x01
    ddbe:	0e 94 9e 8b 	call	0x1173c	; 0x1173c <Print::print(char const*)>
    ddc2:	d7 01       	movw	r26, r14
    ddc4:	14 96       	adiw	r26, 0x04	; 4
    ddc6:	4d 91       	ld	r20, X+
    ddc8:	5d 91       	ld	r21, X+
    ddca:	6d 91       	ld	r22, X+
    ddcc:	7c 91       	ld	r23, X
    ddce:	17 97       	sbiw	r26, 0x07	; 7
    ddd0:	2a e0       	ldi	r18, 0x0A	; 10
    ddd2:	30 e0       	ldi	r19, 0x00	; 0
    ddd4:	f8 01       	movw	r30, r16
    ddd6:	80 81       	ld	r24, Z
    ddd8:	91 81       	ldd	r25, Z+1	; 0x01
    ddda:	0e 94 d7 8c 	call	0x119ae	; 0x119ae <Print::println(unsigned long, int)>
    ddde:	c7 01       	movw	r24, r14
    dde0:	26 96       	adiw	r28, 0x06	; 6
    dde2:	0f b6       	in	r0, 0x3f	; 63
    dde4:	f8 94       	cli
    dde6:	de bf       	out	0x3e, r29	; 62
    dde8:	0f be       	out	0x3f, r0	; 63
    ddea:	cd bf       	out	0x3d, r28	; 61
    ddec:	df 91       	pop	r29
    ddee:	cf 91       	pop	r28
    ddf0:	1f 91       	pop	r17
    ddf2:	0f 91       	pop	r16
    ddf4:	ff 90       	pop	r15
    ddf6:	ef 90       	pop	r14
    ddf8:	df 90       	pop	r13
    ddfa:	cf 90       	pop	r12
    ddfc:	bf 90       	pop	r11
    ddfe:	af 90       	pop	r10
    de00:	08 95       	ret
    de02:	d8 01       	movw	r26, r16
    de04:	1c 96       	adiw	r26, 0x0c	; 12
    de06:	8c 91       	ld	r24, X
    de08:	1c 97       	sbiw	r26, 0x0c	; 12
    de0a:	88 23       	and	r24, r24
    de0c:	21 f1       	breq	.+72     	; 0xde56 <ELClient::protoCompletedCb()+0x24e>
    de0e:	61 ed       	ldi	r22, 0xD1	; 209
    de10:	7a e0       	ldi	r23, 0x0A	; 10
    de12:	8d 91       	ld	r24, X+
    de14:	9c 91       	ld	r25, X
    de16:	0e 94 9e 8b 	call	0x1173c	; 0x1173c <Print::print(char const*)>
    de1a:	f7 01       	movw	r30, r14
    de1c:	44 81       	ldd	r20, Z+4	; 0x04
    de1e:	55 81       	ldd	r21, Z+5	; 0x05
    de20:	66 81       	ldd	r22, Z+6	; 0x06
    de22:	77 81       	ldd	r23, Z+7	; 0x07
    de24:	2a e0       	ldi	r18, 0x0A	; 10
    de26:	30 e0       	ldi	r19, 0x00	; 0
    de28:	d8 01       	movw	r26, r16
    de2a:	8d 91       	ld	r24, X+
    de2c:	9c 91       	ld	r25, X
    de2e:	0e 94 99 8c 	call	0x11932	; 0x11932 <Print::print(unsigned long, int)>
    de32:	69 ed       	ldi	r22, 0xD9	; 217
    de34:	7a e0       	ldi	r23, 0x0A	; 10
    de36:	f8 01       	movw	r30, r16
    de38:	80 81       	ld	r24, Z
    de3a:	91 81       	ldd	r25, Z+1	; 0x01
    de3c:	0e 94 9e 8b 	call	0x1173c	; 0x1173c <Print::print(char const*)>
    de40:	d7 01       	movw	r26, r14
    de42:	12 96       	adiw	r26, 0x02	; 2
    de44:	6d 91       	ld	r22, X+
    de46:	7c 91       	ld	r23, X
    de48:	4a e0       	ldi	r20, 0x0A	; 10
    de4a:	50 e0       	ldi	r21, 0x00	; 0
    de4c:	f8 01       	movw	r30, r16
    de4e:	80 81       	ld	r24, Z
    de50:	91 81       	ldd	r25, Z+1	; 0x01
    de52:	0e 94 c5 8c 	call	0x1198a	; 0x1198a <Print::println(unsigned int, int)>
    de56:	d7 01       	movw	r26, r14
    de58:	14 96       	adiw	r26, 0x04	; 4
    de5a:	0d 91       	ld	r16, X+
    de5c:	1c 91       	ld	r17, X
    de5e:	c8 01       	movw	r24, r16
    de60:	0e 94 69 7a 	call	0xf4d2	; 0xf4d2 <FP<void, void*>::attached()>
    de64:	88 23       	and	r24, r24
    de66:	09 f4       	brne	.+2      	; 0xde6a <ELClient::protoCompletedCb()+0x262>
    de68:	84 cf       	rjmp	.-248    	; 0xdd72 <ELClient::protoCompletedCb()+0x16a>
    de6a:	b7 01       	movw	r22, r14
    de6c:	ce 01       	movw	r24, r28
    de6e:	01 96       	adiw	r24, 0x01	; 1
    de70:	0e 94 22 73 	call	0xe644	; 0xe644 <ELClientResponse::ELClientResponse(ELClientPacket*)>
    de74:	be 01       	movw	r22, r28
    de76:	6f 5f       	subi	r22, 0xFF	; 255
    de78:	7f 4f       	sbci	r23, 0xFF	; 255
    de7a:	c8 01       	movw	r24, r16
    de7c:	0e 94 42 7a 	call	0xf484	; 0xf484 <FP<void, void*>::operator()(void*) const>
    de80:	78 cf       	rjmp	.-272    	; 0xdd72 <ELClient::protoCompletedCb()+0x16a>
    de82:	f8 01       	movw	r30, r16
    de84:	84 85       	ldd	r24, Z+12	; 0x0c
    de86:	88 23       	and	r24, r24
    de88:	09 f4       	brne	.+2      	; 0xde8c <ELClient::protoCompletedCb()+0x284>
    de8a:	73 cf       	rjmp	.-282    	; 0xdd72 <ELClient::protoCompletedCb()+0x16a>
    de8c:	66 ee       	ldi	r22, 0xE6	; 230
    de8e:	7a e0       	ldi	r23, 0x0A	; 10
    de90:	80 81       	ld	r24, Z
    de92:	91 81       	ldd	r25, Z+1	; 0x01
    de94:	0e 94 c3 8b 	call	0x11786	; 0x11786 <Print::println(char const*)>
    de98:	6c cf       	rjmp	.-296    	; 0xdd72 <ELClient::protoCompletedCb()+0x16a>

0000de9a <ELClient::Process()>:
_ZN8ELClient7ProcessEv():
    de9a:	1f 93       	push	r17
    de9c:	cf 93       	push	r28
    de9e:	df 93       	push	r29
    dea0:	ec 01       	movw	r28, r24
    dea2:	11 e0       	ldi	r17, 0x01	; 1
    dea4:	8a 85       	ldd	r24, Y+10	; 0x0a
    dea6:	9b 85       	ldd	r25, Y+11	; 0x0b
    dea8:	dc 01       	movw	r26, r24
    deaa:	ed 91       	ld	r30, X+
    deac:	fc 91       	ld	r31, X
    deae:	00 84       	ldd	r0, Z+8	; 0x08
    deb0:	f1 85       	ldd	r31, Z+9	; 0x09
    deb2:	e0 2d       	mov	r30, r0
    deb4:	19 95       	eicall
    deb6:	89 2b       	or	r24, r25
    deb8:	09 f4       	brne	.+2      	; 0xdebc <ELClient::Process()+0x22>
    deba:	45 c0       	rjmp	.+138    	; 0xdf46 <ELClient::Process()+0xac>
    debc:	8a 85       	ldd	r24, Y+10	; 0x0a
    debe:	9b 85       	ldd	r25, Y+11	; 0x0b
    dec0:	dc 01       	movw	r26, r24
    dec2:	ed 91       	ld	r30, X+
    dec4:	fc 91       	ld	r31, X
    dec6:	02 84       	ldd	r0, Z+10	; 0x0a
    dec8:	f3 85       	ldd	r31, Z+11	; 0x0b
    deca:	e0 2d       	mov	r30, r0
    decc:	19 95       	eicall
    dece:	8b 3d       	cpi	r24, 0xDB	; 219
    ded0:	91 05       	cpc	r25, r1
    ded2:	11 f4       	brne	.+4      	; 0xded8 <ELClient::Process()+0x3e>
    ded4:	1d 8b       	std	Y+21, r17	; 0x15
    ded6:	e6 cf       	rjmp	.-52     	; 0xdea4 <ELClient::Process()+0xa>
    ded8:	2b 89       	ldd	r18, Y+19	; 0x13
    deda:	3c 89       	ldd	r19, Y+20	; 0x14
    dedc:	80 3c       	cpi	r24, 0xC0	; 192
    dede:	91 05       	cpc	r25, r1
    dee0:	89 f4       	brne	.+34     	; 0xdf04 <ELClient::Process()+0x6a>
    dee2:	90 e0       	ldi	r25, 0x00	; 0
    dee4:	80 e0       	ldi	r24, 0x00	; 0
    dee6:	28 30       	cpi	r18, 0x08	; 8
    dee8:	31 05       	cpc	r19, r1
    deea:	18 f0       	brcs	.+6      	; 0xdef2 <ELClient::Process()+0x58>
    deec:	ce 01       	movw	r24, r28
    deee:	0e 94 04 6e 	call	0xdc08	; 0xdc08 <ELClient::protoCompletedCb()>
    def2:	1c 8a       	std	Y+20, r1	; 0x14
    def4:	1b 8a       	std	Y+19, r1	; 0x13
    def6:	1d 8a       	std	Y+21, r1	; 0x15
    def8:	00 97       	sbiw	r24, 0x00	; 0
    defa:	a1 f2       	breq	.-88     	; 0xdea4 <ELClient::Process()+0xa>
    defc:	df 91       	pop	r29
    defe:	cf 91       	pop	r28
    df00:	1f 91       	pop	r17
    df02:	08 95       	ret
    df04:	4d 89       	ldd	r20, Y+21	; 0x15
    df06:	44 23       	and	r20, r20
    df08:	61 f0       	breq	.+24     	; 0xdf22 <ELClient::Process()+0x88>
    df0a:	8c 3d       	cpi	r24, 0xDC	; 220
    df0c:	91 05       	cpc	r25, r1
    df0e:	31 f0       	breq	.+12     	; 0xdf1c <ELClient::Process()+0x82>
    df10:	8d 3d       	cpi	r24, 0xDD	; 221
    df12:	91 05       	cpc	r25, r1
    df14:	29 f4       	brne	.+10     	; 0xdf20 <ELClient::Process()+0x86>
    df16:	8b ed       	ldi	r24, 0xDB	; 219
    df18:	90 e0       	ldi	r25, 0x00	; 0
    df1a:	02 c0       	rjmp	.+4      	; 0xdf20 <ELClient::Process()+0x86>
    df1c:	80 ec       	ldi	r24, 0xC0	; 192
    df1e:	90 e0       	ldi	r25, 0x00	; 0
    df20:	1d 8a       	std	Y+21, r1	; 0x15
    df22:	49 89       	ldd	r20, Y+17	; 0x11
    df24:	5a 89       	ldd	r21, Y+18	; 0x12
    df26:	24 17       	cp	r18, r20
    df28:	35 07       	cpc	r19, r21
    df2a:	08 f0       	brcs	.+2      	; 0xdf2e <ELClient::Process()+0x94>
    df2c:	bb cf       	rjmp	.-138    	; 0xdea4 <ELClient::Process()+0xa>
    df2e:	4f 85       	ldd	r20, Y+15	; 0x0f
    df30:	58 89       	ldd	r21, Y+16	; 0x10
    df32:	b9 01       	movw	r22, r18
    df34:	6f 5f       	subi	r22, 0xFF	; 255
    df36:	7f 4f       	sbci	r23, 0xFF	; 255
    df38:	7c 8b       	std	Y+20, r23	; 0x14
    df3a:	6b 8b       	std	Y+19, r22	; 0x13
    df3c:	24 0f       	add	r18, r20
    df3e:	35 1f       	adc	r19, r21
    df40:	f9 01       	movw	r30, r18
    df42:	80 83       	st	Z, r24
    df44:	af cf       	rjmp	.-162    	; 0xdea4 <ELClient::Process()+0xa>
    df46:	90 e0       	ldi	r25, 0x00	; 0
    df48:	80 e0       	ldi	r24, 0x00	; 0
    df4a:	d8 cf       	rjmp	.-80     	; 0xdefc <ELClient::Process()+0x62>

0000df4c <ELClient::WaitReturn(unsigned long)>:
_ZN8ELClient10WaitReturnEm():
    df4c:	8f 92       	push	r8
    df4e:	9f 92       	push	r9
    df50:	af 92       	push	r10
    df52:	bf 92       	push	r11
    df54:	cf 92       	push	r12
    df56:	df 92       	push	r13
    df58:	ef 92       	push	r14
    df5a:	ff 92       	push	r15
    df5c:	cf 93       	push	r28
    df5e:	df 93       	push	r29
    df60:	ec 01       	movw	r28, r24
    df62:	4a 01       	movw	r8, r20
    df64:	5b 01       	movw	r10, r22
    df66:	0e 94 67 85 	call	0x10ace	; 0x10ace <millis>
    df6a:	6b 01       	movw	r12, r22
    df6c:	7c 01       	movw	r14, r24
    df6e:	0e 94 67 85 	call	0x10ace	; 0x10ace <millis>
    df72:	6c 19       	sub	r22, r12
    df74:	7d 09       	sbc	r23, r13
    df76:	8e 09       	sbc	r24, r14
    df78:	9f 09       	sbc	r25, r15
    df7a:	68 15       	cp	r22, r8
    df7c:	79 05       	cpc	r23, r9
    df7e:	8a 05       	cpc	r24, r10
    df80:	9b 05       	cpc	r25, r11
    df82:	80 f4       	brcc	.+32     	; 0xdfa4 <ELClient::WaitReturn(unsigned long)+0x58>
    df84:	ce 01       	movw	r24, r28
    df86:	0e 94 4d 6f 	call	0xde9a	; 0xde9a <ELClient::Process()>
    df8a:	00 97       	sbiw	r24, 0x00	; 0
    df8c:	81 f3       	breq	.-32     	; 0xdf6e <ELClient::WaitReturn(unsigned long)+0x22>
    df8e:	df 91       	pop	r29
    df90:	cf 91       	pop	r28
    df92:	ff 90       	pop	r15
    df94:	ef 90       	pop	r14
    df96:	df 90       	pop	r13
    df98:	cf 90       	pop	r12
    df9a:	bf 90       	pop	r11
    df9c:	af 90       	pop	r10
    df9e:	9f 90       	pop	r9
    dfa0:	8f 90       	pop	r8
    dfa2:	08 95       	ret
    dfa4:	90 e0       	ldi	r25, 0x00	; 0
    dfa6:	80 e0       	ldi	r24, 0x00	; 0
    dfa8:	f2 cf       	rjmp	.-28     	; 0xdf8e <ELClient::WaitReturn(unsigned long)+0x42>

0000dfaa <ELClient::Request(unsigned int, unsigned long, unsigned int)>:
_ZN8ELClient7RequestEjmj():
    dfaa:	ef 92       	push	r14
    dfac:	ff 92       	push	r15
    dfae:	0f 93       	push	r16
    dfb0:	1f 93       	push	r17
    dfb2:	cf 93       	push	r28
    dfb4:	df 93       	push	r29
    dfb6:	00 d0       	rcall	.+0      	; 0xdfb8 <ELClient::Request(unsigned int, unsigned long, unsigned int)+0xe>
    dfb8:	00 d0       	rcall	.+0      	; 0xdfba <ELClient::Request(unsigned int, unsigned long, unsigned int)+0x10>
    dfba:	1f 92       	push	r1
    dfbc:	1f 92       	push	r1
    dfbe:	cd b7       	in	r28, 0x3d	; 61
    dfc0:	de b7       	in	r29, 0x3e	; 62
    dfc2:	7c 01       	movw	r14, r24
    dfc4:	7a 83       	std	Y+2, r23	; 0x02
    dfc6:	69 83       	std	Y+1, r22	; 0x01
    dfc8:	2b 83       	std	Y+3, r18	; 0x03
    dfca:	3c 83       	std	Y+4, r19	; 0x04
    dfcc:	4d 83       	std	Y+5, r20	; 0x05
    dfce:	5e 83       	std	Y+6, r21	; 0x06
    dfd0:	18 87       	std	Y+8, r17	; 0x08
    dfd2:	0f 83       	std	Y+7, r16	; 0x07
    dfd4:	dc 01       	movw	r26, r24
    dfd6:	1e 96       	adiw	r26, 0x0e	; 14
    dfd8:	1c 92       	st	X, r1
    dfda:	1e 92       	st	-X, r1
    dfdc:	1d 97       	sbiw	r26, 0x0d	; 13
    dfde:	1a 96       	adiw	r26, 0x0a	; 10
    dfe0:	8d 91       	ld	r24, X+
    dfe2:	9c 91       	ld	r25, X
    dfe4:	dc 01       	movw	r26, r24
    dfe6:	ed 91       	ld	r30, X+
    dfe8:	fc 91       	ld	r31, X
    dfea:	01 90       	ld	r0, Z+
    dfec:	f0 81       	ld	r31, Z
    dfee:	e0 2d       	mov	r30, r0
    dff0:	60 ec       	ldi	r22, 0xC0	; 192
    dff2:	19 95       	eicall
    dff4:	42 e0       	ldi	r20, 0x02	; 2
    dff6:	50 e0       	ldi	r21, 0x00	; 0
    dff8:	be 01       	movw	r22, r28
    dffa:	6f 5f       	subi	r22, 0xFF	; 255
    dffc:	7f 4f       	sbci	r23, 0xFF	; 255
    dffe:	c7 01       	movw	r24, r14
    e000:	0e 94 73 6d 	call	0xdae6	; 0xdae6 <ELClient::write(void*, unsigned int)>
    e004:	f7 01       	movw	r30, r14
    e006:	25 85       	ldd	r18, Z+13	; 0x0d
    e008:	36 85       	ldd	r19, Z+14	; 0x0e
    e00a:	42 e0       	ldi	r20, 0x02	; 2
    e00c:	50 e0       	ldi	r21, 0x00	; 0
    e00e:	be 01       	movw	r22, r28
    e010:	6f 5f       	subi	r22, 0xFF	; 255
    e012:	7f 4f       	sbci	r23, 0xFF	; 255
    e014:	c7 01       	movw	r24, r14
    e016:	0e 94 e8 6d 	call	0xdbd0	; 0xdbd0 <ELClient::crc16Data(unsigned char const*, unsigned int, unsigned int)>
    e01a:	d7 01       	movw	r26, r14
    e01c:	1e 96       	adiw	r26, 0x0e	; 14
    e01e:	9c 93       	st	X, r25
    e020:	8e 93       	st	-X, r24
    e022:	1d 97       	sbiw	r26, 0x0d	; 13
    e024:	42 e0       	ldi	r20, 0x02	; 2
    e026:	50 e0       	ldi	r21, 0x00	; 0
    e028:	be 01       	movw	r22, r28
    e02a:	69 5f       	subi	r22, 0xF9	; 249
    e02c:	7f 4f       	sbci	r23, 0xFF	; 255
    e02e:	c7 01       	movw	r24, r14
    e030:	0e 94 73 6d 	call	0xdae6	; 0xdae6 <ELClient::write(void*, unsigned int)>
    e034:	f7 01       	movw	r30, r14
    e036:	25 85       	ldd	r18, Z+13	; 0x0d
    e038:	36 85       	ldd	r19, Z+14	; 0x0e
    e03a:	42 e0       	ldi	r20, 0x02	; 2
    e03c:	50 e0       	ldi	r21, 0x00	; 0
    e03e:	be 01       	movw	r22, r28
    e040:	69 5f       	subi	r22, 0xF9	; 249
    e042:	7f 4f       	sbci	r23, 0xFF	; 255
    e044:	c7 01       	movw	r24, r14
    e046:	0e 94 e8 6d 	call	0xdbd0	; 0xdbd0 <ELClient::crc16Data(unsigned char const*, unsigned int, unsigned int)>
    e04a:	d7 01       	movw	r26, r14
    e04c:	1e 96       	adiw	r26, 0x0e	; 14
    e04e:	9c 93       	st	X, r25
    e050:	8e 93       	st	-X, r24
    e052:	1d 97       	sbiw	r26, 0x0d	; 13
    e054:	44 e0       	ldi	r20, 0x04	; 4
    e056:	50 e0       	ldi	r21, 0x00	; 0
    e058:	be 01       	movw	r22, r28
    e05a:	6d 5f       	subi	r22, 0xFD	; 253
    e05c:	7f 4f       	sbci	r23, 0xFF	; 255
    e05e:	c7 01       	movw	r24, r14
    e060:	0e 94 73 6d 	call	0xdae6	; 0xdae6 <ELClient::write(void*, unsigned int)>
    e064:	f7 01       	movw	r30, r14
    e066:	25 85       	ldd	r18, Z+13	; 0x0d
    e068:	36 85       	ldd	r19, Z+14	; 0x0e
    e06a:	44 e0       	ldi	r20, 0x04	; 4
    e06c:	50 e0       	ldi	r21, 0x00	; 0
    e06e:	be 01       	movw	r22, r28
    e070:	6d 5f       	subi	r22, 0xFD	; 253
    e072:	7f 4f       	sbci	r23, 0xFF	; 255
    e074:	c7 01       	movw	r24, r14
    e076:	0e 94 e8 6d 	call	0xdbd0	; 0xdbd0 <ELClient::crc16Data(unsigned char const*, unsigned int, unsigned int)>
    e07a:	d7 01       	movw	r26, r14
    e07c:	1e 96       	adiw	r26, 0x0e	; 14
    e07e:	9c 93       	st	X, r25
    e080:	8e 93       	st	-X, r24
    e082:	1d 97       	sbiw	r26, 0x0d	; 13
    e084:	28 96       	adiw	r28, 0x08	; 8
    e086:	0f b6       	in	r0, 0x3f	; 63
    e088:	f8 94       	cli
    e08a:	de bf       	out	0x3e, r29	; 62
    e08c:	0f be       	out	0x3f, r0	; 63
    e08e:	cd bf       	out	0x3d, r28	; 61
    e090:	df 91       	pop	r29
    e092:	cf 91       	pop	r28
    e094:	1f 91       	pop	r17
    e096:	0f 91       	pop	r16
    e098:	ff 90       	pop	r15
    e09a:	ef 90       	pop	r14
    e09c:	08 95       	ret

0000e09e <ELClient::Request(void const*, unsigned int)>:
_ZN8ELClient7RequestEPKvj():
    e09e:	cf 92       	push	r12
    e0a0:	df 92       	push	r13
    e0a2:	ef 92       	push	r14
    e0a4:	ff 92       	push	r15
    e0a6:	0f 93       	push	r16
    e0a8:	1f 93       	push	r17
    e0aa:	cf 93       	push	r28
    e0ac:	df 93       	push	r29
    e0ae:	1f 92       	push	r1
    e0b0:	1f 92       	push	r1
    e0b2:	cd b7       	in	r28, 0x3d	; 61
    e0b4:	de b7       	in	r29, 0x3e	; 62
    e0b6:	8c 01       	movw	r16, r24
    e0b8:	7b 01       	movw	r14, r22
    e0ba:	5a 83       	std	Y+2, r21	; 0x02
    e0bc:	49 83       	std	Y+1, r20	; 0x01
    e0be:	42 e0       	ldi	r20, 0x02	; 2
    e0c0:	50 e0       	ldi	r21, 0x00	; 0
    e0c2:	be 01       	movw	r22, r28
    e0c4:	6f 5f       	subi	r22, 0xFF	; 255
    e0c6:	7f 4f       	sbci	r23, 0xFF	; 255
    e0c8:	0e 94 73 6d 	call	0xdae6	; 0xdae6 <ELClient::write(void*, unsigned int)>
    e0cc:	f8 01       	movw	r30, r16
    e0ce:	25 85       	ldd	r18, Z+13	; 0x0d
    e0d0:	36 85       	ldd	r19, Z+14	; 0x0e
    e0d2:	42 e0       	ldi	r20, 0x02	; 2
    e0d4:	50 e0       	ldi	r21, 0x00	; 0
    e0d6:	be 01       	movw	r22, r28
    e0d8:	6f 5f       	subi	r22, 0xFF	; 255
    e0da:	7f 4f       	sbci	r23, 0xFF	; 255
    e0dc:	c8 01       	movw	r24, r16
    e0de:	0e 94 e8 6d 	call	0xdbd0	; 0xdbd0 <ELClient::crc16Data(unsigned char const*, unsigned int, unsigned int)>
    e0e2:	f8 01       	movw	r30, r16
    e0e4:	96 87       	std	Z+14, r25	; 0x0e
    e0e6:	85 87       	std	Z+13, r24	; 0x0d
    e0e8:	c9 80       	ldd	r12, Y+1	; 0x01
    e0ea:	da 80       	ldd	r13, Y+2	; 0x02
    e0ec:	ce 0c       	add	r12, r14
    e0ee:	df 1c       	adc	r13, r15
    e0f0:	ec 14       	cp	r14, r12
    e0f2:	fd 04       	cpc	r15, r13
    e0f4:	91 f0       	breq	.+36     	; 0xe11a <ELClient::Request(void const*, unsigned int)+0x7c>
    e0f6:	f7 01       	movw	r30, r14
    e0f8:	60 81       	ld	r22, Z
    e0fa:	c8 01       	movw	r24, r16
    e0fc:	0e 94 49 6d 	call	0xda92	; 0xda92 <ELClient::write(unsigned char)>
    e100:	f8 01       	movw	r30, r16
    e102:	45 85       	ldd	r20, Z+13	; 0x0d
    e104:	56 85       	ldd	r21, Z+14	; 0x0e
    e106:	f7 01       	movw	r30, r14
    e108:	61 91       	ld	r22, Z+
    e10a:	7f 01       	movw	r14, r30
    e10c:	c8 01       	movw	r24, r16
    e10e:	0e 94 c8 6d 	call	0xdb90	; 0xdb90 <ELClient::crc16Add(unsigned char, unsigned int)>
    e112:	f8 01       	movw	r30, r16
    e114:	96 87       	std	Z+14, r25	; 0x0e
    e116:	85 87       	std	Z+13, r24	; 0x0d
    e118:	eb cf       	rjmp	.-42     	; 0xe0f0 <ELClient::Request(void const*, unsigned int)+0x52>
    e11a:	e9 80       	ldd	r14, Y+1	; 0x01
    e11c:	fa 80       	ldd	r15, Y+2	; 0x02
    e11e:	f1 94       	neg	r15
    e120:	e1 94       	neg	r14
    e122:	f1 08       	sbc	r15, r1
    e124:	f3 e0       	ldi	r31, 0x03	; 3
    e126:	ef 22       	and	r14, r31
    e128:	ff 24       	eor	r15, r15
    e12a:	81 e0       	ldi	r24, 0x01	; 1
    e12c:	e8 1a       	sub	r14, r24
    e12e:	f1 08       	sbc	r15, r1
    e130:	78 f0       	brcs	.+30     	; 0xe150 <ELClient::Request(void const*, unsigned int)+0xb2>
    e132:	60 e0       	ldi	r22, 0x00	; 0
    e134:	c8 01       	movw	r24, r16
    e136:	0e 94 49 6d 	call	0xda92	; 0xda92 <ELClient::write(unsigned char)>
    e13a:	f8 01       	movw	r30, r16
    e13c:	45 85       	ldd	r20, Z+13	; 0x0d
    e13e:	56 85       	ldd	r21, Z+14	; 0x0e
    e140:	60 e0       	ldi	r22, 0x00	; 0
    e142:	c8 01       	movw	r24, r16
    e144:	0e 94 c8 6d 	call	0xdb90	; 0xdb90 <ELClient::crc16Add(unsigned char, unsigned int)>
    e148:	f8 01       	movw	r30, r16
    e14a:	96 87       	std	Z+14, r25	; 0x0e
    e14c:	85 87       	std	Z+13, r24	; 0x0d
    e14e:	ed cf       	rjmp	.-38     	; 0xe12a <ELClient::Request(void const*, unsigned int)+0x8c>
    e150:	0f 90       	pop	r0
    e152:	0f 90       	pop	r0
    e154:	df 91       	pop	r29
    e156:	cf 91       	pop	r28
    e158:	1f 91       	pop	r17
    e15a:	0f 91       	pop	r16
    e15c:	ff 90       	pop	r15
    e15e:	ef 90       	pop	r14
    e160:	df 90       	pop	r13
    e162:	cf 90       	pop	r12
    e164:	08 95       	ret

0000e166 <ELClient::Sync(unsigned long)>:
_ZN8ELClient4SyncEm():
C:\Program Files (x86)\Arduino\libraries\ELClient/ELClient.cpp:521
		if (!ok) Serial.println("EL-Client sync failed!");
	} while(!ok);
	Serial.println("EL-Client synced!");
@endcode
*/
boolean ELClient::Sync(uint32_t timeout) {
    e166:	4f 92       	push	r4
    e168:	5f 92       	push	r5
    e16a:	6f 92       	push	r6
    e16c:	7f 92       	push	r7
    e16e:	af 92       	push	r10
    e170:	bf 92       	push	r11
    e172:	cf 92       	push	r12
    e174:	df 92       	push	r13
    e176:	ef 92       	push	r14
    e178:	ff 92       	push	r15
    e17a:	0f 93       	push	r16
    e17c:	1f 93       	push	r17
    e17e:	cf 93       	push	r28
    e180:	df 93       	push	r29
    e182:	ec 01       	movw	r28, r24
    e184:	2a 01       	movw	r4, r20
    e186:	3b 01       	movw	r6, r22
C:\Program Files (x86)\Arduino\libraries\ELClient/ELClient.cpp:523
  // send a SLIP END char to make sure we get a clean start
  _serial->write(SLIP_END);
    e188:	8a 85       	ldd	r24, Y+10	; 0x0a
    e18a:	9b 85       	ldd	r25, Y+11	; 0x0b
    e18c:	dc 01       	movw	r26, r24
    e18e:	ed 91       	ld	r30, X+
    e190:	fc 91       	ld	r31, X
    e192:	01 90       	ld	r0, Z+
    e194:	f0 81       	ld	r31, Z
    e196:	e0 2d       	mov	r30, r0
    e198:	60 ec       	ldi	r22, 0xC0	; 192
    e19a:	19 95       	eicall
C:\Program Files (x86)\Arduino\libraries\ELClient/ELClient.cpp:525
  // send sync request
  Request(CMD_SYNC, (uint32_t)&wifiCb, 0);
    e19c:	6e 01       	movw	r12, r28
    e19e:	b2 e0       	ldi	r27, 0x02	; 2
    e1a0:	cb 0e       	add	r12, r27
    e1a2:	d1 1c       	adc	r13, r1
    e1a4:	0d 2c       	mov	r0, r13
    e1a6:	00 0c       	add	r0, r0
    e1a8:	ee 08       	sbc	r14, r14
    e1aa:	ff 08       	sbc	r15, r15
    e1ac:	10 e0       	ldi	r17, 0x00	; 0
    e1ae:	00 e0       	ldi	r16, 0x00	; 0
    e1b0:	a7 01       	movw	r20, r14
    e1b2:	96 01       	movw	r18, r12
    e1b4:	61 e0       	ldi	r22, 0x01	; 1
    e1b6:	70 e0       	ldi	r23, 0x00	; 0
    e1b8:	ce 01       	movw	r24, r28
    e1ba:	0e 94 d5 6f 	call	0xdfaa	; 0xdfaa <ELClient::Request(unsigned int, unsigned long, unsigned int)>
C:\Program Files (x86)\Arduino\libraries\ELClient/ELClient.cpp:526
  Request();
    e1be:	ce 01       	movw	r24, r28
    e1c0:	0e 94 8d 6d 	call	0xdb1a	; 0xdb1a <ELClient::Request()>
C:\Program Files (x86)\Arduino\libraries\ELClient/ELClient.cpp:529
  // we don't want to get a stale response that we need to sync 'cause that has the effect of
  // calling us again recursively....
  void (*rr)() = resetCb;
    e1c4:	a8 84       	ldd	r10, Y+8	; 0x08
    e1c6:	b9 84       	ldd	r11, Y+9	; 0x09
C:\Program Files (x86)\Arduino\libraries\ELClient/ELClient.cpp:530
  resetCb = NULL;
    e1c8:	19 86       	std	Y+9, r1	; 0x09
    e1ca:	18 86       	std	Y+8, r1	; 0x08
C:\Program Files (x86)\Arduino\libraries\ELClient/ELClient.cpp:533
  // empty the response queue hoping to find the wifiCb address
  ELClientPacket *packet;
  while ((packet = WaitReturn(timeout)) != NULL) {
    e1cc:	b3 01       	movw	r22, r6
    e1ce:	a2 01       	movw	r20, r4
    e1d0:	ce 01       	movw	r24, r28
    e1d2:	0e 94 a6 6f 	call	0xdf4c	; 0xdf4c <ELClient::WaitReturn(unsigned long)>
    e1d6:	8c 01       	movw	r16, r24
    e1d8:	89 2b       	or	r24, r25
    e1da:	d9 f1       	breq	.+118    	; 0xe252 <ELClient::Sync(unsigned long)+0xec>
    e1dc:	8c 85       	ldd	r24, Y+12	; 0x0c
C:\Program Files (x86)\Arduino\libraries\ELClient/ELClient.cpp:534
    if (packet->value == (uint32_t)&wifiCb) {
    e1de:	f8 01       	movw	r30, r16
    e1e0:	44 81       	ldd	r20, Z+4	; 0x04
    e1e2:	55 81       	ldd	r21, Z+5	; 0x05
    e1e4:	66 81       	ldd	r22, Z+6	; 0x06
    e1e6:	77 81       	ldd	r23, Z+7	; 0x07
    e1e8:	c4 16       	cp	r12, r20
    e1ea:	d5 06       	cpc	r13, r21
    e1ec:	e6 06       	cpc	r14, r22
    e1ee:	f7 06       	cpc	r15, r23
    e1f0:	d1 f4       	brne	.+52     	; 0xe226 <ELClient::Sync(unsigned long)+0xc0>
C:\Program Files (x86)\Arduino\libraries\ELClient/ELClient.cpp:535
        if (_debugEn) _debug->println("SYNC!");
    e1f2:	88 23       	and	r24, r24
    e1f4:	31 f0       	breq	.+12     	; 0xe202 <ELClient::Sync(unsigned long)+0x9c>
C:\Program Files (x86)\Arduino\libraries\ELClient/ELClient.cpp:535 (discriminator 1)
    e1f6:	60 ee       	ldi	r22, 0xE0	; 224
    e1f8:	7a e0       	ldi	r23, 0x0A	; 10
    e1fa:	88 81       	ld	r24, Y
    e1fc:	99 81       	ldd	r25, Y+1	; 0x01
    e1fe:	0e 94 c3 8b 	call	0x11786	; 0x11786 <Print::println(char const*)>
C:\Program Files (x86)\Arduino\libraries\ELClient/ELClient.cpp:536
        resetCb = rr;
    e202:	b9 86       	std	Y+9, r11	; 0x09
    e204:	a8 86       	std	Y+8, r10	; 0x08
C:\Program Files (x86)\Arduino\libraries\ELClient/ELClient.cpp:537
        return true;
    e206:	81 e0       	ldi	r24, 0x01	; 1
C:\Program Files (x86)\Arduino\libraries\ELClient/ELClient.cpp:547
    }
  }
  // doesn't look like we got a real response
  resetCb = rr;
  return false;
}
    e208:	df 91       	pop	r29
    e20a:	cf 91       	pop	r28
    e20c:	1f 91       	pop	r17
    e20e:	0f 91       	pop	r16
    e210:	ff 90       	pop	r15
    e212:	ef 90       	pop	r14
    e214:	df 90       	pop	r13
    e216:	cf 90       	pop	r12
    e218:	bf 90       	pop	r11
    e21a:	af 90       	pop	r10
    e21c:	7f 90       	pop	r7
    e21e:	6f 90       	pop	r6
    e220:	5f 90       	pop	r5
    e222:	4f 90       	pop	r4
    e224:	08 95       	ret
C:\Program Files (x86)\Arduino\libraries\ELClient/ELClient.cpp:539
    if (packet->value == (uint32_t)&wifiCb) {
        if (_debugEn) _debug->println("SYNC!");
        resetCb = rr;
        return true;
    }
    if (_debugEn) {
    e226:	88 23       	and	r24, r24
    e228:	89 f2       	breq	.-94     	; 0xe1cc <ELClient::Sync(unsigned long)+0x66>
C:\Program Files (x86)\Arduino\libraries\ELClient/ELClient.cpp:540
        _debug->print("BAD: ");
    e22a:	6c ee       	ldi	r22, 0xEC	; 236
    e22c:	7a e0       	ldi	r23, 0x0A	; 10
    e22e:	88 81       	ld	r24, Y
    e230:	99 81       	ldd	r25, Y+1	; 0x01
    e232:	0e 94 9e 8b 	call	0x1173c	; 0x1173c <Print::print(char const*)>
C:\Program Files (x86)\Arduino\libraries\ELClient/ELClient.cpp:541
        _debug->println(packet->value);
    e236:	d8 01       	movw	r26, r16
    e238:	14 96       	adiw	r26, 0x04	; 4
    e23a:	4d 91       	ld	r20, X+
    e23c:	5d 91       	ld	r21, X+
    e23e:	6d 91       	ld	r22, X+
    e240:	7c 91       	ld	r23, X
    e242:	17 97       	sbiw	r26, 0x07	; 7
    e244:	2a e0       	ldi	r18, 0x0A	; 10
    e246:	30 e0       	ldi	r19, 0x00	; 0
    e248:	88 81       	ld	r24, Y
    e24a:	99 81       	ldd	r25, Y+1	; 0x01
    e24c:	0e 94 d7 8c 	call	0x119ae	; 0x119ae <Print::println(unsigned long, int)>
    e250:	bd cf       	rjmp	.-134    	; 0xe1cc <ELClient::Sync(unsigned long)+0x66>
C:\Program Files (x86)\Arduino\libraries\ELClient/ELClient.cpp:545
    }
  }
  // doesn't look like we got a real response
  resetCb = rr;
    e252:	b9 86       	std	Y+9, r11	; 0x09
    e254:	a8 86       	std	Y+8, r10	; 0x08
C:\Program Files (x86)\Arduino\libraries\ELClient/ELClient.cpp:546
  return false;
    e256:	80 e0       	ldi	r24, 0x00	; 0
    e258:	d7 cf       	rjmp	.-82     	; 0xe208 <ELClient::Sync(unsigned long)+0xa2>

0000e25a <ELClientCmd::ELClientCmd(ELClient*)>:
_ZN11ELClientCmdC2EP8ELClient():
C:\Program Files (x86)\Arduino\libraries\ELClient/ELClientCmd.cpp:14
#include "ELClientCmd.h"

/*! ELClientCmd(ELClient* elc)
    @brief Constructor for ELClientCmd
*/
ELClientCmd::ELClientCmd(ELClient* elc) :_elc(elc) {}
    e25a:	fc 01       	movw	r30, r24
    e25c:	71 83       	std	Z+1, r23	; 0x01
    e25e:	60 83       	st	Z, r22
    e260:	08 95       	ret

0000e262 <ELClientCmd::GetTime()>:
_ZN11ELClientCmd7GetTimeEv():
C:\Program Files (x86)\Arduino\libraries\ELClient/ELClientCmd.cpp:31
@code
	uint32_t t = cmd.GetTime();
	Serial.print("Time: "); Serial.println(t);
@endcode
*/
uint32_t ELClientCmd::GetTime() {
    e262:	0f 93       	push	r16
    e264:	1f 93       	push	r17
    e266:	cf 93       	push	r28
    e268:	df 93       	push	r29
    e26a:	ec 01       	movw	r28, r24
C:\Program Files (x86)\Arduino\libraries\ELClient/ELClientCmd.cpp:32
  _elc->Request(CMD_GET_TIME, 0, 0);
    e26c:	10 e0       	ldi	r17, 0x00	; 0
    e26e:	00 e0       	ldi	r16, 0x00	; 0
    e270:	20 e0       	ldi	r18, 0x00	; 0
    e272:	30 e0       	ldi	r19, 0x00	; 0
    e274:	a9 01       	movw	r20, r18
    e276:	67 e0       	ldi	r22, 0x07	; 7
    e278:	70 e0       	ldi	r23, 0x00	; 0
    e27a:	88 81       	ld	r24, Y
    e27c:	99 81       	ldd	r25, Y+1	; 0x01
    e27e:	0e 94 d5 6f 	call	0xdfaa	; 0xdfaa <ELClient::Request(unsigned int, unsigned long, unsigned int)>
C:\Program Files (x86)\Arduino\libraries\ELClient/ELClientCmd.cpp:33
  _elc->Request();
    e282:	88 81       	ld	r24, Y
    e284:	99 81       	ldd	r25, Y+1	; 0x01
    e286:	0e 94 8d 6d 	call	0xdb1a	; 0xdb1a <ELClient::Request()>
C:\Program Files (x86)\Arduino\libraries\ELClient/ELClientCmd.cpp:35

  ELClientPacket *pkt = _elc->WaitReturn();
    e28a:	40 ed       	ldi	r20, 0xD0	; 208
    e28c:	57 e0       	ldi	r21, 0x07	; 7
    e28e:	60 e0       	ldi	r22, 0x00	; 0
    e290:	70 e0       	ldi	r23, 0x00	; 0
    e292:	88 81       	ld	r24, Y
    e294:	99 81       	ldd	r25, Y+1	; 0x01
    e296:	0e 94 a6 6f 	call	0xdf4c	; 0xdf4c <ELClient::WaitReturn(unsigned long)>
C:\Program Files (x86)\Arduino\libraries\ELClient/ELClientCmd.cpp:36
  return pkt ? pkt->value : 0;
    e29a:	00 97       	sbiw	r24, 0x00	; 0
    e29c:	51 f0       	breq	.+20     	; 0xe2b2 <ELClientCmd::GetTime()+0x50>
C:\Program Files (x86)\Arduino\libraries\ELClient/ELClientCmd.cpp:36 (discriminator 1)
    e29e:	fc 01       	movw	r30, r24
    e2a0:	64 81       	ldd	r22, Z+4	; 0x04
    e2a2:	75 81       	ldd	r23, Z+5	; 0x05
    e2a4:	86 81       	ldd	r24, Z+6	; 0x06
    e2a6:	97 81       	ldd	r25, Z+7	; 0x07
C:\Program Files (x86)\Arduino\libraries\ELClient/ELClientCmd.cpp:37
}
    e2a8:	df 91       	pop	r29
    e2aa:	cf 91       	pop	r28
    e2ac:	1f 91       	pop	r17
    e2ae:	0f 91       	pop	r16
    e2b0:	08 95       	ret
C:\Program Files (x86)\Arduino\libraries\ELClient/ELClientCmd.cpp:36
uint32_t ELClientCmd::GetTime() {
  _elc->Request(CMD_GET_TIME, 0, 0);
  _elc->Request();

  ELClientPacket *pkt = _elc->WaitReturn();
  return pkt ? pkt->value : 0;
    e2b2:	60 e0       	ldi	r22, 0x00	; 0
    e2b4:	70 e0       	ldi	r23, 0x00	; 0
    e2b6:	cb 01       	movw	r24, r22
    e2b8:	f7 cf       	rjmp	.-18     	; 0xe2a8 <ELClientCmd::GetTime()+0x46>

0000e2ba <ELClientMqtt::ELClientMqtt(ELClient*)>:
_ZN12ELClientMqttC2EP8ELClient():
C:\Program Files (x86)\Arduino\libraries\ELClient/ELClientMqtt.cpp:146
void ELClientMqtt::subscribe(const __FlashStringHelper* topic, uint8_t qos) {
  _elc->Request(CMD_MQTT_SUBSCRIBE, 0, 2);
  _elc->Request(topic, strlen_P((const char*)topic));
  _elc->Request(&qos, 1);
  _elc->Request();
}
    e2ba:	0f 93       	push	r16
    e2bc:	1f 93       	push	r17
    e2be:	cf 93       	push	r28
    e2c0:	df 93       	push	r29
    e2c2:	ec 01       	movw	r28, r24
    e2c4:	8b 01       	movw	r16, r22
    e2c6:	0e 94 38 7a 	call	0xf470	; 0xf470 <FP<void, void*>::FP()>
    e2ca:	ce 01       	movw	r24, r28
    e2cc:	06 96       	adiw	r24, 0x06	; 6
    e2ce:	0e 94 38 7a 	call	0xf470	; 0xf470 <FP<void, void*>::FP()>
    e2d2:	ce 01       	movw	r24, r28
    e2d4:	0c 96       	adiw	r24, 0x0c	; 12
    e2d6:	0e 94 38 7a 	call	0xf470	; 0xf470 <FP<void, void*>::FP()>
    e2da:	ce 01       	movw	r24, r28
    e2dc:	42 96       	adiw	r24, 0x12	; 18
    e2de:	0e 94 38 7a 	call	0xf470	; 0xf470 <FP<void, void*>::FP()>
    e2e2:	19 8f       	std	Y+25, r17	; 0x19
    e2e4:	08 8f       	std	Y+24, r16	; 0x18
    e2e6:	df 91       	pop	r29
    e2e8:	cf 91       	pop	r28
    e2ea:	1f 91       	pop	r17
    e2ec:	0f 91       	pop	r16
    e2ee:	08 95       	ret

0000e2f0 <ELClientMqtt::setup()>:
_ZN12ELClientMqtt5setupEv():
    e2f0:	8f 92       	push	r8
    e2f2:	9f 92       	push	r9
    e2f4:	af 92       	push	r10
    e2f6:	bf 92       	push	r11
    e2f8:	ef 92       	push	r14
    e2fa:	ff 92       	push	r15
    e2fc:	0f 93       	push	r16
    e2fe:	1f 93       	push	r17
    e300:	cf 93       	push	r28
    e302:	df 93       	push	r29
    e304:	00 d0       	rcall	.+0      	; 0xe306 <ELClientMqtt::setup()+0x16>
    e306:	1f 92       	push	r1
    e308:	cd b7       	in	r28, 0x3d	; 61
    e30a:	de b7       	in	r29, 0x3e	; 62
    e30c:	7c 01       	movw	r14, r24
    e30e:	68 e2       	ldi	r22, 0x28	; 40
    e310:	7e e1       	ldi	r23, 0x1E	; 30
    e312:	84 e5       	ldi	r24, 0x54	; 84
    e314:	95 e1       	ldi	r25, 0x15	; 21
    e316:	0e 94 6c 8b 	call	0x116d8	; 0x116d8 <Print::print(__FlashStringHelper const*)>
    e31a:	47 01       	movw	r8, r14
    e31c:	0f 2c       	mov	r0, r15
    e31e:	00 0c       	add	r0, r0
    e320:	aa 08       	sbc	r10, r10
    e322:	bb 08       	sbc	r11, r11
    e324:	20 e1       	ldi	r18, 0x10	; 16
    e326:	30 e0       	ldi	r19, 0x00	; 0
    e328:	b5 01       	movw	r22, r10
    e32a:	a4 01       	movw	r20, r8
    e32c:	84 e5       	ldi	r24, 0x54	; 84
    e32e:	95 e1       	ldi	r25, 0x15	; 21
    e330:	0e 94 d7 8c 	call	0x119ae	; 0x119ae <Print::println(unsigned long, int)>
    e334:	04 e0       	ldi	r16, 0x04	; 4
    e336:	10 e0       	ldi	r17, 0x00	; 0
    e338:	20 e0       	ldi	r18, 0x00	; 0
    e33a:	30 e0       	ldi	r19, 0x00	; 0
    e33c:	a9 01       	movw	r20, r18
    e33e:	6a e0       	ldi	r22, 0x0A	; 10
    e340:	70 e0       	ldi	r23, 0x00	; 0
    e342:	f7 01       	movw	r30, r14
    e344:	80 8d       	ldd	r24, Z+24	; 0x18
    e346:	91 8d       	ldd	r25, Z+25	; 0x19
    e348:	0e 94 d5 6f 	call	0xdfaa	; 0xdfaa <ELClient::Request(unsigned int, unsigned long, unsigned int)>
    e34c:	89 82       	std	Y+1, r8	; 0x01
    e34e:	9a 82       	std	Y+2, r9	; 0x02
    e350:	ab 82       	std	Y+3, r10	; 0x03
    e352:	bc 82       	std	Y+4, r11	; 0x04
    e354:	44 e0       	ldi	r20, 0x04	; 4
    e356:	50 e0       	ldi	r21, 0x00	; 0
    e358:	be 01       	movw	r22, r28
    e35a:	6f 5f       	subi	r22, 0xFF	; 255
    e35c:	7f 4f       	sbci	r23, 0xFF	; 255
    e35e:	f7 01       	movw	r30, r14
    e360:	80 8d       	ldd	r24, Z+24	; 0x18
    e362:	91 8d       	ldd	r25, Z+25	; 0x19
    e364:	0e 94 4f 70 	call	0xe09e	; 0xe09e <ELClient::Request(void const*, unsigned int)>
    e368:	c7 01       	movw	r24, r14
    e36a:	06 96       	adiw	r24, 0x06	; 6
    e36c:	09 2e       	mov	r0, r25
    e36e:	00 0c       	add	r0, r0
    e370:	aa 0b       	sbc	r26, r26
    e372:	bb 0b       	sbc	r27, r27
    e374:	89 83       	std	Y+1, r24	; 0x01
    e376:	9a 83       	std	Y+2, r25	; 0x02
    e378:	ab 83       	std	Y+3, r26	; 0x03
    e37a:	bc 83       	std	Y+4, r27	; 0x04
    e37c:	44 e0       	ldi	r20, 0x04	; 4
    e37e:	50 e0       	ldi	r21, 0x00	; 0
    e380:	be 01       	movw	r22, r28
    e382:	6f 5f       	subi	r22, 0xFF	; 255
    e384:	7f 4f       	sbci	r23, 0xFF	; 255
    e386:	f7 01       	movw	r30, r14
    e388:	80 8d       	ldd	r24, Z+24	; 0x18
    e38a:	91 8d       	ldd	r25, Z+25	; 0x19
    e38c:	0e 94 4f 70 	call	0xe09e	; 0xe09e <ELClient::Request(void const*, unsigned int)>
    e390:	c7 01       	movw	r24, r14
    e392:	0c 96       	adiw	r24, 0x0c	; 12
    e394:	09 2e       	mov	r0, r25
    e396:	00 0c       	add	r0, r0
    e398:	aa 0b       	sbc	r26, r26
    e39a:	bb 0b       	sbc	r27, r27
    e39c:	89 83       	std	Y+1, r24	; 0x01
    e39e:	9a 83       	std	Y+2, r25	; 0x02
    e3a0:	ab 83       	std	Y+3, r26	; 0x03
    e3a2:	bc 83       	std	Y+4, r27	; 0x04
    e3a4:	44 e0       	ldi	r20, 0x04	; 4
    e3a6:	50 e0       	ldi	r21, 0x00	; 0
    e3a8:	be 01       	movw	r22, r28
    e3aa:	6f 5f       	subi	r22, 0xFF	; 255
    e3ac:	7f 4f       	sbci	r23, 0xFF	; 255
    e3ae:	f7 01       	movw	r30, r14
    e3b0:	80 8d       	ldd	r24, Z+24	; 0x18
    e3b2:	91 8d       	ldd	r25, Z+25	; 0x19
    e3b4:	0e 94 4f 70 	call	0xe09e	; 0xe09e <ELClient::Request(void const*, unsigned int)>
    e3b8:	c7 01       	movw	r24, r14
    e3ba:	42 96       	adiw	r24, 0x12	; 18
    e3bc:	09 2e       	mov	r0, r25
    e3be:	00 0c       	add	r0, r0
    e3c0:	aa 0b       	sbc	r26, r26
    e3c2:	bb 0b       	sbc	r27, r27
    e3c4:	89 83       	std	Y+1, r24	; 0x01
    e3c6:	9a 83       	std	Y+2, r25	; 0x02
    e3c8:	ab 83       	std	Y+3, r26	; 0x03
    e3ca:	bc 83       	std	Y+4, r27	; 0x04
    e3cc:	44 e0       	ldi	r20, 0x04	; 4
    e3ce:	50 e0       	ldi	r21, 0x00	; 0
    e3d0:	be 01       	movw	r22, r28
    e3d2:	6f 5f       	subi	r22, 0xFF	; 255
    e3d4:	7f 4f       	sbci	r23, 0xFF	; 255
    e3d6:	f7 01       	movw	r30, r14
    e3d8:	80 8d       	ldd	r24, Z+24	; 0x18
    e3da:	91 8d       	ldd	r25, Z+25	; 0x19
    e3dc:	0e 94 4f 70 	call	0xe09e	; 0xe09e <ELClient::Request(void const*, unsigned int)>
    e3e0:	f7 01       	movw	r30, r14
    e3e2:	80 8d       	ldd	r24, Z+24	; 0x18
    e3e4:	91 8d       	ldd	r25, Z+25	; 0x19
    e3e6:	0e 94 8d 6d 	call	0xdb1a	; 0xdb1a <ELClient::Request()>
    e3ea:	0f 90       	pop	r0
    e3ec:	0f 90       	pop	r0
    e3ee:	0f 90       	pop	r0
    e3f0:	0f 90       	pop	r0
    e3f2:	df 91       	pop	r29
    e3f4:	cf 91       	pop	r28
    e3f6:	1f 91       	pop	r17
    e3f8:	0f 91       	pop	r16
    e3fa:	ff 90       	pop	r15
    e3fc:	ef 90       	pop	r14
    e3fe:	bf 90       	pop	r11
    e400:	af 90       	pop	r10
    e402:	9f 90       	pop	r9
    e404:	8f 90       	pop	r8
    e406:	08 95       	ret

0000e408 <ELClientMqtt::lwt(char const*, char const*, unsigned char, unsigned char)>:
_ZN12ELClientMqtt3lwtEPKcS1_hh():
    e408:	af 92       	push	r10
    e40a:	bf 92       	push	r11
    e40c:	cf 92       	push	r12
    e40e:	df 92       	push	r13
    e410:	ef 92       	push	r14
    e412:	ff 92       	push	r15
    e414:	0f 93       	push	r16
    e416:	1f 93       	push	r17
    e418:	cf 93       	push	r28
    e41a:	df 93       	push	r29
    e41c:	1f 92       	push	r1
    e41e:	1f 92       	push	r1
    e420:	cd b7       	in	r28, 0x3d	; 61
    e422:	de b7       	in	r29, 0x3e	; 62
    e424:	7c 01       	movw	r14, r24
    e426:	5b 01       	movw	r10, r22
    e428:	6a 01       	movw	r12, r20
    e42a:	29 83       	std	Y+1, r18	; 0x01
    e42c:	0a 83       	std	Y+2, r16	; 0x02
    e42e:	04 e0       	ldi	r16, 0x04	; 4
    e430:	10 e0       	ldi	r17, 0x00	; 0
    e432:	20 e0       	ldi	r18, 0x00	; 0
    e434:	30 e0       	ldi	r19, 0x00	; 0
    e436:	a9 01       	movw	r20, r18
    e438:	6d e0       	ldi	r22, 0x0D	; 13
    e43a:	70 e0       	ldi	r23, 0x00	; 0
    e43c:	fc 01       	movw	r30, r24
    e43e:	80 8d       	ldd	r24, Z+24	; 0x18
    e440:	91 8d       	ldd	r25, Z+25	; 0x19
    e442:	0e 94 d5 6f 	call	0xdfaa	; 0xdfaa <ELClient::Request(unsigned int, unsigned long, unsigned int)>
    e446:	f5 01       	movw	r30, r10
    e448:	01 90       	ld	r0, Z+
    e44a:	00 20       	and	r0, r0
    e44c:	e9 f7       	brne	.-6      	; 0xe448 <ELClientMqtt::lwt(char const*, char const*, unsigned char, unsigned char)+0x40>
    e44e:	31 97       	sbiw	r30, 0x01	; 1
    e450:	af 01       	movw	r20, r30
    e452:	4a 19       	sub	r20, r10
    e454:	5b 09       	sbc	r21, r11
    e456:	b5 01       	movw	r22, r10
    e458:	f7 01       	movw	r30, r14
    e45a:	80 8d       	ldd	r24, Z+24	; 0x18
    e45c:	91 8d       	ldd	r25, Z+25	; 0x19
    e45e:	0e 94 4f 70 	call	0xe09e	; 0xe09e <ELClient::Request(void const*, unsigned int)>
    e462:	f6 01       	movw	r30, r12
    e464:	01 90       	ld	r0, Z+
    e466:	00 20       	and	r0, r0
    e468:	e9 f7       	brne	.-6      	; 0xe464 <ELClientMqtt::lwt(char const*, char const*, unsigned char, unsigned char)+0x5c>
    e46a:	31 97       	sbiw	r30, 0x01	; 1
    e46c:	af 01       	movw	r20, r30
    e46e:	4c 19       	sub	r20, r12
    e470:	5d 09       	sbc	r21, r13
    e472:	b6 01       	movw	r22, r12
    e474:	f7 01       	movw	r30, r14
    e476:	80 8d       	ldd	r24, Z+24	; 0x18
    e478:	91 8d       	ldd	r25, Z+25	; 0x19
    e47a:	0e 94 4f 70 	call	0xe09e	; 0xe09e <ELClient::Request(void const*, unsigned int)>
    e47e:	41 e0       	ldi	r20, 0x01	; 1
    e480:	50 e0       	ldi	r21, 0x00	; 0
    e482:	be 01       	movw	r22, r28
    e484:	6f 5f       	subi	r22, 0xFF	; 255
    e486:	7f 4f       	sbci	r23, 0xFF	; 255
    e488:	f7 01       	movw	r30, r14
    e48a:	80 8d       	ldd	r24, Z+24	; 0x18
    e48c:	91 8d       	ldd	r25, Z+25	; 0x19
    e48e:	0e 94 4f 70 	call	0xe09e	; 0xe09e <ELClient::Request(void const*, unsigned int)>
    e492:	41 e0       	ldi	r20, 0x01	; 1
    e494:	50 e0       	ldi	r21, 0x00	; 0
    e496:	be 01       	movw	r22, r28
    e498:	6e 5f       	subi	r22, 0xFE	; 254
    e49a:	7f 4f       	sbci	r23, 0xFF	; 255
    e49c:	f7 01       	movw	r30, r14
    e49e:	80 8d       	ldd	r24, Z+24	; 0x18
    e4a0:	91 8d       	ldd	r25, Z+25	; 0x19
    e4a2:	0e 94 4f 70 	call	0xe09e	; 0xe09e <ELClient::Request(void const*, unsigned int)>
    e4a6:	f7 01       	movw	r30, r14
    e4a8:	80 8d       	ldd	r24, Z+24	; 0x18
    e4aa:	91 8d       	ldd	r25, Z+25	; 0x19
    e4ac:	0e 94 8d 6d 	call	0xdb1a	; 0xdb1a <ELClient::Request()>
    e4b0:	0f 90       	pop	r0
    e4b2:	0f 90       	pop	r0
    e4b4:	df 91       	pop	r29
    e4b6:	cf 91       	pop	r28
    e4b8:	1f 91       	pop	r17
    e4ba:	0f 91       	pop	r16
    e4bc:	ff 90       	pop	r15
    e4be:	ef 90       	pop	r14
    e4c0:	df 90       	pop	r13
    e4c2:	cf 90       	pop	r12
    e4c4:	bf 90       	pop	r11
    e4c6:	af 90       	pop	r10
    e4c8:	08 95       	ret

0000e4ca <ELClientMqtt::subscribe(char const*, unsigned char)>:
_ZN12ELClientMqtt9subscribeEPKch():
    e4ca:	cf 92       	push	r12
    e4cc:	df 92       	push	r13
    e4ce:	ef 92       	push	r14
    e4d0:	ff 92       	push	r15
    e4d2:	0f 93       	push	r16
    e4d4:	1f 93       	push	r17
    e4d6:	cf 93       	push	r28
    e4d8:	df 93       	push	r29
    e4da:	1f 92       	push	r1
    e4dc:	cd b7       	in	r28, 0x3d	; 61
    e4de:	de b7       	in	r29, 0x3e	; 62
    e4e0:	7c 01       	movw	r14, r24
    e4e2:	6b 01       	movw	r12, r22
    e4e4:	49 83       	std	Y+1, r20	; 0x01
    e4e6:	02 e0       	ldi	r16, 0x02	; 2
    e4e8:	10 e0       	ldi	r17, 0x00	; 0
    e4ea:	20 e0       	ldi	r18, 0x00	; 0
    e4ec:	30 e0       	ldi	r19, 0x00	; 0
    e4ee:	a9 01       	movw	r20, r18
    e4f0:	6c e0       	ldi	r22, 0x0C	; 12
    e4f2:	70 e0       	ldi	r23, 0x00	; 0
    e4f4:	fc 01       	movw	r30, r24
    e4f6:	80 8d       	ldd	r24, Z+24	; 0x18
    e4f8:	91 8d       	ldd	r25, Z+25	; 0x19
    e4fa:	0e 94 d5 6f 	call	0xdfaa	; 0xdfaa <ELClient::Request(unsigned int, unsigned long, unsigned int)>
    e4fe:	f6 01       	movw	r30, r12
    e500:	01 90       	ld	r0, Z+
    e502:	00 20       	and	r0, r0
    e504:	e9 f7       	brne	.-6      	; 0xe500 <ELClientMqtt::subscribe(char const*, unsigned char)+0x36>
    e506:	31 97       	sbiw	r30, 0x01	; 1
    e508:	af 01       	movw	r20, r30
    e50a:	4c 19       	sub	r20, r12
    e50c:	5d 09       	sbc	r21, r13
    e50e:	b6 01       	movw	r22, r12
    e510:	f7 01       	movw	r30, r14
    e512:	80 8d       	ldd	r24, Z+24	; 0x18
    e514:	91 8d       	ldd	r25, Z+25	; 0x19
    e516:	0e 94 4f 70 	call	0xe09e	; 0xe09e <ELClient::Request(void const*, unsigned int)>
    e51a:	41 e0       	ldi	r20, 0x01	; 1
    e51c:	50 e0       	ldi	r21, 0x00	; 0
    e51e:	be 01       	movw	r22, r28
    e520:	6f 5f       	subi	r22, 0xFF	; 255
    e522:	7f 4f       	sbci	r23, 0xFF	; 255
    e524:	f7 01       	movw	r30, r14
    e526:	80 8d       	ldd	r24, Z+24	; 0x18
    e528:	91 8d       	ldd	r25, Z+25	; 0x19
    e52a:	0e 94 4f 70 	call	0xe09e	; 0xe09e <ELClient::Request(void const*, unsigned int)>
    e52e:	f7 01       	movw	r30, r14
    e530:	80 8d       	ldd	r24, Z+24	; 0x18
    e532:	91 8d       	ldd	r25, Z+25	; 0x19
    e534:	0e 94 8d 6d 	call	0xdb1a	; 0xdb1a <ELClient::Request()>
    e538:	0f 90       	pop	r0
    e53a:	df 91       	pop	r29
    e53c:	cf 91       	pop	r28
    e53e:	1f 91       	pop	r17
    e540:	0f 91       	pop	r16
    e542:	ff 90       	pop	r15
    e544:	ef 90       	pop	r14
    e546:	df 90       	pop	r13
    e548:	cf 90       	pop	r12
    e54a:	08 95       	ret

0000e54c <ELClientMqtt::publish(char const*, unsigned char const*, unsigned int, unsigned char, unsigned char)>:
_ZN12ELClientMqtt7publishEPKcPKhjhh():
C:\Program Files (x86)\Arduino\libraries\ELClient/ELClientMqtt.cpp:175
  mqtt.publish("/hello/world/arduino", buf, 12);
@endcode
*/
void ELClientMqtt::publish(const char* topic, const uint8_t* data, const uint16_t len,
    uint8_t qos, uint8_t retain)
{
    e54c:	8f 92       	push	r8
    e54e:	9f 92       	push	r9
    e550:	af 92       	push	r10
    e552:	bf 92       	push	r11
    e554:	cf 92       	push	r12
    e556:	df 92       	push	r13
    e558:	ef 92       	push	r14
    e55a:	0f 93       	push	r16
    e55c:	1f 93       	push	r17
    e55e:	cf 93       	push	r28
    e560:	df 93       	push	r29
    e562:	00 d0       	rcall	.+0      	; 0xe564 <ELClientMqtt::publish(char const*, unsigned char const*, unsigned int, unsigned char, unsigned char)+0x18>
    e564:	1f 92       	push	r1
    e566:	cd b7       	in	r28, 0x3d	; 61
    e568:	de b7       	in	r29, 0x3e	; 62
    e56a:	6c 01       	movw	r12, r24
    e56c:	5b 01       	movw	r10, r22
    e56e:	4a 01       	movw	r8, r20
    e570:	3a 83       	std	Y+2, r19	; 0x02
    e572:	29 83       	std	Y+1, r18	; 0x01
    e574:	0b 83       	std	Y+3, r16	; 0x03
    e576:	ec 82       	std	Y+4, r14	; 0x04
C:\Program Files (x86)\Arduino\libraries\ELClient/ELClientMqtt.cpp:176
  _elc->Request(CMD_MQTT_PUBLISH, 0, 5);
    e578:	05 e0       	ldi	r16, 0x05	; 5
    e57a:	10 e0       	ldi	r17, 0x00	; 0
    e57c:	20 e0       	ldi	r18, 0x00	; 0
    e57e:	30 e0       	ldi	r19, 0x00	; 0
    e580:	a9 01       	movw	r20, r18
    e582:	6b e0       	ldi	r22, 0x0B	; 11
    e584:	70 e0       	ldi	r23, 0x00	; 0
    e586:	fc 01       	movw	r30, r24
    e588:	80 8d       	ldd	r24, Z+24	; 0x18
    e58a:	91 8d       	ldd	r25, Z+25	; 0x19
    e58c:	0e 94 d5 6f 	call	0xdfaa	; 0xdfaa <ELClient::Request(unsigned int, unsigned long, unsigned int)>
C:\Program Files (x86)\Arduino\libraries\ELClient/ELClientMqtt.cpp:177
  _elc->Request(topic, strlen(topic));
    e590:	f5 01       	movw	r30, r10
    e592:	01 90       	ld	r0, Z+
    e594:	00 20       	and	r0, r0
    e596:	e9 f7       	brne	.-6      	; 0xe592 <ELClientMqtt::publish(char const*, unsigned char const*, unsigned int, unsigned char, unsigned char)+0x46>
    e598:	31 97       	sbiw	r30, 0x01	; 1
    e59a:	af 01       	movw	r20, r30
    e59c:	4a 19       	sub	r20, r10
    e59e:	5b 09       	sbc	r21, r11
    e5a0:	b5 01       	movw	r22, r10
    e5a2:	f6 01       	movw	r30, r12
    e5a4:	80 8d       	ldd	r24, Z+24	; 0x18
    e5a6:	91 8d       	ldd	r25, Z+25	; 0x19
    e5a8:	0e 94 4f 70 	call	0xe09e	; 0xe09e <ELClient::Request(void const*, unsigned int)>
C:\Program Files (x86)\Arduino\libraries\ELClient/ELClientMqtt.cpp:178
  _elc->Request(data, len);
    e5ac:	49 81       	ldd	r20, Y+1	; 0x01
    e5ae:	5a 81       	ldd	r21, Y+2	; 0x02
    e5b0:	b4 01       	movw	r22, r8
    e5b2:	f6 01       	movw	r30, r12
    e5b4:	80 8d       	ldd	r24, Z+24	; 0x18
    e5b6:	91 8d       	ldd	r25, Z+25	; 0x19
    e5b8:	0e 94 4f 70 	call	0xe09e	; 0xe09e <ELClient::Request(void const*, unsigned int)>
C:\Program Files (x86)\Arduino\libraries\ELClient/ELClientMqtt.cpp:179
  _elc->Request(&len, 2);
    e5bc:	42 e0       	ldi	r20, 0x02	; 2
    e5be:	50 e0       	ldi	r21, 0x00	; 0
    e5c0:	be 01       	movw	r22, r28
    e5c2:	6f 5f       	subi	r22, 0xFF	; 255
    e5c4:	7f 4f       	sbci	r23, 0xFF	; 255
    e5c6:	f6 01       	movw	r30, r12
    e5c8:	80 8d       	ldd	r24, Z+24	; 0x18
    e5ca:	91 8d       	ldd	r25, Z+25	; 0x19
    e5cc:	0e 94 4f 70 	call	0xe09e	; 0xe09e <ELClient::Request(void const*, unsigned int)>
C:\Program Files (x86)\Arduino\libraries\ELClient/ELClientMqtt.cpp:180
  _elc->Request(&qos, 1);
    e5d0:	41 e0       	ldi	r20, 0x01	; 1
    e5d2:	50 e0       	ldi	r21, 0x00	; 0
    e5d4:	be 01       	movw	r22, r28
    e5d6:	6d 5f       	subi	r22, 0xFD	; 253
    e5d8:	7f 4f       	sbci	r23, 0xFF	; 255
    e5da:	f6 01       	movw	r30, r12
    e5dc:	80 8d       	ldd	r24, Z+24	; 0x18
    e5de:	91 8d       	ldd	r25, Z+25	; 0x19
    e5e0:	0e 94 4f 70 	call	0xe09e	; 0xe09e <ELClient::Request(void const*, unsigned int)>
C:\Program Files (x86)\Arduino\libraries\ELClient/ELClientMqtt.cpp:181
  _elc->Request(&retain, 1);
    e5e4:	41 e0       	ldi	r20, 0x01	; 1
    e5e6:	50 e0       	ldi	r21, 0x00	; 0
    e5e8:	be 01       	movw	r22, r28
    e5ea:	6c 5f       	subi	r22, 0xFC	; 252
    e5ec:	7f 4f       	sbci	r23, 0xFF	; 255
    e5ee:	f6 01       	movw	r30, r12
    e5f0:	80 8d       	ldd	r24, Z+24	; 0x18
    e5f2:	91 8d       	ldd	r25, Z+25	; 0x19
    e5f4:	0e 94 4f 70 	call	0xe09e	; 0xe09e <ELClient::Request(void const*, unsigned int)>
C:\Program Files (x86)\Arduino\libraries\ELClient/ELClientMqtt.cpp:182
  _elc->Request();
    e5f8:	f6 01       	movw	r30, r12
    e5fa:	80 8d       	ldd	r24, Z+24	; 0x18
    e5fc:	91 8d       	ldd	r25, Z+25	; 0x19
    e5fe:	0e 94 8d 6d 	call	0xdb1a	; 0xdb1a <ELClient::Request()>
C:\Program Files (x86)\Arduino\libraries\ELClient/ELClientMqtt.cpp:183
}
    e602:	0f 90       	pop	r0
    e604:	0f 90       	pop	r0
    e606:	0f 90       	pop	r0
    e608:	0f 90       	pop	r0
    e60a:	df 91       	pop	r29
    e60c:	cf 91       	pop	r28
    e60e:	1f 91       	pop	r17
    e610:	0f 91       	pop	r16
    e612:	ef 90       	pop	r14
    e614:	df 90       	pop	r13
    e616:	cf 90       	pop	r12
    e618:	bf 90       	pop	r11
    e61a:	af 90       	pop	r10
    e61c:	9f 90       	pop	r9
    e61e:	8f 90       	pop	r8
    e620:	08 95       	ret

0000e622 <ELClientMqtt::publish(char const*, char const*, unsigned char, unsigned char)>:
_ZN12ELClientMqtt7publishEPKcS1_hh():
C:\Program Files (x86)\Arduino\libraries\ELClient/ELClientMqtt.cpp:207
  itoa(count+99, buf, 10);
  mqtt.publish("/hello/world/arduino", buf);
@endcode
*/
void ELClientMqtt::publish(const char* topic, const char* data, uint8_t qos, uint8_t retain)
{
    e622:	ef 92       	push	r14
    e624:	0f 93       	push	r16
C:\Program Files (x86)\Arduino\libraries\ELClient/ELClientMqtt.cpp:208
  publish(topic, (uint8_t*)data, strlen(data), qos, retain);
    e626:	fa 01       	movw	r30, r20
    e628:	01 90       	ld	r0, Z+
    e62a:	00 20       	and	r0, r0
    e62c:	e9 f7       	brne	.-6      	; 0xe628 <ELClientMqtt::publish(char const*, char const*, unsigned char, unsigned char)+0x6>
    e62e:	31 97       	sbiw	r30, 0x01	; 1
    e630:	e4 1b       	sub	r30, r20
    e632:	f5 0b       	sbc	r31, r21
    e634:	e0 2e       	mov	r14, r16
    e636:	02 2f       	mov	r16, r18
    e638:	9f 01       	movw	r18, r30
    e63a:	0e 94 a6 72 	call	0xe54c	; 0xe54c <ELClientMqtt::publish(char const*, unsigned char const*, unsigned int, unsigned char, unsigned char)>
C:\Program Files (x86)\Arduino\libraries\ELClient/ELClientMqtt.cpp:209
}
    e63e:	0f 91       	pop	r16
    e640:	ef 90       	pop	r14
    e642:	08 95       	ret

0000e644 <ELClientResponse::ELClientResponse(ELClientPacket*)>:
_ZN16ELClientResponseC2EP14ELClientPacket():
C:\Program Files (x86)\Arduino\libraries\ELClient/ELClientResponse.cpp:113
    buffer[i] = (char)*_arg_ptr++;
  }
  buffer[i] = '\0';

  _arg_ptr += pad;
}
    e644:	fc 01       	movw	r30, r24
    e646:	75 83       	std	Z+5, r23	; 0x05
    e648:	64 83       	std	Z+4, r22	; 0x04
    e64a:	68 5f       	subi	r22, 0xF8	; 248
    e64c:	7f 4f       	sbci	r23, 0xFF	; 255
    e64e:	73 83       	std	Z+3, r23	; 0x03
    e650:	62 83       	std	Z+2, r22	; 0x02
    e652:	11 82       	std	Z+1, r1	; 0x01
    e654:	10 82       	st	Z, r1
    e656:	08 95       	ret

0000e658 <ELClientResponse::popArgPtr(void**)>:
_ZN16ELClientResponse9popArgPtrEPPv():
    e658:	cf 93       	push	r28
    e65a:	df 93       	push	r29
    e65c:	fc 01       	movw	r30, r24
    e65e:	80 81       	ld	r24, Z
    e660:	91 81       	ldd	r25, Z+1	; 0x01
    e662:	a4 81       	ldd	r26, Z+4	; 0x04
    e664:	b5 81       	ldd	r27, Z+5	; 0x05
    e666:	12 96       	adiw	r26, 0x02	; 2
    e668:	2d 91       	ld	r18, X+
    e66a:	3c 91       	ld	r19, X
    e66c:	82 17       	cp	r24, r18
    e66e:	93 07       	cpc	r25, r19
    e670:	f0 f4       	brcc	.+60     	; 0xe6ae <ELClientResponse::popArgPtr(void**)+0x56>
    e672:	a2 81       	ldd	r26, Z+2	; 0x02
    e674:	b3 81       	ldd	r27, Z+3	; 0x03
    e676:	2d 91       	ld	r18, X+
    e678:	3d 91       	ld	r19, X+
    e67a:	b3 83       	std	Z+3, r27	; 0x03
    e67c:	a2 83       	std	Z+2, r26	; 0x02
    e67e:	01 96       	adiw	r24, 0x01	; 1
    e680:	91 83       	std	Z+1, r25	; 0x01
    e682:	80 83       	st	Z, r24
    e684:	eb 01       	movw	r28, r22
    e686:	b9 83       	std	Y+1, r27	; 0x01
    e688:	a8 83       	st	Y, r26
    e68a:	8e ef       	ldi	r24, 0xFE	; 254
    e68c:	9f ef       	ldi	r25, 0xFF	; 255
    e68e:	82 1b       	sub	r24, r18
    e690:	93 0b       	sbc	r25, r19
    e692:	83 70       	andi	r24, 0x03	; 3
    e694:	99 27       	eor	r25, r25
    e696:	82 0f       	add	r24, r18
    e698:	93 1f       	adc	r25, r19
    e69a:	42 81       	ldd	r20, Z+2	; 0x02
    e69c:	53 81       	ldd	r21, Z+3	; 0x03
    e69e:	84 0f       	add	r24, r20
    e6a0:	95 1f       	adc	r25, r21
    e6a2:	93 83       	std	Z+3, r25	; 0x03
    e6a4:	82 83       	std	Z+2, r24	; 0x02
    e6a6:	c9 01       	movw	r24, r18
    e6a8:	df 91       	pop	r29
    e6aa:	cf 91       	pop	r28
    e6ac:	08 95       	ret
    e6ae:	8f ef       	ldi	r24, 0xFF	; 255
    e6b0:	9f ef       	ldi	r25, 0xFF	; 255
    e6b2:	fa cf       	rjmp	.-12     	; 0xe6a8 <ELClientResponse::popArgPtr(void**)+0x50>

0000e6b4 <ELClientResponse::popArg(void*, unsigned int)>:
_ZN16ELClientResponse6popArgEPvj():
    e6b4:	ef 92       	push	r14
    e6b6:	ff 92       	push	r15
    e6b8:	0f 93       	push	r16
    e6ba:	1f 93       	push	r17
    e6bc:	cf 93       	push	r28
    e6be:	df 93       	push	r29
    e6c0:	fc 01       	movw	r30, r24
    e6c2:	80 81       	ld	r24, Z
    e6c4:	91 81       	ldd	r25, Z+1	; 0x01
    e6c6:	a4 81       	ldd	r26, Z+4	; 0x04
    e6c8:	b5 81       	ldd	r27, Z+5	; 0x05
    e6ca:	12 96       	adiw	r26, 0x02	; 2
    e6cc:	2d 91       	ld	r18, X+
    e6ce:	3c 91       	ld	r19, X
    e6d0:	82 17       	cp	r24, r18
    e6d2:	93 07       	cpc	r25, r19
    e6d4:	90 f5       	brcc	.+100    	; 0xe73a <ELClientResponse::popArg(void*, unsigned int)+0x86>
    e6d6:	a2 81       	ldd	r26, Z+2	; 0x02
    e6d8:	b3 81       	ldd	r27, Z+3	; 0x03
    e6da:	cd 91       	ld	r28, X+
    e6dc:	dd 91       	ld	r29, X+
    e6de:	2e ef       	ldi	r18, 0xFE	; 254
    e6e0:	3f ef       	ldi	r19, 0xFF	; 255
    e6e2:	2c 1b       	sub	r18, r28
    e6e4:	3d 0b       	sbc	r19, r29
    e6e6:	23 70       	andi	r18, 0x03	; 3
    e6e8:	33 27       	eor	r19, r19
    e6ea:	b3 83       	std	Z+3, r27	; 0x03
    e6ec:	a2 83       	std	Z+2, r26	; 0x02
    e6ee:	01 96       	adiw	r24, 0x01	; 1
    e6f0:	91 83       	std	Z+1, r25	; 0x01
    e6f2:	80 83       	st	Z, r24
    e6f4:	7d 01       	movw	r14, r26
    e6f6:	cb 01       	movw	r24, r22
    e6f8:	8e 01       	movw	r16, r28
    e6fa:	4c 17       	cp	r20, r28
    e6fc:	5d 07       	cpc	r21, r29
    e6fe:	08 f4       	brcc	.+2      	; 0xe702 <ELClientResponse::popArg(void*, unsigned int)+0x4e>
    e700:	8a 01       	movw	r16, r20
    e702:	60 0f       	add	r22, r16
    e704:	71 1f       	adc	r23, r17
    e706:	68 17       	cp	r22, r24
    e708:	79 07       	cpc	r23, r25
    e70a:	39 f0       	breq	.+14     	; 0xe71a <ELClientResponse::popArg(void*, unsigned int)+0x66>
    e70c:	d7 01       	movw	r26, r14
    e70e:	4d 91       	ld	r20, X+
    e710:	7d 01       	movw	r14, r26
    e712:	dc 01       	movw	r26, r24
    e714:	4d 93       	st	X+, r20
    e716:	cd 01       	movw	r24, r26
    e718:	f6 cf       	rjmp	.-20     	; 0xe706 <ELClientResponse::popArg(void*, unsigned int)+0x52>
    e71a:	2c 0f       	add	r18, r28
    e71c:	3d 1f       	adc	r19, r29
    e71e:	82 81       	ldd	r24, Z+2	; 0x02
    e720:	93 81       	ldd	r25, Z+3	; 0x03
    e722:	82 0f       	add	r24, r18
    e724:	93 1f       	adc	r25, r19
    e726:	93 83       	std	Z+3, r25	; 0x03
    e728:	82 83       	std	Z+2, r24	; 0x02
    e72a:	ce 01       	movw	r24, r28
    e72c:	df 91       	pop	r29
    e72e:	cf 91       	pop	r28
    e730:	1f 91       	pop	r17
    e732:	0f 91       	pop	r16
    e734:	ff 90       	pop	r15
    e736:	ef 90       	pop	r14
    e738:	08 95       	ret
    e73a:	8f ef       	ldi	r24, 0xFF	; 255
    e73c:	9f ef       	ldi	r25, 0xFF	; 255
    e73e:	f6 cf       	rjmp	.-20     	; 0xe72c <ELClientResponse::popArg(void*, unsigned int)+0x78>

0000e740 <ELClientResponse::popString()>:
_ZN16ELClientResponse9popStringEv():
C:\Program Files (x86)\Arduino\libraries\ELClient/ELClientResponse.cpp:124
@par Example
@code
	no example code yet
@endcode
*/
String ELClientResponse::popString() {
    e740:	cf 92       	push	r12
    e742:	df 92       	push	r13
    e744:	ef 92       	push	r14
    e746:	ff 92       	push	r15
    e748:	0f 93       	push	r16
    e74a:	1f 93       	push	r17
    e74c:	cf 93       	push	r28
    e74e:	df 93       	push	r29
    e750:	7c 01       	movw	r14, r24
    e752:	eb 01       	movw	r28, r22
C:\Program Files (x86)\Arduino\libraries\ELClient/ELClientResponse.cpp:125
  String ret;
    e754:	6b e2       	ldi	r22, 0x2B	; 43
    e756:	7b e0       	ldi	r23, 0x0B	; 11
    e758:	0e 94 91 8e 	call	0x11d22	; 0x11d22 <String::String(char const*)>
C:\Program Files (x86)\Arduino\libraries\ELClient/ELClientResponse.cpp:126
  uint16_t len = *(uint16_t*)_arg_ptr;
    e75c:	aa 81       	ldd	r26, Y+2	; 0x02
    e75e:	bb 81       	ldd	r27, Y+3	; 0x03
    e760:	cd 90       	ld	r12, X+
    e762:	dd 90       	ld	r13, X+
C:\Program Files (x86)\Arduino\libraries\ELClient/ELClientResponse.cpp:127
  uint16_t pad = (4-((len+2)&3))&3;    // pad to next multiple of 4, including length
    e764:	ee ef       	ldi	r30, 0xFE	; 254
    e766:	ff ef       	ldi	r31, 0xFF	; 255
    e768:	ec 19       	sub	r30, r12
    e76a:	fd 09       	sbc	r31, r13
    e76c:	8f 01       	movw	r16, r30
    e76e:	03 70       	andi	r16, 0x03	; 3
    e770:	11 27       	eor	r17, r17
C:\Program Files (x86)\Arduino\libraries\ELClient/ELClientResponse.cpp:128
  _arg_ptr += 2;
    e772:	bb 83       	std	Y+3, r27	; 0x03
    e774:	aa 83       	std	Y+2, r26	; 0x02
C:\Program Files (x86)\Arduino\libraries\ELClient/ELClientResponse.cpp:129
  _arg_num++;
    e776:	88 81       	ld	r24, Y
    e778:	99 81       	ldd	r25, Y+1	; 0x01
    e77a:	01 96       	adiw	r24, 0x01	; 1
    e77c:	99 83       	std	Y+1, r25	; 0x01
    e77e:	88 83       	st	Y, r24
C:\Program Files (x86)\Arduino\libraries\ELClient/ELClientResponse.cpp:131

  while (len--)
    e780:	81 e0       	ldi	r24, 0x01	; 1
    e782:	c8 1a       	sub	r12, r24
    e784:	d1 08       	sbc	r13, r1
    e786:	ea 81       	ldd	r30, Y+2	; 0x02
    e788:	fb 81       	ldd	r31, Y+3	; 0x03
    e78a:	8f ef       	ldi	r24, 0xFF	; 255
    e78c:	c8 16       	cp	r12, r24
    e78e:	d8 06       	cpc	r13, r24
    e790:	49 f0       	breq	.+18     	; 0xe7a4 <ELClientResponse::popString()+0x64>
C:\Program Files (x86)\Arduino\libraries\ELClient/ELClientResponse.cpp:132
    ret += (char)*_arg_ptr++;
    e792:	cf 01       	movw	r24, r30
    e794:	01 96       	adiw	r24, 0x01	; 1
    e796:	9b 83       	std	Y+3, r25	; 0x03
    e798:	8a 83       	std	Y+2, r24	; 0x02
_ZN6StringpLEc():
C:\Users\bitmu\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/WString.h:115

  // if there's not enough memory for the concatenated value, the string
  // will be left unchanged (but this isn't signalled in any way)
  String & operator += (const String &rhs)  {concat(rhs); return (*this);}
  String & operator += (const char *cstr)   {concat(cstr); return (*this);}
  String & operator += (char c)     {concat(c); return (*this);}
    e79a:	60 81       	ld	r22, Z
    e79c:	c7 01       	movw	r24, r14
    e79e:	0e 94 e9 8e 	call	0x11dd2	; 0x11dd2 <String::concat(char)>
    e7a2:	ee cf       	rjmp	.-36     	; 0xe780 <ELClientResponse::popString()+0x40>
_ZN16ELClientResponse9popStringEv():
C:\Program Files (x86)\Arduino\libraries\ELClient/ELClientResponse.cpp:134

  _arg_ptr += pad;
    e7a4:	e0 0f       	add	r30, r16
    e7a6:	f1 1f       	adc	r31, r17
    e7a8:	fb 83       	std	Y+3, r31	; 0x03
    e7aa:	ea 83       	std	Y+2, r30	; 0x02
C:\Program Files (x86)\Arduino\libraries\ELClient/ELClientResponse.cpp:136
  return ret;
}
    e7ac:	c7 01       	movw	r24, r14
    e7ae:	df 91       	pop	r29
    e7b0:	cf 91       	pop	r28
    e7b2:	1f 91       	pop	r17
    e7b4:	0f 91       	pop	r16
    e7b6:	ff 90       	pop	r15
    e7b8:	ef 90       	pop	r14
    e7ba:	df 90       	pop	r13
    e7bc:	cf 90       	pop	r12
    e7be:	08 95       	ret

0000e7c0 <ELClientRest::restCallback(void*)>:
_ZN12ELClientRest12restCallbackEPv():
C:\Program Files (x86)\Arduino\libraries\ELClient/ELClientRest.cpp:41
@param res
	Pointer to ELClientResponse structure
@warning The content of the response structure is overwritten when the next package arrives!
*/
void ELClientRest::restCallback(void *res)
{
    e7c0:	0f 93       	push	r16
    e7c2:	1f 93       	push	r17
    e7c4:	cf 93       	push	r28
    e7c6:	df 93       	push	r29
C:\Program Files (x86)\Arduino\libraries\ELClient/ELClientRest.cpp:42
  if (!res) return;
    e7c8:	61 15       	cp	r22, r1
    e7ca:	71 05       	cpc	r23, r1
    e7cc:	39 f1       	breq	.+78     	; 0xe81c <ELClientRest::restCallback(void*)+0x5c>
    e7ce:	8b 01       	movw	r16, r22
    e7d0:	ec 01       	movw	r28, r24
C:\Program Files (x86)\Arduino\libraries\ELClient/ELClientRest.cpp:46

  ELClientResponse *resp = (ELClientResponse *)res;

  resp->popArg(&_status, sizeof(_status));
    e7d2:	bc 01       	movw	r22, r24
    e7d4:	64 5f       	subi	r22, 0xF4	; 244
    e7d6:	7f 4f       	sbci	r23, 0xFF	; 255
    e7d8:	42 e0       	ldi	r20, 0x02	; 2
    e7da:	50 e0       	ldi	r21, 0x00	; 0
    e7dc:	c8 01       	movw	r24, r16
    e7de:	0e 94 5a 73 	call	0xe6b4	; 0xe6b4 <ELClientResponse::popArg(void*, unsigned int)>
C:\Program Files (x86)\Arduino\libraries\ELClient/ELClientRest.cpp:47
  if (_elc->_debugEn) {
    e7e2:	ec 81       	ldd	r30, Y+4	; 0x04
    e7e4:	fd 81       	ldd	r31, Y+5	; 0x05
    e7e6:	84 85       	ldd	r24, Z+12	; 0x0c
    e7e8:	88 23       	and	r24, r24
    e7ea:	81 f0       	breq	.+32     	; 0xe80c <ELClientRest::restCallback(void*)+0x4c>
C:\Program Files (x86)\Arduino\libraries\ELClient/ELClientRest.cpp:48
    _elc->_debug->print("REST code ");
    e7ec:	62 ef       	ldi	r22, 0xF2	; 242
    e7ee:	7a e0       	ldi	r23, 0x0A	; 10
    e7f0:	80 81       	ld	r24, Z
    e7f2:	91 81       	ldd	r25, Z+1	; 0x01
    e7f4:	0e 94 9e 8b 	call	0x1173c	; 0x1173c <Print::print(char const*)>
C:\Program Files (x86)\Arduino\libraries\ELClient/ELClientRest.cpp:49
    _elc->_debug->println(_status);
    e7f8:	6c 85       	ldd	r22, Y+12	; 0x0c
    e7fa:	7d 85       	ldd	r23, Y+13	; 0x0d
    e7fc:	ec 81       	ldd	r30, Y+4	; 0x04
    e7fe:	fd 81       	ldd	r31, Y+5	; 0x05
    e800:	4a e0       	ldi	r20, 0x0A	; 10
    e802:	50 e0       	ldi	r21, 0x00	; 0
    e804:	80 81       	ld	r24, Z
    e806:	91 81       	ldd	r25, Z+1	; 0x01
    e808:	0e 94 87 8c 	call	0x1190e	; 0x1190e <Print::println(int, int)>
C:\Program Files (x86)\Arduino\libraries\ELClient/ELClientRest.cpp:52
  }

  _len = resp->popArgPtr(&_data);
    e80c:	be 01       	movw	r22, r28
    e80e:	60 5f       	subi	r22, 0xF0	; 240
    e810:	7f 4f       	sbci	r23, 0xFF	; 255
    e812:	c8 01       	movw	r24, r16
    e814:	0e 94 2c 73 	call	0xe658	; 0xe658 <ELClientResponse::popArgPtr(void**)>
    e818:	9f 87       	std	Y+15, r25	; 0x0f
    e81a:	8e 87       	std	Y+14, r24	; 0x0e
C:\Program Files (x86)\Arduino\libraries\ELClient/ELClientRest.cpp:53
}
    e81c:	df 91       	pop	r29
    e81e:	cf 91       	pop	r28
    e820:	1f 91       	pop	r17
    e822:	0f 91       	pop	r16
    e824:	08 95       	ret

0000e826 <ELClientRest::ELClientRest(ELClient*)>:
_ZN12ELClientRestC2EP8ELClient():
C:\Program Files (x86)\Arduino\libraries\ELClient/ELClientRest.cpp:26
@par Example
@code
	ELClientRest(ELClient *e);
@endcode
*/
ELClientRest::ELClientRest(ELClient *e)
    e826:	0f 93       	push	r16
    e828:	1f 93       	push	r17
    e82a:	cf 93       	push	r28
    e82c:	df 93       	push	r29
    e82e:	ec 01       	movw	r28, r24
    e830:	8b 01       	movw	r16, r22
    e832:	06 96       	adiw	r24, 0x06	; 6
    e834:	0e 94 38 7a 	call	0xf470	; 0xf470 <FP<void, void*>::FP()>
C:\Program Files (x86)\Arduino\libraries\ELClient/ELClientRest.cpp:28
{
  _elc = e;
    e838:	1d 83       	std	Y+5, r17	; 0x05
    e83a:	0c 83       	std	Y+4, r16	; 0x04
C:\Program Files (x86)\Arduino\libraries\ELClient/ELClientRest.cpp:29
  remote_instance = -1;
    e83c:	8f ef       	ldi	r24, 0xFF	; 255
    e83e:	9f ef       	ldi	r25, 0xFF	; 255
    e840:	dc 01       	movw	r26, r24
    e842:	88 83       	st	Y, r24
    e844:	99 83       	std	Y+1, r25	; 0x01
    e846:	aa 83       	std	Y+2, r26	; 0x02
    e848:	bb 83       	std	Y+3, r27	; 0x03
C:\Program Files (x86)\Arduino\libraries\ELClient/ELClientRest.cpp:30
}
    e84a:	df 91       	pop	r29
    e84c:	cf 91       	pop	r28
    e84e:	1f 91       	pop	r17
    e850:	0f 91       	pop	r16
    e852:	08 95       	ret

0000e854 <ELClientRest::begin(char const*, unsigned int, bool)>:
_ZN12ELClientRest5beginEPKcjb():
C:\Program Files (x86)\Arduino\libraries\ELClient/ELClientRest.cpp:79
		while(1) ;
	}
@endcode
*/
int ELClientRest::begin(const char* host, uint16_t port, boolean security)
{
    e854:	cf 92       	push	r12
    e856:	df 92       	push	r13
    e858:	ef 92       	push	r14
    e85a:	ff 92       	push	r15
    e85c:	0f 93       	push	r16
    e85e:	1f 93       	push	r17
    e860:	cf 93       	push	r28
    e862:	df 93       	push	r29
    e864:	00 d0       	rcall	.+0      	; 0xe866 <ELClientRest::begin(char const*, unsigned int, bool)+0x12>
    e866:	cd b7       	in	r28, 0x3d	; 61
    e868:	de b7       	in	r29, 0x3e	; 62
    e86a:	7c 01       	movw	r14, r24
    e86c:	6b 01       	movw	r12, r22
    e86e:	5b 83       	std	Y+3, r21	; 0x03
    e870:	4a 83       	std	Y+2, r20	; 0x02
C:\Program Files (x86)\Arduino\libraries\ELClient/ELClientRest.cpp:80
  uint8_t sec = !!security;
    e872:	29 83       	std	Y+1, r18	; 0x01
_ZN2FPIvPvE6attachI12ELClientRestEEvPT_MS4_FvS0_E():
C:\Program Files (x86)\Arduino\libraries\ELClient/FP.h:149
     *  @param method - Address of the member function (dont forget the scope that the function is defined in)
     */
    template<class T>
    void attach(T *item, retT (T::*method)(argT))
    {
        obj_callback = (FPtrDummy *)(item);
    e874:	fc 01       	movw	r30, r24
    e876:	97 83       	std	Z+7, r25	; 0x07
    e878:	86 83       	std	Z+6, r24	; 0x06
C:\Program Files (x86)\Arduino\libraries\ELClient/FP.h:150
        method_callback = (retT (FPtrDummy::*)(argT))(method);
    e87a:	80 ee       	ldi	r24, 0xE0	; 224
    e87c:	93 e7       	ldi	r25, 0x73	; 115
    e87e:	b0 e0       	ldi	r27, 0x00	; 0
    e880:	a0 e0       	ldi	r26, 0x00	; 0
    e882:	80 87       	std	Z+8, r24	; 0x08
    e884:	91 87       	std	Z+9, r25	; 0x09
    e886:	a2 87       	std	Z+10, r26	; 0x0a
    e888:	b3 87       	std	Z+11, r27	; 0x0b
_ZN12ELClientRest5beginEPKcjb():
C:\Program Files (x86)\Arduino\libraries\ELClient/ELClientRest.cpp:81
  restCb.attach(this, &ELClientRest::restCallback);
    e88a:	97 01       	movw	r18, r14
    e88c:	2a 5f       	subi	r18, 0xFA	; 250
    e88e:	3f 4f       	sbci	r19, 0xFF	; 255
C:\Program Files (x86)\Arduino\libraries\ELClient/ELClientRest.cpp:83

  _elc->Request(CMD_REST_SETUP, (uint32_t)&restCb, 3);
    e890:	03 2e       	mov	r0, r19
    e892:	00 0c       	add	r0, r0
    e894:	44 0b       	sbc	r20, r20
    e896:	55 0b       	sbc	r21, r21
    e898:	03 e0       	ldi	r16, 0x03	; 3
    e89a:	10 e0       	ldi	r17, 0x00	; 0
    e89c:	64 e1       	ldi	r22, 0x14	; 20
    e89e:	70 e0       	ldi	r23, 0x00	; 0
    e8a0:	84 81       	ldd	r24, Z+4	; 0x04
    e8a2:	95 81       	ldd	r25, Z+5	; 0x05
    e8a4:	0e 94 d5 6f 	call	0xdfaa	; 0xdfaa <ELClient::Request(unsigned int, unsigned long, unsigned int)>
C:\Program Files (x86)\Arduino\libraries\ELClient/ELClientRest.cpp:84
  _elc->Request(host, strlen(host));
    e8a8:	f6 01       	movw	r30, r12
    e8aa:	01 90       	ld	r0, Z+
    e8ac:	00 20       	and	r0, r0
    e8ae:	e9 f7       	brne	.-6      	; 0xe8aa <ELClientRest::begin(char const*, unsigned int, bool)+0x56>
    e8b0:	31 97       	sbiw	r30, 0x01	; 1
    e8b2:	af 01       	movw	r20, r30
    e8b4:	4c 19       	sub	r20, r12
    e8b6:	5d 09       	sbc	r21, r13
    e8b8:	b6 01       	movw	r22, r12
    e8ba:	f7 01       	movw	r30, r14
    e8bc:	84 81       	ldd	r24, Z+4	; 0x04
    e8be:	95 81       	ldd	r25, Z+5	; 0x05
    e8c0:	0e 94 4f 70 	call	0xe09e	; 0xe09e <ELClient::Request(void const*, unsigned int)>
C:\Program Files (x86)\Arduino\libraries\ELClient/ELClientRest.cpp:85
  _elc->Request(&port, 2);
    e8c4:	42 e0       	ldi	r20, 0x02	; 2
    e8c6:	50 e0       	ldi	r21, 0x00	; 0
    e8c8:	be 01       	movw	r22, r28
    e8ca:	6e 5f       	subi	r22, 0xFE	; 254
    e8cc:	7f 4f       	sbci	r23, 0xFF	; 255
    e8ce:	f7 01       	movw	r30, r14
    e8d0:	84 81       	ldd	r24, Z+4	; 0x04
    e8d2:	95 81       	ldd	r25, Z+5	; 0x05
    e8d4:	0e 94 4f 70 	call	0xe09e	; 0xe09e <ELClient::Request(void const*, unsigned int)>
C:\Program Files (x86)\Arduino\libraries\ELClient/ELClientRest.cpp:86
  _elc->Request(&sec, 1);
    e8d8:	41 e0       	ldi	r20, 0x01	; 1
    e8da:	50 e0       	ldi	r21, 0x00	; 0
    e8dc:	be 01       	movw	r22, r28
    e8de:	6f 5f       	subi	r22, 0xFF	; 255
    e8e0:	7f 4f       	sbci	r23, 0xFF	; 255
    e8e2:	f7 01       	movw	r30, r14
    e8e4:	84 81       	ldd	r24, Z+4	; 0x04
    e8e6:	95 81       	ldd	r25, Z+5	; 0x05
    e8e8:	0e 94 4f 70 	call	0xe09e	; 0xe09e <ELClient::Request(void const*, unsigned int)>
C:\Program Files (x86)\Arduino\libraries\ELClient/ELClientRest.cpp:87
  _elc->Request();
    e8ec:	f7 01       	movw	r30, r14
    e8ee:	84 81       	ldd	r24, Z+4	; 0x04
    e8f0:	95 81       	ldd	r25, Z+5	; 0x05
    e8f2:	0e 94 8d 6d 	call	0xdb1a	; 0xdb1a <ELClient::Request()>
C:\Program Files (x86)\Arduino\libraries\ELClient/ELClientRest.cpp:89

  ELClientPacket *pkt = _elc->WaitReturn();
    e8f6:	40 ed       	ldi	r20, 0xD0	; 208
    e8f8:	57 e0       	ldi	r21, 0x07	; 7
    e8fa:	60 e0       	ldi	r22, 0x00	; 0
    e8fc:	70 e0       	ldi	r23, 0x00	; 0
    e8fe:	f7 01       	movw	r30, r14
    e900:	84 81       	ldd	r24, Z+4	; 0x04
    e902:	95 81       	ldd	r25, Z+5	; 0x05
    e904:	0e 94 a6 6f 	call	0xdf4c	; 0xdf4c <ELClient::WaitReturn(unsigned long)>
C:\Program Files (x86)\Arduino\libraries\ELClient/ELClientRest.cpp:90
  if (pkt && (int32_t)pkt->value >= 0) {
    e908:	00 97       	sbiw	r24, 0x00	; 0
    e90a:	d1 f0       	breq	.+52     	; 0xe940 <ELClientRest::begin(char const*, unsigned int, bool)+0xec>
C:\Program Files (x86)\Arduino\libraries\ELClient/ELClientRest.cpp:90 (discriminator 1)
    e90c:	fc 01       	movw	r30, r24
    e90e:	44 81       	ldd	r20, Z+4	; 0x04
    e910:	55 81       	ldd	r21, Z+5	; 0x05
    e912:	66 81       	ldd	r22, Z+6	; 0x06
    e914:	77 81       	ldd	r23, Z+7	; 0x07
    e916:	77 fd       	sbrc	r23, 7
    e918:	13 c0       	rjmp	.+38     	; 0xe940 <ELClientRest::begin(char const*, unsigned int, bool)+0xec>
C:\Program Files (x86)\Arduino\libraries\ELClient/ELClientRest.cpp:91
    remote_instance = pkt->value;
    e91a:	f7 01       	movw	r30, r14
    e91c:	40 83       	st	Z, r20
    e91e:	51 83       	std	Z+1, r21	; 0x01
    e920:	62 83       	std	Z+2, r22	; 0x02
    e922:	73 83       	std	Z+3, r23	; 0x03
C:\Program Files (x86)\Arduino\libraries\ELClient/ELClientRest.cpp:92
    return 0;
    e924:	90 e0       	ldi	r25, 0x00	; 0
    e926:	80 e0       	ldi	r24, 0x00	; 0
C:\Program Files (x86)\Arduino\libraries\ELClient/ELClientRest.cpp:95
  }
  return (int)pkt->value;
}
    e928:	0f 90       	pop	r0
    e92a:	0f 90       	pop	r0
    e92c:	0f 90       	pop	r0
    e92e:	df 91       	pop	r29
    e930:	cf 91       	pop	r28
    e932:	1f 91       	pop	r17
    e934:	0f 91       	pop	r16
    e936:	ff 90       	pop	r15
    e938:	ef 90       	pop	r14
    e93a:	df 90       	pop	r13
    e93c:	cf 90       	pop	r12
    e93e:	08 95       	ret
C:\Program Files (x86)\Arduino\libraries\ELClient/ELClientRest.cpp:94
  ELClientPacket *pkt = _elc->WaitReturn();
  if (pkt && (int32_t)pkt->value >= 0) {
    remote_instance = pkt->value;
    return 0;
  }
  return (int)pkt->value;
    e940:	fc 01       	movw	r30, r24
    e942:	84 81       	ldd	r24, Z+4	; 0x04
    e944:	95 81       	ldd	r25, Z+5	; 0x05
    e946:	f0 cf       	rjmp	.-32     	; 0xe928 <ELClientRest::begin(char const*, unsigned int, bool)+0xd4>

0000e948 <ELClientRest::request(char const*, char const*, char const*, int)>:
_ZN12ELClientRest7requestEPKcS1_S1_i():
C:\Program Files (x86)\Arduino\libraries\ELClient/ELClientRest.cpp:113
@code
	no example code yet
@endcode
*/
void ELClientRest::request(const char* path, const char* method, const char* data, int len)
{
    e948:	8f 92       	push	r8
    e94a:	9f 92       	push	r9
    e94c:	af 92       	push	r10
    e94e:	bf 92       	push	r11
    e950:	cf 92       	push	r12
    e952:	df 92       	push	r13
    e954:	ef 92       	push	r14
    e956:	ff 92       	push	r15
    e958:	0f 93       	push	r16
    e95a:	1f 93       	push	r17
    e95c:	cf 93       	push	r28
    e95e:	df 93       	push	r29
    e960:	ec 01       	movw	r28, r24
    e962:	4a 01       	movw	r8, r20
    e964:	79 01       	movw	r14, r18
C:\Program Files (x86)\Arduino\libraries\ELClient/ELClientRest.cpp:114
  _status = 0;
    e966:	1d 86       	std	Y+13, r1	; 0x0d
    e968:	1c 86       	std	Y+12, r1	; 0x0c
C:\Program Files (x86)\Arduino\libraries\ELClient/ELClientRest.cpp:115
  if (remote_instance < 0) return;
    e96a:	28 81       	ld	r18, Y
    e96c:	39 81       	ldd	r19, Y+1	; 0x01
    e96e:	4a 81       	ldd	r20, Y+2	; 0x02
    e970:	5b 81       	ldd	r21, Y+3	; 0x03
    e972:	57 fd       	sbrc	r21, 7
    e974:	48 c0       	rjmp	.+144    	; 0xea06 <ELClientRest::request(char const*, char const*, char const*, int)+0xbe>
    e976:	68 01       	movw	r12, r16
    e978:	5b 01       	movw	r10, r22
    e97a:	8c 81       	ldd	r24, Y+4	; 0x04
    e97c:	9d 81       	ldd	r25, Y+5	; 0x05
C:\Program Files (x86)\Arduino\libraries\ELClient/ELClientRest.cpp:116
  if (data != 0 && len > 0) _elc->Request(CMD_REST_REQUEST, remote_instance, 3);
    e97e:	e1 14       	cp	r14, r1
    e980:	f1 04       	cpc	r15, r1
    e982:	29 f0       	breq	.+10     	; 0xe98e <ELClientRest::request(char const*, char const*, char const*, int)+0x46>
C:\Program Files (x86)\Arduino\libraries\ELClient/ELClientRest.cpp:116 (discriminator 1)
    e984:	03 e0       	ldi	r16, 0x03	; 3
    e986:	10 e0       	ldi	r17, 0x00	; 0
    e988:	1c 14       	cp	r1, r12
    e98a:	1d 04       	cpc	r1, r13
    e98c:	14 f0       	brlt	.+4      	; 0xe992 <ELClientRest::request(char const*, char const*, char const*, int)+0x4a>
C:\Program Files (x86)\Arduino\libraries\ELClient/ELClientRest.cpp:117
  else                      _elc->Request(CMD_REST_REQUEST, remote_instance, 2);
    e98e:	02 e0       	ldi	r16, 0x02	; 2
    e990:	10 e0       	ldi	r17, 0x00	; 0
    e992:	65 e1       	ldi	r22, 0x15	; 21
    e994:	70 e0       	ldi	r23, 0x00	; 0
    e996:	0e 94 d5 6f 	call	0xdfaa	; 0xdfaa <ELClient::Request(unsigned int, unsigned long, unsigned int)>
C:\Program Files (x86)\Arduino\libraries\ELClient/ELClientRest.cpp:118
  _elc->Request(method, strlen(method));
    e99a:	f4 01       	movw	r30, r8
    e99c:	01 90       	ld	r0, Z+
    e99e:	00 20       	and	r0, r0
    e9a0:	e9 f7       	brne	.-6      	; 0xe99c <ELClientRest::request(char const*, char const*, char const*, int)+0x54>
    e9a2:	31 97       	sbiw	r30, 0x01	; 1
    e9a4:	af 01       	movw	r20, r30
    e9a6:	48 19       	sub	r20, r8
    e9a8:	59 09       	sbc	r21, r9
    e9aa:	b4 01       	movw	r22, r8
    e9ac:	8c 81       	ldd	r24, Y+4	; 0x04
    e9ae:	9d 81       	ldd	r25, Y+5	; 0x05
    e9b0:	0e 94 4f 70 	call	0xe09e	; 0xe09e <ELClient::Request(void const*, unsigned int)>
C:\Program Files (x86)\Arduino\libraries\ELClient/ELClientRest.cpp:119
  _elc->Request(path, strlen(path));
    e9b4:	f5 01       	movw	r30, r10
    e9b6:	01 90       	ld	r0, Z+
    e9b8:	00 20       	and	r0, r0
    e9ba:	e9 f7       	brne	.-6      	; 0xe9b6 <ELClientRest::request(char const*, char const*, char const*, int)+0x6e>
    e9bc:	31 97       	sbiw	r30, 0x01	; 1
    e9be:	af 01       	movw	r20, r30
    e9c0:	4a 19       	sub	r20, r10
    e9c2:	5b 09       	sbc	r21, r11
    e9c4:	b5 01       	movw	r22, r10
    e9c6:	8c 81       	ldd	r24, Y+4	; 0x04
    e9c8:	9d 81       	ldd	r25, Y+5	; 0x05
    e9ca:	0e 94 4f 70 	call	0xe09e	; 0xe09e <ELClient::Request(void const*, unsigned int)>
C:\Program Files (x86)\Arduino\libraries\ELClient/ELClientRest.cpp:120
  if (data != NULL && len > 0) {
    e9ce:	e1 14       	cp	r14, r1
    e9d0:	f1 04       	cpc	r15, r1
    e9d2:	49 f0       	breq	.+18     	; 0xe9e6 <ELClientRest::request(char const*, char const*, char const*, int)+0x9e>
    e9d4:	1c 14       	cp	r1, r12
    e9d6:	1d 04       	cpc	r1, r13
    e9d8:	34 f4       	brge	.+12     	; 0xe9e6 <ELClientRest::request(char const*, char const*, char const*, int)+0x9e>
C:\Program Files (x86)\Arduino\libraries\ELClient/ELClientRest.cpp:121
    _elc->Request(data, len);
    e9da:	a6 01       	movw	r20, r12
    e9dc:	b7 01       	movw	r22, r14
    e9de:	8c 81       	ldd	r24, Y+4	; 0x04
    e9e0:	9d 81       	ldd	r25, Y+5	; 0x05
    e9e2:	0e 94 4f 70 	call	0xe09e	; 0xe09e <ELClient::Request(void const*, unsigned int)>
C:\Program Files (x86)\Arduino\libraries\ELClient/ELClientRest.cpp:124
  }

  _elc->Request();
    e9e6:	8c 81       	ldd	r24, Y+4	; 0x04
    e9e8:	9d 81       	ldd	r25, Y+5	; 0x05
C:\Program Files (x86)\Arduino\libraries\ELClient/ELClientRest.cpp:125
}
    e9ea:	df 91       	pop	r29
    e9ec:	cf 91       	pop	r28
    e9ee:	1f 91       	pop	r17
    e9f0:	0f 91       	pop	r16
    e9f2:	ff 90       	pop	r15
    e9f4:	ef 90       	pop	r14
    e9f6:	df 90       	pop	r13
    e9f8:	cf 90       	pop	r12
    e9fa:	bf 90       	pop	r11
    e9fc:	af 90       	pop	r10
    e9fe:	9f 90       	pop	r9
    ea00:	8f 90       	pop	r8
C:\Program Files (x86)\Arduino\libraries\ELClient/ELClientRest.cpp:124
  _elc->Request(path, strlen(path));
  if (data != NULL && len > 0) {
    _elc->Request(data, len);
  }

  _elc->Request();
    ea02:	0c 94 8d 6d 	jmp	0xdb1a	; 0xdb1a <ELClient::Request()>
C:\Program Files (x86)\Arduino\libraries\ELClient/ELClientRest.cpp:125
}
    ea06:	df 91       	pop	r29
    ea08:	cf 91       	pop	r28
    ea0a:	1f 91       	pop	r17
    ea0c:	0f 91       	pop	r16
    ea0e:	ff 90       	pop	r15
    ea10:	ef 90       	pop	r14
    ea12:	df 90       	pop	r13
    ea14:	cf 90       	pop	r12
    ea16:	bf 90       	pop	r11
    ea18:	af 90       	pop	r10
    ea1a:	9f 90       	pop	r9
    ea1c:	8f 90       	pop	r8
    ea1e:	08 95       	ret

0000ea20 <ELClientRest::request(char const*, char const*, char const*)>:
_ZN12ELClientRest7requestEPKcS1_S1_():
C:\Program Files (x86)\Arduino\libraries\ELClient/ELClientRest.cpp:142
@code
	no example code yet
@endcode
*/
void ELClientRest::request(const char* path, const char* method, const char* data)
{
    ea20:	0f 93       	push	r16
    ea22:	1f 93       	push	r17
C:\Program Files (x86)\Arduino\libraries\ELClient/ELClientRest.cpp:143
  request(path, method, data, strlen(data));
    ea24:	f9 01       	movw	r30, r18
    ea26:	01 90       	ld	r0, Z+
    ea28:	00 20       	and	r0, r0
    ea2a:	e9 f7       	brne	.-6      	; 0xea26 <ELClientRest::request(char const*, char const*, char const*)+0x6>
    ea2c:	31 97       	sbiw	r30, 0x01	; 1
    ea2e:	8f 01       	movw	r16, r30
    ea30:	02 1b       	sub	r16, r18
    ea32:	13 0b       	sbc	r17, r19
    ea34:	0e 94 a4 74 	call	0xe948	; 0xe948 <ELClientRest::request(char const*, char const*, char const*, int)>
C:\Program Files (x86)\Arduino\libraries\ELClient/ELClientRest.cpp:144
}
    ea38:	1f 91       	pop	r17
    ea3a:	0f 91       	pop	r16
    ea3c:	08 95       	ret

0000ea3e <ELClientRest::get(char const*, char const*)>:
_ZN12ELClientRest3getEPKcS1_():
C:\Program Files (x86)\Arduino\libraries\ELClient/ELClientRest.cpp:159
@code
	// Request /utc/now from the previously set-up server
	rest.get("/utc/now");
@endcode
*/
void ELClientRest::get(const char* path, const char* data) { request(path, "GET", data); }
    ea3e:	9a 01       	movw	r18, r20
    ea40:	4d ef       	ldi	r20, 0xFD	; 253
    ea42:	5a e0       	ldi	r21, 0x0A	; 10
    ea44:	0c 94 10 75 	jmp	0xea20	; 0xea20 <ELClientRest::request(char const*, char const*, char const*)>

0000ea48 <ELClientWebServer::ELClientWebServer(ELClient*)>:
_ZN17ELClientWebServerC2EP8ELClient():
C:\Program Files (x86)\Arduino\libraries\ELClient/ELClientWebServer.cpp:1015
  char buf[nlen + 7];
  buf[0] = WEB_FLOAT;
  strcpy_P(buf+1, name_p);
  memcpy(buf+2+nlen, &value, 4);
  _elc->Request(buf, nlen+6);
}
    ea48:	0f 93       	push	r16
    ea4a:	1f 93       	push	r17
    ea4c:	cf 93       	push	r28
    ea4e:	df 93       	push	r29
    ea50:	ec 01       	movw	r28, r24
    ea52:	79 83       	std	Y+1, r23	; 0x01
    ea54:	68 83       	st	Y, r22
    ea56:	19 86       	std	Y+9, r1	; 0x09
    ea58:	18 86       	std	Y+8, r1	; 0x08
    ea5a:	1b 86       	std	Y+11, r1	; 0x0b
    ea5c:	1a 86       	std	Y+10, r1	; 0x0a
    ea5e:	8c 01       	movw	r16, r24
    ea60:	04 5f       	subi	r16, 0xF4	; 244
    ea62:	1f 4f       	sbci	r17, 0xFF	; 255
    ea64:	c8 01       	movw	r24, r16
    ea66:	0e 94 38 7a 	call	0xf470	; 0xf470 <FP<void, void*>::FP()>
    ea6a:	d0 93 ce 14 	sts	0x14CE, r29	; 0x8014ce <ELClientWebServer::instance+0x1>
    ea6e:	c0 93 cd 14 	sts	0x14CD, r28	; 0x8014cd <ELClientWebServer::instance>
    ea72:	6d e3       	ldi	r22, 0x3D	; 61
    ea74:	77 e7       	ldi	r23, 0x77	; 119
    ea76:	c8 01       	movw	r24, r16
    ea78:	df 91       	pop	r29
    ea7a:	cf 91       	pop	r28
    ea7c:	1f 91       	pop	r17
    ea7e:	0f 91       	pop	r16
    ea80:	0c 94 3e 7a 	jmp	0xf47c	; 0xf47c <FP<void, void*>::attach(void (*)(void*))>

0000ea84 <ELClientWebServer::createURLHandler(String const&)>:
_ZN17ELClientWebServer16createURLHandlerERK6String():
    ea84:	ef 92       	push	r14
    ea86:	ff 92       	push	r15
    ea88:	0f 93       	push	r16
    ea8a:	1f 93       	push	r17
    ea8c:	cf 93       	push	r28
    ea8e:	df 93       	push	r29
    ea90:	8c 01       	movw	r16, r24
    ea92:	7b 01       	movw	r14, r22
    ea94:	80 e2       	ldi	r24, 0x20	; 32
    ea96:	90 e0       	ldi	r25, 0x00	; 0
    ea98:	0e 94 6d 8f 	call	0x11eda	; 0x11eda <operator new(unsigned int)>
    ea9c:	ec 01       	movw	r28, r24
    ea9e:	80 e2       	ldi	r24, 0x20	; 32
    eaa0:	fe 01       	movw	r30, r28
    eaa2:	11 92       	st	Z+, r1
    eaa4:	8a 95       	dec	r24
    eaa6:	e9 f7       	brne	.-6      	; 0xeaa2 <ELClientWebServer::createURLHandler(String const&)+0x1e>
_ZN11URL_HANDLERC4Ev():
    eaa8:	6b e2       	ldi	r22, 0x2B	; 43
    eaaa:	7b e0       	ldi	r23, 0x0B	; 11
    eaac:	ce 01       	movw	r24, r28
    eaae:	0e 94 91 8e 	call	0x11d22	; 0x11d22 <String::String(char const*)>
    eab2:	ce 01       	movw	r24, r28
    eab4:	06 96       	adiw	r24, 0x06	; 6
    eab6:	0e 94 07 7a 	call	0xf40e	; 0xf40e <FP<void, char*>::FP()>
    eaba:	ce 01       	movw	r24, r28
    eabc:	0c 96       	adiw	r24, 0x0c	; 12
    eabe:	0e 94 07 7a 	call	0xf40e	; 0xf40e <FP<void, char*>::FP()>
    eac2:	ce 01       	movw	r24, r28
    eac4:	42 96       	adiw	r24, 0x12	; 18
    eac6:	0e 94 07 7a 	call	0xf40e	; 0xf40e <FP<void, char*>::FP()>
    eaca:	ce 01       	movw	r24, r28
    eacc:	48 96       	adiw	r24, 0x18	; 24
    eace:	0e 94 07 7a 	call	0xf40e	; 0xf40e <FP<void, char*>::FP()>
_ZN17ELClientWebServer16createURLHandlerERK6String():
    ead2:	b7 01       	movw	r22, r14
    ead4:	ce 01       	movw	r24, r28
    ead6:	0e 94 a6 8e 	call	0x11d4c	; 0x11d4c <String::operator=(String const&)>
    eada:	f8 01       	movw	r30, r16
    eadc:	80 85       	ldd	r24, Z+8	; 0x08
    eade:	91 85       	ldd	r25, Z+9	; 0x09
    eae0:	9f 8f       	std	Y+31, r25	; 0x1f
    eae2:	8e 8f       	std	Y+30, r24	; 0x1e
    eae4:	d1 87       	std	Z+9, r29	; 0x09
    eae6:	c0 87       	std	Z+8, r28	; 0x08
    eae8:	ce 01       	movw	r24, r28
    eaea:	df 91       	pop	r29
    eaec:	cf 91       	pop	r28
    eaee:	1f 91       	pop	r17
    eaf0:	0f 91       	pop	r16
    eaf2:	ff 90       	pop	r15
    eaf4:	ef 90       	pop	r14
    eaf6:	08 95       	ret

0000eaf8 <ELClientWebServer::createURLHandler(char const*)>:
_ZN17ELClientWebServer16createURLHandlerEPKc():
    eaf8:	0f 93       	push	r16
    eafa:	1f 93       	push	r17
    eafc:	cf 93       	push	r28
    eafe:	df 93       	push	r29
    eb00:	00 d0       	rcall	.+0      	; 0xeb02 <ELClientWebServer::createURLHandler(char const*)+0xa>
    eb02:	00 d0       	rcall	.+0      	; 0xeb04 <ELClientWebServer::createURLHandler(char const*)+0xc>
    eb04:	cd b7       	in	r28, 0x3d	; 61
    eb06:	de b7       	in	r29, 0x3e	; 62
    eb08:	8c 01       	movw	r16, r24
    eb0a:	ce 01       	movw	r24, r28
    eb0c:	01 96       	adiw	r24, 0x01	; 1
    eb0e:	0e 94 91 8e 	call	0x11d22	; 0x11d22 <String::String(char const*)>
    eb12:	be 01       	movw	r22, r28
    eb14:	6f 5f       	subi	r22, 0xFF	; 255
    eb16:	7f 4f       	sbci	r23, 0xFF	; 255
    eb18:	c8 01       	movw	r24, r16
    eb1a:	0e 94 42 75 	call	0xea84	; 0xea84 <ELClientWebServer::createURLHandler(String const&)>
    eb1e:	8c 01       	movw	r16, r24
    eb20:	ce 01       	movw	r24, r28
    eb22:	01 96       	adiw	r24, 0x01	; 1
    eb24:	0e 94 22 8e 	call	0x11c44	; 0x11c44 <String::~String()>
    eb28:	c8 01       	movw	r24, r16
    eb2a:	26 96       	adiw	r28, 0x06	; 6
    eb2c:	0f b6       	in	r0, 0x3f	; 63
    eb2e:	f8 94       	cli
    eb30:	de bf       	out	0x3e, r29	; 62
    eb32:	0f be       	out	0x3f, r0	; 63
    eb34:	cd bf       	out	0x3d, r28	; 61
    eb36:	df 91       	pop	r29
    eb38:	cf 91       	pop	r28
    eb3a:	1f 91       	pop	r17
    eb3c:	0f 91       	pop	r16
    eb3e:	08 95       	ret

0000eb40 <ELClientWebServer::setup()>:
_ZN17ELClientWebServer5setupEv():
    eb40:	ef 92       	push	r14
    eb42:	ff 92       	push	r15
    eb44:	0f 93       	push	r16
    eb46:	1f 93       	push	r17
    eb48:	cf 93       	push	r28
    eb4a:	df 93       	push	r29
    eb4c:	00 d0       	rcall	.+0      	; 0xeb4e <ELClientWebServer::setup()+0xe>
    eb4e:	1f 92       	push	r1
    eb50:	cd b7       	in	r28, 0x3d	; 61
    eb52:	de b7       	in	r29, 0x3e	; 62
    eb54:	7c 01       	movw	r14, r24
    eb56:	01 e0       	ldi	r16, 0x01	; 1
    eb58:	10 e0       	ldi	r17, 0x00	; 0
    eb5a:	20 e0       	ldi	r18, 0x00	; 0
    eb5c:	30 e0       	ldi	r19, 0x00	; 0
    eb5e:	a9 01       	movw	r20, r18
    eb60:	6e e1       	ldi	r22, 0x1E	; 30
    eb62:	70 e0       	ldi	r23, 0x00	; 0
    eb64:	fc 01       	movw	r30, r24
    eb66:	80 81       	ld	r24, Z
    eb68:	91 81       	ldd	r25, Z+1	; 0x01
    eb6a:	0e 94 d5 6f 	call	0xdfaa	; 0xdfaa <ELClient::Request(unsigned int, unsigned long, unsigned int)>
    eb6e:	c7 01       	movw	r24, r14
    eb70:	0c 96       	adiw	r24, 0x0c	; 12
    eb72:	09 2e       	mov	r0, r25
    eb74:	00 0c       	add	r0, r0
    eb76:	aa 0b       	sbc	r26, r26
    eb78:	bb 0b       	sbc	r27, r27
    eb7a:	89 83       	std	Y+1, r24	; 0x01
    eb7c:	9a 83       	std	Y+2, r25	; 0x02
    eb7e:	ab 83       	std	Y+3, r26	; 0x03
    eb80:	bc 83       	std	Y+4, r27	; 0x04
    eb82:	44 e0       	ldi	r20, 0x04	; 4
    eb84:	50 e0       	ldi	r21, 0x00	; 0
    eb86:	be 01       	movw	r22, r28
    eb88:	6f 5f       	subi	r22, 0xFF	; 255
    eb8a:	7f 4f       	sbci	r23, 0xFF	; 255
    eb8c:	f7 01       	movw	r30, r14
    eb8e:	80 81       	ld	r24, Z
    eb90:	91 81       	ldd	r25, Z+1	; 0x01
    eb92:	0e 94 4f 70 	call	0xe09e	; 0xe09e <ELClient::Request(void const*, unsigned int)>
    eb96:	f7 01       	movw	r30, r14
    eb98:	80 81       	ld	r24, Z
    eb9a:	91 81       	ldd	r25, Z+1	; 0x01
    eb9c:	0e 94 8d 6d 	call	0xdb1a	; 0xdb1a <ELClient::Request()>
    eba0:	0f 90       	pop	r0
    eba2:	0f 90       	pop	r0
    eba4:	0f 90       	pop	r0
    eba6:	0f 90       	pop	r0
    eba8:	df 91       	pop	r29
    ebaa:	cf 91       	pop	r28
    ebac:	1f 91       	pop	r17
    ebae:	0f 91       	pop	r16
    ebb0:	ff 90       	pop	r15
    ebb2:	ef 90       	pop	r14
    ebb4:	08 95       	ret

0000ebb6 <ELClientWebServer::processResponse(ELClientResponse*)>:
_ZN17ELClientWebServer15processResponseEP16ELClientResponse():
    ebb6:	2f 92       	push	r2
    ebb8:	3f 92       	push	r3
    ebba:	4f 92       	push	r4
    ebbc:	5f 92       	push	r5
    ebbe:	6f 92       	push	r6
    ebc0:	7f 92       	push	r7
    ebc2:	8f 92       	push	r8
    ebc4:	9f 92       	push	r9
    ebc6:	af 92       	push	r10
    ebc8:	bf 92       	push	r11
    ebca:	cf 92       	push	r12
    ebcc:	df 92       	push	r13
    ebce:	ef 92       	push	r14
    ebd0:	ff 92       	push	r15
    ebd2:	0f 93       	push	r16
    ebd4:	1f 93       	push	r17
    ebd6:	cf 93       	push	r28
    ebd8:	df 93       	push	r29
    ebda:	00 d0       	rcall	.+0      	; 0xebdc <ELClientWebServer::processResponse(ELClientResponse*)+0x26>
    ebdc:	00 d0       	rcall	.+0      	; 0xebde <ELClientWebServer::processResponse(ELClientResponse*)+0x28>
    ebde:	1f 92       	push	r1
    ebe0:	1f 92       	push	r1
    ebe2:	cd b7       	in	r28, 0x3d	; 61
    ebe4:	de b7       	in	r29, 0x3e	; 62
    ebe6:	7c 01       	movw	r14, r24
    ebe8:	8b 01       	movw	r16, r22
    ebea:	2d b7       	in	r18, 0x3d	; 61
    ebec:	3e b7       	in	r19, 0x3e	; 62
    ebee:	38 87       	std	Y+8, r19	; 0x08
    ebf0:	2f 83       	std	Y+7, r18	; 0x07
    ebf2:	42 e0       	ldi	r20, 0x02	; 2
    ebf4:	50 e0       	ldi	r21, 0x00	; 0
    ebf6:	be 01       	movw	r22, r28
    ebf8:	6b 5f       	subi	r22, 0xFB	; 251
    ebfa:	7f 4f       	sbci	r23, 0xFF	; 255
    ebfc:	c8 01       	movw	r24, r16
    ebfe:	0e 94 5a 73 	call	0xe6b4	; 0xe6b4 <ELClientResponse::popArg(void*, unsigned int)>
    ec02:	ad 80       	ldd	r10, Y+5	; 0x05
    ec04:	be 80       	ldd	r11, Y+6	; 0x06
    ec06:	27 01       	movw	r4, r14
    ec08:	32 e0       	ldi	r19, 0x02	; 2
    ec0a:	43 0e       	add	r4, r19
    ec0c:	51 1c       	adc	r5, r1
    ec0e:	44 e0       	ldi	r20, 0x04	; 4
    ec10:	50 e0       	ldi	r21, 0x00	; 0
    ec12:	b2 01       	movw	r22, r4
    ec14:	c8 01       	movw	r24, r16
    ec16:	0e 94 5a 73 	call	0xe6b4	; 0xe6b4 <ELClientResponse::popArg(void*, unsigned int)>
    ec1a:	37 01       	movw	r6, r14
    ec1c:	86 e0       	ldi	r24, 0x06	; 6
    ec1e:	68 0e       	add	r6, r24
    ec20:	71 1c       	adc	r7, r1
    ec22:	42 e0       	ldi	r20, 0x02	; 2
    ec24:	50 e0       	ldi	r21, 0x00	; 0
    ec26:	b3 01       	movw	r22, r6
    ec28:	c8 01       	movw	r24, r16
    ec2a:	0e 94 5a 73 	call	0xe6b4	; 0xe6b4 <ELClientResponse::popArg(void*, unsigned int)>
    ec2e:	be 01       	movw	r22, r28
    ec30:	6d 5f       	subi	r22, 0xFD	; 253
    ec32:	7f 4f       	sbci	r23, 0xFF	; 255
    ec34:	c8 01       	movw	r24, r16
    ec36:	0e 94 2c 73 	call	0xe658	; 0xe658 <ELClientResponse::popArgPtr(void**)>
    ec3a:	4c 01       	movw	r8, r24
    ec3c:	d7 01       	movw	r26, r14
    ec3e:	18 96       	adiw	r26, 0x08	; 8
    ec40:	cd 90       	ld	r12, X+
    ec42:	dc 90       	ld	r13, X
    ec44:	2b 80       	ldd	r2, Y+3	; 0x03
    ec46:	3c 80       	ldd	r3, Y+4	; 0x04
    ec48:	c1 14       	cp	r12, r1
    ec4a:	d1 04       	cpc	r13, r1
    ec4c:	09 f4       	brne	.+2      	; 0xec50 <ELClientWebServer::processResponse(ELClientResponse*)+0x9a>
    ec4e:	99 c0       	rjmp	.+306    	; 0xed82 <ELClientWebServer::processResponse(ELClientResponse*)+0x1cc>
    ec50:	f6 01       	movw	r30, r12
    ec52:	84 81       	ldd	r24, Z+4	; 0x04
    ec54:	95 81       	ldd	r25, Z+5	; 0x05
    ec56:	88 16       	cp	r8, r24
    ec58:	99 06       	cpc	r9, r25
    ec5a:	49 f4       	brne	.+18     	; 0xec6e <ELClientWebServer::processResponse(ELClientResponse*)+0xb8>
    ec5c:	60 81       	ld	r22, Z
    ec5e:	71 81       	ldd	r23, Z+1	; 0x01
    ec60:	a4 01       	movw	r20, r8
    ec62:	c1 01       	movw	r24, r2
    ec64:	0e 94 0d 95 	call	0x12a1a	; 0x12a1a <memcmp>
    ec68:	89 2b       	or	r24, r25
    ec6a:	09 f4       	brne	.+2      	; 0xec6e <ELClientWebServer::processResponse(ELClientResponse*)+0xb8>
    ec6c:	ac c0       	rjmp	.+344    	; 0xedc6 <ELClientWebServer::processResponse(ELClientResponse*)+0x210>
    ec6e:	d6 01       	movw	r26, r12
    ec70:	5e 96       	adiw	r26, 0x1e	; 30
    ec72:	cd 90       	ld	r12, X+
    ec74:	dc 90       	ld	r13, X
    ec76:	e8 cf       	rjmp	.-48     	; 0xec48 <ELClientWebServer::processResponse(ELClientResponse*)+0x92>
    ec78:	0e 94 ad 8b 	call	0x1175a	; 0x1175a <Print::println()>
    ec7c:	2f 81       	ldd	r18, Y+7	; 0x07
    ec7e:	38 85       	ldd	r19, Y+8	; 0x08
    ec80:	0f b6       	in	r0, 0x3f	; 63
    ec82:	f8 94       	cli
    ec84:	3e bf       	out	0x3e, r19	; 62
    ec86:	0f be       	out	0x3f, r0	; 63
    ec88:	2d bf       	out	0x3d, r18	; 61
    ec8a:	28 96       	adiw	r28, 0x08	; 8
    ec8c:	0f b6       	in	r0, 0x3f	; 63
    ec8e:	f8 94       	cli
    ec90:	de bf       	out	0x3e, r29	; 62
    ec92:	0f be       	out	0x3f, r0	; 63
    ec94:	cd bf       	out	0x3d, r28	; 61
    ec96:	df 91       	pop	r29
    ec98:	cf 91       	pop	r28
    ec9a:	1f 91       	pop	r17
    ec9c:	0f 91       	pop	r16
    ec9e:	ff 90       	pop	r15
    eca0:	ef 90       	pop	r14
    eca2:	df 90       	pop	r13
    eca4:	cf 90       	pop	r12
    eca6:	bf 90       	pop	r11
    eca8:	af 90       	pop	r10
    ecaa:	9f 90       	pop	r9
    ecac:	8f 90       	pop	r8
    ecae:	7f 90       	pop	r7
    ecb0:	6f 90       	pop	r6
    ecb2:	5f 90       	pop	r5
    ecb4:	4f 90       	pop	r4
    ecb6:	3f 90       	pop	r3
    ecb8:	2f 90       	pop	r2
    ecba:	08 95       	ret
    ecbc:	2d b6       	in	r2, 0x3d	; 61
    ecbe:	3e b6       	in	r3, 0x3e	; 62
    ecc0:	be 01       	movw	r22, r28
    ecc2:	6f 5f       	subi	r22, 0xFF	; 255
    ecc4:	7f 4f       	sbci	r23, 0xFF	; 255
    ecc6:	c8 01       	movw	r24, r16
    ecc8:	0e 94 2c 73 	call	0xe658	; 0xe658 <ELClientResponse::popArgPtr(void**)>
    eccc:	8c 01       	movw	r16, r24
    ecce:	01 96       	adiw	r24, 0x01	; 1
    ecd0:	ed b7       	in	r30, 0x3d	; 61
    ecd2:	fe b7       	in	r31, 0x3e	; 62
    ecd4:	e8 1b       	sub	r30, r24
    ecd6:	f9 0b       	sbc	r31, r25
    ecd8:	0f b6       	in	r0, 0x3f	; 63
    ecda:	f8 94       	cli
    ecdc:	fe bf       	out	0x3e, r31	; 62
    ecde:	0f be       	out	0x3f, r0	; 63
    ece0:	ed bf       	out	0x3d, r30	; 61
    ece2:	2d b7       	in	r18, 0x3d	; 61
    ece4:	3e b7       	in	r19, 0x3e	; 62
    ece6:	2f 5f       	subi	r18, 0xFF	; 255
    ece8:	3f 4f       	sbci	r19, 0xFF	; 255
    ecea:	49 01       	movw	r8, r18
    ecec:	69 81       	ldd	r22, Y+1	; 0x01
    ecee:	7a 81       	ldd	r23, Y+2	; 0x02
    ecf0:	a8 01       	movw	r20, r16
    ecf2:	c9 01       	movw	r24, r18
    ecf4:	0e 94 1a 95 	call	0x12a34	; 0x12a34 <memcpy>
    ecf8:	f4 01       	movw	r30, r8
    ecfa:	e0 0f       	add	r30, r16
    ecfc:	f1 1f       	adc	r31, r17
    ecfe:	10 82       	st	Z, r1
    ed00:	b4 01       	movw	r22, r8
    ed02:	c6 01       	movw	r24, r12
    ed04:	48 96       	adiw	r24, 0x18	; 24
    ed06:	0e 94 11 7a 	call	0xf422	; 0xf422 <FP<void, char*>::operator()(char*) const>
    ed0a:	0f b6       	in	r0, 0x3f	; 63
    ed0c:	f8 94       	cli
    ed0e:	3e be       	out	0x3e, r3	; 62
    ed10:	0f be       	out	0x3f, r0	; 63
    ed12:	2d be       	out	0x3d, r2	; 61
    ed14:	0f ef       	ldi	r16, 0xFF	; 255
    ed16:	10 e0       	ldi	r17, 0x00	; 0
    ed18:	24 e6       	ldi	r18, 0x64	; 100
    ed1a:	30 e0       	ldi	r19, 0x00	; 0
    ed1c:	40 e0       	ldi	r20, 0x00	; 0
    ed1e:	50 e0       	ldi	r21, 0x00	; 0
    ed20:	6f e1       	ldi	r22, 0x1F	; 31
    ed22:	70 e0       	ldi	r23, 0x00	; 0
    ed24:	d7 01       	movw	r26, r14
    ed26:	8d 91       	ld	r24, X+
    ed28:	9c 91       	ld	r25, X
    ed2a:	0e 94 d5 6f 	call	0xdfaa	; 0xdfaa <ELClient::Request(unsigned int, unsigned long, unsigned int)>
    ed2e:	44 e0       	ldi	r20, 0x04	; 4
    ed30:	50 e0       	ldi	r21, 0x00	; 0
    ed32:	b2 01       	movw	r22, r4
    ed34:	f7 01       	movw	r30, r14
    ed36:	80 81       	ld	r24, Z
    ed38:	91 81       	ldd	r25, Z+1	; 0x01
    ed3a:	0e 94 4f 70 	call	0xe09e	; 0xe09e <ELClient::Request(void const*, unsigned int)>
    ed3e:	42 e0       	ldi	r20, 0x02	; 2
    ed40:	50 e0       	ldi	r21, 0x00	; 0
    ed42:	b3 01       	movw	r22, r6
    ed44:	d7 01       	movw	r26, r14
    ed46:	8d 91       	ld	r24, X+
    ed48:	9c 91       	ld	r25, X
    ed4a:	0e 94 4f 70 	call	0xe09e	; 0xe09e <ELClient::Request(void const*, unsigned int)>
    ed4e:	f6 01       	movw	r30, r12
    ed50:	60 81       	ld	r22, Z
    ed52:	71 81       	ldd	r23, Z+1	; 0x01
    ed54:	c6 01       	movw	r24, r12
    ed56:	ab 28       	or	r10, r11
    ed58:	91 f4       	brne	.+36     	; 0xed7e <ELClientWebServer::processResponse(ELClientResponse*)+0x1c8>
    ed5a:	06 96       	adiw	r24, 0x06	; 6
    ed5c:	0e 94 11 7a 	call	0xf422	; 0xf422 <FP<void, char*>::operator()(char*) const>
    ed60:	50 e0       	ldi	r21, 0x00	; 0
    ed62:	40 e0       	ldi	r20, 0x00	; 0
    ed64:	70 e0       	ldi	r23, 0x00	; 0
    ed66:	60 e0       	ldi	r22, 0x00	; 0
    ed68:	d7 01       	movw	r26, r14
    ed6a:	8d 91       	ld	r24, X+
    ed6c:	9c 91       	ld	r25, X
    ed6e:	0e 94 4f 70 	call	0xe09e	; 0xe09e <ELClient::Request(void const*, unsigned int)>
    ed72:	f7 01       	movw	r30, r14
    ed74:	80 81       	ld	r24, Z
    ed76:	91 81       	ldd	r25, Z+1	; 0x01
    ed78:	0e 94 8d 6d 	call	0xdb1a	; 0xdb1a <ELClient::Request()>
    ed7c:	7f cf       	rjmp	.-258    	; 0xec7c <ELClientWebServer::processResponse(ELClientResponse*)+0xc6>
    ed7e:	0c 96       	adiw	r24, 0x0c	; 12
    ed80:	ed cf       	rjmp	.-38     	; 0xed5c <ELClientWebServer::processResponse(ELClientResponse*)+0x1a6>
    ed82:	d7 01       	movw	r26, r14
    ed84:	ed 91       	ld	r30, X+
    ed86:	fc 91       	ld	r31, X
    ed88:	84 85       	ldd	r24, Z+12	; 0x0c
    ed8a:	88 23       	and	r24, r24
    ed8c:	09 f4       	brne	.+2      	; 0xed90 <ELClientWebServer::processResponse(ELClientResponse*)+0x1da>
    ed8e:	76 cf       	rjmp	.-276    	; 0xec7c <ELClientWebServer::processResponse(ELClientResponse*)+0xc6>
    ed90:	68 e4       	ldi	r22, 0x48	; 72
    ed92:	7e e1       	ldi	r23, 0x1E	; 30
    ed94:	80 81       	ld	r24, Z
    ed96:	91 81       	ldd	r25, Z+1	; 0x01
    ed98:	0e 94 6c 8b 	call	0x116d8	; 0x116d8 <Print::print(__FlashStringHelper const*)>
    ed9c:	10 e0       	ldi	r17, 0x00	; 0
    ed9e:	00 e0       	ldi	r16, 0x00	; 0
    eda0:	d7 01       	movw	r26, r14
    eda2:	ed 91       	ld	r30, X+
    eda4:	fc 91       	ld	r31, X
    eda6:	80 81       	ld	r24, Z
    eda8:	91 81       	ldd	r25, Z+1	; 0x01
    edaa:	08 15       	cp	r16, r8
    edac:	19 05       	cpc	r17, r9
    edae:	09 f4       	brne	.+2      	; 0xedb2 <ELClientWebServer::processResponse(ELClientResponse*)+0x1fc>
    edb0:	63 cf       	rjmp	.-314    	; 0xec78 <ELClientWebServer::processResponse(ELClientResponse*)+0xc2>
    edb2:	eb 81       	ldd	r30, Y+3	; 0x03
    edb4:	fc 81       	ldd	r31, Y+4	; 0x04
    edb6:	e0 0f       	add	r30, r16
    edb8:	f1 1f       	adc	r31, r17
    edba:	60 81       	ld	r22, Z
    edbc:	0e 94 a6 8b 	call	0x1174c	; 0x1174c <Print::print(char)>
    edc0:	0f 5f       	subi	r16, 0xFF	; 255
    edc2:	1f 4f       	sbci	r17, 0xFF	; 255
    edc4:	ed cf       	rjmp	.-38     	; 0xeda0 <ELClientWebServer::processResponse(ELClientResponse*)+0x1ea>
    edc6:	b2 e0       	ldi	r27, 0x02	; 2
    edc8:	ab 16       	cp	r10, r27
    edca:	b1 04       	cpc	r11, r1
    edcc:	09 f4       	brne	.+2      	; 0xedd0 <ELClientWebServer::processResponse(ELClientResponse*)+0x21a>
    edce:	76 cf       	rjmp	.-276    	; 0xecbc <ELClientWebServer::processResponse(ELClientResponse*)+0x106>
    edd0:	08 f4       	brcc	.+2      	; 0xedd4 <ELClientWebServer::processResponse(ELClientResponse*)+0x21e>
    edd2:	a0 cf       	rjmp	.-192    	; 0xed14 <ELClientWebServer::processResponse(ELClientResponse*)+0x15e>
    edd4:	f3 e0       	ldi	r31, 0x03	; 3
    edd6:	af 16       	cp	r10, r31
    edd8:	b1 04       	cpc	r11, r1
    edda:	09 f0       	breq	.+2      	; 0xedde <ELClientWebServer::processResponse(ELClientResponse*)+0x228>
    eddc:	4f cf       	rjmp	.-354    	; 0xec7c <ELClientWebServer::processResponse(ELClientResponse*)+0xc6>
    edde:	84 e0       	ldi	r24, 0x04	; 4
    ede0:	a8 2e       	mov	r10, r24
    ede2:	b1 2c       	mov	r11, r1
    ede4:	16 01       	movw	r2, r12
    ede6:	32 e1       	ldi	r19, 0x12	; 18
    ede8:	23 0e       	add	r2, r19
    edea:	31 1c       	adc	r3, r1
_ZN16ELClientResponse4argcEv():
    edec:	d8 01       	movw	r26, r16
    edee:	14 96       	adiw	r26, 0x04	; 4
    edf0:	ed 91       	ld	r30, X+
    edf2:	fc 91       	ld	r31, X
_ZN17ELClientWebServer15processResponseEP16ELClientResponse():
    edf4:	82 81       	ldd	r24, Z+2	; 0x02
    edf6:	93 81       	ldd	r25, Z+3	; 0x03
    edf8:	a8 16       	cp	r10, r24
    edfa:	b9 06       	cpc	r11, r25
    edfc:	08 f0       	brcs	.+2      	; 0xee00 <ELClientWebServer::processResponse(ELClientResponse*)+0x24a>
    edfe:	3e cf       	rjmp	.-388    	; 0xec7c <ELClientWebServer::processResponse(ELClientResponse*)+0xc6>
    ee00:	be 01       	movw	r22, r28
    ee02:	6f 5f       	subi	r22, 0xFF	; 255
    ee04:	7f 4f       	sbci	r23, 0xFF	; 255
    ee06:	c8 01       	movw	r24, r16
    ee08:	0e 94 2c 73 	call	0xe658	; 0xe658 <ELClientResponse::popArgPtr(void**)>
    ee0c:	49 80       	ldd	r4, Y+1	; 0x01
    ee0e:	5a 80       	ldd	r5, Y+2	; 0x02
    ee10:	42 01       	movw	r8, r4
    ee12:	bf ef       	ldi	r27, 0xFF	; 255
    ee14:	8b 1a       	sub	r8, r27
    ee16:	9b 0a       	sbc	r9, r27
    ee18:	f4 01       	movw	r30, r8
    ee1a:	01 90       	ld	r0, Z+
    ee1c:	00 20       	and	r0, r0
    ee1e:	e9 f7       	brne	.-6      	; 0xee1a <ELClientWebServer::processResponse(ELClientResponse*)+0x264>
    ee20:	31 97       	sbiw	r30, 0x01	; 1
    ee22:	3f 01       	movw	r6, r30
    ee24:	68 18       	sub	r6, r8
    ee26:	79 08       	sbc	r7, r9
    ee28:	6c 01       	movw	r12, r24
    ee2a:	c6 18       	sub	r12, r6
    ee2c:	d7 08       	sbc	r13, r7
    ee2e:	c6 01       	movw	r24, r12
    ee30:	01 97       	sbiw	r24, 0x01	; 1
    ee32:	0e 94 74 92 	call	0x124e8	; 0x124e8 <malloc>
    ee36:	f7 01       	movw	r30, r14
    ee38:	93 87       	std	Z+11, r25	; 0x0b
    ee3a:	82 87       	std	Z+10, r24	; 0x0a
    ee3c:	a6 01       	movw	r20, r12
    ee3e:	42 50       	subi	r20, 0x02	; 2
    ee40:	51 09       	sbc	r21, r1
    ee42:	fc 01       	movw	r30, r24
    ee44:	e4 0f       	add	r30, r20
    ee46:	f5 1f       	adc	r31, r21
    ee48:	10 82       	st	Z, r1
    ee4a:	b3 01       	movw	r22, r6
    ee4c:	6e 5f       	subi	r22, 0xFE	; 254
    ee4e:	7f 4f       	sbci	r23, 0xFF	; 255
    ee50:	64 0d       	add	r22, r4
    ee52:	75 1d       	adc	r23, r5
    ee54:	0e 94 1a 95 	call	0x12a34	; 0x12a34 <memcpy>
    ee58:	b4 01       	movw	r22, r8
    ee5a:	c1 01       	movw	r24, r2
    ee5c:	0e 94 11 7a 	call	0xf422	; 0xf422 <FP<void, char*>::operator()(char*) const>
    ee60:	d7 01       	movw	r26, r14
    ee62:	1a 96       	adiw	r26, 0x0a	; 10
    ee64:	8d 91       	ld	r24, X+
    ee66:	9c 91       	ld	r25, X
    ee68:	0e 94 10 93 	call	0x12620	; 0x12620 <free>
    ee6c:	f7 01       	movw	r30, r14
    ee6e:	13 86       	std	Z+11, r1	; 0x0b
    ee70:	12 86       	std	Z+10, r1	; 0x0a
    ee72:	ff ef       	ldi	r31, 0xFF	; 255
    ee74:	af 1a       	sub	r10, r31
    ee76:	bf 0a       	sbc	r11, r31
    ee78:	b9 cf       	rjmp	.-142    	; 0xedec <ELClientWebServer::processResponse(ELClientResponse*)+0x236>

0000ee7a <ELClientWebServer::webServerPacketHandler(void*)>:
_ZN17ELClientWebServer22webServerPacketHandlerEPv():
    ee7a:	bc 01       	movw	r22, r24
    ee7c:	80 91 cd 14 	lds	r24, 0x14CD	; 0x8014cd <ELClientWebServer::instance>
    ee80:	90 91 ce 14 	lds	r25, 0x14CE	; 0x8014ce <ELClientWebServer::instance+0x1>
    ee84:	0c 94 db 75 	jmp	0xebb6	; 0xebb6 <ELClientWebServer::processResponse(ELClientResponse*)>

0000ee88 <ELClientWebServer::setArgJson(__FlashStringHelper const*, char const*)>:
_ZN17ELClientWebServer10setArgJsonEPK19__FlashStringHelperPKc():
    ee88:	4f 92       	push	r4
    ee8a:	5f 92       	push	r5
    ee8c:	6f 92       	push	r6
    ee8e:	7f 92       	push	r7
    ee90:	8f 92       	push	r8
    ee92:	9f 92       	push	r9
    ee94:	af 92       	push	r10
    ee96:	bf 92       	push	r11
    ee98:	cf 92       	push	r12
    ee9a:	df 92       	push	r13
    ee9c:	ef 92       	push	r14
    ee9e:	ff 92       	push	r15
    eea0:	0f 93       	push	r16
    eea2:	1f 93       	push	r17
    eea4:	cf 93       	push	r28
    eea6:	df 93       	push	r29
    eea8:	cd b7       	in	r28, 0x3d	; 61
    eeaa:	de b7       	in	r29, 0x3e	; 62
    eeac:	4c 01       	movw	r8, r24
    eeae:	5b 01       	movw	r10, r22
    eeb0:	6a 01       	movw	r12, r20
    eeb2:	4d b6       	in	r4, 0x3d	; 61
    eeb4:	5e b6       	in	r5, 0x3e	; 62
strlen_P():
    eeb6:	cb 01       	movw	r24, r22
    eeb8:	0e 94 f5 94 	call	0x129ea	; 0x129ea <__strlen_P>
_ZN17ELClientWebServer10setArgJsonEPK19__FlashStringHelperPKc():
    eebc:	f6 01       	movw	r30, r12
    eebe:	01 90       	ld	r0, Z+
    eec0:	00 20       	and	r0, r0
    eec2:	e9 f7       	brne	.-6      	; 0xeebe <ELClientWebServer::setArgJson(__FlashStringHelper const*, char const*)+0x36>
    eec4:	31 97       	sbiw	r30, 0x01	; 1
    eec6:	ec 19       	sub	r30, r12
    eec8:	fd 09       	sbc	r31, r13
    eeca:	8c 01       	movw	r16, r24
    eecc:	11 27       	eor	r17, r17
    eece:	e0 0f       	add	r30, r16
    eed0:	f1 2f       	mov	r31, r17
    eed2:	f1 1d       	adc	r31, r1
    eed4:	3f 01       	movw	r6, r30
    eed6:	82 e0       	ldi	r24, 0x02	; 2
    eed8:	68 0e       	add	r6, r24
    eeda:	71 1c       	adc	r7, r1
    eedc:	33 96       	adiw	r30, 0x03	; 3
    eede:	8d b7       	in	r24, 0x3d	; 61
    eee0:	9e b7       	in	r25, 0x3e	; 62
    eee2:	8e 1b       	sub	r24, r30
    eee4:	9f 0b       	sbc	r25, r31
    eee6:	0f b6       	in	r0, 0x3f	; 63
    eee8:	f8 94       	cli
    eeea:	9e bf       	out	0x3e, r25	; 62
    eeec:	0f be       	out	0x3f, r0	; 63
    eeee:	8d bf       	out	0x3d, r24	; 61
    eef0:	ed b7       	in	r30, 0x3d	; 61
    eef2:	fe b7       	in	r31, 0x3e	; 62
    eef4:	31 96       	adiw	r30, 0x01	; 1
    eef6:	7f 01       	movw	r14, r30
    eef8:	85 e0       	ldi	r24, 0x05	; 5
    eefa:	ed b7       	in	r30, 0x3d	; 61
    eefc:	fe b7       	in	r31, 0x3e	; 62
    eefe:	81 83       	std	Z+1, r24	; 0x01
    ef00:	b5 01       	movw	r22, r10
    ef02:	c7 01       	movw	r24, r14
    ef04:	01 96       	adiw	r24, 0x01	; 1
    ef06:	0e 94 ee 94 	call	0x129dc	; 0x129dc <strcpy_P>
    ef0a:	c8 01       	movw	r24, r16
    ef0c:	02 96       	adiw	r24, 0x02	; 2
    ef0e:	b6 01       	movw	r22, r12
    ef10:	8e 0d       	add	r24, r14
    ef12:	9f 1d       	adc	r25, r15
    ef14:	0e 94 37 95 	call	0x12a6e	; 0x12a6e <strcpy>
    ef18:	a3 01       	movw	r20, r6
    ef1a:	b7 01       	movw	r22, r14
    ef1c:	f4 01       	movw	r30, r8
    ef1e:	80 81       	ld	r24, Z
    ef20:	91 81       	ldd	r25, Z+1	; 0x01
    ef22:	0e 94 4f 70 	call	0xe09e	; 0xe09e <ELClient::Request(void const*, unsigned int)>
    ef26:	0f b6       	in	r0, 0x3f	; 63
    ef28:	f8 94       	cli
    ef2a:	5e be       	out	0x3e, r5	; 62
    ef2c:	0f be       	out	0x3f, r0	; 63
    ef2e:	4d be       	out	0x3d, r4	; 61
    ef30:	df 91       	pop	r29
    ef32:	cf 91       	pop	r28
    ef34:	1f 91       	pop	r17
    ef36:	0f 91       	pop	r16
    ef38:	ff 90       	pop	r15
    ef3a:	ef 90       	pop	r14
    ef3c:	df 90       	pop	r13
    ef3e:	cf 90       	pop	r12
    ef40:	bf 90       	pop	r11
    ef42:	af 90       	pop	r10
    ef44:	9f 90       	pop	r9
    ef46:	8f 90       	pop	r8
    ef48:	7f 90       	pop	r7
    ef4a:	6f 90       	pop	r6
    ef4c:	5f 90       	pop	r5
    ef4e:	4f 90       	pop	r4
    ef50:	08 95       	ret

0000ef52 <ELClientWebServer::setArgString(char const*, char const*)>:
_ZN17ELClientWebServer12setArgStringEPKcS1_():
    ef52:	6f 92       	push	r6
    ef54:	7f 92       	push	r7
    ef56:	8f 92       	push	r8
    ef58:	9f 92       	push	r9
    ef5a:	af 92       	push	r10
    ef5c:	bf 92       	push	r11
    ef5e:	cf 92       	push	r12
    ef60:	df 92       	push	r13
    ef62:	ef 92       	push	r14
    ef64:	ff 92       	push	r15
    ef66:	0f 93       	push	r16
    ef68:	1f 93       	push	r17
    ef6a:	cf 93       	push	r28
    ef6c:	df 93       	push	r29
    ef6e:	cd b7       	in	r28, 0x3d	; 61
    ef70:	de b7       	in	r29, 0x3e	; 62
    ef72:	5c 01       	movw	r10, r24
    ef74:	6a 01       	movw	r12, r20
    ef76:	6d b6       	in	r6, 0x3d	; 61
    ef78:	7e b6       	in	r7, 0x3e	; 62
    ef7a:	fb 01       	movw	r30, r22
    ef7c:	01 90       	ld	r0, Z+
    ef7e:	00 20       	and	r0, r0
    ef80:	e9 f7       	brne	.-6      	; 0xef7c <ELClientWebServer::setArgString(char const*, char const*)+0x2a>
    ef82:	31 97       	sbiw	r30, 0x01	; 1
    ef84:	8f 01       	movw	r16, r30
    ef86:	06 1b       	sub	r16, r22
    ef88:	17 0b       	sbc	r17, r23
    ef8a:	fa 01       	movw	r30, r20
    ef8c:	01 90       	ld	r0, Z+
    ef8e:	00 20       	and	r0, r0
    ef90:	e9 f7       	brne	.-6      	; 0xef8c <ELClientWebServer::setArgString(char const*, char const*)+0x3a>
    ef92:	31 97       	sbiw	r30, 0x01	; 1
    ef94:	e4 1b       	sub	r30, r20
    ef96:	f5 0b       	sbc	r31, r21
    ef98:	11 27       	eor	r17, r17
    ef9a:	e0 0f       	add	r30, r16
    ef9c:	f1 2f       	mov	r31, r17
    ef9e:	f1 1d       	adc	r31, r1
    efa0:	4f 01       	movw	r8, r30
    efa2:	82 e0       	ldi	r24, 0x02	; 2
    efa4:	88 0e       	add	r8, r24
    efa6:	91 1c       	adc	r9, r1
    efa8:	33 96       	adiw	r30, 0x03	; 3
    efaa:	8d b7       	in	r24, 0x3d	; 61
    efac:	9e b7       	in	r25, 0x3e	; 62
    efae:	8e 1b       	sub	r24, r30
    efb0:	9f 0b       	sbc	r25, r31
    efb2:	0f b6       	in	r0, 0x3f	; 63
    efb4:	f8 94       	cli
    efb6:	9e bf       	out	0x3e, r25	; 62
    efb8:	0f be       	out	0x3f, r0	; 63
    efba:	8d bf       	out	0x3d, r24	; 61
    efbc:	ed b7       	in	r30, 0x3d	; 61
    efbe:	fe b7       	in	r31, 0x3e	; 62
    efc0:	31 96       	adiw	r30, 0x01	; 1
    efc2:	7f 01       	movw	r14, r30
    efc4:	ed b7       	in	r30, 0x3d	; 61
    efc6:	fe b7       	in	r31, 0x3e	; 62
    efc8:	11 82       	std	Z+1, r1	; 0x01
    efca:	02 96       	adiw	r24, 0x02	; 2
    efcc:	0e 94 37 95 	call	0x12a6e	; 0x12a6e <strcpy>
    efd0:	c8 01       	movw	r24, r16
    efd2:	02 96       	adiw	r24, 0x02	; 2
    efd4:	b6 01       	movw	r22, r12
    efd6:	8e 0d       	add	r24, r14
    efd8:	9f 1d       	adc	r25, r15
    efda:	0e 94 37 95 	call	0x12a6e	; 0x12a6e <strcpy>
    efde:	a4 01       	movw	r20, r8
    efe0:	b7 01       	movw	r22, r14
    efe2:	f5 01       	movw	r30, r10
    efe4:	80 81       	ld	r24, Z
    efe6:	91 81       	ldd	r25, Z+1	; 0x01
    efe8:	0e 94 4f 70 	call	0xe09e	; 0xe09e <ELClient::Request(void const*, unsigned int)>
    efec:	0f b6       	in	r0, 0x3f	; 63
    efee:	f8 94       	cli
    eff0:	7e be       	out	0x3e, r7	; 62
    eff2:	0f be       	out	0x3f, r0	; 63
    eff4:	6d be       	out	0x3d, r6	; 61
    eff6:	df 91       	pop	r29
    eff8:	cf 91       	pop	r28
    effa:	1f 91       	pop	r17
    effc:	0f 91       	pop	r16
    effe:	ff 90       	pop	r15
    f000:	ef 90       	pop	r14
    f002:	df 90       	pop	r13
    f004:	cf 90       	pop	r12
    f006:	bf 90       	pop	r11
    f008:	af 90       	pop	r10
    f00a:	9f 90       	pop	r9
    f00c:	8f 90       	pop	r8
    f00e:	7f 90       	pop	r7
    f010:	6f 90       	pop	r6
    f012:	08 95       	ret

0000f014 <ELClientWebServer::setArgString(__FlashStringHelper const*, char const*)>:
_ZN17ELClientWebServer12setArgStringEPK19__FlashStringHelperPKc():
    f014:	4f 92       	push	r4
    f016:	5f 92       	push	r5
    f018:	6f 92       	push	r6
    f01a:	7f 92       	push	r7
    f01c:	8f 92       	push	r8
    f01e:	9f 92       	push	r9
    f020:	af 92       	push	r10
    f022:	bf 92       	push	r11
    f024:	cf 92       	push	r12
    f026:	df 92       	push	r13
    f028:	ef 92       	push	r14
    f02a:	ff 92       	push	r15
    f02c:	0f 93       	push	r16
    f02e:	1f 93       	push	r17
    f030:	cf 93       	push	r28
    f032:	df 93       	push	r29
    f034:	cd b7       	in	r28, 0x3d	; 61
    f036:	de b7       	in	r29, 0x3e	; 62
    f038:	4c 01       	movw	r8, r24
    f03a:	5b 01       	movw	r10, r22
    f03c:	6a 01       	movw	r12, r20
    f03e:	4d b6       	in	r4, 0x3d	; 61
    f040:	5e b6       	in	r5, 0x3e	; 62
strlen_P():
    f042:	cb 01       	movw	r24, r22
    f044:	0e 94 f5 94 	call	0x129ea	; 0x129ea <__strlen_P>
_ZN17ELClientWebServer12setArgStringEPK19__FlashStringHelperPKc():
    f048:	f6 01       	movw	r30, r12
    f04a:	01 90       	ld	r0, Z+
    f04c:	00 20       	and	r0, r0
    f04e:	e9 f7       	brne	.-6      	; 0xf04a <ELClientWebServer::setArgString(__FlashStringHelper const*, char const*)+0x36>
    f050:	31 97       	sbiw	r30, 0x01	; 1
    f052:	ec 19       	sub	r30, r12
    f054:	fd 09       	sbc	r31, r13
    f056:	8c 01       	movw	r16, r24
    f058:	11 27       	eor	r17, r17
    f05a:	e0 0f       	add	r30, r16
    f05c:	f1 2f       	mov	r31, r17
    f05e:	f1 1d       	adc	r31, r1
    f060:	3f 01       	movw	r6, r30
    f062:	82 e0       	ldi	r24, 0x02	; 2
    f064:	68 0e       	add	r6, r24
    f066:	71 1c       	adc	r7, r1
    f068:	33 96       	adiw	r30, 0x03	; 3
    f06a:	8d b7       	in	r24, 0x3d	; 61
    f06c:	9e b7       	in	r25, 0x3e	; 62
    f06e:	8e 1b       	sub	r24, r30
    f070:	9f 0b       	sbc	r25, r31
    f072:	0f b6       	in	r0, 0x3f	; 63
    f074:	f8 94       	cli
    f076:	9e bf       	out	0x3e, r25	; 62
    f078:	0f be       	out	0x3f, r0	; 63
    f07a:	8d bf       	out	0x3d, r24	; 61
    f07c:	ed b7       	in	r30, 0x3d	; 61
    f07e:	fe b7       	in	r31, 0x3e	; 62
    f080:	31 96       	adiw	r30, 0x01	; 1
    f082:	7f 01       	movw	r14, r30
    f084:	ed b7       	in	r30, 0x3d	; 61
    f086:	fe b7       	in	r31, 0x3e	; 62
    f088:	11 82       	std	Z+1, r1	; 0x01
    f08a:	b5 01       	movw	r22, r10
    f08c:	02 96       	adiw	r24, 0x02	; 2
    f08e:	0e 94 ee 94 	call	0x129dc	; 0x129dc <strcpy_P>
    f092:	c8 01       	movw	r24, r16
    f094:	02 96       	adiw	r24, 0x02	; 2
    f096:	b6 01       	movw	r22, r12
    f098:	8e 0d       	add	r24, r14
    f09a:	9f 1d       	adc	r25, r15
    f09c:	0e 94 37 95 	call	0x12a6e	; 0x12a6e <strcpy>
    f0a0:	a3 01       	movw	r20, r6
    f0a2:	b7 01       	movw	r22, r14
    f0a4:	f4 01       	movw	r30, r8
    f0a6:	80 81       	ld	r24, Z
    f0a8:	91 81       	ldd	r25, Z+1	; 0x01
    f0aa:	0e 94 4f 70 	call	0xe09e	; 0xe09e <ELClient::Request(void const*, unsigned int)>
    f0ae:	0f b6       	in	r0, 0x3f	; 63
    f0b0:	f8 94       	cli
    f0b2:	5e be       	out	0x3e, r5	; 62
    f0b4:	0f be       	out	0x3f, r0	; 63
    f0b6:	4d be       	out	0x3d, r4	; 61
    f0b8:	df 91       	pop	r29
    f0ba:	cf 91       	pop	r28
    f0bc:	1f 91       	pop	r17
    f0be:	0f 91       	pop	r16
    f0c0:	ff 90       	pop	r15
    f0c2:	ef 90       	pop	r14
    f0c4:	df 90       	pop	r13
    f0c6:	cf 90       	pop	r12
    f0c8:	bf 90       	pop	r11
    f0ca:	af 90       	pop	r10
    f0cc:	9f 90       	pop	r9
    f0ce:	8f 90       	pop	r8
    f0d0:	7f 90       	pop	r7
    f0d2:	6f 90       	pop	r6
    f0d4:	5f 90       	pop	r5
    f0d6:	4f 90       	pop	r4
    f0d8:	08 95       	ret

0000f0da <ELClientWebServer::setArgBoolean(char const*, unsigned char)>:
_ZN17ELClientWebServer13setArgBooleanEPKch():
    f0da:	7f 92       	push	r7
    f0dc:	8f 92       	push	r8
    f0de:	9f 92       	push	r9
    f0e0:	af 92       	push	r10
    f0e2:	bf 92       	push	r11
    f0e4:	cf 92       	push	r12
    f0e6:	df 92       	push	r13
    f0e8:	ef 92       	push	r14
    f0ea:	ff 92       	push	r15
    f0ec:	0f 93       	push	r16
    f0ee:	1f 93       	push	r17
    f0f0:	cf 93       	push	r28
    f0f2:	df 93       	push	r29
    f0f4:	cd b7       	in	r28, 0x3d	; 61
    f0f6:	de b7       	in	r29, 0x3e	; 62
    f0f8:	5c 01       	movw	r10, r24
    f0fa:	74 2e       	mov	r7, r20
    f0fc:	cd b6       	in	r12, 0x3d	; 61
    f0fe:	de b6       	in	r13, 0x3e	; 62
    f100:	fb 01       	movw	r30, r22
    f102:	01 90       	ld	r0, Z+
    f104:	00 20       	and	r0, r0
    f106:	e9 f7       	brne	.-6      	; 0xf102 <ELClientWebServer::setArgBoolean(char const*, unsigned char)+0x28>
    f108:	31 97       	sbiw	r30, 0x01	; 1
    f10a:	8f 01       	movw	r16, r30
    f10c:	06 1b       	sub	r16, r22
    f10e:	17 0b       	sbc	r17, r23
    f110:	11 27       	eor	r17, r17
    f112:	48 01       	movw	r8, r16
    f114:	23 e0       	ldi	r18, 0x03	; 3
    f116:	82 0e       	add	r8, r18
    f118:	91 1c       	adc	r9, r1
    f11a:	c8 01       	movw	r24, r16
    f11c:	04 96       	adiw	r24, 0x04	; 4
    f11e:	ed b7       	in	r30, 0x3d	; 61
    f120:	fe b7       	in	r31, 0x3e	; 62
    f122:	e8 1b       	sub	r30, r24
    f124:	f9 0b       	sbc	r31, r25
    f126:	0f b6       	in	r0, 0x3f	; 63
    f128:	f8 94       	cli
    f12a:	fe bf       	out	0x3e, r31	; 62
    f12c:	0f be       	out	0x3f, r0	; 63
    f12e:	ed bf       	out	0x3d, r30	; 61
    f130:	2d b7       	in	r18, 0x3d	; 61
    f132:	3e b7       	in	r19, 0x3e	; 62
    f134:	2f 5f       	subi	r18, 0xFF	; 255
    f136:	3f 4f       	sbci	r19, 0xFF	; 255
    f138:	79 01       	movw	r14, r18
    f13a:	83 e0       	ldi	r24, 0x03	; 3
    f13c:	81 83       	std	Z+1, r24	; 0x01
    f13e:	c9 01       	movw	r24, r18
    f140:	01 96       	adiw	r24, 0x01	; 1
    f142:	0e 94 37 95 	call	0x12a6e	; 0x12a6e <strcpy>
    f146:	f7 01       	movw	r30, r14
    f148:	e0 0f       	add	r30, r16
    f14a:	f1 1f       	adc	r31, r17
    f14c:	72 82       	std	Z+2, r7	; 0x02
    f14e:	a4 01       	movw	r20, r8
    f150:	b7 01       	movw	r22, r14
    f152:	f5 01       	movw	r30, r10
    f154:	80 81       	ld	r24, Z
    f156:	91 81       	ldd	r25, Z+1	; 0x01
    f158:	0e 94 4f 70 	call	0xe09e	; 0xe09e <ELClient::Request(void const*, unsigned int)>
    f15c:	0f b6       	in	r0, 0x3f	; 63
    f15e:	f8 94       	cli
    f160:	de be       	out	0x3e, r13	; 62
    f162:	0f be       	out	0x3f, r0	; 63
    f164:	cd be       	out	0x3d, r12	; 61
    f166:	df 91       	pop	r29
    f168:	cf 91       	pop	r28
    f16a:	1f 91       	pop	r17
    f16c:	0f 91       	pop	r16
    f16e:	ff 90       	pop	r15
    f170:	ef 90       	pop	r14
    f172:	df 90       	pop	r13
    f174:	cf 90       	pop	r12
    f176:	bf 90       	pop	r11
    f178:	af 90       	pop	r10
    f17a:	9f 90       	pop	r9
    f17c:	8f 90       	pop	r8
    f17e:	7f 90       	pop	r7
    f180:	08 95       	ret

0000f182 <ELClientWebServer::setArgBoolean(__FlashStringHelper const*, unsigned char)>:
_ZN17ELClientWebServer13setArgBooleanEPK19__FlashStringHelperh():
    f182:	5f 92       	push	r5
    f184:	6f 92       	push	r6
    f186:	7f 92       	push	r7
    f188:	8f 92       	push	r8
    f18a:	9f 92       	push	r9
    f18c:	af 92       	push	r10
    f18e:	bf 92       	push	r11
    f190:	cf 92       	push	r12
    f192:	df 92       	push	r13
    f194:	ef 92       	push	r14
    f196:	ff 92       	push	r15
    f198:	0f 93       	push	r16
    f19a:	1f 93       	push	r17
    f19c:	cf 93       	push	r28
    f19e:	df 93       	push	r29
    f1a0:	cd b7       	in	r28, 0x3d	; 61
    f1a2:	de b7       	in	r29, 0x3e	; 62
    f1a4:	5c 01       	movw	r10, r24
    f1a6:	6b 01       	movw	r12, r22
    f1a8:	54 2e       	mov	r5, r20
    f1aa:	6d b6       	in	r6, 0x3d	; 61
    f1ac:	7e b6       	in	r7, 0x3e	; 62
strlen_P():
    f1ae:	cb 01       	movw	r24, r22
    f1b0:	0e 94 f5 94 	call	0x129ea	; 0x129ea <__strlen_P>
_ZN17ELClientWebServer13setArgBooleanEPK19__FlashStringHelperh():
    f1b4:	8c 01       	movw	r16, r24
    f1b6:	11 27       	eor	r17, r17
    f1b8:	48 01       	movw	r8, r16
    f1ba:	23 e0       	ldi	r18, 0x03	; 3
    f1bc:	82 0e       	add	r8, r18
    f1be:	91 1c       	adc	r9, r1
    f1c0:	c8 01       	movw	r24, r16
    f1c2:	04 96       	adiw	r24, 0x04	; 4
    f1c4:	ed b7       	in	r30, 0x3d	; 61
    f1c6:	fe b7       	in	r31, 0x3e	; 62
    f1c8:	e8 1b       	sub	r30, r24
    f1ca:	f9 0b       	sbc	r31, r25
    f1cc:	0f b6       	in	r0, 0x3f	; 63
    f1ce:	f8 94       	cli
    f1d0:	fe bf       	out	0x3e, r31	; 62
    f1d2:	0f be       	out	0x3f, r0	; 63
    f1d4:	ed bf       	out	0x3d, r30	; 61
    f1d6:	2d b7       	in	r18, 0x3d	; 61
    f1d8:	3e b7       	in	r19, 0x3e	; 62
    f1da:	2f 5f       	subi	r18, 0xFF	; 255
    f1dc:	3f 4f       	sbci	r19, 0xFF	; 255
    f1de:	79 01       	movw	r14, r18
    f1e0:	83 e0       	ldi	r24, 0x03	; 3
    f1e2:	81 83       	std	Z+1, r24	; 0x01
    f1e4:	b6 01       	movw	r22, r12
    f1e6:	c9 01       	movw	r24, r18
    f1e8:	01 96       	adiw	r24, 0x01	; 1
    f1ea:	0e 94 ee 94 	call	0x129dc	; 0x129dc <strcpy_P>
    f1ee:	f7 01       	movw	r30, r14
    f1f0:	e0 0f       	add	r30, r16
    f1f2:	f1 1f       	adc	r31, r17
    f1f4:	52 82       	std	Z+2, r5	; 0x02
    f1f6:	a4 01       	movw	r20, r8
    f1f8:	b7 01       	movw	r22, r14
    f1fa:	f5 01       	movw	r30, r10
    f1fc:	80 81       	ld	r24, Z
    f1fe:	91 81       	ldd	r25, Z+1	; 0x01
    f200:	0e 94 4f 70 	call	0xe09e	; 0xe09e <ELClient::Request(void const*, unsigned int)>
    f204:	0f b6       	in	r0, 0x3f	; 63
    f206:	f8 94       	cli
    f208:	7e be       	out	0x3e, r7	; 62
    f20a:	0f be       	out	0x3f, r0	; 63
    f20c:	6d be       	out	0x3d, r6	; 61
    f20e:	df 91       	pop	r29
    f210:	cf 91       	pop	r28
    f212:	1f 91       	pop	r17
    f214:	0f 91       	pop	r16
    f216:	ff 90       	pop	r15
    f218:	ef 90       	pop	r14
    f21a:	df 90       	pop	r13
    f21c:	cf 90       	pop	r12
    f21e:	bf 90       	pop	r11
    f220:	af 90       	pop	r10
    f222:	9f 90       	pop	r9
    f224:	8f 90       	pop	r8
    f226:	7f 90       	pop	r7
    f228:	6f 90       	pop	r6
    f22a:	5f 90       	pop	r5
    f22c:	08 95       	ret

0000f22e <ELClientWebServer::setArgInt(char const*, long)>:
_ZN17ELClientWebServer9setArgIntEPKcl():
    f22e:	4f 92       	push	r4
    f230:	5f 92       	push	r5
    f232:	6f 92       	push	r6
    f234:	7f 92       	push	r7
    f236:	8f 92       	push	r8
    f238:	9f 92       	push	r9
    f23a:	af 92       	push	r10
    f23c:	bf 92       	push	r11
    f23e:	cf 92       	push	r12
    f240:	df 92       	push	r13
    f242:	ef 92       	push	r14
    f244:	ff 92       	push	r15
    f246:	0f 93       	push	r16
    f248:	1f 93       	push	r17
    f24a:	cf 93       	push	r28
    f24c:	df 93       	push	r29
    f24e:	cd b7       	in	r28, 0x3d	; 61
    f250:	de b7       	in	r29, 0x3e	; 62
    f252:	6c 01       	movw	r12, r24
    f254:	29 01       	movw	r4, r18
    f256:	3a 01       	movw	r6, r20
    f258:	8d b6       	in	r8, 0x3d	; 61
    f25a:	9e b6       	in	r9, 0x3e	; 62
    f25c:	fb 01       	movw	r30, r22
    f25e:	01 90       	ld	r0, Z+
    f260:	00 20       	and	r0, r0
    f262:	e9 f7       	brne	.-6      	; 0xf25e <ELClientWebServer::setArgInt(char const*, long)+0x30>
    f264:	31 97       	sbiw	r30, 0x01	; 1
    f266:	8f 01       	movw	r16, r30
    f268:	06 1b       	sub	r16, r22
    f26a:	17 0b       	sbc	r17, r23
    f26c:	11 27       	eor	r17, r17
    f26e:	58 01       	movw	r10, r16
    f270:	26 e0       	ldi	r18, 0x06	; 6
    f272:	a2 0e       	add	r10, r18
    f274:	b1 1c       	adc	r11, r1
    f276:	c8 01       	movw	r24, r16
    f278:	07 96       	adiw	r24, 0x07	; 7
    f27a:	ed b7       	in	r30, 0x3d	; 61
    f27c:	fe b7       	in	r31, 0x3e	; 62
    f27e:	e8 1b       	sub	r30, r24
    f280:	f9 0b       	sbc	r31, r25
    f282:	0f b6       	in	r0, 0x3f	; 63
    f284:	f8 94       	cli
    f286:	fe bf       	out	0x3e, r31	; 62
    f288:	0f be       	out	0x3f, r0	; 63
    f28a:	ed bf       	out	0x3d, r30	; 61
    f28c:	2d b7       	in	r18, 0x3d	; 61
    f28e:	3e b7       	in	r19, 0x3e	; 62
    f290:	2f 5f       	subi	r18, 0xFF	; 255
    f292:	3f 4f       	sbci	r19, 0xFF	; 255
    f294:	79 01       	movw	r14, r18
    f296:	82 e0       	ldi	r24, 0x02	; 2
    f298:	81 83       	std	Z+1, r24	; 0x01
    f29a:	c9 01       	movw	r24, r18
    f29c:	01 96       	adiw	r24, 0x01	; 1
    f29e:	0e 94 37 95 	call	0x12a6e	; 0x12a6e <strcpy>
    f2a2:	f7 01       	movw	r30, r14
    f2a4:	e0 0f       	add	r30, r16
    f2a6:	f1 1f       	adc	r31, r17
    f2a8:	42 82       	std	Z+2, r4	; 0x02
    f2aa:	53 82       	std	Z+3, r5	; 0x03
    f2ac:	64 82       	std	Z+4, r6	; 0x04
    f2ae:	75 82       	std	Z+5, r7	; 0x05
    f2b0:	a5 01       	movw	r20, r10
    f2b2:	b7 01       	movw	r22, r14
    f2b4:	f6 01       	movw	r30, r12
    f2b6:	80 81       	ld	r24, Z
    f2b8:	91 81       	ldd	r25, Z+1	; 0x01
    f2ba:	0e 94 4f 70 	call	0xe09e	; 0xe09e <ELClient::Request(void const*, unsigned int)>
    f2be:	0f b6       	in	r0, 0x3f	; 63
    f2c0:	f8 94       	cli
    f2c2:	9e be       	out	0x3e, r9	; 62
    f2c4:	0f be       	out	0x3f, r0	; 63
    f2c6:	8d be       	out	0x3d, r8	; 61
    f2c8:	df 91       	pop	r29
    f2ca:	cf 91       	pop	r28
    f2cc:	1f 91       	pop	r17
    f2ce:	0f 91       	pop	r16
    f2d0:	ff 90       	pop	r15
    f2d2:	ef 90       	pop	r14
    f2d4:	df 90       	pop	r13
    f2d6:	cf 90       	pop	r12
    f2d8:	bf 90       	pop	r11
    f2da:	af 90       	pop	r10
    f2dc:	9f 90       	pop	r9
    f2de:	8f 90       	pop	r8
    f2e0:	7f 90       	pop	r7
    f2e2:	6f 90       	pop	r6
    f2e4:	5f 90       	pop	r5
    f2e6:	4f 90       	pop	r4
    f2e8:	08 95       	ret

0000f2ea <ELClientWebServer::setArgInt(__FlashStringHelper const*, long)>:
_ZN17ELClientWebServer9setArgIntEPK19__FlashStringHelperl():
    f2ea:	2f 92       	push	r2
    f2ec:	3f 92       	push	r3
    f2ee:	4f 92       	push	r4
    f2f0:	5f 92       	push	r5
    f2f2:	6f 92       	push	r6
    f2f4:	7f 92       	push	r7
    f2f6:	8f 92       	push	r8
    f2f8:	9f 92       	push	r9
    f2fa:	af 92       	push	r10
    f2fc:	bf 92       	push	r11
    f2fe:	cf 92       	push	r12
    f300:	df 92       	push	r13
    f302:	ef 92       	push	r14
    f304:	ff 92       	push	r15
    f306:	0f 93       	push	r16
    f308:	1f 93       	push	r17
    f30a:	cf 93       	push	r28
    f30c:	df 93       	push	r29
    f30e:	cd b7       	in	r28, 0x3d	; 61
    f310:	de b7       	in	r29, 0x3e	; 62
    f312:	5c 01       	movw	r10, r24
    f314:	6b 01       	movw	r12, r22
    f316:	29 01       	movw	r4, r18
    f318:	3a 01       	movw	r6, r20
    f31a:	2d b6       	in	r2, 0x3d	; 61
    f31c:	3e b6       	in	r3, 0x3e	; 62
strlen_P():
    f31e:	cb 01       	movw	r24, r22
    f320:	0e 94 f5 94 	call	0x129ea	; 0x129ea <__strlen_P>
    f324:	8c 01       	movw	r16, r24
    f326:	11 27       	eor	r17, r17
_ZN17ELClientWebServer9setArgIntEPK19__FlashStringHelperl():
    f328:	48 01       	movw	r8, r16
    f32a:	26 e0       	ldi	r18, 0x06	; 6
    f32c:	82 0e       	add	r8, r18
    f32e:	91 1c       	adc	r9, r1
    f330:	c8 01       	movw	r24, r16
    f332:	07 96       	adiw	r24, 0x07	; 7
    f334:	ed b7       	in	r30, 0x3d	; 61
    f336:	fe b7       	in	r31, 0x3e	; 62
    f338:	e8 1b       	sub	r30, r24
    f33a:	f9 0b       	sbc	r31, r25
    f33c:	0f b6       	in	r0, 0x3f	; 63
    f33e:	f8 94       	cli
    f340:	fe bf       	out	0x3e, r31	; 62
    f342:	0f be       	out	0x3f, r0	; 63
    f344:	ed bf       	out	0x3d, r30	; 61
    f346:	2d b7       	in	r18, 0x3d	; 61
    f348:	3e b7       	in	r19, 0x3e	; 62
    f34a:	2f 5f       	subi	r18, 0xFF	; 255
    f34c:	3f 4f       	sbci	r19, 0xFF	; 255
    f34e:	79 01       	movw	r14, r18
    f350:	82 e0       	ldi	r24, 0x02	; 2
    f352:	81 83       	std	Z+1, r24	; 0x01
    f354:	b6 01       	movw	r22, r12
    f356:	c9 01       	movw	r24, r18
    f358:	01 96       	adiw	r24, 0x01	; 1
    f35a:	0e 94 ee 94 	call	0x129dc	; 0x129dc <strcpy_P>
    f35e:	f7 01       	movw	r30, r14
    f360:	e0 0f       	add	r30, r16
    f362:	f1 1f       	adc	r31, r17
    f364:	42 82       	std	Z+2, r4	; 0x02
    f366:	53 82       	std	Z+3, r5	; 0x03
    f368:	64 82       	std	Z+4, r6	; 0x04
    f36a:	75 82       	std	Z+5, r7	; 0x05
    f36c:	a4 01       	movw	r20, r8
    f36e:	b7 01       	movw	r22, r14
    f370:	f5 01       	movw	r30, r10
    f372:	80 81       	ld	r24, Z
    f374:	91 81       	ldd	r25, Z+1	; 0x01
    f376:	0e 94 4f 70 	call	0xe09e	; 0xe09e <ELClient::Request(void const*, unsigned int)>
    f37a:	0f b6       	in	r0, 0x3f	; 63
    f37c:	f8 94       	cli
    f37e:	3e be       	out	0x3e, r3	; 62
    f380:	0f be       	out	0x3f, r0	; 63
    f382:	2d be       	out	0x3d, r2	; 61
    f384:	df 91       	pop	r29
    f386:	cf 91       	pop	r28
    f388:	1f 91       	pop	r17
    f38a:	0f 91       	pop	r16
    f38c:	ff 90       	pop	r15
    f38e:	ef 90       	pop	r14
    f390:	df 90       	pop	r13
    f392:	cf 90       	pop	r12
    f394:	bf 90       	pop	r11
    f396:	af 90       	pop	r10
    f398:	9f 90       	pop	r9
    f39a:	8f 90       	pop	r8
    f39c:	7f 90       	pop	r7
    f39e:	6f 90       	pop	r6
    f3a0:	5f 90       	pop	r5
    f3a2:	4f 90       	pop	r4
    f3a4:	3f 90       	pop	r3
    f3a6:	2f 90       	pop	r2
    f3a8:	08 95       	ret

0000f3aa <ELClientWebServer::getArgInt()>:
_ZN17ELClientWebServer9getArgIntEv():
C:\Program Files (x86)\Arduino\libraries\ELClient/ELClientWebServer.cpp:1041
@endcode
*/

int32_t ELClientWebServer::getArgInt()
{
  return (int32_t)atol(arg_ptr);
    f3aa:	fc 01       	movw	r30, r24
    f3ac:	82 85       	ldd	r24, Z+10	; 0x0a
    f3ae:	93 85       	ldd	r25, Z+11	; 0x0b
    f3b0:	0c 94 a1 94 	jmp	0x12942	; 0x12942 <atol>

0000f3b4 <ELClientWebServer::getArgString()>:
_ZN17ELClientWebServer12getArgStringEv():
C:\Program Files (x86)\Arduino\libraries\ELClient/ELClientWebServer.cpp:1068
*/

char * ELClientWebServer::getArgString()
{
  return arg_ptr;
}
    f3b4:	fc 01       	movw	r30, r24
    f3b6:	82 85       	ldd	r24, Z+10	; 0x0a
    f3b8:	93 85       	ldd	r25, Z+11	; 0x0b
    f3ba:	08 95       	ret

0000f3bc <ELClientWebServer::getArgBoolean()>:
_ZN17ELClientWebServer13getArgBooleanEv():
C:\Program Files (x86)\Arduino\libraries\ELClient/ELClientWebServer.cpp:1093
  }
@endcode
*/

uint8_t ELClientWebServer::getArgBoolean()
{
    f3bc:	cf 93       	push	r28
    f3be:	df 93       	push	r29
C:\Program Files (x86)\Arduino\libraries\ELClient/ELClientWebServer.cpp:1094
  if( strcmp_P(arg_ptr, PSTR("on")) == 0 )
    f3c0:	fc 01       	movw	r30, r24
    f3c2:	c2 85       	ldd	r28, Z+10	; 0x0a
    f3c4:	d3 85       	ldd	r29, Z+11	; 0x0b
    f3c6:	65 e4       	ldi	r22, 0x45	; 69
    f3c8:	7e e1       	ldi	r23, 0x1E	; 30
    f3ca:	ce 01       	movw	r24, r28
    f3cc:	0e 94 e5 94 	call	0x129ca	; 0x129ca <strcmp_P>
    f3d0:	89 2b       	or	r24, r25
    f3d2:	d9 f0       	breq	.+54     	; 0xf40a <ELClientWebServer::getArgBoolean()+0x4e>
C:\Program Files (x86)\Arduino\libraries\ELClient/ELClientWebServer.cpp:1096
    return 1;
  if( strcmp_P(arg_ptr, PSTR("true")) == 0 )
    f3d4:	60 e4       	ldi	r22, 0x40	; 64
    f3d6:	7e e1       	ldi	r23, 0x1E	; 30
    f3d8:	ce 01       	movw	r24, r28
    f3da:	0e 94 e5 94 	call	0x129ca	; 0x129ca <strcmp_P>
    f3de:	89 2b       	or	r24, r25
    f3e0:	a1 f0       	breq	.+40     	; 0xf40a <ELClientWebServer::getArgBoolean()+0x4e>
C:\Program Files (x86)\Arduino\libraries\ELClient/ELClientWebServer.cpp:1098
    return 1;
  if( strcmp_P(arg_ptr, PSTR("yes")) == 0 )
    f3e2:	6c e3       	ldi	r22, 0x3C	; 60
    f3e4:	7e e1       	ldi	r23, 0x1E	; 30
    f3e6:	ce 01       	movw	r24, r28
    f3e8:	0e 94 e5 94 	call	0x129ca	; 0x129ca <strcmp_P>
    f3ec:	89 2b       	or	r24, r25
    f3ee:	69 f0       	breq	.+26     	; 0xf40a <ELClientWebServer::getArgBoolean()+0x4e>
C:\Program Files (x86)\Arduino\libraries\ELClient/ELClientWebServer.cpp:1100
    return 1;
  if( strcmp_P(arg_ptr, PSTR("1")) == 0 )
    f3f0:	6a e3       	ldi	r22, 0x3A	; 58
    f3f2:	7e e1       	ldi	r23, 0x1E	; 30
    f3f4:	ce 01       	movw	r24, r28
    f3f6:	0e 94 e5 94 	call	0x129ca	; 0x129ca <strcmp_P>
    f3fa:	21 e0       	ldi	r18, 0x01	; 1
    f3fc:	89 2b       	or	r24, r25
    f3fe:	09 f0       	breq	.+2      	; 0xf402 <ELClientWebServer::getArgBoolean()+0x46>
    f400:	20 e0       	ldi	r18, 0x00	; 0
C:\Program Files (x86)\Arduino\libraries\ELClient/ELClientWebServer.cpp:1103
    return 1;
  return 0;
}
    f402:	82 2f       	mov	r24, r18
    f404:	df 91       	pop	r29
    f406:	cf 91       	pop	r28
    f408:	08 95       	ret
C:\Program Files (x86)\Arduino\libraries\ELClient/ELClientWebServer.cpp:1095
*/

uint8_t ELClientWebServer::getArgBoolean()
{
  if( strcmp_P(arg_ptr, PSTR("on")) == 0 )
    return 1;
    f40a:	21 e0       	ldi	r18, 0x01	; 1
    f40c:	fa cf       	rjmp	.-12     	; 0xf402 <ELClientWebServer::getArgBoolean()+0x46>

0000f40e <FP<void, char*>::FP()>:
_ZN2FPIvPcEC2Ev():
C:\Program Files (x86)\Arduino\libraries\ELClient/FP.cpp:45
template<class retT, class argT>
void FP<retT, argT>::detach()
{
    obj_callback = 0;
    c_callback = 0;
}
    f40e:	fc 01       	movw	r30, r24
    f410:	11 82       	std	Z+1, r1	; 0x01
    f412:	10 82       	st	Z, r1
    f414:	13 82       	std	Z+3, r1	; 0x03
    f416:	12 82       	std	Z+2, r1	; 0x02
    f418:	08 95       	ret

0000f41a <FP<void, char*>::attach(void (*)(char*))>:
_ZN2FPIvPcE6attachEPFvS0_E():
    f41a:	fc 01       	movw	r30, r24
    f41c:	73 83       	std	Z+3, r23	; 0x03
    f41e:	62 83       	std	Z+2, r22	; 0x02
    f420:	08 95       	ret

0000f422 <FP<void, char*>::operator()(char*) const>:
_ZNK2FPIvPcEclES0_():
    f422:	cf 93       	push	r28
    f424:	df 93       	push	r29
    f426:	ec 01       	movw	r28, r24
    f428:	ea 81       	ldd	r30, Y+2	; 0x02
    f42a:	fb 81       	ldd	r31, Y+3	; 0x03
    f42c:	30 97       	sbiw	r30, 0x00	; 0
    f42e:	e9 f0       	breq	.+58     	; 0xf46a <FP<void, char*>::operator()(char*) const+0x48>
    f430:	a8 81       	ld	r26, Y
    f432:	b9 81       	ldd	r27, Y+1	; 0x01
    f434:	10 97       	sbiw	r26, 0x00	; 0
    f436:	a9 f0       	breq	.+42     	; 0xf462 <FP<void, char*>::operator()(char*) const+0x40>
    f438:	2c 81       	ldd	r18, Y+4	; 0x04
    f43a:	3d 81       	ldd	r19, Y+5	; 0x05
    f43c:	c9 01       	movw	r24, r18
    f43e:	95 95       	asr	r25
    f440:	87 95       	ror	r24
    f442:	a8 0f       	add	r26, r24
    f444:	b9 1f       	adc	r27, r25
    f446:	20 ff       	sbrs	r18, 0
    f448:	08 c0       	rjmp	.+16     	; 0xf45a <FP<void, char*>::operator()(char*) const+0x38>
    f44a:	8d 91       	ld	r24, X+
    f44c:	9c 91       	ld	r25, X
    f44e:	11 97       	sbiw	r26, 0x01	; 1
    f450:	e8 0f       	add	r30, r24
    f452:	f9 1f       	adc	r31, r25
    f454:	01 90       	ld	r0, Z+
    f456:	f0 81       	ld	r31, Z
    f458:	e0 2d       	mov	r30, r0
    f45a:	cd 01       	movw	r24, r26
    f45c:	df 91       	pop	r29
    f45e:	cf 91       	pop	r28
    f460:	19 94       	eijmp
    f462:	cb 01       	movw	r24, r22
    f464:	df 91       	pop	r29
    f466:	cf 91       	pop	r28
    f468:	19 94       	eijmp
    f46a:	df 91       	pop	r29
    f46c:	cf 91       	pop	r28
    f46e:	08 95       	ret

0000f470 <FP<void, void*>::FP()>:
_ZN2FPIvPvEC2Ev():
C:\Program Files (x86)\Arduino\libraries\ELClient/FP.cpp:29
#include <stdint.h>

template<class retT, class argT>
FP<retT, argT>::FP()
{
    obj_callback = 0;
    f470:	fc 01       	movw	r30, r24
    f472:	11 82       	std	Z+1, r1	; 0x01
    f474:	10 82       	st	Z, r1
C:\Program Files (x86)\Arduino\libraries\ELClient/FP.cpp:30
    c_callback = 0;
    f476:	13 82       	std	Z+3, r1	; 0x03
    f478:	12 82       	std	Z+2, r1	; 0x02
C:\Program Files (x86)\Arduino\libraries\ELClient/FP.cpp:31
}
    f47a:	08 95       	ret

0000f47c <FP<void, void*>::attach(void (*)(void*))>:
_ZN2FPIvPvE6attachEPFvS0_E():
C:\Program Files (x86)\Arduino\libraries\ELClient/FP.cpp:51


template<class retT, class argT>
void FP<retT, argT>::attach(retT (*function)(argT))
{
    c_callback = function;
    f47c:	fc 01       	movw	r30, r24
    f47e:	73 83       	std	Z+3, r23	; 0x03
    f480:	62 83       	std	Z+2, r22	; 0x02
C:\Program Files (x86)\Arduino\libraries\ELClient/FP.cpp:52
}
    f482:	08 95       	ret

0000f484 <FP<void, void*>::operator()(void*) const>:
_ZNK2FPIvPvEclES0_():
C:\Program Files (x86)\Arduino\libraries\ELClient/FP.cpp:55

template<class retT, class argT>
retT FP<retT, argT>::operator()(argT arg) const
    f484:	cf 93       	push	r28
    f486:	df 93       	push	r29
    f488:	ec 01       	movw	r28, r24
C:\Program Files (x86)\Arduino\libraries\ELClient/FP.cpp:57
{
    if( 0 != c_callback )
    f48a:	ea 81       	ldd	r30, Y+2	; 0x02
    f48c:	fb 81       	ldd	r31, Y+3	; 0x03
    f48e:	30 97       	sbiw	r30, 0x00	; 0
    f490:	e9 f0       	breq	.+58     	; 0xf4cc <FP<void, void*>::operator()(void*) const+0x48>
C:\Program Files (x86)\Arduino\libraries\ELClient/FP.cpp:59
    {
        return obj_callback ? (obj_callback->*method_callback)(arg) : (*c_callback)(arg);
    f492:	a8 81       	ld	r26, Y
    f494:	b9 81       	ldd	r27, Y+1	; 0x01
    f496:	10 97       	sbiw	r26, 0x00	; 0
    f498:	a9 f0       	breq	.+42     	; 0xf4c4 <FP<void, void*>::operator()(void*) const+0x40>
C:\Program Files (x86)\Arduino\libraries\ELClient/FP.cpp:59 (discriminator 1)
    f49a:	2c 81       	ldd	r18, Y+4	; 0x04
    f49c:	3d 81       	ldd	r19, Y+5	; 0x05
    f49e:	c9 01       	movw	r24, r18
    f4a0:	95 95       	asr	r25
    f4a2:	87 95       	ror	r24
    f4a4:	a8 0f       	add	r26, r24
    f4a6:	b9 1f       	adc	r27, r25
    f4a8:	20 ff       	sbrs	r18, 0
    f4aa:	08 c0       	rjmp	.+16     	; 0xf4bc <FP<void, void*>::operator()(void*) const+0x38>
C:\Program Files (x86)\Arduino\libraries\ELClient/FP.cpp:59 (discriminator 3)
    f4ac:	8d 91       	ld	r24, X+
    f4ae:	9c 91       	ld	r25, X
    f4b0:	11 97       	sbiw	r26, 0x01	; 1
    f4b2:	e8 0f       	add	r30, r24
    f4b4:	f9 1f       	adc	r31, r25
    f4b6:	01 90       	ld	r0, Z+
    f4b8:	f0 81       	ld	r31, Z
    f4ba:	e0 2d       	mov	r30, r0
C:\Program Files (x86)\Arduino\libraries\ELClient/FP.cpp:59 (discriminator 6)
    f4bc:	cd 01       	movw	r24, r26
C:\Program Files (x86)\Arduino\libraries\ELClient/FP.cpp:62 (discriminator 6)
    }
    return (retT)0;
}
    f4be:	df 91       	pop	r29
    f4c0:	cf 91       	pop	r28
C:\Program Files (x86)\Arduino\libraries\ELClient/FP.cpp:59 (discriminator 6)
template<class retT, class argT>
retT FP<retT, argT>::operator()(argT arg) const
{
    if( 0 != c_callback )
    {
        return obj_callback ? (obj_callback->*method_callback)(arg) : (*c_callback)(arg);
    f4c2:	19 94       	eijmp
C:\Program Files (x86)\Arduino\libraries\ELClient/FP.cpp:59 (discriminator 2)
    f4c4:	cb 01       	movw	r24, r22
C:\Program Files (x86)\Arduino\libraries\ELClient/FP.cpp:62 (discriminator 2)
    }
    return (retT)0;
}
    f4c6:	df 91       	pop	r29
    f4c8:	cf 91       	pop	r28
C:\Program Files (x86)\Arduino\libraries\ELClient/FP.cpp:59 (discriminator 2)
template<class retT, class argT>
retT FP<retT, argT>::operator()(argT arg) const
{
    if( 0 != c_callback )
    {
        return obj_callback ? (obj_callback->*method_callback)(arg) : (*c_callback)(arg);
    f4ca:	19 94       	eijmp
C:\Program Files (x86)\Arduino\libraries\ELClient/FP.cpp:62
    }
    return (retT)0;
}
    f4cc:	df 91       	pop	r29
    f4ce:	cf 91       	pop	r28
    f4d0:	08 95       	ret

0000f4d2 <FP<void, void*>::attached()>:
_ZN2FPIvPvE8attachedEv():
C:\Program Files (x86)\Arduino\libraries\ELClient/FP.cpp:34
    obj_callback = 0;
    c_callback = 0;
}

template<class retT, class argT>
bool FP<retT, argT>::attached()
    f4d2:	fc 01       	movw	r30, r24
C:\Program Files (x86)\Arduino\libraries\ELClient/FP.cpp:36
{
    return obj_callback || c_callback;
    f4d4:	80 81       	ld	r24, Z
    f4d6:	91 81       	ldd	r25, Z+1	; 0x01
    f4d8:	89 2b       	or	r24, r25
    f4da:	39 f4       	brne	.+14     	; 0xf4ea <FP<void, void*>::attached()+0x18>
C:\Program Files (x86)\Arduino\libraries\ELClient/FP.cpp:36 (discriminator 2)
    f4dc:	81 e0       	ldi	r24, 0x01	; 1
    f4de:	22 81       	ldd	r18, Z+2	; 0x02
    f4e0:	33 81       	ldd	r19, Z+3	; 0x03
    f4e2:	23 2b       	or	r18, r19
    f4e4:	19 f4       	brne	.+6      	; 0xf4ec <FP<void, void*>::attached()+0x1a>
    f4e6:	80 e0       	ldi	r24, 0x00	; 0
    f4e8:	08 95       	ret
C:\Program Files (x86)\Arduino\libraries\ELClient/FP.cpp:36
    f4ea:	81 e0       	ldi	r24, 0x01	; 1
C:\Program Files (x86)\Arduino\libraries\ELClient/FP.cpp:37
}
    f4ec:	08 95       	ret

0000f4ee <Thread::setInterval(unsigned long)>:
_ZN6Thread11setIntervalEm():
C:\Program Files (x86)\Arduino\libraries\ArduinoThread-master/Thread.cpp:26

	// Cache next run
	_cached_next_run = last_run + interval;
}

void Thread::setInterval(unsigned long _interval){
    f4ee:	fc 01       	movw	r30, r24
C:\Program Files (x86)\Arduino\libraries\ArduinoThread-master/Thread.cpp:28
	// Save interval
	interval = _interval;
    f4f0:	42 83       	std	Z+2, r20	; 0x02
    f4f2:	53 83       	std	Z+3, r21	; 0x03
    f4f4:	64 83       	std	Z+4, r22	; 0x04
    f4f6:	75 83       	std	Z+5, r23	; 0x05
C:\Program Files (x86)\Arduino\libraries\ArduinoThread-master/Thread.cpp:31

	// Cache the next run based on the last_run
	_cached_next_run = last_run + interval;
    f4f8:	86 81       	ldd	r24, Z+6	; 0x06
    f4fa:	97 81       	ldd	r25, Z+7	; 0x07
    f4fc:	a0 85       	ldd	r26, Z+8	; 0x08
    f4fe:	b1 85       	ldd	r27, Z+9	; 0x09
    f500:	84 0f       	add	r24, r20
    f502:	95 1f       	adc	r25, r21
    f504:	a6 1f       	adc	r26, r22
    f506:	b7 1f       	adc	r27, r23
    f508:	82 87       	std	Z+10, r24	; 0x0a
    f50a:	93 87       	std	Z+11, r25	; 0x0b
    f50c:	a4 87       	std	Z+12, r26	; 0x0c
    f50e:	b5 87       	std	Z+13, r27	; 0x0d
C:\Program Files (x86)\Arduino\libraries\ArduinoThread-master/Thread.cpp:32
}
    f510:	08 95       	ret

0000f512 <Thread::shouldRun(unsigned long)>:
_ZN6Thread9shouldRunEm():
C:\Program Files (x86)\Arduino\libraries\ArduinoThread-master/Thread.cpp:34

bool Thread::shouldRun(unsigned long time){
    f512:	0f 93       	push	r16
    f514:	1f 93       	push	r17
C:\Program Files (x86)\Arduino\libraries\ArduinoThread-master/Thread.cpp:36
	// If the "sign" bit is set the signed difference would be negative
	bool time_remaining = (time - _cached_next_run) & 0x80000000;
    f516:	fc 01       	movw	r30, r24
    f518:	02 85       	ldd	r16, Z+10	; 0x0a
    f51a:	13 85       	ldd	r17, Z+11	; 0x0b
    f51c:	24 85       	ldd	r18, Z+12	; 0x0c
    f51e:	35 85       	ldd	r19, Z+13	; 0x0d
    f520:	40 1b       	sub	r20, r16
    f522:	51 0b       	sbc	r21, r17
    f524:	62 0b       	sbc	r22, r18
    f526:	73 0b       	sbc	r23, r19
C:\Program Files (x86)\Arduino\libraries\ArduinoThread-master/Thread.cpp:39

	// Exceeded the time limit, AND is enabled? Then should run...
	return !time_remaining && enabled;
    f528:	80 e0       	ldi	r24, 0x00	; 0
    f52a:	77 ff       	sbrs	r23, 7
C:\Program Files (x86)\Arduino\libraries\ArduinoThread-master/Thread.cpp:39 (discriminator 1)
    f52c:	80 89       	ldd	r24, Z+16	; 0x10
C:\Program Files (x86)\Arduino\libraries\ArduinoThread-master/Thread.cpp:40
}
    f52e:	1f 91       	pop	r17
    f530:	0f 91       	pop	r16
    f532:	08 95       	ret

0000f534 <Thread::run()>:
_ZN6Thread3runEv():
C:\Program Files (x86)\Arduino\libraries\ArduinoThread-master/Thread.cpp:46

void Thread::onRun(void (*callback)(void)){
	_onRun = callback;
}

void Thread::run(){
    f534:	0f 93       	push	r16
    f536:	1f 93       	push	r17
    f538:	cf 93       	push	r28
    f53a:	df 93       	push	r29
    f53c:	ec 01       	movw	r28, r24
C:\Program Files (x86)\Arduino\libraries\ArduinoThread-master/Thread.cpp:47
	if(_onRun != NULL)
    f53e:	ee 85       	ldd	r30, Y+14	; 0x0e
    f540:	ff 85       	ldd	r31, Y+15	; 0x0f
    f542:	30 97       	sbiw	r30, 0x00	; 0
    f544:	09 f0       	breq	.+2      	; 0xf548 <Thread::run()+0x14>
C:\Program Files (x86)\Arduino\libraries\ArduinoThread-master/Thread.cpp:48
		_onRun();
    f546:	19 95       	eicall
_ZN6Thread6runnedEv():
C:\Program Files (x86)\Arduino\libraries\ArduinoThread-master/Thread.h:53
    f548:	0e 94 67 85 	call	0x10ace	; 0x10ace <millis>
_ZN6Thread6runnedEm():
C:\Program Files (x86)\Arduino\libraries\ArduinoThread-master/Thread.cpp:20
	setInterval(_interval);
};

void Thread::runned(unsigned long time){
	// Saves last_run
	last_run = time;
    f54c:	6e 83       	std	Y+6, r22	; 0x06
    f54e:	7f 83       	std	Y+7, r23	; 0x07
    f550:	88 87       	std	Y+8, r24	; 0x08
    f552:	99 87       	std	Y+9, r25	; 0x09
C:\Program Files (x86)\Arduino\libraries\ArduinoThread-master/Thread.cpp:23

	// Cache next run
	_cached_next_run = last_run + interval;
    f554:	0a 81       	ldd	r16, Y+2	; 0x02
    f556:	1b 81       	ldd	r17, Y+3	; 0x03
    f558:	2c 81       	ldd	r18, Y+4	; 0x04
    f55a:	3d 81       	ldd	r19, Y+5	; 0x05
    f55c:	dc 01       	movw	r26, r24
    f55e:	cb 01       	movw	r24, r22
    f560:	80 0f       	add	r24, r16
    f562:	91 1f       	adc	r25, r17
    f564:	a2 1f       	adc	r26, r18
    f566:	b3 1f       	adc	r27, r19
    f568:	8a 87       	std	Y+10, r24	; 0x0a
    f56a:	9b 87       	std	Y+11, r25	; 0x0b
    f56c:	ac 87       	std	Y+12, r26	; 0x0c
    f56e:	bd 87       	std	Y+13, r27	; 0x0d
_ZN6Thread3runEv():
C:\Program Files (x86)\Arduino\libraries\ArduinoThread-master/Thread.cpp:52
	if(_onRun != NULL)
		_onRun();

	// Update last_run and _cached_next_run
	runned();
}
    f570:	df 91       	pop	r29
    f572:	cf 91       	pop	r28
    f574:	1f 91       	pop	r17
    f576:	0f 91       	pop	r16
    f578:	08 95       	ret

0000f57a <Thread::Thread(void (*)(), unsigned long)>:
_ZN6ThreadC2EPFvvEm():
C:\Program Files (x86)\Arduino\libraries\ArduinoThread-master/Thread.cpp:3
#include "Thread.h"

Thread::Thread(void (*callback)(void), unsigned long _interval){
    f57a:	cf 92       	push	r12
    f57c:	df 92       	push	r13
    f57e:	ef 92       	push	r14
    f580:	ff 92       	push	r15
    f582:	cf 93       	push	r28
    f584:	df 93       	push	r29
    f586:	ec 01       	movw	r28, r24
    f588:	69 01       	movw	r12, r18
    f58a:	7a 01       	movw	r14, r20
    f58c:	85 e0       	ldi	r24, 0x05	; 5
    f58e:	9b e0       	ldi	r25, 0x0B	; 11
    f590:	99 83       	std	Y+1, r25	; 0x01
    f592:	88 83       	st	Y, r24
C:\Program Files (x86)\Arduino\libraries\ArduinoThread-master/Thread.cpp:4
	enabled = true;
    f594:	81 e0       	ldi	r24, 0x01	; 1
    f596:	88 8b       	std	Y+16, r24	; 0x10
_ZN6Thread5onRunEPFvvE():
C:\Program Files (x86)\Arduino\libraries\ArduinoThread-master/Thread.cpp:43
	// Exceeded the time limit, AND is enabled? Then should run...
	return !time_remaining && enabled;
}

void Thread::onRun(void (*callback)(void)){
	_onRun = callback;
    f598:	7f 87       	std	Y+15, r23	; 0x0f
    f59a:	6e 87       	std	Y+14, r22	; 0x0e
_ZN6ThreadC2EPFvvEm():
C:\Program Files (x86)\Arduino\libraries\ArduinoThread-master/Thread.cpp:6
#include "Thread.h"

Thread::Thread(void (*callback)(void), unsigned long _interval){
	enabled = true;
	onRun(callback);
	_cached_next_run = 0;
    f59c:	1a 86       	std	Y+10, r1	; 0x0a
    f59e:	1b 86       	std	Y+11, r1	; 0x0b
    f5a0:	1c 86       	std	Y+12, r1	; 0x0c
    f5a2:	1d 86       	std	Y+13, r1	; 0x0d
C:\Program Files (x86)\Arduino\libraries\ArduinoThread-master/Thread.cpp:7
	last_run = millis();
    f5a4:	0e 94 67 85 	call	0x10ace	; 0x10ace <millis>
    f5a8:	6e 83       	std	Y+6, r22	; 0x06
    f5aa:	7f 83       	std	Y+7, r23	; 0x07
    f5ac:	88 87       	std	Y+8, r24	; 0x08
    f5ae:	99 87       	std	Y+9, r25	; 0x09
C:\Program Files (x86)\Arduino\libraries\ArduinoThread-master/Thread.cpp:9

	ThreadID = (int)this;
    f5b0:	da 8b       	std	Y+18, r29	; 0x12
    f5b2:	c9 8b       	std	Y+17, r28	; 0x11
_ZN6Thread11setIntervalEm():
C:\Program Files (x86)\Arduino\libraries\ArduinoThread-master/Thread.cpp:28
	_cached_next_run = last_run + interval;
}

void Thread::setInterval(unsigned long _interval){
	// Save interval
	interval = _interval;
    f5b4:	ca 82       	std	Y+2, r12	; 0x02
    f5b6:	db 82       	std	Y+3, r13	; 0x03
    f5b8:	ec 82       	std	Y+4, r14	; 0x04
    f5ba:	fd 82       	std	Y+5, r15	; 0x05
C:\Program Files (x86)\Arduino\libraries\ArduinoThread-master/Thread.cpp:31

	// Cache the next run based on the last_run
	_cached_next_run = last_run + interval;
    f5bc:	c6 0e       	add	r12, r22
    f5be:	d7 1e       	adc	r13, r23
    f5c0:	e8 1e       	adc	r14, r24
    f5c2:	f9 1e       	adc	r15, r25
    f5c4:	ca 86       	std	Y+10, r12	; 0x0a
    f5c6:	db 86       	std	Y+11, r13	; 0x0b
    f5c8:	ec 86       	std	Y+12, r14	; 0x0c
    f5ca:	fd 86       	std	Y+13, r15	; 0x0d
_ZN6ThreadC2EPFvvEm():
C:\Program Files (x86)\Arduino\libraries\ArduinoThread-master/Thread.cpp:16
		ThreadName = "Thread ";
		ThreadName = ThreadName + ThreadID;
	#endif

	setInterval(_interval);
};
    f5cc:	df 91       	pop	r29
    f5ce:	cf 91       	pop	r28
    f5d0:	ff 90       	pop	r15
    f5d2:	ef 90       	pop	r14
    f5d4:	df 90       	pop	r13
    f5d6:	cf 90       	pop	r12
    f5d8:	08 95       	ret

0000f5da <Thread::runned(unsigned long)>:
_ZN6Thread6runnedEm():
C:\Program Files (x86)\Arduino\libraries\ArduinoThread-master/Thread.cpp:18

void Thread::runned(unsigned long time){
    f5da:	fc 01       	movw	r30, r24
C:\Program Files (x86)\Arduino\libraries\ArduinoThread-master/Thread.cpp:20
	// Saves last_run
	last_run = time;
    f5dc:	46 83       	std	Z+6, r20	; 0x06
    f5de:	57 83       	std	Z+7, r21	; 0x07
    f5e0:	60 87       	std	Z+8, r22	; 0x08
    f5e2:	71 87       	std	Z+9, r23	; 0x09
C:\Program Files (x86)\Arduino\libraries\ArduinoThread-master/Thread.cpp:23

	// Cache next run
	_cached_next_run = last_run + interval;
    f5e4:	82 81       	ldd	r24, Z+2	; 0x02
    f5e6:	93 81       	ldd	r25, Z+3	; 0x03
    f5e8:	a4 81       	ldd	r26, Z+4	; 0x04
    f5ea:	b5 81       	ldd	r27, Z+5	; 0x05
    f5ec:	84 0f       	add	r24, r20
    f5ee:	95 1f       	adc	r25, r21
    f5f0:	a6 1f       	adc	r26, r22
    f5f2:	b7 1f       	adc	r27, r23
    f5f4:	82 87       	std	Z+10, r24	; 0x0a
    f5f6:	93 87       	std	Z+11, r25	; 0x0b
    f5f8:	a4 87       	std	Z+12, r26	; 0x0c
    f5fa:	b5 87       	std	Z+13, r27	; 0x0d
C:\Program Files (x86)\Arduino\libraries\ArduinoThread-master/Thread.cpp:24
}
    f5fc:	08 95       	ret

0000f5fe <Thread::onRun(void (*)())>:
_ZN6Thread5onRunEPFvvE():
C:\Program Files (x86)\Arduino\libraries\ArduinoThread-master/Thread.cpp:43
	// Exceeded the time limit, AND is enabled? Then should run...
	return !time_remaining && enabled;
}

void Thread::onRun(void (*callback)(void)){
	_onRun = callback;
    f5fe:	fc 01       	movw	r30, r24
    f600:	77 87       	std	Z+15, r23	; 0x0f
    f602:	66 87       	std	Z+14, r22	; 0x0e
C:\Program Files (x86)\Arduino\libraries\ArduinoThread-master/Thread.cpp:44
}
    f604:	08 95       	ret

0000f606 <breakTime(unsigned long, tmElements_t&)>:
_Z9breakTimemR12tmElements_t():
C:\Program Files (x86)\Arduino\libraries\Time/Time.cpp:310

// indicates if time has been set and recently synchronized
timeStatus_t timeStatus() {
  now(); // required to actually update the status
  return Status;
}
    f606:	6f 92       	push	r6
    f608:	7f 92       	push	r7
    f60a:	8f 92       	push	r8
    f60c:	9f 92       	push	r9
    f60e:	af 92       	push	r10
    f610:	bf 92       	push	r11
    f612:	cf 92       	push	r12
    f614:	df 92       	push	r13
    f616:	ef 92       	push	r14
    f618:	ff 92       	push	r15
    f61a:	0f 93       	push	r16
    f61c:	1f 93       	push	r17
    f61e:	cf 93       	push	r28
    f620:	df 93       	push	r29
    f622:	6b 01       	movw	r12, r22
    f624:	7c 01       	movw	r14, r24
    f626:	ea 01       	movw	r28, r20
    f628:	8c e3       	ldi	r24, 0x3C	; 60
    f62a:	88 2e       	mov	r8, r24
    f62c:	91 2c       	mov	r9, r1
    f62e:	a1 2c       	mov	r10, r1
    f630:	b1 2c       	mov	r11, r1
    f632:	c7 01       	movw	r24, r14
    f634:	a5 01       	movw	r20, r10
    f636:	94 01       	movw	r18, r8
    f638:	0e 94 ea 91 	call	0x123d4	; 0x123d4 <__udivmodsi4>
    f63c:	68 83       	st	Y, r22
    f63e:	ca 01       	movw	r24, r20
    f640:	b9 01       	movw	r22, r18
    f642:	a5 01       	movw	r20, r10
    f644:	94 01       	movw	r18, r8
    f646:	0e 94 ea 91 	call	0x123d4	; 0x123d4 <__udivmodsi4>
    f64a:	69 83       	std	Y+1, r22	; 0x01
    f64c:	c7 01       	movw	r24, r14
    f64e:	b6 01       	movw	r22, r12
    f650:	20 e1       	ldi	r18, 0x10	; 16
    f652:	3e e0       	ldi	r19, 0x0E	; 14
    f654:	40 e0       	ldi	r20, 0x00	; 0
    f656:	50 e0       	ldi	r21, 0x00	; 0
    f658:	0e 94 ea 91 	call	0x123d4	; 0x123d4 <__udivmodsi4>
    f65c:	ca 01       	movw	r24, r20
    f65e:	b9 01       	movw	r22, r18
    f660:	28 e1       	ldi	r18, 0x18	; 24
    f662:	30 e0       	ldi	r19, 0x00	; 0
    f664:	40 e0       	ldi	r20, 0x00	; 0
    f666:	50 e0       	ldi	r21, 0x00	; 0
    f668:	0e 94 ea 91 	call	0x123d4	; 0x123d4 <__udivmodsi4>
    f66c:	6a 83       	std	Y+2, r22	; 0x02
    f66e:	c7 01       	movw	r24, r14
    f670:	b6 01       	movw	r22, r12
    f672:	20 e8       	ldi	r18, 0x80	; 128
    f674:	31 e5       	ldi	r19, 0x51	; 81
    f676:	41 e0       	ldi	r20, 0x01	; 1
    f678:	50 e0       	ldi	r21, 0x00	; 0
    f67a:	0e 94 ea 91 	call	0x123d4	; 0x123d4 <__udivmodsi4>
    f67e:	69 01       	movw	r12, r18
    f680:	7a 01       	movw	r14, r20
    f682:	ca 01       	movw	r24, r20
    f684:	b9 01       	movw	r22, r18
    f686:	6c 5f       	subi	r22, 0xFC	; 252
    f688:	7f 4f       	sbci	r23, 0xFF	; 255
    f68a:	8f 4f       	sbci	r24, 0xFF	; 255
    f68c:	9f 4f       	sbci	r25, 0xFF	; 255
    f68e:	27 e0       	ldi	r18, 0x07	; 7
    f690:	30 e0       	ldi	r19, 0x00	; 0
    f692:	40 e0       	ldi	r20, 0x00	; 0
    f694:	50 e0       	ldi	r21, 0x00	; 0
    f696:	0e 94 ea 91 	call	0x123d4	; 0x123d4 <__udivmodsi4>
    f69a:	6f 5f       	subi	r22, 0xFF	; 255
    f69c:	6b 83       	std	Y+3, r22	; 0x03
    f69e:	40 e0       	ldi	r20, 0x00	; 0
    f6a0:	81 2c       	mov	r8, r1
    f6a2:	91 2c       	mov	r9, r1
    f6a4:	54 01       	movw	r10, r8
    f6a6:	94 e6       	ldi	r25, 0x64	; 100
    f6a8:	69 2e       	mov	r6, r25
    f6aa:	71 2c       	mov	r7, r1
    f6ac:	00 e9       	ldi	r16, 0x90	; 144
    f6ae:	11 e0       	ldi	r17, 0x01	; 1
    f6b0:	24 2f       	mov	r18, r20
    f6b2:	30 e0       	ldi	r19, 0x00	; 0
    f6b4:	2e 54       	subi	r18, 0x4E	; 78
    f6b6:	38 4f       	sbci	r19, 0xF8	; 248
    f6b8:	f9 01       	movw	r30, r18
    f6ba:	e3 70       	andi	r30, 0x03	; 3
    f6bc:	ff 27       	eor	r31, r31
    f6be:	30 97       	sbiw	r30, 0x00	; 0
    f6c0:	f9 f4       	brne	.+62     	; 0xf700 <breakTime(unsigned long, tmElements_t&)+0xfa>
    f6c2:	c9 01       	movw	r24, r18
    f6c4:	b3 01       	movw	r22, r6
    f6c6:	0e 94 d6 91 	call	0x123ac	; 0x123ac <__divmodhi4>
    f6ca:	89 2b       	or	r24, r25
    f6cc:	31 f4       	brne	.+12     	; 0xf6da <breakTime(unsigned long, tmElements_t&)+0xd4>
    f6ce:	c9 01       	movw	r24, r18
    f6d0:	b8 01       	movw	r22, r16
    f6d2:	0e 94 d6 91 	call	0x123ac	; 0x123ac <__divmodhi4>
    f6d6:	89 2b       	or	r24, r25
    f6d8:	99 f4       	brne	.+38     	; 0xf700 <breakTime(unsigned long, tmElements_t&)+0xfa>
    f6da:	8e e6       	ldi	r24, 0x6E	; 110
    f6dc:	91 e0       	ldi	r25, 0x01	; 1
    f6de:	a0 e0       	ldi	r26, 0x00	; 0
    f6e0:	b0 e0       	ldi	r27, 0x00	; 0
    f6e2:	88 0e       	add	r8, r24
    f6e4:	99 1e       	adc	r9, r25
    f6e6:	aa 1e       	adc	r10, r26
    f6e8:	bb 1e       	adc	r11, r27
    f6ea:	d5 01       	movw	r26, r10
    f6ec:	c4 01       	movw	r24, r8
    f6ee:	aa 27       	eor	r26, r26
    f6f0:	bb 27       	eor	r27, r27
    f6f2:	c8 16       	cp	r12, r24
    f6f4:	d9 06       	cpc	r13, r25
    f6f6:	ea 06       	cpc	r14, r26
    f6f8:	fb 06       	cpc	r15, r27
    f6fa:	38 f0       	brcs	.+14     	; 0xf70a <breakTime(unsigned long, tmElements_t&)+0x104>
    f6fc:	4f 5f       	subi	r20, 0xFF	; 255
    f6fe:	d8 cf       	rjmp	.-80     	; 0xf6b0 <breakTime(unsigned long, tmElements_t&)+0xaa>
    f700:	8d e6       	ldi	r24, 0x6D	; 109
    f702:	91 e0       	ldi	r25, 0x01	; 1
    f704:	a0 e0       	ldi	r26, 0x00	; 0
    f706:	b0 e0       	ldi	r27, 0x00	; 0
    f708:	ec cf       	rjmp	.-40     	; 0xf6e2 <breakTime(unsigned long, tmElements_t&)+0xdc>
    f70a:	4e 83       	std	Y+6, r20	; 0x06
    f70c:	c9 01       	movw	r24, r18
    f70e:	64 e6       	ldi	r22, 0x64	; 100
    f710:	70 e0       	ldi	r23, 0x00	; 0
    f712:	0e 94 d6 91 	call	0x123ac	; 0x123ac <__divmodhi4>
    f716:	8c 01       	movw	r16, r24
    f718:	c9 01       	movw	r24, r18
    f71a:	60 e9       	ldi	r22, 0x90	; 144
    f71c:	71 e0       	ldi	r23, 0x01	; 1
    f71e:	0e 94 d6 91 	call	0x123ac	; 0x123ac <__divmodhi4>
    f722:	30 97       	sbiw	r30, 0x00	; 0
    f724:	29 f4       	brne	.+10     	; 0xf730 <breakTime(unsigned long, tmElements_t&)+0x12a>
    f726:	01 15       	cp	r16, r1
    f728:	11 05       	cpc	r17, r1
    f72a:	e1 f4       	brne	.+56     	; 0xf764 <breakTime(unsigned long, tmElements_t&)+0x15e>
    f72c:	00 97       	sbiw	r24, 0x00	; 0
    f72e:	d1 f0       	breq	.+52     	; 0xf764 <breakTime(unsigned long, tmElements_t&)+0x15e>
    f730:	4d e6       	ldi	r20, 0x6D	; 109
    f732:	51 e0       	ldi	r21, 0x01	; 1
    f734:	60 e0       	ldi	r22, 0x00	; 0
    f736:	70 e0       	ldi	r23, 0x00	; 0
    f738:	84 1a       	sub	r8, r20
    f73a:	95 0a       	sbc	r9, r21
    f73c:	a6 0a       	sbc	r10, r22
    f73e:	b7 0a       	sbc	r11, r23
    f740:	c8 18       	sub	r12, r8
    f742:	d9 08       	sbc	r13, r9
    f744:	ea 08       	sbc	r14, r10
    f746:	fb 08       	sbc	r15, r11
    f748:	ab e0       	ldi	r26, 0x0B	; 11
    f74a:	bb e0       	ldi	r27, 0x0B	; 11
    f74c:	20 e0       	ldi	r18, 0x00	; 0
    f74e:	21 30       	cpi	r18, 0x01	; 1
    f750:	71 f4       	brne	.+28     	; 0xf76e <breakTime(unsigned long, tmElements_t&)+0x168>
    f752:	30 97       	sbiw	r30, 0x00	; 0
    f754:	91 f5       	brne	.+100    	; 0xf7ba <breakTime(unsigned long, tmElements_t&)+0x1b4>
    f756:	01 15       	cp	r16, r1
    f758:	11 05       	cpc	r17, r1
    f75a:	11 f4       	brne	.+4      	; 0xf760 <breakTime(unsigned long, tmElements_t&)+0x15a>
    f75c:	00 97       	sbiw	r24, 0x00	; 0
    f75e:	69 f5       	brne	.+90     	; 0xf7ba <breakTime(unsigned long, tmElements_t&)+0x1b4>
    f760:	4d e1       	ldi	r20, 0x1D	; 29
    f762:	06 c0       	rjmp	.+12     	; 0xf770 <breakTime(unsigned long, tmElements_t&)+0x16a>
    f764:	4e e6       	ldi	r20, 0x6E	; 110
    f766:	51 e0       	ldi	r21, 0x01	; 1
    f768:	60 e0       	ldi	r22, 0x00	; 0
    f76a:	70 e0       	ldi	r23, 0x00	; 0
    f76c:	e5 cf       	rjmp	.-54     	; 0xf738 <breakTime(unsigned long, tmElements_t&)+0x132>
    f76e:	4c 91       	ld	r20, X
    f770:	50 e0       	ldi	r21, 0x00	; 0
    f772:	70 e0       	ldi	r23, 0x00	; 0
    f774:	60 e0       	ldi	r22, 0x00	; 0
    f776:	31 e0       	ldi	r19, 0x01	; 1
    f778:	32 0f       	add	r19, r18
    f77a:	c4 16       	cp	r12, r20
    f77c:	d5 06       	cpc	r13, r21
    f77e:	e6 06       	cpc	r14, r22
    f780:	f7 06       	cpc	r15, r23
    f782:	40 f0       	brcs	.+16     	; 0xf794 <breakTime(unsigned long, tmElements_t&)+0x18e>
    f784:	c4 1a       	sub	r12, r20
    f786:	d5 0a       	sbc	r13, r21
    f788:	e6 0a       	sbc	r14, r22
    f78a:	f7 0a       	sbc	r15, r23
    f78c:	11 96       	adiw	r26, 0x01	; 1
    f78e:	23 2f       	mov	r18, r19
    f790:	3c 30       	cpi	r19, 0x0C	; 12
    f792:	e9 f6       	brne	.-70     	; 0xf74e <breakTime(unsigned long, tmElements_t&)+0x148>
    f794:	2f 5f       	subi	r18, 0xFF	; 255
    f796:	2d 83       	std	Y+5, r18	; 0x05
    f798:	c3 94       	inc	r12
    f79a:	cc 82       	std	Y+4, r12	; 0x04
    f79c:	df 91       	pop	r29
    f79e:	cf 91       	pop	r28
    f7a0:	1f 91       	pop	r17
    f7a2:	0f 91       	pop	r16
    f7a4:	ff 90       	pop	r15
    f7a6:	ef 90       	pop	r14
    f7a8:	df 90       	pop	r13
    f7aa:	cf 90       	pop	r12
    f7ac:	bf 90       	pop	r11
    f7ae:	af 90       	pop	r10
    f7b0:	9f 90       	pop	r9
    f7b2:	8f 90       	pop	r8
    f7b4:	7f 90       	pop	r7
    f7b6:	6f 90       	pop	r6
    f7b8:	08 95       	ret
    f7ba:	4c e1       	ldi	r20, 0x1C	; 28
    f7bc:	d9 cf       	rjmp	.-78     	; 0xf770 <breakTime(unsigned long, tmElements_t&)+0x16a>

0000f7be <refreshCache(unsigned long)>:
_Z12refreshCachem():
    f7be:	cf 92       	push	r12
    f7c0:	df 92       	push	r13
    f7c2:	ef 92       	push	r14
    f7c4:	ff 92       	push	r15
    f7c6:	c0 90 df 14 	lds	r12, 0x14DF	; 0x8014df <cacheTime>
    f7ca:	d0 90 e0 14 	lds	r13, 0x14E0	; 0x8014e0 <cacheTime+0x1>
    f7ce:	e0 90 e1 14 	lds	r14, 0x14E1	; 0x8014e1 <cacheTime+0x2>
    f7d2:	f0 90 e2 14 	lds	r15, 0x14E2	; 0x8014e2 <cacheTime+0x3>
    f7d6:	c6 16       	cp	r12, r22
    f7d8:	d7 06       	cpc	r13, r23
    f7da:	e8 06       	cpc	r14, r24
    f7dc:	f9 06       	cpc	r15, r25
    f7de:	71 f0       	breq	.+28     	; 0xf7fc <refreshCache(unsigned long)+0x3e>
    f7e0:	6b 01       	movw	r12, r22
    f7e2:	7c 01       	movw	r14, r24
    f7e4:	43 ee       	ldi	r20, 0xE3	; 227
    f7e6:	54 e1       	ldi	r21, 0x14	; 20
    f7e8:	0e 94 03 7b 	call	0xf606	; 0xf606 <breakTime(unsigned long, tmElements_t&)>
    f7ec:	c0 92 df 14 	sts	0x14DF, r12	; 0x8014df <cacheTime>
    f7f0:	d0 92 e0 14 	sts	0x14E0, r13	; 0x8014e0 <cacheTime+0x1>
    f7f4:	e0 92 e1 14 	sts	0x14E1, r14	; 0x8014e1 <cacheTime+0x2>
    f7f8:	f0 92 e2 14 	sts	0x14E2, r15	; 0x8014e2 <cacheTime+0x3>
    f7fc:	ff 90       	pop	r15
    f7fe:	ef 90       	pop	r14
    f800:	df 90       	pop	r13
    f802:	cf 90       	pop	r12
    f804:	08 95       	ret

0000f806 <hour(unsigned long)>:
_Z4hourm():
    f806:	0e 94 df 7b 	call	0xf7be	; 0xf7be <refreshCache(unsigned long)>
    f80a:	80 91 e5 14 	lds	r24, 0x14E5	; 0x8014e5 <tm+0x2>
    f80e:	90 e0       	ldi	r25, 0x00	; 0
    f810:	08 95       	ret

0000f812 <minute(unsigned long)>:
_Z6minutem():
    f812:	0e 94 df 7b 	call	0xf7be	; 0xf7be <refreshCache(unsigned long)>
    f816:	80 91 e4 14 	lds	r24, 0x14E4	; 0x8014e4 <tm+0x1>
    f81a:	90 e0       	ldi	r25, 0x00	; 0
    f81c:	08 95       	ret

0000f81e <second(unsigned long)>:
_Z6secondm():
    f81e:	0e 94 df 7b 	call	0xf7be	; 0xf7be <refreshCache(unsigned long)>
    f822:	80 91 e3 14 	lds	r24, 0x14E3	; 0x8014e3 <tm>
    f826:	90 e0       	ldi	r25, 0x00	; 0
    f828:	08 95       	ret

0000f82a <day(unsigned long)>:
_Z3daym():
    f82a:	0e 94 df 7b 	call	0xf7be	; 0xf7be <refreshCache(unsigned long)>
    f82e:	80 91 e7 14 	lds	r24, 0x14E7	; 0x8014e7 <tm+0x4>
    f832:	90 e0       	ldi	r25, 0x00	; 0
    f834:	08 95       	ret

0000f836 <month(unsigned long)>:
_Z5monthm():
    f836:	0e 94 df 7b 	call	0xf7be	; 0xf7be <refreshCache(unsigned long)>
    f83a:	80 91 e8 14 	lds	r24, 0x14E8	; 0x8014e8 <tm+0x5>
    f83e:	90 e0       	ldi	r25, 0x00	; 0
    f840:	08 95       	ret

0000f842 <year(unsigned long)>:
_Z4yearm():
    f842:	0e 94 df 7b 	call	0xf7be	; 0xf7be <refreshCache(unsigned long)>
    f846:	80 91 e9 14 	lds	r24, 0x14E9	; 0x8014e9 <tm+0x6>
    f84a:	90 e0       	ldi	r25, 0x00	; 0
    f84c:	8e 54       	subi	r24, 0x4E	; 78
    f84e:	98 4f       	sbci	r25, 0xF8	; 248
    f850:	08 95       	ret

0000f852 <setTime(unsigned long)>:
_Z7setTimem():
    f852:	0f 93       	push	r16
    f854:	1f 93       	push	r17
    f856:	60 93 db 14 	sts	0x14DB, r22	; 0x8014db <sysTime>
    f85a:	70 93 dc 14 	sts	0x14DC, r23	; 0x8014dc <sysTime+0x1>
    f85e:	80 93 dd 14 	sts	0x14DD, r24	; 0x8014dd <sysTime+0x2>
    f862:	90 93 de 14 	sts	0x14DE, r25	; 0x8014de <sysTime+0x3>
    f866:	00 91 06 02 	lds	r16, 0x0206	; 0x800206 <syncInterval>
    f86a:	10 91 07 02 	lds	r17, 0x0207	; 0x800207 <syncInterval+0x1>
    f86e:	20 91 08 02 	lds	r18, 0x0208	; 0x800208 <syncInterval+0x2>
    f872:	30 91 09 02 	lds	r19, 0x0209	; 0x800209 <syncInterval+0x3>
    f876:	dc 01       	movw	r26, r24
    f878:	cb 01       	movw	r24, r22
    f87a:	80 0f       	add	r24, r16
    f87c:	91 1f       	adc	r25, r17
    f87e:	a2 1f       	adc	r26, r18
    f880:	b3 1f       	adc	r27, r19
    f882:	80 93 d3 14 	sts	0x14D3, r24	; 0x8014d3 <nextSyncTime>
    f886:	90 93 d4 14 	sts	0x14D4, r25	; 0x8014d4 <nextSyncTime+0x1>
    f88a:	a0 93 d5 14 	sts	0x14D5, r26	; 0x8014d5 <nextSyncTime+0x2>
    f88e:	b0 93 d6 14 	sts	0x14D6, r27	; 0x8014d6 <nextSyncTime+0x3>
    f892:	82 e0       	ldi	r24, 0x02	; 2
    f894:	90 e0       	ldi	r25, 0x00	; 0
    f896:	90 93 d2 14 	sts	0x14D2, r25	; 0x8014d2 <Status+0x1>
    f89a:	80 93 d1 14 	sts	0x14D1, r24	; 0x8014d1 <Status>
    f89e:	0e 94 67 85 	call	0x10ace	; 0x10ace <millis>
    f8a2:	60 93 d7 14 	sts	0x14D7, r22	; 0x8014d7 <prevMillis>
    f8a6:	70 93 d8 14 	sts	0x14D8, r23	; 0x8014d8 <prevMillis+0x1>
    f8aa:	80 93 d9 14 	sts	0x14D9, r24	; 0x8014d9 <prevMillis+0x2>
    f8ae:	90 93 da 14 	sts	0x14DA, r25	; 0x8014da <prevMillis+0x3>
    f8b2:	1f 91       	pop	r17
    f8b4:	0f 91       	pop	r16
    f8b6:	08 95       	ret

0000f8b8 <now()>:
_Z3nowv():
    f8b8:	cf 92       	push	r12
    f8ba:	df 92       	push	r13
    f8bc:	ef 92       	push	r14
    f8be:	ff 92       	push	r15
    f8c0:	0f 93       	push	r16
    f8c2:	1f 93       	push	r17
    f8c4:	0e 94 67 85 	call	0x10ace	; 0x10ace <millis>
    f8c8:	c0 90 d7 14 	lds	r12, 0x14D7	; 0x8014d7 <prevMillis>
    f8cc:	d0 90 d8 14 	lds	r13, 0x14D8	; 0x8014d8 <prevMillis+0x1>
    f8d0:	e0 90 d9 14 	lds	r14, 0x14D9	; 0x8014d9 <prevMillis+0x2>
    f8d4:	f0 90 da 14 	lds	r15, 0x14DA	; 0x8014da <prevMillis+0x3>
    f8d8:	8b 01       	movw	r16, r22
    f8da:	9c 01       	movw	r18, r24
    f8dc:	0c 19       	sub	r16, r12
    f8de:	1d 09       	sbc	r17, r13
    f8e0:	2e 09       	sbc	r18, r14
    f8e2:	3f 09       	sbc	r19, r15
    f8e4:	80 91 db 14 	lds	r24, 0x14DB	; 0x8014db <sysTime>
    f8e8:	90 91 dc 14 	lds	r25, 0x14DC	; 0x8014dc <sysTime+0x1>
    f8ec:	a0 91 dd 14 	lds	r26, 0x14DD	; 0x8014dd <sysTime+0x2>
    f8f0:	b0 91 de 14 	lds	r27, 0x14DE	; 0x8014de <sysTime+0x3>
    f8f4:	08 3e       	cpi	r16, 0xE8	; 232
    f8f6:	13 40       	sbci	r17, 0x03	; 3
    f8f8:	21 05       	cpc	r18, r1
    f8fa:	31 05       	cpc	r19, r1
    f8fc:	d0 f0       	brcs	.+52     	; 0xf932 <now()+0x7a>
    f8fe:	01 96       	adiw	r24, 0x01	; 1
    f900:	a1 1d       	adc	r26, r1
    f902:	b1 1d       	adc	r27, r1
    f904:	80 93 db 14 	sts	0x14DB, r24	; 0x8014db <sysTime>
    f908:	90 93 dc 14 	sts	0x14DC, r25	; 0x8014dc <sysTime+0x1>
    f90c:	a0 93 dd 14 	sts	0x14DD, r26	; 0x8014dd <sysTime+0x2>
    f910:	b0 93 de 14 	sts	0x14DE, r27	; 0x8014de <sysTime+0x3>
    f914:	b7 01       	movw	r22, r14
    f916:	a6 01       	movw	r20, r12
    f918:	48 51       	subi	r20, 0x18	; 24
    f91a:	5c 4f       	sbci	r21, 0xFC	; 252
    f91c:	6f 4f       	sbci	r22, 0xFF	; 255
    f91e:	7f 4f       	sbci	r23, 0xFF	; 255
    f920:	40 93 d7 14 	sts	0x14D7, r20	; 0x8014d7 <prevMillis>
    f924:	50 93 d8 14 	sts	0x14D8, r21	; 0x8014d8 <prevMillis+0x1>
    f928:	60 93 d9 14 	sts	0x14D9, r22	; 0x8014d9 <prevMillis+0x2>
    f92c:	70 93 da 14 	sts	0x14DA, r23	; 0x8014da <prevMillis+0x3>
    f930:	c9 cf       	rjmp	.-110    	; 0xf8c4 <now()+0xc>
    f932:	40 91 d3 14 	lds	r20, 0x14D3	; 0x8014d3 <nextSyncTime>
    f936:	50 91 d4 14 	lds	r21, 0x14D4	; 0x8014d4 <nextSyncTime+0x1>
    f93a:	60 91 d5 14 	lds	r22, 0x14D5	; 0x8014d5 <nextSyncTime+0x2>
    f93e:	70 91 d6 14 	lds	r23, 0x14D6	; 0x8014d6 <nextSyncTime+0x3>
    f942:	84 17       	cp	r24, r20
    f944:	95 07       	cpc	r25, r21
    f946:	a6 07       	cpc	r26, r22
    f948:	b7 07       	cpc	r27, r23
    f94a:	70 f0       	brcs	.+28     	; 0xf968 <now()+0xb0>
    f94c:	e0 91 cf 14 	lds	r30, 0x14CF	; 0x8014cf <getTimePtr>
    f950:	f0 91 d0 14 	lds	r31, 0x14D0	; 0x8014d0 <getTimePtr+0x1>
    f954:	30 97       	sbiw	r30, 0x00	; 0
    f956:	41 f0       	breq	.+16     	; 0xf968 <now()+0xb0>
    f958:	19 95       	eicall
    f95a:	61 15       	cp	r22, r1
    f95c:	71 05       	cpc	r23, r1
    f95e:	81 05       	cpc	r24, r1
    f960:	91 05       	cpc	r25, r1
    f962:	89 f0       	breq	.+34     	; 0xf986 <now()+0xce>
    f964:	0e 94 29 7c 	call	0xf852	; 0xf852 <setTime(unsigned long)>
    f968:	60 91 db 14 	lds	r22, 0x14DB	; 0x8014db <sysTime>
    f96c:	70 91 dc 14 	lds	r23, 0x14DC	; 0x8014dc <sysTime+0x1>
    f970:	80 91 dd 14 	lds	r24, 0x14DD	; 0x8014dd <sysTime+0x2>
    f974:	90 91 de 14 	lds	r25, 0x14DE	; 0x8014de <sysTime+0x3>
    f978:	1f 91       	pop	r17
    f97a:	0f 91       	pop	r16
    f97c:	ff 90       	pop	r15
    f97e:	ef 90       	pop	r14
    f980:	df 90       	pop	r13
    f982:	cf 90       	pop	r12
    f984:	08 95       	ret
    f986:	80 91 db 14 	lds	r24, 0x14DB	; 0x8014db <sysTime>
    f98a:	90 91 dc 14 	lds	r25, 0x14DC	; 0x8014dc <sysTime+0x1>
    f98e:	a0 91 dd 14 	lds	r26, 0x14DD	; 0x8014dd <sysTime+0x2>
    f992:	b0 91 de 14 	lds	r27, 0x14DE	; 0x8014de <sysTime+0x3>
    f996:	40 91 06 02 	lds	r20, 0x0206	; 0x800206 <syncInterval>
    f99a:	50 91 07 02 	lds	r21, 0x0207	; 0x800207 <syncInterval+0x1>
    f99e:	60 91 08 02 	lds	r22, 0x0208	; 0x800208 <syncInterval+0x2>
    f9a2:	70 91 09 02 	lds	r23, 0x0209	; 0x800209 <syncInterval+0x3>
    f9a6:	84 0f       	add	r24, r20
    f9a8:	95 1f       	adc	r25, r21
    f9aa:	a6 1f       	adc	r26, r22
    f9ac:	b7 1f       	adc	r27, r23
    f9ae:	80 93 d3 14 	sts	0x14D3, r24	; 0x8014d3 <nextSyncTime>
    f9b2:	90 93 d4 14 	sts	0x14D4, r25	; 0x8014d4 <nextSyncTime+0x1>
    f9b6:	a0 93 d5 14 	sts	0x14D5, r26	; 0x8014d5 <nextSyncTime+0x2>
    f9ba:	b0 93 d6 14 	sts	0x14D6, r27	; 0x8014d6 <nextSyncTime+0x3>
    f9be:	81 e0       	ldi	r24, 0x01	; 1
    f9c0:	90 e0       	ldi	r25, 0x00	; 0
    f9c2:	20 91 d1 14 	lds	r18, 0x14D1	; 0x8014d1 <Status>
    f9c6:	30 91 d2 14 	lds	r19, 0x14D2	; 0x8014d2 <Status+0x1>
    f9ca:	23 2b       	or	r18, r19
    f9cc:	11 f4       	brne	.+4      	; 0xf9d2 <now()+0x11a>
    f9ce:	90 e0       	ldi	r25, 0x00	; 0
    f9d0:	80 e0       	ldi	r24, 0x00	; 0
    f9d2:	90 93 d2 14 	sts	0x14D2, r25	; 0x8014d2 <Status+0x1>
    f9d6:	80 93 d1 14 	sts	0x14D1, r24	; 0x8014d1 <Status>
    f9da:	c6 cf       	rjmp	.-116    	; 0xf968 <now()+0xb0>

0000f9dc <setSyncProvider(unsigned long (*)())>:
_Z15setSyncProviderPFmvE():
C:\Program Files (x86)\Arduino\libraries\Time/Time.cpp:313

void setSyncProvider( getExternalTime getTimeFunction){
  getTimePtr = getTimeFunction;  
    f9dc:	90 93 d0 14 	sts	0x14D0, r25	; 0x8014d0 <getTimePtr+0x1>
    f9e0:	80 93 cf 14 	sts	0x14CF, r24	; 0x8014cf <getTimePtr>
C:\Program Files (x86)\Arduino\libraries\Time/Time.cpp:314
  nextSyncTime = sysTime;
    f9e4:	80 91 db 14 	lds	r24, 0x14DB	; 0x8014db <sysTime>
    f9e8:	90 91 dc 14 	lds	r25, 0x14DC	; 0x8014dc <sysTime+0x1>
    f9ec:	a0 91 dd 14 	lds	r26, 0x14DD	; 0x8014dd <sysTime+0x2>
    f9f0:	b0 91 de 14 	lds	r27, 0x14DE	; 0x8014de <sysTime+0x3>
    f9f4:	80 93 d3 14 	sts	0x14D3, r24	; 0x8014d3 <nextSyncTime>
    f9f8:	90 93 d4 14 	sts	0x14D4, r25	; 0x8014d4 <nextSyncTime+0x1>
    f9fc:	a0 93 d5 14 	sts	0x14D5, r26	; 0x8014d5 <nextSyncTime+0x2>
    fa00:	b0 93 d6 14 	sts	0x14D6, r27	; 0x8014d6 <nextSyncTime+0x3>
C:\Program Files (x86)\Arduino\libraries\Time/Time.cpp:315
  now(); // this will sync the clock
    fa04:	0c 94 5c 7c 	jmp	0xf8b8	; 0xf8b8 <now()>

0000fa08 <setSyncInterval(unsigned long)>:
_Z15setSyncIntervalm():
C:\Program Files (x86)\Arduino\libraries\Time/Time.cpp:318
}

void setSyncInterval(time_t interval){ // set the number of seconds between re-sync
    fa08:	0f 93       	push	r16
    fa0a:	1f 93       	push	r17
C:\Program Files (x86)\Arduino\libraries\Time/Time.cpp:319
  syncInterval = (uint32_t)interval;
    fa0c:	60 93 06 02 	sts	0x0206, r22	; 0x800206 <syncInterval>
    fa10:	70 93 07 02 	sts	0x0207, r23	; 0x800207 <syncInterval+0x1>
    fa14:	80 93 08 02 	sts	0x0208, r24	; 0x800208 <syncInterval+0x2>
    fa18:	90 93 09 02 	sts	0x0209, r25	; 0x800209 <syncInterval+0x3>
C:\Program Files (x86)\Arduino\libraries\Time/Time.cpp:320
  nextSyncTime = sysTime + syncInterval;
    fa1c:	00 91 db 14 	lds	r16, 0x14DB	; 0x8014db <sysTime>
    fa20:	10 91 dc 14 	lds	r17, 0x14DC	; 0x8014dc <sysTime+0x1>
    fa24:	20 91 dd 14 	lds	r18, 0x14DD	; 0x8014dd <sysTime+0x2>
    fa28:	30 91 de 14 	lds	r19, 0x14DE	; 0x8014de <sysTime+0x3>
    fa2c:	dc 01       	movw	r26, r24
    fa2e:	cb 01       	movw	r24, r22
    fa30:	80 0f       	add	r24, r16
    fa32:	91 1f       	adc	r25, r17
    fa34:	a2 1f       	adc	r26, r18
    fa36:	b3 1f       	adc	r27, r19
    fa38:	80 93 d3 14 	sts	0x14D3, r24	; 0x8014d3 <nextSyncTime>
    fa3c:	90 93 d4 14 	sts	0x14D4, r25	; 0x8014d4 <nextSyncTime+0x1>
    fa40:	a0 93 d5 14 	sts	0x14D5, r26	; 0x8014d5 <nextSyncTime+0x2>
    fa44:	b0 93 d6 14 	sts	0x14D6, r27	; 0x8014d6 <nextSyncTime+0x3>
C:\Program Files (x86)\Arduino\libraries\Time/Time.cpp:321
}
    fa48:	1f 91       	pop	r17
    fa4a:	0f 91       	pop	r16
    fa4c:	08 95       	ret

0000fa4e <SPIClass::begin()>:
_ZN8SPIClass5beginEv():
C:\Users\bitmu\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.1.3\libraries\SPI\src/SPI.cpp:27
#ifdef SPI_TRANSACTION_MISMATCH_LED
uint8_t SPIClass::inTransactionFlag = 0;
#endif

void SPIClass::begin()
{
    fa4e:	cf 93       	push	r28
C:\Users\bitmu\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.1.3\libraries\SPI\src/SPI.cpp:28
  uint8_t sreg = SREG;
    fa50:	cf b7       	in	r28, 0x3f	; 63
C:\Users\bitmu\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.1.3\libraries\SPI\src/SPI.cpp:29
  noInterrupts(); // Protect from a scheduler and prevent transactionBegin
    fa52:	f8 94       	cli
C:\Users\bitmu\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.1.3\libraries\SPI\src/SPI.cpp:30
  if (!initialized) {
    fa54:	80 91 ed 14 	lds	r24, 0x14ED	; 0x8014ed <SPIClass::initialized>
    fa58:	81 11       	cpse	r24, r1
    fa5a:	27 c0       	rjmp	.+78     	; 0xfaaa <SPIClass::begin()+0x5c>
C:\Users\bitmu\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.1.3\libraries\SPI\src/SPI.cpp:32
    // Set SS to high so a connected chip will be "deselected" by default
    uint8_t port = digitalPinToPort(SS);
    fa5c:	e4 e4       	ldi	r30, 0x44	; 68
    fa5e:	f1 e2       	ldi	r31, 0x21	; 33
    fa60:	84 91       	lpm	r24, Z
C:\Users\bitmu\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.1.3\libraries\SPI\src/SPI.cpp:33
    uint8_t bit = digitalPinToBitMask(SS);
    fa62:	ee ee       	ldi	r30, 0xEE	; 238
    fa64:	f0 e2       	ldi	r31, 0x20	; 32
    fa66:	94 91       	lpm	r25, Z
C:\Users\bitmu\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.1.3\libraries\SPI\src/SPI.cpp:34
    volatile uint8_t *reg = portModeRegister(port);
    fa68:	e8 2f       	mov	r30, r24
    fa6a:	f0 e0       	ldi	r31, 0x00	; 0
    fa6c:	ee 0f       	add	r30, r30
    fa6e:	ff 1f       	adc	r31, r31
    fa70:	e7 56       	subi	r30, 0x67	; 103
    fa72:	fe 4d       	sbci	r31, 0xDE	; 222
    fa74:	a5 91       	lpm	r26, Z+
    fa76:	b4 91       	lpm	r27, Z
C:\Users\bitmu\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.1.3\libraries\SPI\src/SPI.cpp:38

    // if the SS pin is not already configured as an output
    // then set it high (to enable the internal pull-up resistor)
    if(!(*reg & bit)){
    fa78:	ec 91       	ld	r30, X
    fa7a:	e9 23       	and	r30, r25
    fa7c:	21 f4       	brne	.+8      	; 0xfa86 <SPIClass::begin()+0x38>
C:\Users\bitmu\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.1.3\libraries\SPI\src/SPI.cpp:39
      digitalWrite(SS, HIGH);
    fa7e:	61 e0       	ldi	r22, 0x01	; 1
    fa80:	85 e3       	ldi	r24, 0x35	; 53
    fa82:	0e 94 c2 87 	call	0x10f84	; 0x10f84 <digitalWrite>
C:\Users\bitmu\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.1.3\libraries\SPI\src/SPI.cpp:45
    }

    // When the SS pin is set as OUTPUT, it can be used as
    // a general purpose output port (it doesn't influence
    // SPI operations).
    pinMode(SS, OUTPUT);
    fa86:	61 e0       	ldi	r22, 0x01	; 1
    fa88:	85 e3       	ldi	r24, 0x35	; 53
    fa8a:	0e 94 86 87 	call	0x10f0c	; 0x10f0c <pinMode>
C:\Users\bitmu\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.1.3\libraries\SPI\src/SPI.cpp:50

    // Warning: if the SS pin ever becomes a LOW INPUT then SPI
    // automatically switches to Slave, so the data direction of
    // the SS pin MUST be kept as OUTPUT.
    SPCR |= _BV(MSTR);
    fa8e:	8c b5       	in	r24, 0x2c	; 44
    fa90:	80 61       	ori	r24, 0x10	; 16
    fa92:	8c bd       	out	0x2c, r24	; 44
C:\Users\bitmu\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.1.3\libraries\SPI\src/SPI.cpp:51
    SPCR |= _BV(SPE);
    fa94:	8c b5       	in	r24, 0x2c	; 44
    fa96:	80 64       	ori	r24, 0x40	; 64
    fa98:	8c bd       	out	0x2c, r24	; 44
C:\Users\bitmu\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.1.3\libraries\SPI\src/SPI.cpp:59
    // MISO pin automatically overrides to INPUT.
    // By doing this AFTER enabling SPI, we avoid accidentally
    // clocking in a single bit since the lines go directly
    // from "input" to SPI control.
    // http://code.google.com/p/arduino/issues/detail?id=888
    pinMode(SCK, OUTPUT);
    fa9a:	61 e0       	ldi	r22, 0x01	; 1
    fa9c:	84 e3       	ldi	r24, 0x34	; 52
    fa9e:	0e 94 86 87 	call	0x10f0c	; 0x10f0c <pinMode>
C:\Users\bitmu\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.1.3\libraries\SPI\src/SPI.cpp:60
    pinMode(MOSI, OUTPUT);
    faa2:	61 e0       	ldi	r22, 0x01	; 1
    faa4:	83 e3       	ldi	r24, 0x33	; 51
    faa6:	0e 94 86 87 	call	0x10f0c	; 0x10f0c <pinMode>
C:\Users\bitmu\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.1.3\libraries\SPI\src/SPI.cpp:62
  }
  initialized++; // reference count
    faaa:	80 91 ed 14 	lds	r24, 0x14ED	; 0x8014ed <SPIClass::initialized>
    faae:	8f 5f       	subi	r24, 0xFF	; 255
    fab0:	80 93 ed 14 	sts	0x14ED, r24	; 0x8014ed <SPIClass::initialized>
C:\Users\bitmu\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.1.3\libraries\SPI\src/SPI.cpp:63
  SREG = sreg;
    fab4:	cf bf       	out	0x3f, r28	; 63
C:\Users\bitmu\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.1.3\libraries\SPI\src/SPI.cpp:64
}
    fab6:	cf 91       	pop	r28
    fab8:	08 95       	ret

0000faba <freeListSize()>:
_Z12freeListSizev():
C:\Program Files (x86)\Arduino\libraries\MemoryFree/MemoryFree.cpp:28

/* Calculates the size of the free list */
int freeListSize() {
  struct __freelist* current;
  int total = 0;
  for (current = __flp; current; current = current->nx) {
    faba:	e0 91 2d 17 	lds	r30, 0x172D	; 0x80172d <__flp>
    fabe:	f0 91 2e 17 	lds	r31, 0x172E	; 0x80172e <__flp+0x1>
C:\Program Files (x86)\Arduino\libraries\MemoryFree/MemoryFree.cpp:27
#include "MemoryFree.h"

/* Calculates the size of the free list */
int freeListSize() {
  struct __freelist* current;
  int total = 0;
    fac2:	90 e0       	ldi	r25, 0x00	; 0
    fac4:	80 e0       	ldi	r24, 0x00	; 0
C:\Program Files (x86)\Arduino\libraries\MemoryFree/MemoryFree.cpp:28 (discriminator 3)
  for (current = __flp; current; current = current->nx) {
    fac6:	30 97       	sbiw	r30, 0x00	; 0
    fac8:	49 f0       	breq	.+18     	; 0xfadc <freeListSize()+0x22>
C:\Program Files (x86)\Arduino\libraries\MemoryFree/MemoryFree.cpp:29 (discriminator 2)
    total += 2; /* Add two bytes for the memory block's header  */
    faca:	02 96       	adiw	r24, 0x02	; 2
C:\Program Files (x86)\Arduino\libraries\MemoryFree/MemoryFree.cpp:30 (discriminator 2)
    total += (int) current->sz;
    facc:	20 81       	ld	r18, Z
    face:	31 81       	ldd	r19, Z+1	; 0x01
    fad0:	82 0f       	add	r24, r18
    fad2:	93 1f       	adc	r25, r19
C:\Program Files (x86)\Arduino\libraries\MemoryFree/MemoryFree.cpp:28 (discriminator 2)

/* Calculates the size of the free list */
int freeListSize() {
  struct __freelist* current;
  int total = 0;
  for (current = __flp; current; current = current->nx) {
    fad4:	02 80       	ldd	r0, Z+2	; 0x02
    fad6:	f3 81       	ldd	r31, Z+3	; 0x03
    fad8:	e0 2d       	mov	r30, r0
    fada:	f5 cf       	rjmp	.-22     	; 0xfac6 <freeListSize()+0xc>
C:\Program Files (x86)\Arduino\libraries\MemoryFree/MemoryFree.cpp:33
    total += 2; /* Add two bytes for the memory block's header  */
    total += (int) current->sz;
  }
  return total;
}
    fadc:	08 95       	ret

0000fade <freeMemory>:
freeMemory():
C:\Program Files (x86)\Arduino\libraries\MemoryFree/MemoryFree.cpp:35

int freeMemory() {
    fade:	0f 93       	push	r16
    fae0:	1f 93       	push	r17
    fae2:	cf 93       	push	r28
    fae4:	df 93       	push	r29
    fae6:	1f 92       	push	r1
    fae8:	1f 92       	push	r1
    faea:	cd b7       	in	r28, 0x3d	; 61
    faec:	de b7       	in	r29, 0x3e	; 62
C:\Program Files (x86)\Arduino\libraries\MemoryFree/MemoryFree.cpp:37
  int free_memory;
  if ((int)__brkval == 0) {
    faee:	80 91 2b 17 	lds	r24, 0x172B	; 0x80172b <__brkval>
    faf2:	90 91 2c 17 	lds	r25, 0x172C	; 0x80172c <__brkval+0x1>
    faf6:	8e 01       	movw	r16, r28
    faf8:	0f 5f       	subi	r16, 0xFF	; 255
    fafa:	1f 4f       	sbci	r17, 0xFF	; 255
    fafc:	00 97       	sbiw	r24, 0x00	; 0
    fafe:	69 f4       	brne	.+26     	; 0xfb1a <freeMemory+0x3c>
C:\Program Files (x86)\Arduino\libraries\MemoryFree/MemoryFree.cpp:38
    free_memory = ((int)&free_memory) - ((int)&__heap_start);
    fb00:	07 53       	subi	r16, 0x37	; 55
    fb02:	17 41       	sbci	r17, 0x17	; 23
    fb04:	1a 83       	std	Y+2, r17	; 0x02
    fb06:	09 83       	std	Y+1, r16	; 0x01
C:\Program Files (x86)\Arduino\libraries\MemoryFree/MemoryFree.cpp:44
  } else {
    free_memory = ((int)&free_memory) - ((int)__brkval);
    free_memory += freeListSize();
  }
  return free_memory;
    fb08:	89 81       	ldd	r24, Y+1	; 0x01
    fb0a:	9a 81       	ldd	r25, Y+2	; 0x02
    fb0c:	0f 90       	pop	r0
    fb0e:	0f 90       	pop	r0
    fb10:	df 91       	pop	r29
    fb12:	cf 91       	pop	r28
    fb14:	1f 91       	pop	r17
    fb16:	0f 91       	pop	r16
    fb18:	08 95       	ret
C:\Program Files (x86)\Arduino\libraries\MemoryFree/MemoryFree.cpp:40
int freeMemory() {
  int free_memory;
  if ((int)__brkval == 0) {
    free_memory = ((int)&free_memory) - ((int)&__heap_start);
  } else {
    free_memory = ((int)&free_memory) - ((int)__brkval);
    fb1a:	08 1b       	sub	r16, r24
    fb1c:	19 0b       	sbc	r17, r25
    fb1e:	1a 83       	std	Y+2, r17	; 0x02
    fb20:	09 83       	std	Y+1, r16	; 0x01
C:\Program Files (x86)\Arduino\libraries\MemoryFree/MemoryFree.cpp:41
    free_memory += freeListSize();
    fb22:	0e 94 5d 7d 	call	0xfaba	; 0xfaba <freeListSize()>
    fb26:	80 0f       	add	r24, r16
    fb28:	91 1f       	adc	r25, r17
    fb2a:	9a 83       	std	Y+2, r25	; 0x02
    fb2c:	89 83       	std	Y+1, r24	; 0x01
    fb2e:	ec cf       	rjmp	.-40     	; 0xfb08 <freeMemory+0x2a>

0000fb30 <TonePlayer::tone(unsigned int)>:
_ZN10TonePlayer4toneEj():
C:\Program Files (x86)\Arduino\libraries\TonePlayer/TonePlayer.cpp:62

#include <TonePlayer.h>


void TonePlayer::tone (const unsigned int Hz)
{
    fb30:	cf 92       	push	r12
    fb32:	df 92       	push	r13
    fb34:	ef 92       	push	r14
    fb36:	ff 92       	push	r15
    fb38:	cf 93       	push	r28
    fb3a:	df 93       	push	r29
    fb3c:	ec 01       	movw	r28, r24
C:\Program Files (x86)\Arduino\libraries\TonePlayer/TonePlayer.cpp:64
  // it takes two toggles for one "cycle"
  unsigned long ocr = F_CPU / Hz / 2;
    fb3e:	9b 01       	movw	r18, r22
    fb40:	50 e0       	ldi	r21, 0x00	; 0
    fb42:	40 e0       	ldi	r20, 0x00	; 0
    fb44:	60 e0       	ldi	r22, 0x00	; 0
    fb46:	72 e1       	ldi	r23, 0x12	; 18
    fb48:	8a e7       	ldi	r24, 0x7A	; 122
    fb4a:	90 e0       	ldi	r25, 0x00	; 0
    fb4c:	0e 94 0c 92 	call	0x12418	; 0x12418 <__divmodsi4>
C:\Program Files (x86)\Arduino\libraries\TonePlayer/TonePlayer.cpp:68
  byte prescaler = _BV (CS10);  // start with prescaler of 1  (bits are the same for all timers)
  
  // too large? prescale it
  if (ocr > 0xFFFF)
    fb50:	21 15       	cp	r18, r1
    fb52:	31 05       	cpc	r19, r1
    fb54:	81 e0       	ldi	r24, 0x01	; 1
    fb56:	48 07       	cpc	r20, r24
    fb58:	51 05       	cpc	r21, r1
    fb5a:	6c f1       	brlt	.+90     	; 0xfbb6 <TonePlayer::tone(unsigned int)+0x86>
C:\Program Files (x86)\Arduino\libraries\TonePlayer/TonePlayer.cpp:71
    {
    prescaler |= _BV (CS11);    // now prescaler of 64
    ocr /= 64;
    fb5c:	66 e0       	ldi	r22, 0x06	; 6
    fb5e:	56 95       	lsr	r21
    fb60:	47 95       	ror	r20
    fb62:	37 95       	ror	r19
    fb64:	27 95       	ror	r18
    fb66:	6a 95       	dec	r22
    fb68:	d1 f7       	brne	.-12     	; 0xfb5e <TonePlayer::tone(unsigned int)+0x2e>
C:\Program Files (x86)\Arduino\libraries\TonePlayer/TonePlayer.cpp:70
  byte prescaler = _BV (CS10);  // start with prescaler of 1  (bits are the same for all timers)
  
  // too large? prescale it
  if (ocr > 0xFFFF)
    {
    prescaler |= _BV (CS11);    // now prescaler of 64
    fb6a:	83 e0       	ldi	r24, 0x03	; 3
C:\Program Files (x86)\Arduino\libraries\TonePlayer/TonePlayer.cpp:75
    ocr /= 64;
    }
  
  // stop timer
  *timerRegA_ = 0;
    fb6c:	e8 81       	ld	r30, Y
    fb6e:	f9 81       	ldd	r31, Y+1	; 0x01
    fb70:	10 82       	st	Z, r1
C:\Program Files (x86)\Arduino\libraries\TonePlayer/TonePlayer.cpp:76
  *timerRegB_ = 0;
    fb72:	ea 81       	ldd	r30, Y+2	; 0x02
    fb74:	fb 81       	ldd	r31, Y+3	; 0x03
    fb76:	10 82       	st	Z, r1
C:\Program Files (x86)\Arduino\libraries\TonePlayer/TonePlayer.cpp:79
  
  // reset counter
  *timerTCNTH_ = 0;
    fb78:	e8 85       	ldd	r30, Y+8	; 0x08
    fb7a:	f9 85       	ldd	r31, Y+9	; 0x09
    fb7c:	10 82       	st	Z, r1
C:\Program Files (x86)\Arduino\libraries\TonePlayer/TonePlayer.cpp:80
  *timerTCNTL_ = 0;
    fb7e:	ea 85       	ldd	r30, Y+10	; 0x0a
    fb80:	fb 85       	ldd	r31, Y+11	; 0x0b
    fb82:	10 82       	st	Z, r1
C:\Program Files (x86)\Arduino\libraries\TonePlayer/TonePlayer.cpp:83
  
  // what to count up to
  *timerOCRH_ = highByte (ocr);
    fb84:	ec 81       	ldd	r30, Y+4	; 0x04
    fb86:	fd 81       	ldd	r31, Y+5	; 0x05
    fb88:	c3 2e       	mov	r12, r19
    fb8a:	d4 2e       	mov	r13, r20
    fb8c:	e5 2e       	mov	r14, r21
    fb8e:	ff 24       	eor	r15, r15
    fb90:	c0 82       	st	Z, r12
C:\Program Files (x86)\Arduino\libraries\TonePlayer/TonePlayer.cpp:84
  *timerOCRL_ = lowByte (ocr);
    fb92:	ee 81       	ldd	r30, Y+6	; 0x06
    fb94:	ff 81       	ldd	r31, Y+7	; 0x07
    fb96:	20 83       	st	Z, r18
C:\Program Files (x86)\Arduino\libraries\TonePlayer/TonePlayer.cpp:86
  
  *timerRegA_ = _BV (COM1A0);             // toggle output pin
    fb98:	e8 81       	ld	r30, Y
    fb9a:	f9 81       	ldd	r31, Y+1	; 0x01
    fb9c:	90 e4       	ldi	r25, 0x40	; 64
    fb9e:	90 83       	st	Z, r25
C:\Program Files (x86)\Arduino\libraries\TonePlayer/TonePlayer.cpp:87
  *timerRegB_ = _BV (WGM12) | prescaler;  // CTC
    fba0:	ea 81       	ldd	r30, Y+2	; 0x02
    fba2:	fb 81       	ldd	r31, Y+3	; 0x03
    fba4:	88 60       	ori	r24, 0x08	; 8
    fba6:	80 83       	st	Z, r24
C:\Program Files (x86)\Arduino\libraries\TonePlayer/TonePlayer.cpp:88
  }  // end of TonePlayer::tone
    fba8:	df 91       	pop	r29
    fbaa:	cf 91       	pop	r28
    fbac:	ff 90       	pop	r15
    fbae:	ef 90       	pop	r14
    fbb0:	df 90       	pop	r13
    fbb2:	cf 90       	pop	r12
    fbb4:	08 95       	ret
C:\Program Files (x86)\Arduino\libraries\TonePlayer/TonePlayer.cpp:65

void TonePlayer::tone (const unsigned int Hz)
{
  // it takes two toggles for one "cycle"
  unsigned long ocr = F_CPU / Hz / 2;
  byte prescaler = _BV (CS10);  // start with prescaler of 1  (bits are the same for all timers)
    fbb6:	81 e0       	ldi	r24, 0x01	; 1
    fbb8:	d9 cf       	rjmp	.-78     	; 0xfb6c <TonePlayer::tone(unsigned int)+0x3c>

0000fbba <TonePlayer::noTone()>:
_ZN10TonePlayer6noToneEv():
C:\Program Files (x86)\Arduino\libraries\TonePlayer/TonePlayer.cpp:93
  }  // end of TonePlayer::tone

void TonePlayer::noTone ()
  {
  // stop timer
  *timerRegA_ = 0;
    fbba:	dc 01       	movw	r26, r24
    fbbc:	ed 91       	ld	r30, X+
    fbbe:	fc 91       	ld	r31, X
    fbc0:	11 97       	sbiw	r26, 0x01	; 1
    fbc2:	10 82       	st	Z, r1
C:\Program Files (x86)\Arduino\libraries\TonePlayer/TonePlayer.cpp:94
  *timerRegB_ = 0;  
    fbc4:	12 96       	adiw	r26, 0x02	; 2
    fbc6:	ed 91       	ld	r30, X+
    fbc8:	fc 91       	ld	r31, X
    fbca:	10 82       	st	Z, r1
C:\Program Files (x86)\Arduino\libraries\TonePlayer/TonePlayer.cpp:95
  } // end of TonePlayer::noTone
    fbcc:	08 95       	ret

0000fbce <DHT::DHT(unsigned char, unsigned char, unsigned char)>:
_ZN3DHTC2Ehhh():
C:\Program Files (x86)\Arduino\libraries\DHT_sensor_library/DHT.cpp:216
    if ((percentHumidity < 13) && (temperature >= 80.0) &&
        (temperature <= 112.0))
      hi -= ((13.0 - percentHumidity) * 0.25) *
            sqrt((17.0 - abs(temperature - 95.0)) * 0.05882);

    else if ((percentHumidity > 85.0) && (temperature >= 80.0) &&
    fbce:	dc 01       	movw	r26, r24
    fbd0:	15 96       	adiw	r26, 0x05	; 5
    fbd2:	6c 93       	st	X, r22
    fbd4:	15 97       	sbiw	r26, 0x05	; 5
    fbd6:	16 96       	adiw	r26, 0x06	; 6
    fbd8:	4c 93       	st	X, r20
    fbda:	16 97       	sbiw	r26, 0x06	; 6
    fbdc:	70 e0       	ldi	r23, 0x00	; 0
    fbde:	fb 01       	movw	r30, r22
    fbe0:	e7 54       	subi	r30, 0x47	; 71
    fbe2:	ff 4d       	sbci	r31, 0xDF	; 223
    fbe4:	e4 91       	lpm	r30, Z
    fbe6:	17 96       	adiw	r26, 0x07	; 7
    fbe8:	ec 93       	st	X, r30
    fbea:	17 97       	sbiw	r26, 0x07	; 7
    fbec:	61 5f       	subi	r22, 0xF1	; 241
    fbee:	7e 4d       	sbci	r23, 0xDE	; 222
    fbf0:	fb 01       	movw	r30, r22
    fbf2:	64 91       	lpm	r22, Z
    fbf4:	18 96       	adiw	r26, 0x08	; 8
    fbf6:	6c 93       	st	X, r22
    fbf8:	18 97       	sbiw	r26, 0x08	; 8
    fbfa:	40 e8       	ldi	r20, 0x80	; 128
    fbfc:	5e e3       	ldi	r21, 0x3E	; 62
    fbfe:	60 e0       	ldi	r22, 0x00	; 0
    fc00:	70 e0       	ldi	r23, 0x00	; 0
    fc02:	1d 96       	adiw	r26, 0x0d	; 13
    fc04:	4d 93       	st	X+, r20
    fc06:	5d 93       	st	X+, r21
    fc08:	6d 93       	st	X+, r22
    fc0a:	7c 93       	st	X, r23
    fc0c:	50 97       	sbiw	r26, 0x10	; 16
    fc0e:	08 95       	ret

0000fc10 <DHT::begin(unsigned char)>:
_ZN3DHT5beginEh():
    fc10:	1f 93       	push	r17
    fc12:	cf 93       	push	r28
    fc14:	df 93       	push	r29
    fc16:	ec 01       	movw	r28, r24
    fc18:	16 2f       	mov	r17, r22
    fc1a:	62 e0       	ldi	r22, 0x02	; 2
    fc1c:	8d 81       	ldd	r24, Y+5	; 0x05
    fc1e:	0e 94 86 87 	call	0x10f0c	; 0x10f0c <pinMode>
    fc22:	0e 94 67 85 	call	0x10ace	; 0x10ace <millis>
    fc26:	60 5d       	subi	r22, 0xD0	; 208
    fc28:	77 40       	sbci	r23, 0x07	; 7
    fc2a:	81 09       	sbc	r24, r1
    fc2c:	91 09       	sbc	r25, r1
    fc2e:	69 87       	std	Y+9, r22	; 0x09
    fc30:	7a 87       	std	Y+10, r23	; 0x0a
    fc32:	8b 87       	std	Y+11, r24	; 0x0b
    fc34:	9c 87       	std	Y+12, r25	; 0x0c
    fc36:	1a 8b       	std	Y+18, r17	; 0x12
    fc38:	df 91       	pop	r29
    fc3a:	cf 91       	pop	r28
    fc3c:	1f 91       	pop	r17
    fc3e:	08 95       	ret

0000fc40 <DHT::expectPulse(bool)>:
_ZN3DHT11expectPulseEb():
C:\Program Files (x86)\Arduino\libraries\DHT_sensor_library/DHT.cpp:362
// used to compare the relative time of two pulses).  If more than a millisecond
// ellapses without the level changing then the call fails with a 0 response.
// This is adapted from Arduino's pulseInLong function (which is only available
// in the very latest IDE versions):
//   https://github.com/arduino/Arduino/blob/master/hardware/arduino/avr/cores/arduino/wiring_pulse.c
uint32_t DHT::expectPulse(bool level) {
    fc40:	cf 92       	push	r12
    fc42:	df 92       	push	r13
    fc44:	ef 92       	push	r14
    fc46:	ff 92       	push	r15
    fc48:	cf 93       	push	r28
    fc4a:	df 93       	push	r29
    fc4c:	dc 01       	movw	r26, r24
    fc4e:	17 96       	adiw	r26, 0x07	; 7
    fc50:	cc 91       	ld	r28, X
    fc52:	17 97       	sbiw	r26, 0x07	; 7
C:\Program Files (x86)\Arduino\libraries\DHT_sensor_library/DHT.cpp:371
  uint16_t count = 0; // To work fast enough on slower AVR boards
#endif
// On AVR platforms use direct GPIO port access as it's much faster and better
// for catching pulses that are 10's of microseconds in length:
#ifdef __AVR
  uint8_t portState = level ? _bit : 0;
    fc54:	d0 e0       	ldi	r29, 0x00	; 0
    fc56:	61 11       	cpse	r22, r1
    fc58:	dc 2f       	mov	r29, r28
C:\Program Files (x86)\Arduino\libraries\DHT_sensor_library/DHT.cpp:372 (discriminator 4)
  while ((*portInputRegister(_port) & _bit) == portState) {
    fc5a:	18 96       	adiw	r26, 0x08	; 8
    fc5c:	2c 91       	ld	r18, X
    fc5e:	18 97       	sbiw	r26, 0x08	; 8
    fc60:	30 e0       	ldi	r19, 0x00	; 0
    fc62:	22 0f       	add	r18, r18
    fc64:	33 1f       	adc	r19, r19
    fc66:	2b 59       	subi	r18, 0x9B	; 155
    fc68:	3e 4d       	sbci	r19, 0xDE	; 222
C:\Program Files (x86)\Arduino\libraries\DHT_sensor_library/DHT.cpp:366 (discriminator 4)
//   https://github.com/arduino/Arduino/blob/master/hardware/arduino/avr/cores/arduino/wiring_pulse.c
uint32_t DHT::expectPulse(bool level) {
#if (F_CPU > 16000000L)
  uint32_t count = 0;
#else
  uint16_t count = 0; // To work fast enough on slower AVR boards
    fc6a:	50 e0       	ldi	r21, 0x00	; 0
    fc6c:	40 e0       	ldi	r20, 0x00	; 0
C:\Program Files (x86)\Arduino\libraries\DHT_sensor_library/DHT.cpp:372
#endif
// On AVR platforms use direct GPIO port access as it's much faster and better
// for catching pulses that are 10's of microseconds in length:
#ifdef __AVR
  uint8_t portState = level ? _bit : 0;
  while ((*portInputRegister(_port) & _bit) == portState) {
    fc6e:	f9 01       	movw	r30, r18
    fc70:	85 91       	lpm	r24, Z+
    fc72:	94 91       	lpm	r25, Z
    fc74:	fc 01       	movw	r30, r24
    fc76:	f0 80       	ld	r15, Z
    fc78:	ba 01       	movw	r22, r20
    fc7a:	90 e0       	ldi	r25, 0x00	; 0
    fc7c:	80 e0       	ldi	r24, 0x00	; 0
    fc7e:	ef 2d       	mov	r30, r15
    fc80:	ec 23       	and	r30, r28
    fc82:	ed 13       	cpse	r30, r29
    fc84:	10 c0       	rjmp	.+32     	; 0xfca6 <DHT::expectPulse(bool)+0x66>
C:\Program Files (x86)\Arduino\libraries\DHT_sensor_library/DHT.cpp:373
    if (count++ >= _maxcycles) {
    fc86:	4f 5f       	subi	r20, 0xFF	; 255
    fc88:	5f 4f       	sbci	r21, 0xFF	; 255
    fc8a:	1d 96       	adiw	r26, 0x0d	; 13
    fc8c:	cd 90       	ld	r12, X+
    fc8e:	dd 90       	ld	r13, X+
    fc90:	ed 90       	ld	r14, X+
    fc92:	fc 90       	ld	r15, X
    fc94:	50 97       	sbiw	r26, 0x10	; 16
    fc96:	6c 15       	cp	r22, r12
    fc98:	7d 05       	cpc	r23, r13
    fc9a:	8e 05       	cpc	r24, r14
    fc9c:	9f 05       	cpc	r25, r15
    fc9e:	38 f3       	brcs	.-50     	; 0xfc6e <DHT::expectPulse(bool)+0x2e>
C:\Program Files (x86)\Arduino\libraries\DHT_sensor_library/DHT.cpp:374
      return TIMEOUT; // Exceeded timeout, fail.
    fca0:	6f ef       	ldi	r22, 0xFF	; 255
    fca2:	7f ef       	ldi	r23, 0xFF	; 255
    fca4:	cb 01       	movw	r24, r22
C:\Program Files (x86)\Arduino\libraries\DHT_sensor_library/DHT.cpp:388
    }
  }
#endif

  return count;
}
    fca6:	df 91       	pop	r29
    fca8:	cf 91       	pop	r28
    fcaa:	ff 90       	pop	r15
    fcac:	ef 90       	pop	r14
    fcae:	df 90       	pop	r13
    fcb0:	cf 90       	pop	r12
    fcb2:	08 95       	ret

0000fcb4 <DHT::read(bool)>:
_ZN3DHT4readEb():
C:\Program Files (x86)\Arduino\libraries\DHT_sensor_library/DHT.cpp:231
 *seconds.
 *  @param  force
 *          true if using force mode
 *	@return float value
 */
bool DHT::read(bool force) {
    fcb4:	8f 92       	push	r8
    fcb6:	9f 92       	push	r9
    fcb8:	af 92       	push	r10
    fcba:	bf 92       	push	r11
    fcbc:	cf 92       	push	r12
    fcbe:	df 92       	push	r13
    fcc0:	ef 92       	push	r14
    fcc2:	ff 92       	push	r15
    fcc4:	0f 93       	push	r16
    fcc6:	1f 93       	push	r17
    fcc8:	cf 93       	push	r28
    fcca:	df 93       	push	r29
    fccc:	cd b7       	in	r28, 0x3d	; 61
    fcce:	de b7       	in	r29, 0x3e	; 62
    fcd0:	c0 54       	subi	r28, 0x40	; 64
    fcd2:	d1 40       	sbci	r29, 0x01	; 1
    fcd4:	0f b6       	in	r0, 0x3f	; 63
    fcd6:	f8 94       	cli
    fcd8:	de bf       	out	0x3e, r29	; 62
    fcda:	0f be       	out	0x3f, r0	; 63
    fcdc:	cd bf       	out	0x3d, r28	; 61
    fcde:	8c 01       	movw	r16, r24
    fce0:	f6 2e       	mov	r15, r22
C:\Program Files (x86)\Arduino\libraries\DHT_sensor_library/DHT.cpp:234
  // Check if sensor was read less than two seconds ago and return early
  // to use last reading.
  uint32_t currenttime = millis();
    fce2:	0e 94 67 85 	call	0x10ace	; 0x10ace <millis>
C:\Program Files (x86)\Arduino\libraries\DHT_sensor_library/DHT.cpp:235
  if (!force && ((currenttime - _lastreadtime) < MIN_INTERVAL)) {
    fce6:	f1 10       	cpse	r15, r1
    fce8:	29 c0       	rjmp	.+82     	; 0xfd3c <DHT::read(bool)+0x88>
C:\Program Files (x86)\Arduino\libraries\DHT_sensor_library/DHT.cpp:235 (discriminator 1)
    fcea:	f8 01       	movw	r30, r16
    fcec:	c1 84       	ldd	r12, Z+9	; 0x09
    fcee:	d2 84       	ldd	r13, Z+10	; 0x0a
    fcf0:	e3 84       	ldd	r14, Z+11	; 0x0b
    fcf2:	f4 84       	ldd	r15, Z+12	; 0x0c
    fcf4:	9b 01       	movw	r18, r22
    fcf6:	ac 01       	movw	r20, r24
    fcf8:	2c 19       	sub	r18, r12
    fcfa:	3d 09       	sbc	r19, r13
    fcfc:	4e 09       	sbc	r20, r14
    fcfe:	5f 09       	sbc	r21, r15
    fd00:	69 01       	movw	r12, r18
    fd02:	7a 01       	movw	r14, r20
    fd04:	30 ed       	ldi	r19, 0xD0	; 208
    fd06:	c3 16       	cp	r12, r19
    fd08:	37 e0       	ldi	r19, 0x07	; 7
    fd0a:	d3 06       	cpc	r13, r19
    fd0c:	e1 04       	cpc	r14, r1
    fd0e:	f1 04       	cpc	r15, r1
    fd10:	a8 f4       	brcc	.+42     	; 0xfd3c <DHT::read(bool)+0x88>
C:\Program Files (x86)\Arduino\libraries\DHT_sensor_library/DHT.cpp:236
    return _lastresult; // return last correct measurement
    fd12:	81 89       	ldd	r24, Z+17	; 0x11
C:\Program Files (x86)\Arduino\libraries\DHT_sensor_library/DHT.cpp:353
  } else {
    DEBUG_PRINTLN(F("DHT checksum failure!"));
    _lastresult = false;
    return _lastresult;
  }
}
    fd14:	c0 5c       	subi	r28, 0xC0	; 192
    fd16:	de 4f       	sbci	r29, 0xFE	; 254
    fd18:	0f b6       	in	r0, 0x3f	; 63
    fd1a:	f8 94       	cli
    fd1c:	de bf       	out	0x3e, r29	; 62
    fd1e:	0f be       	out	0x3f, r0	; 63
    fd20:	cd bf       	out	0x3d, r28	; 61
    fd22:	df 91       	pop	r29
    fd24:	cf 91       	pop	r28
    fd26:	1f 91       	pop	r17
    fd28:	0f 91       	pop	r16
    fd2a:	ff 90       	pop	r15
    fd2c:	ef 90       	pop	r14
    fd2e:	df 90       	pop	r13
    fd30:	cf 90       	pop	r12
    fd32:	bf 90       	pop	r11
    fd34:	af 90       	pop	r10
    fd36:	9f 90       	pop	r9
    fd38:	8f 90       	pop	r8
    fd3a:	08 95       	ret
C:\Program Files (x86)\Arduino\libraries\DHT_sensor_library/DHT.cpp:238
  // to use last reading.
  uint32_t currenttime = millis();
  if (!force && ((currenttime - _lastreadtime) < MIN_INTERVAL)) {
    return _lastresult; // return last correct measurement
  }
  _lastreadtime = currenttime;
    fd3c:	f8 01       	movw	r30, r16
    fd3e:	61 87       	std	Z+9, r22	; 0x09
    fd40:	72 87       	std	Z+10, r23	; 0x0a
    fd42:	83 87       	std	Z+11, r24	; 0x0b
    fd44:	94 87       	std	Z+12, r25	; 0x0c
C:\Program Files (x86)\Arduino\libraries\DHT_sensor_library/DHT.cpp:241

  // Reset 40 bits of received data to zero.
  data[0] = data[1] = data[2] = data[3] = data[4] = 0;
    fd46:	14 82       	std	Z+4, r1	; 0x04
    fd48:	13 82       	std	Z+3, r1	; 0x03
    fd4a:	12 82       	std	Z+2, r1	; 0x02
    fd4c:	11 82       	std	Z+1, r1	; 0x01
    fd4e:	10 82       	st	Z, r1
C:\Program Files (x86)\Arduino\libraries\DHT_sensor_library/DHT.cpp:252
  // Send start signal.  See DHT datasheet for full signal diagram:
  //   http://www.adafruit.com/datasheets/Digital%20humidity%20and%20temperature%20sensor%20AM2302.pdf

  // Go into high impedence state to let pull-up raise data line level and
  // start the reading process.
  pinMode(_pin, INPUT_PULLUP);
    fd50:	62 e0       	ldi	r22, 0x02	; 2
    fd52:	85 81       	ldd	r24, Z+5	; 0x05
    fd54:	0e 94 86 87 	call	0x10f0c	; 0x10f0c <pinMode>
C:\Program Files (x86)\Arduino\libraries\DHT_sensor_library/DHT.cpp:253
  delay(1);
    fd58:	61 e0       	ldi	r22, 0x01	; 1
    fd5a:	70 e0       	ldi	r23, 0x00	; 0
    fd5c:	80 e0       	ldi	r24, 0x00	; 0
    fd5e:	90 e0       	ldi	r25, 0x00	; 0
    fd60:	0e 94 98 85 	call	0x10b30	; 0x10b30 <delay>
C:\Program Files (x86)\Arduino\libraries\DHT_sensor_library/DHT.cpp:256

  // First set data line low for a period according to sensor type
  pinMode(_pin, OUTPUT);
    fd64:	61 e0       	ldi	r22, 0x01	; 1
    fd66:	f8 01       	movw	r30, r16
    fd68:	85 81       	ldd	r24, Z+5	; 0x05
    fd6a:	0e 94 86 87 	call	0x10f0c	; 0x10f0c <pinMode>
C:\Program Files (x86)\Arduino\libraries\DHT_sensor_library/DHT.cpp:257
  digitalWrite(_pin, LOW);
    fd6e:	60 e0       	ldi	r22, 0x00	; 0
    fd70:	f8 01       	movw	r30, r16
    fd72:	85 81       	ldd	r24, Z+5	; 0x05
    fd74:	0e 94 c2 87 	call	0x10f84	; 0x10f84 <digitalWrite>
C:\Program Files (x86)\Arduino\libraries\DHT_sensor_library/DHT.cpp:258
  switch (_type) {
    fd78:	f8 01       	movw	r30, r16
    fd7a:	86 81       	ldd	r24, Z+6	; 0x06
    fd7c:	85 51       	subi	r24, 0x15	; 21
    fd7e:	82 30       	cpi	r24, 0x02	; 2
    fd80:	e8 f4       	brcc	.+58     	; 0xfdbc <DHT::read(bool)+0x108>
C:\Program Files (x86)\Arduino\libraries\DHT_sensor_library/DHT.cpp:261
  case DHT22:
  case DHT21:
    delayMicroseconds(1100); // data sheet says "at least 1ms"
    fd82:	8c e4       	ldi	r24, 0x4C	; 76
    fd84:	94 e0       	ldi	r25, 0x04	; 4
    fd86:	0e 94 d1 85 	call	0x10ba2	; 0x10ba2 <delayMicroseconds>
C:\Program Files (x86)\Arduino\libraries\DHT_sensor_library/DHT.cpp:272
  }

  uint32_t cycles[80];
  {
    // End the start signal by setting data line high for 40 microseconds.
    pinMode(_pin, INPUT_PULLUP);
    fd8a:	62 e0       	ldi	r22, 0x02	; 2
    fd8c:	f8 01       	movw	r30, r16
    fd8e:	85 81       	ldd	r24, Z+5	; 0x05
    fd90:	0e 94 86 87 	call	0x10f0c	; 0x10f0c <pinMode>
C:\Program Files (x86)\Arduino\libraries\DHT_sensor_library/DHT.cpp:275

    // Delay a moment to let sensor pull data line low.
    delayMicroseconds(pullTime);
    fd94:	f8 01       	movw	r30, r16
    fd96:	82 89       	ldd	r24, Z+18	; 0x12
    fd98:	90 e0       	ldi	r25, 0x00	; 0
    fd9a:	0e 94 d1 85 	call	0x10ba2	; 0x10ba2 <delayMicroseconds>
_ZN13InterruptLockC4Ev():
C:\Program Files (x86)\Arduino\libraries\DHT_sensor_library/DHT.h:99
 */
class InterruptLock {
public:
  InterruptLock() {
#if !defined(ARDUINO_ARCH_NRF52)
    noInterrupts();
    fd9e:	f8 94       	cli
_ZN3DHT4readEb():
C:\Program Files (x86)\Arduino\libraries\DHT_sensor_library/DHT.cpp:285
    // are timing critical and we don't want any interruptions.
    InterruptLock lock;

    // First expect a low signal for ~80 microseconds followed by a high signal
    // for ~80 microseconds again.
    if (expectPulse(LOW) == TIMEOUT) {
    fda0:	60 e0       	ldi	r22, 0x00	; 0
    fda2:	c8 01       	movw	r24, r16
    fda4:	0e 94 20 7e 	call	0xfc40	; 0xfc40 <DHT::expectPulse(bool)>
    fda8:	6f 3f       	cpi	r22, 0xFF	; 255
    fdaa:	7f 4f       	sbci	r23, 0xFF	; 255
    fdac:	8f 4f       	sbci	r24, 0xFF	; 255
    fdae:	9f 4f       	sbci	r25, 0xFF	; 255
    fdb0:	61 f4       	brne	.+24     	; 0xfdca <DHT::read(bool)+0x116>
C:\Program Files (x86)\Arduino\libraries\DHT_sensor_library/DHT.cpp:287
      DEBUG_PRINTLN(F("DHT timeout waiting for start signal low pulse."));
      _lastresult = false;
    fdb2:	f8 01       	movw	r30, r16
    fdb4:	11 8a       	std	Z+17, r1	; 0x11
_ZN13InterruptLockD4Ev():
C:\Program Files (x86)\Arduino\libraries\DHT_sensor_library/DHT.h:104
#endif
  }
  ~InterruptLock() {
#if !defined(ARDUINO_ARCH_NRF52)
    interrupts();
    fdb6:	78 94       	sei
_ZN3DHT4readEb():
C:\Program Files (x86)\Arduino\libraries\DHT_sensor_library/DHT.cpp:318
    uint32_t lowCycles = cycles[2 * i];
    uint32_t highCycles = cycles[2 * i + 1];
    if ((lowCycles == TIMEOUT) || (highCycles == TIMEOUT)) {
      DEBUG_PRINTLN(F("DHT timeout waiting for pulse."));
      _lastresult = false;
      return _lastresult;
    fdb8:	80 e0       	ldi	r24, 0x00	; 0
    fdba:	ac cf       	rjmp	.-168    	; 0xfd14 <DHT::read(bool)+0x60>
C:\Program Files (x86)\Arduino\libraries\DHT_sensor_library/DHT.cpp:265
  case DHT21:
    delayMicroseconds(1100); // data sheet says "at least 1ms"
    break;
  case DHT11:
  default:
    delay(20); // data sheet says at least 18ms, 20ms just to be safe
    fdbc:	64 e1       	ldi	r22, 0x14	; 20
    fdbe:	70 e0       	ldi	r23, 0x00	; 0
    fdc0:	80 e0       	ldi	r24, 0x00	; 0
    fdc2:	90 e0       	ldi	r25, 0x00	; 0
    fdc4:	0e 94 98 85 	call	0x10b30	; 0x10b30 <delay>
C:\Program Files (x86)\Arduino\libraries\DHT_sensor_library/DHT.cpp:266
    break;
    fdc8:	e0 cf       	rjmp	.-64     	; 0xfd8a <DHT::read(bool)+0xd6>
C:\Program Files (x86)\Arduino\libraries\DHT_sensor_library/DHT.cpp:290
    if (expectPulse(LOW) == TIMEOUT) {
      DEBUG_PRINTLN(F("DHT timeout waiting for start signal low pulse."));
      _lastresult = false;
      return _lastresult;
    }
    if (expectPulse(HIGH) == TIMEOUT) {
    fdca:	61 e0       	ldi	r22, 0x01	; 1
    fdcc:	c8 01       	movw	r24, r16
    fdce:	0e 94 20 7e 	call	0xfc40	; 0xfc40 <DHT::expectPulse(bool)>
    fdd2:	6f 3f       	cpi	r22, 0xFF	; 255
    fdd4:	7f 4f       	sbci	r23, 0xFF	; 255
    fdd6:	8f 4f       	sbci	r24, 0xFF	; 255
    fdd8:	9f 4f       	sbci	r25, 0xFF	; 255
    fdda:	59 f3       	breq	.-42     	; 0xfdb2 <DHT::read(bool)+0xfe>
    fddc:	9e 01       	movw	r18, r28
    fdde:	2f 5f       	subi	r18, 0xFF	; 255
    fde0:	3f 4f       	sbci	r19, 0xFF	; 255
    fde2:	79 01       	movw	r14, r18
    fde4:	5e 01       	movw	r10, r28
    fde6:	3f eb       	ldi	r19, 0xBF	; 191
    fde8:	a3 1a       	sub	r10, r19
    fdea:	3e ef       	ldi	r19, 0xFE	; 254
    fdec:	b3 0a       	sbc	r11, r19
    fdee:	67 01       	movw	r12, r14
C:\Program Files (x86)\Arduino\libraries\DHT_sensor_library/DHT.cpp:305 (discriminator 2)
    // and use that to compare to the cycle count of the high pulse to determine
    // if the bit is a 0 (high state cycle count < low state cycle count), or a
    // 1 (high state cycle count > low state cycle count). Note that for speed
    // all the pulses are read into a array and then examined in a later step.
    for (int i = 0; i < 80; i += 2) {
      cycles[i] = expectPulse(LOW);
    fdf0:	60 e0       	ldi	r22, 0x00	; 0
    fdf2:	c8 01       	movw	r24, r16
    fdf4:	0e 94 20 7e 	call	0xfc40	; 0xfc40 <DHT::expectPulse(bool)>
    fdf8:	f6 01       	movw	r30, r12
    fdfa:	60 83       	st	Z, r22
    fdfc:	71 83       	std	Z+1, r23	; 0x01
    fdfe:	82 83       	std	Z+2, r24	; 0x02
    fe00:	93 83       	std	Z+3, r25	; 0x03
C:\Program Files (x86)\Arduino\libraries\DHT_sensor_library/DHT.cpp:306 (discriminator 2)
      cycles[i + 1] = expectPulse(HIGH);
    fe02:	61 e0       	ldi	r22, 0x01	; 1
    fe04:	c8 01       	movw	r24, r16
    fe06:	0e 94 20 7e 	call	0xfc40	; 0xfc40 <DHT::expectPulse(bool)>
    fe0a:	f6 01       	movw	r30, r12
    fe0c:	64 83       	std	Z+4, r22	; 0x04
    fe0e:	75 83       	std	Z+5, r23	; 0x05
    fe10:	86 83       	std	Z+6, r24	; 0x06
    fe12:	97 83       	std	Z+7, r25	; 0x07
    fe14:	f8 e0       	ldi	r31, 0x08	; 8
    fe16:	cf 0e       	add	r12, r31
    fe18:	d1 1c       	adc	r13, r1
C:\Program Files (x86)\Arduino\libraries\DHT_sensor_library/DHT.cpp:304 (discriminator 2)
    // then it's a 1.  We measure the cycle count of the initial 50us low pulse
    // and use that to compare to the cycle count of the high pulse to determine
    // if the bit is a 0 (high state cycle count < low state cycle count), or a
    // 1 (high state cycle count > low state cycle count). Note that for speed
    // all the pulses are read into a array and then examined in a later step.
    for (int i = 0; i < 80; i += 2) {
    fe1a:	ca 14       	cp	r12, r10
    fe1c:	db 04       	cpc	r13, r11
    fe1e:	41 f7       	brne	.-48     	; 0xfdf0 <DHT::read(bool)+0x13c>
_ZN13InterruptLockD4Ev():
C:\Program Files (x86)\Arduino\libraries\DHT_sensor_library/DHT.h:104
    fe20:	78 94       	sei
_ZN3DHT4readEb():
C:\Program Files (x86)\Arduino\libraries\DHT_sensor_library/DHT.cpp:312
    }
  } // Timing critical code is now complete.

  // Inspect pulses and determine which ones are 0 (high state cycle count < low
  // state cycle count), or 1 (high state cycle count > low state cycle count).
  for (int i = 0; i < 40; ++i) {
    fe22:	30 e0       	ldi	r19, 0x00	; 0
    fe24:	20 e0       	ldi	r18, 0x00	; 0
C:\Program Files (x86)\Arduino\libraries\DHT_sensor_library/DHT.cpp:313
    uint32_t lowCycles = cycles[2 * i];
    fe26:	f7 01       	movw	r30, r14
    fe28:	80 80       	ld	r8, Z
    fe2a:	91 80       	ldd	r9, Z+1	; 0x01
    fe2c:	a2 80       	ldd	r10, Z+2	; 0x02
    fe2e:	b3 80       	ldd	r11, Z+3	; 0x03
C:\Program Files (x86)\Arduino\libraries\DHT_sensor_library/DHT.cpp:314
    uint32_t highCycles = cycles[2 * i + 1];
    fe30:	44 81       	ldd	r20, Z+4	; 0x04
    fe32:	55 81       	ldd	r21, Z+5	; 0x05
    fe34:	66 81       	ldd	r22, Z+6	; 0x06
    fe36:	77 81       	ldd	r23, Z+7	; 0x07
C:\Program Files (x86)\Arduino\libraries\DHT_sensor_library/DHT.cpp:315
    if ((lowCycles == TIMEOUT) || (highCycles == TIMEOUT)) {
    fe38:	ff ef       	ldi	r31, 0xFF	; 255
    fe3a:	8f 16       	cp	r8, r31
    fe3c:	9f 06       	cpc	r9, r31
    fe3e:	af 06       	cpc	r10, r31
    fe40:	bf 06       	cpc	r11, r31
    fe42:	31 f0       	breq	.+12     	; 0xfe50 <__DATA_REGION_LENGTH__+0x50>
C:\Program Files (x86)\Arduino\libraries\DHT_sensor_library/DHT.cpp:315 (discriminator 1)
    fe44:	4f 3f       	cpi	r20, 0xFF	; 255
    fe46:	8f ef       	ldi	r24, 0xFF	; 255
    fe48:	58 07       	cpc	r21, r24
    fe4a:	68 07       	cpc	r22, r24
    fe4c:	78 07       	cpc	r23, r24
    fe4e:	19 f4       	brne	.+6      	; 0xfe56 <__DATA_REGION_LENGTH__+0x56>
C:\Program Files (x86)\Arduino\libraries\DHT_sensor_library/DHT.cpp:317
      DEBUG_PRINTLN(F("DHT timeout waiting for pulse."));
      _lastresult = false;
    fe50:	f8 01       	movw	r30, r16
    fe52:	11 8a       	std	Z+17, r1	; 0x11
    fe54:	b1 cf       	rjmp	.-158    	; 0xfdb8 <DHT::read(bool)+0x104>
C:\Program Files (x86)\Arduino\libraries\DHT_sensor_library/DHT.cpp:320
      return _lastresult;
    }
    data[i / 8] <<= 1;
    fe56:	f9 01       	movw	r30, r18
    fe58:	83 e0       	ldi	r24, 0x03	; 3
    fe5a:	f5 95       	asr	r31
    fe5c:	e7 95       	ror	r30
    fe5e:	8a 95       	dec	r24
    fe60:	e1 f7       	brne	.-8      	; 0xfe5a <__DATA_REGION_LENGTH__+0x5a>
    fe62:	e0 0f       	add	r30, r16
    fe64:	f1 1f       	adc	r31, r17
    fe66:	80 81       	ld	r24, Z
    fe68:	88 0f       	add	r24, r24
C:\Program Files (x86)\Arduino\libraries\DHT_sensor_library/DHT.cpp:322
    // Now compare the low and high cycle times to see if the bit is a 0 or 1.
    if (highCycles > lowCycles) {
    fe6a:	84 16       	cp	r8, r20
    fe6c:	95 06       	cpc	r9, r21
    fe6e:	a6 06       	cpc	r10, r22
    fe70:	b7 06       	cpc	r11, r23
    fe72:	f0 f0       	brcs	.+60     	; 0xfeb0 <__DATA_REGION_LENGTH__+0xb0>
C:\Program Files (x86)\Arduino\libraries\DHT_sensor_library/DHT.cpp:324
      // High cycles are greater than 50us low cycle count, must be a 1.
      data[i / 8] |= 1;
    fe74:	80 83       	st	Z, r24
C:\Program Files (x86)\Arduino\libraries\DHT_sensor_library/DHT.cpp:312
    }
  } // Timing critical code is now complete.

  // Inspect pulses and determine which ones are 0 (high state cycle count < low
  // state cycle count), or 1 (high state cycle count > low state cycle count).
  for (int i = 0; i < 40; ++i) {
    fe76:	2f 5f       	subi	r18, 0xFF	; 255
    fe78:	3f 4f       	sbci	r19, 0xFF	; 255
    fe7a:	f8 e0       	ldi	r31, 0x08	; 8
    fe7c:	ef 0e       	add	r14, r31
    fe7e:	f1 1c       	adc	r15, r1
    fe80:	28 32       	cpi	r18, 0x28	; 40
    fe82:	31 05       	cpc	r19, r1
    fe84:	81 f6       	brne	.-96     	; 0xfe26 <__DATA_REGION_LENGTH__+0x26>
C:\Program Files (x86)\Arduino\libraries\DHT_sensor_library/DHT.cpp:345
  DEBUG_PRINT(data[4], HEX);
  DEBUG_PRINT(F(" =? "));
  DEBUG_PRINTLN((data[0] + data[1] + data[2] + data[3]) & 0xFF, HEX);

  // Check we read 40 bits and that the checksum matches.
  if (data[4] == ((data[0] + data[1] + data[2] + data[3]) & 0xFF)) {
    fe86:	f8 01       	movw	r30, r16
    fe88:	44 81       	ldd	r20, Z+4	; 0x04
    fe8a:	20 81       	ld	r18, Z
    fe8c:	81 81       	ldd	r24, Z+1	; 0x01
    fe8e:	28 0f       	add	r18, r24
    fe90:	33 27       	eor	r19, r19
    fe92:	33 1f       	adc	r19, r19
    fe94:	82 81       	ldd	r24, Z+2	; 0x02
    fe96:	28 0f       	add	r18, r24
    fe98:	31 1d       	adc	r19, r1
    fe9a:	83 81       	ldd	r24, Z+3	; 0x03
    fe9c:	82 0f       	add	r24, r18
    fe9e:	93 2f       	mov	r25, r19
    fea0:	91 1d       	adc	r25, r1
    fea2:	99 27       	eor	r25, r25
    fea4:	48 17       	cp	r20, r24
    fea6:	19 06       	cpc	r1, r25
    fea8:	99 f6       	brne	.-90     	; 0xfe50 <__DATA_REGION_LENGTH__+0x50>
C:\Program Files (x86)\Arduino\libraries\DHT_sensor_library/DHT.cpp:346
    _lastresult = true;
    feaa:	81 e0       	ldi	r24, 0x01	; 1
    feac:	81 8b       	std	Z+17, r24	; 0x11
C:\Program Files (x86)\Arduino\libraries\DHT_sensor_library/DHT.cpp:347
    return _lastresult;
    feae:	32 cf       	rjmp	.-412    	; 0xfd14 <DHT::read(bool)+0x60>
C:\Program Files (x86)\Arduino\libraries\DHT_sensor_library/DHT.cpp:324
    }
    data[i / 8] <<= 1;
    // Now compare the low and high cycle times to see if the bit is a 0 or 1.
    if (highCycles > lowCycles) {
      // High cycles are greater than 50us low cycle count, must be a 1.
      data[i / 8] |= 1;
    feb0:	81 60       	ori	r24, 0x01	; 1
    feb2:	e0 cf       	rjmp	.-64     	; 0xfe74 <__DATA_REGION_LENGTH__+0x74>

0000feb4 <DHT::readTemperature(bool, bool)>:
_ZN3DHT15readTemperatureEbb():
C:\Program Files (x86)\Arduino\libraries\DHT_sensor_library/DHT.cpp:85
 *					- false = Celcius
 *  @param  force
 *          true if in force mode
 *	@return Temperature value in selected scale
 */
float DHT::readTemperature(bool S, bool force) {
    feb4:	cf 92       	push	r12
    feb6:	df 92       	push	r13
    feb8:	ef 92       	push	r14
    feba:	ff 92       	push	r15
    febc:	0f 93       	push	r16
    febe:	1f 93       	push	r17
    fec0:	cf 93       	push	r28
    fec2:	df 93       	push	r29
    fec4:	8c 01       	movw	r16, r24
    fec6:	c6 2f       	mov	r28, r22
C:\Program Files (x86)\Arduino\libraries\DHT_sensor_library/DHT.cpp:88
  float f = NAN;

  if (read(force)) {
    fec8:	64 2f       	mov	r22, r20
    feca:	0e 94 5a 7e 	call	0xfcb4	; 0xfcb4 <DHT::read(bool)>
    fece:	88 23       	and	r24, r24
    fed0:	41 f0       	breq	.+16     	; 0xfee2 <DHT::readTemperature(bool, bool)+0x2e>
C:\Program Files (x86)\Arduino\libraries\DHT_sensor_library/DHT.cpp:89
    switch (_type) {
    fed2:	f8 01       	movw	r30, r16
    fed4:	86 81       	ldd	r24, Z+6	; 0x06
    fed6:	8c 30       	cpi	r24, 0x0C	; 12
    fed8:	09 f4       	brne	.+2      	; 0xfedc <DHT::readTemperature(bool, bool)+0x28>
    feda:	5d c0       	rjmp	.+186    	; 0xff96 <DHT::readTemperature(bool, bool)+0xe2>
    fedc:	38 f4       	brcc	.+14     	; 0xfeec <DHT::readTemperature(bool, bool)+0x38>
    fede:	8b 30       	cpi	r24, 0x0B	; 11
    fee0:	e1 f0       	breq	.+56     	; 0xff1a <DHT::readTemperature(bool, bool)+0x66>
C:\Program Files (x86)\Arduino\libraries\DHT_sensor_library/DHT.cpp:86
 *  @param  force
 *          true if in force mode
 *	@return Temperature value in selected scale
 */
float DHT::readTemperature(bool S, bool force) {
  float f = NAN;
    fee2:	60 e0       	ldi	r22, 0x00	; 0
    fee4:	70 e0       	ldi	r23, 0x00	; 0
    fee6:	80 ec       	ldi	r24, 0xC0	; 192
    fee8:	9f e7       	ldi	r25, 0x7F	; 127
C:\Program Files (x86)\Arduino\libraries\DHT_sensor_library/DHT.cpp:123
        f = convertCtoF(f);
      }
      break;
    }
  }
  return f;
    feea:	4c c0       	rjmp	.+152    	; 0xff84 <DHT::readTemperature(bool, bool)+0xd0>
C:\Program Files (x86)\Arduino\libraries\DHT_sensor_library/DHT.cpp:89
 */
float DHT::readTemperature(bool S, bool force) {
  float f = NAN;

  if (read(force)) {
    switch (_type) {
    feec:	85 51       	subi	r24, 0x15	; 21
    feee:	82 30       	cpi	r24, 0x02	; 2
    fef0:	c0 f7       	brcc	.-16     	; 0xfee2 <DHT::readTemperature(bool, bool)+0x2e>
C:\Program Files (x86)\Arduino\libraries\DHT_sensor_library/DHT.cpp:112
        f = convertCtoF(f);
      }
      break;
    case DHT22:
    case DHT21:
      f = ((word)(data[2] & 0x7F)) << 8 | data[3];
    fef2:	d2 81       	ldd	r29, Z+2	; 0x02
    fef4:	6d 2f       	mov	r22, r29
    fef6:	70 e0       	ldi	r23, 0x00	; 0
    fef8:	76 2f       	mov	r23, r22
    fefa:	66 27       	eor	r22, r22
    fefc:	66 27       	eor	r22, r22
    fefe:	7f 77       	andi	r23, 0x7F	; 127
    ff00:	83 81       	ldd	r24, Z+3	; 0x03
    ff02:	68 2b       	or	r22, r24
    ff04:	90 e0       	ldi	r25, 0x00	; 0
    ff06:	80 e0       	ldi	r24, 0x00	; 0
    ff08:	0e 94 89 90 	call	0x12112	; 0x12112 <__floatunsisf>
C:\Program Files (x86)\Arduino\libraries\DHT_sensor_library/DHT.cpp:113
      f *= 0.1;
    ff0c:	2d ec       	ldi	r18, 0xCD	; 205
    ff0e:	3c ec       	ldi	r19, 0xCC	; 204
    ff10:	4c ec       	ldi	r20, 0xCC	; 204
    ff12:	5d e3       	ldi	r21, 0x3D	; 61
    ff14:	0e 94 40 91 	call	0x12280	; 0x12280 <__mulsf3>
    ff18:	59 c0       	rjmp	.+178    	; 0xffcc <DHT::readTemperature(bool, bool)+0x118>
C:\Program Files (x86)\Arduino\libraries\DHT_sensor_library/DHT.cpp:91
  float f = NAN;

  if (read(force)) {
    switch (_type) {
    case DHT11:
      f = data[2];
    ff1a:	62 81       	ldd	r22, Z+2	; 0x02
    ff1c:	70 e0       	ldi	r23, 0x00	; 0
    ff1e:	90 e0       	ldi	r25, 0x00	; 0
    ff20:	80 e0       	ldi	r24, 0x00	; 0
    ff22:	0e 94 89 90 	call	0x12112	; 0x12112 <__floatunsisf>
    ff26:	6b 01       	movw	r12, r22
    ff28:	7c 01       	movw	r14, r24
C:\Program Files (x86)\Arduino\libraries\DHT_sensor_library/DHT.cpp:92
      if (data[3] & 0x80) {
    ff2a:	f8 01       	movw	r30, r16
    ff2c:	d3 81       	ldd	r29, Z+3	; 0x03
    ff2e:	d7 ff       	sbrs	r29, 7
    ff30:	0a c0       	rjmp	.+20     	; 0xff46 <DHT::readTemperature(bool, bool)+0x92>
C:\Program Files (x86)\Arduino\libraries\DHT_sensor_library/DHT.cpp:93
        f = -1 - f;
    ff32:	ac 01       	movw	r20, r24
    ff34:	9b 01       	movw	r18, r22
    ff36:	60 e0       	ldi	r22, 0x00	; 0
    ff38:	70 e0       	ldi	r23, 0x00	; 0
    ff3a:	80 e8       	ldi	r24, 0x80	; 128
    ff3c:	9f eb       	ldi	r25, 0xBF	; 191
    ff3e:	0e 94 6f 8f 	call	0x11ede	; 0x11ede <__subsf3>
    ff42:	6b 01       	movw	r12, r22
    ff44:	7c 01       	movw	r14, r24
C:\Program Files (x86)\Arduino\libraries\DHT_sensor_library/DHT.cpp:95
      }
      f += (data[3] & 0x0f) * 0.1;
    ff46:	df 70       	andi	r29, 0x0F	; 15
    ff48:	6d 2f       	mov	r22, r29
    ff4a:	70 e0       	ldi	r23, 0x00	; 0
    ff4c:	90 e0       	ldi	r25, 0x00	; 0
    ff4e:	80 e0       	ldi	r24, 0x00	; 0
    ff50:	0e 94 8b 90 	call	0x12116	; 0x12116 <__floatsisf>
    ff54:	2d ec       	ldi	r18, 0xCD	; 205
    ff56:	3c ec       	ldi	r19, 0xCC	; 204
    ff58:	4c ec       	ldi	r20, 0xCC	; 204
    ff5a:	5d e3       	ldi	r21, 0x3D	; 61
    ff5c:	0e 94 40 91 	call	0x12280	; 0x12280 <__mulsf3>
    ff60:	a7 01       	movw	r20, r14
    ff62:	96 01       	movw	r18, r12
    ff64:	0e 94 70 8f 	call	0x11ee0	; 0x11ee0 <__addsf3>
C:\Program Files (x86)\Arduino\libraries\DHT_sensor_library/DHT.cpp:117
      f = ((word)(data[2] & 0x7F)) << 8 | data[3];
      f *= 0.1;
      if (data[2] & 0x80) {
        f *= -1;
      }
      if (S) {
    ff68:	cc 23       	and	r28, r28
    ff6a:	61 f0       	breq	.+24     	; 0xff84 <DHT::readTemperature(bool, bool)+0xd0>
_ZN3DHT11convertCtoFEf():
C:\Program Files (x86)\Arduino\libraries\DHT_sensor_library/DHT.cpp:132
 *  @brief  Converts Celcius to Fahrenheit
 *  @param  c
 *					value in Celcius
 *	@return float value in Fahrenheit
 */
float DHT::convertCtoF(float c) { return c * 1.8 + 32; }
    ff6c:	26 e6       	ldi	r18, 0x66	; 102
    ff6e:	36 e6       	ldi	r19, 0x66	; 102
    ff70:	46 ee       	ldi	r20, 0xE6	; 230
    ff72:	5f e3       	ldi	r21, 0x3F	; 63
    ff74:	0e 94 40 91 	call	0x12280	; 0x12280 <__mulsf3>
    ff78:	20 e0       	ldi	r18, 0x00	; 0
    ff7a:	30 e0       	ldi	r19, 0x00	; 0
    ff7c:	40 e0       	ldi	r20, 0x00	; 0
    ff7e:	52 e4       	ldi	r21, 0x42	; 66
    ff80:	0e 94 70 8f 	call	0x11ee0	; 0x11ee0 <__addsf3>
_ZN3DHT15readTemperatureEbb():
C:\Program Files (x86)\Arduino\libraries\DHT_sensor_library/DHT.cpp:124
      }
      break;
    }
  }
  return f;
}
    ff84:	df 91       	pop	r29
    ff86:	cf 91       	pop	r28
    ff88:	1f 91       	pop	r17
    ff8a:	0f 91       	pop	r16
    ff8c:	ff 90       	pop	r15
    ff8e:	ef 90       	pop	r14
    ff90:	df 90       	pop	r13
    ff92:	cf 90       	pop	r12
    ff94:	08 95       	ret
C:\Program Files (x86)\Arduino\libraries\DHT_sensor_library/DHT.cpp:101
      if (S) {
        f = convertCtoF(f);
      }
      break;
    case DHT12:
      f = data[2];
    ff96:	d2 81       	ldd	r29, Z+2	; 0x02
    ff98:	6d 2f       	mov	r22, r29
    ff9a:	70 e0       	ldi	r23, 0x00	; 0
    ff9c:	90 e0       	ldi	r25, 0x00	; 0
    ff9e:	80 e0       	ldi	r24, 0x00	; 0
    ffa0:	0e 94 89 90 	call	0x12112	; 0x12112 <__floatunsisf>
    ffa4:	6b 01       	movw	r12, r22
    ffa6:	7c 01       	movw	r14, r24
C:\Program Files (x86)\Arduino\libraries\DHT_sensor_library/DHT.cpp:102
      f += (data[3] & 0x0f) * 0.1;
    ffa8:	f8 01       	movw	r30, r16
    ffaa:	63 81       	ldd	r22, Z+3	; 0x03
    ffac:	6f 70       	andi	r22, 0x0F	; 15
    ffae:	70 e0       	ldi	r23, 0x00	; 0
    ffb0:	90 e0       	ldi	r25, 0x00	; 0
    ffb2:	80 e0       	ldi	r24, 0x00	; 0
    ffb4:	0e 94 8b 90 	call	0x12116	; 0x12116 <__floatsisf>
    ffb8:	2d ec       	ldi	r18, 0xCD	; 205
    ffba:	3c ec       	ldi	r19, 0xCC	; 204
    ffbc:	4c ec       	ldi	r20, 0xCC	; 204
    ffbe:	5d e3       	ldi	r21, 0x3D	; 61
    ffc0:	0e 94 40 91 	call	0x12280	; 0x12280 <__mulsf3>
    ffc4:	a7 01       	movw	r20, r14
    ffc6:	96 01       	movw	r18, r12
    ffc8:	0e 94 70 8f 	call	0x11ee0	; 0x11ee0 <__addsf3>
C:\Program Files (x86)\Arduino\libraries\DHT_sensor_library/DHT.cpp:114
      break;
    case DHT22:
    case DHT21:
      f = ((word)(data[2] & 0x7F)) << 8 | data[3];
      f *= 0.1;
      if (data[2] & 0x80) {
    ffcc:	d7 ff       	sbrs	r29, 7
    ffce:	cc cf       	rjmp	.-104    	; 0xff68 <DHT::readTemperature(bool, bool)+0xb4>
C:\Program Files (x86)\Arduino\libraries\DHT_sensor_library/DHT.cpp:115
        f *= -1;
    ffd0:	90 58       	subi	r25, 0x80	; 128
    ffd2:	ca cf       	rjmp	.-108    	; 0xff68 <DHT::readTemperature(bool, bool)+0xb4>

0000ffd4 <DHT::readHumidity(bool)>:
_ZN3DHT12readHumidityEb():
C:\Program Files (x86)\Arduino\libraries\DHT_sensor_library/DHT.cpp:148
 *  @brief  Read Humidity
 *  @param  force
 *					force read mode
 *	@return float value - humidity in percent
 */
float DHT::readHumidity(bool force) {
    ffd4:	cf 92       	push	r12
    ffd6:	df 92       	push	r13
    ffd8:	ef 92       	push	r14
    ffda:	ff 92       	push	r15
    ffdc:	cf 93       	push	r28
    ffde:	df 93       	push	r29
    ffe0:	ec 01       	movw	r28, r24
C:\Program Files (x86)\Arduino\libraries\DHT_sensor_library/DHT.cpp:150
  float f = NAN;
  if (read(force)) {
    ffe2:	0e 94 5a 7e 	call	0xfcb4	; 0xfcb4 <DHT::read(bool)>
    ffe6:	88 23       	and	r24, r24
    ffe8:	41 f0       	breq	.+16     	; 0xfffa <DHT::readHumidity(bool)+0x26>
C:\Program Files (x86)\Arduino\libraries\DHT_sensor_library/DHT.cpp:151
    switch (_type) {
    ffea:	8e 81       	ldd	r24, Y+6	; 0x06
    ffec:	8b 30       	cpi	r24, 0x0B	; 11
    ffee:	28 f0       	brcs	.+10     	; 0xfffa <DHT::readHumidity(bool)+0x26>
    fff0:	8d 30       	cpi	r24, 0x0D	; 13
    fff2:	40 f0       	brcs	.+16     	; 0x10004 <__EEPROM_REGION_LENGTH__+0x4>
    fff4:	85 51       	subi	r24, 0x15	; 21
    fff6:	82 30       	cpi	r24, 0x02	; 2
    fff8:	30 f1       	brcs	.+76     	; 0x10046 <__EEPROM_REGION_LENGTH__+0x46>
C:\Program Files (x86)\Arduino\libraries\DHT_sensor_library/DHT.cpp:149
 *  @param  force
 *					force read mode
 *	@return float value - humidity in percent
 */
float DHT::readHumidity(bool force) {
  float f = NAN;
    fffa:	60 e0       	ldi	r22, 0x00	; 0
    fffc:	70 e0       	ldi	r23, 0x00	; 0
    fffe:	80 ec       	ldi	r24, 0xC0	; 192
   10000:	9f e7       	ldi	r25, 0x7F	; 127
C:\Program Files (x86)\Arduino\libraries\DHT_sensor_library/DHT.cpp:163
      f = ((word)data[0]) << 8 | data[1];
      f *= 0.1;
      break;
    }
  }
  return f;
   10002:	1a c0       	rjmp	.+52     	; 0x10038 <__EEPROM_REGION_LENGTH__+0x38>
C:\Program Files (x86)\Arduino\libraries\DHT_sensor_library/DHT.cpp:154
  float f = NAN;
  if (read(force)) {
    switch (_type) {
    case DHT11:
    case DHT12:
      f = data[0] + data[1] * 0.1;
   10004:	69 81       	ldd	r22, Y+1	; 0x01
   10006:	70 e0       	ldi	r23, 0x00	; 0
   10008:	90 e0       	ldi	r25, 0x00	; 0
   1000a:	80 e0       	ldi	r24, 0x00	; 0
   1000c:	0e 94 8b 90 	call	0x12116	; 0x12116 <__floatsisf>
   10010:	2d ec       	ldi	r18, 0xCD	; 205
   10012:	3c ec       	ldi	r19, 0xCC	; 204
   10014:	4c ec       	ldi	r20, 0xCC	; 204
   10016:	5d e3       	ldi	r21, 0x3D	; 61
   10018:	0e 94 40 91 	call	0x12280	; 0x12280 <__mulsf3>
   1001c:	6b 01       	movw	r12, r22
   1001e:	7c 01       	movw	r14, r24
   10020:	68 81       	ld	r22, Y
   10022:	70 e0       	ldi	r23, 0x00	; 0
   10024:	90 e0       	ldi	r25, 0x00	; 0
   10026:	80 e0       	ldi	r24, 0x00	; 0
   10028:	0e 94 8b 90 	call	0x12116	; 0x12116 <__floatsisf>
   1002c:	9b 01       	movw	r18, r22
   1002e:	ac 01       	movw	r20, r24
   10030:	c7 01       	movw	r24, r14
   10032:	b6 01       	movw	r22, r12
   10034:	0e 94 70 8f 	call	0x11ee0	; 0x11ee0 <__addsf3>
C:\Program Files (x86)\Arduino\libraries\DHT_sensor_library/DHT.cpp:164
      f *= 0.1;
      break;
    }
  }
  return f;
}
   10038:	df 91       	pop	r29
   1003a:	cf 91       	pop	r28
   1003c:	ff 90       	pop	r15
   1003e:	ef 90       	pop	r14
   10040:	df 90       	pop	r13
   10042:	cf 90       	pop	r12
   10044:	08 95       	ret
C:\Program Files (x86)\Arduino\libraries\DHT_sensor_library/DHT.cpp:158
    case DHT12:
      f = data[0] + data[1] * 0.1;
      break;
    case DHT22:
    case DHT21:
      f = ((word)data[0]) << 8 | data[1];
   10046:	68 81       	ld	r22, Y
   10048:	79 81       	ldd	r23, Y+1	; 0x01
   1004a:	76 27       	eor	r23, r22
   1004c:	67 27       	eor	r22, r23
   1004e:	76 27       	eor	r23, r22
   10050:	90 e0       	ldi	r25, 0x00	; 0
   10052:	80 e0       	ldi	r24, 0x00	; 0
   10054:	0e 94 89 90 	call	0x12112	; 0x12112 <__floatunsisf>
C:\Program Files (x86)\Arduino\libraries\DHT_sensor_library/DHT.cpp:159
      f *= 0.1;
   10058:	2d ec       	ldi	r18, 0xCD	; 205
   1005a:	3c ec       	ldi	r19, 0xCC	; 204
   1005c:	4c ec       	ldi	r20, 0xCC	; 204
   1005e:	5d e3       	ldi	r21, 0x3D	; 61
   10060:	0e 94 40 91 	call	0x12280	; 0x12280 <__mulsf3>
C:\Program Files (x86)\Arduino\libraries\DHT_sensor_library/DHT.cpp:160
      break;
   10064:	e9 cf       	rjmp	.-46     	; 0x10038 <__EEPROM_REGION_LENGTH__+0x38>

00010066 <PZEM004Tv30::init(unsigned char)>:
_ZN11PZEM004Tv304initEh():
C:\Program Files (x86)\Arduino\libraries\PZEM-004T-v30-master/PZEM004Tv30.cpp:318
    // Write the watts threshold to the Alarm register
    if(!sendCmd8(CMD_WSR, WREG_ALARM_THR, watts, true))
        return false;

    return true;
}
   10066:	fc 01       	movw	r30, r24
   10068:	8f ef       	ldi	r24, 0xFF	; 255
   1006a:	86 0f       	add	r24, r22
   1006c:	88 3f       	cpi	r24, 0xF8	; 248
   1006e:	08 f0       	brcs	.+2      	; 0x10072 <PZEM004Tv30::init(unsigned char)+0xc>
   10070:	68 ef       	ldi	r22, 0xF8	; 248
   10072:	63 83       	std	Z+3, r22	; 0x03
   10074:	88 e3       	ldi	r24, 0x38	; 56
   10076:	86 8f       	std	Z+30, r24	; 0x1e
   10078:	8f ef       	ldi	r24, 0xFF	; 255
   1007a:	87 8f       	std	Z+31, r24	; 0x1f
   1007c:	80 a3       	std	Z+32, r24	; 0x20
   1007e:	81 a3       	std	Z+33, r24	; 0x21
   10080:	82 a3       	std	Z+34, r24	; 0x22
   10082:	83 a3       	std	Z+35, r24	; 0x23
   10084:	84 a3       	std	Z+36, r24	; 0x24
   10086:	85 a3       	std	Z+37, r24	; 0x25
   10088:	08 95       	ret

0001008a <PZEM004Tv30::PZEM004Tv30(HardwareSerial*, unsigned char)>:
_ZN11PZEM004Tv30C2EP14HardwareSerialh():
   1008a:	ff 92       	push	r15
   1008c:	0f 93       	push	r16
   1008e:	1f 93       	push	r17
   10090:	cf 93       	push	r28
   10092:	df 93       	push	r29
   10094:	ec 01       	movw	r28, r24
   10096:	8b 01       	movw	r16, r22
   10098:	f4 2e       	mov	r15, r20
_ZN14HardwareSerial5beginEm():
   1009a:	26 e0       	ldi	r18, 0x06	; 6
   1009c:	40 e8       	ldi	r20, 0x80	; 128
   1009e:	55 e2       	ldi	r21, 0x25	; 37
   100a0:	60 e0       	ldi	r22, 0x00	; 0
   100a2:	70 e0       	ldi	r23, 0x00	; 0
   100a4:	c8 01       	movw	r24, r16
   100a6:	0e 94 13 89 	call	0x11226	; 0x11226 <HardwareSerial::begin(unsigned long, unsigned char)>
_ZN11PZEM004Tv30C2EP14HardwareSerialh():
   100aa:	19 83       	std	Y+1, r17	; 0x01
   100ac:	08 83       	st	Y, r16
   100ae:	1a 82       	std	Y+2, r1	; 0x02
   100b0:	6f 2d       	mov	r22, r15
   100b2:	ce 01       	movw	r24, r28
   100b4:	df 91       	pop	r29
   100b6:	cf 91       	pop	r28
   100b8:	1f 91       	pop	r17
   100ba:	0f 91       	pop	r16
   100bc:	ff 90       	pop	r15
   100be:	0c 94 33 80 	jmp	0x10066	; 0x10066 <PZEM004Tv30::init(unsigned char)>

000100c2 <PZEM004Tv30::CRC16(unsigned char const*, unsigned int)>:
_ZN11PZEM004Tv305CRC16EPKhj():
   100c2:	db 01       	movw	r26, r22
   100c4:	46 0f       	add	r20, r22
   100c6:	57 1f       	adc	r21, r23
   100c8:	8f ef       	ldi	r24, 0xFF	; 255
   100ca:	9f ef       	ldi	r25, 0xFF	; 255
   100cc:	a4 17       	cp	r26, r20
   100ce:	b5 07       	cpc	r27, r21
   100d0:	71 f0       	breq	.+28     	; 0x100ee <PZEM004Tv30::CRC16(unsigned char const*, unsigned int)+0x2c>
   100d2:	ed 91       	ld	r30, X+
   100d4:	29 2f       	mov	r18, r25
   100d6:	33 27       	eor	r19, r19
   100d8:	e8 27       	eor	r30, r24
   100da:	f0 e0       	ldi	r31, 0x00	; 0
   100dc:	ee 0f       	add	r30, r30
   100de:	ff 1f       	adc	r31, r31
   100e0:	ed 59       	subi	r30, 0x9D	; 157
   100e2:	f1 4e       	sbci	r31, 0xE1	; 225
   100e4:	85 91       	lpm	r24, Z+
   100e6:	94 91       	lpm	r25, Z
   100e8:	82 27       	eor	r24, r18
   100ea:	93 27       	eor	r25, r19
   100ec:	ef cf       	rjmp	.-34     	; 0x100cc <PZEM004Tv30::CRC16(unsigned char const*, unsigned int)+0xa>
   100ee:	08 95       	ret

000100f0 <PZEM004Tv30::checkCRC(unsigned char const*, unsigned int)>:
_ZN11PZEM004Tv308checkCRCEPKhj():
   100f0:	ef 92       	push	r14
   100f2:	ff 92       	push	r15
   100f4:	0f 93       	push	r16
   100f6:	1f 93       	push	r17
   100f8:	cf 93       	push	r28
   100fa:	df 93       	push	r29
   100fc:	43 30       	cpi	r20, 0x03	; 3
   100fe:	51 05       	cpc	r21, r1
   10100:	b8 f0       	brcs	.+46     	; 0x10130 <PZEM004Tv30::checkCRC(unsigned char const*, unsigned int)+0x40>
   10102:	ea 01       	movw	r28, r20
   10104:	8b 01       	movw	r16, r22
   10106:	7a 01       	movw	r14, r20
   10108:	22 e0       	ldi	r18, 0x02	; 2
   1010a:	e2 1a       	sub	r14, r18
   1010c:	f1 08       	sbc	r15, r1
   1010e:	a7 01       	movw	r20, r14
   10110:	0e 94 61 80 	call	0x100c2	; 0x100c2 <PZEM004Tv30::CRC16(unsigned char const*, unsigned int)>
   10114:	c0 0f       	add	r28, r16
   10116:	d1 1f       	adc	r29, r17
   10118:	21 97       	sbiw	r28, 0x01	; 1
   1011a:	48 81       	ld	r20, Y
   1011c:	0e 0d       	add	r16, r14
   1011e:	1f 1d       	adc	r17, r15
   10120:	f8 01       	movw	r30, r16
   10122:	20 81       	ld	r18, Z
   10124:	54 2f       	mov	r21, r20
   10126:	42 2f       	mov	r20, r18
   10128:	21 e0       	ldi	r18, 0x01	; 1
   1012a:	48 17       	cp	r20, r24
   1012c:	59 07       	cpc	r21, r25
   1012e:	09 f0       	breq	.+2      	; 0x10132 <PZEM004Tv30::checkCRC(unsigned char const*, unsigned int)+0x42>
   10130:	20 e0       	ldi	r18, 0x00	; 0
   10132:	82 2f       	mov	r24, r18
   10134:	df 91       	pop	r29
   10136:	cf 91       	pop	r28
   10138:	1f 91       	pop	r17
   1013a:	0f 91       	pop	r16
   1013c:	ff 90       	pop	r15
   1013e:	ef 90       	pop	r14
   10140:	08 95       	ret

00010142 <PZEM004Tv30::recieve(unsigned char*, unsigned int)>:
_ZN11PZEM004Tv307recieveEPhj():
   10142:	4f 92       	push	r4
   10144:	5f 92       	push	r5
   10146:	6f 92       	push	r6
   10148:	7f 92       	push	r7
   1014a:	af 92       	push	r10
   1014c:	bf 92       	push	r11
   1014e:	cf 92       	push	r12
   10150:	df 92       	push	r13
   10152:	ff 92       	push	r15
   10154:	0f 93       	push	r16
   10156:	1f 93       	push	r17
   10158:	cf 93       	push	r28
   1015a:	df 93       	push	r29
   1015c:	8c 01       	movw	r16, r24
   1015e:	6b 01       	movw	r12, r22
   10160:	5a 01       	movw	r10, r20
   10162:	dc 01       	movw	r26, r24
   10164:	12 96       	adiw	r26, 0x02	; 2
   10166:	8c 91       	ld	r24, X
   10168:	12 97       	sbiw	r26, 0x02	; 2
   1016a:	88 23       	and	r24, r24
   1016c:	21 f0       	breq	.+8      	; 0x10176 <PZEM004Tv30::recieve(unsigned char*, unsigned int)+0x34>
   1016e:	8d 91       	ld	r24, X+
   10170:	9c 91       	ld	r25, X
   10172:	0e 94 1e 83 	call	0x1063c	; 0x1063c <SoftwareSerial::listen()>
   10176:	0e 94 67 85 	call	0x10ace	; 0x10ace <millis>
   1017a:	2b 01       	movw	r4, r22
   1017c:	3c 01       	movw	r6, r24
   1017e:	f1 2c       	mov	r15, r1
   10180:	cf 2d       	mov	r28, r15
   10182:	d0 e0       	ldi	r29, 0x00	; 0
   10184:	ca 15       	cp	r28, r10
   10186:	db 05       	cpc	r29, r11
   10188:	d8 f4       	brcc	.+54     	; 0x101c0 <PZEM004Tv30::recieve(unsigned char*, unsigned int)+0x7e>
   1018a:	0e 94 67 85 	call	0x10ace	; 0x10ace <millis>
   1018e:	64 19       	sub	r22, r4
   10190:	75 09       	sbc	r23, r5
   10192:	86 09       	sbc	r24, r6
   10194:	97 09       	sbc	r25, r7
   10196:	64 36       	cpi	r22, 0x64	; 100
   10198:	71 05       	cpc	r23, r1
   1019a:	81 05       	cpc	r24, r1
   1019c:	91 05       	cpc	r25, r1
   1019e:	80 f4       	brcc	.+32     	; 0x101c0 <PZEM004Tv30::recieve(unsigned char*, unsigned int)+0x7e>
   101a0:	f8 01       	movw	r30, r16
   101a2:	80 81       	ld	r24, Z
   101a4:	91 81       	ldd	r25, Z+1	; 0x01
   101a6:	dc 01       	movw	r26, r24
   101a8:	ed 91       	ld	r30, X+
   101aa:	fc 91       	ld	r31, X
   101ac:	00 84       	ldd	r0, Z+8	; 0x08
   101ae:	f1 85       	ldd	r31, Z+9	; 0x09
   101b0:	e0 2d       	mov	r30, r0
   101b2:	19 95       	eicall
   101b4:	18 16       	cp	r1, r24
   101b6:	19 06       	cpc	r1, r25
   101b8:	dc f0       	brlt	.+54     	; 0x101f0 <PZEM004Tv30::recieve(unsigned char*, unsigned int)+0xae>
   101ba:	0e 94 1c 85 	call	0x10a38	; 0x10a38 <yield>
   101be:	e0 cf       	rjmp	.-64     	; 0x10180 <PZEM004Tv30::recieve(unsigned char*, unsigned int)+0x3e>
   101c0:	ae 01       	movw	r20, r28
   101c2:	b6 01       	movw	r22, r12
   101c4:	c8 01       	movw	r24, r16
   101c6:	0e 94 78 80 	call	0x100f0	; 0x100f0 <PZEM004Tv30::checkCRC(unsigned char const*, unsigned int)>
   101ca:	81 11       	cpse	r24, r1
   101cc:	02 c0       	rjmp	.+4      	; 0x101d2 <PZEM004Tv30::recieve(unsigned char*, unsigned int)+0x90>
   101ce:	d0 e0       	ldi	r29, 0x00	; 0
   101d0:	c0 e0       	ldi	r28, 0x00	; 0
   101d2:	ce 01       	movw	r24, r28
   101d4:	df 91       	pop	r29
   101d6:	cf 91       	pop	r28
   101d8:	1f 91       	pop	r17
   101da:	0f 91       	pop	r16
   101dc:	ff 90       	pop	r15
   101de:	df 90       	pop	r13
   101e0:	cf 90       	pop	r12
   101e2:	bf 90       	pop	r11
   101e4:	af 90       	pop	r10
   101e6:	7f 90       	pop	r7
   101e8:	6f 90       	pop	r6
   101ea:	5f 90       	pop	r5
   101ec:	4f 90       	pop	r4
   101ee:	08 95       	ret
   101f0:	f8 01       	movw	r30, r16
   101f2:	80 81       	ld	r24, Z
   101f4:	91 81       	ldd	r25, Z+1	; 0x01
   101f6:	dc 01       	movw	r26, r24
   101f8:	ed 91       	ld	r30, X+
   101fa:	fc 91       	ld	r31, X
   101fc:	02 84       	ldd	r0, Z+10	; 0x0a
   101fe:	f3 85       	ldd	r31, Z+11	; 0x0b
   10200:	e0 2d       	mov	r30, r0
   10202:	19 95       	eicall
   10204:	f3 94       	inc	r15
   10206:	cc 0d       	add	r28, r12
   10208:	dd 1d       	adc	r29, r13
   1020a:	88 83       	st	Y, r24
   1020c:	d6 cf       	rjmp	.-84     	; 0x101ba <PZEM004Tv30::recieve(unsigned char*, unsigned int)+0x78>

0001020e <PZEM004Tv30::setCRC(unsigned char*, unsigned int) [clone .part.2]>:
_ZN11PZEM004Tv306setCRCEPhj():
   1020e:	ef 92       	push	r14
   10210:	ff 92       	push	r15
   10212:	0f 93       	push	r16
   10214:	1f 93       	push	r17
   10216:	cf 93       	push	r28
   10218:	df 93       	push	r29
   1021a:	eb 01       	movw	r28, r22
   1021c:	7a 01       	movw	r14, r20
   1021e:	8a 01       	movw	r16, r20
   10220:	02 50       	subi	r16, 0x02	; 2
   10222:	11 09       	sbc	r17, r1
   10224:	a8 01       	movw	r20, r16
   10226:	0e 94 61 80 	call	0x100c2	; 0x100c2 <PZEM004Tv30::CRC16(unsigned char const*, unsigned int)>
   1022a:	fe 01       	movw	r30, r28
   1022c:	e0 0f       	add	r30, r16
   1022e:	f1 1f       	adc	r31, r17
   10230:	80 83       	st	Z, r24
   10232:	ce 0d       	add	r28, r14
   10234:	df 1d       	adc	r29, r15
   10236:	21 97       	sbiw	r28, 0x01	; 1
   10238:	98 83       	st	Y, r25
   1023a:	df 91       	pop	r29
   1023c:	cf 91       	pop	r28
   1023e:	1f 91       	pop	r17
   10240:	0f 91       	pop	r16
   10242:	ff 90       	pop	r15
   10244:	ef 90       	pop	r14
   10246:	08 95       	ret

00010248 <PZEM004Tv30::sendCmd8(unsigned char, unsigned int, unsigned int, bool, unsigned int)>:
_ZN11PZEM004Tv308sendCmd8Ehjjbj():
   10248:	cf 92       	push	r12
   1024a:	df 92       	push	r13
   1024c:	ef 92       	push	r14
   1024e:	ff 92       	push	r15
   10250:	0f 93       	push	r16
   10252:	cf 93       	push	r28
   10254:	df 93       	push	r29
   10256:	cd b7       	in	r28, 0x3d	; 61
   10258:	de b7       	in	r29, 0x3e	; 62
   1025a:	60 97       	sbiw	r28, 0x10	; 16
   1025c:	0f b6       	in	r0, 0x3f	; 63
   1025e:	f8 94       	cli
   10260:	de bf       	out	0x3e, r29	; 62
   10262:	0f be       	out	0x3f, r0	; 63
   10264:	cd bf       	out	0x3d, r28	; 61
   10266:	6c 01       	movw	r12, r24
   10268:	c7 01       	movw	r24, r14
   1026a:	01 97       	sbiw	r24, 0x01	; 1
   1026c:	87 3f       	cpi	r24, 0xF7	; 247
   1026e:	91 05       	cpc	r25, r1
   10270:	18 f0       	brcs	.+6      	; 0x10278 <PZEM004Tv30::sendCmd8(unsigned char, unsigned int, unsigned int, bool, unsigned int)+0x30>
   10272:	d6 01       	movw	r26, r12
   10274:	13 96       	adiw	r26, 0x03	; 3
   10276:	ec 90       	ld	r14, X
   10278:	e9 86       	std	Y+9, r14	; 0x09
   1027a:	6a 87       	std	Y+10, r22	; 0x0a
   1027c:	5b 87       	std	Y+11, r21	; 0x0b
   1027e:	4c 87       	std	Y+12, r20	; 0x0c
   10280:	3d 87       	std	Y+13, r19	; 0x0d
   10282:	2e 87       	std	Y+14, r18	; 0x0e
_ZN11PZEM004Tv306setCRCEPhj():
   10284:	48 e0       	ldi	r20, 0x08	; 8
   10286:	50 e0       	ldi	r21, 0x00	; 0
   10288:	be 01       	movw	r22, r28
   1028a:	67 5f       	subi	r22, 0xF7	; 247
   1028c:	7f 4f       	sbci	r23, 0xFF	; 255
   1028e:	c6 01       	movw	r24, r12
   10290:	0e 94 07 81 	call	0x1020e	; 0x1020e <PZEM004Tv30::setCRC(unsigned char*, unsigned int) [clone .part.2]>
_ZN11PZEM004Tv308sendCmd8Ehjjbj():
   10294:	f6 01       	movw	r30, r12
   10296:	80 81       	ld	r24, Z
   10298:	91 81       	ldd	r25, Z+1	; 0x01
   1029a:	dc 01       	movw	r26, r24
   1029c:	ed 91       	ld	r30, X+
   1029e:	fc 91       	ld	r31, X
   102a0:	02 80       	ldd	r0, Z+2	; 0x02
   102a2:	f3 81       	ldd	r31, Z+3	; 0x03
   102a4:	e0 2d       	mov	r30, r0
   102a6:	48 e0       	ldi	r20, 0x08	; 8
   102a8:	50 e0       	ldi	r21, 0x00	; 0
   102aa:	be 01       	movw	r22, r28
   102ac:	67 5f       	subi	r22, 0xF7	; 247
   102ae:	7f 4f       	sbci	r23, 0xFF	; 255
   102b0:	19 95       	eicall
   102b2:	00 23       	and	r16, r16
   102b4:	b9 f0       	breq	.+46     	; 0x102e4 <PZEM004Tv30::sendCmd8(unsigned char, unsigned int, unsigned int, bool, unsigned int)+0x9c>
   102b6:	48 e0       	ldi	r20, 0x08	; 8
   102b8:	50 e0       	ldi	r21, 0x00	; 0
   102ba:	be 01       	movw	r22, r28
   102bc:	6f 5f       	subi	r22, 0xFF	; 255
   102be:	7f 4f       	sbci	r23, 0xFF	; 255
   102c0:	c6 01       	movw	r24, r12
   102c2:	0e 94 a1 80 	call	0x10142	; 0x10142 <PZEM004Tv30::recieve(unsigned char*, unsigned int)>
   102c6:	89 2b       	or	r24, r25
   102c8:	e1 f0       	breq	.+56     	; 0x10302 <PZEM004Tv30::sendCmd8(unsigned char, unsigned int, unsigned int, bool, unsigned int)+0xba>
   102ca:	fe 01       	movw	r30, r28
   102cc:	39 96       	adiw	r30, 0x09	; 9
   102ce:	de 01       	movw	r26, r28
   102d0:	11 96       	adiw	r26, 0x01	; 1
   102d2:	ce 01       	movw	r24, r28
   102d4:	41 96       	adiw	r24, 0x11	; 17
   102d6:	31 91       	ld	r19, Z+
   102d8:	2d 91       	ld	r18, X+
   102da:	32 13       	cpse	r19, r18
   102dc:	12 c0       	rjmp	.+36     	; 0x10302 <PZEM004Tv30::sendCmd8(unsigned char, unsigned int, unsigned int, bool, unsigned int)+0xba>
   102de:	e8 17       	cp	r30, r24
   102e0:	f9 07       	cpc	r31, r25
   102e2:	c9 f7       	brne	.-14     	; 0x102d6 <PZEM004Tv30::sendCmd8(unsigned char, unsigned int, unsigned int, bool, unsigned int)+0x8e>
   102e4:	81 e0       	ldi	r24, 0x01	; 1
   102e6:	60 96       	adiw	r28, 0x10	; 16
   102e8:	0f b6       	in	r0, 0x3f	; 63
   102ea:	f8 94       	cli
   102ec:	de bf       	out	0x3e, r29	; 62
   102ee:	0f be       	out	0x3f, r0	; 63
   102f0:	cd bf       	out	0x3d, r28	; 61
   102f2:	df 91       	pop	r29
   102f4:	cf 91       	pop	r28
   102f6:	0f 91       	pop	r16
   102f8:	ff 90       	pop	r15
   102fa:	ef 90       	pop	r14
   102fc:	df 90       	pop	r13
   102fe:	cf 90       	pop	r12
   10300:	08 95       	ret
   10302:	80 e0       	ldi	r24, 0x00	; 0
   10304:	f0 cf       	rjmp	.-32     	; 0x102e6 <PZEM004Tv30::sendCmd8(unsigned char, unsigned int, unsigned int, bool, unsigned int)+0x9e>

00010306 <PZEM004Tv30::updateValues()>:
_ZN11PZEM004Tv3012updateValuesEv():
C:\Program Files (x86)\Arduino\libraries\PZEM-004T-v30-master/PZEM004Tv30.cpp:364
 * Read all registers of device and update the local values
 *
 * @return success
*/
bool PZEM004Tv30::updateValues()
{
   10306:	2f 92       	push	r2
   10308:	3f 92       	push	r3
   1030a:	4f 92       	push	r4
   1030c:	5f 92       	push	r5
   1030e:	6f 92       	push	r6
   10310:	7f 92       	push	r7
   10312:	8f 92       	push	r8
   10314:	9f 92       	push	r9
   10316:	af 92       	push	r10
   10318:	bf 92       	push	r11
   1031a:	cf 92       	push	r12
   1031c:	df 92       	push	r13
   1031e:	ef 92       	push	r14
   10320:	ff 92       	push	r15
   10322:	0f 93       	push	r16
   10324:	1f 93       	push	r17
   10326:	cf 93       	push	r28
   10328:	df 93       	push	r29
   1032a:	ec 01       	movw	r28, r24
C:\Program Files (x86)\Arduino\libraries\PZEM-004T-v30-master/PZEM004Tv30.cpp:369
    //static uint8_t buffer[] = {0x00, CMD_RIR, 0x00, 0x00, 0x00, 0x0A, 0x00, 0x00};
    static uint8_t response[25];

    // If we read before the update time limit, do not update
    if(_lastRead + UPDATE_TIME > millis()){
   1032c:	2e 8d       	ldd	r18, Y+30	; 0x1e
   1032e:	3f 8d       	ldd	r19, Y+31	; 0x1f
   10330:	48 a1       	ldd	r20, Y+32	; 0x20
   10332:	59 a1       	ldd	r21, Y+33	; 0x21
   10334:	6a a1       	ldd	r22, Y+34	; 0x22
   10336:	7b a1       	ldd	r23, Y+35	; 0x23
   10338:	8c a1       	ldd	r24, Y+36	; 0x24
   1033a:	9d a1       	ldd	r25, Y+37	; 0x25
   1033c:	28 53       	subi	r18, 0x38	; 56
   1033e:	3f 4f       	sbci	r19, 0xFF	; 255
   10340:	4f 4f       	sbci	r20, 0xFF	; 255
   10342:	5f 4f       	sbci	r21, 0xFF	; 255
   10344:	6f 4f       	sbci	r22, 0xFF	; 255
   10346:	7f 4f       	sbci	r23, 0xFF	; 255
   10348:	8f 4f       	sbci	r24, 0xFF	; 255
   1034a:	9f 4f       	sbci	r25, 0xFF	; 255
   1034c:	59 01       	movw	r10, r18
   1034e:	6a 01       	movw	r12, r20
   10350:	7b 01       	movw	r14, r22
   10352:	8c 01       	movw	r16, r24
   10354:	0e 94 67 85 	call	0x10ace	; 0x10ace <millis>
   10358:	1b 01       	movw	r2, r22
   1035a:	2c 01       	movw	r4, r24
   1035c:	95 01       	movw	r18, r10
   1035e:	a6 01       	movw	r20, r12
   10360:	b7 01       	movw	r22, r14
   10362:	c8 01       	movw	r24, r16
   10364:	51 01       	movw	r10, r2
   10366:	62 01       	movw	r12, r4
   10368:	e1 2c       	mov	r14, r1
   1036a:	f1 2c       	mov	r15, r1
   1036c:	00 e0       	ldi	r16, 0x00	; 0
   1036e:	10 e0       	ldi	r17, 0x00	; 0
   10370:	0e 94 4d 92 	call	0x1249a	; 0x1249a <__cmpdi2>
   10374:	11 f0       	breq	.+4      	; 0x1037a <PZEM004Tv30::updateValues()+0x74>
   10376:	08 f0       	brcs	.+2      	; 0x1037a <PZEM004Tv30::updateValues()+0x74>
   10378:	c3 c0       	rjmp	.+390    	; 0x10500 <PZEM004Tv30::updateValues()+0x1fa>
C:\Program Files (x86)\Arduino\libraries\PZEM-004T-v30-master/PZEM004Tv30.cpp:374
        return true;
    }

    // Read 10 registers starting at 0x00 (no check)
    sendCmd8(CMD_RIR, 0x00, 0x0A, false);
   1037a:	ee 24       	eor	r14, r14
   1037c:	ea 94       	dec	r14
   1037e:	fe 2c       	mov	r15, r14
   10380:	2a e0       	ldi	r18, 0x0A	; 10
   10382:	30 e0       	ldi	r19, 0x00	; 0
   10384:	50 e0       	ldi	r21, 0x00	; 0
   10386:	40 e0       	ldi	r20, 0x00	; 0
   10388:	64 e0       	ldi	r22, 0x04	; 4
   1038a:	ce 01       	movw	r24, r28
   1038c:	0e 94 24 81 	call	0x10248	; 0x10248 <PZEM004Tv30::sendCmd8(unsigned char, unsigned int, unsigned int, bool, unsigned int)>
C:\Program Files (x86)\Arduino\libraries\PZEM-004T-v30-master/PZEM004Tv30.cpp:377


    if(recieve(response, 25) != 25){ // Something went wrong
   10390:	49 e1       	ldi	r20, 0x19	; 25
   10392:	50 e0       	ldi	r21, 0x00	; 0
   10394:	6e ee       	ldi	r22, 0xEE	; 238
   10396:	74 e1       	ldi	r23, 0x14	; 20
   10398:	ce 01       	movw	r24, r28
   1039a:	0e 94 a1 80 	call	0x10142	; 0x10142 <PZEM004Tv30::recieve(unsigned char*, unsigned int)>
   1039e:	49 97       	sbiw	r24, 0x19	; 25
   103a0:	09 f0       	breq	.+2      	; 0x103a4 <PZEM004Tv30::updateValues()+0x9e>
   103a2:	c2 c0       	rjmp	.+388    	; 0x10528 <PZEM004Tv30::updateValues()+0x222>
C:\Program Files (x86)\Arduino\libraries\PZEM-004T-v30-master/PZEM004Tv30.cpp:385



    // Update the current values
    _currentValues.voltage = ((uint32_t)response[3] << 8 | // Raw voltage in 0.1V
                              (uint32_t)response[4])/10.0;
   103a4:	60 91 f1 14 	lds	r22, 0x14F1	; 0x8014f1 <PZEM004Tv30::updateValues()::response+0x3>
   103a8:	70 91 f2 14 	lds	r23, 0x14F2	; 0x8014f2 <PZEM004Tv30::updateValues()::response+0x4>
   103ac:	76 27       	eor	r23, r22
   103ae:	67 27       	eor	r22, r23
   103b0:	76 27       	eor	r23, r22
   103b2:	90 e0       	ldi	r25, 0x00	; 0
   103b4:	80 e0       	ldi	r24, 0x00	; 0
   103b6:	0e 94 89 90 	call	0x12112	; 0x12112 <__floatunsisf>
   103ba:	20 e0       	ldi	r18, 0x00	; 0
   103bc:	30 e0       	ldi	r19, 0x00	; 0
   103be:	40 e2       	ldi	r20, 0x20	; 32
   103c0:	51 e4       	ldi	r21, 0x41	; 65
   103c2:	0e 94 e1 8f 	call	0x11fc2	; 0x11fc2 <__divsf3>
C:\Program Files (x86)\Arduino\libraries\PZEM-004T-v30-master/PZEM004Tv30.cpp:384
    }



    // Update the current values
    _currentValues.voltage = ((uint32_t)response[3] << 8 | // Raw voltage in 0.1V
   103c6:	6c 83       	std	Y+4, r22	; 0x04
   103c8:	7d 83       	std	Y+5, r23	; 0x05
   103ca:	8e 83       	std	Y+6, r24	; 0x06
   103cc:	9f 83       	std	Y+7, r25	; 0x07
C:\Program Files (x86)\Arduino\libraries\PZEM-004T-v30-master/PZEM004Tv30.cpp:387
                              (uint32_t)response[4])/10.0;

    _currentValues.current = ((uint32_t)response[5] << 8 | // Raw current in 0.001A
   103ce:	20 91 f3 14 	lds	r18, 0x14F3	; 0x8014f3 <PZEM004Tv30::updateValues()::response+0x5>
C:\Program Files (x86)\Arduino\libraries\PZEM-004T-v30-master/PZEM004Tv30.cpp:389
                              (uint32_t)response[6] |
                              (uint32_t)response[7] << 24 |
   103d2:	60 91 f5 14 	lds	r22, 0x14F5	; 0x8014f5 <PZEM004Tv30::updateValues()::response+0x7>
   103d6:	70 e0       	ldi	r23, 0x00	; 0
   103d8:	90 e0       	ldi	r25, 0x00	; 0
   103da:	80 e0       	ldi	r24, 0x00	; 0
   103dc:	96 2f       	mov	r25, r22
   103de:	88 27       	eor	r24, r24
   103e0:	77 27       	eor	r23, r23
   103e2:	66 27       	eor	r22, r22
C:\Program Files (x86)\Arduino\libraries\PZEM-004T-v30-master/PZEM004Tv30.cpp:388
    // Update the current values
    _currentValues.voltage = ((uint32_t)response[3] << 8 | // Raw voltage in 0.1V
                              (uint32_t)response[4])/10.0;

    _currentValues.current = ((uint32_t)response[5] << 8 | // Raw current in 0.001A
                              (uint32_t)response[6] |
   103e4:	72 2b       	or	r23, r18
   103e6:	20 91 f4 14 	lds	r18, 0x14F4	; 0x8014f4 <PZEM004Tv30::updateValues()::response+0x6>
   103ea:	62 2b       	or	r22, r18
C:\Program Files (x86)\Arduino\libraries\PZEM-004T-v30-master/PZEM004Tv30.cpp:390
                              (uint32_t)response[7] << 24 |
                              (uint32_t)response[8] << 16) / 1000.0;
   103ec:	20 91 f6 14 	lds	r18, 0x14F6	; 0x8014f6 <PZEM004Tv30::updateValues()::response+0x8>
C:\Program Files (x86)\Arduino\libraries\PZEM-004T-v30-master/PZEM004Tv30.cpp:389
    _currentValues.voltage = ((uint32_t)response[3] << 8 | // Raw voltage in 0.1V
                              (uint32_t)response[4])/10.0;

    _currentValues.current = ((uint32_t)response[5] << 8 | // Raw current in 0.001A
                              (uint32_t)response[6] |
                              (uint32_t)response[7] << 24 |
   103f0:	82 2b       	or	r24, r18
C:\Program Files (x86)\Arduino\libraries\PZEM-004T-v30-master/PZEM004Tv30.cpp:390
                              (uint32_t)response[8] << 16) / 1000.0;
   103f2:	0e 94 89 90 	call	0x12112	; 0x12112 <__floatunsisf>
   103f6:	20 e0       	ldi	r18, 0x00	; 0
   103f8:	30 e0       	ldi	r19, 0x00	; 0
   103fa:	4a e7       	ldi	r20, 0x7A	; 122
   103fc:	54 e4       	ldi	r21, 0x44	; 68
   103fe:	0e 94 e1 8f 	call	0x11fc2	; 0x11fc2 <__divsf3>
C:\Program Files (x86)\Arduino\libraries\PZEM-004T-v30-master/PZEM004Tv30.cpp:387

    // Update the current values
    _currentValues.voltage = ((uint32_t)response[3] << 8 | // Raw voltage in 0.1V
                              (uint32_t)response[4])/10.0;

    _currentValues.current = ((uint32_t)response[5] << 8 | // Raw current in 0.001A
   10402:	68 87       	std	Y+8, r22	; 0x08
   10404:	79 87       	std	Y+9, r23	; 0x09
   10406:	8a 87       	std	Y+10, r24	; 0x0a
   10408:	9b 87       	std	Y+11, r25	; 0x0b
C:\Program Files (x86)\Arduino\libraries\PZEM-004T-v30-master/PZEM004Tv30.cpp:392
                              (uint32_t)response[6] |
                              (uint32_t)response[7] << 24 |
                              (uint32_t)response[8] << 16) / 1000.0;

    _currentValues.power =   ((uint32_t)response[9] << 8 | // Raw power in 0.1W
   1040a:	20 91 f7 14 	lds	r18, 0x14F7	; 0x8014f7 <PZEM004Tv30::updateValues()::response+0x9>
C:\Program Files (x86)\Arduino\libraries\PZEM-004T-v30-master/PZEM004Tv30.cpp:394
                              (uint32_t)response[10] |
                              (uint32_t)response[11] << 24 |
   1040e:	60 91 f9 14 	lds	r22, 0x14F9	; 0x8014f9 <PZEM004Tv30::updateValues()::response+0xb>
   10412:	70 e0       	ldi	r23, 0x00	; 0
   10414:	90 e0       	ldi	r25, 0x00	; 0
   10416:	80 e0       	ldi	r24, 0x00	; 0
   10418:	96 2f       	mov	r25, r22
   1041a:	88 27       	eor	r24, r24
   1041c:	77 27       	eor	r23, r23
   1041e:	66 27       	eor	r22, r22
C:\Program Files (x86)\Arduino\libraries\PZEM-004T-v30-master/PZEM004Tv30.cpp:393
                              (uint32_t)response[6] |
                              (uint32_t)response[7] << 24 |
                              (uint32_t)response[8] << 16) / 1000.0;

    _currentValues.power =   ((uint32_t)response[9] << 8 | // Raw power in 0.1W
                              (uint32_t)response[10] |
   10420:	72 2b       	or	r23, r18
   10422:	20 91 f8 14 	lds	r18, 0x14F8	; 0x8014f8 <PZEM004Tv30::updateValues()::response+0xa>
   10426:	62 2b       	or	r22, r18
C:\Program Files (x86)\Arduino\libraries\PZEM-004T-v30-master/PZEM004Tv30.cpp:395
                              (uint32_t)response[11] << 24 |
                              (uint32_t)response[12] << 16) / 10.0;
   10428:	20 91 fa 14 	lds	r18, 0x14FA	; 0x8014fa <PZEM004Tv30::updateValues()::response+0xc>
C:\Program Files (x86)\Arduino\libraries\PZEM-004T-v30-master/PZEM004Tv30.cpp:394
                              (uint32_t)response[7] << 24 |
                              (uint32_t)response[8] << 16) / 1000.0;

    _currentValues.power =   ((uint32_t)response[9] << 8 | // Raw power in 0.1W
                              (uint32_t)response[10] |
                              (uint32_t)response[11] << 24 |
   1042c:	82 2b       	or	r24, r18
C:\Program Files (x86)\Arduino\libraries\PZEM-004T-v30-master/PZEM004Tv30.cpp:395
                              (uint32_t)response[12] << 16) / 10.0;
   1042e:	0e 94 89 90 	call	0x12112	; 0x12112 <__floatunsisf>
   10432:	20 e0       	ldi	r18, 0x00	; 0
   10434:	30 e0       	ldi	r19, 0x00	; 0
   10436:	40 e2       	ldi	r20, 0x20	; 32
   10438:	51 e4       	ldi	r21, 0x41	; 65
   1043a:	0e 94 e1 8f 	call	0x11fc2	; 0x11fc2 <__divsf3>
C:\Program Files (x86)\Arduino\libraries\PZEM-004T-v30-master/PZEM004Tv30.cpp:392
    _currentValues.current = ((uint32_t)response[5] << 8 | // Raw current in 0.001A
                              (uint32_t)response[6] |
                              (uint32_t)response[7] << 24 |
                              (uint32_t)response[8] << 16) / 1000.0;

    _currentValues.power =   ((uint32_t)response[9] << 8 | // Raw power in 0.1W
   1043e:	6c 87       	std	Y+12, r22	; 0x0c
   10440:	7d 87       	std	Y+13, r23	; 0x0d
   10442:	8e 87       	std	Y+14, r24	; 0x0e
   10444:	9f 87       	std	Y+15, r25	; 0x0f
C:\Program Files (x86)\Arduino\libraries\PZEM-004T-v30-master/PZEM004Tv30.cpp:397
                              (uint32_t)response[10] |
                              (uint32_t)response[11] << 24 |
                              (uint32_t)response[12] << 16) / 10.0;

    _currentValues.energy =  ((uint32_t)response[13] << 8 | // Raw Energy in 1Wh
   10446:	20 91 fb 14 	lds	r18, 0x14FB	; 0x8014fb <PZEM004Tv30::updateValues()::response+0xd>
C:\Program Files (x86)\Arduino\libraries\PZEM-004T-v30-master/PZEM004Tv30.cpp:399
                              (uint32_t)response[14] |
                              (uint32_t)response[15] << 24 |
   1044a:	60 91 fd 14 	lds	r22, 0x14FD	; 0x8014fd <PZEM004Tv30::updateValues()::response+0xf>
   1044e:	70 e0       	ldi	r23, 0x00	; 0
   10450:	90 e0       	ldi	r25, 0x00	; 0
   10452:	80 e0       	ldi	r24, 0x00	; 0
   10454:	96 2f       	mov	r25, r22
   10456:	88 27       	eor	r24, r24
   10458:	77 27       	eor	r23, r23
   1045a:	66 27       	eor	r22, r22
C:\Program Files (x86)\Arduino\libraries\PZEM-004T-v30-master/PZEM004Tv30.cpp:398
                              (uint32_t)response[10] |
                              (uint32_t)response[11] << 24 |
                              (uint32_t)response[12] << 16) / 10.0;

    _currentValues.energy =  ((uint32_t)response[13] << 8 | // Raw Energy in 1Wh
                              (uint32_t)response[14] |
   1045c:	72 2b       	or	r23, r18
   1045e:	20 91 fc 14 	lds	r18, 0x14FC	; 0x8014fc <PZEM004Tv30::updateValues()::response+0xe>
   10462:	62 2b       	or	r22, r18
C:\Program Files (x86)\Arduino\libraries\PZEM-004T-v30-master/PZEM004Tv30.cpp:400
                              (uint32_t)response[15] << 24 |
                              (uint32_t)response[16] << 16) / 1000.0;
   10464:	20 91 fe 14 	lds	r18, 0x14FE	; 0x8014fe <PZEM004Tv30::updateValues()::response+0x10>
C:\Program Files (x86)\Arduino\libraries\PZEM-004T-v30-master/PZEM004Tv30.cpp:399
                              (uint32_t)response[11] << 24 |
                              (uint32_t)response[12] << 16) / 10.0;

    _currentValues.energy =  ((uint32_t)response[13] << 8 | // Raw Energy in 1Wh
                              (uint32_t)response[14] |
                              (uint32_t)response[15] << 24 |
   10468:	82 2b       	or	r24, r18
C:\Program Files (x86)\Arduino\libraries\PZEM-004T-v30-master/PZEM004Tv30.cpp:400
                              (uint32_t)response[16] << 16) / 1000.0;
   1046a:	0e 94 89 90 	call	0x12112	; 0x12112 <__floatunsisf>
   1046e:	20 e0       	ldi	r18, 0x00	; 0
   10470:	30 e0       	ldi	r19, 0x00	; 0
   10472:	4a e7       	ldi	r20, 0x7A	; 122
   10474:	54 e4       	ldi	r21, 0x44	; 68
   10476:	0e 94 e1 8f 	call	0x11fc2	; 0x11fc2 <__divsf3>
C:\Program Files (x86)\Arduino\libraries\PZEM-004T-v30-master/PZEM004Tv30.cpp:397
    _currentValues.power =   ((uint32_t)response[9] << 8 | // Raw power in 0.1W
                              (uint32_t)response[10] |
                              (uint32_t)response[11] << 24 |
                              (uint32_t)response[12] << 16) / 10.0;

    _currentValues.energy =  ((uint32_t)response[13] << 8 | // Raw Energy in 1Wh
   1047a:	68 8b       	std	Y+16, r22	; 0x10
   1047c:	79 8b       	std	Y+17, r23	; 0x11
   1047e:	8a 8b       	std	Y+18, r24	; 0x12
   10480:	9b 8b       	std	Y+19, r25	; 0x13
C:\Program Files (x86)\Arduino\libraries\PZEM-004T-v30-master/PZEM004Tv30.cpp:403
                              (uint32_t)response[14] |
                              (uint32_t)response[15] << 24 |
                              (uint32_t)response[16] << 16) / 1000.0;

    _currentValues.frequeny =((uint32_t)response[17] << 8 | // Raw Frequency in 0.1Hz
                              (uint32_t)response[18]) / 10.0;
   10482:	60 91 ff 14 	lds	r22, 0x14FF	; 0x8014ff <PZEM004Tv30::updateValues()::response+0x11>
   10486:	70 91 00 15 	lds	r23, 0x1500	; 0x801500 <PZEM004Tv30::updateValues()::response+0x12>
   1048a:	76 27       	eor	r23, r22
   1048c:	67 27       	eor	r22, r23
   1048e:	76 27       	eor	r23, r22
   10490:	90 e0       	ldi	r25, 0x00	; 0
   10492:	80 e0       	ldi	r24, 0x00	; 0
   10494:	0e 94 89 90 	call	0x12112	; 0x12112 <__floatunsisf>
   10498:	20 e0       	ldi	r18, 0x00	; 0
   1049a:	30 e0       	ldi	r19, 0x00	; 0
   1049c:	40 e2       	ldi	r20, 0x20	; 32
   1049e:	51 e4       	ldi	r21, 0x41	; 65
   104a0:	0e 94 e1 8f 	call	0x11fc2	; 0x11fc2 <__divsf3>
C:\Program Files (x86)\Arduino\libraries\PZEM-004T-v30-master/PZEM004Tv30.cpp:402
    _currentValues.energy =  ((uint32_t)response[13] << 8 | // Raw Energy in 1Wh
                              (uint32_t)response[14] |
                              (uint32_t)response[15] << 24 |
                              (uint32_t)response[16] << 16) / 1000.0;

    _currentValues.frequeny =((uint32_t)response[17] << 8 | // Raw Frequency in 0.1Hz
   104a4:	6c 8b       	std	Y+20, r22	; 0x14
   104a6:	7d 8b       	std	Y+21, r23	; 0x15
   104a8:	8e 8b       	std	Y+22, r24	; 0x16
   104aa:	9f 8b       	std	Y+23, r25	; 0x17
C:\Program Files (x86)\Arduino\libraries\PZEM-004T-v30-master/PZEM004Tv30.cpp:406
                              (uint32_t)response[18]) / 10.0;

    _currentValues.pf =      ((uint32_t)response[19] << 8 | // Raw pf in 0.01
                              (uint32_t)response[20])/100.0;
   104ac:	60 91 01 15 	lds	r22, 0x1501	; 0x801501 <PZEM004Tv30::updateValues()::response+0x13>
   104b0:	70 91 02 15 	lds	r23, 0x1502	; 0x801502 <PZEM004Tv30::updateValues()::response+0x14>
   104b4:	76 27       	eor	r23, r22
   104b6:	67 27       	eor	r22, r23
   104b8:	76 27       	eor	r23, r22
   104ba:	90 e0       	ldi	r25, 0x00	; 0
   104bc:	80 e0       	ldi	r24, 0x00	; 0
   104be:	0e 94 89 90 	call	0x12112	; 0x12112 <__floatunsisf>
   104c2:	20 e0       	ldi	r18, 0x00	; 0
   104c4:	30 e0       	ldi	r19, 0x00	; 0
   104c6:	48 ec       	ldi	r20, 0xC8	; 200
   104c8:	52 e4       	ldi	r21, 0x42	; 66
   104ca:	0e 94 e1 8f 	call	0x11fc2	; 0x11fc2 <__divsf3>
C:\Program Files (x86)\Arduino\libraries\PZEM-004T-v30-master/PZEM004Tv30.cpp:405
                              (uint32_t)response[16] << 16) / 1000.0;

    _currentValues.frequeny =((uint32_t)response[17] << 8 | // Raw Frequency in 0.1Hz
                              (uint32_t)response[18]) / 10.0;

    _currentValues.pf =      ((uint32_t)response[19] << 8 | // Raw pf in 0.01
   104ce:	68 8f       	std	Y+24, r22	; 0x18
   104d0:	79 8f       	std	Y+25, r23	; 0x19
   104d2:	8a 8f       	std	Y+26, r24	; 0x1a
   104d4:	9b 8f       	std	Y+27, r25	; 0x1b
C:\Program Files (x86)\Arduino\libraries\PZEM-004T-v30-master/PZEM004Tv30.cpp:408
                              (uint32_t)response[20])/100.0;

    _currentValues.alarms =  ((uint32_t)response[21] << 8 | // Raw alarm value
   104d6:	80 91 03 15 	lds	r24, 0x1503	; 0x801503 <PZEM004Tv30::updateValues()::response+0x15>
   104da:	90 91 04 15 	lds	r25, 0x1504	; 0x801504 <PZEM004Tv30::updateValues()::response+0x16>
   104de:	98 27       	eor	r25, r24
   104e0:	89 27       	eor	r24, r25
   104e2:	98 27       	eor	r25, r24
   104e4:	9d 8f       	std	Y+29, r25	; 0x1d
   104e6:	8c 8f       	std	Y+28, r24	; 0x1c
C:\Program Files (x86)\Arduino\libraries\PZEM-004T-v30-master/PZEM004Tv30.cpp:412
                              (uint32_t)response[22]);

    // Record current time as _lastRead
    _lastRead = millis();
   104e8:	0e 94 67 85 	call	0x10ace	; 0x10ace <millis>
   104ec:	8b 01       	movw	r16, r22
   104ee:	9c 01       	movw	r18, r24
   104f0:	6e 8f       	std	Y+30, r22	; 0x1e
   104f2:	1f 8f       	std	Y+31, r17	; 0x1f
   104f4:	88 a3       	std	Y+32, r24	; 0x20
   104f6:	39 a3       	std	Y+33, r19	; 0x21
   104f8:	1a a2       	std	Y+34, r1	; 0x22
   104fa:	1b a2       	std	Y+35, r1	; 0x23
   104fc:	1c a2       	std	Y+36, r1	; 0x24
   104fe:	1d a2       	std	Y+37, r1	; 0x25
C:\Program Files (x86)\Arduino\libraries\PZEM-004T-v30-master/PZEM004Tv30.cpp:370
    //static uint8_t buffer[] = {0x00, CMD_RIR, 0x00, 0x00, 0x00, 0x0A, 0x00, 0x00};
    static uint8_t response[25];

    // If we read before the update time limit, do not update
    if(_lastRead + UPDATE_TIME > millis()){
        return true;
   10500:	81 e0       	ldi	r24, 0x01	; 1
C:\Program Files (x86)\Arduino\libraries\PZEM-004T-v30-master/PZEM004Tv30.cpp:415

    // Record current time as _lastRead
    _lastRead = millis();

    return true;
}
   10502:	df 91       	pop	r29
   10504:	cf 91       	pop	r28
   10506:	1f 91       	pop	r17
   10508:	0f 91       	pop	r16
   1050a:	ff 90       	pop	r15
   1050c:	ef 90       	pop	r14
   1050e:	df 90       	pop	r13
   10510:	cf 90       	pop	r12
   10512:	bf 90       	pop	r11
   10514:	af 90       	pop	r10
   10516:	9f 90       	pop	r9
   10518:	8f 90       	pop	r8
   1051a:	7f 90       	pop	r7
   1051c:	6f 90       	pop	r6
   1051e:	5f 90       	pop	r5
   10520:	4f 90       	pop	r4
   10522:	3f 90       	pop	r3
   10524:	2f 90       	pop	r2
   10526:	08 95       	ret
C:\Program Files (x86)\Arduino\libraries\PZEM-004T-v30-master/PZEM004Tv30.cpp:378
    // Read 10 registers starting at 0x00 (no check)
    sendCmd8(CMD_RIR, 0x00, 0x0A, false);


    if(recieve(response, 25) != 25){ // Something went wrong
        return false;
   10528:	80 e0       	ldi	r24, 0x00	; 0
   1052a:	eb cf       	rjmp	.-42     	; 0x10502 <PZEM004Tv30::updateValues()+0x1fc>

0001052c <PZEM004Tv30::voltage()>:
_ZN11PZEM004Tv307voltageEv():
C:\Program Files (x86)\Arduino\libraries\PZEM-004T-v30-master/PZEM004Tv30.cpp:129
 * Get line voltage in Volts
 *
 * @return current L-N volage
*/
float PZEM004Tv30::voltage()
{
   1052c:	cf 93       	push	r28
   1052e:	df 93       	push	r29
   10530:	ec 01       	movw	r28, r24
C:\Program Files (x86)\Arduino\libraries\PZEM-004T-v30-master/PZEM004Tv30.cpp:130
    if(!updateValues()) // Update vales if necessary
   10532:	0e 94 83 81 	call	0x10306	; 0x10306 <PZEM004Tv30::updateValues()>
   10536:	88 23       	and	r24, r24
   10538:	39 f0       	breq	.+14     	; 0x10548 <PZEM004Tv30::voltage()+0x1c>
C:\Program Files (x86)\Arduino\libraries\PZEM-004T-v30-master/PZEM004Tv30.cpp:133
        return NAN; // Update did not work, return NAN

    return _currentValues.voltage;
   1053a:	6c 81       	ldd	r22, Y+4	; 0x04
   1053c:	7d 81       	ldd	r23, Y+5	; 0x05
   1053e:	8e 81       	ldd	r24, Y+6	; 0x06
   10540:	9f 81       	ldd	r25, Y+7	; 0x07
C:\Program Files (x86)\Arduino\libraries\PZEM-004T-v30-master/PZEM004Tv30.cpp:134
}
   10542:	df 91       	pop	r29
   10544:	cf 91       	pop	r28
   10546:	08 95       	ret
C:\Program Files (x86)\Arduino\libraries\PZEM-004T-v30-master/PZEM004Tv30.cpp:131
 * @return current L-N volage
*/
float PZEM004Tv30::voltage()
{
    if(!updateValues()) // Update vales if necessary
        return NAN; // Update did not work, return NAN
   10548:	60 e0       	ldi	r22, 0x00	; 0
   1054a:	70 e0       	ldi	r23, 0x00	; 0
   1054c:	80 ec       	ldi	r24, 0xC0	; 192
   1054e:	9f e7       	ldi	r25, 0x7F	; 127
   10550:	f8 cf       	rjmp	.-16     	; 0x10542 <PZEM004Tv30::voltage()+0x16>

00010552 <PZEM004Tv30::current()>:
_ZN11PZEM004Tv307currentEv():
C:\Program Files (x86)\Arduino\libraries\PZEM-004T-v30-master/PZEM004Tv30.cpp:144
 * Get line in Amps
 *
 * @return line current
*/
float PZEM004Tv30::current()
{
   10552:	cf 93       	push	r28
   10554:	df 93       	push	r29
   10556:	ec 01       	movw	r28, r24
C:\Program Files (x86)\Arduino\libraries\PZEM-004T-v30-master/PZEM004Tv30.cpp:145
    if(!updateValues())// Update vales if necessary
   10558:	0e 94 83 81 	call	0x10306	; 0x10306 <PZEM004Tv30::updateValues()>
   1055c:	88 23       	and	r24, r24
   1055e:	39 f0       	breq	.+14     	; 0x1056e <PZEM004Tv30::current()+0x1c>
C:\Program Files (x86)\Arduino\libraries\PZEM-004T-v30-master/PZEM004Tv30.cpp:148
        return NAN; // Update did not work, return NAN

    return _currentValues.current;
   10560:	68 85       	ldd	r22, Y+8	; 0x08
   10562:	79 85       	ldd	r23, Y+9	; 0x09
   10564:	8a 85       	ldd	r24, Y+10	; 0x0a
   10566:	9b 85       	ldd	r25, Y+11	; 0x0b
C:\Program Files (x86)\Arduino\libraries\PZEM-004T-v30-master/PZEM004Tv30.cpp:149
}
   10568:	df 91       	pop	r29
   1056a:	cf 91       	pop	r28
   1056c:	08 95       	ret
C:\Program Files (x86)\Arduino\libraries\PZEM-004T-v30-master/PZEM004Tv30.cpp:146
 * @return line current
*/
float PZEM004Tv30::current()
{
    if(!updateValues())// Update vales if necessary
        return NAN; // Update did not work, return NAN
   1056e:	60 e0       	ldi	r22, 0x00	; 0
   10570:	70 e0       	ldi	r23, 0x00	; 0
   10572:	80 ec       	ldi	r24, 0xC0	; 192
   10574:	9f e7       	ldi	r25, 0x7F	; 127
   10576:	f8 cf       	rjmp	.-16     	; 0x10568 <PZEM004Tv30::current()+0x16>

00010578 <PZEM004Tv30::power()>:
_ZN11PZEM004Tv305powerEv():
C:\Program Files (x86)\Arduino\libraries\PZEM-004T-v30-master/PZEM004Tv30.cpp:159
 * Get Active power in W
 *
 * @return active power in W
*/
float PZEM004Tv30::power()
{
   10578:	cf 93       	push	r28
   1057a:	df 93       	push	r29
   1057c:	ec 01       	movw	r28, r24
C:\Program Files (x86)\Arduino\libraries\PZEM-004T-v30-master/PZEM004Tv30.cpp:160
    if(!updateValues()) // Update vales if necessary
   1057e:	0e 94 83 81 	call	0x10306	; 0x10306 <PZEM004Tv30::updateValues()>
   10582:	88 23       	and	r24, r24
   10584:	39 f0       	breq	.+14     	; 0x10594 <PZEM004Tv30::power()+0x1c>
C:\Program Files (x86)\Arduino\libraries\PZEM-004T-v30-master/PZEM004Tv30.cpp:163
        return NAN; // Update did not work, return NAN

    return _currentValues.power;
   10586:	6c 85       	ldd	r22, Y+12	; 0x0c
   10588:	7d 85       	ldd	r23, Y+13	; 0x0d
   1058a:	8e 85       	ldd	r24, Y+14	; 0x0e
   1058c:	9f 85       	ldd	r25, Y+15	; 0x0f
C:\Program Files (x86)\Arduino\libraries\PZEM-004T-v30-master/PZEM004Tv30.cpp:164
}
   1058e:	df 91       	pop	r29
   10590:	cf 91       	pop	r28
   10592:	08 95       	ret
C:\Program Files (x86)\Arduino\libraries\PZEM-004T-v30-master/PZEM004Tv30.cpp:161
 * @return active power in W
*/
float PZEM004Tv30::power()
{
    if(!updateValues()) // Update vales if necessary
        return NAN; // Update did not work, return NAN
   10594:	60 e0       	ldi	r22, 0x00	; 0
   10596:	70 e0       	ldi	r23, 0x00	; 0
   10598:	80 ec       	ldi	r24, 0xC0	; 192
   1059a:	9f e7       	ldi	r25, 0x7F	; 127
   1059c:	f8 cf       	rjmp	.-16     	; 0x1058e <PZEM004Tv30::power()+0x16>

0001059e <PZEM004Tv30::energy()>:
_ZN11PZEM004Tv306energyEv():
C:\Program Files (x86)\Arduino\libraries\PZEM-004T-v30-master/PZEM004Tv30.cpp:174
 * Get Active energy in kWh since last reset
 *
 * @return active energy in kWh
*/
float PZEM004Tv30::energy()
{
   1059e:	cf 93       	push	r28
   105a0:	df 93       	push	r29
   105a2:	ec 01       	movw	r28, r24
C:\Program Files (x86)\Arduino\libraries\PZEM-004T-v30-master/PZEM004Tv30.cpp:175
    if(!updateValues()) // Update vales if necessary
   105a4:	0e 94 83 81 	call	0x10306	; 0x10306 <PZEM004Tv30::updateValues()>
   105a8:	88 23       	and	r24, r24
   105aa:	39 f0       	breq	.+14     	; 0x105ba <PZEM004Tv30::energy()+0x1c>
C:\Program Files (x86)\Arduino\libraries\PZEM-004T-v30-master/PZEM004Tv30.cpp:178
        return NAN; // Update did not work, return NAN

    return _currentValues.energy;
   105ac:	68 89       	ldd	r22, Y+16	; 0x10
   105ae:	79 89       	ldd	r23, Y+17	; 0x11
   105b0:	8a 89       	ldd	r24, Y+18	; 0x12
   105b2:	9b 89       	ldd	r25, Y+19	; 0x13
C:\Program Files (x86)\Arduino\libraries\PZEM-004T-v30-master/PZEM004Tv30.cpp:179
}
   105b4:	df 91       	pop	r29
   105b6:	cf 91       	pop	r28
   105b8:	08 95       	ret
C:\Program Files (x86)\Arduino\libraries\PZEM-004T-v30-master/PZEM004Tv30.cpp:176
 * @return active energy in kWh
*/
float PZEM004Tv30::energy()
{
    if(!updateValues()) // Update vales if necessary
        return NAN; // Update did not work, return NAN
   105ba:	60 e0       	ldi	r22, 0x00	; 0
   105bc:	70 e0       	ldi	r23, 0x00	; 0
   105be:	80 ec       	ldi	r24, 0xC0	; 192
   105c0:	9f e7       	ldi	r25, 0x7F	; 127
   105c2:	f8 cf       	rjmp	.-16     	; 0x105b4 <PZEM004Tv30::energy()+0x16>

000105c4 <PZEM004Tv30::frequency()>:
_ZN11PZEM004Tv309frequencyEv():
C:\Program Files (x86)\Arduino\libraries\PZEM-004T-v30-master/PZEM004Tv30.cpp:189
 * Get current line frequency in Hz
 *
 * @return line frequency in Hz
*/
float PZEM004Tv30::frequency()
{
   105c4:	cf 93       	push	r28
   105c6:	df 93       	push	r29
   105c8:	ec 01       	movw	r28, r24
C:\Program Files (x86)\Arduino\libraries\PZEM-004T-v30-master/PZEM004Tv30.cpp:190
    if(!updateValues()) // Update vales if necessary
   105ca:	0e 94 83 81 	call	0x10306	; 0x10306 <PZEM004Tv30::updateValues()>
   105ce:	88 23       	and	r24, r24
   105d0:	39 f0       	breq	.+14     	; 0x105e0 <PZEM004Tv30::frequency()+0x1c>
C:\Program Files (x86)\Arduino\libraries\PZEM-004T-v30-master/PZEM004Tv30.cpp:193
        return NAN; // Update did not work, return NAN

    return _currentValues.frequeny;
   105d2:	6c 89       	ldd	r22, Y+20	; 0x14
   105d4:	7d 89       	ldd	r23, Y+21	; 0x15
   105d6:	8e 89       	ldd	r24, Y+22	; 0x16
   105d8:	9f 89       	ldd	r25, Y+23	; 0x17
C:\Program Files (x86)\Arduino\libraries\PZEM-004T-v30-master/PZEM004Tv30.cpp:194
}
   105da:	df 91       	pop	r29
   105dc:	cf 91       	pop	r28
   105de:	08 95       	ret
C:\Program Files (x86)\Arduino\libraries\PZEM-004T-v30-master/PZEM004Tv30.cpp:191
 * @return line frequency in Hz
*/
float PZEM004Tv30::frequency()
{
    if(!updateValues()) // Update vales if necessary
        return NAN; // Update did not work, return NAN
   105e0:	60 e0       	ldi	r22, 0x00	; 0
   105e2:	70 e0       	ldi	r23, 0x00	; 0
   105e4:	80 ec       	ldi	r24, 0xC0	; 192
   105e6:	9f e7       	ldi	r25, 0x7F	; 127
   105e8:	f8 cf       	rjmp	.-16     	; 0x105da <PZEM004Tv30::frequency()+0x16>

000105ea <PZEM004Tv30::pf()>:
_ZN11PZEM004Tv302pfEv():
C:\Program Files (x86)\Arduino\libraries\PZEM-004T-v30-master/PZEM004Tv30.cpp:204
 * Get power factor of load
 *
 * @return load power factor
*/
float PZEM004Tv30::pf()
{
   105ea:	cf 93       	push	r28
   105ec:	df 93       	push	r29
   105ee:	ec 01       	movw	r28, r24
C:\Program Files (x86)\Arduino\libraries\PZEM-004T-v30-master/PZEM004Tv30.cpp:205
    if(!updateValues()) // Update vales if necessary
   105f0:	0e 94 83 81 	call	0x10306	; 0x10306 <PZEM004Tv30::updateValues()>
   105f4:	88 23       	and	r24, r24
   105f6:	39 f0       	breq	.+14     	; 0x10606 <PZEM004Tv30::pf()+0x1c>
C:\Program Files (x86)\Arduino\libraries\PZEM-004T-v30-master/PZEM004Tv30.cpp:208
        return NAN; // Update did not work, return NAN

    return _currentValues.pf;
   105f8:	68 8d       	ldd	r22, Y+24	; 0x18
   105fa:	79 8d       	ldd	r23, Y+25	; 0x19
   105fc:	8a 8d       	ldd	r24, Y+26	; 0x1a
   105fe:	9b 8d       	ldd	r25, Y+27	; 0x1b
C:\Program Files (x86)\Arduino\libraries\PZEM-004T-v30-master/PZEM004Tv30.cpp:209
}
   10600:	df 91       	pop	r29
   10602:	cf 91       	pop	r28
   10604:	08 95       	ret
C:\Program Files (x86)\Arduino\libraries\PZEM-004T-v30-master/PZEM004Tv30.cpp:206
 * @return load power factor
*/
float PZEM004Tv30::pf()
{
    if(!updateValues()) // Update vales if necessary
        return NAN; // Update did not work, return NAN
   10606:	60 e0       	ldi	r22, 0x00	; 0
   10608:	70 e0       	ldi	r23, 0x00	; 0
   1060a:	80 ec       	ldi	r24, 0xC0	; 192
   1060c:	9f e7       	ldi	r25, 0x7F	; 127
   1060e:	f8 cf       	rjmp	.-16     	; 0x10600 <PZEM004Tv30::pf()+0x16>

00010610 <SoftwareSerial::stopListening()>:
_ZN14SoftwareSerial13stopListeningEv():
C:\Users\bitmu\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.1.3\libraries\SoftwareSerial\src/SoftwareSerial.cpp:214
}

uint8_t SoftwareSerial::rx_pin_read()
{
  return *_receivePortRegister & _receiveBitMask;
}
   10610:	e0 91 49 15 	lds	r30, 0x1549	; 0x801549 <SoftwareSerial::active_object>
   10614:	f0 91 4a 15 	lds	r31, 0x154A	; 0x80154a <SoftwareSerial::active_object+0x1>
   10618:	e8 17       	cp	r30, r24
   1061a:	f9 07       	cpc	r31, r25
   1061c:	69 f4       	brne	.+26     	; 0x10638 <SoftwareSerial::stopListening()+0x28>
_ZN14SoftwareSerial11setRxIntMskEb():
   1061e:	a3 89       	ldd	r26, Z+19	; 0x13
   10620:	b4 89       	ldd	r27, Z+20	; 0x14
   10622:	9c 91       	ld	r25, X
   10624:	85 89       	ldd	r24, Z+21	; 0x15
   10626:	80 95       	com	r24
   10628:	89 23       	and	r24, r25
   1062a:	8c 93       	st	X, r24
_ZN14SoftwareSerial13stopListeningEv():
   1062c:	10 92 4a 15 	sts	0x154A, r1	; 0x80154a <SoftwareSerial::active_object+0x1>
   10630:	10 92 49 15 	sts	0x1549, r1	; 0x801549 <SoftwareSerial::active_object>
   10634:	81 e0       	ldi	r24, 0x01	; 1
   10636:	08 95       	ret
   10638:	80 e0       	ldi	r24, 0x00	; 0
   1063a:	08 95       	ret

0001063c <SoftwareSerial::listen()>:
_ZN14SoftwareSerial6listenEv():
   1063c:	cf 93       	push	r28
   1063e:	df 93       	push	r29
   10640:	ec 01       	movw	r28, r24
   10642:	8a 8d       	ldd	r24, Y+26	; 0x1a
   10644:	9b 8d       	ldd	r25, Y+27	; 0x1b
   10646:	89 2b       	or	r24, r25
   10648:	01 f1       	breq	.+64     	; 0x1068a <SoftwareSerial::listen()+0x4e>
   1064a:	80 91 49 15 	lds	r24, 0x1549	; 0x801549 <SoftwareSerial::active_object>
   1064e:	90 91 4a 15 	lds	r25, 0x154A	; 0x80154a <SoftwareSerial::active_object+0x1>
   10652:	8c 17       	cp	r24, r28
   10654:	9d 07       	cpc	r25, r29
   10656:	c9 f0       	breq	.+50     	; 0x1068a <SoftwareSerial::listen()+0x4e>
   10658:	00 97       	sbiw	r24, 0x00	; 0
   1065a:	11 f0       	breq	.+4      	; 0x10660 <SoftwareSerial::listen()+0x24>
   1065c:	0e 94 08 83 	call	0x10610	; 0x10610 <SoftwareSerial::stopListening()>
   10660:	8e 8d       	ldd	r24, Y+30	; 0x1e
   10662:	8e 7f       	andi	r24, 0xFE	; 254
   10664:	8e 8f       	std	Y+30, r24	; 0x1e
   10666:	10 92 08 15 	sts	0x1508, r1	; 0x801508 <SoftwareSerial::_receive_buffer_tail>
   1066a:	10 92 07 15 	sts	0x1507, r1	; 0x801507 <SoftwareSerial::_receive_buffer_head>
   1066e:	d0 93 4a 15 	sts	0x154A, r29	; 0x80154a <SoftwareSerial::active_object+0x1>
   10672:	c0 93 49 15 	sts	0x1549, r28	; 0x801549 <SoftwareSerial::active_object>
_ZN14SoftwareSerial11setRxIntMskEb():
   10676:	eb 89       	ldd	r30, Y+19	; 0x13
   10678:	fc 89       	ldd	r31, Y+20	; 0x14
   1067a:	80 81       	ld	r24, Z
   1067c:	9d 89       	ldd	r25, Y+21	; 0x15
   1067e:	89 2b       	or	r24, r25
   10680:	80 83       	st	Z, r24
   10682:	81 e0       	ldi	r24, 0x01	; 1
_ZN14SoftwareSerial6listenEv():
   10684:	df 91       	pop	r29
   10686:	cf 91       	pop	r28
   10688:	08 95       	ret
   1068a:	80 e0       	ldi	r24, 0x00	; 0
   1068c:	fb cf       	rjmp	.-10     	; 0x10684 <SoftwareSerial::listen()+0x48>

0001068e <__vector_10>:
__vector_10():
C:\Users\bitmu\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.1.3\libraries\SoftwareSerial\src/SoftwareSerial.cpp:239
  }
}

#if defined(PCINT0_vect)
ISR(PCINT0_vect)
{
   1068e:	1f 92       	push	r1
   10690:	0f 92       	push	r0
   10692:	0f b6       	in	r0, 0x3f	; 63
   10694:	0f 92       	push	r0
   10696:	11 24       	eor	r1, r1
   10698:	0b b6       	in	r0, 0x3b	; 59
   1069a:	0f 92       	push	r0
   1069c:	2f 93       	push	r18
   1069e:	3f 93       	push	r19
   106a0:	4f 93       	push	r20
   106a2:	5f 93       	push	r21
   106a4:	6f 93       	push	r22
   106a6:	7f 93       	push	r23
   106a8:	8f 93       	push	r24
   106aa:	9f 93       	push	r25
   106ac:	af 93       	push	r26
   106ae:	bf 93       	push	r27
   106b0:	ef 93       	push	r30
   106b2:	ff 93       	push	r31
_ZN14SoftwareSerial16handle_interruptEv():
C:\Users\bitmu\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.1.3\libraries\SoftwareSerial\src/SoftwareSerial.cpp:231
#endif

/* static */
inline void SoftwareSerial::handle_interrupt()
{
  if (active_object)
   106b4:	e0 91 49 15 	lds	r30, 0x1549	; 0x801549 <SoftwareSerial::active_object>
   106b8:	f0 91 4a 15 	lds	r31, 0x154A	; 0x80154a <SoftwareSerial::active_object+0x1>
   106bc:	30 97       	sbiw	r30, 0x00	; 0
   106be:	49 f0       	breq	.+18     	; 0x106d2 <__vector_10+0x44>
   106c0:	a6 85       	ldd	r26, Z+14	; 0x0e
   106c2:	b7 85       	ldd	r27, Z+15	; 0x0f
   106c4:	85 85       	ldd	r24, Z+13	; 0x0d
_ZN14SoftwareSerial4recvEv():
C:\Users\bitmu\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.1.3\libraries\SoftwareSerial\src/SoftwareSerial.cpp:148

  uint8_t d = 0;

  // If RX line is high, then we don't see any start bit
  // so interrupt is probably not for us
  if (_inverse_logic ? rx_pin_read() : !rx_pin_read())
   106c6:	96 8d       	ldd	r25, Z+30	; 0x1e
   106c8:	91 ff       	sbrs	r25, 1
   106ca:	16 c0       	rjmp	.+44     	; 0x106f8 <__vector_10+0x6a>
_ZN14SoftwareSerial11rx_pin_readEv():
C:\Users\bitmu\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.1.3\libraries\SoftwareSerial\src/SoftwareSerial.cpp:213
#endif
}

uint8_t SoftwareSerial::rx_pin_read()
{
  return *_receivePortRegister & _receiveBitMask;
   106cc:	9c 91       	ld	r25, X
   106ce:	89 23       	and	r24, r25
_ZN14SoftwareSerial4recvEv():
C:\Users\bitmu\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.1.3\libraries\SoftwareSerial\src/SoftwareSerial.cpp:148

  uint8_t d = 0;

  // If RX line is high, then we don't see any start bit
  // so interrupt is probably not for us
  if (_inverse_logic ? rx_pin_read() : !rx_pin_read())
   106d0:	b1 f4       	brne	.+44     	; 0x106fe <__vector_10+0x70>
__vector_10():
C:\Users\bitmu\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.1.3\libraries\SoftwareSerial\src/SoftwareSerial.cpp:241

#if defined(PCINT0_vect)
ISR(PCINT0_vect)
{
  SoftwareSerial::handle_interrupt();
}
   106d2:	ff 91       	pop	r31
   106d4:	ef 91       	pop	r30
   106d6:	bf 91       	pop	r27
   106d8:	af 91       	pop	r26
   106da:	9f 91       	pop	r25
   106dc:	8f 91       	pop	r24
   106de:	7f 91       	pop	r23
   106e0:	6f 91       	pop	r22
   106e2:	5f 91       	pop	r21
   106e4:	4f 91       	pop	r20
   106e6:	3f 91       	pop	r19
   106e8:	2f 91       	pop	r18
   106ea:	0f 90       	pop	r0
   106ec:	0b be       	out	0x3b, r0	; 59
   106ee:	0f 90       	pop	r0
   106f0:	0f be       	out	0x3f, r0	; 63
   106f2:	0f 90       	pop	r0
   106f4:	1f 90       	pop	r1
   106f6:	18 95       	reti
_ZN14SoftwareSerial11rx_pin_readEv():
C:\Users\bitmu\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.1.3\libraries\SoftwareSerial\src/SoftwareSerial.cpp:213
#endif
}

uint8_t SoftwareSerial::rx_pin_read()
{
  return *_receivePortRegister & _receiveBitMask;
   106f8:	9c 91       	ld	r25, X
   106fa:	89 23       	and	r24, r25
_ZN14SoftwareSerial4recvEv():
C:\Users\bitmu\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.1.3\libraries\SoftwareSerial\src/SoftwareSerial.cpp:148

  uint8_t d = 0;

  // If RX line is high, then we don't see any start bit
  // so interrupt is probably not for us
  if (_inverse_logic ? rx_pin_read() : !rx_pin_read())
   106fc:	51 f7       	brne	.-44     	; 0x106d2 <__vector_10+0x44>
_ZN14SoftwareSerial11setRxIntMskEb():
C:\Users\bitmu\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.1.3\libraries\SoftwareSerial\src/SoftwareSerial.cpp:442
void SoftwareSerial::setRxIntMsk(bool enable)
{
    if (enable)
      *_pcint_maskreg |= _pcint_maskvalue;
    else
      *_pcint_maskreg &= ~_pcint_maskvalue;
   106fe:	a3 89       	ldd	r26, Z+19	; 0x13
   10700:	b4 89       	ldd	r27, Z+20	; 0x14
   10702:	9c 91       	ld	r25, X
   10704:	85 89       	ldd	r24, Z+21	; 0x15
   10706:	80 95       	com	r24
   10708:	89 23       	and	r24, r25
   1070a:	8c 93       	st	X, r24
_delay_loop_2():
c:\users\bitmu\appdata\local\arduino15\packages\arduino\tools\avr-gcc\7.3.0-atmel3.6.1-arduino7\avr\include\util/delay_basic.h:110
	__asm__ volatile (
		"1: sbiw %0,1" "\n\t"
		"brne 1b"
		: "=w" (__count)
		: "0" (__count)
	);
   1070c:	86 89       	ldd	r24, Z+22	; 0x16
   1070e:	97 89       	ldd	r25, Z+23	; 0x17
   10710:	01 97       	sbiw	r24, 0x01	; 1
   10712:	f1 f7       	brne	.-4      	; 0x10710 <__vector_10+0x82>
_ZN14SoftwareSerial4recvEv():
C:\Users\bitmu\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.1.3\libraries\SoftwareSerial\src/SoftwareSerial.cpp:162
    DebugPulse(_DEBUG_PIN2, 1);

    // Read each of the 8 bits
    for (uint8_t i=8; i > 0; --i)
    {
      tunedDelay(_rx_delay_intrabit);
   10714:	60 8d       	ldd	r22, Z+24	; 0x18
   10716:	71 8d       	ldd	r23, Z+25	; 0x19
_ZN14SoftwareSerial11rx_pin_readEv():
C:\Users\bitmu\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.1.3\libraries\SoftwareSerial\src/SoftwareSerial.cpp:213
#endif
}

uint8_t SoftwareSerial::rx_pin_read()
{
  return *_receivePortRegister & _receiveBitMask;
   10718:	a6 85       	ldd	r26, Z+14	; 0x0e
   1071a:	b7 85       	ldd	r27, Z+15	; 0x0f
   1071c:	55 85       	ldd	r21, Z+13	; 0x0d
   1071e:	38 e0       	ldi	r19, 0x08	; 8
_ZN14SoftwareSerial4recvEv():
C:\Users\bitmu\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.1.3\libraries\SoftwareSerial\src/SoftwareSerial.cpp:144
    "push r26 \n\t"
    "push r27 \n\t"
    ::);
#endif

  uint8_t d = 0;
   10720:	20 e0       	ldi	r18, 0x00	; 0
_delay_loop_2():
c:\users\bitmu\appdata\local\arduino15\packages\arduino\tools\avr-gcc\7.3.0-atmel3.6.1-arduino7\avr\include\util/delay_basic.h:110
   10722:	cb 01       	movw	r24, r22
   10724:	01 97       	sbiw	r24, 0x01	; 1
   10726:	f1 f7       	brne	.-4      	; 0x10724 <__vector_10+0x96>
_ZN14SoftwareSerial4recvEv():
C:\Users\bitmu\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.1.3\libraries\SoftwareSerial\src/SoftwareSerial.cpp:163

    // Read each of the 8 bits
    for (uint8_t i=8; i > 0; --i)
    {
      tunedDelay(_rx_delay_intrabit);
      d >>= 1;
   10728:	82 2f       	mov	r24, r18
   1072a:	90 e0       	ldi	r25, 0x00	; 0
   1072c:	95 95       	asr	r25
   1072e:	87 95       	ror	r24
   10730:	28 2f       	mov	r18, r24
_ZN14SoftwareSerial11rx_pin_readEv():
C:\Users\bitmu\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.1.3\libraries\SoftwareSerial\src/SoftwareSerial.cpp:213
#endif
}

uint8_t SoftwareSerial::rx_pin_read()
{
  return *_receivePortRegister & _receiveBitMask;
   10732:	4c 91       	ld	r20, X
   10734:	45 23       	and	r20, r21
_ZN14SoftwareSerial4recvEv():
C:\Users\bitmu\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.1.3\libraries\SoftwareSerial\src/SoftwareSerial.cpp:165
    for (uint8_t i=8; i > 0; --i)
    {
      tunedDelay(_rx_delay_intrabit);
      d >>= 1;
      DebugPulse(_DEBUG_PIN2, 1);
      if (rx_pin_read())
   10736:	09 f0       	breq	.+2      	; 0x1073a <__vector_10+0xac>
C:\Users\bitmu\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.1.3\libraries\SoftwareSerial\src/SoftwareSerial.cpp:166
        d |= 0x80;
   10738:	20 68       	ori	r18, 0x80	; 128
   1073a:	31 50       	subi	r19, 0x01	; 1
C:\Users\bitmu\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.1.3\libraries\SoftwareSerial\src/SoftwareSerial.cpp:160
    // Wait approximately 1/2 of a bit width to "center" the sample
    tunedDelay(_rx_delay_centering);
    DebugPulse(_DEBUG_PIN2, 1);

    // Read each of the 8 bits
    for (uint8_t i=8; i > 0; --i)
   1073c:	91 f7       	brne	.-28     	; 0x10722 <__vector_10+0x94>
C:\Users\bitmu\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.1.3\libraries\SoftwareSerial\src/SoftwareSerial.cpp:169
      DebugPulse(_DEBUG_PIN2, 1);
      if (rx_pin_read())
        d |= 0x80;
    }

    if (_inverse_logic)
   1073e:	86 8d       	ldd	r24, Z+30	; 0x1e
   10740:	81 fd       	sbrc	r24, 1
C:\Users\bitmu\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.1.3\libraries\SoftwareSerial\src/SoftwareSerial.cpp:170
      d = ~d;
   10742:	20 95       	com	r18
C:\Users\bitmu\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.1.3\libraries\SoftwareSerial\src/SoftwareSerial.cpp:173

    // if buffer full, set the overflow flag and return
    uint8_t next = (_receive_buffer_tail + 1) % _SS_MAX_RX_BUFF;
   10744:	80 91 08 15 	lds	r24, 0x1508	; 0x801508 <SoftwareSerial::_receive_buffer_tail>
   10748:	90 e0       	ldi	r25, 0x00	; 0
   1074a:	01 96       	adiw	r24, 0x01	; 1
   1074c:	8f 73       	andi	r24, 0x3F	; 63
   1074e:	99 27       	eor	r25, r25
C:\Users\bitmu\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.1.3\libraries\SoftwareSerial\src/SoftwareSerial.cpp:174
    if (next != _receive_buffer_head)
   10750:	30 91 07 15 	lds	r19, 0x1507	; 0x801507 <SoftwareSerial::_receive_buffer_head>
   10754:	38 17       	cp	r19, r24
   10756:	99 f0       	breq	.+38     	; 0x1077e <__vector_10+0xf0>
C:\Users\bitmu\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.1.3\libraries\SoftwareSerial\src/SoftwareSerial.cpp:177
    {
      // save new data in buffer: tail points to where byte goes
      _receive_buffer[_receive_buffer_tail] = d; // save new byte
   10758:	a0 91 08 15 	lds	r26, 0x1508	; 0x801508 <SoftwareSerial::_receive_buffer_tail>
   1075c:	b0 e0       	ldi	r27, 0x00	; 0
   1075e:	a7 5f       	subi	r26, 0xF7	; 247
   10760:	ba 4e       	sbci	r27, 0xEA	; 234
   10762:	2c 93       	st	X, r18
C:\Users\bitmu\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.1.3\libraries\SoftwareSerial\src/SoftwareSerial.cpp:178
      _receive_buffer_tail = next;
   10764:	80 93 08 15 	sts	0x1508, r24	; 0x801508 <SoftwareSerial::_receive_buffer_tail>
_delay_loop_2():
c:\users\bitmu\appdata\local\arduino15\packages\arduino\tools\avr-gcc\7.3.0-atmel3.6.1-arduino7\avr\include\util/delay_basic.h:110
   10768:	82 8d       	ldd	r24, Z+26	; 0x1a
   1076a:	93 8d       	ldd	r25, Z+27	; 0x1b
   1076c:	01 97       	sbiw	r24, 0x01	; 1
   1076e:	f1 f7       	brne	.-4      	; 0x1076c <__vector_10+0xde>
_ZN14SoftwareSerial11setRxIntMskEb():
C:\Users\bitmu\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.1.3\libraries\SoftwareSerial\src/SoftwareSerial.cpp:440
}

void SoftwareSerial::setRxIntMsk(bool enable)
{
    if (enable)
      *_pcint_maskreg |= _pcint_maskvalue;
   10770:	a3 89       	ldd	r26, Z+19	; 0x13
   10772:	b4 89       	ldd	r27, Z+20	; 0x14
   10774:	8c 91       	ld	r24, X
   10776:	95 89       	ldd	r25, Z+21	; 0x15
   10778:	89 2b       	or	r24, r25
   1077a:	8c 93       	st	X, r24
__vector_10():
C:\Users\bitmu\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.1.3\libraries\SoftwareSerial\src/SoftwareSerial.cpp:241

#if defined(PCINT0_vect)
ISR(PCINT0_vect)
{
  SoftwareSerial::handle_interrupt();
}
   1077c:	aa cf       	rjmp	.-172    	; 0x106d2 <__vector_10+0x44>
_ZN14SoftwareSerial4recvEv():
C:\Users\bitmu\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.1.3\libraries\SoftwareSerial\src/SoftwareSerial.cpp:183
      _receive_buffer_tail = next;
    }
    else
    {
      DebugPulse(_DEBUG_PIN1, 1);
      _buffer_overflow = true;
   1077e:	86 8d       	ldd	r24, Z+30	; 0x1e
   10780:	81 60       	ori	r24, 0x01	; 1
   10782:	86 8f       	std	Z+30, r24	; 0x1e
   10784:	f1 cf       	rjmp	.-30     	; 0x10768 <__vector_10+0xda>

00010786 <nothing>:
nothing():
C:\Users\bitmu\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/WInterrupts.c:301
        case 6:
          EIMSK &= ~(1 << INT6);
          break;
        case 7:
          EIMSK &= ~(1 << INT7);
          break; 
   10786:	08 95       	ret

00010788 <__vector_1>:
__vector_1():
C:\Users\bitmu\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/WInterrupts.c:398
  IMPLEMENT_ISR(INT6_vect, EXTERNAL_INT_6)
  IMPLEMENT_ISR(INT7_vect, EXTERNAL_INT_7)

// ATmega640, ATmega1280, ATmega2560 - Arduino MEGA compatible pinout
#elif defined(MEGACORE_100_PIN_MEGA_PINOUT) && (defined(__AVR_ATmega640__) || defined(__AVR_ATmega1280__) || defined(__AVR_ATmega2560__))
  IMPLEMENT_ISR(INT0_vect, EXTERNAL_INT_2)
   10788:	1f 92       	push	r1
   1078a:	0f 92       	push	r0
   1078c:	0f b6       	in	r0, 0x3f	; 63
   1078e:	0f 92       	push	r0
   10790:	11 24       	eor	r1, r1
   10792:	0b b6       	in	r0, 0x3b	; 59
   10794:	0f 92       	push	r0
   10796:	2f 93       	push	r18
   10798:	3f 93       	push	r19
   1079a:	4f 93       	push	r20
   1079c:	5f 93       	push	r21
   1079e:	6f 93       	push	r22
   107a0:	7f 93       	push	r23
   107a2:	8f 93       	push	r24
   107a4:	9f 93       	push	r25
   107a6:	af 93       	push	r26
   107a8:	bf 93       	push	r27
   107aa:	ef 93       	push	r30
   107ac:	ff 93       	push	r31
   107ae:	e0 91 0e 02 	lds	r30, 0x020E	; 0x80020e <intFunc+0x4>
   107b2:	f0 91 0f 02 	lds	r31, 0x020F	; 0x80020f <intFunc+0x5>
   107b6:	19 95       	eicall
   107b8:	ff 91       	pop	r31
   107ba:	ef 91       	pop	r30
   107bc:	bf 91       	pop	r27
   107be:	af 91       	pop	r26
   107c0:	9f 91       	pop	r25
   107c2:	8f 91       	pop	r24
   107c4:	7f 91       	pop	r23
   107c6:	6f 91       	pop	r22
   107c8:	5f 91       	pop	r21
   107ca:	4f 91       	pop	r20
   107cc:	3f 91       	pop	r19
   107ce:	2f 91       	pop	r18
   107d0:	0f 90       	pop	r0
   107d2:	0b be       	out	0x3b, r0	; 59
   107d4:	0f 90       	pop	r0
   107d6:	0f be       	out	0x3f, r0	; 63
   107d8:	0f 90       	pop	r0
   107da:	1f 90       	pop	r1
   107dc:	18 95       	reti

000107de <__vector_2>:
__vector_2():
C:\Users\bitmu\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/WInterrupts.c:399
  IMPLEMENT_ISR(INT1_vect, EXTERNAL_INT_3)
   107de:	1f 92       	push	r1
   107e0:	0f 92       	push	r0
   107e2:	0f b6       	in	r0, 0x3f	; 63
   107e4:	0f 92       	push	r0
   107e6:	11 24       	eor	r1, r1
   107e8:	0b b6       	in	r0, 0x3b	; 59
   107ea:	0f 92       	push	r0
   107ec:	2f 93       	push	r18
   107ee:	3f 93       	push	r19
   107f0:	4f 93       	push	r20
   107f2:	5f 93       	push	r21
   107f4:	6f 93       	push	r22
   107f6:	7f 93       	push	r23
   107f8:	8f 93       	push	r24
   107fa:	9f 93       	push	r25
   107fc:	af 93       	push	r26
   107fe:	bf 93       	push	r27
   10800:	ef 93       	push	r30
   10802:	ff 93       	push	r31
   10804:	e0 91 10 02 	lds	r30, 0x0210	; 0x800210 <intFunc+0x6>
   10808:	f0 91 11 02 	lds	r31, 0x0211	; 0x800211 <intFunc+0x7>
   1080c:	19 95       	eicall
   1080e:	ff 91       	pop	r31
   10810:	ef 91       	pop	r30
   10812:	bf 91       	pop	r27
   10814:	af 91       	pop	r26
   10816:	9f 91       	pop	r25
   10818:	8f 91       	pop	r24
   1081a:	7f 91       	pop	r23
   1081c:	6f 91       	pop	r22
   1081e:	5f 91       	pop	r21
   10820:	4f 91       	pop	r20
   10822:	3f 91       	pop	r19
   10824:	2f 91       	pop	r18
   10826:	0f 90       	pop	r0
   10828:	0b be       	out	0x3b, r0	; 59
   1082a:	0f 90       	pop	r0
   1082c:	0f be       	out	0x3f, r0	; 63
   1082e:	0f 90       	pop	r0
   10830:	1f 90       	pop	r1
   10832:	18 95       	reti

00010834 <__vector_3>:
__vector_3():
C:\Users\bitmu\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/WInterrupts.c:400
  IMPLEMENT_ISR(INT2_vect, EXTERNAL_INT_4)
   10834:	1f 92       	push	r1
   10836:	0f 92       	push	r0
   10838:	0f b6       	in	r0, 0x3f	; 63
   1083a:	0f 92       	push	r0
   1083c:	11 24       	eor	r1, r1
   1083e:	0b b6       	in	r0, 0x3b	; 59
   10840:	0f 92       	push	r0
   10842:	2f 93       	push	r18
   10844:	3f 93       	push	r19
   10846:	4f 93       	push	r20
   10848:	5f 93       	push	r21
   1084a:	6f 93       	push	r22
   1084c:	7f 93       	push	r23
   1084e:	8f 93       	push	r24
   10850:	9f 93       	push	r25
   10852:	af 93       	push	r26
   10854:	bf 93       	push	r27
   10856:	ef 93       	push	r30
   10858:	ff 93       	push	r31
   1085a:	e0 91 12 02 	lds	r30, 0x0212	; 0x800212 <intFunc+0x8>
   1085e:	f0 91 13 02 	lds	r31, 0x0213	; 0x800213 <intFunc+0x9>
   10862:	19 95       	eicall
   10864:	ff 91       	pop	r31
   10866:	ef 91       	pop	r30
   10868:	bf 91       	pop	r27
   1086a:	af 91       	pop	r26
   1086c:	9f 91       	pop	r25
   1086e:	8f 91       	pop	r24
   10870:	7f 91       	pop	r23
   10872:	6f 91       	pop	r22
   10874:	5f 91       	pop	r21
   10876:	4f 91       	pop	r20
   10878:	3f 91       	pop	r19
   1087a:	2f 91       	pop	r18
   1087c:	0f 90       	pop	r0
   1087e:	0b be       	out	0x3b, r0	; 59
   10880:	0f 90       	pop	r0
   10882:	0f be       	out	0x3f, r0	; 63
   10884:	0f 90       	pop	r0
   10886:	1f 90       	pop	r1
   10888:	18 95       	reti

0001088a <__vector_4>:
__vector_4():
C:\Users\bitmu\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/WInterrupts.c:401
  IMPLEMENT_ISR(INT3_vect, EXTERNAL_INT_5)
   1088a:	1f 92       	push	r1
   1088c:	0f 92       	push	r0
   1088e:	0f b6       	in	r0, 0x3f	; 63
   10890:	0f 92       	push	r0
   10892:	11 24       	eor	r1, r1
   10894:	0b b6       	in	r0, 0x3b	; 59
   10896:	0f 92       	push	r0
   10898:	2f 93       	push	r18
   1089a:	3f 93       	push	r19
   1089c:	4f 93       	push	r20
   1089e:	5f 93       	push	r21
   108a0:	6f 93       	push	r22
   108a2:	7f 93       	push	r23
   108a4:	8f 93       	push	r24
   108a6:	9f 93       	push	r25
   108a8:	af 93       	push	r26
   108aa:	bf 93       	push	r27
   108ac:	ef 93       	push	r30
   108ae:	ff 93       	push	r31
   108b0:	e0 91 14 02 	lds	r30, 0x0214	; 0x800214 <intFunc+0xa>
   108b4:	f0 91 15 02 	lds	r31, 0x0215	; 0x800215 <intFunc+0xb>
   108b8:	19 95       	eicall
   108ba:	ff 91       	pop	r31
   108bc:	ef 91       	pop	r30
   108be:	bf 91       	pop	r27
   108c0:	af 91       	pop	r26
   108c2:	9f 91       	pop	r25
   108c4:	8f 91       	pop	r24
   108c6:	7f 91       	pop	r23
   108c8:	6f 91       	pop	r22
   108ca:	5f 91       	pop	r21
   108cc:	4f 91       	pop	r20
   108ce:	3f 91       	pop	r19
   108d0:	2f 91       	pop	r18
   108d2:	0f 90       	pop	r0
   108d4:	0b be       	out	0x3b, r0	; 59
   108d6:	0f 90       	pop	r0
   108d8:	0f be       	out	0x3f, r0	; 63
   108da:	0f 90       	pop	r0
   108dc:	1f 90       	pop	r1
   108de:	18 95       	reti

000108e0 <__vector_5>:
__vector_5():
C:\Users\bitmu\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/WInterrupts.c:402
  IMPLEMENT_ISR(INT4_vect, EXTERNAL_INT_0)
   108e0:	1f 92       	push	r1
   108e2:	0f 92       	push	r0
   108e4:	0f b6       	in	r0, 0x3f	; 63
   108e6:	0f 92       	push	r0
   108e8:	11 24       	eor	r1, r1
   108ea:	0b b6       	in	r0, 0x3b	; 59
   108ec:	0f 92       	push	r0
   108ee:	2f 93       	push	r18
   108f0:	3f 93       	push	r19
   108f2:	4f 93       	push	r20
   108f4:	5f 93       	push	r21
   108f6:	6f 93       	push	r22
   108f8:	7f 93       	push	r23
   108fa:	8f 93       	push	r24
   108fc:	9f 93       	push	r25
   108fe:	af 93       	push	r26
   10900:	bf 93       	push	r27
   10902:	ef 93       	push	r30
   10904:	ff 93       	push	r31
   10906:	e0 91 0a 02 	lds	r30, 0x020A	; 0x80020a <intFunc>
   1090a:	f0 91 0b 02 	lds	r31, 0x020B	; 0x80020b <intFunc+0x1>
   1090e:	19 95       	eicall
   10910:	ff 91       	pop	r31
   10912:	ef 91       	pop	r30
   10914:	bf 91       	pop	r27
   10916:	af 91       	pop	r26
   10918:	9f 91       	pop	r25
   1091a:	8f 91       	pop	r24
   1091c:	7f 91       	pop	r23
   1091e:	6f 91       	pop	r22
   10920:	5f 91       	pop	r21
   10922:	4f 91       	pop	r20
   10924:	3f 91       	pop	r19
   10926:	2f 91       	pop	r18
   10928:	0f 90       	pop	r0
   1092a:	0b be       	out	0x3b, r0	; 59
   1092c:	0f 90       	pop	r0
   1092e:	0f be       	out	0x3f, r0	; 63
   10930:	0f 90       	pop	r0
   10932:	1f 90       	pop	r1
   10934:	18 95       	reti

00010936 <__vector_6>:
__vector_6():
C:\Users\bitmu\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/WInterrupts.c:403
  IMPLEMENT_ISR(INT5_vect, EXTERNAL_INT_1)
   10936:	1f 92       	push	r1
   10938:	0f 92       	push	r0
   1093a:	0f b6       	in	r0, 0x3f	; 63
   1093c:	0f 92       	push	r0
   1093e:	11 24       	eor	r1, r1
   10940:	0b b6       	in	r0, 0x3b	; 59
   10942:	0f 92       	push	r0
   10944:	2f 93       	push	r18
   10946:	3f 93       	push	r19
   10948:	4f 93       	push	r20
   1094a:	5f 93       	push	r21
   1094c:	6f 93       	push	r22
   1094e:	7f 93       	push	r23
   10950:	8f 93       	push	r24
   10952:	9f 93       	push	r25
   10954:	af 93       	push	r26
   10956:	bf 93       	push	r27
   10958:	ef 93       	push	r30
   1095a:	ff 93       	push	r31
   1095c:	e0 91 0c 02 	lds	r30, 0x020C	; 0x80020c <intFunc+0x2>
   10960:	f0 91 0d 02 	lds	r31, 0x020D	; 0x80020d <intFunc+0x3>
   10964:	19 95       	eicall
   10966:	ff 91       	pop	r31
   10968:	ef 91       	pop	r30
   1096a:	bf 91       	pop	r27
   1096c:	af 91       	pop	r26
   1096e:	9f 91       	pop	r25
   10970:	8f 91       	pop	r24
   10972:	7f 91       	pop	r23
   10974:	6f 91       	pop	r22
   10976:	5f 91       	pop	r21
   10978:	4f 91       	pop	r20
   1097a:	3f 91       	pop	r19
   1097c:	2f 91       	pop	r18
   1097e:	0f 90       	pop	r0
   10980:	0b be       	out	0x3b, r0	; 59
   10982:	0f 90       	pop	r0
   10984:	0f be       	out	0x3f, r0	; 63
   10986:	0f 90       	pop	r0
   10988:	1f 90       	pop	r1
   1098a:	18 95       	reti

0001098c <__vector_7>:
__vector_7():
C:\Users\bitmu\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/WInterrupts.c:404
  IMPLEMENT_ISR(INT6_vect, EXTERNAL_INT_6)
   1098c:	1f 92       	push	r1
   1098e:	0f 92       	push	r0
   10990:	0f b6       	in	r0, 0x3f	; 63
   10992:	0f 92       	push	r0
   10994:	11 24       	eor	r1, r1
   10996:	0b b6       	in	r0, 0x3b	; 59
   10998:	0f 92       	push	r0
   1099a:	2f 93       	push	r18
   1099c:	3f 93       	push	r19
   1099e:	4f 93       	push	r20
   109a0:	5f 93       	push	r21
   109a2:	6f 93       	push	r22
   109a4:	7f 93       	push	r23
   109a6:	8f 93       	push	r24
   109a8:	9f 93       	push	r25
   109aa:	af 93       	push	r26
   109ac:	bf 93       	push	r27
   109ae:	ef 93       	push	r30
   109b0:	ff 93       	push	r31
   109b2:	e0 91 16 02 	lds	r30, 0x0216	; 0x800216 <intFunc+0xc>
   109b6:	f0 91 17 02 	lds	r31, 0x0217	; 0x800217 <intFunc+0xd>
   109ba:	19 95       	eicall
   109bc:	ff 91       	pop	r31
   109be:	ef 91       	pop	r30
   109c0:	bf 91       	pop	r27
   109c2:	af 91       	pop	r26
   109c4:	9f 91       	pop	r25
   109c6:	8f 91       	pop	r24
   109c8:	7f 91       	pop	r23
   109ca:	6f 91       	pop	r22
   109cc:	5f 91       	pop	r21
   109ce:	4f 91       	pop	r20
   109d0:	3f 91       	pop	r19
   109d2:	2f 91       	pop	r18
   109d4:	0f 90       	pop	r0
   109d6:	0b be       	out	0x3b, r0	; 59
   109d8:	0f 90       	pop	r0
   109da:	0f be       	out	0x3f, r0	; 63
   109dc:	0f 90       	pop	r0
   109de:	1f 90       	pop	r1
   109e0:	18 95       	reti

000109e2 <__vector_8>:
__vector_8():
C:\Users\bitmu\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/WInterrupts.c:405
  IMPLEMENT_ISR(INT7_vect, EXTERNAL_INT_7)
   109e2:	1f 92       	push	r1
   109e4:	0f 92       	push	r0
   109e6:	0f b6       	in	r0, 0x3f	; 63
   109e8:	0f 92       	push	r0
   109ea:	11 24       	eor	r1, r1
   109ec:	0b b6       	in	r0, 0x3b	; 59
   109ee:	0f 92       	push	r0
   109f0:	2f 93       	push	r18
   109f2:	3f 93       	push	r19
   109f4:	4f 93       	push	r20
   109f6:	5f 93       	push	r21
   109f8:	6f 93       	push	r22
   109fa:	7f 93       	push	r23
   109fc:	8f 93       	push	r24
   109fe:	9f 93       	push	r25
   10a00:	af 93       	push	r26
   10a02:	bf 93       	push	r27
   10a04:	ef 93       	push	r30
   10a06:	ff 93       	push	r31
   10a08:	e0 91 18 02 	lds	r30, 0x0218	; 0x800218 <intFunc+0xe>
   10a0c:	f0 91 19 02 	lds	r31, 0x0219	; 0x800219 <intFunc+0xf>
   10a10:	19 95       	eicall
   10a12:	ff 91       	pop	r31
   10a14:	ef 91       	pop	r30
   10a16:	bf 91       	pop	r27
   10a18:	af 91       	pop	r26
   10a1a:	9f 91       	pop	r25
   10a1c:	8f 91       	pop	r24
   10a1e:	7f 91       	pop	r23
   10a20:	6f 91       	pop	r22
   10a22:	5f 91       	pop	r21
   10a24:	4f 91       	pop	r20
   10a26:	3f 91       	pop	r19
   10a28:	2f 91       	pop	r18
   10a2a:	0f 90       	pop	r0
   10a2c:	0b be       	out	0x3b, r0	; 59
   10a2e:	0f 90       	pop	r0
   10a30:	0f be       	out	0x3f, r0	; 63
   10a32:	0f 90       	pop	r0
   10a34:	1f 90       	pop	r1
   10a36:	18 95       	reti

00010a38 <yield>:
__empty():
C:\Users\bitmu\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/hooks.c:30
 * Its defined as a weak symbol and it can be redefined to implement a
 * real cooperative scheduler.
 */
static void __empty() {
  // Empty
}
   10a38:	08 95       	ret

00010a3a <__vector_23>:
__vector_23():
C:\Users\bitmu\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring.c:159
#if defined(__AVR_ATtiny24__) || defined(__AVR_ATtiny44__) || defined(__AVR_ATtiny84__)
ISR(TIM0_OVF_vect)
#else
ISR(TIMER0_OVF_vect)
#endif
{
   10a3a:	1f 92       	push	r1
   10a3c:	0f 92       	push	r0
   10a3e:	0f b6       	in	r0, 0x3f	; 63
   10a40:	0f 92       	push	r0
   10a42:	11 24       	eor	r1, r1
   10a44:	2f 93       	push	r18
   10a46:	3f 93       	push	r19
   10a48:	8f 93       	push	r24
   10a4a:	9f 93       	push	r25
   10a4c:	af 93       	push	r26
   10a4e:	bf 93       	push	r27
C:\Users\bitmu\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring.c:167
  static unsigned char timer0_exact = 0;
#endif

  // copy these to local variables so they can be stored in registers
  // (volatile variables must be read from memory on every access, so this saves time)
  unsigned long m = timer0_millis;
   10a50:	80 91 50 15 	lds	r24, 0x1550	; 0x801550 <timer0_millis>
   10a54:	90 91 51 15 	lds	r25, 0x1551	; 0x801551 <timer0_millis+0x1>
   10a58:	a0 91 52 15 	lds	r26, 0x1552	; 0x801552 <timer0_millis+0x2>
   10a5c:	b0 91 53 15 	lds	r27, 0x1553	; 0x801553 <timer0_millis+0x3>
C:\Users\bitmu\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring.c:168
  unsigned char f = timer0_fract;
   10a60:	30 91 4f 15 	lds	r19, 0x154F	; 0x80154f <timer0_fract>
C:\Users\bitmu\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring.c:170

  f += FRACT_INC FRACT_INC_PLUS;
   10a64:	23 e0       	ldi	r18, 0x03	; 3
   10a66:	23 0f       	add	r18, r19
C:\Users\bitmu\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring.c:200
    ++f;
  }
#endif
#endif // CORRECT_EXACT_MILLIS

  if (f >= FRACT_MAX) {
   10a68:	2d 37       	cpi	r18, 0x7D	; 125
   10a6a:	68 f1       	brcs	.+90     	; 0x10ac6 <__vector_23+0x8c>
C:\Users\bitmu\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring.c:201
    f -= FRACT_MAX;
   10a6c:	26 e8       	ldi	r18, 0x86	; 134
   10a6e:	23 0f       	add	r18, r19
C:\Users\bitmu\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring.c:202
    m += MILLIS_INC + 1;
   10a70:	02 96       	adiw	r24, 0x02	; 2
   10a72:	a1 1d       	adc	r26, r1
   10a74:	b1 1d       	adc	r27, r1
C:\Users\bitmu\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring.c:208
  }
  else {
    m += MILLIS_INC;
  }

  timer0_fract = f;
   10a76:	20 93 4f 15 	sts	0x154F, r18	; 0x80154f <timer0_fract>
C:\Users\bitmu\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring.c:209
  timer0_millis = m;
   10a7a:	80 93 50 15 	sts	0x1550, r24	; 0x801550 <timer0_millis>
   10a7e:	90 93 51 15 	sts	0x1551, r25	; 0x801551 <timer0_millis+0x1>
   10a82:	a0 93 52 15 	sts	0x1552, r26	; 0x801552 <timer0_millis+0x2>
   10a86:	b0 93 53 15 	sts	0x1553, r27	; 0x801553 <timer0_millis+0x3>
C:\Users\bitmu\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring.c:211
#ifndef CORRECT_EXACT_MICROS
  timer0_overflow_count++;
   10a8a:	80 91 4b 15 	lds	r24, 0x154B	; 0x80154b <timer0_overflow_count>
   10a8e:	90 91 4c 15 	lds	r25, 0x154C	; 0x80154c <timer0_overflow_count+0x1>
   10a92:	a0 91 4d 15 	lds	r26, 0x154D	; 0x80154d <timer0_overflow_count+0x2>
   10a96:	b0 91 4e 15 	lds	r27, 0x154E	; 0x80154e <timer0_overflow_count+0x3>
   10a9a:	01 96       	adiw	r24, 0x01	; 1
   10a9c:	a1 1d       	adc	r26, r1
   10a9e:	b1 1d       	adc	r27, r1
   10aa0:	80 93 4b 15 	sts	0x154B, r24	; 0x80154b <timer0_overflow_count>
   10aa4:	90 93 4c 15 	sts	0x154C, r25	; 0x80154c <timer0_overflow_count+0x1>
   10aa8:	a0 93 4d 15 	sts	0x154D, r26	; 0x80154d <timer0_overflow_count+0x2>
   10aac:	b0 93 4e 15 	sts	0x154E, r27	; 0x80154e <timer0_overflow_count+0x3>
C:\Users\bitmu\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring.c:213
#endif
}
   10ab0:	bf 91       	pop	r27
   10ab2:	af 91       	pop	r26
   10ab4:	9f 91       	pop	r25
   10ab6:	8f 91       	pop	r24
   10ab8:	3f 91       	pop	r19
   10aba:	2f 91       	pop	r18
   10abc:	0f 90       	pop	r0
   10abe:	0f be       	out	0x3f, r0	; 63
   10ac0:	0f 90       	pop	r0
   10ac2:	1f 90       	pop	r1
   10ac4:	18 95       	reti
C:\Users\bitmu\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring.c:205
  if (f >= FRACT_MAX) {
    f -= FRACT_MAX;
    m += MILLIS_INC + 1;
  }
  else {
    m += MILLIS_INC;
   10ac6:	01 96       	adiw	r24, 0x01	; 1
   10ac8:	a1 1d       	adc	r26, r1
   10aca:	b1 1d       	adc	r27, r1
   10acc:	d4 cf       	rjmp	.-88     	; 0x10a76 <__vector_23+0x3c>

00010ace <millis>:
millis():
C:\Users\bitmu\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring.c:218
}

unsigned long millis()
{
  unsigned long m;
  uint8_t oldSREG = SREG;
   10ace:	2f b7       	in	r18, 0x3f	; 63
C:\Users\bitmu\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring.c:222

  // disable interrupts while we read timer0_millis or we might get an
  // inconsistent value (e.g. in the middle of a write to timer0_millis)
  cli();
   10ad0:	f8 94       	cli
C:\Users\bitmu\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring.c:223
  m = timer0_millis;
   10ad2:	60 91 50 15 	lds	r22, 0x1550	; 0x801550 <timer0_millis>
   10ad6:	70 91 51 15 	lds	r23, 0x1551	; 0x801551 <timer0_millis+0x1>
   10ada:	80 91 52 15 	lds	r24, 0x1552	; 0x801552 <timer0_millis+0x2>
   10ade:	90 91 53 15 	lds	r25, 0x1553	; 0x801553 <timer0_millis+0x3>
C:\Users\bitmu\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring.c:224
  SREG = oldSREG;
   10ae2:	2f bf       	out	0x3f, r18	; 63
C:\Users\bitmu\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring.c:227

  return m;
}
   10ae4:	08 95       	ret

00010ae6 <micros>:
micros():
C:\Users\bitmu\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring.c:237
  unsigned char f; // temporary storage for millis fraction counter
  unsigned char q = 0; // record whether an overflow is flagged
#endif
  // t will be the number where the timer0 counter stopped
  uint8_t t;
  uint8_t oldSREG = SREG;
   10ae6:	3f b7       	in	r19, 0x3f	; 63
C:\Users\bitmu\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring.c:240

  // Stop all interrupts
  cli();
   10ae8:	f8 94       	cli
C:\Users\bitmu\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring.c:247
#ifdef CORRECT_EXACT_MICROS
  // combine exact millisec and 8usec counters
  m = timer0_millis;
  f = timer0_fract;
#else
  m = timer0_overflow_count;
   10aea:	80 91 4b 15 	lds	r24, 0x154B	; 0x80154b <timer0_overflow_count>
   10aee:	90 91 4c 15 	lds	r25, 0x154C	; 0x80154c <timer0_overflow_count+0x1>
   10af2:	a0 91 4d 15 	lds	r26, 0x154D	; 0x80154d <timer0_overflow_count+0x2>
   10af6:	b0 91 4e 15 	lds	r27, 0x154E	; 0x80154e <timer0_overflow_count+0x3>
C:\Users\bitmu\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring.c:252
#endif

  // TCNT0 : The Timer Counter Register
#if defined(TCNT0)
  t = TCNT0;
   10afa:	26 b5       	in	r18, 0x26	; 38
C:\Users\bitmu\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring.c:261
  #error TIMER 0 not defined
#endif

  // Timer0 Interrupt Flag Register
#ifdef TIFR0
  if ((TIFR0 & _BV(TOV0)) && (t < 255))
   10afc:	a8 9b       	sbis	0x15, 0	; 21
   10afe:	05 c0       	rjmp	.+10     	; 0x10b0a <micros+0x24>
C:\Users\bitmu\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring.c:261 (discriminator 1)
   10b00:	2f 3f       	cpi	r18, 0xFF	; 255
   10b02:	19 f0       	breq	.+6      	; 0x10b0a <micros+0x24>
C:\Users\bitmu\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring.c:263
#ifndef CORRECT_EXACT_MICROS
    m++;
   10b04:	01 96       	adiw	r24, 0x01	; 1
   10b06:	a1 1d       	adc	r26, r1
   10b08:	b1 1d       	adc	r27, r1
C:\Users\bitmu\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring.c:276
#else
    q = 1;
#endif
#endif
  // Restore SREG
  SREG = oldSREG;
   10b0a:	3f bf       	out	0x3f, r19	; 63
C:\Users\bitmu\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring.c:292
      ((t * MICROSECONDS_PER_TIMER0_OVERFLOW) >> 8);
  return q ? m + MICROSECONDS_PER_TIMER0_OVERFLOW : m;
#elif 1
  /* All power-of-two Megahertz frequencies enter here, as well as 12.8 MHz.
     We only end up here if right shift before multiplication is exact. */
  return ((m << 8) + t) * (MICROSECONDS_PER_TIMER0_OVERFLOW >> 8);
   10b0c:	ba 2f       	mov	r27, r26
   10b0e:	a9 2f       	mov	r26, r25
   10b10:	98 2f       	mov	r25, r24
   10b12:	88 27       	eor	r24, r24
   10b14:	bc 01       	movw	r22, r24
   10b16:	cd 01       	movw	r24, r26
   10b18:	62 0f       	add	r22, r18
   10b1a:	71 1d       	adc	r23, r1
   10b1c:	81 1d       	adc	r24, r1
   10b1e:	91 1d       	adc	r25, r1
   10b20:	42 e0       	ldi	r20, 0x02	; 2
   10b22:	66 0f       	add	r22, r22
   10b24:	77 1f       	adc	r23, r23
   10b26:	88 1f       	adc	r24, r24
   10b28:	99 1f       	adc	r25, r25
   10b2a:	4a 95       	dec	r20
   10b2c:	d1 f7       	brne	.-12     	; 0x10b22 <micros+0x3c>
C:\Users\bitmu\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring.c:393
  // m & t are multiplied by 4 (since it was already multiplied by 256)
  // t is multiplied by 4
  return ((m << 8) + t) * (64 / clockCyclesPerMicrosecond());
#endif
#endif // 0
}
   10b2e:	08 95       	ret

00010b30 <delay>:
delay():
C:\Users\bitmu\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring.c:396

void delay(unsigned long ms)
{
   10b30:	8f 92       	push	r8
   10b32:	9f 92       	push	r9
   10b34:	af 92       	push	r10
   10b36:	bf 92       	push	r11
   10b38:	cf 92       	push	r12
   10b3a:	df 92       	push	r13
   10b3c:	ef 92       	push	r14
   10b3e:	ff 92       	push	r15
   10b40:	6b 01       	movw	r12, r22
   10b42:	7c 01       	movw	r14, r24
C:\Users\bitmu\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring.c:397
  unsigned long start = micros();
   10b44:	0e 94 73 85 	call	0x10ae6	; 0x10ae6 <micros>
   10b48:	4b 01       	movw	r8, r22
   10b4a:	5c 01       	movw	r10, r24
C:\Users\bitmu\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring.c:399

  while (ms > 0UL) {
   10b4c:	c1 14       	cp	r12, r1
   10b4e:	d1 04       	cpc	r13, r1
   10b50:	e1 04       	cpc	r14, r1
   10b52:	f1 04       	cpc	r15, r1
   10b54:	e9 f0       	breq	.+58     	; 0x10b90 <delay+0x60>
C:\Users\bitmu\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring.c:400
    yield();
   10b56:	0e 94 1c 85 	call	0x10a38	; 0x10a38 <yield>
C:\Users\bitmu\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring.c:401 (discriminator 1)
    while (ms > 0UL && (micros() - start) >= 1000UL) {
   10b5a:	0e 94 73 85 	call	0x10ae6	; 0x10ae6 <micros>
   10b5e:	68 19       	sub	r22, r8
   10b60:	79 09       	sbc	r23, r9
   10b62:	8a 09       	sbc	r24, r10
   10b64:	9b 09       	sbc	r25, r11
   10b66:	68 3e       	cpi	r22, 0xE8	; 232
   10b68:	73 40       	sbci	r23, 0x03	; 3
   10b6a:	81 05       	cpc	r24, r1
   10b6c:	91 05       	cpc	r25, r1
   10b6e:	70 f3       	brcs	.-36     	; 0x10b4c <delay+0x1c>
C:\Users\bitmu\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring.c:402
      ms--;
   10b70:	21 e0       	ldi	r18, 0x01	; 1
   10b72:	c2 1a       	sub	r12, r18
   10b74:	d1 08       	sbc	r13, r1
   10b76:	e1 08       	sbc	r14, r1
   10b78:	f1 08       	sbc	r15, r1
C:\Users\bitmu\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring.c:403
      start += 1000UL;
   10b7a:	88 ee       	ldi	r24, 0xE8	; 232
   10b7c:	88 0e       	add	r8, r24
   10b7e:	83 e0       	ldi	r24, 0x03	; 3
   10b80:	98 1e       	adc	r9, r24
   10b82:	a1 1c       	adc	r10, r1
   10b84:	b1 1c       	adc	r11, r1
C:\Users\bitmu\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring.c:401
{
  unsigned long start = micros();

  while (ms > 0UL) {
    yield();
    while (ms > 0UL && (micros() - start) >= 1000UL) {
   10b86:	c1 14       	cp	r12, r1
   10b88:	d1 04       	cpc	r13, r1
   10b8a:	e1 04       	cpc	r14, r1
   10b8c:	f1 04       	cpc	r15, r1
   10b8e:	29 f7       	brne	.-54     	; 0x10b5a <delay+0x2a>
C:\Users\bitmu\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring.c:406
      ms--;
      start += 1000UL;
    }
  }
}
   10b90:	ff 90       	pop	r15
   10b92:	ef 90       	pop	r14
   10b94:	df 90       	pop	r13
   10b96:	cf 90       	pop	r12
   10b98:	bf 90       	pop	r11
   10b9a:	af 90       	pop	r10
   10b9c:	9f 90       	pop	r9
   10b9e:	8f 90       	pop	r8
   10ba0:	08 95       	ret

00010ba2 <delayMicroseconds>:
delayMicroseconds():
C:\Users\bitmu\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring.c:619
  us -= 7; // = 2 cycles

#elif F_CPU >= 16000000L
  // for a one-microsecond delay, simply return.  the overhead
  // of the function call takes 14 (16) cycles, which is 1 us
  if (us <= 1) return; //  = 3 cycles, (4 when true)
   10ba2:	82 30       	cpi	r24, 0x02	; 2
   10ba4:	91 05       	cpc	r25, r1
   10ba6:	38 f0       	brcs	.+14     	; 0x10bb6 <delayMicroseconds+0x14>
C:\Users\bitmu\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring.c:624

  // the following loop takes 1/4 of a microsecond (4 cycles)
  // per iteration, so execute it four times for each microsecond of
  // delay requested.
  us <<= 2; // x4 us, = 4 cycles
   10ba8:	88 0f       	add	r24, r24
   10baa:	99 1f       	adc	r25, r25
   10bac:	88 0f       	add	r24, r24
   10bae:	99 1f       	adc	r25, r25
C:\Users\bitmu\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring.c:629

  // account for the time taken in the preceeding commands.
  // we just burned 19 (21) cycles above, remove 5, (5*4=20)
  // to 2nd us is at least 8 so we can substract 5
  us -= 5; // = 2 cycles,
   10bb0:	05 97       	sbiw	r24, 0x05	; 5
C:\Users\bitmu\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring.c:929
  us >>= 2; // us div 4, = 4 cycles

#endif

  // busy wait
  __asm__ __volatile__ (
   10bb2:	01 97       	sbiw	r24, 0x01	; 1
   10bb4:	f1 f7       	brne	.-4      	; 0x10bb2 <delayMicroseconds+0x10>
C:\Users\bitmu\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring.c:939
    "   brne 1b"                     // 2 cycles
    : /* no outputs */
    : "w" (us)
  );
  // return = 4 cycles
}
   10bb6:	08 95       	ret

00010bb8 <init>:
init():
C:\Users\bitmu\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring.c:945

void init()
{
  // this needs to be called before setup() or some functions won't
  // work there
  sei();
   10bb8:	78 94       	sei
C:\Users\bitmu\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring.c:957

  // On the ATmega168, timer 0 is also used for fast hardware pwm
  // (using phase-correct PWM would mean that timer 0 overflowed half as often
  // resulting in different millis() behavior on the ATmega8 and ATmega168)
#if defined(TCCR0A) && defined(WGM01)
  TCCR0A |= _BV(WGM01) | _BV(WGM00);
   10bba:	84 b5       	in	r24, 0x24	; 36
   10bbc:	83 60       	ori	r24, 0x03	; 3
   10bbe:	84 bd       	out	0x24, r24	; 36
C:\Users\bitmu\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring.c:972
  #if defined(WGM00) && defined(WGM01) // The ATmega8 doesn't have WGM00 and WGM01
    TCCR0 |= _BV(WGM01) | _BV(WGM00);
  #endif
#elif defined(TCCR0B) && defined(CS01) && defined(CS00)
  // This combination is for the standard 168/328/640/1280/1281/2560/2561
  TCCR0B |= _BV(CS01) | _BV(CS00);
   10bc0:	85 b5       	in	r24, 0x25	; 37
   10bc2:	83 60       	ori	r24, 0x03	; 3
   10bc4:	85 bd       	out	0x25, r24	; 37
C:\Users\bitmu\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring.c:984

// Enable timer 0 overflow interrupt
#if defined(TIMSK) && defined(TOIE0)
  TIMSK |= _BV(TOIE0);
#elif defined(TIMSK0) && defined(TOIE0)
  TIMSK0 |= _BV(TOIE0);
   10bc6:	ee e6       	ldi	r30, 0x6E	; 110
   10bc8:	f0 e0       	ldi	r31, 0x00	; 0
   10bca:	80 81       	ld	r24, Z
   10bcc:	81 60       	ori	r24, 0x01	; 1
   10bce:	80 83       	st	Z, r24
C:\Users\bitmu\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring.c:995
// this is better for motors as it ensures an even waveform
// note, however, that fast pwm mode can achieve a frequency of up
// 8 MHz (with a 16 MHz clock) at 50% duty cycle

#if defined(TCCR1B) && defined(CS11) && defined(CS10)
  TCCR1B = _BV(CS11); // Set timer 1 prescale factor to 64
   10bd0:	e1 e8       	ldi	r30, 0x81	; 129
   10bd2:	f0 e0       	ldi	r31, 0x00	; 0
   10bd4:	82 e0       	ldi	r24, 0x02	; 2
   10bd6:	80 83       	st	Z, r24
C:\Users\bitmu\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring.c:997
#if F_CPU >= 8000000L
  TCCR1B |= _BV(CS10);
   10bd8:	80 81       	ld	r24, Z
   10bda:	81 60       	ori	r24, 0x01	; 1
   10bdc:	80 83       	st	Z, r24
C:\Users\bitmu\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring.c:1006
#if F_CPU >= 8000000L
  TCCR1 |= _BV(CS10);
#endif
#endif
#if defined(TCCR1A) && defined(WGM10)
  TCCR1A |= _BV(WGM10); // Put timer 1 in 8-bit phase correct pwm mode
   10bde:	e0 e8       	ldi	r30, 0x80	; 128
   10be0:	f0 e0       	ldi	r31, 0x00	; 0
   10be2:	80 81       	ld	r24, Z
   10be4:	81 60       	ori	r24, 0x01	; 1
   10be6:	80 83       	st	Z, r24
C:\Users\bitmu\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring.c:1013

// Set timer 2 prescale factor to 64
#if defined(TCCR2) && defined(CS22)
  TCCR2 |= _BV(CS22);
#elif defined(TCCR2B) && defined(CS22)
  TCCR2B |= _BV(CS22);
   10be8:	e1 eb       	ldi	r30, 0xB1	; 177
   10bea:	f0 e0       	ldi	r31, 0x00	; 0
   10bec:	80 81       	ld	r24, Z
   10bee:	84 60       	ori	r24, 0x04	; 4
   10bf0:	80 83       	st	Z, r24
C:\Users\bitmu\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring.c:1022

// Configure timer 2 for phase correct pwm (8-bit)
#if defined(TCCR2) && defined(WGM20)
  TCCR2 |= _BV(WGM20);
#elif defined(TCCR2A) && defined(WGM20)
  TCCR2A |= _BV(WGM20);
   10bf2:	e0 eb       	ldi	r30, 0xB0	; 176
   10bf4:	f0 e0       	ldi	r31, 0x00	; 0
   10bf6:	80 81       	ld	r24, Z
   10bf8:	81 60       	ori	r24, 0x01	; 1
   10bfa:	80 83       	st	Z, r24
C:\Users\bitmu\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring.c:1028
//#else
  // Timer 2 not finished (may not be present on this CPU)
#endif

#if defined(TCCR3B) && defined(CS31) && defined(WGM30)
  TCCR3B |= _BV(CS31) | _BV(CS30); // Set timer 3 prescale factor to 64
   10bfc:	e1 e9       	ldi	r30, 0x91	; 145
   10bfe:	f0 e0       	ldi	r31, 0x00	; 0
   10c00:	80 81       	ld	r24, Z
   10c02:	83 60       	ori	r24, 0x03	; 3
   10c04:	80 83       	st	Z, r24
C:\Users\bitmu\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring.c:1029
  TCCR3A |= _BV(WGM30);            // Put timer 3 in 8-bit phase correct pwm mode
   10c06:	e0 e9       	ldi	r30, 0x90	; 144
   10c08:	f0 e0       	ldi	r31, 0x00	; 0
   10c0a:	80 81       	ld	r24, Z
   10c0c:	81 60       	ori	r24, 0x01	; 1
   10c0e:	80 83       	st	Z, r24
C:\Users\bitmu\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring.c:1038
  TCCR4B |= _BV(CS42) | _BV(CS41) | _BV(CS40); // Set timer 4 prescale factor to 64
  TCCR4D |= _BV(WGM40);                        // Put timer 4 in phase- and frequency-correct PWM mode
  TCCR4A |= _BV(PWM4A);                        // Enable PWM mode for comparator OCR4A
  TCCR4C |= _BV(PWM4D);                        // Enable PWM mode for comparator OCR4D
#elif defined(TCCR4B) && defined(CS41) && defined(WGM40)
  TCCR4B |= _BV(CS41) | _BV(CS40); // Set timer 4 prescale factor to 64
   10c10:	e1 ea       	ldi	r30, 0xA1	; 161
   10c12:	f0 e0       	ldi	r31, 0x00	; 0
   10c14:	80 81       	ld	r24, Z
   10c16:	83 60       	ori	r24, 0x03	; 3
   10c18:	80 83       	st	Z, r24
C:\Users\bitmu\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring.c:1039
  TCCR4A |= _BV(WGM40);            // Put timer 4 in 8-bit phase correct pwm mode
   10c1a:	e0 ea       	ldi	r30, 0xA0	; 160
   10c1c:	f0 e0       	ldi	r31, 0x00	; 0
   10c1e:	80 81       	ld	r24, Z
   10c20:	81 60       	ori	r24, 0x01	; 1
   10c22:	80 83       	st	Z, r24
C:\Users\bitmu\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring.c:1043
#endif

#if defined(TCCR5B) && defined(CS51) && defined(WGM50)
  TCCR5B |= _BV(CS51) | _BV(CS50); // Set timer 5 prescale factor to 64
   10c24:	e1 e2       	ldi	r30, 0x21	; 33
   10c26:	f1 e0       	ldi	r31, 0x01	; 1
   10c28:	80 81       	ld	r24, Z
   10c2a:	83 60       	ori	r24, 0x03	; 3
   10c2c:	80 83       	st	Z, r24
C:\Users\bitmu\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring.c:1044
  TCCR5A |= _BV(WGM50);            // Put timer 5 in 8-bit phase correct pwm mode
   10c2e:	e0 e2       	ldi	r30, 0x20	; 32
   10c30:	f1 e0       	ldi	r31, 0x01	; 1
   10c32:	80 81       	ld	r24, Z
   10c34:	81 60       	ori	r24, 0x01	; 1
   10c36:	80 83       	st	Z, r24
C:\Users\bitmu\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring.c:1050
#endif

#if defined(ADCSRA)
  // set a2d prescaler so we are inside the desired 50-200 KHz range.
  #if F_CPU >= 16000000 // 16 MHz / 128 = 125 KHz
    ADCSRA = _BV(ADPS2) | _BV(ADPS1) | _BV(ADPS0) | _BV(ADEN);
   10c38:	87 e8       	ldi	r24, 0x87	; 135
   10c3a:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__TEXT_REGION_LENGTH__+0x70007a>
C:\Users\bitmu\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring.c:1070
  // here so they can be used as normal digital i/o; they will be
  // reconnected in Serial.begin()
#if defined(UCSRB)
  UCSRB = 0;
#elif defined(UCSR0B)
  UCSR0B = 0;
   10c3e:	10 92 c1 00 	sts	0x00C1, r1	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7000c1>
C:\Users\bitmu\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring.c:1072
#endif
}
   10c42:	08 95       	ret

00010c44 <analogRead>:
analogRead():
C:\Users\bitmu\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_analog.c:50
{
  uint8_t low, high;

// Macro located in the pins_arduino.h file
#ifdef analogPinToChannel
  pin = analogPinToChannel(pin);
   10c44:	80 31       	cpi	r24, 0x10	; 16
   10c46:	20 f0       	brcs	.+8      	; 0x10c50 <analogRead+0xc>
C:\Users\bitmu\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_analog.c:50 (discriminator 1)
   10c48:	85 33       	cpi	r24, 0x35	; 53
   10c4a:	08 f4       	brcc	.+2      	; 0x10c4e <analogRead+0xa>
   10c4c:	85 e3       	ldi	r24, 0x35	; 53
   10c4e:	86 53       	subi	r24, 0x36	; 54
C:\Users\bitmu\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_analog.c:62 (discriminator 4)
#endif

#if defined(ADCSRB) && defined(MUX5)
  // the MUX5 bit of ADCSRB selects whether we're reading from channels
  // 0 to 7 (MUX5 low) or 8 to 15 (MUX5 high).
  ADCSRB = (ADCSRB & ~(1 << MUX5)) | (((pin >> 3) & 0x01) << MUX5);
   10c50:	20 91 7b 00 	lds	r18, 0x007B	; 0x80007b <__TEXT_REGION_LENGTH__+0x70007b>
   10c54:	98 2f       	mov	r25, r24
   10c56:	98 70       	andi	r25, 0x08	; 8
   10c58:	27 7f       	andi	r18, 0xF7	; 247
   10c5a:	92 2b       	or	r25, r18
   10c5c:	90 93 7b 00 	sts	0x007B, r25	; 0x80007b <__TEXT_REGION_LENGTH__+0x70007b>
C:\Users\bitmu\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_analog.c:69 (discriminator 4)
  
  // set the analog reference (high two bits of ADMUX) and select the
  // channel (low 4 bits).  this also sets ADLAR (left-adjust result)
  // to 0 (the default).
#if defined(ADMUX)
  ADMUX = (analog_reference << 6) | (pin & 0x07);
   10c60:	20 91 1a 02 	lds	r18, 0x021A	; 0x80021a <analog_reference>
   10c64:	90 e4       	ldi	r25, 0x40	; 64
   10c66:	29 9f       	mul	r18, r25
   10c68:	90 01       	movw	r18, r0
   10c6a:	11 24       	eor	r1, r1
   10c6c:	87 70       	andi	r24, 0x07	; 7
   10c6e:	82 2b       	or	r24, r18
   10c70:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__TEXT_REGION_LENGTH__+0x70007c>
C:\Users\bitmu\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_analog.c:77 (discriminator 4)
  // without a delay, we seem to read from the wrong channel
  //delay(1);

#if defined(ADCSRA) && defined(ADCL)
  // start the conversion
  ADCSRA |= _BV(ADSC);
   10c74:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x70007a>
   10c78:	80 64       	ori	r24, 0x40	; 64
   10c7a:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__TEXT_REGION_LENGTH__+0x70007a>
C:\Users\bitmu\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_analog.c:80 (discriminator 1)

  // ADSC is cleared when the conversion finishes
  while (ADCSRA & _BV(ADSC));
   10c7e:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x70007a>
   10c82:	86 fd       	sbrc	r24, 6
   10c84:	fc cf       	rjmp	.-8      	; 0x10c7e <analogRead+0x3a>
C:\Users\bitmu\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_analog.c:86

  // we have to read ADCL first; doing so locks both ADCL
  // and ADCH until ADCH is read.  reading ADCL second would
  // cause the results of each conversion to be discarded,
  // as ADCL and ADCH would be locked when it completed.
  low  = ADCL;
   10c86:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x700078>
C:\Users\bitmu\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_analog.c:87
  high = ADCH;
   10c8a:	90 91 79 00 	lds	r25, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x700079>
C:\Users\bitmu\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_analog.c:96
  high = 0;
#endif

  // combine the two bytes
  return (high << 8) | low;
}
   10c8e:	08 95       	ret

00010c90 <analogWrite>:
analogWrite():
C:\Users\bitmu\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_analog.c:104
// Right now, PWM output only works on the pins with
// hardware support.  These are defined in the appropriate
// pins_*.c file.  For the rest of the pins, we default
// to digital output.
void analogWrite(uint8_t pin, int val)
{
   10c90:	1f 93       	push	r17
   10c92:	cf 93       	push	r28
   10c94:	df 93       	push	r29
   10c96:	18 2f       	mov	r17, r24
   10c98:	eb 01       	movw	r28, r22
C:\Users\bitmu\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_analog.c:110
  // We need to make sure the PWM output is enabled for those pins
  // that support it, as we turn it off when digitally reading or
  // writing with them.  Also, make sure the pin is in output mode
  // for consistenty with Wiring, which doesn't require a pinMode
  // call for the analog output pins.
  pinMode(pin, OUTPUT);
   10c9a:	61 e0       	ldi	r22, 0x01	; 1
   10c9c:	0e 94 86 87 	call	0x10f0c	; 0x10f0c <pinMode>
C:\Users\bitmu\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_analog.c:111
  if (val == 0)
   10ca0:	20 97       	sbiw	r28, 0x00	; 0
   10ca2:	39 f4       	brne	.+14     	; 0x10cb2 <analogWrite+0x22>
C:\Users\bitmu\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_analog.c:113
  {
    digitalWrite(pin, LOW);
   10ca4:	60 e0       	ldi	r22, 0x00	; 0
C:\Users\bitmu\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_analog.c:117
  }
  else if (val == 255)
  {
    digitalWrite(pin, HIGH);
   10ca6:	81 2f       	mov	r24, r17
C:\Users\bitmu\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_analog.c:308
        } else {
          digitalWrite(pin, HIGH);
        }
    }
  }
}
   10ca8:	df 91       	pop	r29
   10caa:	cf 91       	pop	r28
   10cac:	1f 91       	pop	r17
C:\Users\bitmu\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_analog.c:117
  {
    digitalWrite(pin, LOW);
  }
  else if (val == 255)
  {
    digitalWrite(pin, HIGH);
   10cae:	0c 94 c2 87 	jmp	0x10f84	; 0x10f84 <digitalWrite>
C:\Users\bitmu\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_analog.c:115
  pinMode(pin, OUTPUT);
  if (val == 0)
  {
    digitalWrite(pin, LOW);
  }
  else if (val == 255)
   10cb2:	cf 3f       	cpi	r28, 0xFF	; 255
   10cb4:	d1 05       	cpc	r29, r1
   10cb6:	11 f4       	brne	.+4      	; 0x10cbc <analogWrite+0x2c>
C:\Users\bitmu\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_analog.c:117
  {
    digitalWrite(pin, HIGH);
   10cb8:	61 e0       	ldi	r22, 0x01	; 1
   10cba:	f5 cf       	rjmp	.-22     	; 0x10ca6 <analogWrite+0x16>
C:\Users\bitmu\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_analog.c:121
  }
  else
  {
    switch(digitalPinToTimer(pin))
   10cbc:	e1 2f       	mov	r30, r17
   10cbe:	f0 e0       	ldi	r31, 0x00	; 0
   10cc0:	ed 59       	subi	r30, 0x9D	; 157
   10cc2:	ff 4d       	sbci	r31, 0xDF	; 223
   10cc4:	e4 91       	lpm	r30, Z
   10cc6:	e2 50       	subi	r30, 0x02	; 2
   10cc8:	e2 31       	cpi	r30, 0x12	; 18
   10cca:	08 f0       	brcs	.+2      	; 0x10cce <analogWrite+0x3e>
   10ccc:	b3 c0       	rjmp	.+358    	; 0x10e34 <analogWrite+0x1a4>
   10cce:	f0 e0       	ldi	r31, 0x00	; 0
   10cd0:	88 27       	eor	r24, r24
   10cd2:	e2 59       	subi	r30, 0x92	; 146
   10cd4:	f9 47       	sbci	r31, 0x79	; 121
   10cd6:	8f 4f       	sbci	r24, 0xFF	; 255
   10cd8:	0c 94 2b 92 	jmp	0x12456	; 0x12456 <__tablejump2__>
   10cdc:	80 86       	std	Z+8, r8	; 0x08
   10cde:	88 86       	std	Y+8, r8	; 0x08
   10ce0:	8d 86       	std	Y+13, r8	; 0x0d
   10ce2:	97 86       	std	Z+15, r9	; 0x0f
   10ce4:	a1 86       	std	Z+9, r10	; 0x09
   10ce6:	1a 87       	std	Y+10, r17	; 0x0a
   10ce8:	ab 86       	std	Y+11, r10	; 0x0b
   10cea:	b3 86       	std	Z+11, r11	; 0x0b
   10cec:	bb 86       	std	Y+11, r11	; 0x0b
   10cee:	c5 86       	std	Z+13, r12	; 0x0d
   10cf0:	cf 86       	std	Y+15, r12	; 0x0f
   10cf2:	d9 86       	std	Y+9, r13	; 0x09
   10cf4:	e8 86       	std	Y+8, r14	; 0x08
   10cf6:	f2 86       	std	Z+10, r15	; 0x0a
   10cf8:	1a 87       	std	Y+10, r17	; 0x0a
   10cfa:	fc 86       	std	Y+12, r15	; 0x0c
   10cfc:	06 87       	std	Z+14, r16	; 0x0e
   10cfe:	10 87       	std	Z+8, r17	; 0x08
C:\Users\bitmu\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_analog.c:141
      #endif

      #if defined(TCCR0A) && defined(COM0A1)
      case TIMER0A:
        // connect pwm to pin on timer 0, channel A
        TCCR0A |= _BV(COM0A1);
   10d00:	84 b5       	in	r24, 0x24	; 36
   10d02:	80 68       	ori	r24, 0x80	; 128
   10d04:	84 bd       	out	0x24, r24	; 36
C:\Users\bitmu\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_analog.c:142
        OCR0A = val; // set pwm duty
   10d06:	c7 bd       	out	0x27, r28	; 39
C:\Users\bitmu\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_analog.c:308
        } else {
          digitalWrite(pin, HIGH);
        }
    }
  }
}
   10d08:	df 91       	pop	r29
   10d0a:	cf 91       	pop	r28
   10d0c:	1f 91       	pop	r17
   10d0e:	08 95       	ret
C:\Users\bitmu\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_analog.c:149
      #endif

      #if defined(TCCR0A) && defined(COM0B1)
      case TIMER0B:
        // connect pwm to pin on timer 0, channel B
        TCCR0A |= _BV(COM0B1);
   10d10:	84 b5       	in	r24, 0x24	; 36
   10d12:	80 62       	ori	r24, 0x20	; 32
   10d14:	84 bd       	out	0x24, r24	; 36
C:\Users\bitmu\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_analog.c:150
        OCR0B = val; // set pwm duty
   10d16:	c8 bd       	out	0x28, r28	; 40
C:\Users\bitmu\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_analog.c:151
        break;
   10d18:	f7 cf       	rjmp	.-18     	; 0x10d08 <analogWrite+0x78>
C:\Users\bitmu\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_analog.c:157
      #endif

      #if defined(TCCR1A) && defined(COM1A1)
      case TIMER1A:
        // connect pwm to pin on timer 1, channel A
        TCCR1A |= _BV(COM1A1);
   10d1a:	80 91 80 00 	lds	r24, 0x0080	; 0x800080 <__TEXT_REGION_LENGTH__+0x700080>
   10d1e:	80 68       	ori	r24, 0x80	; 128
   10d20:	80 93 80 00 	sts	0x0080, r24	; 0x800080 <__TEXT_REGION_LENGTH__+0x700080>
C:\Users\bitmu\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_analog.c:158
        OCR1A = val; // set pwm duty
   10d24:	d0 93 89 00 	sts	0x0089, r29	; 0x800089 <__TEXT_REGION_LENGTH__+0x700089>
   10d28:	c0 93 88 00 	sts	0x0088, r28	; 0x800088 <__TEXT_REGION_LENGTH__+0x700088>
C:\Users\bitmu\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_analog.c:159
        break;
   10d2c:	ed cf       	rjmp	.-38     	; 0x10d08 <analogWrite+0x78>
C:\Users\bitmu\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_analog.c:165
      #endif

      #if defined(TCCR1A) && defined(COM1B1)
      case TIMER1B:
        // connect pwm to pin on timer 1, channel B
        TCCR1A |= _BV(COM1B1);
   10d2e:	80 91 80 00 	lds	r24, 0x0080	; 0x800080 <__TEXT_REGION_LENGTH__+0x700080>
   10d32:	80 62       	ori	r24, 0x20	; 32
   10d34:	80 93 80 00 	sts	0x0080, r24	; 0x800080 <__TEXT_REGION_LENGTH__+0x700080>
C:\Users\bitmu\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_analog.c:166
        OCR1B = val; // set pwm duty
   10d38:	d0 93 8b 00 	sts	0x008B, r29	; 0x80008b <__TEXT_REGION_LENGTH__+0x70008b>
   10d3c:	c0 93 8a 00 	sts	0x008A, r28	; 0x80008a <__TEXT_REGION_LENGTH__+0x70008a>
C:\Users\bitmu\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_analog.c:167
        break;
   10d40:	e3 cf       	rjmp	.-58     	; 0x10d08 <analogWrite+0x78>
C:\Users\bitmu\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_analog.c:173
      #endif

      #if defined(TCCR1A) && defined(COM1C1)
      case TIMER1C:
        // connect pwm to pin on timer 1, channel B
        TCCR1A |= _BV(COM1C1);
   10d42:	80 91 80 00 	lds	r24, 0x0080	; 0x800080 <__TEXT_REGION_LENGTH__+0x700080>
   10d46:	88 60       	ori	r24, 0x08	; 8
   10d48:	80 93 80 00 	sts	0x0080, r24	; 0x800080 <__TEXT_REGION_LENGTH__+0x700080>
C:\Users\bitmu\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_analog.c:174
        OCR1C = val; // set pwm duty
   10d4c:	d0 93 8d 00 	sts	0x008D, r29	; 0x80008d <__TEXT_REGION_LENGTH__+0x70008d>
   10d50:	c0 93 8c 00 	sts	0x008C, r28	; 0x80008c <__TEXT_REGION_LENGTH__+0x70008c>
C:\Users\bitmu\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_analog.c:175
        break;
   10d54:	d9 cf       	rjmp	.-78     	; 0x10d08 <analogWrite+0x78>
C:\Users\bitmu\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_analog.c:189
      #endif

      #if defined(TCCR2A) && defined(COM2A1)
      case TIMER2A:
        // connect pwm to pin on timer 2, channel A
        TCCR2A |= _BV(COM2A1);
   10d56:	80 91 b0 00 	lds	r24, 0x00B0	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7000b0>
   10d5a:	80 68       	ori	r24, 0x80	; 128
   10d5c:	80 93 b0 00 	sts	0x00B0, r24	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7000b0>
C:\Users\bitmu\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_analog.c:190
        OCR2A = val; // set pwm duty
   10d60:	c0 93 b3 00 	sts	0x00B3, r28	; 0x8000b3 <__TEXT_REGION_LENGTH__+0x7000b3>
C:\Users\bitmu\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_analog.c:191
        break;
   10d64:	d1 cf       	rjmp	.-94     	; 0x10d08 <analogWrite+0x78>
C:\Users\bitmu\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_analog.c:197
      #endif

      #if defined(TCCR2A) && defined(COM2B1)
      case TIMER2B:
        // connect pwm to pin on timer 2, channel B
        TCCR2A |= _BV(COM2B1);
   10d66:	80 91 b0 00 	lds	r24, 0x00B0	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7000b0>
   10d6a:	80 62       	ori	r24, 0x20	; 32
   10d6c:	80 93 b0 00 	sts	0x00B0, r24	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7000b0>
C:\Users\bitmu\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_analog.c:198
        OCR2B = val; // set pwm duty
   10d70:	c0 93 b4 00 	sts	0x00B4, r28	; 0x8000b4 <__TEXT_REGION_LENGTH__+0x7000b4>
C:\Users\bitmu\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_analog.c:199
        break;
   10d74:	c9 cf       	rjmp	.-110    	; 0x10d08 <analogWrite+0x78>
C:\Users\bitmu\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_analog.c:205
      #endif

      #if defined(TCCR3A) && defined(COM3A1)
      case TIMER3A:
        // connect pwm to pin on timer 3, channel A
        TCCR3A |= _BV(COM3A1);
   10d76:	80 91 90 00 	lds	r24, 0x0090	; 0x800090 <__TEXT_REGION_LENGTH__+0x700090>
   10d7a:	80 68       	ori	r24, 0x80	; 128
   10d7c:	80 93 90 00 	sts	0x0090, r24	; 0x800090 <__TEXT_REGION_LENGTH__+0x700090>
C:\Users\bitmu\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_analog.c:206
        OCR3A = val; // set pwm duty
   10d80:	d0 93 99 00 	sts	0x0099, r29	; 0x800099 <__TEXT_REGION_LENGTH__+0x700099>
   10d84:	c0 93 98 00 	sts	0x0098, r28	; 0x800098 <__TEXT_REGION_LENGTH__+0x700098>
C:\Users\bitmu\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_analog.c:207
        break;
   10d88:	bf cf       	rjmp	.-130    	; 0x10d08 <analogWrite+0x78>
C:\Users\bitmu\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_analog.c:218
        #if defined(__AVR_ATmega328PB__) // Fix 324PB/328PB silicon bug
          PORTD |= _BV(PD2);
        #elif defined(__AVR_ATmega324PB__)
          PORTB |= _BV(PB7);
        #endif
        TCCR3A |= _BV(COM3B1);
   10d8a:	80 91 90 00 	lds	r24, 0x0090	; 0x800090 <__TEXT_REGION_LENGTH__+0x700090>
   10d8e:	80 62       	ori	r24, 0x20	; 32
   10d90:	80 93 90 00 	sts	0x0090, r24	; 0x800090 <__TEXT_REGION_LENGTH__+0x700090>
C:\Users\bitmu\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_analog.c:219
        OCR3B = val; // set pwm duty
   10d94:	d0 93 9b 00 	sts	0x009B, r29	; 0x80009b <__TEXT_REGION_LENGTH__+0x70009b>
   10d98:	c0 93 9a 00 	sts	0x009A, r28	; 0x80009a <__TEXT_REGION_LENGTH__+0x70009a>
C:\Users\bitmu\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_analog.c:220
        break;
   10d9c:	b5 cf       	rjmp	.-150    	; 0x10d08 <analogWrite+0x78>
C:\Users\bitmu\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_analog.c:226
      #endif

      #if defined(TCCR3A) && defined(COM3C1)
      case TIMER3C:
        // connect pwm to pin on timer 3, channel C
        TCCR3A |= _BV(COM3C1);
   10d9e:	80 91 90 00 	lds	r24, 0x0090	; 0x800090 <__TEXT_REGION_LENGTH__+0x700090>
   10da2:	88 60       	ori	r24, 0x08	; 8
   10da4:	80 93 90 00 	sts	0x0090, r24	; 0x800090 <__TEXT_REGION_LENGTH__+0x700090>
C:\Users\bitmu\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_analog.c:227
        OCR3C = val; // set pwm duty
   10da8:	d0 93 9d 00 	sts	0x009D, r29	; 0x80009d <__TEXT_REGION_LENGTH__+0x70009d>
   10dac:	c0 93 9c 00 	sts	0x009C, r28	; 0x80009c <__TEXT_REGION_LENGTH__+0x70009c>
C:\Users\bitmu\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_analog.c:228
        break;
   10db0:	ab cf       	rjmp	.-170    	; 0x10d08 <analogWrite+0x78>
C:\Users\bitmu\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_analog.c:234
      #endif

      #if defined(TCCR4A)
      case TIMER4A:
        //connect pwm to pin on timer 4, channel A
        TCCR4A |= _BV(COM4A1);
   10db2:	80 91 a0 00 	lds	r24, 0x00A0	; 0x8000a0 <__TEXT_REGION_LENGTH__+0x7000a0>
   10db6:	80 68       	ori	r24, 0x80	; 128
   10db8:	80 93 a0 00 	sts	0x00A0, r24	; 0x8000a0 <__TEXT_REGION_LENGTH__+0x7000a0>
C:\Users\bitmu\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_analog.c:236
        #if defined(COM4A0)    // only used on 32U4
          TCCR4A &= ~_BV(COM4A0);
   10dbc:	80 91 a0 00 	lds	r24, 0x00A0	; 0x8000a0 <__TEXT_REGION_LENGTH__+0x7000a0>
   10dc0:	8f 7b       	andi	r24, 0xBF	; 191
   10dc2:	80 93 a0 00 	sts	0x00A0, r24	; 0x8000a0 <__TEXT_REGION_LENGTH__+0x7000a0>
C:\Users\bitmu\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_analog.c:238
        #endif
        OCR4A = val;  // set pwm duty
   10dc6:	d0 93 a9 00 	sts	0x00A9, r29	; 0x8000a9 <__TEXT_REGION_LENGTH__+0x7000a9>
   10dca:	c0 93 a8 00 	sts	0x00A8, r28	; 0x8000a8 <__TEXT_REGION_LENGTH__+0x7000a8>
C:\Users\bitmu\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_analog.c:239
        break;
   10dce:	9c cf       	rjmp	.-200    	; 0x10d08 <analogWrite+0x78>
C:\Users\bitmu\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_analog.c:250
        #if defined(__AVR_ATmega328PB__) // Fix 324PB/328PB silicon bug
          PORTD |= _BV(PD2);
        #elif defined(__AVR_ATmega324PB__)
          PORTB |= _BV(PB7);
        #endif
        TCCR4A |= _BV(COM4B1);
   10dd0:	80 91 a0 00 	lds	r24, 0x00A0	; 0x8000a0 <__TEXT_REGION_LENGTH__+0x7000a0>
   10dd4:	80 62       	ori	r24, 0x20	; 32
   10dd6:	80 93 a0 00 	sts	0x00A0, r24	; 0x8000a0 <__TEXT_REGION_LENGTH__+0x7000a0>
C:\Users\bitmu\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_analog.c:251
        OCR4B = val; // set pwm duty
   10dda:	d0 93 ab 00 	sts	0x00AB, r29	; 0x8000ab <__TEXT_REGION_LENGTH__+0x7000ab>
   10dde:	c0 93 aa 00 	sts	0x00AA, r28	; 0x8000aa <__TEXT_REGION_LENGTH__+0x7000aa>
C:\Users\bitmu\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_analog.c:252
        break;
   10de2:	92 cf       	rjmp	.-220    	; 0x10d08 <analogWrite+0x78>
C:\Users\bitmu\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_analog.c:258
      #endif

      #if defined(TCCR4A) && defined(COM4C1)
      case TIMER4C:
        // connect pwm to pin on timer 4, channel C
        TCCR4A |= _BV(COM4C1);
   10de4:	80 91 a0 00 	lds	r24, 0x00A0	; 0x8000a0 <__TEXT_REGION_LENGTH__+0x7000a0>
   10de8:	88 60       	ori	r24, 0x08	; 8
   10dea:	80 93 a0 00 	sts	0x00A0, r24	; 0x8000a0 <__TEXT_REGION_LENGTH__+0x7000a0>
C:\Users\bitmu\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_analog.c:259
        OCR4C = val; // set pwm duty
   10dee:	d0 93 ad 00 	sts	0x00AD, r29	; 0x8000ad <__TEXT_REGION_LENGTH__+0x7000ad>
   10df2:	c0 93 ac 00 	sts	0x00AC, r28	; 0x8000ac <__TEXT_REGION_LENGTH__+0x7000ac>
C:\Users\bitmu\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_analog.c:260
        break;
   10df6:	88 cf       	rjmp	.-240    	; 0x10d08 <analogWrite+0x78>
C:\Users\bitmu\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_analog.c:278

              
      #if defined(TCCR5A) && defined(COM5A1)
      case TIMER5A:
        // connect pwm to pin on timer 5, channel A
        TCCR5A |= _BV(COM5A1);
   10df8:	80 91 20 01 	lds	r24, 0x0120	; 0x800120 <__TEXT_REGION_LENGTH__+0x700120>
   10dfc:	80 68       	ori	r24, 0x80	; 128
   10dfe:	80 93 20 01 	sts	0x0120, r24	; 0x800120 <__TEXT_REGION_LENGTH__+0x700120>
C:\Users\bitmu\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_analog.c:279
        OCR5A = val; // set pwm duty
   10e02:	d0 93 29 01 	sts	0x0129, r29	; 0x800129 <__TEXT_REGION_LENGTH__+0x700129>
   10e06:	c0 93 28 01 	sts	0x0128, r28	; 0x800128 <__TEXT_REGION_LENGTH__+0x700128>
C:\Users\bitmu\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_analog.c:280
        break;
   10e0a:	7e cf       	rjmp	.-260    	; 0x10d08 <analogWrite+0x78>
C:\Users\bitmu\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_analog.c:286
      #endif

      #if defined(TCCR5A) && defined(COM5B1)
      case TIMER5B:
        // connect pwm to pin on timer 5, channel B
        TCCR5A |= _BV(COM5B1);
   10e0c:	80 91 20 01 	lds	r24, 0x0120	; 0x800120 <__TEXT_REGION_LENGTH__+0x700120>
   10e10:	80 62       	ori	r24, 0x20	; 32
   10e12:	80 93 20 01 	sts	0x0120, r24	; 0x800120 <__TEXT_REGION_LENGTH__+0x700120>
C:\Users\bitmu\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_analog.c:287
        OCR5B = val; // set pwm duty
   10e16:	d0 93 2b 01 	sts	0x012B, r29	; 0x80012b <__TEXT_REGION_LENGTH__+0x70012b>
   10e1a:	c0 93 2a 01 	sts	0x012A, r28	; 0x80012a <__TEXT_REGION_LENGTH__+0x70012a>
C:\Users\bitmu\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_analog.c:288
        break;
   10e1e:	74 cf       	rjmp	.-280    	; 0x10d08 <analogWrite+0x78>
C:\Users\bitmu\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_analog.c:294
      #endif

      #if defined(TCCR5A) && defined(COM5C1)
      case TIMER5C:
        // connect pwm to pin on timer 5, channel C
        TCCR5A |= _BV(COM5C1);
   10e20:	80 91 20 01 	lds	r24, 0x0120	; 0x800120 <__TEXT_REGION_LENGTH__+0x700120>
   10e24:	88 60       	ori	r24, 0x08	; 8
   10e26:	80 93 20 01 	sts	0x0120, r24	; 0x800120 <__TEXT_REGION_LENGTH__+0x700120>
C:\Users\bitmu\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_analog.c:295
        OCR5C = val; // set pwm duty
   10e2a:	d0 93 2d 01 	sts	0x012D, r29	; 0x80012d <__TEXT_REGION_LENGTH__+0x70012d>
   10e2e:	c0 93 2c 01 	sts	0x012C, r28	; 0x80012c <__TEXT_REGION_LENGTH__+0x70012c>
C:\Users\bitmu\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_analog.c:296
        break;
   10e32:	6a cf       	rjmp	.-300    	; 0x10d08 <analogWrite+0x78>
C:\Users\bitmu\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_analog.c:301
      #endif

      case NOT_ON_TIMER:
      default:
        if (val < 128) {
   10e34:	c0 38       	cpi	r28, 0x80	; 128
   10e36:	d1 05       	cpc	r29, r1
   10e38:	0c f0       	brlt	.+2      	; 0x10e3c <analogWrite+0x1ac>
   10e3a:	3e cf       	rjmp	.-388    	; 0x10cb8 <analogWrite+0x28>
   10e3c:	33 cf       	rjmp	.-410    	; 0x10ca4 <analogWrite+0x14>

00010e3e <turnOffPWM>:
turnOffPWM():
C:\Users\bitmu\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:77
//
//static inline void turnOffPWM(uint8_t timer) __attribute__ ((always_inline));
//static inline void turnOffPWM(uint8_t timer)
static void turnOffPWM(uint8_t timer)
{
  switch (timer)
   10e3e:	82 50       	subi	r24, 0x02	; 2
   10e40:	82 31       	cpi	r24, 0x12	; 18
   10e42:	08 f0       	brcs	.+2      	; 0x10e46 <turnOffPWM+0x8>
   10e44:	5f c0       	rjmp	.+190    	; 0x10f04 <turnOffPWM+0xc6>
   10e46:	e8 2f       	mov	r30, r24
   10e48:	f0 e0       	ldi	r31, 0x00	; 0
   10e4a:	88 27       	eor	r24, r24
   10e4c:	e5 5d       	subi	r30, 0xD5	; 213
   10e4e:	f8 47       	sbci	r31, 0x78	; 120
   10e50:	8f 4f       	sbci	r24, 0xFF	; 255
   10e52:	0c 94 2b 92 	jmp	0x12456	; 0x12456 <__tablejump2__>
   10e56:	7f 87       	std	Y+15, r23	; 0x0f
   10e58:	83 87       	std	Z+11, r24	; 0x0b
   10e5a:	3d 87       	std	Y+13, r19	; 0x0d
   10e5c:	43 87       	std	Z+11, r20	; 0x0b
   10e5e:	47 87       	std	Z+15, r20	; 0x0f
   10e60:	82 87       	std	Z+10, r24	; 0x0a
   10e62:	4b 87       	std	Y+11, r20	; 0x0b
   10e64:	51 87       	std	Z+9, r21	; 0x09
   10e66:	55 87       	std	Z+13, r21	; 0x0d
   10e68:	5b 87       	std	Y+11, r21	; 0x0b
   10e6a:	5f 87       	std	Y+15, r21	; 0x0f
   10e6c:	63 87       	std	Z+11, r22	; 0x0b
   10e6e:	69 87       	std	Y+9, r22	; 0x09
   10e70:	6d 87       	std	Y+13, r22	; 0x0d
   10e72:	82 87       	std	Z+10, r24	; 0x0a
   10e74:	71 87       	std	Z+9, r23	; 0x09
   10e76:	77 87       	std	Z+15, r23	; 0x0f
   10e78:	7b 87       	std	Y+11, r23	; 0x0b
C:\Users\bitmu\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:82
  {
    // Timer1
    #if defined(TCCR1A) && defined(COM1A1)
      case TIMER1A:
        TCCR1A &= ~_BV(COM1A1);
   10e7a:	80 91 80 00 	lds	r24, 0x0080	; 0x800080 <__TEXT_REGION_LENGTH__+0x700080>
   10e7e:	8f 77       	andi	r24, 0x7F	; 127
C:\Users\bitmu\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:87
        break;
    #endif
    #if defined(TCCR1A) && defined(COM1B1)
      case TIMER1B:
        TCCR1A &= ~_BV(COM1B1);
   10e80:	80 93 80 00 	sts	0x0080, r24	; 0x800080 <__TEXT_REGION_LENGTH__+0x700080>
C:\Users\bitmu\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:88
        break;
   10e84:	08 95       	ret
C:\Users\bitmu\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:87
        TCCR1A &= ~_BV(COM1A1);
        break;
    #endif
    #if defined(TCCR1A) && defined(COM1B1)
      case TIMER1B:
        TCCR1A &= ~_BV(COM1B1);
   10e86:	80 91 80 00 	lds	r24, 0x0080	; 0x800080 <__TEXT_REGION_LENGTH__+0x700080>
   10e8a:	8f 7d       	andi	r24, 0xDF	; 223
   10e8c:	f9 cf       	rjmp	.-14     	; 0x10e80 <turnOffPWM+0x42>
C:\Users\bitmu\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:92
        break;
    #endif
    #if defined(TCCR1A) && defined(COM1C1)
      case TIMER1C:
        TCCR1A &= ~_BV(COM1C1);
   10e8e:	80 91 80 00 	lds	r24, 0x0080	; 0x800080 <__TEXT_REGION_LENGTH__+0x700080>
   10e92:	87 7f       	andi	r24, 0xF7	; 247
   10e94:	f5 cf       	rjmp	.-22     	; 0x10e80 <turnOffPWM+0x42>
C:\Users\bitmu\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:104
        TCCR2 &= ~_BV(COM21);
        break;
    #endif
    #if defined(TCCR2A) && defined(COM2A1)
      case TIMER2A:
        TCCR2A &= ~_BV(COM2A1);
   10e96:	80 91 b0 00 	lds	r24, 0x00B0	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7000b0>
   10e9a:	8f 77       	andi	r24, 0x7F	; 127
C:\Users\bitmu\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:109
        break;
    #endif
    #if defined(TCCR2A) && defined(COM2B1)
      case TIMER2B:
        TCCR2A &= ~_BV(COM2B1);
   10e9c:	80 93 b0 00 	sts	0x00B0, r24	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7000b0>
C:\Users\bitmu\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:110
        break;
   10ea0:	08 95       	ret
C:\Users\bitmu\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:109
        TCCR2A &= ~_BV(COM2A1);
        break;
    #endif
    #if defined(TCCR2A) && defined(COM2B1)
      case TIMER2B:
        TCCR2A &= ~_BV(COM2B1);
   10ea2:	80 91 b0 00 	lds	r24, 0x00B0	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7000b0>
   10ea6:	8f 7d       	andi	r24, 0xDF	; 223
   10ea8:	f9 cf       	rjmp	.-14     	; 0x10e9c <turnOffPWM+0x5e>
C:\Users\bitmu\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:116
    #endif

    // Timer3
    #if defined(TCCR3A) && defined(COM3A1)
      case TIMER3A:
        TCCR3A &= ~_BV(COM3A1);
   10eaa:	80 91 90 00 	lds	r24, 0x0090	; 0x800090 <__TEXT_REGION_LENGTH__+0x700090>
   10eae:	8f 77       	andi	r24, 0x7F	; 127
C:\Users\bitmu\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:126
        TCCR3A &= ~_BV(COM3B1);
        break;
    #endif
    #if defined(TCCR3A) && defined(COM3C1)
      case TIMER3C:
        TCCR3A &= ~_BV(COM3C1);
   10eb0:	80 93 90 00 	sts	0x0090, r24	; 0x800090 <__TEXT_REGION_LENGTH__+0x700090>
C:\Users\bitmu\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:127
        break;
   10eb4:	08 95       	ret
C:\Users\bitmu\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:121
        TCCR3A &= ~_BV(COM3A1);
        break;
    #endif
    #if defined(TCCR3A) && defined(COM3B1)
      case TIMER3B:
        TCCR3A &= ~_BV(COM3B1);
   10eb6:	80 91 90 00 	lds	r24, 0x0090	; 0x800090 <__TEXT_REGION_LENGTH__+0x700090>
   10eba:	8f 7d       	andi	r24, 0xDF	; 223
   10ebc:	f9 cf       	rjmp	.-14     	; 0x10eb0 <turnOffPWM+0x72>
C:\Users\bitmu\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:126
        break;
    #endif
    #if defined(TCCR3A) && defined(COM3C1)
      case TIMER3C:
        TCCR3A &= ~_BV(COM3C1);
   10ebe:	80 91 90 00 	lds	r24, 0x0090	; 0x800090 <__TEXT_REGION_LENGTH__+0x700090>
   10ec2:	87 7f       	andi	r24, 0xF7	; 247
   10ec4:	f5 cf       	rjmp	.-22     	; 0x10eb0 <turnOffPWM+0x72>
C:\Users\bitmu\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:133
    #endif

    // Timer4
    #if defined(TCCR4A) && defined(COM4A1)
      case TIMER4A:
        TCCR4A &= ~_BV(COM4A1);
   10ec6:	80 91 a0 00 	lds	r24, 0x00A0	; 0x8000a0 <__TEXT_REGION_LENGTH__+0x7000a0>
   10eca:	8f 77       	andi	r24, 0x7F	; 127
C:\Users\bitmu\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:143
        TCCR4A &= ~_BV(COM4B1);
        break;
    #endif
    #if defined(TCCR4A) && defined(COM4C1)
      case TIMER4C:
        TCCR4A &= ~_BV(COM4C1);
   10ecc:	80 93 a0 00 	sts	0x00A0, r24	; 0x8000a0 <__TEXT_REGION_LENGTH__+0x7000a0>
C:\Users\bitmu\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:144
        break;
   10ed0:	08 95       	ret
C:\Users\bitmu\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:138
        TCCR4A &= ~_BV(COM4A1);
        break;
    #endif
    #if defined(TCCR4A) && defined(COM4B1)
      case  TIMER4B:
        TCCR4A &= ~_BV(COM4B1);
   10ed2:	80 91 a0 00 	lds	r24, 0x00A0	; 0x8000a0 <__TEXT_REGION_LENGTH__+0x7000a0>
   10ed6:	8f 7d       	andi	r24, 0xDF	; 223
   10ed8:	f9 cf       	rjmp	.-14     	; 0x10ecc <turnOffPWM+0x8e>
C:\Users\bitmu\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:143
        break;
    #endif
    #if defined(TCCR4A) && defined(COM4C1)
      case TIMER4C:
        TCCR4A &= ~_BV(COM4C1);
   10eda:	80 91 a0 00 	lds	r24, 0x00A0	; 0x8000a0 <__TEXT_REGION_LENGTH__+0x7000a0>
   10ede:	87 7f       	andi	r24, 0xF7	; 247
   10ee0:	f5 cf       	rjmp	.-22     	; 0x10ecc <turnOffPWM+0x8e>
C:\Users\bitmu\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:155
    #endif

    // Timer5
    #if defined(TCCR5A)
      case TIMER5A:
        TCCR5A &= ~_BV(COM5A1);
   10ee2:	80 91 20 01 	lds	r24, 0x0120	; 0x800120 <__TEXT_REGION_LENGTH__+0x700120>
   10ee6:	8f 77       	andi	r24, 0x7F	; 127
C:\Users\bitmu\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:161
        break;
      case TIMER5B:
        TCCR5A &= ~_BV(COM5B1);
        break;
      case TIMER5C:
        TCCR5A &= ~_BV(COM5C1);
   10ee8:	80 93 20 01 	sts	0x0120, r24	; 0x800120 <__TEXT_REGION_LENGTH__+0x700120>
C:\Users\bitmu\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:162
        break;
   10eec:	08 95       	ret
C:\Users\bitmu\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:158
    #if defined(TCCR5A)
      case TIMER5A:
        TCCR5A &= ~_BV(COM5A1);
        break;
      case TIMER5B:
        TCCR5A &= ~_BV(COM5B1);
   10eee:	80 91 20 01 	lds	r24, 0x0120	; 0x800120 <__TEXT_REGION_LENGTH__+0x700120>
   10ef2:	8f 7d       	andi	r24, 0xDF	; 223
   10ef4:	f9 cf       	rjmp	.-14     	; 0x10ee8 <turnOffPWM+0xaa>
C:\Users\bitmu\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:161
        break;
      case TIMER5C:
        TCCR5A &= ~_BV(COM5C1);
   10ef6:	80 91 20 01 	lds	r24, 0x0120	; 0x800120 <__TEXT_REGION_LENGTH__+0x700120>
   10efa:	87 7f       	andi	r24, 0xF7	; 247
   10efc:	f5 cf       	rjmp	.-22     	; 0x10ee8 <turnOffPWM+0xaa>
C:\Users\bitmu\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:176
        TCCR0 &= ~_BV(COM01);
        break;
    #endif
    #if defined(TCCR0A) && defined(COM0A1)
      case TIMER0A:
        TCCR0A &= ~_BV(COM0A1);
   10efe:	84 b5       	in	r24, 0x24	; 36
   10f00:	8f 77       	andi	r24, 0x7F	; 127
C:\Users\bitmu\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:181
        break;
    #endif
    #if defined(TCCR0A) && defined(COM0B1)
      case TIMER0B:
        TCCR0A &= ~_BV(COM0B1);
   10f02:	84 bd       	out	0x24, r24	; 36
C:\Users\bitmu\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:185
        break;
    #endif
  }
}
   10f04:	08 95       	ret
C:\Users\bitmu\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:181
        TCCR0A &= ~_BV(COM0A1);
        break;
    #endif
    #if defined(TCCR0A) && defined(COM0B1)
      case TIMER0B:
        TCCR0A &= ~_BV(COM0B1);
   10f06:	84 b5       	in	r24, 0x24	; 36
   10f08:	8f 7d       	andi	r24, 0xDF	; 223
   10f0a:	fb cf       	rjmp	.-10     	; 0x10f02 <turnOffPWM+0xc4>

00010f0c <pinMode>:
pinMode():
C:\Users\bitmu\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:30
#define ARDUINO_MAIN
#include "wiring_private.h"
#include "pins_arduino.h"

void pinMode(uint8_t pin, uint8_t mode)
{
   10f0c:	cf 93       	push	r28
   10f0e:	df 93       	push	r29
C:\Users\bitmu\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:31
  uint8_t bit = digitalPinToBitMask(pin);
   10f10:	90 e0       	ldi	r25, 0x00	; 0
   10f12:	fc 01       	movw	r30, r24
   10f14:	e7 54       	subi	r30, 0x47	; 71
   10f16:	ff 4d       	sbci	r31, 0xDF	; 223
   10f18:	24 91       	lpm	r18, Z
C:\Users\bitmu\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:32
  uint8_t port = digitalPinToPort(pin);
   10f1a:	81 5f       	subi	r24, 0xF1	; 241
   10f1c:	9e 4d       	sbci	r25, 0xDE	; 222
   10f1e:	fc 01       	movw	r30, r24
   10f20:	84 91       	lpm	r24, Z
C:\Users\bitmu\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:35
  volatile uint8_t *reg, *out;

  if (port == NOT_A_PIN) return;
   10f22:	88 23       	and	r24, r24
   10f24:	c9 f0       	breq	.+50     	; 0x10f58 <pinMode+0x4c>
C:\Users\bitmu\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:38

  // JWS: can I let the optimizer do this?
  reg = portModeRegister(port);
   10f26:	90 e0       	ldi	r25, 0x00	; 0
   10f28:	88 0f       	add	r24, r24
   10f2a:	99 1f       	adc	r25, r25
   10f2c:	fc 01       	movw	r30, r24
   10f2e:	e7 56       	subi	r30, 0x67	; 103
   10f30:	fe 4d       	sbci	r31, 0xDE	; 222
   10f32:	a5 91       	lpm	r26, Z+
   10f34:	b4 91       	lpm	r27, Z
C:\Users\bitmu\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:39
  out = portOutputRegister(port);
   10f36:	fc 01       	movw	r30, r24
   10f38:	e1 58       	subi	r30, 0x81	; 129
   10f3a:	fe 4d       	sbci	r31, 0xDE	; 222
   10f3c:	c5 91       	lpm	r28, Z+
   10f3e:	d4 91       	lpm	r29, Z
C:\Users\bitmu\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:41

  if (mode == INPUT) { 
   10f40:	61 11       	cpse	r22, r1
   10f42:	0d c0       	rjmp	.+26     	; 0x10f5e <pinMode+0x52>
C:\Users\bitmu\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:42
    uint8_t oldSREG = SREG;
   10f44:	9f b7       	in	r25, 0x3f	; 63
C:\Users\bitmu\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:43
    cli();
   10f46:	f8 94       	cli
C:\Users\bitmu\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:44
    *reg &= ~bit;
   10f48:	8c 91       	ld	r24, X
   10f4a:	20 95       	com	r18
   10f4c:	82 23       	and	r24, r18
   10f4e:	8c 93       	st	X, r24
C:\Users\bitmu\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:45
    *out &= ~bit;
   10f50:	88 81       	ld	r24, Y
   10f52:	28 23       	and	r18, r24
C:\Users\bitmu\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:51
    SREG = oldSREG;
  } else if (mode == INPUT_PULLUP) {
    uint8_t oldSREG = SREG;
    cli();
    *reg &= ~bit;
    *out |= bit;
   10f54:	28 83       	st	Y, r18
C:\Users\bitmu\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:52
    SREG = oldSREG;
   10f56:	9f bf       	out	0x3f, r25	; 63
C:\Users\bitmu\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:59
    uint8_t oldSREG = SREG;
    cli();
    *reg |= bit;
    SREG = oldSREG;
  }
}
   10f58:	df 91       	pop	r29
   10f5a:	cf 91       	pop	r28
   10f5c:	08 95       	ret
C:\Users\bitmu\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:47
    uint8_t oldSREG = SREG;
    cli();
    *reg &= ~bit;
    *out &= ~bit;
    SREG = oldSREG;
  } else if (mode == INPUT_PULLUP) {
   10f5e:	62 30       	cpi	r22, 0x02	; 2
   10f60:	51 f4       	brne	.+20     	; 0x10f76 <pinMode+0x6a>
C:\Users\bitmu\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:48
    uint8_t oldSREG = SREG;
   10f62:	9f b7       	in	r25, 0x3f	; 63
C:\Users\bitmu\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:49
    cli();
   10f64:	f8 94       	cli
C:\Users\bitmu\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:50
    *reg &= ~bit;
   10f66:	3c 91       	ld	r19, X
   10f68:	82 2f       	mov	r24, r18
   10f6a:	80 95       	com	r24
   10f6c:	83 23       	and	r24, r19
   10f6e:	8c 93       	st	X, r24
C:\Users\bitmu\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:51
    *out |= bit;
   10f70:	e8 81       	ld	r30, Y
   10f72:	2e 2b       	or	r18, r30
   10f74:	ef cf       	rjmp	.-34     	; 0x10f54 <pinMode+0x48>
C:\Users\bitmu\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:54
    SREG = oldSREG;
  } else {
    uint8_t oldSREG = SREG;
   10f76:	8f b7       	in	r24, 0x3f	; 63
C:\Users\bitmu\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:55
    cli();
   10f78:	f8 94       	cli
C:\Users\bitmu\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:56
    *reg |= bit;
   10f7a:	ec 91       	ld	r30, X
   10f7c:	2e 2b       	or	r18, r30
   10f7e:	2c 93       	st	X, r18
C:\Users\bitmu\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:57
    SREG = oldSREG;
   10f80:	8f bf       	out	0x3f, r24	; 63
   10f82:	ea cf       	rjmp	.-44     	; 0x10f58 <pinMode+0x4c>

00010f84 <digitalWrite>:
digitalWrite():
C:\Users\bitmu\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:188
    #endif
  }
}

void digitalWrite(uint8_t pin, uint8_t val)
{
   10f84:	1f 93       	push	r17
   10f86:	cf 93       	push	r28
   10f88:	df 93       	push	r29
C:\Users\bitmu\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:189
  uint8_t timer = digitalPinToTimer(pin);
   10f8a:	28 2f       	mov	r18, r24
   10f8c:	30 e0       	ldi	r19, 0x00	; 0
   10f8e:	f9 01       	movw	r30, r18
   10f90:	ed 59       	subi	r30, 0x9D	; 157
   10f92:	ff 4d       	sbci	r31, 0xDF	; 223
   10f94:	84 91       	lpm	r24, Z
C:\Users\bitmu\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:190
  uint8_t bit = digitalPinToBitMask(pin);
   10f96:	f9 01       	movw	r30, r18
   10f98:	e7 54       	subi	r30, 0x47	; 71
   10f9a:	ff 4d       	sbci	r31, 0xDF	; 223
   10f9c:	d4 91       	lpm	r29, Z
C:\Users\bitmu\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:191
  uint8_t port = digitalPinToPort(pin);
   10f9e:	f9 01       	movw	r30, r18
   10fa0:	e1 5f       	subi	r30, 0xF1	; 241
   10fa2:	fe 4d       	sbci	r31, 0xDE	; 222
   10fa4:	c4 91       	lpm	r28, Z
C:\Users\bitmu\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:194
  volatile uint8_t *out;

  if (port == NOT_A_PIN) return;
   10fa6:	cc 23       	and	r28, r28
   10fa8:	a9 f0       	breq	.+42     	; 0x10fd4 <digitalWrite+0x50>
   10faa:	16 2f       	mov	r17, r22
C:\Users\bitmu\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:198

  // If the pin that support PWM output, we need to turn it off
  // before doing a digital write.
  if (timer != NOT_ON_TIMER) turnOffPWM(timer);
   10fac:	81 11       	cpse	r24, r1
C:\Users\bitmu\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:198 (discriminator 1)
   10fae:	0e 94 1f 87 	call	0x10e3e	; 0x10e3e <turnOffPWM>
C:\Users\bitmu\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:200

  out = portOutputRegister(port);
   10fb2:	ec 2f       	mov	r30, r28
   10fb4:	f0 e0       	ldi	r31, 0x00	; 0
   10fb6:	ee 0f       	add	r30, r30
   10fb8:	ff 1f       	adc	r31, r31
   10fba:	e1 58       	subi	r30, 0x81	; 129
   10fbc:	fe 4d       	sbci	r31, 0xDE	; 222
   10fbe:	a5 91       	lpm	r26, Z+
   10fc0:	b4 91       	lpm	r27, Z
C:\Users\bitmu\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:202

  uint8_t oldSREG = SREG;
   10fc2:	8f b7       	in	r24, 0x3f	; 63
C:\Users\bitmu\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:203
  cli();
   10fc4:	f8 94       	cli
C:\Users\bitmu\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:206

  if (val == LOW) {
    *out &= ~bit;
   10fc6:	ec 91       	ld	r30, X
C:\Users\bitmu\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:205
  out = portOutputRegister(port);

  uint8_t oldSREG = SREG;
  cli();

  if (val == LOW) {
   10fc8:	11 11       	cpse	r17, r1
   10fca:	08 c0       	rjmp	.+16     	; 0x10fdc <digitalWrite+0x58>
C:\Users\bitmu\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:206
    *out &= ~bit;
   10fcc:	d0 95       	com	r29
   10fce:	de 23       	and	r29, r30
C:\Users\bitmu\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:208
  } else {
    *out |= bit;
   10fd0:	dc 93       	st	X, r29
C:\Users\bitmu\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:211
  }

  SREG = oldSREG;
   10fd2:	8f bf       	out	0x3f, r24	; 63
C:\Users\bitmu\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:212
}
   10fd4:	df 91       	pop	r29
   10fd6:	cf 91       	pop	r28
   10fd8:	1f 91       	pop	r17
   10fda:	08 95       	ret
C:\Users\bitmu\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:208
  cli();

  if (val == LOW) {
    *out &= ~bit;
  } else {
    *out |= bit;
   10fdc:	de 2b       	or	r29, r30
   10fde:	f8 cf       	rjmp	.-16     	; 0x10fd0 <digitalWrite+0x4c>

00010fe0 <digitalRead>:
digitalRead():
C:\Users\bitmu\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:215

  SREG = oldSREG;
}

int digitalRead(uint8_t pin)
{
   10fe0:	cf 93       	push	r28
   10fe2:	df 93       	push	r29
C:\Users\bitmu\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:216
  uint8_t timer = digitalPinToTimer(pin);
   10fe4:	28 2f       	mov	r18, r24
   10fe6:	30 e0       	ldi	r19, 0x00	; 0
   10fe8:	f9 01       	movw	r30, r18
   10fea:	ed 59       	subi	r30, 0x9D	; 157
   10fec:	ff 4d       	sbci	r31, 0xDF	; 223
   10fee:	84 91       	lpm	r24, Z
C:\Users\bitmu\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:217
  uint8_t bit = digitalPinToBitMask(pin);
   10ff0:	f9 01       	movw	r30, r18
   10ff2:	e7 54       	subi	r30, 0x47	; 71
   10ff4:	ff 4d       	sbci	r31, 0xDF	; 223
   10ff6:	d4 91       	lpm	r29, Z
C:\Users\bitmu\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:218
  uint8_t port = digitalPinToPort(pin);
   10ff8:	f9 01       	movw	r30, r18
   10ffa:	e1 5f       	subi	r30, 0xF1	; 241
   10ffc:	fe 4d       	sbci	r31, 0xDE	; 222
   10ffe:	c4 91       	lpm	r28, Z
C:\Users\bitmu\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:220

  if (port == NOT_A_PIN) return LOW;
   11000:	cc 23       	and	r28, r28
   11002:	a1 f0       	breq	.+40     	; 0x1102c <digitalRead+0x4c>
C:\Users\bitmu\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:224

  // If the pin that support PWM output, we need to turn it off
  // before getting a digital reading.
  if (timer != NOT_ON_TIMER) turnOffPWM(timer);
   11004:	81 11       	cpse	r24, r1
C:\Users\bitmu\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:224 (discriminator 1)
   11006:	0e 94 1f 87 	call	0x10e3e	; 0x10e3e <turnOffPWM>
C:\Users\bitmu\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:226

  if (*portInputRegister(port) & bit) return HIGH;
   1100a:	ec 2f       	mov	r30, r28
   1100c:	f0 e0       	ldi	r31, 0x00	; 0
   1100e:	ee 0f       	add	r30, r30
   11010:	ff 1f       	adc	r31, r31
   11012:	eb 59       	subi	r30, 0x9B	; 155
   11014:	fe 4d       	sbci	r31, 0xDE	; 222
   11016:	a5 91       	lpm	r26, Z+
   11018:	b4 91       	lpm	r27, Z
   1101a:	ec 91       	ld	r30, X
   1101c:	ed 23       	and	r30, r29
   1101e:	81 e0       	ldi	r24, 0x01	; 1
   11020:	90 e0       	ldi	r25, 0x00	; 0
   11022:	09 f4       	brne	.+2      	; 0x11026 <digitalRead+0x46>
   11024:	80 e0       	ldi	r24, 0x00	; 0
C:\Users\bitmu\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:228
  return LOW;
}
   11026:	df 91       	pop	r29
   11028:	cf 91       	pop	r28
   1102a:	08 95       	ret
C:\Users\bitmu\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:220
{
  uint8_t timer = digitalPinToTimer(pin);
  uint8_t bit = digitalPinToBitMask(pin);
  uint8_t port = digitalPinToPort(pin);

  if (port == NOT_A_PIN) return LOW;
   1102c:	80 e0       	ldi	r24, 0x00	; 0
   1102e:	90 e0       	ldi	r25, 0x00	; 0
   11030:	fa cf       	rjmp	.-12     	; 0x11026 <digitalRead+0x46>

00011032 <HardwareSerial::available()>:
_ZN14HardwareSerial9availableEv():
C:\Users\bitmu\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial.cpp:150
  // clear any received data
  _rx_buffer_head = _rx_buffer_tail;
}

int HardwareSerial::available(void)
{
   11032:	fc 01       	movw	r30, r24
C:\Users\bitmu\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial.cpp:151
  return ((unsigned int)(SERIAL_RX_BUFFER_SIZE + _rx_buffer_head - _rx_buffer_tail)) % SERIAL_RX_BUFFER_SIZE;
   11034:	91 8d       	ldd	r25, Z+25	; 0x19
   11036:	22 8d       	ldd	r18, Z+26	; 0x1a
   11038:	89 2f       	mov	r24, r25
   1103a:	90 e0       	ldi	r25, 0x00	; 0
   1103c:	80 5c       	subi	r24, 0xC0	; 192
   1103e:	9f 4f       	sbci	r25, 0xFF	; 255
   11040:	82 1b       	sub	r24, r18
   11042:	91 09       	sbc	r25, r1
C:\Users\bitmu\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial.cpp:152
}
   11044:	8f 73       	andi	r24, 0x3F	; 63
   11046:	99 27       	eor	r25, r25
   11048:	08 95       	ret

0001104a <HardwareSerial::peek()>:
_ZN14HardwareSerial4peekEv():
C:\Users\bitmu\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial.cpp:155

int HardwareSerial::peek(void)
{
   1104a:	fc 01       	movw	r30, r24
C:\Users\bitmu\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial.cpp:156
  if (_rx_buffer_head == _rx_buffer_tail) {
   1104c:	91 8d       	ldd	r25, Z+25	; 0x19
   1104e:	82 8d       	ldd	r24, Z+26	; 0x1a
   11050:	98 17       	cp	r25, r24
   11052:	31 f0       	breq	.+12     	; 0x11060 <HardwareSerial::peek()+0x16>
C:\Users\bitmu\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial.cpp:159
    return -1;
  } else {
    return _rx_buffer[_rx_buffer_tail];
   11054:	82 8d       	ldd	r24, Z+26	; 0x1a
   11056:	e8 0f       	add	r30, r24
   11058:	f1 1d       	adc	r31, r1
   1105a:	85 8d       	ldd	r24, Z+29	; 0x1d
   1105c:	90 e0       	ldi	r25, 0x00	; 0
   1105e:	08 95       	ret
C:\Users\bitmu\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial.cpp:157
}

int HardwareSerial::peek(void)
{
  if (_rx_buffer_head == _rx_buffer_tail) {
    return -1;
   11060:	8f ef       	ldi	r24, 0xFF	; 255
   11062:	9f ef       	ldi	r25, 0xFF	; 255
C:\Users\bitmu\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial.cpp:161
  } else {
    return _rx_buffer[_rx_buffer_tail];
  }
}
   11064:	08 95       	ret

00011066 <HardwareSerial::read()>:
_ZN14HardwareSerial4readEv():
C:\Users\bitmu\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial.cpp:164

int HardwareSerial::read(void)
{
   11066:	fc 01       	movw	r30, r24
C:\Users\bitmu\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial.cpp:166
  // if the head isn't ahead of the tail, we don't have any characters
  if (_rx_buffer_head == _rx_buffer_tail) {
   11068:	91 8d       	ldd	r25, Z+25	; 0x19
   1106a:	82 8d       	ldd	r24, Z+26	; 0x1a
   1106c:	98 17       	cp	r25, r24
   1106e:	61 f0       	breq	.+24     	; 0x11088 <HardwareSerial::read()+0x22>
C:\Users\bitmu\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial.cpp:169
    return -1;
  } else {
    unsigned char c = _rx_buffer[_rx_buffer_tail];
   11070:	a2 8d       	ldd	r26, Z+26	; 0x1a
   11072:	ae 0f       	add	r26, r30
   11074:	bf 2f       	mov	r27, r31
   11076:	b1 1d       	adc	r27, r1
   11078:	5d 96       	adiw	r26, 0x1d	; 29
   1107a:	8c 91       	ld	r24, X
C:\Users\bitmu\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial.cpp:170
    _rx_buffer_tail = (rx_buffer_index_t)(_rx_buffer_tail + 1) % SERIAL_RX_BUFFER_SIZE;
   1107c:	92 8d       	ldd	r25, Z+26	; 0x1a
   1107e:	9f 5f       	subi	r25, 0xFF	; 255
   11080:	9f 73       	andi	r25, 0x3F	; 63
   11082:	92 8f       	std	Z+26, r25	; 0x1a
C:\Users\bitmu\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial.cpp:171
    return c;
   11084:	90 e0       	ldi	r25, 0x00	; 0
   11086:	08 95       	ret
C:\Users\bitmu\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial.cpp:167

int HardwareSerial::read(void)
{
  // if the head isn't ahead of the tail, we don't have any characters
  if (_rx_buffer_head == _rx_buffer_tail) {
    return -1;
   11088:	8f ef       	ldi	r24, 0xFF	; 255
   1108a:	9f ef       	ldi	r25, 0xFF	; 255
C:\Users\bitmu\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial.cpp:173
  } else {
    unsigned char c = _rx_buffer[_rx_buffer_tail];
    _rx_buffer_tail = (rx_buffer_index_t)(_rx_buffer_tail + 1) % SERIAL_RX_BUFFER_SIZE;
    return c;
  }
}
   1108c:	08 95       	ret

0001108e <HardwareSerial::availableForWrite()>:
_ZN14HardwareSerial17availableForWriteEv():
C:\Users\bitmu\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial.cpp:181
{
#if (SERIAL_TX_BUFFER_SIZE>256)
  uint8_t oldSREG = SREG;
  cli();
#endif
  tx_buffer_index_t head = _tx_buffer_head;
   1108e:	fc 01       	movw	r30, r24
   11090:	53 8d       	ldd	r21, Z+27	; 0x1b
C:\Users\bitmu\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial.cpp:182
  tx_buffer_index_t tail = _tx_buffer_tail;
   11092:	44 8d       	ldd	r20, Z+28	; 0x1c
   11094:	25 2f       	mov	r18, r21
   11096:	30 e0       	ldi	r19, 0x00	; 0
   11098:	84 2f       	mov	r24, r20
   1109a:	90 e0       	ldi	r25, 0x00	; 0
C:\Users\bitmu\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial.cpp:186
#if (SERIAL_TX_BUFFER_SIZE>256)
  SREG = oldSREG;
#endif
  if (head >= tail) return SERIAL_TX_BUFFER_SIZE - 1 - head + tail;
   1109c:	82 1b       	sub	r24, r18
   1109e:	93 0b       	sbc	r25, r19
   110a0:	54 17       	cp	r21, r20
   110a2:	10 f0       	brcs	.+4      	; 0x110a8 <HardwareSerial::availableForWrite()+0x1a>
C:\Users\bitmu\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial.cpp:186 (discriminator 1)
   110a4:	cf 96       	adiw	r24, 0x3f	; 63
   110a6:	08 95       	ret
C:\Users\bitmu\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial.cpp:187
  return tail - head - 1;
   110a8:	01 97       	sbiw	r24, 0x01	; 1
C:\Users\bitmu\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial.cpp:188
}
   110aa:	08 95       	ret

000110ac <serialEventRun()>:
_Z14serialEventRunv():
C:\Users\bitmu\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial.cpp:66
#endif

void serialEventRun(void)
{
#if defined(HAVE_HWSERIAL0)
  if (Serial0_available && serialEvent && Serial0_available()) serialEvent();
   110ac:	8b ec       	ldi	r24, 0xCB	; 203
   110ae:	99 e8       	ldi	r25, 0x89	; 137
   110b0:	89 2b       	or	r24, r25
   110b2:	49 f0       	breq	.+18     	; 0x110c6 <serialEventRun()+0x1a>
C:\Users\bitmu\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial.cpp:66 (discriminator 1)
   110b4:	80 e0       	ldi	r24, 0x00	; 0
   110b6:	90 e0       	ldi	r25, 0x00	; 0
   110b8:	89 2b       	or	r24, r25
   110ba:	29 f0       	breq	.+10     	; 0x110c6 <serialEventRun()+0x1a>
C:\Users\bitmu\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial.cpp:66 (discriminator 3)
   110bc:	0e 94 cb 89 	call	0x11396	; 0x11396 <Serial0_available()>
   110c0:	81 11       	cpse	r24, r1
C:\Users\bitmu\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial.cpp:66
   110c2:	0e 94 00 00 	call	0	; 0x0 <__vectors>
C:\Users\bitmu\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial.cpp:69
#endif
#if defined(HAVE_HWSERIAL1)
  if (Serial1_available && serialEvent1 && Serial1_available()) serialEvent1();
   110c6:	80 e0       	ldi	r24, 0x00	; 0
   110c8:	90 e0       	ldi	r25, 0x00	; 0
   110ca:	89 2b       	or	r24, r25
   110cc:	49 f0       	breq	.+18     	; 0x110e0 <serialEventRun()+0x34>
C:\Users\bitmu\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial.cpp:69 (discriminator 1)
   110ce:	80 e0       	ldi	r24, 0x00	; 0
   110d0:	90 e0       	ldi	r25, 0x00	; 0
   110d2:	89 2b       	or	r24, r25
   110d4:	29 f0       	breq	.+10     	; 0x110e0 <serialEventRun()+0x34>
C:\Users\bitmu\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial.cpp:69 (discriminator 3)
   110d6:	0e 94 00 00 	call	0	; 0x0 <__vectors>
   110da:	81 11       	cpse	r24, r1
C:\Users\bitmu\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial.cpp:69
   110dc:	0e 94 00 00 	call	0	; 0x0 <__vectors>
C:\Users\bitmu\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial.cpp:72
#endif
#if defined(HAVE_HWSERIAL2)
  if (Serial2_available && serialEvent2 && Serial2_available()) serialEvent2();
   110e0:	82 e6       	ldi	r24, 0x62	; 98
   110e2:	9a e8       	ldi	r25, 0x8A	; 138
   110e4:	89 2b       	or	r24, r25
   110e6:	49 f0       	breq	.+18     	; 0x110fa <serialEventRun()+0x4e>
C:\Users\bitmu\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial.cpp:72 (discriminator 1)
   110e8:	80 e0       	ldi	r24, 0x00	; 0
   110ea:	90 e0       	ldi	r25, 0x00	; 0
   110ec:	89 2b       	or	r24, r25
   110ee:	29 f0       	breq	.+10     	; 0x110fa <serialEventRun()+0x4e>
C:\Users\bitmu\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial.cpp:72 (discriminator 3)
   110f0:	0e 94 62 8a 	call	0x114c4	; 0x114c4 <Serial2_available()>
   110f4:	81 11       	cpse	r24, r1
C:\Users\bitmu\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial.cpp:72
   110f6:	0e 94 00 00 	call	0	; 0x0 <__vectors>
C:\Users\bitmu\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial.cpp:75
#endif
#if defined(HAVE_HWSERIAL3)
  if (Serial3_available && serialEvent3 && Serial3_available()) serialEvent3();
   110fa:	89 ef       	ldi	r24, 0xF9	; 249
   110fc:	9a e8       	ldi	r25, 0x8A	; 138
   110fe:	89 2b       	or	r24, r25
   11100:	49 f0       	breq	.+18     	; 0x11114 <serialEventRun()+0x68>
C:\Users\bitmu\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial.cpp:75 (discriminator 1)
   11102:	80 e0       	ldi	r24, 0x00	; 0
   11104:	90 e0       	ldi	r25, 0x00	; 0
   11106:	89 2b       	or	r24, r25
   11108:	29 f0       	breq	.+10     	; 0x11114 <serialEventRun()+0x68>
C:\Users\bitmu\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial.cpp:75 (discriminator 3)
   1110a:	0e 94 f9 8a 	call	0x115f2	; 0x115f2 <Serial3_available()>
   1110e:	81 11       	cpse	r24, r1
C:\Users\bitmu\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial.cpp:75
   11110:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>
C:\Users\bitmu\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial.cpp:77
#endif
}
   11114:	08 95       	ret

00011116 <HardwareSerial::_tx_udr_empty_irq()>:
_ZN14HardwareSerial17_tx_udr_empty_irqEv():
C:\Users\bitmu\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial.cpp:82

// Actual interrupt handlers //////////////////////////////////////////////////////////////

void HardwareSerial::_tx_udr_empty_irq(void)
{
   11116:	fc 01       	movw	r30, r24
C:\Users\bitmu\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial.cpp:85
  // If interrupts are enabled, there must be more data in the output
  // buffer. Send the next byte
  unsigned char c = _tx_buffer[_tx_buffer_tail];
   11118:	a4 8d       	ldd	r26, Z+28	; 0x1c
   1111a:	a8 0f       	add	r26, r24
   1111c:	b9 2f       	mov	r27, r25
   1111e:	b1 1d       	adc	r27, r1
   11120:	a3 5a       	subi	r26, 0xA3	; 163
   11122:	bf 4f       	sbci	r27, 0xFF	; 255
   11124:	2c 91       	ld	r18, X
C:\Users\bitmu\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial.cpp:86
  _tx_buffer_tail = (_tx_buffer_tail + 1) % SERIAL_TX_BUFFER_SIZE;
   11126:	84 8d       	ldd	r24, Z+28	; 0x1c
   11128:	90 e0       	ldi	r25, 0x00	; 0
   1112a:	01 96       	adiw	r24, 0x01	; 1
   1112c:	8f 73       	andi	r24, 0x3F	; 63
   1112e:	99 27       	eor	r25, r25
   11130:	84 8f       	std	Z+28, r24	; 0x1c
C:\Users\bitmu\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial.cpp:88

  *_udr = c;
   11132:	a6 89       	ldd	r26, Z+22	; 0x16
   11134:	b7 89       	ldd	r27, Z+23	; 0x17
   11136:	2c 93       	st	X, r18
C:\Users\bitmu\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial.cpp:93

  // clear the TXC bit -- "can be cleared by writing a one to its bit
  // location". This makes sure flush() won't return until the bytes
  // actually got written
  *_ucsra |= _BV(TXC0);
   11138:	a0 89       	ldd	r26, Z+16	; 0x10
   1113a:	b1 89       	ldd	r27, Z+17	; 0x11
   1113c:	8c 91       	ld	r24, X
   1113e:	80 64       	ori	r24, 0x40	; 64
   11140:	8c 93       	st	X, r24
C:\Users\bitmu\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial.cpp:95

  if (_tx_buffer_head == _tx_buffer_tail) {
   11142:	93 8d       	ldd	r25, Z+27	; 0x1b
   11144:	84 8d       	ldd	r24, Z+28	; 0x1c
   11146:	98 13       	cpse	r25, r24
   11148:	06 c0       	rjmp	.+12     	; 0x11156 <HardwareSerial::_tx_udr_empty_irq()+0x40>
C:\Users\bitmu\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial.cpp:97
    // Buffer empty, so disable interrupts
    *_ucsrb &= ~_BV(UDRIE0);
   1114a:	02 88       	ldd	r0, Z+18	; 0x12
   1114c:	f3 89       	ldd	r31, Z+19	; 0x13
   1114e:	e0 2d       	mov	r30, r0
   11150:	80 81       	ld	r24, Z
   11152:	8f 7d       	andi	r24, 0xDF	; 223
   11154:	80 83       	st	Z, r24
C:\Users\bitmu\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial.cpp:99
  }
}
   11156:	08 95       	ret

00011158 <HardwareSerial::flush()>:
_ZN14HardwareSerial5flushEv():
C:\Users\bitmu\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial.cpp:191
  if (head >= tail) return SERIAL_TX_BUFFER_SIZE - 1 - head + tail;
  return tail - head - 1;
}

void HardwareSerial::flush()
{
   11158:	cf 93       	push	r28
   1115a:	df 93       	push	r29
   1115c:	ec 01       	movw	r28, r24
C:\Users\bitmu\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial.cpp:195
  // If we have never written a byte, no need to flush. This special
  // case is needed since there is no way to force the TXC (transmit
  // complete) bit to 1 during initialization
  if (!_written)
   1115e:	88 8d       	ldd	r24, Y+24	; 0x18
   11160:	88 23       	and	r24, r24
   11162:	b9 f0       	breq	.+46     	; 0x11192 <HardwareSerial::flush()+0x3a>
C:\Users\bitmu\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial.cpp:198
    return;

  while (bit_is_set(*_ucsrb, UDRIE0) || bit_is_clear(*_ucsra, TXC0)) {
   11164:	aa 89       	ldd	r26, Y+18	; 0x12
   11166:	bb 89       	ldd	r27, Y+19	; 0x13
   11168:	e8 89       	ldd	r30, Y+16	; 0x10
   1116a:	f9 89       	ldd	r31, Y+17	; 0x11
   1116c:	8c 91       	ld	r24, X
   1116e:	85 fd       	sbrc	r24, 5
   11170:	03 c0       	rjmp	.+6      	; 0x11178 <HardwareSerial::flush()+0x20>
   11172:	80 81       	ld	r24, Z
   11174:	86 fd       	sbrc	r24, 6
   11176:	0d c0       	rjmp	.+26     	; 0x11192 <HardwareSerial::flush()+0x3a>
C:\Users\bitmu\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial.cpp:199
    if (bit_is_clear(SREG, SREG_I) && bit_is_set(*_ucsrb, UDRIE0))
   11178:	0f b6       	in	r0, 0x3f	; 63
   1117a:	07 fc       	sbrc	r0, 7
   1117c:	f7 cf       	rjmp	.-18     	; 0x1116c <HardwareSerial::flush()+0x14>
   1117e:	8c 91       	ld	r24, X
   11180:	85 ff       	sbrs	r24, 5
   11182:	f2 cf       	rjmp	.-28     	; 0x11168 <HardwareSerial::flush()+0x10>
C:\Users\bitmu\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial.cpp:203
      // Interrupts are globally disabled, but the DR empty
      // interrupt should be enabled, so poll the DR empty flag to
      // prevent deadlock
      if (bit_is_set(*_ucsra, UDRE0))
   11184:	80 81       	ld	r24, Z
   11186:	85 ff       	sbrs	r24, 5
   11188:	ed cf       	rjmp	.-38     	; 0x11164 <HardwareSerial::flush()+0xc>
C:\Users\bitmu\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial.cpp:204
        _tx_udr_empty_irq();
   1118a:	ce 01       	movw	r24, r28
   1118c:	0e 94 8b 88 	call	0x11116	; 0x11116 <HardwareSerial::_tx_udr_empty_irq()>
   11190:	e9 cf       	rjmp	.-46     	; 0x11164 <HardwareSerial::flush()+0xc>
C:\Users\bitmu\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial.cpp:208
  }
  // If we get here, nothing is queued anymore (DRIE is disabled) and
  // the hardware finished tranmission (TXC is set).
}
   11192:	df 91       	pop	r29
   11194:	cf 91       	pop	r28
   11196:	08 95       	ret

00011198 <HardwareSerial::write(unsigned char)>:
_ZN14HardwareSerial5writeEh():
C:\Users\bitmu\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial.cpp:211

size_t HardwareSerial::write(uint8_t c)
{
   11198:	ef 92       	push	r14
   1119a:	ff 92       	push	r15
   1119c:	0f 93       	push	r16
   1119e:	1f 93       	push	r17
   111a0:	cf 93       	push	r28
   111a2:	df 93       	push	r29
   111a4:	ec 01       	movw	r28, r24
C:\Users\bitmu\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial.cpp:212
  _written = true;
   111a6:	81 e0       	ldi	r24, 0x01	; 1
   111a8:	88 8f       	std	Y+24, r24	; 0x18
C:\Users\bitmu\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial.cpp:217
  // If the buffer and the data register is empty, just write the byte
  // to the data register and be done. This shortcut helps
  // significantly improve the effective datarate at high (>
  // 500kbit/s) bitrates, where interrupt overhead becomes a slowdown.
  if (_tx_buffer_head == _tx_buffer_tail && bit_is_set(*_ucsra, UDRE0)) {
   111aa:	9b 8d       	ldd	r25, Y+27	; 0x1b
   111ac:	8c 8d       	ldd	r24, Y+28	; 0x1c
   111ae:	98 13       	cpse	r25, r24
   111b0:	16 c0       	rjmp	.+44     	; 0x111de <HardwareSerial::write(unsigned char)+0x46>
C:\Users\bitmu\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial.cpp:217 (discriminator 1)
   111b2:	e8 89       	ldd	r30, Y+16	; 0x10
   111b4:	f9 89       	ldd	r31, Y+17	; 0x11
   111b6:	80 81       	ld	r24, Z
   111b8:	85 ff       	sbrs	r24, 5
   111ba:	11 c0       	rjmp	.+34     	; 0x111de <HardwareSerial::write(unsigned char)+0x46>
C:\Users\bitmu\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial.cpp:218
    *_udr = c;
   111bc:	ee 89       	ldd	r30, Y+22	; 0x16
   111be:	ff 89       	ldd	r31, Y+23	; 0x17
   111c0:	60 83       	st	Z, r22
C:\Users\bitmu\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial.cpp:219
    *_ucsra |= _BV(TXC0);
   111c2:	e8 89       	ldd	r30, Y+16	; 0x10
   111c4:	f9 89       	ldd	r31, Y+17	; 0x11
   111c6:	80 81       	ld	r24, Z
   111c8:	80 64       	ori	r24, 0x40	; 64
C:\Users\bitmu\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial.cpp:242
  }

  _tx_buffer[_tx_buffer_head] = c;
  _tx_buffer_head = i;

  *_ucsrb |= _BV(UDRIE0);
   111ca:	80 83       	st	Z, r24
C:\Users\bitmu\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial.cpp:245
  
  return 1;
}
   111cc:	81 e0       	ldi	r24, 0x01	; 1
   111ce:	90 e0       	ldi	r25, 0x00	; 0
   111d0:	df 91       	pop	r29
   111d2:	cf 91       	pop	r28
   111d4:	1f 91       	pop	r17
   111d6:	0f 91       	pop	r16
   111d8:	ff 90       	pop	r15
   111da:	ef 90       	pop	r14
   111dc:	08 95       	ret
   111de:	f6 2e       	mov	r15, r22
C:\Users\bitmu\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial.cpp:222
  if (_tx_buffer_head == _tx_buffer_tail && bit_is_set(*_ucsra, UDRE0)) {
    *_udr = c;
    *_ucsra |= _BV(TXC0);
    return 1;
  }
  tx_buffer_index_t i = (_tx_buffer_head + 1) % SERIAL_TX_BUFFER_SIZE;
   111e0:	0b 8d       	ldd	r16, Y+27	; 0x1b
   111e2:	10 e0       	ldi	r17, 0x00	; 0
   111e4:	0f 5f       	subi	r16, 0xFF	; 255
   111e6:	1f 4f       	sbci	r17, 0xFF	; 255
   111e8:	0f 73       	andi	r16, 0x3F	; 63
   111ea:	11 27       	eor	r17, r17
   111ec:	e0 2e       	mov	r14, r16
C:\Users\bitmu\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial.cpp:226

  // If the output buffer is full, there's nothing for it other than to 
  // wait for the interrupt handler to empty it a bit
  while (i == _tx_buffer_tail) {
   111ee:	8c 8d       	ldd	r24, Y+28	; 0x1c
   111f0:	8e 11       	cpse	r24, r14
   111f2:	0c c0       	rjmp	.+24     	; 0x1120c <HardwareSerial::write(unsigned char)+0x74>
C:\Users\bitmu\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial.cpp:227
    if (bit_is_clear(SREG, SREG_I)) {
   111f4:	0f b6       	in	r0, 0x3f	; 63
   111f6:	07 fc       	sbrc	r0, 7
   111f8:	fa cf       	rjmp	.-12     	; 0x111ee <HardwareSerial::write(unsigned char)+0x56>
C:\Users\bitmu\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial.cpp:232
      // Interrupts are disabled, so we'll have to poll the data
      // register empty flag ourselves. If it is set, pretend an
      // interrupt has happened and call the handler to free up
      // space for us.
      if(bit_is_set(*_ucsra, UDRE0))
   111fa:	e8 89       	ldd	r30, Y+16	; 0x10
   111fc:	f9 89       	ldd	r31, Y+17	; 0x11
   111fe:	80 81       	ld	r24, Z
   11200:	85 ff       	sbrs	r24, 5
   11202:	f5 cf       	rjmp	.-22     	; 0x111ee <HardwareSerial::write(unsigned char)+0x56>
C:\Users\bitmu\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial.cpp:233
        _tx_udr_empty_irq();
   11204:	ce 01       	movw	r24, r28
   11206:	0e 94 8b 88 	call	0x11116	; 0x11116 <HardwareSerial::_tx_udr_empty_irq()>
   1120a:	f1 cf       	rjmp	.-30     	; 0x111ee <HardwareSerial::write(unsigned char)+0x56>
C:\Users\bitmu\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial.cpp:239
    } else {
      // nop, the interrupt handler will free up space for us
    }
  }

  _tx_buffer[_tx_buffer_head] = c;
   1120c:	eb 8d       	ldd	r30, Y+27	; 0x1b
   1120e:	ec 0f       	add	r30, r28
   11210:	fd 2f       	mov	r31, r29
   11212:	f1 1d       	adc	r31, r1
   11214:	e3 5a       	subi	r30, 0xA3	; 163
   11216:	ff 4f       	sbci	r31, 0xFF	; 255
   11218:	f0 82       	st	Z, r15
C:\Users\bitmu\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial.cpp:240
  _tx_buffer_head = i;
   1121a:	0b 8f       	std	Y+27, r16	; 0x1b
C:\Users\bitmu\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial.cpp:242

  *_ucsrb |= _BV(UDRIE0);
   1121c:	ea 89       	ldd	r30, Y+18	; 0x12
   1121e:	fb 89       	ldd	r31, Y+19	; 0x13
   11220:	80 81       	ld	r24, Z
   11222:	80 62       	ori	r24, 0x20	; 32
   11224:	d2 cf       	rjmp	.-92     	; 0x111ca <HardwareSerial::write(unsigned char)+0x32>

00011226 <HardwareSerial::begin(unsigned long, unsigned char)>:
_ZN14HardwareSerial5beginEmh():
C:\Users\bitmu\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial.cpp:104
}

// Public Methods //////////////////////////////////////////////////////////////

void HardwareSerial::begin(unsigned long baud, byte config)
{
   11226:	cf 92       	push	r12
   11228:	df 92       	push	r13
   1122a:	ef 92       	push	r14
   1122c:	ff 92       	push	r15
   1122e:	1f 93       	push	r17
   11230:	cf 93       	push	r28
   11232:	df 93       	push	r29
   11234:	ec 01       	movw	r28, r24
   11236:	6a 01       	movw	r12, r20
   11238:	7b 01       	movw	r14, r22
   1123a:	12 2f       	mov	r17, r18
C:\Users\bitmu\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial.cpp:107
  // Try u2x mode first
  uint16_t baud_setting = (F_CPU / 4 / baud - 1) / 2;
  *_ucsra = 1 << U2X0;
   1123c:	e8 89       	ldd	r30, Y+16	; 0x10
   1123e:	f9 89       	ldd	r31, Y+17	; 0x11
   11240:	82 e0       	ldi	r24, 0x02	; 2
   11242:	80 83       	st	Z, r24
C:\Users\bitmu\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial.cpp:114
  // hardcoded exception for 57600 for compatibility with the bootloader
  // shipped with the Duemilanove and previous boards and the firmware
  // on the 8U2 on the Uno and Mega 2560. Also, The baud_setting cannot
  // be > 4095, so switch back to non-u2x mode if the baud rate is too
  // low.
  if (((F_CPU == 16000000UL) && (baud == 57600)) || (baud_setting >4095))
   11244:	c1 14       	cp	r12, r1
   11246:	81 ee       	ldi	r24, 0xE1	; 225
   11248:	d8 06       	cpc	r13, r24
   1124a:	e1 04       	cpc	r14, r1
   1124c:	f1 04       	cpc	r15, r1
   1124e:	a1 f0       	breq	.+40     	; 0x11278 <HardwareSerial::begin(unsigned long, unsigned char)+0x52>
C:\Users\bitmu\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial.cpp:106 (discriminator 1)
// Public Methods //////////////////////////////////////////////////////////////

void HardwareSerial::begin(unsigned long baud, byte config)
{
  // Try u2x mode first
  uint16_t baud_setting = (F_CPU / 4 / baud - 1) / 2;
   11250:	60 e0       	ldi	r22, 0x00	; 0
   11252:	79 e0       	ldi	r23, 0x09	; 9
   11254:	8d e3       	ldi	r24, 0x3D	; 61
   11256:	90 e0       	ldi	r25, 0x00	; 0
   11258:	a7 01       	movw	r20, r14
   1125a:	96 01       	movw	r18, r12
   1125c:	0e 94 ea 91 	call	0x123d4	; 0x123d4 <__udivmodsi4>
   11260:	21 50       	subi	r18, 0x01	; 1
   11262:	31 09       	sbc	r19, r1
   11264:	41 09       	sbc	r20, r1
   11266:	51 09       	sbc	r21, r1
   11268:	56 95       	lsr	r21
   1126a:	47 95       	ror	r20
   1126c:	37 95       	ror	r19
   1126e:	27 95       	ror	r18
C:\Users\bitmu\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial.cpp:114 (discriminator 1)
  // hardcoded exception for 57600 for compatibility with the bootloader
  // shipped with the Duemilanove and previous boards and the firmware
  // on the 8U2 on the Uno and Mega 2560. Also, The baud_setting cannot
  // be > 4095, so switch back to non-u2x mode if the baud rate is too
  // low.
  if (((F_CPU == 16000000UL) && (baud == 57600)) || (baud_setting >4095))
   11270:	21 15       	cp	r18, r1
   11272:	80 e1       	ldi	r24, 0x10	; 16
   11274:	38 07       	cpc	r19, r24
   11276:	98 f0       	brcs	.+38     	; 0x1129e <HardwareSerial::begin(unsigned long, unsigned char)+0x78>
C:\Users\bitmu\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial.cpp:116
  {
    *_ucsra = 0;
   11278:	e8 89       	ldd	r30, Y+16	; 0x10
   1127a:	f9 89       	ldd	r31, Y+17	; 0x11
   1127c:	10 82       	st	Z, r1
C:\Users\bitmu\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial.cpp:117
    baud_setting = (F_CPU / 8 / baud - 1) / 2;
   1127e:	60 e8       	ldi	r22, 0x80	; 128
   11280:	74 e8       	ldi	r23, 0x84	; 132
   11282:	8e e1       	ldi	r24, 0x1E	; 30
   11284:	90 e0       	ldi	r25, 0x00	; 0
   11286:	a7 01       	movw	r20, r14
   11288:	96 01       	movw	r18, r12
   1128a:	0e 94 ea 91 	call	0x123d4	; 0x123d4 <__udivmodsi4>
   1128e:	21 50       	subi	r18, 0x01	; 1
   11290:	31 09       	sbc	r19, r1
   11292:	41 09       	sbc	r20, r1
   11294:	51 09       	sbc	r21, r1
   11296:	56 95       	lsr	r21
   11298:	47 95       	ror	r20
   1129a:	37 95       	ror	r19
   1129c:	27 95       	ror	r18
C:\Users\bitmu\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial.cpp:121
  }

  // assign the baud_setting, a.k.a. ubrr (USART Baud Rate Register)
  *_ubrrh = baud_setting >> 8;
   1129e:	ec 85       	ldd	r30, Y+12	; 0x0c
   112a0:	fd 85       	ldd	r31, Y+13	; 0x0d
   112a2:	30 83       	st	Z, r19
C:\Users\bitmu\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial.cpp:122
  *_ubrrl = baud_setting;
   112a4:	ee 85       	ldd	r30, Y+14	; 0x0e
   112a6:	ff 85       	ldd	r31, Y+15	; 0x0f
   112a8:	20 83       	st	Z, r18
C:\Users\bitmu\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial.cpp:124

  _written = false;
   112aa:	18 8e       	std	Y+24, r1	; 0x18
C:\Users\bitmu\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial.cpp:132
#if defined(__AVR_ATmega8__) || defined(__AVR_ATmega8515__) || defined(__AVR_ATmega162__) \
|| defined(__AVR_ATmega8535__) || defined(__AVR_ATmega16__)|| defined(__AVR_ATmega32__)   \
|| defined(__AVR_ATmega162__)
  config |= 0x80; // select UCSRC register (shared with UBRRH)
#endif
  *_ucsrc = config;
   112ac:	ec 89       	ldd	r30, Y+20	; 0x14
   112ae:	fd 89       	ldd	r31, Y+21	; 0x15
   112b0:	10 83       	st	Z, r17
C:\Users\bitmu\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial.cpp:134
  
  *_ucsrb |= _BV(RXEN0) | _BV(TXEN0) | _BV(RXCIE0);
   112b2:	ea 89       	ldd	r30, Y+18	; 0x12
   112b4:	fb 89       	ldd	r31, Y+19	; 0x13
   112b6:	80 81       	ld	r24, Z
   112b8:	88 69       	ori	r24, 0x98	; 152
   112ba:	80 83       	st	Z, r24
C:\Users\bitmu\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial.cpp:135
  *_ucsrb &= ~_BV(UDRIE0);
   112bc:	ea 89       	ldd	r30, Y+18	; 0x12
   112be:	fb 89       	ldd	r31, Y+19	; 0x13
   112c0:	80 81       	ld	r24, Z
   112c2:	8f 7d       	andi	r24, 0xDF	; 223
   112c4:	80 83       	st	Z, r24
C:\Users\bitmu\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial.cpp:136
}
   112c6:	df 91       	pop	r29
   112c8:	cf 91       	pop	r28
   112ca:	1f 91       	pop	r17
   112cc:	ff 90       	pop	r15
   112ce:	ef 90       	pop	r14
   112d0:	df 90       	pop	r13
   112d2:	cf 90       	pop	r12
   112d4:	08 95       	ret

000112d6 <__vector_25>:
__vector_25():
C:\Users\bitmu\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial0.cpp:50
#elif defined(USART_RXC_vect)
  ISR(USART_RXC_vect)
#else
  #error "Don't know what the Data Received vector is called for Serial"
#endif
  {
   112d6:	1f 92       	push	r1
   112d8:	0f 92       	push	r0
   112da:	0f b6       	in	r0, 0x3f	; 63
   112dc:	0f 92       	push	r0
   112de:	11 24       	eor	r1, r1
   112e0:	0b b6       	in	r0, 0x3b	; 59
   112e2:	0f 92       	push	r0
   112e4:	2f 93       	push	r18
   112e6:	8f 93       	push	r24
   112e8:	9f 93       	push	r25
   112ea:	ef 93       	push	r30
   112ec:	ff 93       	push	r31
_ZN14HardwareSerial16_rx_complete_irqEv():
C:\Users\bitmu\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial_private.h:103

// Actual interrupt handlers //////////////////////////////////////////////////////////////

void HardwareSerial::_rx_complete_irq(void)
{
  if (bit_is_clear(*_ucsra, UPE0)) {
   112ee:	e0 91 64 15 	lds	r30, 0x1564	; 0x801564 <Serial+0x10>
   112f2:	f0 91 65 15 	lds	r31, 0x1565	; 0x801565 <Serial+0x11>
   112f6:	80 81       	ld	r24, Z
   112f8:	e0 91 6a 15 	lds	r30, 0x156A	; 0x80156a <Serial+0x16>
   112fc:	f0 91 6b 15 	lds	r31, 0x156B	; 0x80156b <Serial+0x17>
   11300:	82 fd       	sbrc	r24, 2
   11302:	1d c0       	rjmp	.+58     	; 0x1133e <__vector_25+0x68>
C:\Users\bitmu\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial_private.h:106
    // No Parity error, read byte and store it in the buffer if there is
    // room
    unsigned char c = *_udr;
   11304:	90 81       	ld	r25, Z
C:\Users\bitmu\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial_private.h:107
    rx_buffer_index_t i = (unsigned int)(_rx_buffer_head + 1) % SERIAL_RX_BUFFER_SIZE;
   11306:	80 91 6d 15 	lds	r24, 0x156D	; 0x80156d <Serial+0x19>
   1130a:	8f 5f       	subi	r24, 0xFF	; 255
   1130c:	8f 73       	andi	r24, 0x3F	; 63
C:\Users\bitmu\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial_private.h:113

    // if we should be storing the received character into the location
    // just before the tail (meaning that the head would advance to the
    // current location of the tail), we're about to overflow the buffer
    // and so we don't write the character or advance the head.
    if (i != _rx_buffer_tail) {
   1130e:	20 91 6e 15 	lds	r18, 0x156E	; 0x80156e <Serial+0x1a>
   11312:	82 17       	cp	r24, r18
   11314:	41 f0       	breq	.+16     	; 0x11326 <__vector_25+0x50>
C:\Users\bitmu\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial_private.h:114
      _rx_buffer[_rx_buffer_head] = c;
   11316:	e0 91 6d 15 	lds	r30, 0x156D	; 0x80156d <Serial+0x19>
   1131a:	f0 e0       	ldi	r31, 0x00	; 0
   1131c:	ec 5a       	subi	r30, 0xAC	; 172
   1131e:	fa 4e       	sbci	r31, 0xEA	; 234
   11320:	95 8f       	std	Z+29, r25	; 0x1d
C:\Users\bitmu\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial_private.h:115
      _rx_buffer_head = i;
   11322:	80 93 6d 15 	sts	0x156D, r24	; 0x80156d <Serial+0x19>
__vector_25():
C:\Users\bitmu\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial0.cpp:52
    Serial._rx_complete_irq();
  }
   11326:	ff 91       	pop	r31
   11328:	ef 91       	pop	r30
   1132a:	9f 91       	pop	r25
   1132c:	8f 91       	pop	r24
   1132e:	2f 91       	pop	r18
   11330:	0f 90       	pop	r0
   11332:	0b be       	out	0x3b, r0	; 59
   11334:	0f 90       	pop	r0
   11336:	0f be       	out	0x3f, r0	; 63
   11338:	0f 90       	pop	r0
   1133a:	1f 90       	pop	r1
   1133c:	18 95       	reti
_ZN14HardwareSerial16_rx_complete_irqEv():
C:\Users\bitmu\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial_private.h:119
    }
  } else {
    // Parity error, read byte but discard it
    *_udr;
   1133e:	80 81       	ld	r24, Z
__vector_25():
C:\Users\bitmu\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial0.cpp:52
   11340:	f2 cf       	rjmp	.-28     	; 0x11326 <__vector_25+0x50>

00011342 <__vector_26>:
__vector_26():
C:\Users\bitmu\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial0.cpp:63
#elif defined(USART0_UDRE_vect)
ISR(USART0_UDRE_vect)
#else
  #error "Don't know what the Data Register Empty vector is called for Serial"
#endif
{
   11342:	1f 92       	push	r1
   11344:	0f 92       	push	r0
   11346:	0f b6       	in	r0, 0x3f	; 63
   11348:	0f 92       	push	r0
   1134a:	11 24       	eor	r1, r1
   1134c:	0b b6       	in	r0, 0x3b	; 59
   1134e:	0f 92       	push	r0
   11350:	2f 93       	push	r18
   11352:	3f 93       	push	r19
   11354:	4f 93       	push	r20
   11356:	5f 93       	push	r21
   11358:	6f 93       	push	r22
   1135a:	7f 93       	push	r23
   1135c:	8f 93       	push	r24
   1135e:	9f 93       	push	r25
   11360:	af 93       	push	r26
   11362:	bf 93       	push	r27
   11364:	ef 93       	push	r30
   11366:	ff 93       	push	r31
C:\Users\bitmu\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial0.cpp:64
  Serial._tx_udr_empty_irq();
   11368:	84 e5       	ldi	r24, 0x54	; 84
   1136a:	95 e1       	ldi	r25, 0x15	; 21
   1136c:	0e 94 8b 88 	call	0x11116	; 0x11116 <HardwareSerial::_tx_udr_empty_irq()>
C:\Users\bitmu\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial0.cpp:65
}
   11370:	ff 91       	pop	r31
   11372:	ef 91       	pop	r30
   11374:	bf 91       	pop	r27
   11376:	af 91       	pop	r26
   11378:	9f 91       	pop	r25
   1137a:	8f 91       	pop	r24
   1137c:	7f 91       	pop	r23
   1137e:	6f 91       	pop	r22
   11380:	5f 91       	pop	r21
   11382:	4f 91       	pop	r20
   11384:	3f 91       	pop	r19
   11386:	2f 91       	pop	r18
   11388:	0f 90       	pop	r0
   1138a:	0b be       	out	0x3b, r0	; 59
   1138c:	0f 90       	pop	r0
   1138e:	0f be       	out	0x3f, r0	; 63
   11390:	0f 90       	pop	r0
   11392:	1f 90       	pop	r1
   11394:	18 95       	reti

00011396 <Serial0_available()>:
_Z17Serial0_availablev():
C:\Users\bitmu\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial0.cpp:76
#endif

// Function that can be weakly referenced by serialEventRun to prevent
// pulling in this file if it's not otherwise used.
bool Serial0_available() {
  return Serial.available();
   11396:	84 e5       	ldi	r24, 0x54	; 84
   11398:	95 e1       	ldi	r25, 0x15	; 21
   1139a:	0e 94 19 88 	call	0x11032	; 0x11032 <HardwareSerial::available()>
   1139e:	21 e0       	ldi	r18, 0x01	; 1
   113a0:	89 2b       	or	r24, r25
   113a2:	09 f4       	brne	.+2      	; 0x113a6 <Serial0_available()+0x10>
   113a4:	20 e0       	ldi	r18, 0x00	; 0
C:\Users\bitmu\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial0.cpp:77
}
   113a6:	82 2f       	mov	r24, r18
   113a8:	08 95       	ret

000113aa <_GLOBAL__sub_I___vector_25>:
_ZN5PrintC4Ev():
C:\Users\bitmu\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/Print.h:46
    size_t printNumber(unsigned long, uint8_t);
    size_t printFloat(double, uint8_t);
  protected:
    void setWriteError(int err = 1) { write_error = err; }
  public:
    Print() : write_error(0) {}
   113aa:	e4 e5       	ldi	r30, 0x54	; 84
   113ac:	f5 e1       	ldi	r31, 0x15	; 21
   113ae:	13 82       	std	Z+3, r1	; 0x03
   113b0:	12 82       	std	Z+2, r1	; 0x02
_ZN6StreamC4Ev():
C:\Users\bitmu\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/Stream.h:63
  public:
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;

    Stream() {_timeout=1000;}
   113b2:	88 ee       	ldi	r24, 0xE8	; 232
   113b4:	93 e0       	ldi	r25, 0x03	; 3
   113b6:	a0 e0       	ldi	r26, 0x00	; 0
   113b8:	b0 e0       	ldi	r27, 0x00	; 0
   113ba:	84 83       	std	Z+4, r24	; 0x04
   113bc:	95 83       	std	Z+5, r25	; 0x05
   113be:	a6 83       	std	Z+6, r26	; 0x06
   113c0:	b7 83       	std	Z+7, r27	; 0x07
_ZN14HardwareSerialC4EPVhS1_S1_S1_S1_S1_():
C:\Users\bitmu\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial_private.h:95
  volatile uint8_t *ucsrc, volatile uint8_t *udr) :
    _ubrrh(ubrrh), _ubrrl(ubrrl),
    _ucsra(ucsra), _ucsrb(ucsrb), _ucsrc(ucsrc),
    _udr(udr),
    _rx_buffer_head(0), _rx_buffer_tail(0),
    _tx_buffer_head(0), _tx_buffer_tail(0)
   113c2:	8b e1       	ldi	r24, 0x1B	; 27
   113c4:	9b e0       	ldi	r25, 0x0B	; 11
   113c6:	91 83       	std	Z+1, r25	; 0x01
   113c8:	80 83       	st	Z, r24
   113ca:	85 ec       	ldi	r24, 0xC5	; 197
   113cc:	90 e0       	ldi	r25, 0x00	; 0
   113ce:	95 87       	std	Z+13, r25	; 0x0d
   113d0:	84 87       	std	Z+12, r24	; 0x0c
   113d2:	84 ec       	ldi	r24, 0xC4	; 196
   113d4:	90 e0       	ldi	r25, 0x00	; 0
   113d6:	97 87       	std	Z+15, r25	; 0x0f
   113d8:	86 87       	std	Z+14, r24	; 0x0e
   113da:	80 ec       	ldi	r24, 0xC0	; 192
   113dc:	90 e0       	ldi	r25, 0x00	; 0
   113de:	91 8b       	std	Z+17, r25	; 0x11
   113e0:	80 8b       	std	Z+16, r24	; 0x10
   113e2:	81 ec       	ldi	r24, 0xC1	; 193
   113e4:	90 e0       	ldi	r25, 0x00	; 0
   113e6:	93 8b       	std	Z+19, r25	; 0x13
   113e8:	82 8b       	std	Z+18, r24	; 0x12
   113ea:	82 ec       	ldi	r24, 0xC2	; 194
   113ec:	90 e0       	ldi	r25, 0x00	; 0
   113ee:	95 8b       	std	Z+21, r25	; 0x15
   113f0:	84 8b       	std	Z+20, r24	; 0x14
   113f2:	86 ec       	ldi	r24, 0xC6	; 198
   113f4:	90 e0       	ldi	r25, 0x00	; 0
   113f6:	97 8b       	std	Z+23, r25	; 0x17
   113f8:	86 8b       	std	Z+22, r24	; 0x16
   113fa:	11 8e       	std	Z+25, r1	; 0x19
   113fc:	12 8e       	std	Z+26, r1	; 0x1a
   113fe:	13 8e       	std	Z+27, r1	; 0x1b
   11400:	14 8e       	std	Z+28, r1	; 0x1c
_GLOBAL__sub_I___vector_25():
C:\Users\bitmu\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial0.cpp:77
   11402:	08 95       	ret

00011404 <__vector_51>:
__vector_51():
C:\Users\bitmu\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial2.cpp:40
// first place.

#if defined(HAVE_HWSERIAL2)

ISR(USART2_RX_vect)
{
   11404:	1f 92       	push	r1
   11406:	0f 92       	push	r0
   11408:	0f b6       	in	r0, 0x3f	; 63
   1140a:	0f 92       	push	r0
   1140c:	11 24       	eor	r1, r1
   1140e:	0b b6       	in	r0, 0x3b	; 59
   11410:	0f 92       	push	r0
   11412:	2f 93       	push	r18
   11414:	8f 93       	push	r24
   11416:	9f 93       	push	r25
   11418:	ef 93       	push	r30
   1141a:	ff 93       	push	r31
_ZN14HardwareSerial16_rx_complete_irqEv():
C:\Users\bitmu\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial_private.h:103

// Actual interrupt handlers //////////////////////////////////////////////////////////////

void HardwareSerial::_rx_complete_irq(void)
{
  if (bit_is_clear(*_ucsra, UPE0)) {
   1141c:	e0 91 01 16 	lds	r30, 0x1601	; 0x801601 <Serial2+0x10>
   11420:	f0 91 02 16 	lds	r31, 0x1602	; 0x801602 <Serial2+0x11>
   11424:	80 81       	ld	r24, Z
   11426:	e0 91 07 16 	lds	r30, 0x1607	; 0x801607 <Serial2+0x16>
   1142a:	f0 91 08 16 	lds	r31, 0x1608	; 0x801608 <Serial2+0x17>
   1142e:	82 fd       	sbrc	r24, 2
   11430:	1d c0       	rjmp	.+58     	; 0x1146c <__vector_51+0x68>
C:\Users\bitmu\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial_private.h:106
    // No Parity error, read byte and store it in the buffer if there is
    // room
    unsigned char c = *_udr;
   11432:	90 81       	ld	r25, Z
C:\Users\bitmu\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial_private.h:107
    rx_buffer_index_t i = (unsigned int)(_rx_buffer_head + 1) % SERIAL_RX_BUFFER_SIZE;
   11434:	80 91 0a 16 	lds	r24, 0x160A	; 0x80160a <Serial2+0x19>
   11438:	8f 5f       	subi	r24, 0xFF	; 255
   1143a:	8f 73       	andi	r24, 0x3F	; 63
C:\Users\bitmu\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial_private.h:113

    // if we should be storing the received character into the location
    // just before the tail (meaning that the head would advance to the
    // current location of the tail), we're about to overflow the buffer
    // and so we don't write the character or advance the head.
    if (i != _rx_buffer_tail) {
   1143c:	20 91 0b 16 	lds	r18, 0x160B	; 0x80160b <Serial2+0x1a>
   11440:	82 17       	cp	r24, r18
   11442:	41 f0       	breq	.+16     	; 0x11454 <__vector_51+0x50>
C:\Users\bitmu\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial_private.h:114
      _rx_buffer[_rx_buffer_head] = c;
   11444:	e0 91 0a 16 	lds	r30, 0x160A	; 0x80160a <Serial2+0x19>
   11448:	f0 e0       	ldi	r31, 0x00	; 0
   1144a:	ef 50       	subi	r30, 0x0F	; 15
   1144c:	fa 4e       	sbci	r31, 0xEA	; 234
   1144e:	95 8f       	std	Z+29, r25	; 0x1d
C:\Users\bitmu\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial_private.h:115
      _rx_buffer_head = i;
   11450:	80 93 0a 16 	sts	0x160A, r24	; 0x80160a <Serial2+0x19>
__vector_51():
C:\Users\bitmu\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial2.cpp:42
  Serial2._rx_complete_irq();
}
   11454:	ff 91       	pop	r31
   11456:	ef 91       	pop	r30
   11458:	9f 91       	pop	r25
   1145a:	8f 91       	pop	r24
   1145c:	2f 91       	pop	r18
   1145e:	0f 90       	pop	r0
   11460:	0b be       	out	0x3b, r0	; 59
   11462:	0f 90       	pop	r0
   11464:	0f be       	out	0x3f, r0	; 63
   11466:	0f 90       	pop	r0
   11468:	1f 90       	pop	r1
   1146a:	18 95       	reti
_ZN14HardwareSerial16_rx_complete_irqEv():
C:\Users\bitmu\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial_private.h:119
    }
  } else {
    // Parity error, read byte but discard it
    *_udr;
   1146c:	80 81       	ld	r24, Z
__vector_51():
C:\Users\bitmu\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial2.cpp:42
   1146e:	f2 cf       	rjmp	.-28     	; 0x11454 <__vector_51+0x50>

00011470 <__vector_52>:
__vector_52():
C:\Users\bitmu\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial2.cpp:45

ISR(USART2_UDRE_vect)
{
   11470:	1f 92       	push	r1
   11472:	0f 92       	push	r0
   11474:	0f b6       	in	r0, 0x3f	; 63
   11476:	0f 92       	push	r0
   11478:	11 24       	eor	r1, r1
   1147a:	0b b6       	in	r0, 0x3b	; 59
   1147c:	0f 92       	push	r0
   1147e:	2f 93       	push	r18
   11480:	3f 93       	push	r19
   11482:	4f 93       	push	r20
   11484:	5f 93       	push	r21
   11486:	6f 93       	push	r22
   11488:	7f 93       	push	r23
   1148a:	8f 93       	push	r24
   1148c:	9f 93       	push	r25
   1148e:	af 93       	push	r26
   11490:	bf 93       	push	r27
   11492:	ef 93       	push	r30
   11494:	ff 93       	push	r31
C:\Users\bitmu\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial2.cpp:46
  Serial2._tx_udr_empty_irq();
   11496:	81 ef       	ldi	r24, 0xF1	; 241
   11498:	95 e1       	ldi	r25, 0x15	; 21
   1149a:	0e 94 8b 88 	call	0x11116	; 0x11116 <HardwareSerial::_tx_udr_empty_irq()>
C:\Users\bitmu\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial2.cpp:47
}
   1149e:	ff 91       	pop	r31
   114a0:	ef 91       	pop	r30
   114a2:	bf 91       	pop	r27
   114a4:	af 91       	pop	r26
   114a6:	9f 91       	pop	r25
   114a8:	8f 91       	pop	r24
   114aa:	7f 91       	pop	r23
   114ac:	6f 91       	pop	r22
   114ae:	5f 91       	pop	r21
   114b0:	4f 91       	pop	r20
   114b2:	3f 91       	pop	r19
   114b4:	2f 91       	pop	r18
   114b6:	0f 90       	pop	r0
   114b8:	0b be       	out	0x3b, r0	; 59
   114ba:	0f 90       	pop	r0
   114bc:	0f be       	out	0x3f, r0	; 63
   114be:	0f 90       	pop	r0
   114c0:	1f 90       	pop	r1
   114c2:	18 95       	reti

000114c4 <Serial2_available()>:
_Z17Serial2_availablev():
C:\Users\bitmu\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial2.cpp:54
HardwareSerial Serial2(&UBRR2H, &UBRR2L, &UCSR2A, &UCSR2B, &UCSR2C, &UDR2);

// Function that can be weakly referenced by serialEventRun to prevent
// pulling in this file if it's not otherwise used.
bool Serial2_available() {
  return Serial2.available();
   114c4:	81 ef       	ldi	r24, 0xF1	; 241
   114c6:	95 e1       	ldi	r25, 0x15	; 21
   114c8:	0e 94 19 88 	call	0x11032	; 0x11032 <HardwareSerial::available()>
   114cc:	21 e0       	ldi	r18, 0x01	; 1
   114ce:	89 2b       	or	r24, r25
   114d0:	09 f4       	brne	.+2      	; 0x114d4 <Serial2_available()+0x10>
   114d2:	20 e0       	ldi	r18, 0x00	; 0
C:\Users\bitmu\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial2.cpp:55
}
   114d4:	82 2f       	mov	r24, r18
   114d6:	08 95       	ret

000114d8 <_GLOBAL__sub_I___vector_51>:
_ZN5PrintC4Ev():
C:\Users\bitmu\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/Print.h:46
   114d8:	e1 ef       	ldi	r30, 0xF1	; 241
   114da:	f5 e1       	ldi	r31, 0x15	; 21
   114dc:	13 82       	std	Z+3, r1	; 0x03
   114de:	12 82       	std	Z+2, r1	; 0x02
_ZN6StreamC4Ev():
C:\Users\bitmu\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/Stream.h:63
   114e0:	88 ee       	ldi	r24, 0xE8	; 232
   114e2:	93 e0       	ldi	r25, 0x03	; 3
   114e4:	a0 e0       	ldi	r26, 0x00	; 0
   114e6:	b0 e0       	ldi	r27, 0x00	; 0
   114e8:	84 83       	std	Z+4, r24	; 0x04
   114ea:	95 83       	std	Z+5, r25	; 0x05
   114ec:	a6 83       	std	Z+6, r26	; 0x06
   114ee:	b7 83       	std	Z+7, r27	; 0x07
_ZN14HardwareSerialC4EPVhS1_S1_S1_S1_S1_():
C:\Users\bitmu\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial_private.h:95
  volatile uint8_t *ucsrc, volatile uint8_t *udr) :
    _ubrrh(ubrrh), _ubrrl(ubrrl),
    _ucsra(ucsra), _ucsrb(ucsrb), _ucsrc(ucsrc),
    _udr(udr),
    _rx_buffer_head(0), _rx_buffer_tail(0),
    _tx_buffer_head(0), _tx_buffer_tail(0)
   114f0:	8b e1       	ldi	r24, 0x1B	; 27
   114f2:	9b e0       	ldi	r25, 0x0B	; 11
   114f4:	91 83       	std	Z+1, r25	; 0x01
   114f6:	80 83       	st	Z, r24
   114f8:	85 ed       	ldi	r24, 0xD5	; 213
   114fa:	90 e0       	ldi	r25, 0x00	; 0
   114fc:	95 87       	std	Z+13, r25	; 0x0d
   114fe:	84 87       	std	Z+12, r24	; 0x0c
   11500:	84 ed       	ldi	r24, 0xD4	; 212
   11502:	90 e0       	ldi	r25, 0x00	; 0
   11504:	97 87       	std	Z+15, r25	; 0x0f
   11506:	86 87       	std	Z+14, r24	; 0x0e
   11508:	80 ed       	ldi	r24, 0xD0	; 208
   1150a:	90 e0       	ldi	r25, 0x00	; 0
   1150c:	91 8b       	std	Z+17, r25	; 0x11
   1150e:	80 8b       	std	Z+16, r24	; 0x10
   11510:	81 ed       	ldi	r24, 0xD1	; 209
   11512:	90 e0       	ldi	r25, 0x00	; 0
   11514:	93 8b       	std	Z+19, r25	; 0x13
   11516:	82 8b       	std	Z+18, r24	; 0x12
   11518:	82 ed       	ldi	r24, 0xD2	; 210
   1151a:	90 e0       	ldi	r25, 0x00	; 0
   1151c:	95 8b       	std	Z+21, r25	; 0x15
   1151e:	84 8b       	std	Z+20, r24	; 0x14
   11520:	86 ed       	ldi	r24, 0xD6	; 214
   11522:	90 e0       	ldi	r25, 0x00	; 0
   11524:	97 8b       	std	Z+23, r25	; 0x17
   11526:	86 8b       	std	Z+22, r24	; 0x16
   11528:	11 8e       	std	Z+25, r1	; 0x19
   1152a:	12 8e       	std	Z+26, r1	; 0x1a
   1152c:	13 8e       	std	Z+27, r1	; 0x1b
   1152e:	14 8e       	std	Z+28, r1	; 0x1c
_GLOBAL__sub_I___vector_51():
C:\Users\bitmu\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial2.cpp:55
   11530:	08 95       	ret

00011532 <__vector_54>:
__vector_54():
C:\Users\bitmu\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial3.cpp:40
// first place.

#if defined(HAVE_HWSERIAL3)

ISR(USART3_RX_vect)
{
   11532:	1f 92       	push	r1
   11534:	0f 92       	push	r0
   11536:	0f b6       	in	r0, 0x3f	; 63
   11538:	0f 92       	push	r0
   1153a:	11 24       	eor	r1, r1
   1153c:	0b b6       	in	r0, 0x3b	; 59
   1153e:	0f 92       	push	r0
   11540:	2f 93       	push	r18
   11542:	8f 93       	push	r24
   11544:	9f 93       	push	r25
   11546:	ef 93       	push	r30
   11548:	ff 93       	push	r31
_ZN14HardwareSerial16_rx_complete_irqEv():
C:\Users\bitmu\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial_private.h:103

// Actual interrupt handlers //////////////////////////////////////////////////////////////

void HardwareSerial::_rx_complete_irq(void)
{
  if (bit_is_clear(*_ucsra, UPE0)) {
   1154a:	e0 91 9e 16 	lds	r30, 0x169E	; 0x80169e <Serial3+0x10>
   1154e:	f0 91 9f 16 	lds	r31, 0x169F	; 0x80169f <Serial3+0x11>
   11552:	80 81       	ld	r24, Z
   11554:	e0 91 a4 16 	lds	r30, 0x16A4	; 0x8016a4 <Serial3+0x16>
   11558:	f0 91 a5 16 	lds	r31, 0x16A5	; 0x8016a5 <Serial3+0x17>
   1155c:	82 fd       	sbrc	r24, 2
   1155e:	1d c0       	rjmp	.+58     	; 0x1159a <__vector_54+0x68>
C:\Users\bitmu\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial_private.h:106
    // No Parity error, read byte and store it in the buffer if there is
    // room
    unsigned char c = *_udr;
   11560:	90 81       	ld	r25, Z
C:\Users\bitmu\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial_private.h:107
    rx_buffer_index_t i = (unsigned int)(_rx_buffer_head + 1) % SERIAL_RX_BUFFER_SIZE;
   11562:	80 91 a7 16 	lds	r24, 0x16A7	; 0x8016a7 <Serial3+0x19>
   11566:	8f 5f       	subi	r24, 0xFF	; 255
   11568:	8f 73       	andi	r24, 0x3F	; 63
C:\Users\bitmu\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial_private.h:113

    // if we should be storing the received character into the location
    // just before the tail (meaning that the head would advance to the
    // current location of the tail), we're about to overflow the buffer
    // and so we don't write the character or advance the head.
    if (i != _rx_buffer_tail) {
   1156a:	20 91 a8 16 	lds	r18, 0x16A8	; 0x8016a8 <Serial3+0x1a>
   1156e:	82 17       	cp	r24, r18
   11570:	41 f0       	breq	.+16     	; 0x11582 <__vector_54+0x50>
C:\Users\bitmu\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial_private.h:114
      _rx_buffer[_rx_buffer_head] = c;
   11572:	e0 91 a7 16 	lds	r30, 0x16A7	; 0x8016a7 <Serial3+0x19>
   11576:	f0 e0       	ldi	r31, 0x00	; 0
   11578:	e2 57       	subi	r30, 0x72	; 114
   1157a:	f9 4e       	sbci	r31, 0xE9	; 233
   1157c:	95 8f       	std	Z+29, r25	; 0x1d
C:\Users\bitmu\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial_private.h:115
      _rx_buffer_head = i;
   1157e:	80 93 a7 16 	sts	0x16A7, r24	; 0x8016a7 <Serial3+0x19>
__vector_54():
C:\Users\bitmu\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial3.cpp:42
  Serial3._rx_complete_irq();
}
   11582:	ff 91       	pop	r31
   11584:	ef 91       	pop	r30
   11586:	9f 91       	pop	r25
   11588:	8f 91       	pop	r24
   1158a:	2f 91       	pop	r18
   1158c:	0f 90       	pop	r0
   1158e:	0b be       	out	0x3b, r0	; 59
   11590:	0f 90       	pop	r0
   11592:	0f be       	out	0x3f, r0	; 63
   11594:	0f 90       	pop	r0
   11596:	1f 90       	pop	r1
   11598:	18 95       	reti
_ZN14HardwareSerial16_rx_complete_irqEv():
C:\Users\bitmu\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial_private.h:119
    }
  } else {
    // Parity error, read byte but discard it
    *_udr;
   1159a:	80 81       	ld	r24, Z
__vector_54():
C:\Users\bitmu\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial3.cpp:42
   1159c:	f2 cf       	rjmp	.-28     	; 0x11582 <__vector_54+0x50>

0001159e <__vector_55>:
__vector_55():
C:\Users\bitmu\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial3.cpp:45

ISR(USART3_UDRE_vect)
{
   1159e:	1f 92       	push	r1
   115a0:	0f 92       	push	r0
   115a2:	0f b6       	in	r0, 0x3f	; 63
   115a4:	0f 92       	push	r0
   115a6:	11 24       	eor	r1, r1
   115a8:	0b b6       	in	r0, 0x3b	; 59
   115aa:	0f 92       	push	r0
   115ac:	2f 93       	push	r18
   115ae:	3f 93       	push	r19
   115b0:	4f 93       	push	r20
   115b2:	5f 93       	push	r21
   115b4:	6f 93       	push	r22
   115b6:	7f 93       	push	r23
   115b8:	8f 93       	push	r24
   115ba:	9f 93       	push	r25
   115bc:	af 93       	push	r26
   115be:	bf 93       	push	r27
   115c0:	ef 93       	push	r30
   115c2:	ff 93       	push	r31
C:\Users\bitmu\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial3.cpp:46
  Serial3._tx_udr_empty_irq();
   115c4:	8e e8       	ldi	r24, 0x8E	; 142
   115c6:	96 e1       	ldi	r25, 0x16	; 22
   115c8:	0e 94 8b 88 	call	0x11116	; 0x11116 <HardwareSerial::_tx_udr_empty_irq()>
C:\Users\bitmu\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial3.cpp:47
}
   115cc:	ff 91       	pop	r31
   115ce:	ef 91       	pop	r30
   115d0:	bf 91       	pop	r27
   115d2:	af 91       	pop	r26
   115d4:	9f 91       	pop	r25
   115d6:	8f 91       	pop	r24
   115d8:	7f 91       	pop	r23
   115da:	6f 91       	pop	r22
   115dc:	5f 91       	pop	r21
   115de:	4f 91       	pop	r20
   115e0:	3f 91       	pop	r19
   115e2:	2f 91       	pop	r18
   115e4:	0f 90       	pop	r0
   115e6:	0b be       	out	0x3b, r0	; 59
   115e8:	0f 90       	pop	r0
   115ea:	0f be       	out	0x3f, r0	; 63
   115ec:	0f 90       	pop	r0
   115ee:	1f 90       	pop	r1
   115f0:	18 95       	reti

000115f2 <Serial3_available()>:
_Z17Serial3_availablev():
C:\Users\bitmu\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial3.cpp:54
HardwareSerial Serial3(&UBRR3H, &UBRR3L, &UCSR3A, &UCSR3B, &UCSR3C, &UDR3);

// Function that can be weakly referenced by serialEventRun to prevent
// pulling in this file if it's not otherwise used.
bool Serial3_available() {
  return Serial3.available();
   115f2:	8e e8       	ldi	r24, 0x8E	; 142
   115f4:	96 e1       	ldi	r25, 0x16	; 22
   115f6:	0e 94 19 88 	call	0x11032	; 0x11032 <HardwareSerial::available()>
   115fa:	21 e0       	ldi	r18, 0x01	; 1
   115fc:	89 2b       	or	r24, r25
   115fe:	09 f4       	brne	.+2      	; 0x11602 <Serial3_available()+0x10>
   11600:	20 e0       	ldi	r18, 0x00	; 0
C:\Users\bitmu\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial3.cpp:55
}
   11602:	82 2f       	mov	r24, r18
   11604:	08 95       	ret

00011606 <_GLOBAL__sub_I___vector_54>:
_ZN5PrintC4Ev():
C:\Users\bitmu\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/Print.h:46
   11606:	ee e8       	ldi	r30, 0x8E	; 142
   11608:	f6 e1       	ldi	r31, 0x16	; 22
   1160a:	13 82       	std	Z+3, r1	; 0x03
   1160c:	12 82       	std	Z+2, r1	; 0x02
_ZN6StreamC4Ev():
C:\Users\bitmu\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/Stream.h:63
   1160e:	88 ee       	ldi	r24, 0xE8	; 232
   11610:	93 e0       	ldi	r25, 0x03	; 3
   11612:	a0 e0       	ldi	r26, 0x00	; 0
   11614:	b0 e0       	ldi	r27, 0x00	; 0
   11616:	84 83       	std	Z+4, r24	; 0x04
   11618:	95 83       	std	Z+5, r25	; 0x05
   1161a:	a6 83       	std	Z+6, r26	; 0x06
   1161c:	b7 83       	std	Z+7, r27	; 0x07
_ZN14HardwareSerialC4EPVhS1_S1_S1_S1_S1_():
C:\Users\bitmu\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial_private.h:95
  volatile uint8_t *ucsrc, volatile uint8_t *udr) :
    _ubrrh(ubrrh), _ubrrl(ubrrl),
    _ucsra(ucsra), _ucsrb(ucsrb), _ucsrc(ucsrc),
    _udr(udr),
    _rx_buffer_head(0), _rx_buffer_tail(0),
    _tx_buffer_head(0), _tx_buffer_tail(0)
   1161e:	8b e1       	ldi	r24, 0x1B	; 27
   11620:	9b e0       	ldi	r25, 0x0B	; 11
   11622:	91 83       	std	Z+1, r25	; 0x01
   11624:	80 83       	st	Z, r24
   11626:	85 e3       	ldi	r24, 0x35	; 53
   11628:	91 e0       	ldi	r25, 0x01	; 1
   1162a:	95 87       	std	Z+13, r25	; 0x0d
   1162c:	84 87       	std	Z+12, r24	; 0x0c
   1162e:	84 e3       	ldi	r24, 0x34	; 52
   11630:	91 e0       	ldi	r25, 0x01	; 1
   11632:	97 87       	std	Z+15, r25	; 0x0f
   11634:	86 87       	std	Z+14, r24	; 0x0e
   11636:	80 e3       	ldi	r24, 0x30	; 48
   11638:	91 e0       	ldi	r25, 0x01	; 1
   1163a:	91 8b       	std	Z+17, r25	; 0x11
   1163c:	80 8b       	std	Z+16, r24	; 0x10
   1163e:	81 e3       	ldi	r24, 0x31	; 49
   11640:	91 e0       	ldi	r25, 0x01	; 1
   11642:	93 8b       	std	Z+19, r25	; 0x13
   11644:	82 8b       	std	Z+18, r24	; 0x12
   11646:	82 e3       	ldi	r24, 0x32	; 50
   11648:	91 e0       	ldi	r25, 0x01	; 1
   1164a:	95 8b       	std	Z+21, r25	; 0x15
   1164c:	84 8b       	std	Z+20, r24	; 0x14
   1164e:	86 e3       	ldi	r24, 0x36	; 54
   11650:	91 e0       	ldi	r25, 0x01	; 1
   11652:	97 8b       	std	Z+23, r25	; 0x17
   11654:	86 8b       	std	Z+22, r24	; 0x16
   11656:	11 8e       	std	Z+25, r1	; 0x19
   11658:	12 8e       	std	Z+26, r1	; 0x1a
   1165a:	13 8e       	std	Z+27, r1	; 0x1b
   1165c:	14 8e       	std	Z+28, r1	; 0x1c
_GLOBAL__sub_I___vector_54():
C:\Users\bitmu\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial3.cpp:55
   1165e:	08 95       	ret

00011660 <Print::write(unsigned char const*, unsigned int)>:
_ZN5Print5writeEPKhj():
C:\Users\bitmu\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/Print.cpp:178
size_t Print::println(long num, int base)
{
  size_t n = print(num, base);
  n += println();
  return n;
}
   11660:	af 92       	push	r10
   11662:	bf 92       	push	r11
   11664:	cf 92       	push	r12
   11666:	df 92       	push	r13
   11668:	ef 92       	push	r14
   1166a:	ff 92       	push	r15
   1166c:	0f 93       	push	r16
   1166e:	1f 93       	push	r17
   11670:	cf 93       	push	r28
   11672:	df 93       	push	r29
   11674:	6c 01       	movw	r12, r24
   11676:	7b 01       	movw	r14, r22
   11678:	8b 01       	movw	r16, r22
   1167a:	04 0f       	add	r16, r20
   1167c:	15 1f       	adc	r17, r21
   1167e:	eb 01       	movw	r28, r22
   11680:	5e 01       	movw	r10, r28
   11682:	ae 18       	sub	r10, r14
   11684:	bf 08       	sbc	r11, r15
   11686:	c0 17       	cp	r28, r16
   11688:	d1 07       	cpc	r29, r17
   1168a:	59 f0       	breq	.+22     	; 0x116a2 <Print::write(unsigned char const*, unsigned int)+0x42>
   1168c:	69 91       	ld	r22, Y+
   1168e:	d6 01       	movw	r26, r12
   11690:	ed 91       	ld	r30, X+
   11692:	fc 91       	ld	r31, X
   11694:	01 90       	ld	r0, Z+
   11696:	f0 81       	ld	r31, Z
   11698:	e0 2d       	mov	r30, r0
   1169a:	c6 01       	movw	r24, r12
   1169c:	19 95       	eicall
   1169e:	89 2b       	or	r24, r25
   116a0:	79 f7       	brne	.-34     	; 0x11680 <Print::write(unsigned char const*, unsigned int)+0x20>
   116a2:	c5 01       	movw	r24, r10
   116a4:	df 91       	pop	r29
   116a6:	cf 91       	pop	r28
   116a8:	1f 91       	pop	r17
   116aa:	0f 91       	pop	r16
   116ac:	ff 90       	pop	r15
   116ae:	ef 90       	pop	r14
   116b0:	df 90       	pop	r13
   116b2:	cf 90       	pop	r12
   116b4:	bf 90       	pop	r11
   116b6:	af 90       	pop	r10
   116b8:	08 95       	ret

000116ba <Print::write(char const*) [clone .part.2]>:
_ZN5Print5writeEPKc():
   116ba:	fb 01       	movw	r30, r22
   116bc:	01 90       	ld	r0, Z+
   116be:	00 20       	and	r0, r0
   116c0:	e9 f7       	brne	.-6      	; 0x116bc <Print::write(char const*) [clone .part.2]+0x2>
   116c2:	31 97       	sbiw	r30, 0x01	; 1
   116c4:	af 01       	movw	r20, r30
   116c6:	46 1b       	sub	r20, r22
   116c8:	57 0b       	sbc	r21, r23
   116ca:	dc 01       	movw	r26, r24
   116cc:	ed 91       	ld	r30, X+
   116ce:	fc 91       	ld	r31, X
   116d0:	02 80       	ldd	r0, Z+2	; 0x02
   116d2:	f3 81       	ldd	r31, Z+3	; 0x03
   116d4:	e0 2d       	mov	r30, r0
   116d6:	19 94       	eijmp

000116d8 <Print::print(__FlashStringHelper const*)>:
_ZN5Print5printEPK19__FlashStringHelper():
   116d8:	ef 92       	push	r14
   116da:	ff 92       	push	r15
   116dc:	0f 93       	push	r16
   116de:	1f 93       	push	r17
   116e0:	cf 93       	push	r28
   116e2:	df 93       	push	r29
   116e4:	8c 01       	movw	r16, r24
   116e6:	7b 01       	movw	r14, r22
   116e8:	d0 e0       	ldi	r29, 0x00	; 0
   116ea:	c0 e0       	ldi	r28, 0x00	; 0
   116ec:	f7 01       	movw	r30, r14
   116ee:	ec 0f       	add	r30, r28
   116f0:	fd 1f       	adc	r31, r29
   116f2:	64 91       	lpm	r22, Z
   116f4:	66 23       	and	r22, r22
   116f6:	61 f0       	breq	.+24     	; 0x11710 <Print::print(__FlashStringHelper const*)+0x38>
   116f8:	d8 01       	movw	r26, r16
   116fa:	ed 91       	ld	r30, X+
   116fc:	fc 91       	ld	r31, X
   116fe:	01 90       	ld	r0, Z+
   11700:	f0 81       	ld	r31, Z
   11702:	e0 2d       	mov	r30, r0
   11704:	c8 01       	movw	r24, r16
   11706:	19 95       	eicall
   11708:	89 2b       	or	r24, r25
   1170a:	11 f0       	breq	.+4      	; 0x11710 <Print::print(__FlashStringHelper const*)+0x38>
   1170c:	21 96       	adiw	r28, 0x01	; 1
   1170e:	ee cf       	rjmp	.-36     	; 0x116ec <Print::print(__FlashStringHelper const*)+0x14>
   11710:	ce 01       	movw	r24, r28
   11712:	df 91       	pop	r29
   11714:	cf 91       	pop	r28
   11716:	1f 91       	pop	r17
   11718:	0f 91       	pop	r16
   1171a:	ff 90       	pop	r15
   1171c:	ef 90       	pop	r14
   1171e:	08 95       	ret

00011720 <Print::print(String const&)>:
_ZN5Print5writeEPKcj():
   11720:	db 01       	movw	r26, r22
   11722:	14 96       	adiw	r26, 0x04	; 4
   11724:	4d 91       	ld	r20, X+
   11726:	5c 91       	ld	r21, X
   11728:	15 97       	sbiw	r26, 0x05	; 5
   1172a:	6d 91       	ld	r22, X+
   1172c:	7c 91       	ld	r23, X
   1172e:	dc 01       	movw	r26, r24
   11730:	ed 91       	ld	r30, X+
   11732:	fc 91       	ld	r31, X
   11734:	02 80       	ldd	r0, Z+2	; 0x02
   11736:	f3 81       	ldd	r31, Z+3	; 0x03
   11738:	e0 2d       	mov	r30, r0
   1173a:	19 94       	eijmp

0001173c <Print::print(char const*)>:
_ZN5Print5writeEPKc():
   1173c:	61 15       	cp	r22, r1
   1173e:	71 05       	cpc	r23, r1
   11740:	11 f0       	breq	.+4      	; 0x11746 <Print::print(char const*)+0xa>
   11742:	0c 94 5d 8b 	jmp	0x116ba	; 0x116ba <Print::write(char const*) [clone .part.2]>
_ZN5Print5printEPKc():
   11746:	90 e0       	ldi	r25, 0x00	; 0
   11748:	80 e0       	ldi	r24, 0x00	; 0
   1174a:	08 95       	ret

0001174c <Print::print(char)>:
_ZN5Print5printEc():
   1174c:	dc 01       	movw	r26, r24
   1174e:	ed 91       	ld	r30, X+
   11750:	fc 91       	ld	r31, X
   11752:	01 90       	ld	r0, Z+
   11754:	f0 81       	ld	r31, Z
   11756:	e0 2d       	mov	r30, r0
   11758:	19 94       	eijmp

0001175a <Print::println()>:
_ZN5Print5writeEPKc():
   1175a:	69 e2       	ldi	r22, 0x29	; 41
   1175c:	7b e0       	ldi	r23, 0x0B	; 11
   1175e:	0c 94 5d 8b 	jmp	0x116ba	; 0x116ba <Print::write(char const*) [clone .part.2]>

00011762 <Print::println(__FlashStringHelper const*)>:
_ZN5Print7printlnEPK19__FlashStringHelper():
   11762:	0f 93       	push	r16
   11764:	1f 93       	push	r17
   11766:	cf 93       	push	r28
   11768:	df 93       	push	r29
   1176a:	ec 01       	movw	r28, r24
   1176c:	0e 94 6c 8b 	call	0x116d8	; 0x116d8 <Print::print(__FlashStringHelper const*)>
   11770:	8c 01       	movw	r16, r24
   11772:	ce 01       	movw	r24, r28
   11774:	0e 94 ad 8b 	call	0x1175a	; 0x1175a <Print::println()>
   11778:	80 0f       	add	r24, r16
   1177a:	91 1f       	adc	r25, r17
   1177c:	df 91       	pop	r29
   1177e:	cf 91       	pop	r28
   11780:	1f 91       	pop	r17
   11782:	0f 91       	pop	r16
   11784:	08 95       	ret

00011786 <Print::println(char const*)>:
_ZN5Print7printlnEPKc():
   11786:	0f 93       	push	r16
   11788:	1f 93       	push	r17
   1178a:	cf 93       	push	r28
   1178c:	df 93       	push	r29
   1178e:	8c 01       	movw	r16, r24
_ZN5Print5writeEPKc():
   11790:	d0 e0       	ldi	r29, 0x00	; 0
   11792:	c0 e0       	ldi	r28, 0x00	; 0
   11794:	61 15       	cp	r22, r1
   11796:	71 05       	cpc	r23, r1
   11798:	19 f0       	breq	.+6      	; 0x117a0 <Print::println(char const*)+0x1a>
   1179a:	0e 94 5d 8b 	call	0x116ba	; 0x116ba <Print::write(char const*) [clone .part.2]>
   1179e:	ec 01       	movw	r28, r24
_ZN5Print7printlnEPKc():
   117a0:	c8 01       	movw	r24, r16
   117a2:	0e 94 ad 8b 	call	0x1175a	; 0x1175a <Print::println()>
   117a6:	8c 0f       	add	r24, r28
   117a8:	9d 1f       	adc	r25, r29
   117aa:	df 91       	pop	r29
   117ac:	cf 91       	pop	r28
   117ae:	1f 91       	pop	r17
   117b0:	0f 91       	pop	r16
   117b2:	08 95       	ret

000117b4 <Print::println(char)>:
_ZN5Print7printlnEc():
   117b4:	0f 93       	push	r16
   117b6:	1f 93       	push	r17
   117b8:	cf 93       	push	r28
   117ba:	df 93       	push	r29
   117bc:	ec 01       	movw	r28, r24
   117be:	0e 94 a6 8b 	call	0x1174c	; 0x1174c <Print::print(char)>
   117c2:	8c 01       	movw	r16, r24
   117c4:	ce 01       	movw	r24, r28
   117c6:	0e 94 ad 8b 	call	0x1175a	; 0x1175a <Print::println()>
   117ca:	80 0f       	add	r24, r16
   117cc:	91 1f       	adc	r25, r17
   117ce:	df 91       	pop	r29
   117d0:	cf 91       	pop	r28
   117d2:	1f 91       	pop	r17
   117d4:	0f 91       	pop	r16
   117d6:	08 95       	ret

000117d8 <Print::printNumber(unsigned long, unsigned char)>:
_ZN5Print11printNumberEmh():
   117d8:	8f 92       	push	r8
   117da:	9f 92       	push	r9
   117dc:	af 92       	push	r10
   117de:	bf 92       	push	r11
   117e0:	ef 92       	push	r14
   117e2:	ff 92       	push	r15
   117e4:	0f 93       	push	r16
   117e6:	1f 93       	push	r17
   117e8:	cf 93       	push	r28
   117ea:	df 93       	push	r29
   117ec:	cd b7       	in	r28, 0x3d	; 61
   117ee:	de b7       	in	r29, 0x3e	; 62
   117f0:	a1 97       	sbiw	r28, 0x21	; 33
   117f2:	0f b6       	in	r0, 0x3f	; 63
   117f4:	f8 94       	cli
   117f6:	de bf       	out	0x3e, r29	; 62
   117f8:	0f be       	out	0x3f, r0	; 63
   117fa:	cd bf       	out	0x3d, r28	; 61
   117fc:	7c 01       	movw	r14, r24
   117fe:	fa 01       	movw	r30, r20
   11800:	cb 01       	movw	r24, r22
   11802:	19 a2       	std	Y+33, r1	; 0x21
   11804:	22 30       	cpi	r18, 0x02	; 2
   11806:	08 f4       	brcc	.+2      	; 0x1180a <Print::printNumber(unsigned long, unsigned char)+0x32>
   11808:	2a e0       	ldi	r18, 0x0A	; 10
   1180a:	8e 01       	movw	r16, r28
   1180c:	0f 5d       	subi	r16, 0xDF	; 223
   1180e:	1f 4f       	sbci	r17, 0xFF	; 255
   11810:	82 2e       	mov	r8, r18
   11812:	91 2c       	mov	r9, r1
   11814:	b1 2c       	mov	r11, r1
   11816:	a1 2c       	mov	r10, r1
   11818:	bf 01       	movw	r22, r30
   1181a:	a5 01       	movw	r20, r10
   1181c:	94 01       	movw	r18, r8
   1181e:	0e 94 ea 91 	call	0x123d4	; 0x123d4 <__udivmodsi4>
   11822:	f9 01       	movw	r30, r18
   11824:	ca 01       	movw	r24, r20
   11826:	6a 30       	cpi	r22, 0x0A	; 10
   11828:	0c f5       	brge	.+66     	; 0x1186c <Print::printNumber(unsigned long, unsigned char)+0x94>
   1182a:	60 5d       	subi	r22, 0xD0	; 208
   1182c:	d8 01       	movw	r26, r16
   1182e:	6e 93       	st	-X, r22
   11830:	8d 01       	movw	r16, r26
   11832:	23 2b       	or	r18, r19
   11834:	24 2b       	or	r18, r20
   11836:	25 2b       	or	r18, r21
   11838:	79 f7       	brne	.-34     	; 0x11818 <Print::printNumber(unsigned long, unsigned char)+0x40>
_ZN5Print5writeEPKc():
   1183a:	90 e0       	ldi	r25, 0x00	; 0
   1183c:	80 e0       	ldi	r24, 0x00	; 0
   1183e:	10 97       	sbiw	r26, 0x00	; 0
   11840:	21 f0       	breq	.+8      	; 0x1184a <Print::printNumber(unsigned long, unsigned char)+0x72>
   11842:	bd 01       	movw	r22, r26
   11844:	c7 01       	movw	r24, r14
   11846:	0e 94 5d 8b 	call	0x116ba	; 0x116ba <Print::write(char const*) [clone .part.2]>
_ZN5Print11printNumberEmh():
   1184a:	a1 96       	adiw	r28, 0x21	; 33
   1184c:	0f b6       	in	r0, 0x3f	; 63
   1184e:	f8 94       	cli
   11850:	de bf       	out	0x3e, r29	; 62
   11852:	0f be       	out	0x3f, r0	; 63
   11854:	cd bf       	out	0x3d, r28	; 61
   11856:	df 91       	pop	r29
   11858:	cf 91       	pop	r28
   1185a:	1f 91       	pop	r17
   1185c:	0f 91       	pop	r16
   1185e:	ff 90       	pop	r15
   11860:	ef 90       	pop	r14
   11862:	bf 90       	pop	r11
   11864:	af 90       	pop	r10
   11866:	9f 90       	pop	r9
   11868:	8f 90       	pop	r8
   1186a:	08 95       	ret
   1186c:	69 5c       	subi	r22, 0xC9	; 201
   1186e:	de cf       	rjmp	.-68     	; 0x1182c <Print::printNumber(unsigned long, unsigned char)+0x54>

00011870 <Print::print(long, int)>:
_ZN5Print5printEli():
   11870:	cf 92       	push	r12
   11872:	df 92       	push	r13
   11874:	ef 92       	push	r14
   11876:	ff 92       	push	r15
   11878:	0f 93       	push	r16
   1187a:	1f 93       	push	r17
   1187c:	cf 93       	push	r28
   1187e:	df 93       	push	r29
   11880:	21 15       	cp	r18, r1
   11882:	31 05       	cpc	r19, r1
   11884:	81 f4       	brne	.+32     	; 0x118a6 <Print::print(long, int)+0x36>
   11886:	dc 01       	movw	r26, r24
   11888:	ed 91       	ld	r30, X+
   1188a:	fc 91       	ld	r31, X
   1188c:	01 90       	ld	r0, Z+
   1188e:	f0 81       	ld	r31, Z
   11890:	e0 2d       	mov	r30, r0
   11892:	64 2f       	mov	r22, r20
   11894:	df 91       	pop	r29
   11896:	cf 91       	pop	r28
   11898:	1f 91       	pop	r17
   1189a:	0f 91       	pop	r16
   1189c:	ff 90       	pop	r15
   1189e:	ef 90       	pop	r14
   118a0:	df 90       	pop	r13
   118a2:	cf 90       	pop	r12
   118a4:	19 94       	eijmp
   118a6:	2a 30       	cpi	r18, 0x0A	; 10
   118a8:	31 05       	cpc	r19, r1
   118aa:	01 f5       	brne	.+64     	; 0x118ec <Print::print(long, int)+0x7c>
   118ac:	2a e0       	ldi	r18, 0x0A	; 10
   118ae:	77 ff       	sbrs	r23, 7
   118b0:	1d c0       	rjmp	.+58     	; 0x118ec <Print::print(long, int)+0x7c>
   118b2:	6a 01       	movw	r12, r20
   118b4:	7b 01       	movw	r14, r22
   118b6:	ec 01       	movw	r28, r24
   118b8:	6d e2       	ldi	r22, 0x2D	; 45
   118ba:	0e 94 a6 8b 	call	0x1174c	; 0x1174c <Print::print(char)>
   118be:	8c 01       	movw	r16, r24
   118c0:	44 27       	eor	r20, r20
   118c2:	55 27       	eor	r21, r21
   118c4:	ba 01       	movw	r22, r20
   118c6:	4c 19       	sub	r20, r12
   118c8:	5d 09       	sbc	r21, r13
   118ca:	6e 09       	sbc	r22, r14
   118cc:	7f 09       	sbc	r23, r15
   118ce:	2a e0       	ldi	r18, 0x0A	; 10
   118d0:	ce 01       	movw	r24, r28
   118d2:	0e 94 ec 8b 	call	0x117d8	; 0x117d8 <Print::printNumber(unsigned long, unsigned char)>
   118d6:	80 0f       	add	r24, r16
   118d8:	91 1f       	adc	r25, r17
   118da:	df 91       	pop	r29
   118dc:	cf 91       	pop	r28
   118de:	1f 91       	pop	r17
   118e0:	0f 91       	pop	r16
   118e2:	ff 90       	pop	r15
   118e4:	ef 90       	pop	r14
   118e6:	df 90       	pop	r13
   118e8:	cf 90       	pop	r12
   118ea:	08 95       	ret
   118ec:	df 91       	pop	r29
   118ee:	cf 91       	pop	r28
   118f0:	1f 91       	pop	r17
   118f2:	0f 91       	pop	r16
   118f4:	ff 90       	pop	r15
   118f6:	ef 90       	pop	r14
   118f8:	df 90       	pop	r13
   118fa:	cf 90       	pop	r12
   118fc:	0c 94 ec 8b 	jmp	0x117d8	; 0x117d8 <Print::printNumber(unsigned long, unsigned char)>

00011900 <Print::print(int, int)>:
_ZN5Print5printEii():
   11900:	9a 01       	movw	r18, r20
   11902:	ab 01       	movw	r20, r22
   11904:	77 0f       	add	r23, r23
   11906:	66 0b       	sbc	r22, r22
   11908:	77 0b       	sbc	r23, r23
   1190a:	0c 94 38 8c 	jmp	0x11870	; 0x11870 <Print::print(long, int)>

0001190e <Print::println(int, int)>:
_ZN5Print7printlnEii():
   1190e:	0f 93       	push	r16
   11910:	1f 93       	push	r17
   11912:	cf 93       	push	r28
   11914:	df 93       	push	r29
   11916:	ec 01       	movw	r28, r24
   11918:	0e 94 80 8c 	call	0x11900	; 0x11900 <Print::print(int, int)>
   1191c:	8c 01       	movw	r16, r24
   1191e:	ce 01       	movw	r24, r28
   11920:	0e 94 ad 8b 	call	0x1175a	; 0x1175a <Print::println()>
   11924:	80 0f       	add	r24, r16
   11926:	91 1f       	adc	r25, r17
   11928:	df 91       	pop	r29
   1192a:	cf 91       	pop	r28
   1192c:	1f 91       	pop	r17
   1192e:	0f 91       	pop	r16
   11930:	08 95       	ret

00011932 <Print::print(unsigned long, int)>:
_ZN5Print5printEmi():
C:\Users\bitmu\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/Print.cpp:105
  }
}

size_t Print::print(unsigned long n, int base)
{
  if (base == 0) return write(n);
   11932:	21 15       	cp	r18, r1
   11934:	31 05       	cpc	r19, r1
   11936:	41 f4       	brne	.+16     	; 0x11948 <Print::print(unsigned long, int)+0x16>
   11938:	dc 01       	movw	r26, r24
   1193a:	ed 91       	ld	r30, X+
   1193c:	fc 91       	ld	r31, X
   1193e:	01 90       	ld	r0, Z+
   11940:	f0 81       	ld	r31, Z
   11942:	e0 2d       	mov	r30, r0
   11944:	64 2f       	mov	r22, r20
   11946:	19 94       	eijmp
C:\Users\bitmu\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/Print.cpp:106
  else return printNumber(n, base);
   11948:	0c 94 ec 8b 	jmp	0x117d8	; 0x117d8 <Print::printNumber(unsigned long, unsigned char)>

0001194c <Print::print(unsigned char, int)>:
_ZN5Print5printEhi():
C:\Users\bitmu\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/Print.cpp:73
{
  return write(c);
}

size_t Print::print(unsigned char b, int base)
{
   1194c:	9a 01       	movw	r18, r20
C:\Users\bitmu\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/Print.cpp:74
  return print((unsigned long) b, base);
   1194e:	46 2f       	mov	r20, r22
   11950:	50 e0       	ldi	r21, 0x00	; 0
   11952:	70 e0       	ldi	r23, 0x00	; 0
   11954:	60 e0       	ldi	r22, 0x00	; 0
   11956:	0c 94 99 8c 	jmp	0x11932	; 0x11932 <Print::print(unsigned long, int)>

0001195a <Print::println(unsigned char, int)>:
_ZN5Print7printlnEhi():
C:\Users\bitmu\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/Print.cpp:153
  n += println();
  return n;
}

size_t Print::println(unsigned char b, int base)
{
   1195a:	0f 93       	push	r16
   1195c:	1f 93       	push	r17
   1195e:	cf 93       	push	r28
   11960:	df 93       	push	r29
   11962:	ec 01       	movw	r28, r24
C:\Users\bitmu\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/Print.cpp:154
  size_t n = print(b, base);
   11964:	0e 94 a6 8c 	call	0x1194c	; 0x1194c <Print::print(unsigned char, int)>
   11968:	8c 01       	movw	r16, r24
C:\Users\bitmu\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/Print.cpp:155
  n += println();
   1196a:	ce 01       	movw	r24, r28
   1196c:	0e 94 ad 8b 	call	0x1175a	; 0x1175a <Print::println()>
C:\Users\bitmu\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/Print.cpp:157
  return n;
}
   11970:	80 0f       	add	r24, r16
   11972:	91 1f       	adc	r25, r17
   11974:	df 91       	pop	r29
   11976:	cf 91       	pop	r28
   11978:	1f 91       	pop	r17
   1197a:	0f 91       	pop	r16
   1197c:	08 95       	ret

0001197e <Print::print(unsigned int, int)>:
_ZN5Print5printEji():
C:\Users\bitmu\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/Print.cpp:83
{
  return print((long) n, base);
}

size_t Print::print(unsigned int n, int base)
{
   1197e:	9a 01       	movw	r18, r20
C:\Users\bitmu\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/Print.cpp:84
  return print((unsigned long) n, base);
   11980:	ab 01       	movw	r20, r22
   11982:	70 e0       	ldi	r23, 0x00	; 0
   11984:	60 e0       	ldi	r22, 0x00	; 0
   11986:	0c 94 99 8c 	jmp	0x11932	; 0x11932 <Print::print(unsigned long, int)>

0001198a <Print::println(unsigned int, int)>:
_ZN5Print7printlnEji():
C:\Users\bitmu\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/Print.cpp:167
  n += println();
  return n;
}

size_t Print::println(unsigned int num, int base)
{
   1198a:	0f 93       	push	r16
   1198c:	1f 93       	push	r17
   1198e:	cf 93       	push	r28
   11990:	df 93       	push	r29
   11992:	ec 01       	movw	r28, r24
C:\Users\bitmu\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/Print.cpp:168
  size_t n = print(num, base);
   11994:	0e 94 bf 8c 	call	0x1197e	; 0x1197e <Print::print(unsigned int, int)>
   11998:	8c 01       	movw	r16, r24
C:\Users\bitmu\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/Print.cpp:169
  n += println();
   1199a:	ce 01       	movw	r24, r28
   1199c:	0e 94 ad 8b 	call	0x1175a	; 0x1175a <Print::println()>
C:\Users\bitmu\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/Print.cpp:171
  return n;
}
   119a0:	80 0f       	add	r24, r16
   119a2:	91 1f       	adc	r25, r17
   119a4:	df 91       	pop	r29
   119a6:	cf 91       	pop	r28
   119a8:	1f 91       	pop	r17
   119aa:	0f 91       	pop	r16
   119ac:	08 95       	ret

000119ae <Print::println(unsigned long, int)>:
_ZN5Print7printlnEmi():
C:\Users\bitmu\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/Print.cpp:181
  n += println();
  return n;
}

size_t Print::println(unsigned long num, int base)
{
   119ae:	0f 93       	push	r16
   119b0:	1f 93       	push	r17
   119b2:	cf 93       	push	r28
   119b4:	df 93       	push	r29
   119b6:	ec 01       	movw	r28, r24
C:\Users\bitmu\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/Print.cpp:182
  size_t n = print(num, base);
   119b8:	0e 94 99 8c 	call	0x11932	; 0x11932 <Print::print(unsigned long, int)>
   119bc:	8c 01       	movw	r16, r24
C:\Users\bitmu\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/Print.cpp:183
  n += println();
   119be:	ce 01       	movw	r24, r28
   119c0:	0e 94 ad 8b 	call	0x1175a	; 0x1175a <Print::println()>
C:\Users\bitmu\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/Print.cpp:185
  return n;
}
   119c4:	80 0f       	add	r24, r16
   119c6:	91 1f       	adc	r25, r17
   119c8:	df 91       	pop	r29
   119ca:	cf 91       	pop	r28
   119cc:	1f 91       	pop	r17
   119ce:	0f 91       	pop	r16
   119d0:	08 95       	ret

000119d2 <Print::printFloat(double, unsigned char)>:
_ZN5Print10printFloatEdh():
C:\Users\bitmu\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/Print.cpp:253

  return write(str);
}

size_t Print::printFloat(double number, uint8_t digits) 
{ 
   119d2:	2f 92       	push	r2
   119d4:	3f 92       	push	r3
   119d6:	4f 92       	push	r4
   119d8:	5f 92       	push	r5
   119da:	6f 92       	push	r6
   119dc:	7f 92       	push	r7
   119de:	8f 92       	push	r8
   119e0:	9f 92       	push	r9
   119e2:	af 92       	push	r10
   119e4:	bf 92       	push	r11
   119e6:	cf 92       	push	r12
   119e8:	df 92       	push	r13
   119ea:	ef 92       	push	r14
   119ec:	ff 92       	push	r15
   119ee:	1f 93       	push	r17
   119f0:	cf 93       	push	r28
   119f2:	df 93       	push	r29
   119f4:	ec 01       	movw	r28, r24
   119f6:	6a 01       	movw	r12, r20
   119f8:	7b 01       	movw	r14, r22
   119fa:	72 2e       	mov	r7, r18
C:\Users\bitmu\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/Print.cpp:256
  size_t n = 0;
  
  if (isnan(number)) return print("nan");
   119fc:	ab 01       	movw	r20, r22
   119fe:	96 01       	movw	r18, r12
   11a00:	cb 01       	movw	r24, r22
   11a02:	b6 01       	movw	r22, r12
   11a04:	0e 94 ad 91 	call	0x1235a	; 0x1235a <__unordsf2>
_ZN5Print5writeEPKc():
   11a08:	6c e2       	ldi	r22, 0x2C	; 44
   11a0a:	7b e0       	ldi	r23, 0x0B	; 11
_ZN5Print10printFloatEdh():
   11a0c:	81 11       	cpse	r24, r1
   11a0e:	26 c0       	rjmp	.+76     	; 0x11a5c <Print::printFloat(double, unsigned char)+0x8a>
C:\Users\bitmu\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/Print.cpp:257
  if (isinf(number)) return print("inf");
   11a10:	46 01       	movw	r8, r12
   11a12:	57 01       	movw	r10, r14
   11a14:	e8 94       	clt
   11a16:	b7 f8       	bld	r11, 7
   11a18:	2f ef       	ldi	r18, 0xFF	; 255
   11a1a:	3f ef       	ldi	r19, 0xFF	; 255
   11a1c:	4f e7       	ldi	r20, 0x7F	; 127
   11a1e:	5f e7       	ldi	r21, 0x7F	; 127
   11a20:	c5 01       	movw	r24, r10
   11a22:	b4 01       	movw	r22, r8
   11a24:	0e 94 ad 91 	call	0x1235a	; 0x1235a <__unordsf2>
   11a28:	81 11       	cpse	r24, r1
   11a2a:	0c c0       	rjmp	.+24     	; 0x11a44 <Print::printFloat(double, unsigned char)+0x72>
   11a2c:	2f ef       	ldi	r18, 0xFF	; 255
   11a2e:	3f ef       	ldi	r19, 0xFF	; 255
   11a30:	4f e7       	ldi	r20, 0x7F	; 127
   11a32:	5f e7       	ldi	r21, 0x7F	; 127
   11a34:	c5 01       	movw	r24, r10
   11a36:	b4 01       	movw	r22, r8
   11a38:	0e 94 dc 8f 	call	0x11fb8	; 0x11fb8 <__cmpsf2>
_ZN5Print5writeEPKc():
   11a3c:	60 e3       	ldi	r22, 0x30	; 48
   11a3e:	7b e0       	ldi	r23, 0x0B	; 11
_ZN5Print10printFloatEdh():
   11a40:	18 16       	cp	r1, r24
   11a42:	64 f0       	brlt	.+24     	; 0x11a5c <Print::printFloat(double, unsigned char)+0x8a>
C:\Users\bitmu\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/Print.cpp:258
  if (number > 4294967040.0) return print ("ovf");  // constant determined empirically
   11a44:	2f ef       	ldi	r18, 0xFF	; 255
   11a46:	3f ef       	ldi	r19, 0xFF	; 255
   11a48:	4f e7       	ldi	r20, 0x7F	; 127
   11a4a:	5f e4       	ldi	r21, 0x4F	; 79
   11a4c:	c7 01       	movw	r24, r14
   11a4e:	b6 01       	movw	r22, r12
   11a50:	0e 94 3b 91 	call	0x12276	; 0x12276 <__gesf2>
   11a54:	18 16       	cp	r1, r24
   11a56:	b4 f4       	brge	.+44     	; 0x11a84 <Print::printFloat(double, unsigned char)+0xb2>
_ZN5Print5writeEPKc():
   11a58:	64 e3       	ldi	r22, 0x34	; 52
   11a5a:	7b e0       	ldi	r23, 0x0B	; 11
   11a5c:	ce 01       	movw	r24, r28
_ZN5Print10printFloatEdh():
C:\Users\bitmu\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/Print.cpp:295
    n += print(toPrint);
    remainder -= toPrint; 
  } 
  
  return n;
}
   11a5e:	df 91       	pop	r29
   11a60:	cf 91       	pop	r28
   11a62:	1f 91       	pop	r17
   11a64:	ff 90       	pop	r15
   11a66:	ef 90       	pop	r14
   11a68:	df 90       	pop	r13
   11a6a:	cf 90       	pop	r12
   11a6c:	bf 90       	pop	r11
   11a6e:	af 90       	pop	r10
   11a70:	9f 90       	pop	r9
   11a72:	8f 90       	pop	r8
   11a74:	7f 90       	pop	r7
   11a76:	6f 90       	pop	r6
   11a78:	5f 90       	pop	r5
   11a7a:	4f 90       	pop	r4
   11a7c:	3f 90       	pop	r3
   11a7e:	2f 90       	pop	r2
_ZN5Print5writeEPKc():
   11a80:	0c 94 5d 8b 	jmp	0x116ba	; 0x116ba <Print::write(char const*) [clone .part.2]>
_ZN5Print10printFloatEdh():
C:\Users\bitmu\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/Print.cpp:259
  size_t n = 0;
  
  if (isnan(number)) return print("nan");
  if (isinf(number)) return print("inf");
  if (number > 4294967040.0) return print ("ovf");  // constant determined empirically
  if (number <-4294967040.0) return print ("ovf");  // constant determined empirically
   11a84:	2f ef       	ldi	r18, 0xFF	; 255
   11a86:	3f ef       	ldi	r19, 0xFF	; 255
   11a88:	4f e7       	ldi	r20, 0x7F	; 127
   11a8a:	5f ec       	ldi	r21, 0xCF	; 207
   11a8c:	c7 01       	movw	r24, r14
   11a8e:	b6 01       	movw	r22, r12
   11a90:	0e 94 dc 8f 	call	0x11fb8	; 0x11fb8 <__cmpsf2>
   11a94:	87 fd       	sbrc	r24, 7
   11a96:	e0 cf       	rjmp	.-64     	; 0x11a58 <Print::printFloat(double, unsigned char)+0x86>
C:\Users\bitmu\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/Print.cpp:262
  
  // Handle negative numbers
  if (number < 0.0)
   11a98:	20 e0       	ldi	r18, 0x00	; 0
   11a9a:	30 e0       	ldi	r19, 0x00	; 0
   11a9c:	a9 01       	movw	r20, r18
   11a9e:	c7 01       	movw	r24, r14
   11aa0:	b6 01       	movw	r22, r12
   11aa2:	0e 94 dc 8f 	call	0x11fb8	; 0x11fb8 <__cmpsf2>
C:\Users\bitmu\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/Print.cpp:254
  return write(str);
}

size_t Print::printFloat(double number, uint8_t digits) 
{ 
  size_t n = 0;
   11aa6:	31 2c       	mov	r3, r1
   11aa8:	21 2c       	mov	r2, r1
C:\Users\bitmu\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/Print.cpp:262
  if (isinf(number)) return print("inf");
  if (number > 4294967040.0) return print ("ovf");  // constant determined empirically
  if (number <-4294967040.0) return print ("ovf");  // constant determined empirically
  
  // Handle negative numbers
  if (number < 0.0)
   11aaa:	87 ff       	sbrs	r24, 7
   11aac:	09 c0       	rjmp	.+18     	; 0x11ac0 <Print::printFloat(double, unsigned char)+0xee>
C:\Users\bitmu\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/Print.cpp:264
  {
     n += print('-');
   11aae:	6d e2       	ldi	r22, 0x2D	; 45
   11ab0:	ce 01       	movw	r24, r28
   11ab2:	0e 94 a6 8b 	call	0x1174c	; 0x1174c <Print::print(char)>
   11ab6:	1c 01       	movw	r2, r24
C:\Users\bitmu\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/Print.cpp:265
     number = -number;
   11ab8:	f7 fa       	bst	r15, 7
   11aba:	f0 94       	com	r15
   11abc:	f7 f8       	bld	r15, 7
   11abe:	f0 94       	com	r15
C:\Users\bitmu\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/Print.cpp:270
  }

  // Round correctly so that print(1.999, 2) prints as "2.00"
  double rounding = 0.5;
  for (uint8_t i=0; i<digits; ++i)
   11ac0:	10 e0       	ldi	r17, 0x00	; 0
C:\Users\bitmu\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/Print.cpp:269
     n += print('-');
     number = -number;
  }

  // Round correctly so that print(1.999, 2) prints as "2.00"
  double rounding = 0.5;
   11ac2:	60 e0       	ldi	r22, 0x00	; 0
   11ac4:	70 e0       	ldi	r23, 0x00	; 0
   11ac6:	80 e0       	ldi	r24, 0x00	; 0
   11ac8:	9f e3       	ldi	r25, 0x3F	; 63
C:\Users\bitmu\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/Print.cpp:270
  for (uint8_t i=0; i<digits; ++i)
   11aca:	71 16       	cp	r7, r17
   11acc:	41 f0       	breq	.+16     	; 0x11ade <Print::printFloat(double, unsigned char)+0x10c>
C:\Users\bitmu\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/Print.cpp:271
    rounding /= 10.0;
   11ace:	20 e0       	ldi	r18, 0x00	; 0
   11ad0:	30 e0       	ldi	r19, 0x00	; 0
   11ad2:	40 e2       	ldi	r20, 0x20	; 32
   11ad4:	51 e4       	ldi	r21, 0x41	; 65
   11ad6:	0e 94 e1 8f 	call	0x11fc2	; 0x11fc2 <__divsf3>
C:\Users\bitmu\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/Print.cpp:270
     number = -number;
  }

  // Round correctly so that print(1.999, 2) prints as "2.00"
  double rounding = 0.5;
  for (uint8_t i=0; i<digits; ++i)
   11ada:	1f 5f       	subi	r17, 0xFF	; 255
   11adc:	f6 cf       	rjmp	.-20     	; 0x11aca <Print::printFloat(double, unsigned char)+0xf8>
C:\Users\bitmu\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/Print.cpp:273
    rounding /= 10.0;
  
  number += rounding;
   11ade:	a7 01       	movw	r20, r14
   11ae0:	96 01       	movw	r18, r12
   11ae2:	0e 94 70 8f 	call	0x11ee0	; 0x11ee0 <__addsf3>
   11ae6:	2b 01       	movw	r4, r22
   11ae8:	3c 01       	movw	r6, r24
C:\Users\bitmu\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/Print.cpp:276

  // Extract the integer part of the number and print it
  unsigned long int_part = (unsigned long)number;
   11aea:	0e 94 5a 90 	call	0x120b4	; 0x120b4 <__fixunssfsi>
   11aee:	4b 01       	movw	r8, r22
   11af0:	5c 01       	movw	r10, r24
_ZN5Print5printEmi():
C:\Users\bitmu\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/Print.cpp:106
}

size_t Print::print(unsigned long n, int base)
{
  if (base == 0) return write(n);
  else return printNumber(n, base);
   11af2:	2a e0       	ldi	r18, 0x0A	; 10
   11af4:	bc 01       	movw	r22, r24
   11af6:	a4 01       	movw	r20, r8
   11af8:	ce 01       	movw	r24, r28
   11afa:	0e 94 ec 8b 	call	0x117d8	; 0x117d8 <Print::printNumber(unsigned long, unsigned char)>
_ZN5Print10printFloatEdh():
C:\Users\bitmu\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/Print.cpp:278
  number += rounding;

  // Extract the integer part of the number and print it
  unsigned long int_part = (unsigned long)number;
  double remainder = number - (double)int_part;
  n += print(int_part);
   11afe:	7c 01       	movw	r14, r24
   11b00:	e2 0c       	add	r14, r2
   11b02:	f3 1c       	adc	r15, r3
C:\Users\bitmu\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/Print.cpp:281

  // Print the decimal point, but only if there are digits beyond
  if (digits > 0) {
   11b04:	11 23       	and	r17, r17
   11b06:	b1 f1       	breq	.+108    	; 0x11b74 <Print::printFloat(double, unsigned char)+0x1a2>
C:\Users\bitmu\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/Print.cpp:277
  
  number += rounding;

  // Extract the integer part of the number and print it
  unsigned long int_part = (unsigned long)number;
  double remainder = number - (double)int_part;
   11b08:	c5 01       	movw	r24, r10
   11b0a:	b4 01       	movw	r22, r8
   11b0c:	0e 94 89 90 	call	0x12112	; 0x12112 <__floatunsisf>
   11b10:	9b 01       	movw	r18, r22
   11b12:	ac 01       	movw	r20, r24
   11b14:	c3 01       	movw	r24, r6
   11b16:	b2 01       	movw	r22, r4
   11b18:	0e 94 6f 8f 	call	0x11ede	; 0x11ede <__subsf3>
   11b1c:	4b 01       	movw	r8, r22
   11b1e:	5c 01       	movw	r10, r24
C:\Users\bitmu\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/Print.cpp:282
  n += print(int_part);

  // Print the decimal point, but only if there are digits beyond
  if (digits > 0) {
    n += print('.'); 
   11b20:	6e e2       	ldi	r22, 0x2E	; 46
   11b22:	ce 01       	movw	r24, r28
   11b24:	0e 94 a6 8b 	call	0x1174c	; 0x1174c <Print::print(char)>
   11b28:	e8 0e       	add	r14, r24
   11b2a:	f9 1e       	adc	r15, r25
C:\Users\bitmu\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/Print.cpp:286
  }

  // Extract digits from the remainder one at a time
  while (digits-- > 0)
   11b2c:	11 50       	subi	r17, 0x01	; 1
   11b2e:	10 f1       	brcs	.+68     	; 0x11b74 <Print::printFloat(double, unsigned char)+0x1a2>
C:\Users\bitmu\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/Print.cpp:288
  {
    remainder *= 10.0;
   11b30:	20 e0       	ldi	r18, 0x00	; 0
   11b32:	30 e0       	ldi	r19, 0x00	; 0
   11b34:	40 e2       	ldi	r20, 0x20	; 32
   11b36:	51 e4       	ldi	r21, 0x41	; 65
   11b38:	c5 01       	movw	r24, r10
   11b3a:	b4 01       	movw	r22, r8
   11b3c:	0e 94 40 91 	call	0x12280	; 0x12280 <__mulsf3>
   11b40:	2b 01       	movw	r4, r22
   11b42:	3c 01       	movw	r6, r24
C:\Users\bitmu\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/Print.cpp:289
    unsigned int toPrint = (unsigned int)(remainder);
   11b44:	0e 94 5a 90 	call	0x120b4	; 0x120b4 <__fixunssfsi>
   11b48:	4b 01       	movw	r8, r22
C:\Users\bitmu\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/Print.cpp:290
    n += print(toPrint);
   11b4a:	4a e0       	ldi	r20, 0x0A	; 10
   11b4c:	50 e0       	ldi	r21, 0x00	; 0
   11b4e:	ce 01       	movw	r24, r28
   11b50:	0e 94 bf 8c 	call	0x1197e	; 0x1197e <Print::print(unsigned int, int)>
   11b54:	e8 0e       	add	r14, r24
   11b56:	f9 1e       	adc	r15, r25
C:\Users\bitmu\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/Print.cpp:291
    remainder -= toPrint; 
   11b58:	b4 01       	movw	r22, r8
   11b5a:	90 e0       	ldi	r25, 0x00	; 0
   11b5c:	80 e0       	ldi	r24, 0x00	; 0
   11b5e:	0e 94 89 90 	call	0x12112	; 0x12112 <__floatunsisf>
   11b62:	9b 01       	movw	r18, r22
   11b64:	ac 01       	movw	r20, r24
   11b66:	c3 01       	movw	r24, r6
   11b68:	b2 01       	movw	r22, r4
   11b6a:	0e 94 6f 8f 	call	0x11ede	; 0x11ede <__subsf3>
   11b6e:	4b 01       	movw	r8, r22
   11b70:	5c 01       	movw	r10, r24
   11b72:	dc cf       	rjmp	.-72     	; 0x11b2c <Print::printFloat(double, unsigned char)+0x15a>
C:\Users\bitmu\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/Print.cpp:295
  } 
  
  return n;
}
   11b74:	c7 01       	movw	r24, r14
   11b76:	df 91       	pop	r29
   11b78:	cf 91       	pop	r28
   11b7a:	1f 91       	pop	r17
   11b7c:	ff 90       	pop	r15
   11b7e:	ef 90       	pop	r14
   11b80:	df 90       	pop	r13
   11b82:	cf 90       	pop	r12
   11b84:	bf 90       	pop	r11
   11b86:	af 90       	pop	r10
   11b88:	9f 90       	pop	r9
   11b8a:	8f 90       	pop	r8
   11b8c:	7f 90       	pop	r7
   11b8e:	6f 90       	pop	r6
   11b90:	5f 90       	pop	r5
   11b92:	4f 90       	pop	r4
   11b94:	3f 90       	pop	r3
   11b96:	2f 90       	pop	r2
   11b98:	08 95       	ret

00011b9a <Print::print(double, int)>:
_ZN5Print5printEdi():
C:\Users\bitmu\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/Print.cpp:111
  else return printNumber(n, base);
}

size_t Print::print(double n, int digits)
{
  return printFloat(n, digits);
   11b9a:	0c 94 e9 8c 	jmp	0x119d2	; 0x119d2 <Print::printFloat(double, unsigned char)>

00011b9e <Print::println(double, int)>:
_ZN5Print7printlnEdi():
C:\Users\bitmu\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/Print.cpp:188
  n += println();
  return n;
}

size_t Print::println(double num, int digits)
{
   11b9e:	0f 93       	push	r16
   11ba0:	1f 93       	push	r17
   11ba2:	cf 93       	push	r28
   11ba4:	df 93       	push	r29
   11ba6:	ec 01       	movw	r28, r24
_ZN5Print5printEdi():
C:\Users\bitmu\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/Print.cpp:111
  else return printNumber(n, base);
}

size_t Print::print(double n, int digits)
{
  return printFloat(n, digits);
   11ba8:	0e 94 e9 8c 	call	0x119d2	; 0x119d2 <Print::printFloat(double, unsigned char)>
   11bac:	8c 01       	movw	r16, r24
_ZN5Print7printlnEdi():
C:\Users\bitmu\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/Print.cpp:190
}

size_t Print::println(double num, int digits)
{
  size_t n = print(num, digits);
  n += println();
   11bae:	ce 01       	movw	r24, r28
   11bb0:	0e 94 ad 8b 	call	0x1175a	; 0x1175a <Print::println()>
C:\Users\bitmu\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/Print.cpp:192
  return n;
}
   11bb4:	80 0f       	add	r24, r16
   11bb6:	91 1f       	adc	r25, r17
   11bb8:	df 91       	pop	r29
   11bba:	cf 91       	pop	r28
   11bbc:	1f 91       	pop	r17
   11bbe:	0f 91       	pop	r16
   11bc0:	08 95       	ret

00011bc2 <map(long, long, long, long, long)>:
_Z3maplllll():
C:\Users\bitmu\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/WMath.cpp:53
  long diff = howbig - howsmall;
  return random(diff) + howsmall;
}

long map(long x, long in_min, long in_max, long out_min, long out_max)
{
   11bc2:	4f 92       	push	r4
   11bc4:	5f 92       	push	r5
   11bc6:	6f 92       	push	r6
   11bc8:	7f 92       	push	r7
   11bca:	af 92       	push	r10
   11bcc:	bf 92       	push	r11
   11bce:	cf 92       	push	r12
   11bd0:	df 92       	push	r13
   11bd2:	ef 92       	push	r14
   11bd4:	ff 92       	push	r15
   11bd6:	0f 93       	push	r16
   11bd8:	1f 93       	push	r17
   11bda:	cf 93       	push	r28
   11bdc:	df 93       	push	r29
   11bde:	cd b7       	in	r28, 0x3d	; 61
   11be0:	de b7       	in	r29, 0x3e	; 62
   11be2:	29 01       	movw	r4, r18
   11be4:	3a 01       	movw	r6, r20
C:\Users\bitmu\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/WMath.cpp:54
  return (x - in_min) * (out_max - out_min) / (in_max - in_min) + out_min;
   11be6:	9b 01       	movw	r18, r22
   11be8:	ac 01       	movw	r20, r24
   11bea:	24 19       	sub	r18, r4
   11bec:	35 09       	sbc	r19, r5
   11bee:	46 09       	sbc	r20, r6
   11bf0:	57 09       	sbc	r21, r7
   11bf2:	8a 89       	ldd	r24, Y+18	; 0x12
   11bf4:	9b 89       	ldd	r25, Y+19	; 0x13
   11bf6:	ac 89       	ldd	r26, Y+20	; 0x14
   11bf8:	bd 89       	ldd	r27, Y+21	; 0x15
   11bfa:	bc 01       	movw	r22, r24
   11bfc:	cd 01       	movw	r24, r26
   11bfe:	6a 19       	sub	r22, r10
   11c00:	7b 09       	sbc	r23, r11
   11c02:	8c 09       	sbc	r24, r12
   11c04:	9d 09       	sbc	r25, r13
   11c06:	0e 94 b2 91 	call	0x12364	; 0x12364 <__mulsi3>
   11c0a:	a8 01       	movw	r20, r16
   11c0c:	97 01       	movw	r18, r14
   11c0e:	24 19       	sub	r18, r4
   11c10:	35 09       	sbc	r19, r5
   11c12:	46 09       	sbc	r20, r6
   11c14:	57 09       	sbc	r21, r7
   11c16:	0e 94 0c 92 	call	0x12418	; 0x12418 <__divmodsi4>
   11c1a:	ca 01       	movw	r24, r20
   11c1c:	b9 01       	movw	r22, r18
   11c1e:	6a 0d       	add	r22, r10
   11c20:	7b 1d       	adc	r23, r11
   11c22:	8c 1d       	adc	r24, r12
   11c24:	9d 1d       	adc	r25, r13
C:\Users\bitmu\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/WMath.cpp:55
}
   11c26:	df 91       	pop	r29
   11c28:	cf 91       	pop	r28
   11c2a:	1f 91       	pop	r17
   11c2c:	0f 91       	pop	r16
   11c2e:	ff 90       	pop	r15
   11c30:	ef 90       	pop	r14
   11c32:	df 90       	pop	r13
   11c34:	cf 90       	pop	r12
   11c36:	bf 90       	pop	r11
   11c38:	af 90       	pop	r10
   11c3a:	7f 90       	pop	r7
   11c3c:	6f 90       	pop	r6
   11c3e:	5f 90       	pop	r5
   11c40:	4f 90       	pop	r4
   11c42:	08 95       	ret

00011c44 <String::~String()>:
_ZN6StringD2Ev():
C:\Users\bitmu\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/WString.cpp:684
      buffer[len] = 0;
      memcpy(buffer + index, replace.buffer, replace.len);
      index--;
    }
  }
}
   11c44:	fc 01       	movw	r30, r24
   11c46:	80 81       	ld	r24, Z
   11c48:	91 81       	ldd	r25, Z+1	; 0x01
   11c4a:	0c 94 10 93 	jmp	0x12620	; 0x12620 <free>

00011c4e <String::invalidate()>:
_ZN6String10invalidateEv():
   11c4e:	cf 93       	push	r28
   11c50:	df 93       	push	r29
   11c52:	ec 01       	movw	r28, r24
   11c54:	88 81       	ld	r24, Y
   11c56:	99 81       	ldd	r25, Y+1	; 0x01
   11c58:	00 97       	sbiw	r24, 0x00	; 0
   11c5a:	11 f0       	breq	.+4      	; 0x11c60 <String::invalidate()+0x12>
   11c5c:	0e 94 10 93 	call	0x12620	; 0x12620 <free>
   11c60:	19 82       	std	Y+1, r1	; 0x01
   11c62:	18 82       	st	Y, r1
   11c64:	1d 82       	std	Y+5, r1	; 0x05
   11c66:	1c 82       	std	Y+4, r1	; 0x04
   11c68:	1b 82       	std	Y+3, r1	; 0x03
   11c6a:	1a 82       	std	Y+2, r1	; 0x02
   11c6c:	df 91       	pop	r29
   11c6e:	cf 91       	pop	r28
   11c70:	08 95       	ret

00011c72 <String::changeBuffer(unsigned int)>:
_ZN6String12changeBufferEj():
   11c72:	0f 93       	push	r16
   11c74:	1f 93       	push	r17
   11c76:	cf 93       	push	r28
   11c78:	df 93       	push	r29
   11c7a:	ec 01       	movw	r28, r24
   11c7c:	8b 01       	movw	r16, r22
   11c7e:	6f 5f       	subi	r22, 0xFF	; 255
   11c80:	7f 4f       	sbci	r23, 0xFF	; 255
   11c82:	88 81       	ld	r24, Y
   11c84:	99 81       	ldd	r25, Y+1	; 0x01
   11c86:	0e 94 99 93 	call	0x12732	; 0x12732 <realloc>
   11c8a:	00 97       	sbiw	r24, 0x00	; 0
   11c8c:	51 f0       	breq	.+20     	; 0x11ca2 <String::changeBuffer(unsigned int)+0x30>
   11c8e:	99 83       	std	Y+1, r25	; 0x01
   11c90:	88 83       	st	Y, r24
   11c92:	1b 83       	std	Y+3, r17	; 0x03
   11c94:	0a 83       	std	Y+2, r16	; 0x02
   11c96:	81 e0       	ldi	r24, 0x01	; 1
   11c98:	df 91       	pop	r29
   11c9a:	cf 91       	pop	r28
   11c9c:	1f 91       	pop	r17
   11c9e:	0f 91       	pop	r16
   11ca0:	08 95       	ret
   11ca2:	80 e0       	ldi	r24, 0x00	; 0
   11ca4:	f9 cf       	rjmp	.-14     	; 0x11c98 <String::changeBuffer(unsigned int)+0x26>

00011ca6 <String::reserve(unsigned int)>:
_ZN6String7reserveEj():
   11ca6:	cf 93       	push	r28
   11ca8:	df 93       	push	r29
   11caa:	ec 01       	movw	r28, r24
   11cac:	88 81       	ld	r24, Y
   11cae:	99 81       	ldd	r25, Y+1	; 0x01
   11cb0:	89 2b       	or	r24, r25
   11cb2:	49 f0       	breq	.+18     	; 0x11cc6 <String::reserve(unsigned int)+0x20>
   11cb4:	8a 81       	ldd	r24, Y+2	; 0x02
   11cb6:	9b 81       	ldd	r25, Y+3	; 0x03
   11cb8:	86 17       	cp	r24, r22
   11cba:	97 07       	cpc	r25, r23
   11cbc:	20 f0       	brcs	.+8      	; 0x11cc6 <String::reserve(unsigned int)+0x20>
   11cbe:	81 e0       	ldi	r24, 0x01	; 1
   11cc0:	df 91       	pop	r29
   11cc2:	cf 91       	pop	r28
   11cc4:	08 95       	ret
   11cc6:	ce 01       	movw	r24, r28
   11cc8:	0e 94 39 8e 	call	0x11c72	; 0x11c72 <String::changeBuffer(unsigned int)>
   11ccc:	88 23       	and	r24, r24
   11cce:	c1 f3       	breq	.-16     	; 0x11cc0 <String::reserve(unsigned int)+0x1a>
   11cd0:	8c 81       	ldd	r24, Y+4	; 0x04
   11cd2:	9d 81       	ldd	r25, Y+5	; 0x05
   11cd4:	89 2b       	or	r24, r25
   11cd6:	99 f7       	brne	.-26     	; 0x11cbe <String::reserve(unsigned int)+0x18>
   11cd8:	e8 81       	ld	r30, Y
   11cda:	f9 81       	ldd	r31, Y+1	; 0x01
   11cdc:	10 82       	st	Z, r1
   11cde:	ef cf       	rjmp	.-34     	; 0x11cbe <String::reserve(unsigned int)+0x18>

00011ce0 <String::copy(char const*, unsigned int)>:
_ZN6String4copyEPKcj():
   11ce0:	ef 92       	push	r14
   11ce2:	ff 92       	push	r15
   11ce4:	0f 93       	push	r16
   11ce6:	1f 93       	push	r17
   11ce8:	cf 93       	push	r28
   11cea:	df 93       	push	r29
   11cec:	ec 01       	movw	r28, r24
   11cee:	7b 01       	movw	r14, r22
   11cf0:	8a 01       	movw	r16, r20
   11cf2:	ba 01       	movw	r22, r20
   11cf4:	0e 94 53 8e 	call	0x11ca6	; 0x11ca6 <String::reserve(unsigned int)>
   11cf8:	81 11       	cpse	r24, r1
   11cfa:	0b c0       	rjmp	.+22     	; 0x11d12 <String::copy(char const*, unsigned int)+0x32>
   11cfc:	ce 01       	movw	r24, r28
   11cfe:	0e 94 27 8e 	call	0x11c4e	; 0x11c4e <String::invalidate()>
   11d02:	ce 01       	movw	r24, r28
   11d04:	df 91       	pop	r29
   11d06:	cf 91       	pop	r28
   11d08:	1f 91       	pop	r17
   11d0a:	0f 91       	pop	r16
   11d0c:	ff 90       	pop	r15
   11d0e:	ef 90       	pop	r14
   11d10:	08 95       	ret
   11d12:	1d 83       	std	Y+5, r17	; 0x05
   11d14:	0c 83       	std	Y+4, r16	; 0x04
   11d16:	b7 01       	movw	r22, r14
   11d18:	88 81       	ld	r24, Y
   11d1a:	99 81       	ldd	r25, Y+1	; 0x01
   11d1c:	0e 94 37 95 	call	0x12a6e	; 0x12a6e <strcpy>
   11d20:	f0 cf       	rjmp	.-32     	; 0x11d02 <String::copy(char const*, unsigned int)+0x22>

00011d22 <String::String(char const*)>:
_ZN6String4initEv():
   11d22:	fc 01       	movw	r30, r24
   11d24:	11 82       	std	Z+1, r1	; 0x01
   11d26:	10 82       	st	Z, r1
   11d28:	13 82       	std	Z+3, r1	; 0x03
   11d2a:	12 82       	std	Z+2, r1	; 0x02
   11d2c:	15 82       	std	Z+5, r1	; 0x05
   11d2e:	14 82       	std	Z+4, r1	; 0x04
_ZN6StringC2EPKc():
   11d30:	61 15       	cp	r22, r1
   11d32:	71 05       	cpc	r23, r1
   11d34:	51 f0       	breq	.+20     	; 0x11d4a <String::String(char const*)+0x28>
   11d36:	fb 01       	movw	r30, r22
   11d38:	01 90       	ld	r0, Z+
   11d3a:	00 20       	and	r0, r0
   11d3c:	e9 f7       	brne	.-6      	; 0x11d38 <String::String(char const*)+0x16>
   11d3e:	31 97       	sbiw	r30, 0x01	; 1
   11d40:	af 01       	movw	r20, r30
   11d42:	46 1b       	sub	r20, r22
   11d44:	57 0b       	sbc	r21, r23
   11d46:	0c 94 70 8e 	jmp	0x11ce0	; 0x11ce0 <String::copy(char const*, unsigned int)>
   11d4a:	08 95       	ret

00011d4c <String::operator=(String const&)>:
_ZN6StringaSERKS_():
   11d4c:	cf 93       	push	r28
   11d4e:	df 93       	push	r29
   11d50:	ec 01       	movw	r28, r24
   11d52:	fb 01       	movw	r30, r22
   11d54:	86 17       	cp	r24, r22
   11d56:	97 07       	cpc	r25, r23
   11d58:	49 f0       	breq	.+18     	; 0x11d6c <String::operator=(String const&)+0x20>
   11d5a:	60 81       	ld	r22, Z
   11d5c:	71 81       	ldd	r23, Z+1	; 0x01
   11d5e:	61 15       	cp	r22, r1
   11d60:	71 05       	cpc	r23, r1
   11d62:	41 f0       	breq	.+16     	; 0x11d74 <String::operator=(String const&)+0x28>
   11d64:	44 81       	ldd	r20, Z+4	; 0x04
   11d66:	55 81       	ldd	r21, Z+5	; 0x05
   11d68:	0e 94 70 8e 	call	0x11ce0	; 0x11ce0 <String::copy(char const*, unsigned int)>
   11d6c:	ce 01       	movw	r24, r28
   11d6e:	df 91       	pop	r29
   11d70:	cf 91       	pop	r28
   11d72:	08 95       	ret
   11d74:	0e 94 27 8e 	call	0x11c4e	; 0x11c4e <String::invalidate()>
   11d78:	f9 cf       	rjmp	.-14     	; 0x11d6c <String::operator=(String const&)+0x20>

00011d7a <String::concat(char const*, unsigned int)>:
_ZN6String6concatEPKcj():
   11d7a:	ef 92       	push	r14
   11d7c:	ff 92       	push	r15
   11d7e:	0f 93       	push	r16
   11d80:	1f 93       	push	r17
   11d82:	cf 93       	push	r28
   11d84:	df 93       	push	r29
   11d86:	61 15       	cp	r22, r1
   11d88:	71 05       	cpc	r23, r1
   11d8a:	41 f4       	brne	.+16     	; 0x11d9c <String::concat(char const*, unsigned int)+0x22>
   11d8c:	80 e0       	ldi	r24, 0x00	; 0
   11d8e:	df 91       	pop	r29
   11d90:	cf 91       	pop	r28
   11d92:	1f 91       	pop	r17
   11d94:	0f 91       	pop	r16
   11d96:	ff 90       	pop	r15
   11d98:	ef 90       	pop	r14
   11d9a:	08 95       	ret
   11d9c:	41 15       	cp	r20, r1
   11d9e:	51 05       	cpc	r21, r1
   11da0:	b1 f0       	breq	.+44     	; 0x11dce <String::concat(char const*, unsigned int)+0x54>
   11da2:	7b 01       	movw	r14, r22
   11da4:	ec 01       	movw	r28, r24
   11da6:	0c 81       	ldd	r16, Y+4	; 0x04
   11da8:	1d 81       	ldd	r17, Y+5	; 0x05
   11daa:	04 0f       	add	r16, r20
   11dac:	15 1f       	adc	r17, r21
   11dae:	b8 01       	movw	r22, r16
   11db0:	0e 94 53 8e 	call	0x11ca6	; 0x11ca6 <String::reserve(unsigned int)>
   11db4:	88 23       	and	r24, r24
   11db6:	51 f3       	breq	.-44     	; 0x11d8c <String::concat(char const*, unsigned int)+0x12>
   11db8:	28 81       	ld	r18, Y
   11dba:	39 81       	ldd	r19, Y+1	; 0x01
   11dbc:	8c 81       	ldd	r24, Y+4	; 0x04
   11dbe:	9d 81       	ldd	r25, Y+5	; 0x05
   11dc0:	b7 01       	movw	r22, r14
   11dc2:	82 0f       	add	r24, r18
   11dc4:	93 1f       	adc	r25, r19
   11dc6:	0e 94 37 95 	call	0x12a6e	; 0x12a6e <strcpy>
   11dca:	1d 83       	std	Y+5, r17	; 0x05
   11dcc:	0c 83       	std	Y+4, r16	; 0x04
   11dce:	81 e0       	ldi	r24, 0x01	; 1
   11dd0:	de cf       	rjmp	.-68     	; 0x11d8e <String::concat(char const*, unsigned int)+0x14>

00011dd2 <String::concat(char)>:
_ZN6String6concatEc():
   11dd2:	cf 93       	push	r28
   11dd4:	df 93       	push	r29
   11dd6:	1f 92       	push	r1
   11dd8:	1f 92       	push	r1
   11dda:	cd b7       	in	r28, 0x3d	; 61
   11ddc:	de b7       	in	r29, 0x3e	; 62
   11dde:	69 83       	std	Y+1, r22	; 0x01
   11de0:	1a 82       	std	Y+2, r1	; 0x02
   11de2:	41 e0       	ldi	r20, 0x01	; 1
   11de4:	50 e0       	ldi	r21, 0x00	; 0
   11de6:	be 01       	movw	r22, r28
   11de8:	6f 5f       	subi	r22, 0xFF	; 255
   11dea:	7f 4f       	sbci	r23, 0xFF	; 255
   11dec:	0e 94 bd 8e 	call	0x11d7a	; 0x11d7a <String::concat(char const*, unsigned int)>
   11df0:	0f 90       	pop	r0
   11df2:	0f 90       	pop	r0
   11df4:	df 91       	pop	r29
   11df6:	cf 91       	pop	r28
   11df8:	08 95       	ret

00011dfa <String::getBytes(unsigned char*, unsigned int, unsigned int) const>:
_ZNK6String8getBytesEPhjj():
   11dfa:	0f 93       	push	r16
   11dfc:	1f 93       	push	r17
   11dfe:	cf 93       	push	r28
   11e00:	df 93       	push	r29
   11e02:	41 15       	cp	r20, r1
   11e04:	51 05       	cpc	r21, r1
   11e06:	59 f0       	breq	.+22     	; 0x11e1e <String::getBytes(unsigned char*, unsigned int, unsigned int) const+0x24>
   11e08:	61 15       	cp	r22, r1
   11e0a:	71 05       	cpc	r23, r1
   11e0c:	41 f0       	breq	.+16     	; 0x11e1e <String::getBytes(unsigned char*, unsigned int, unsigned int) const+0x24>
   11e0e:	fc 01       	movw	r30, r24
   11e10:	04 81       	ldd	r16, Z+4	; 0x04
   11e12:	15 81       	ldd	r17, Z+5	; 0x05
   11e14:	20 17       	cp	r18, r16
   11e16:	31 07       	cpc	r19, r17
   11e18:	38 f0       	brcs	.+14     	; 0x11e28 <String::getBytes(unsigned char*, unsigned int, unsigned int) const+0x2e>
   11e1a:	fb 01       	movw	r30, r22
   11e1c:	10 82       	st	Z, r1
   11e1e:	df 91       	pop	r29
   11e20:	cf 91       	pop	r28
   11e22:	1f 91       	pop	r17
   11e24:	0f 91       	pop	r16
   11e26:	08 95       	ret
   11e28:	41 50       	subi	r20, 0x01	; 1
   11e2a:	51 09       	sbc	r21, r1
   11e2c:	02 1b       	sub	r16, r18
   11e2e:	13 0b       	sbc	r17, r19
   11e30:	40 17       	cp	r20, r16
   11e32:	51 07       	cpc	r21, r17
   11e34:	08 f4       	brcc	.+2      	; 0x11e38 <String::getBytes(unsigned char*, unsigned int, unsigned int) const+0x3e>
   11e36:	8a 01       	movw	r16, r20
   11e38:	eb 01       	movw	r28, r22
   11e3a:	fc 01       	movw	r30, r24
   11e3c:	60 81       	ld	r22, Z
   11e3e:	71 81       	ldd	r23, Z+1	; 0x01
   11e40:	62 0f       	add	r22, r18
   11e42:	73 1f       	adc	r23, r19
   11e44:	a8 01       	movw	r20, r16
   11e46:	ce 01       	movw	r24, r28
   11e48:	0e 94 3e 95 	call	0x12a7c	; 0x12a7c <strncpy>
   11e4c:	c0 0f       	add	r28, r16
   11e4e:	d1 1f       	adc	r29, r17
   11e50:	18 82       	st	Y, r1
   11e52:	e5 cf       	rjmp	.-54     	; 0x11e1e <String::getBytes(unsigned char*, unsigned int, unsigned int) const+0x24>

00011e54 <String::remove(unsigned int, unsigned int)>:
_ZN6String6removeEjj():
C:\Users\bitmu\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/WString.cpp:693
  // below will take care of truncating it at the end of the
  // string.
  remove(index, (unsigned int)-1);
}

void String::remove(unsigned int index, unsigned int count){
   11e54:	cf 93       	push	r28
   11e56:	df 93       	push	r29
C:\Users\bitmu\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/WString.cpp:694
  if (index >= len) { return; }
   11e58:	dc 01       	movw	r26, r24
   11e5a:	14 96       	adiw	r26, 0x04	; 4
   11e5c:	ed 91       	ld	r30, X+
   11e5e:	fc 91       	ld	r31, X
   11e60:	6e 17       	cp	r22, r30
   11e62:	7f 07       	cpc	r23, r31
   11e64:	28 f5       	brcc	.+74     	; 0x11eb0 <String::remove(unsigned int, unsigned int)+0x5c>
C:\Users\bitmu\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/WString.cpp:695
  if (count <= 0) { return; }
   11e66:	41 15       	cp	r20, r1
   11e68:	51 05       	cpc	r21, r1
   11e6a:	11 f1       	breq	.+68     	; 0x11eb0 <String::remove(unsigned int, unsigned int)+0x5c>
   11e6c:	9f 01       	movw	r18, r30
   11e6e:	26 1b       	sub	r18, r22
   11e70:	37 0b       	sbc	r19, r23
   11e72:	42 17       	cp	r20, r18
   11e74:	53 07       	cpc	r21, r19
   11e76:	08 f4       	brcc	.+2      	; 0x11e7a <String::remove(unsigned int, unsigned int)+0x26>
   11e78:	9a 01       	movw	r18, r20
   11e7a:	db 01       	movw	r26, r22
   11e7c:	ec 01       	movw	r28, r24
C:\Users\bitmu\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/WString.cpp:697
  if (count > len - index) { count = len - index; }
  char *writeTo = buffer + index;
   11e7e:	88 81       	ld	r24, Y
   11e80:	99 81       	ldd	r25, Y+1	; 0x01
C:\Users\bitmu\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/WString.cpp:698
  len = len - count;
   11e82:	e2 1b       	sub	r30, r18
   11e84:	f3 0b       	sbc	r31, r19
   11e86:	fd 83       	std	Y+5, r31	; 0x05
   11e88:	ec 83       	std	Y+4, r30	; 0x04
C:\Users\bitmu\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/WString.cpp:699
  strncpy(writeTo, buffer + index + count,len - index);
   11e8a:	af 01       	movw	r20, r30
   11e8c:	46 1b       	sub	r20, r22
   11e8e:	57 0b       	sbc	r21, r23
   11e90:	26 0f       	add	r18, r22
   11e92:	37 1f       	adc	r19, r23
   11e94:	bc 01       	movw	r22, r24
   11e96:	62 0f       	add	r22, r18
   11e98:	73 1f       	adc	r23, r19
   11e9a:	8a 0f       	add	r24, r26
   11e9c:	9b 1f       	adc	r25, r27
   11e9e:	0e 94 3e 95 	call	0x12a7c	; 0x12a7c <strncpy>
C:\Users\bitmu\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/WString.cpp:700
  buffer[len] = 0;
   11ea2:	e8 81       	ld	r30, Y
   11ea4:	f9 81       	ldd	r31, Y+1	; 0x01
   11ea6:	8c 81       	ldd	r24, Y+4	; 0x04
   11ea8:	9d 81       	ldd	r25, Y+5	; 0x05
   11eaa:	e8 0f       	add	r30, r24
   11eac:	f9 1f       	adc	r31, r25
   11eae:	10 82       	st	Z, r1
C:\Users\bitmu\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/WString.cpp:701
}
   11eb0:	df 91       	pop	r29
   11eb2:	cf 91       	pop	r28
   11eb4:	08 95       	ret

00011eb6 <__cxa_pure_virtual>:
__cxa_pure_virtual():
C:\Users\bitmu\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/abi.cpp:27
extern "C" void __cxa_deleted_virtual(void) __attribute__ ((__noreturn__));

void __cxa_pure_virtual(void) {
  // We might want to write some diagnostics to uart in this case
  //std::terminate();
  abort();
   11eb6:	0e 94 7a 94 	call	0x128f4	; 0x128f4 <abort>

00011eba <initVariant>:
initVariant():
C:\Users\bitmu\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/main.cpp:28
int atexit(void (* /*func*/ )()) { return 0; }

// Weak empty variant initialization function.
// May be redefined by variant files.
void initVariant() __attribute__((weak));
void initVariant() { }
   11eba:	08 95       	ret

00011ebc <main>:
main():
C:\Users\bitmu\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/main.cpp:35
//void setupUSB() __attribute__((weak));
//void setupUSB() { }

int main(void)
{
  init();
   11ebc:	0e 94 dc 85 	call	0x10bb8	; 0x10bb8 <init>
C:\Users\bitmu\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/main.cpp:37

  initVariant();
   11ec0:	0e 94 5d 8f 	call	0x11eba	; 0x11eba <initVariant>
C:\Users\bitmu\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/main.cpp:43

#if defined(USBCON)
  USBDevice.attach();
#endif
  
  setup();
   11ec4:	0e 94 11 14 	call	0x2822	; 0x2822 <setup>
C:\Users\bitmu\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/main.cpp:47
    
  for (;;) {
    loop();
    if (serialEventRun) serialEventRun();
   11ec8:	c6 e5       	ldi	r28, 0x56	; 86
   11eca:	d8 e8       	ldi	r29, 0x88	; 136
C:\Users\bitmu\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/main.cpp:46
#endif
  
  setup();
    
  for (;;) {
    loop();
   11ecc:	0e 94 b5 13 	call	0x276a	; 0x276a <loop>
C:\Users\bitmu\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/main.cpp:47
    if (serialEventRun) serialEventRun();
   11ed0:	20 97       	sbiw	r28, 0x00	; 0
   11ed2:	e1 f3       	breq	.-8      	; 0x11ecc <main+0x10>
C:\Users\bitmu\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/main.cpp:47 (discriminator 1)
   11ed4:	0e 94 56 88 	call	0x110ac	; 0x110ac <serialEventRun()>
   11ed8:	f9 cf       	rjmp	.-14     	; 0x11ecc <main+0x10>

00011eda <operator new(unsigned int)>:
_Znwj():
C:\Users\bitmu\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/new.cpp:22
*/

#include <stdlib.h>

void *operator new(size_t size) {
  return malloc(size);
   11eda:	0c 94 74 92 	jmp	0x124e8	; 0x124e8 <malloc>

00011ede <__subsf3>:
__subsf3():
   11ede:	50 58       	subi	r21, 0x80	; 128

00011ee0 <__addsf3>:
   11ee0:	bb 27       	eor	r27, r27
   11ee2:	aa 27       	eor	r26, r26
   11ee4:	0e 94 87 8f 	call	0x11f0e	; 0x11f0e <__addsf3x>
   11ee8:	0c 94 01 91 	jmp	0x12202	; 0x12202 <__fp_round>
__addsf3():
   11eec:	0e 94 f3 90 	call	0x121e6	; 0x121e6 <__fp_pscA>
   11ef0:	38 f0       	brcs	.+14     	; 0x11f00 <__addsf3+0x20>
   11ef2:	0e 94 fa 90 	call	0x121f4	; 0x121f4 <__fp_pscB>
   11ef6:	20 f0       	brcs	.+8      	; 0x11f00 <__addsf3+0x20>
   11ef8:	39 f4       	brne	.+14     	; 0x11f08 <__addsf3+0x28>
   11efa:	9f 3f       	cpi	r25, 0xFF	; 255
   11efc:	19 f4       	brne	.+6      	; 0x11f04 <__addsf3+0x24>
   11efe:	26 f4       	brtc	.+8      	; 0x11f08 <__addsf3+0x28>
   11f00:	0c 94 f0 90 	jmp	0x121e0	; 0x121e0 <__fp_nan>
   11f04:	0e f4       	brtc	.+2      	; 0x11f08 <__addsf3+0x28>
   11f06:	e0 95       	com	r30
   11f08:	e7 fb       	bst	r30, 7
   11f0a:	0c 94 ea 90 	jmp	0x121d4	; 0x121d4 <__fp_inf>

00011f0e <__addsf3x>:
__addsf3x():
   11f0e:	e9 2f       	mov	r30, r25
   11f10:	0e 94 12 91 	call	0x12224	; 0x12224 <__fp_split3>
   11f14:	58 f3       	brcs	.-42     	; 0x11eec <__addsf3+0xc>
   11f16:	ba 17       	cp	r27, r26
   11f18:	62 07       	cpc	r22, r18
   11f1a:	73 07       	cpc	r23, r19
   11f1c:	84 07       	cpc	r24, r20
   11f1e:	95 07       	cpc	r25, r21
   11f20:	20 f0       	brcs	.+8      	; 0x11f2a <__addsf3x+0x1c>
   11f22:	79 f4       	brne	.+30     	; 0x11f42 <__addsf3x+0x34>
   11f24:	a6 f5       	brtc	.+104    	; 0x11f8e <__addsf3x+0x80>
   11f26:	0c 94 34 91 	jmp	0x12268	; 0x12268 <__fp_zero>
   11f2a:	0e f4       	brtc	.+2      	; 0x11f2e <__addsf3x+0x20>
   11f2c:	e0 95       	com	r30
   11f2e:	0b 2e       	mov	r0, r27
   11f30:	ba 2f       	mov	r27, r26
   11f32:	a0 2d       	mov	r26, r0
   11f34:	0b 01       	movw	r0, r22
   11f36:	b9 01       	movw	r22, r18
   11f38:	90 01       	movw	r18, r0
   11f3a:	0c 01       	movw	r0, r24
   11f3c:	ca 01       	movw	r24, r20
   11f3e:	a0 01       	movw	r20, r0
   11f40:	11 24       	eor	r1, r1
   11f42:	ff 27       	eor	r31, r31
   11f44:	59 1b       	sub	r21, r25
   11f46:	99 f0       	breq	.+38     	; 0x11f6e <__addsf3x+0x60>
   11f48:	59 3f       	cpi	r21, 0xF9	; 249
   11f4a:	50 f4       	brcc	.+20     	; 0x11f60 <__addsf3x+0x52>
   11f4c:	50 3e       	cpi	r21, 0xE0	; 224
   11f4e:	68 f1       	brcs	.+90     	; 0x11faa <__addsf3x+0x9c>
   11f50:	1a 16       	cp	r1, r26
   11f52:	f0 40       	sbci	r31, 0x00	; 0
   11f54:	a2 2f       	mov	r26, r18
   11f56:	23 2f       	mov	r18, r19
   11f58:	34 2f       	mov	r19, r20
   11f5a:	44 27       	eor	r20, r20
   11f5c:	58 5f       	subi	r21, 0xF8	; 248
   11f5e:	f3 cf       	rjmp	.-26     	; 0x11f46 <__addsf3x+0x38>
   11f60:	46 95       	lsr	r20
   11f62:	37 95       	ror	r19
   11f64:	27 95       	ror	r18
   11f66:	a7 95       	ror	r26
   11f68:	f0 40       	sbci	r31, 0x00	; 0
   11f6a:	53 95       	inc	r21
   11f6c:	c9 f7       	brne	.-14     	; 0x11f60 <__addsf3x+0x52>
   11f6e:	7e f4       	brtc	.+30     	; 0x11f8e <__addsf3x+0x80>
   11f70:	1f 16       	cp	r1, r31
   11f72:	ba 0b       	sbc	r27, r26
   11f74:	62 0b       	sbc	r22, r18
   11f76:	73 0b       	sbc	r23, r19
   11f78:	84 0b       	sbc	r24, r20
   11f7a:	ba f0       	brmi	.+46     	; 0x11faa <__addsf3x+0x9c>
   11f7c:	91 50       	subi	r25, 0x01	; 1
   11f7e:	a1 f0       	breq	.+40     	; 0x11fa8 <__addsf3x+0x9a>
   11f80:	ff 0f       	add	r31, r31
   11f82:	bb 1f       	adc	r27, r27
   11f84:	66 1f       	adc	r22, r22
   11f86:	77 1f       	adc	r23, r23
   11f88:	88 1f       	adc	r24, r24
   11f8a:	c2 f7       	brpl	.-16     	; 0x11f7c <__addsf3x+0x6e>
   11f8c:	0e c0       	rjmp	.+28     	; 0x11faa <__addsf3x+0x9c>
   11f8e:	ba 0f       	add	r27, r26
   11f90:	62 1f       	adc	r22, r18
   11f92:	73 1f       	adc	r23, r19
   11f94:	84 1f       	adc	r24, r20
   11f96:	48 f4       	brcc	.+18     	; 0x11faa <__addsf3x+0x9c>
   11f98:	87 95       	ror	r24
   11f9a:	77 95       	ror	r23
   11f9c:	67 95       	ror	r22
   11f9e:	b7 95       	ror	r27
   11fa0:	f7 95       	ror	r31
   11fa2:	9e 3f       	cpi	r25, 0xFE	; 254
   11fa4:	08 f0       	brcs	.+2      	; 0x11fa8 <__addsf3x+0x9a>
   11fa6:	b0 cf       	rjmp	.-160    	; 0x11f08 <__addsf3+0x28>
   11fa8:	93 95       	inc	r25
   11faa:	88 0f       	add	r24, r24
   11fac:	08 f0       	brcs	.+2      	; 0x11fb0 <__addsf3x+0xa2>
   11fae:	99 27       	eor	r25, r25
   11fb0:	ee 0f       	add	r30, r30
   11fb2:	97 95       	ror	r25
   11fb4:	87 95       	ror	r24
   11fb6:	08 95       	ret

00011fb8 <__cmpsf2>:
   11fb8:	0e 94 c6 90 	call	0x1218c	; 0x1218c <__fp_cmp>
   11fbc:	08 f4       	brcc	.+2      	; 0x11fc0 <__cmpsf2+0x8>
   11fbe:	81 e0       	ldi	r24, 0x01	; 1
   11fc0:	08 95       	ret

00011fc2 <__divsf3>:
   11fc2:	0e 94 f5 8f 	call	0x11fea	; 0x11fea <__divsf3x>
   11fc6:	0c 94 01 91 	jmp	0x12202	; 0x12202 <__fp_round>
   11fca:	0e 94 fa 90 	call	0x121f4	; 0x121f4 <__fp_pscB>
   11fce:	58 f0       	brcs	.+22     	; 0x11fe6 <__divsf3+0x24>
   11fd0:	0e 94 f3 90 	call	0x121e6	; 0x121e6 <__fp_pscA>
   11fd4:	40 f0       	brcs	.+16     	; 0x11fe6 <__divsf3+0x24>
   11fd6:	29 f4       	brne	.+10     	; 0x11fe2 <__divsf3+0x20>
   11fd8:	5f 3f       	cpi	r21, 0xFF	; 255
__divsf3():
   11fda:	29 f0       	breq	.+10     	; 0x11fe6 <__divsf3+0x24>
   11fdc:	0c 94 ea 90 	jmp	0x121d4	; 0x121d4 <__fp_inf>
   11fe0:	51 11       	cpse	r21, r1
   11fe2:	0c 94 35 91 	jmp	0x1226a	; 0x1226a <__fp_szero>
   11fe6:	0c 94 f0 90 	jmp	0x121e0	; 0x121e0 <__fp_nan>

00011fea <__divsf3x>:
__divsf3x():
   11fea:	0e 94 12 91 	call	0x12224	; 0x12224 <__fp_split3>
   11fee:	68 f3       	brcs	.-38     	; 0x11fca <__divsf3+0x8>

00011ff0 <__divsf3_pse>:
   11ff0:	99 23       	and	r25, r25
   11ff2:	b1 f3       	breq	.-20     	; 0x11fe0 <__divsf3+0x1e>
   11ff4:	55 23       	and	r21, r21
   11ff6:	91 f3       	breq	.-28     	; 0x11fdc <__divsf3+0x1a>
   11ff8:	95 1b       	sub	r25, r21
   11ffa:	55 0b       	sbc	r21, r21
   11ffc:	bb 27       	eor	r27, r27
   11ffe:	aa 27       	eor	r26, r26
   12000:	62 17       	cp	r22, r18
   12002:	73 07       	cpc	r23, r19
   12004:	84 07       	cpc	r24, r20
   12006:	38 f0       	brcs	.+14     	; 0x12016 <__divsf3_pse+0x26>
   12008:	9f 5f       	subi	r25, 0xFF	; 255
   1200a:	5f 4f       	sbci	r21, 0xFF	; 255
   1200c:	22 0f       	add	r18, r18
   1200e:	33 1f       	adc	r19, r19
   12010:	44 1f       	adc	r20, r20
   12012:	aa 1f       	adc	r26, r26
   12014:	a9 f3       	breq	.-22     	; 0x12000 <__divsf3_pse+0x10>
   12016:	35 d0       	rcall	.+106    	; 0x12082 <__divsf3_pse+0x92>
   12018:	0e 2e       	mov	r0, r30
   1201a:	3a f0       	brmi	.+14     	; 0x1202a <__divsf3_pse+0x3a>
   1201c:	e0 e8       	ldi	r30, 0x80	; 128
   1201e:	32 d0       	rcall	.+100    	; 0x12084 <__divsf3_pse+0x94>
   12020:	91 50       	subi	r25, 0x01	; 1
   12022:	50 40       	sbci	r21, 0x00	; 0
   12024:	e6 95       	lsr	r30
   12026:	00 1c       	adc	r0, r0
   12028:	ca f7       	brpl	.-14     	; 0x1201c <__divsf3_pse+0x2c>
   1202a:	2b d0       	rcall	.+86     	; 0x12082 <__divsf3_pse+0x92>
   1202c:	fe 2f       	mov	r31, r30
   1202e:	29 d0       	rcall	.+82     	; 0x12082 <__divsf3_pse+0x92>
   12030:	66 0f       	add	r22, r22
   12032:	77 1f       	adc	r23, r23
   12034:	88 1f       	adc	r24, r24
   12036:	bb 1f       	adc	r27, r27
   12038:	26 17       	cp	r18, r22
   1203a:	37 07       	cpc	r19, r23
   1203c:	48 07       	cpc	r20, r24
   1203e:	ab 07       	cpc	r26, r27
   12040:	b0 e8       	ldi	r27, 0x80	; 128
   12042:	09 f0       	breq	.+2      	; 0x12046 <__divsf3_pse+0x56>
   12044:	bb 0b       	sbc	r27, r27
   12046:	80 2d       	mov	r24, r0
   12048:	bf 01       	movw	r22, r30
   1204a:	ff 27       	eor	r31, r31
   1204c:	93 58       	subi	r25, 0x83	; 131
   1204e:	5f 4f       	sbci	r21, 0xFF	; 255
   12050:	3a f0       	brmi	.+14     	; 0x12060 <__divsf3_pse+0x70>
   12052:	9e 3f       	cpi	r25, 0xFE	; 254
   12054:	51 05       	cpc	r21, r1
   12056:	78 f0       	brcs	.+30     	; 0x12076 <__divsf3_pse+0x86>
   12058:	0c 94 ea 90 	jmp	0x121d4	; 0x121d4 <__fp_inf>
   1205c:	0c 94 35 91 	jmp	0x1226a	; 0x1226a <__fp_szero>
   12060:	5f 3f       	cpi	r21, 0xFF	; 255
   12062:	e4 f3       	brlt	.-8      	; 0x1205c <__divsf3_pse+0x6c>
   12064:	98 3e       	cpi	r25, 0xE8	; 232
   12066:	d4 f3       	brlt	.-12     	; 0x1205c <__divsf3_pse+0x6c>
   12068:	86 95       	lsr	r24
   1206a:	77 95       	ror	r23
   1206c:	67 95       	ror	r22
   1206e:	b7 95       	ror	r27
   12070:	f7 95       	ror	r31
   12072:	9f 5f       	subi	r25, 0xFF	; 255
   12074:	c9 f7       	brne	.-14     	; 0x12068 <__divsf3_pse+0x78>
   12076:	88 0f       	add	r24, r24
   12078:	91 1d       	adc	r25, r1
   1207a:	96 95       	lsr	r25
   1207c:	87 95       	ror	r24
   1207e:	97 f9       	bld	r25, 7
   12080:	08 95       	ret
   12082:	e1 e0       	ldi	r30, 0x01	; 1
   12084:	66 0f       	add	r22, r22
   12086:	77 1f       	adc	r23, r23
   12088:	88 1f       	adc	r24, r24
   1208a:	bb 1f       	adc	r27, r27
   1208c:	62 17       	cp	r22, r18
   1208e:	73 07       	cpc	r23, r19
   12090:	84 07       	cpc	r24, r20
   12092:	ba 07       	cpc	r27, r26
   12094:	20 f0       	brcs	.+8      	; 0x1209e <__divsf3_pse+0xae>
   12096:	62 1b       	sub	r22, r18
   12098:	73 0b       	sbc	r23, r19
   1209a:	84 0b       	sbc	r24, r20
   1209c:	ba 0b       	sbc	r27, r26
   1209e:	ee 1f       	adc	r30, r30
   120a0:	88 f7       	brcc	.-30     	; 0x12084 <__divsf3_pse+0x94>
   120a2:	e0 95       	com	r30
   120a4:	08 95       	ret

000120a6 <__fixsfsi>:
   120a6:	0e 94 5a 90 	call	0x120b4	; 0x120b4 <__fixunssfsi>
   120aa:	68 94       	set
   120ac:	b1 11       	cpse	r27, r1
   120ae:	0c 94 35 91 	jmp	0x1226a	; 0x1226a <__fp_szero>
   120b2:	08 95       	ret

000120b4 <__fixunssfsi>:
   120b4:	0e 94 1a 91 	call	0x12234	; 0x12234 <__fp_splitA>
   120b8:	88 f0       	brcs	.+34     	; 0x120dc <__fixunssfsi+0x28>
   120ba:	9f 57       	subi	r25, 0x7F	; 127
   120bc:	98 f0       	brcs	.+38     	; 0x120e4 <__fixunssfsi+0x30>
   120be:	b9 2f       	mov	r27, r25
   120c0:	99 27       	eor	r25, r25
   120c2:	b7 51       	subi	r27, 0x17	; 23
   120c4:	b0 f0       	brcs	.+44     	; 0x120f2 <__fixunssfsi+0x3e>
__fixunssfsi():
   120c6:	e1 f0       	breq	.+56     	; 0x12100 <__fixunssfsi+0x4c>
   120c8:	66 0f       	add	r22, r22
   120ca:	77 1f       	adc	r23, r23
   120cc:	88 1f       	adc	r24, r24
   120ce:	99 1f       	adc	r25, r25
   120d0:	1a f0       	brmi	.+6      	; 0x120d8 <__fixunssfsi+0x24>
   120d2:	ba 95       	dec	r27
   120d4:	c9 f7       	brne	.-14     	; 0x120c8 <__fixunssfsi+0x14>
   120d6:	14 c0       	rjmp	.+40     	; 0x12100 <__fixunssfsi+0x4c>
   120d8:	b1 30       	cpi	r27, 0x01	; 1
   120da:	91 f0       	breq	.+36     	; 0x12100 <__fixunssfsi+0x4c>
   120dc:	0e 94 34 91 	call	0x12268	; 0x12268 <__fp_zero>
   120e0:	b1 e0       	ldi	r27, 0x01	; 1
   120e2:	08 95       	ret
   120e4:	0c 94 34 91 	jmp	0x12268	; 0x12268 <__fp_zero>
   120e8:	67 2f       	mov	r22, r23
   120ea:	78 2f       	mov	r23, r24
   120ec:	88 27       	eor	r24, r24
   120ee:	b8 5f       	subi	r27, 0xF8	; 248
   120f0:	39 f0       	breq	.+14     	; 0x12100 <__fixunssfsi+0x4c>
   120f2:	b9 3f       	cpi	r27, 0xF9	; 249
   120f4:	cc f3       	brlt	.-14     	; 0x120e8 <__fixunssfsi+0x34>
   120f6:	86 95       	lsr	r24
   120f8:	77 95       	ror	r23
   120fa:	67 95       	ror	r22
   120fc:	b3 95       	inc	r27
   120fe:	d9 f7       	brne	.-10     	; 0x120f6 <__fixunssfsi+0x42>
   12100:	3e f4       	brtc	.+14     	; 0x12110 <__fixunssfsi+0x5c>
   12102:	90 95       	com	r25
   12104:	80 95       	com	r24
   12106:	70 95       	com	r23
   12108:	61 95       	neg	r22
   1210a:	7f 4f       	sbci	r23, 0xFF	; 255
   1210c:	8f 4f       	sbci	r24, 0xFF	; 255
   1210e:	9f 4f       	sbci	r25, 0xFF	; 255
   12110:	08 95       	ret

00012112 <__floatunsisf>:
__floatunsisf():
   12112:	e8 94       	clt
   12114:	09 c0       	rjmp	.+18     	; 0x12128 <__floatsisf+0x12>

00012116 <__floatsisf>:
   12116:	97 fb       	bst	r25, 7
   12118:	3e f4       	brtc	.+14     	; 0x12128 <__floatsisf+0x12>
   1211a:	90 95       	com	r25
   1211c:	80 95       	com	r24
   1211e:	70 95       	com	r23
   12120:	61 95       	neg	r22
   12122:	7f 4f       	sbci	r23, 0xFF	; 255
   12124:	8f 4f       	sbci	r24, 0xFF	; 255
   12126:	9f 4f       	sbci	r25, 0xFF	; 255
   12128:	99 23       	and	r25, r25
   1212a:	a9 f0       	breq	.+42     	; 0x12156 <__floatsisf+0x40>
   1212c:	f9 2f       	mov	r31, r25
   1212e:	96 e9       	ldi	r25, 0x96	; 150
   12130:	bb 27       	eor	r27, r27
   12132:	93 95       	inc	r25
   12134:	f6 95       	lsr	r31
   12136:	87 95       	ror	r24
   12138:	77 95       	ror	r23
   1213a:	67 95       	ror	r22
   1213c:	b7 95       	ror	r27
   1213e:	f1 11       	cpse	r31, r1
   12140:	f8 cf       	rjmp	.-16     	; 0x12132 <__floatsisf+0x1c>
   12142:	fa f4       	brpl	.+62     	; 0x12182 <__floatsisf+0x6c>
   12144:	bb 0f       	add	r27, r27
   12146:	11 f4       	brne	.+4      	; 0x1214c <__floatsisf+0x36>
   12148:	60 ff       	sbrs	r22, 0
   1214a:	1b c0       	rjmp	.+54     	; 0x12182 <__floatsisf+0x6c>
   1214c:	6f 5f       	subi	r22, 0xFF	; 255
   1214e:	7f 4f       	sbci	r23, 0xFF	; 255
   12150:	8f 4f       	sbci	r24, 0xFF	; 255
   12152:	9f 4f       	sbci	r25, 0xFF	; 255
   12154:	16 c0       	rjmp	.+44     	; 0x12182 <__floatsisf+0x6c>
   12156:	88 23       	and	r24, r24
   12158:	11 f0       	breq	.+4      	; 0x1215e <__floatsisf+0x48>
   1215a:	96 e9       	ldi	r25, 0x96	; 150
   1215c:	11 c0       	rjmp	.+34     	; 0x12180 <__floatsisf+0x6a>
   1215e:	77 23       	and	r23, r23
   12160:	21 f0       	breq	.+8      	; 0x1216a <__floatsisf+0x54>
   12162:	9e e8       	ldi	r25, 0x8E	; 142
   12164:	87 2f       	mov	r24, r23
   12166:	76 2f       	mov	r23, r22
   12168:	05 c0       	rjmp	.+10     	; 0x12174 <__floatsisf+0x5e>
   1216a:	66 23       	and	r22, r22
   1216c:	71 f0       	breq	.+28     	; 0x1218a <__floatsisf+0x74>
   1216e:	96 e8       	ldi	r25, 0x86	; 134
   12170:	86 2f       	mov	r24, r22
   12172:	70 e0       	ldi	r23, 0x00	; 0
   12174:	60 e0       	ldi	r22, 0x00	; 0
   12176:	2a f0       	brmi	.+10     	; 0x12182 <__floatsisf+0x6c>
   12178:	9a 95       	dec	r25
   1217a:	66 0f       	add	r22, r22
   1217c:	77 1f       	adc	r23, r23
   1217e:	88 1f       	adc	r24, r24
   12180:	da f7       	brpl	.-10     	; 0x12178 <__floatsisf+0x62>
   12182:	88 0f       	add	r24, r24
   12184:	96 95       	lsr	r25
   12186:	87 95       	ror	r24
   12188:	97 f9       	bld	r25, 7
   1218a:	08 95       	ret

0001218c <__fp_cmp>:
__fp_cmp():
   1218c:	99 0f       	add	r25, r25
   1218e:	00 08       	sbc	r0, r0
   12190:	55 0f       	add	r21, r21
   12192:	aa 0b       	sbc	r26, r26
   12194:	e0 e8       	ldi	r30, 0x80	; 128
   12196:	fe ef       	ldi	r31, 0xFE	; 254
   12198:	16 16       	cp	r1, r22
   1219a:	17 06       	cpc	r1, r23
   1219c:	e8 07       	cpc	r30, r24
   1219e:	f9 07       	cpc	r31, r25
   121a0:	c0 f0       	brcs	.+48     	; 0x121d2 <__fp_cmp+0x46>
   121a2:	12 16       	cp	r1, r18
   121a4:	13 06       	cpc	r1, r19
   121a6:	e4 07       	cpc	r30, r20
   121a8:	f5 07       	cpc	r31, r21
   121aa:	98 f0       	brcs	.+38     	; 0x121d2 <__fp_cmp+0x46>
   121ac:	62 1b       	sub	r22, r18
   121ae:	73 0b       	sbc	r23, r19
   121b0:	84 0b       	sbc	r24, r20
   121b2:	95 0b       	sbc	r25, r21
   121b4:	39 f4       	brne	.+14     	; 0x121c4 <__fp_cmp+0x38>
   121b6:	0a 26       	eor	r0, r26
   121b8:	61 f0       	breq	.+24     	; 0x121d2 <__fp_cmp+0x46>
   121ba:	23 2b       	or	r18, r19
   121bc:	24 2b       	or	r18, r20
   121be:	25 2b       	or	r18, r21
   121c0:	21 f4       	brne	.+8      	; 0x121ca <__fp_cmp+0x3e>
   121c2:	08 95       	ret
   121c4:	0a 26       	eor	r0, r26
   121c6:	09 f4       	brne	.+2      	; 0x121ca <__fp_cmp+0x3e>
   121c8:	a1 40       	sbci	r26, 0x01	; 1
   121ca:	a6 95       	lsr	r26
   121cc:	8f ef       	ldi	r24, 0xFF	; 255
   121ce:	81 1d       	adc	r24, r1
   121d0:	81 1d       	adc	r24, r1
   121d2:	08 95       	ret

000121d4 <__fp_inf>:
__fp_inf():
   121d4:	97 f9       	bld	r25, 7
   121d6:	9f 67       	ori	r25, 0x7F	; 127
   121d8:	80 e8       	ldi	r24, 0x80	; 128
   121da:	70 e0       	ldi	r23, 0x00	; 0
   121dc:	60 e0       	ldi	r22, 0x00	; 0
   121de:	08 95       	ret

000121e0 <__fp_nan>:
__fp_nan():
   121e0:	9f ef       	ldi	r25, 0xFF	; 255
   121e2:	80 ec       	ldi	r24, 0xC0	; 192
   121e4:	08 95       	ret

000121e6 <__fp_pscA>:
__fp_pscA():
   121e6:	00 24       	eor	r0, r0
   121e8:	0a 94       	dec	r0
   121ea:	16 16       	cp	r1, r22
   121ec:	17 06       	cpc	r1, r23
   121ee:	18 06       	cpc	r1, r24
   121f0:	09 06       	cpc	r0, r25
   121f2:	08 95       	ret

000121f4 <__fp_pscB>:
__fp_pscB():
   121f4:	00 24       	eor	r0, r0
   121f6:	0a 94       	dec	r0
   121f8:	12 16       	cp	r1, r18
   121fa:	13 06       	cpc	r1, r19
   121fc:	14 06       	cpc	r1, r20
   121fe:	05 06       	cpc	r0, r21
   12200:	08 95       	ret

00012202 <__fp_round>:
__fp_round():
   12202:	09 2e       	mov	r0, r25
   12204:	03 94       	inc	r0
   12206:	00 0c       	add	r0, r0
   12208:	11 f4       	brne	.+4      	; 0x1220e <__fp_round+0xc>
   1220a:	88 23       	and	r24, r24
   1220c:	52 f0       	brmi	.+20     	; 0x12222 <__fp_round+0x20>
   1220e:	bb 0f       	add	r27, r27
   12210:	40 f4       	brcc	.+16     	; 0x12222 <__fp_round+0x20>
   12212:	bf 2b       	or	r27, r31
   12214:	11 f4       	brne	.+4      	; 0x1221a <__fp_round+0x18>
   12216:	60 ff       	sbrs	r22, 0
   12218:	04 c0       	rjmp	.+8      	; 0x12222 <__fp_round+0x20>
   1221a:	6f 5f       	subi	r22, 0xFF	; 255
   1221c:	7f 4f       	sbci	r23, 0xFF	; 255
   1221e:	8f 4f       	sbci	r24, 0xFF	; 255
   12220:	9f 4f       	sbci	r25, 0xFF	; 255
   12222:	08 95       	ret

00012224 <__fp_split3>:
__fp_split3():
   12224:	57 fd       	sbrc	r21, 7
   12226:	90 58       	subi	r25, 0x80	; 128
   12228:	44 0f       	add	r20, r20
   1222a:	55 1f       	adc	r21, r21
   1222c:	59 f0       	breq	.+22     	; 0x12244 <__fp_splitA+0x10>
   1222e:	5f 3f       	cpi	r21, 0xFF	; 255
   12230:	71 f0       	breq	.+28     	; 0x1224e <__fp_splitA+0x1a>
   12232:	47 95       	ror	r20

00012234 <__fp_splitA>:
   12234:	88 0f       	add	r24, r24
   12236:	97 fb       	bst	r25, 7
   12238:	99 1f       	adc	r25, r25
   1223a:	61 f0       	breq	.+24     	; 0x12254 <__fp_splitA+0x20>
   1223c:	9f 3f       	cpi	r25, 0xFF	; 255
   1223e:	79 f0       	breq	.+30     	; 0x1225e <__fp_splitA+0x2a>
   12240:	87 95       	ror	r24
   12242:	08 95       	ret
   12244:	12 16       	cp	r1, r18
   12246:	13 06       	cpc	r1, r19
   12248:	14 06       	cpc	r1, r20
   1224a:	55 1f       	adc	r21, r21
   1224c:	f2 cf       	rjmp	.-28     	; 0x12232 <__fp_split3+0xe>
   1224e:	46 95       	lsr	r20
   12250:	f1 df       	rcall	.-30     	; 0x12234 <__fp_splitA>
   12252:	08 c0       	rjmp	.+16     	; 0x12264 <__fp_splitA+0x30>
   12254:	16 16       	cp	r1, r22
   12256:	17 06       	cpc	r1, r23
   12258:	18 06       	cpc	r1, r24
   1225a:	99 1f       	adc	r25, r25
   1225c:	f1 cf       	rjmp	.-30     	; 0x12240 <__fp_splitA+0xc>
   1225e:	86 95       	lsr	r24
   12260:	71 05       	cpc	r23, r1
   12262:	61 05       	cpc	r22, r1
   12264:	08 94       	sec
   12266:	08 95       	ret

00012268 <__fp_zero>:
__fp_zero():
   12268:	e8 94       	clt

0001226a <__fp_szero>:
   1226a:	bb 27       	eor	r27, r27
   1226c:	66 27       	eor	r22, r22
   1226e:	77 27       	eor	r23, r23
   12270:	cb 01       	movw	r24, r22
   12272:	97 f9       	bld	r25, 7
   12274:	08 95       	ret

00012276 <__gesf2>:
__gesf2():
   12276:	0e 94 c6 90 	call	0x1218c	; 0x1218c <__fp_cmp>
   1227a:	08 f4       	brcc	.+2      	; 0x1227e <__gesf2+0x8>
   1227c:	8f ef       	ldi	r24, 0xFF	; 255
   1227e:	08 95       	ret

00012280 <__mulsf3>:
__mulsf3():
   12280:	0e 94 53 91 	call	0x122a6	; 0x122a6 <__mulsf3x>
   12284:	0c 94 01 91 	jmp	0x12202	; 0x12202 <__fp_round>
   12288:	0e 94 f3 90 	call	0x121e6	; 0x121e6 <__fp_pscA>
   1228c:	38 f0       	brcs	.+14     	; 0x1229c <__mulsf3+0x1c>
   1228e:	0e 94 fa 90 	call	0x121f4	; 0x121f4 <__fp_pscB>
   12292:	20 f0       	brcs	.+8      	; 0x1229c <__mulsf3+0x1c>
   12294:	95 23       	and	r25, r21
   12296:	11 f0       	breq	.+4      	; 0x1229c <__mulsf3+0x1c>
   12298:	0c 94 ea 90 	jmp	0x121d4	; 0x121d4 <__fp_inf>
   1229c:	0c 94 f0 90 	jmp	0x121e0	; 0x121e0 <__fp_nan>
   122a0:	11 24       	eor	r1, r1
   122a2:	0c 94 35 91 	jmp	0x1226a	; 0x1226a <__fp_szero>

000122a6 <__mulsf3x>:
__mulsf3x():
   122a6:	0e 94 12 91 	call	0x12224	; 0x12224 <__fp_split3>
   122aa:	70 f3       	brcs	.-36     	; 0x12288 <__mulsf3+0x8>

000122ac <__mulsf3_pse>:
   122ac:	95 9f       	mul	r25, r21
   122ae:	c1 f3       	breq	.-16     	; 0x122a0 <__mulsf3+0x20>
   122b0:	95 0f       	add	r25, r21
   122b2:	50 e0       	ldi	r21, 0x00	; 0
   122b4:	55 1f       	adc	r21, r21
   122b6:	62 9f       	mul	r22, r18
   122b8:	f0 01       	movw	r30, r0
   122ba:	72 9f       	mul	r23, r18
   122bc:	bb 27       	eor	r27, r27
   122be:	f0 0d       	add	r31, r0
   122c0:	b1 1d       	adc	r27, r1
   122c2:	63 9f       	mul	r22, r19
   122c4:	aa 27       	eor	r26, r26
   122c6:	f0 0d       	add	r31, r0
   122c8:	b1 1d       	adc	r27, r1
   122ca:	aa 1f       	adc	r26, r26
   122cc:	64 9f       	mul	r22, r20
   122ce:	66 27       	eor	r22, r22
   122d0:	b0 0d       	add	r27, r0
   122d2:	a1 1d       	adc	r26, r1
   122d4:	66 1f       	adc	r22, r22
   122d6:	82 9f       	mul	r24, r18
   122d8:	22 27       	eor	r18, r18
   122da:	b0 0d       	add	r27, r0
   122dc:	a1 1d       	adc	r26, r1
   122de:	62 1f       	adc	r22, r18
   122e0:	73 9f       	mul	r23, r19
   122e2:	b0 0d       	add	r27, r0
   122e4:	a1 1d       	adc	r26, r1
   122e6:	62 1f       	adc	r22, r18
   122e8:	83 9f       	mul	r24, r19
   122ea:	a0 0d       	add	r26, r0
   122ec:	61 1d       	adc	r22, r1
   122ee:	22 1f       	adc	r18, r18
   122f0:	74 9f       	mul	r23, r20
   122f2:	33 27       	eor	r19, r19
   122f4:	a0 0d       	add	r26, r0
   122f6:	61 1d       	adc	r22, r1
   122f8:	23 1f       	adc	r18, r19
   122fa:	84 9f       	mul	r24, r20
   122fc:	60 0d       	add	r22, r0
   122fe:	21 1d       	adc	r18, r1
   12300:	82 2f       	mov	r24, r18
   12302:	76 2f       	mov	r23, r22
   12304:	6a 2f       	mov	r22, r26
   12306:	11 24       	eor	r1, r1
   12308:	9f 57       	subi	r25, 0x7F	; 127
   1230a:	50 40       	sbci	r21, 0x00	; 0
   1230c:	9a f0       	brmi	.+38     	; 0x12334 <__mulsf3_pse+0x88>
   1230e:	f1 f0       	breq	.+60     	; 0x1234c <__mulsf3_pse+0xa0>
   12310:	88 23       	and	r24, r24
   12312:	4a f0       	brmi	.+18     	; 0x12326 <__mulsf3_pse+0x7a>
   12314:	ee 0f       	add	r30, r30
   12316:	ff 1f       	adc	r31, r31
   12318:	bb 1f       	adc	r27, r27
   1231a:	66 1f       	adc	r22, r22
   1231c:	77 1f       	adc	r23, r23
   1231e:	88 1f       	adc	r24, r24
   12320:	91 50       	subi	r25, 0x01	; 1
   12322:	50 40       	sbci	r21, 0x00	; 0
   12324:	a9 f7       	brne	.-22     	; 0x12310 <__mulsf3_pse+0x64>
   12326:	9e 3f       	cpi	r25, 0xFE	; 254
   12328:	51 05       	cpc	r21, r1
   1232a:	80 f0       	brcs	.+32     	; 0x1234c <__mulsf3_pse+0xa0>
   1232c:	0c 94 ea 90 	jmp	0x121d4	; 0x121d4 <__fp_inf>
   12330:	0c 94 35 91 	jmp	0x1226a	; 0x1226a <__fp_szero>
   12334:	5f 3f       	cpi	r21, 0xFF	; 255
   12336:	e4 f3       	brlt	.-8      	; 0x12330 <__mulsf3_pse+0x84>
   12338:	98 3e       	cpi	r25, 0xE8	; 232
   1233a:	d4 f3       	brlt	.-12     	; 0x12330 <__mulsf3_pse+0x84>
   1233c:	86 95       	lsr	r24
   1233e:	77 95       	ror	r23
   12340:	67 95       	ror	r22
   12342:	b7 95       	ror	r27
   12344:	f7 95       	ror	r31
   12346:	e7 95       	ror	r30
   12348:	9f 5f       	subi	r25, 0xFF	; 255
   1234a:	c1 f7       	brne	.-16     	; 0x1233c <__mulsf3_pse+0x90>
   1234c:	fe 2b       	or	r31, r30
   1234e:	88 0f       	add	r24, r24
   12350:	91 1d       	adc	r25, r1
   12352:	96 95       	lsr	r25
   12354:	87 95       	ror	r24
   12356:	97 f9       	bld	r25, 7
   12358:	08 95       	ret

0001235a <__unordsf2>:
   1235a:	0e 94 c6 90 	call	0x1218c	; 0x1218c <__fp_cmp>
   1235e:	88 0b       	sbc	r24, r24
   12360:	99 0b       	sbc	r25, r25
   12362:	08 95       	ret

00012364 <__mulsi3>:
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:648
   12364:	db 01       	movw	r26, r22
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:649
   12366:	8f 93       	push	r24
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:650
   12368:	9f 93       	push	r25
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:651
   1236a:	0e 94 42 92 	call	0x12484	; 0x12484 <__muluhisi3>
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:652
   1236e:	bf 91       	pop	r27
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:653
   12370:	af 91       	pop	r26
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:655
   12372:	a2 9f       	mul	r26, r18
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:656
   12374:	80 0d       	add	r24, r0
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:657
   12376:	91 1d       	adc	r25, r1
__mulsi3():
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:658
   12378:	a3 9f       	mul	r26, r19
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:659
   1237a:	90 0d       	add	r25, r0
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:660
   1237c:	b2 9f       	mul	r27, r18
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:661
   1237e:	90 0d       	add	r25, r0
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:662
   12380:	11 24       	eor	r1, r1
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:663
   12382:	08 95       	ret

00012384 <__udivmodhi4>:
__udivmodhi4():
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1408
   12384:	aa 1b       	sub	r26, r26
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1409
   12386:	bb 1b       	sub	r27, r27
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1410
   12388:	51 e1       	ldi	r21, 0x11	; 17
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1411
   1238a:	07 c0       	rjmp	.+14     	; 0x1239a <__udivmodhi4_ep>

0001238c <__udivmodhi4_loop>:
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1413
   1238c:	aa 1f       	adc	r26, r26
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1414
   1238e:	bb 1f       	adc	r27, r27
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1415
   12390:	a6 17       	cp	r26, r22
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1416
   12392:	b7 07       	cpc	r27, r23
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1417
   12394:	10 f0       	brcs	.+4      	; 0x1239a <__udivmodhi4_ep>
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1418
   12396:	a6 1b       	sub	r26, r22
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1419
   12398:	b7 0b       	sbc	r27, r23

0001239a <__udivmodhi4_ep>:
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1421
   1239a:	88 1f       	adc	r24, r24
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1422
   1239c:	99 1f       	adc	r25, r25
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1423
   1239e:	5a 95       	dec	r21
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1424
   123a0:	a9 f7       	brne	.-22     	; 0x1238c <__udivmodhi4_loop>
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1425
   123a2:	80 95       	com	r24
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1426
   123a4:	90 95       	com	r25
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1428
   123a6:	bc 01       	movw	r22, r24
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1430
   123a8:	cd 01       	movw	r24, r26
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1432
   123aa:	08 95       	ret

000123ac <__divmodhi4>:
__divmodhi4():
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1440
   123ac:	97 fb       	bst	r25, 7
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1441
   123ae:	07 2e       	mov	r0, r23
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1442
   123b0:	16 f4       	brtc	.+4      	; 0x123b6 <__divmodhi4+0xa>
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1443
   123b2:	00 94       	com	r0
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1444
   123b4:	07 d0       	rcall	.+14     	; 0x123c4 <__divmodhi4_neg1>
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1446
   123b6:	77 fd       	sbrc	r23, 7
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1447
   123b8:	09 d0       	rcall	.+18     	; 0x123cc <__divmodhi4_neg2>
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1448
   123ba:	0e 94 c2 91 	call	0x12384	; 0x12384 <__udivmodhi4>
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1449
   123be:	07 fc       	sbrc	r0, 7
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1450
   123c0:	05 d0       	rcall	.+10     	; 0x123cc <__divmodhi4_neg2>
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1451
   123c2:	3e f4       	brtc	.+14     	; 0x123d2 <__divmodhi4_exit>

000123c4 <__divmodhi4_neg1>:
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1454
   123c4:	90 95       	com	r25
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1455
   123c6:	81 95       	neg	r24
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1456
   123c8:	9f 4f       	sbci	r25, 0xFF	; 255
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1457
   123ca:	08 95       	ret

000123cc <__divmodhi4_neg2>:
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1460
   123cc:	70 95       	com	r23
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1461
   123ce:	61 95       	neg	r22
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1462
   123d0:	7f 4f       	sbci	r23, 0xFF	; 255

000123d2 <__divmodhi4_exit>:
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1464
   123d2:	08 95       	ret

000123d4 <__udivmodsi4>:
__udivmodsi4():
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1638
   123d4:	a1 e2       	ldi	r26, 0x21	; 33
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1639
   123d6:	1a 2e       	mov	r1, r26
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1640
   123d8:	aa 1b       	sub	r26, r26
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1641
   123da:	bb 1b       	sub	r27, r27
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1642
   123dc:	fd 01       	movw	r30, r26
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1644
   123de:	0d c0       	rjmp	.+26     	; 0x123fa <__udivmodsi4_ep>

000123e0 <__udivmodsi4_loop>:
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1646
   123e0:	aa 1f       	adc	r26, r26
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1647
   123e2:	bb 1f       	adc	r27, r27
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1648
   123e4:	ee 1f       	adc	r30, r30
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1649
   123e6:	ff 1f       	adc	r31, r31
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1650
   123e8:	a2 17       	cp	r26, r18
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1651
   123ea:	b3 07       	cpc	r27, r19
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1652
   123ec:	e4 07       	cpc	r30, r20
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1653
   123ee:	f5 07       	cpc	r31, r21
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1654
   123f0:	20 f0       	brcs	.+8      	; 0x123fa <__udivmodsi4_ep>
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1655
   123f2:	a2 1b       	sub	r26, r18
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1656
   123f4:	b3 0b       	sbc	r27, r19
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1657
   123f6:	e4 0b       	sbc	r30, r20
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1658
   123f8:	f5 0b       	sbc	r31, r21

000123fa <__udivmodsi4_ep>:
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1660
   123fa:	66 1f       	adc	r22, r22
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1661
   123fc:	77 1f       	adc	r23, r23
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1662
   123fe:	88 1f       	adc	r24, r24
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1663
   12400:	99 1f       	adc	r25, r25
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1664
   12402:	1a 94       	dec	r1
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1665
   12404:	69 f7       	brne	.-38     	; 0x123e0 <__udivmodsi4_loop>
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1667
   12406:	60 95       	com	r22
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1668
   12408:	70 95       	com	r23
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1669
   1240a:	80 95       	com	r24
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1670
   1240c:	90 95       	com	r25
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1672
   1240e:	9b 01       	movw	r18, r22
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1674
   12410:	ac 01       	movw	r20, r24
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1676
   12412:	bd 01       	movw	r22, r26
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1678
   12414:	cf 01       	movw	r24, r30
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1680
   12416:	08 95       	ret

00012418 <__divmodsi4>:
__divmodsi4():
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1686
   12418:	05 2e       	mov	r0, r21
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1687
   1241a:	97 fb       	bst	r25, 7
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1688
   1241c:	1e f4       	brtc	.+6      	; 0x12424 <__divmodsi4+0xc>
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1689
   1241e:	00 94       	com	r0
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1690
   12420:	0e 94 23 92 	call	0x12446	; 0x12446 <__negsi2>
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1692
   12424:	57 fd       	sbrc	r21, 7
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1693
   12426:	07 d0       	rcall	.+14     	; 0x12436 <__divmodsi4_neg2>
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1694
   12428:	0e 94 ea 91 	call	0x123d4	; 0x123d4 <__udivmodsi4>
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1695
   1242c:	07 fc       	sbrc	r0, 7
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1696
   1242e:	03 d0       	rcall	.+6      	; 0x12436 <__divmodsi4_neg2>
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1697
   12430:	4e f4       	brtc	.+18     	; 0x12444 <__divmodsi4_exit>
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1698
   12432:	0c 94 23 92 	jmp	0x12446	; 0x12446 <__negsi2>

00012436 <__divmodsi4_neg2>:
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1701
   12436:	50 95       	com	r21
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1702
   12438:	40 95       	com	r20
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1703
   1243a:	30 95       	com	r19
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1704
   1243c:	21 95       	neg	r18
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1705
   1243e:	3f 4f       	sbci	r19, 0xFF	; 255
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1706
   12440:	4f 4f       	sbci	r20, 0xFF	; 255
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1707
   12442:	5f 4f       	sbci	r21, 0xFF	; 255

00012444 <__divmodsi4_exit>:
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1709
   12444:	08 95       	ret

00012446 <__negsi2>:
__negsi2():
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1718
   12446:	90 95       	com	r25
   12448:	80 95       	com	r24
   1244a:	70 95       	com	r23
   1244c:	61 95       	neg	r22
   1244e:	7f 4f       	sbci	r23, 0xFF	; 255
   12450:	8f 4f       	sbci	r24, 0xFF	; 255
   12452:	9f 4f       	sbci	r25, 0xFF	; 255
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1719
   12454:	08 95       	ret

00012456 <__tablejump2__>:
__tablejump2__():
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2296
   12456:	ee 0f       	add	r30, r30
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2297
   12458:	ff 1f       	adc	r31, r31
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2300
   1245a:	88 1f       	adc	r24, r24
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2301
   1245c:	8b bf       	out	0x3b, r24	; 59
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2312
   1245e:	07 90       	elpm	r0, Z+
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2313
   12460:	f6 91       	elpm	r31, Z
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2314
   12462:	e0 2d       	mov	r30, r0
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2319
   12464:	19 94       	eijmp

00012466 <__umulhisi3>:
__umulhisi3():
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:564
   12466:	a2 9f       	mul	r26, r18
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:565
   12468:	b0 01       	movw	r22, r0
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:566
   1246a:	b3 9f       	mul	r27, r19
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:567
   1246c:	c0 01       	movw	r24, r0
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:568
   1246e:	a3 9f       	mul	r26, r19
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:573
   12470:	70 0d       	add	r23, r0
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:574
   12472:	81 1d       	adc	r24, r1
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:575
   12474:	11 24       	eor	r1, r1
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:576
   12476:	91 1d       	adc	r25, r1
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:580
   12478:	b2 9f       	mul	r27, r18
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:581
   1247a:	70 0d       	add	r23, r0
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:582
   1247c:	81 1d       	adc	r24, r1
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:583
   1247e:	11 24       	eor	r1, r1
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:584
   12480:	91 1d       	adc	r25, r1
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:585
   12482:	08 95       	ret

00012484 <__muluhisi3>:
__muluhisi3():
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:626
   12484:	0e 94 33 92 	call	0x12466	; 0x12466 <__umulhisi3>
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:627
   12488:	a5 9f       	mul	r26, r21
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:628
   1248a:	90 0d       	add	r25, r0
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:629
   1248c:	b4 9f       	mul	r27, r20
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:630
   1248e:	90 0d       	add	r25, r0
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:631
   12490:	a4 9f       	mul	r26, r20
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:632
   12492:	80 0d       	add	r24, r0
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:633
   12494:	91 1d       	adc	r25, r1
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:634
   12496:	11 24       	eor	r1, r1
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:635
   12498:	08 95       	ret

0001249a <__cmpdi2>:
__cmpdi2():
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2091
   1249a:	2a 15       	cp	r18, r10
   1249c:	3b 05       	cpc	r19, r11
   1249e:	4c 05       	cpc	r20, r12
   124a0:	5d 05       	cpc	r21, r13
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2092
   124a2:	6e 05       	cpc	r22, r14
   124a4:	7f 05       	cpc	r23, r15
   124a6:	80 07       	cpc	r24, r16
   124a8:	91 07       	cpc	r25, r17
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2093
   124aa:	08 95       	ret

000124ac <dtostrf>:
dtostrf():
   124ac:	ef 92       	push	r14
   124ae:	0f 93       	push	r16
   124b0:	1f 93       	push	r17
   124b2:	cf 93       	push	r28
   124b4:	df 93       	push	r29
   124b6:	e8 01       	movw	r28, r16
   124b8:	34 e0       	ldi	r19, 0x04	; 4
   124ba:	47 fd       	sbrc	r20, 7
   124bc:	34 e1       	ldi	r19, 0x14	; 20
   124be:	04 2e       	mov	r0, r20
   124c0:	00 0c       	add	r0, r0
   124c2:	55 0b       	sbc	r21, r21
   124c4:	57 ff       	sbrs	r21, 7
   124c6:	03 c0       	rjmp	.+6      	; 0x124ce <dtostrf+0x22>
   124c8:	51 95       	neg	r21
   124ca:	41 95       	neg	r20
   124cc:	51 09       	sbc	r21, r1
   124ce:	e3 2e       	mov	r14, r19
   124d0:	02 2f       	mov	r16, r18
   124d2:	24 2f       	mov	r18, r20
   124d4:	ae 01       	movw	r20, r28
   124d6:	0e 94 8c 98 	call	0x13118	; 0x13118 <dtoa_prf>
   124da:	ce 01       	movw	r24, r28
   124dc:	df 91       	pop	r29
   124de:	cf 91       	pop	r28
   124e0:	1f 91       	pop	r17
   124e2:	0f 91       	pop	r16
   124e4:	ef 90       	pop	r14
   124e6:	08 95       	ret

000124e8 <malloc>:
malloc():
   124e8:	0f 93       	push	r16
   124ea:	1f 93       	push	r17
   124ec:	cf 93       	push	r28
   124ee:	df 93       	push	r29
   124f0:	82 30       	cpi	r24, 0x02	; 2
   124f2:	91 05       	cpc	r25, r1
   124f4:	10 f4       	brcc	.+4      	; 0x124fa <malloc+0x12>
   124f6:	82 e0       	ldi	r24, 0x02	; 2
   124f8:	90 e0       	ldi	r25, 0x00	; 0
   124fa:	e0 91 2d 17 	lds	r30, 0x172D	; 0x80172d <__flp>
   124fe:	f0 91 2e 17 	lds	r31, 0x172E	; 0x80172e <__flp+0x1>
   12502:	30 e0       	ldi	r19, 0x00	; 0
   12504:	20 e0       	ldi	r18, 0x00	; 0
   12506:	b0 e0       	ldi	r27, 0x00	; 0
   12508:	a0 e0       	ldi	r26, 0x00	; 0
   1250a:	30 97       	sbiw	r30, 0x00	; 0
   1250c:	99 f4       	brne	.+38     	; 0x12534 <malloc+0x4c>
   1250e:	21 15       	cp	r18, r1
   12510:	31 05       	cpc	r19, r1
   12512:	09 f4       	brne	.+2      	; 0x12516 <malloc+0x2e>
   12514:	4a c0       	rjmp	.+148    	; 0x125aa <malloc+0xc2>
   12516:	28 1b       	sub	r18, r24
   12518:	39 0b       	sbc	r19, r25
   1251a:	24 30       	cpi	r18, 0x04	; 4
   1251c:	31 05       	cpc	r19, r1
   1251e:	d8 f5       	brcc	.+118    	; 0x12596 <malloc+0xae>
   12520:	8a 81       	ldd	r24, Y+2	; 0x02
   12522:	9b 81       	ldd	r25, Y+3	; 0x03
   12524:	61 15       	cp	r22, r1
   12526:	71 05       	cpc	r23, r1
   12528:	89 f1       	breq	.+98     	; 0x1258c <malloc+0xa4>
   1252a:	fb 01       	movw	r30, r22
   1252c:	93 83       	std	Z+3, r25	; 0x03
   1252e:	82 83       	std	Z+2, r24	; 0x02
   12530:	fe 01       	movw	r30, r28
   12532:	11 c0       	rjmp	.+34     	; 0x12556 <malloc+0x6e>
   12534:	40 81       	ld	r20, Z
   12536:	51 81       	ldd	r21, Z+1	; 0x01
   12538:	02 81       	ldd	r16, Z+2	; 0x02
   1253a:	13 81       	ldd	r17, Z+3	; 0x03
   1253c:	48 17       	cp	r20, r24
   1253e:	59 07       	cpc	r21, r25
   12540:	e0 f0       	brcs	.+56     	; 0x1257a <malloc+0x92>
   12542:	48 17       	cp	r20, r24
   12544:	59 07       	cpc	r21, r25
   12546:	99 f4       	brne	.+38     	; 0x1256e <malloc+0x86>
   12548:	10 97       	sbiw	r26, 0x00	; 0
   1254a:	61 f0       	breq	.+24     	; 0x12564 <malloc+0x7c>
   1254c:	12 96       	adiw	r26, 0x02	; 2
   1254e:	0c 93       	st	X, r16
   12550:	12 97       	sbiw	r26, 0x02	; 2
   12552:	13 96       	adiw	r26, 0x03	; 3
   12554:	1c 93       	st	X, r17
   12556:	32 96       	adiw	r30, 0x02	; 2
   12558:	cf 01       	movw	r24, r30
   1255a:	df 91       	pop	r29
   1255c:	cf 91       	pop	r28
   1255e:	1f 91       	pop	r17
   12560:	0f 91       	pop	r16
   12562:	08 95       	ret
   12564:	00 93 2d 17 	sts	0x172D, r16	; 0x80172d <__flp>
   12568:	10 93 2e 17 	sts	0x172E, r17	; 0x80172e <__flp+0x1>
   1256c:	f4 cf       	rjmp	.-24     	; 0x12556 <malloc+0x6e>
   1256e:	21 15       	cp	r18, r1
   12570:	31 05       	cpc	r19, r1
   12572:	51 f0       	breq	.+20     	; 0x12588 <malloc+0xa0>
   12574:	42 17       	cp	r20, r18
   12576:	53 07       	cpc	r21, r19
   12578:	38 f0       	brcs	.+14     	; 0x12588 <malloc+0xa0>
   1257a:	a9 01       	movw	r20, r18
   1257c:	db 01       	movw	r26, r22
   1257e:	9a 01       	movw	r18, r20
   12580:	bd 01       	movw	r22, r26
   12582:	df 01       	movw	r26, r30
   12584:	f8 01       	movw	r30, r16
   12586:	c1 cf       	rjmp	.-126    	; 0x1250a <malloc+0x22>
   12588:	ef 01       	movw	r28, r30
   1258a:	f9 cf       	rjmp	.-14     	; 0x1257e <malloc+0x96>
   1258c:	90 93 2e 17 	sts	0x172E, r25	; 0x80172e <__flp+0x1>
   12590:	80 93 2d 17 	sts	0x172D, r24	; 0x80172d <__flp>
   12594:	cd cf       	rjmp	.-102    	; 0x12530 <malloc+0x48>
   12596:	fe 01       	movw	r30, r28
   12598:	e2 0f       	add	r30, r18
   1259a:	f3 1f       	adc	r31, r19
   1259c:	81 93       	st	Z+, r24
   1259e:	91 93       	st	Z+, r25
   125a0:	22 50       	subi	r18, 0x02	; 2
   125a2:	31 09       	sbc	r19, r1
   125a4:	39 83       	std	Y+1, r19	; 0x01
   125a6:	28 83       	st	Y, r18
   125a8:	d7 cf       	rjmp	.-82     	; 0x12558 <malloc+0x70>
   125aa:	20 91 2b 17 	lds	r18, 0x172B	; 0x80172b <__brkval>
   125ae:	30 91 2c 17 	lds	r19, 0x172C	; 0x80172c <__brkval+0x1>
   125b2:	23 2b       	or	r18, r19
   125b4:	41 f4       	brne	.+16     	; 0x125c6 <malloc+0xde>
   125b6:	20 91 02 02 	lds	r18, 0x0202	; 0x800202 <__malloc_heap_start>
   125ba:	30 91 03 02 	lds	r19, 0x0203	; 0x800203 <__malloc_heap_start+0x1>
   125be:	30 93 2c 17 	sts	0x172C, r19	; 0x80172c <__brkval+0x1>
   125c2:	20 93 2b 17 	sts	0x172B, r18	; 0x80172b <__brkval>
   125c6:	20 91 00 02 	lds	r18, 0x0200	; 0x800200 <__DATA_REGION_ORIGIN__>
   125ca:	30 91 01 02 	lds	r19, 0x0201	; 0x800201 <__DATA_REGION_ORIGIN__+0x1>
   125ce:	21 15       	cp	r18, r1
   125d0:	31 05       	cpc	r19, r1
   125d2:	41 f4       	brne	.+16     	; 0x125e4 <malloc+0xfc>
   125d4:	2d b7       	in	r18, 0x3d	; 61
   125d6:	3e b7       	in	r19, 0x3e	; 62
   125d8:	40 91 04 02 	lds	r20, 0x0204	; 0x800204 <__malloc_margin>
   125dc:	50 91 05 02 	lds	r21, 0x0205	; 0x800205 <__malloc_margin+0x1>
   125e0:	24 1b       	sub	r18, r20
   125e2:	35 0b       	sbc	r19, r21
   125e4:	e0 91 2b 17 	lds	r30, 0x172B	; 0x80172b <__brkval>
   125e8:	f0 91 2c 17 	lds	r31, 0x172C	; 0x80172c <__brkval+0x1>
   125ec:	e2 17       	cp	r30, r18
   125ee:	f3 07       	cpc	r31, r19
   125f0:	a0 f4       	brcc	.+40     	; 0x1261a <malloc+0x132>
   125f2:	2e 1b       	sub	r18, r30
   125f4:	3f 0b       	sbc	r19, r31
   125f6:	28 17       	cp	r18, r24
   125f8:	39 07       	cpc	r19, r25
   125fa:	78 f0       	brcs	.+30     	; 0x1261a <malloc+0x132>
   125fc:	ac 01       	movw	r20, r24
   125fe:	4e 5f       	subi	r20, 0xFE	; 254
   12600:	5f 4f       	sbci	r21, 0xFF	; 255
   12602:	24 17       	cp	r18, r20
   12604:	35 07       	cpc	r19, r21
   12606:	48 f0       	brcs	.+18     	; 0x1261a <malloc+0x132>
   12608:	4e 0f       	add	r20, r30
   1260a:	5f 1f       	adc	r21, r31
   1260c:	50 93 2c 17 	sts	0x172C, r21	; 0x80172c <__brkval+0x1>
   12610:	40 93 2b 17 	sts	0x172B, r20	; 0x80172b <__brkval>
   12614:	81 93       	st	Z+, r24
   12616:	91 93       	st	Z+, r25
   12618:	9f cf       	rjmp	.-194    	; 0x12558 <malloc+0x70>
   1261a:	f0 e0       	ldi	r31, 0x00	; 0
   1261c:	e0 e0       	ldi	r30, 0x00	; 0
   1261e:	9c cf       	rjmp	.-200    	; 0x12558 <malloc+0x70>

00012620 <free>:
free():
   12620:	cf 93       	push	r28
   12622:	df 93       	push	r29
   12624:	00 97       	sbiw	r24, 0x00	; 0
   12626:	e9 f0       	breq	.+58     	; 0x12662 <free+0x42>
   12628:	fc 01       	movw	r30, r24
   1262a:	32 97       	sbiw	r30, 0x02	; 2
   1262c:	13 82       	std	Z+3, r1	; 0x03
   1262e:	12 82       	std	Z+2, r1	; 0x02
   12630:	a0 91 2d 17 	lds	r26, 0x172D	; 0x80172d <__flp>
   12634:	b0 91 2e 17 	lds	r27, 0x172E	; 0x80172e <__flp+0x1>
   12638:	ed 01       	movw	r28, r26
   1263a:	30 e0       	ldi	r19, 0x00	; 0
   1263c:	20 e0       	ldi	r18, 0x00	; 0
   1263e:	10 97       	sbiw	r26, 0x00	; 0
   12640:	a1 f4       	brne	.+40     	; 0x1266a <free+0x4a>
   12642:	20 81       	ld	r18, Z
   12644:	31 81       	ldd	r19, Z+1	; 0x01
   12646:	82 0f       	add	r24, r18
   12648:	93 1f       	adc	r25, r19
   1264a:	20 91 2b 17 	lds	r18, 0x172B	; 0x80172b <__brkval>
   1264e:	30 91 2c 17 	lds	r19, 0x172C	; 0x80172c <__brkval+0x1>
   12652:	28 17       	cp	r18, r24
   12654:	39 07       	cpc	r19, r25
   12656:	09 f0       	breq	.+2      	; 0x1265a <free+0x3a>
   12658:	61 c0       	rjmp	.+194    	; 0x1271c <free+0xfc>
   1265a:	f0 93 2c 17 	sts	0x172C, r31	; 0x80172c <__brkval+0x1>
   1265e:	e0 93 2b 17 	sts	0x172B, r30	; 0x80172b <__brkval>
   12662:	df 91       	pop	r29
   12664:	cf 91       	pop	r28
   12666:	08 95       	ret
   12668:	ea 01       	movw	r28, r20
   1266a:	ce 17       	cp	r28, r30
   1266c:	df 07       	cpc	r29, r31
   1266e:	e8 f5       	brcc	.+122    	; 0x126ea <free+0xca>
   12670:	4a 81       	ldd	r20, Y+2	; 0x02
   12672:	5b 81       	ldd	r21, Y+3	; 0x03
   12674:	9e 01       	movw	r18, r28
   12676:	41 15       	cp	r20, r1
   12678:	51 05       	cpc	r21, r1
   1267a:	b1 f7       	brne	.-20     	; 0x12668 <free+0x48>
   1267c:	e9 01       	movw	r28, r18
   1267e:	fb 83       	std	Y+3, r31	; 0x03
   12680:	ea 83       	std	Y+2, r30	; 0x02
   12682:	49 91       	ld	r20, Y+
   12684:	59 91       	ld	r21, Y+
   12686:	c4 0f       	add	r28, r20
   12688:	d5 1f       	adc	r29, r21
   1268a:	ec 17       	cp	r30, r28
   1268c:	fd 07       	cpc	r31, r29
   1268e:	61 f4       	brne	.+24     	; 0x126a8 <free+0x88>
   12690:	80 81       	ld	r24, Z
   12692:	91 81       	ldd	r25, Z+1	; 0x01
   12694:	02 96       	adiw	r24, 0x02	; 2
   12696:	84 0f       	add	r24, r20
   12698:	95 1f       	adc	r25, r21
   1269a:	e9 01       	movw	r28, r18
   1269c:	99 83       	std	Y+1, r25	; 0x01
   1269e:	88 83       	st	Y, r24
   126a0:	82 81       	ldd	r24, Z+2	; 0x02
   126a2:	93 81       	ldd	r25, Z+3	; 0x03
   126a4:	9b 83       	std	Y+3, r25	; 0x03
   126a6:	8a 83       	std	Y+2, r24	; 0x02
   126a8:	f0 e0       	ldi	r31, 0x00	; 0
   126aa:	e0 e0       	ldi	r30, 0x00	; 0
   126ac:	12 96       	adiw	r26, 0x02	; 2
   126ae:	8d 91       	ld	r24, X+
   126b0:	9c 91       	ld	r25, X
   126b2:	13 97       	sbiw	r26, 0x03	; 3
   126b4:	00 97       	sbiw	r24, 0x00	; 0
   126b6:	b9 f5       	brne	.+110    	; 0x12726 <free+0x106>
   126b8:	2d 91       	ld	r18, X+
   126ba:	3c 91       	ld	r19, X
   126bc:	11 97       	sbiw	r26, 0x01	; 1
   126be:	cd 01       	movw	r24, r26
   126c0:	02 96       	adiw	r24, 0x02	; 2
   126c2:	82 0f       	add	r24, r18
   126c4:	93 1f       	adc	r25, r19
   126c6:	20 91 2b 17 	lds	r18, 0x172B	; 0x80172b <__brkval>
   126ca:	30 91 2c 17 	lds	r19, 0x172C	; 0x80172c <__brkval+0x1>
   126ce:	28 17       	cp	r18, r24
   126d0:	39 07       	cpc	r19, r25
   126d2:	39 f6       	brne	.-114    	; 0x12662 <free+0x42>
   126d4:	30 97       	sbiw	r30, 0x00	; 0
   126d6:	51 f5       	brne	.+84     	; 0x1272c <free+0x10c>
   126d8:	10 92 2e 17 	sts	0x172E, r1	; 0x80172e <__flp+0x1>
   126dc:	10 92 2d 17 	sts	0x172D, r1	; 0x80172d <__flp>
   126e0:	b0 93 2c 17 	sts	0x172C, r27	; 0x80172c <__brkval+0x1>
   126e4:	a0 93 2b 17 	sts	0x172B, r26	; 0x80172b <__brkval>
   126e8:	bc cf       	rjmp	.-136    	; 0x12662 <free+0x42>
   126ea:	d3 83       	std	Z+3, r29	; 0x03
   126ec:	c2 83       	std	Z+2, r28	; 0x02
   126ee:	40 81       	ld	r20, Z
   126f0:	51 81       	ldd	r21, Z+1	; 0x01
   126f2:	84 0f       	add	r24, r20
   126f4:	95 1f       	adc	r25, r21
   126f6:	c8 17       	cp	r28, r24
   126f8:	d9 07       	cpc	r29, r25
   126fa:	61 f4       	brne	.+24     	; 0x12714 <free+0xf4>
   126fc:	4e 5f       	subi	r20, 0xFE	; 254
   126fe:	5f 4f       	sbci	r21, 0xFF	; 255
   12700:	88 81       	ld	r24, Y
   12702:	99 81       	ldd	r25, Y+1	; 0x01
   12704:	48 0f       	add	r20, r24
   12706:	59 1f       	adc	r21, r25
   12708:	51 83       	std	Z+1, r21	; 0x01
   1270a:	40 83       	st	Z, r20
   1270c:	8a 81       	ldd	r24, Y+2	; 0x02
   1270e:	9b 81       	ldd	r25, Y+3	; 0x03
   12710:	93 83       	std	Z+3, r25	; 0x03
   12712:	82 83       	std	Z+2, r24	; 0x02
   12714:	21 15       	cp	r18, r1
   12716:	31 05       	cpc	r19, r1
   12718:	09 f0       	breq	.+2      	; 0x1271c <free+0xfc>
   1271a:	b0 cf       	rjmp	.-160    	; 0x1267c <free+0x5c>
   1271c:	f0 93 2e 17 	sts	0x172E, r31	; 0x80172e <__flp+0x1>
   12720:	e0 93 2d 17 	sts	0x172D, r30	; 0x80172d <__flp>
   12724:	9e cf       	rjmp	.-196    	; 0x12662 <free+0x42>
   12726:	fd 01       	movw	r30, r26
   12728:	dc 01       	movw	r26, r24
   1272a:	c0 cf       	rjmp	.-128    	; 0x126ac <free+0x8c>
   1272c:	13 82       	std	Z+3, r1	; 0x03
   1272e:	12 82       	std	Z+2, r1	; 0x02
   12730:	d7 cf       	rjmp	.-82     	; 0x126e0 <free+0xc0>

00012732 <realloc>:
realloc():
   12732:	4f 92       	push	r4
   12734:	5f 92       	push	r5
   12736:	6f 92       	push	r6
   12738:	7f 92       	push	r7
   1273a:	8f 92       	push	r8
   1273c:	9f 92       	push	r9
   1273e:	af 92       	push	r10
   12740:	bf 92       	push	r11
   12742:	cf 92       	push	r12
   12744:	df 92       	push	r13
   12746:	ef 92       	push	r14
   12748:	ff 92       	push	r15
   1274a:	0f 93       	push	r16
   1274c:	1f 93       	push	r17
   1274e:	cf 93       	push	r28
   12750:	df 93       	push	r29
   12752:	8c 01       	movw	r16, r24
   12754:	00 97       	sbiw	r24, 0x00	; 0
   12756:	99 f4       	brne	.+38     	; 0x1277e <realloc+0x4c>
   12758:	cb 01       	movw	r24, r22
   1275a:	df 91       	pop	r29
   1275c:	cf 91       	pop	r28
   1275e:	1f 91       	pop	r17
   12760:	0f 91       	pop	r16
   12762:	ff 90       	pop	r15
   12764:	ef 90       	pop	r14
   12766:	df 90       	pop	r13
   12768:	cf 90       	pop	r12
   1276a:	bf 90       	pop	r11
   1276c:	af 90       	pop	r10
   1276e:	9f 90       	pop	r9
   12770:	8f 90       	pop	r8
   12772:	7f 90       	pop	r7
   12774:	6f 90       	pop	r6
   12776:	5f 90       	pop	r5
   12778:	4f 90       	pop	r4
   1277a:	0c 94 74 92 	jmp	0x124e8	; 0x124e8 <malloc>
   1277e:	fc 01       	movw	r30, r24
   12780:	e6 0f       	add	r30, r22
   12782:	f7 1f       	adc	r31, r23
   12784:	9c 01       	movw	r18, r24
   12786:	22 50       	subi	r18, 0x02	; 2
   12788:	31 09       	sbc	r19, r1
   1278a:	e2 17       	cp	r30, r18
   1278c:	f3 07       	cpc	r31, r19
   1278e:	08 f4       	brcc	.+2      	; 0x12792 <realloc+0x60>
   12790:	ae c0       	rjmp	.+348    	; 0x128ee <realloc+0x1bc>
   12792:	d9 01       	movw	r26, r18
   12794:	cd 91       	ld	r28, X+
   12796:	dc 91       	ld	r29, X
   12798:	11 97       	sbiw	r26, 0x01	; 1
   1279a:	c6 17       	cp	r28, r22
   1279c:	d7 07       	cpc	r29, r23
   1279e:	20 f1       	brcs	.+72     	; 0x127e8 <realloc+0xb6>
   127a0:	c5 30       	cpi	r28, 0x05	; 5
   127a2:	d1 05       	cpc	r29, r1
   127a4:	78 f0       	brcs	.+30     	; 0x127c4 <realloc+0x92>
   127a6:	ce 01       	movw	r24, r28
   127a8:	04 97       	sbiw	r24, 0x04	; 4
   127aa:	86 17       	cp	r24, r22
   127ac:	97 07       	cpc	r25, r23
   127ae:	50 f0       	brcs	.+20     	; 0x127c4 <realloc+0x92>
   127b0:	c6 1b       	sub	r28, r22
   127b2:	d7 0b       	sbc	r29, r23
   127b4:	22 97       	sbiw	r28, 0x02	; 2
   127b6:	c1 93       	st	Z+, r28
   127b8:	d1 93       	st	Z+, r29
   127ba:	6d 93       	st	X+, r22
   127bc:	7c 93       	st	X, r23
   127be:	cf 01       	movw	r24, r30
   127c0:	0e 94 10 93 	call	0x12620	; 0x12620 <free>
   127c4:	c8 01       	movw	r24, r16
   127c6:	df 91       	pop	r29
   127c8:	cf 91       	pop	r28
   127ca:	1f 91       	pop	r17
   127cc:	0f 91       	pop	r16
   127ce:	ff 90       	pop	r15
   127d0:	ef 90       	pop	r14
   127d2:	df 90       	pop	r13
   127d4:	cf 90       	pop	r12
   127d6:	bf 90       	pop	r11
   127d8:	af 90       	pop	r10
   127da:	9f 90       	pop	r9
   127dc:	8f 90       	pop	r8
   127de:	7f 90       	pop	r7
   127e0:	6f 90       	pop	r6
   127e2:	5f 90       	pop	r5
   127e4:	4f 90       	pop	r4
   127e6:	08 95       	ret
   127e8:	5b 01       	movw	r10, r22
   127ea:	ac 1a       	sub	r10, r28
   127ec:	bd 0a       	sbc	r11, r29
   127ee:	4c 01       	movw	r8, r24
   127f0:	8c 0e       	add	r8, r28
   127f2:	9d 1e       	adc	r9, r29
   127f4:	a0 91 2d 17 	lds	r26, 0x172D	; 0x80172d <__flp>
   127f8:	b0 91 2e 17 	lds	r27, 0x172E	; 0x80172e <__flp+0x1>
   127fc:	51 2c       	mov	r5, r1
   127fe:	41 2c       	mov	r4, r1
   12800:	f1 2c       	mov	r15, r1
   12802:	e1 2c       	mov	r14, r1
   12804:	10 97       	sbiw	r26, 0x00	; 0
   12806:	31 f5       	brne	.+76     	; 0x12854 <realloc+0x122>
   12808:	80 91 2b 17 	lds	r24, 0x172B	; 0x80172b <__brkval>
   1280c:	90 91 2c 17 	lds	r25, 0x172C	; 0x80172c <__brkval+0x1>
   12810:	88 15       	cp	r24, r8
   12812:	99 05       	cpc	r25, r9
   12814:	09 f0       	breq	.+2      	; 0x12818 <realloc+0xe6>
   12816:	5c c0       	rjmp	.+184    	; 0x128d0 <realloc+0x19e>
   12818:	46 16       	cp	r4, r22
   1281a:	57 06       	cpc	r5, r23
   1281c:	08 f0       	brcs	.+2      	; 0x12820 <realloc+0xee>
   1281e:	58 c0       	rjmp	.+176    	; 0x128d0 <realloc+0x19e>
   12820:	80 91 00 02 	lds	r24, 0x0200	; 0x800200 <__DATA_REGION_ORIGIN__>
   12824:	90 91 01 02 	lds	r25, 0x0201	; 0x800201 <__DATA_REGION_ORIGIN__+0x1>
   12828:	00 97       	sbiw	r24, 0x00	; 0
   1282a:	41 f4       	brne	.+16     	; 0x1283c <realloc+0x10a>
   1282c:	8d b7       	in	r24, 0x3d	; 61
   1282e:	9e b7       	in	r25, 0x3e	; 62
   12830:	40 91 04 02 	lds	r20, 0x0204	; 0x800204 <__malloc_margin>
   12834:	50 91 05 02 	lds	r21, 0x0205	; 0x800205 <__malloc_margin+0x1>
   12838:	84 1b       	sub	r24, r20
   1283a:	95 0b       	sbc	r25, r21
   1283c:	e8 17       	cp	r30, r24
   1283e:	f9 07       	cpc	r31, r25
   12840:	08 f0       	brcs	.+2      	; 0x12844 <realloc+0x112>
   12842:	55 c0       	rjmp	.+170    	; 0x128ee <realloc+0x1bc>
   12844:	f0 93 2c 17 	sts	0x172C, r31	; 0x80172c <__brkval+0x1>
   12848:	e0 93 2b 17 	sts	0x172B, r30	; 0x80172b <__brkval>
   1284c:	f9 01       	movw	r30, r18
   1284e:	71 83       	std	Z+1, r23	; 0x01
   12850:	60 83       	st	Z, r22
   12852:	b8 cf       	rjmp	.-144    	; 0x127c4 <realloc+0x92>
   12854:	8d 91       	ld	r24, X+
   12856:	9c 91       	ld	r25, X
   12858:	11 97       	sbiw	r26, 0x01	; 1
   1285a:	12 96       	adiw	r26, 0x02	; 2
   1285c:	6c 90       	ld	r6, X
   1285e:	12 97       	sbiw	r26, 0x02	; 2
   12860:	13 96       	adiw	r26, 0x03	; 3
   12862:	7c 90       	ld	r7, X
   12864:	13 97       	sbiw	r26, 0x03	; 3
   12866:	a8 15       	cp	r26, r8
   12868:	b9 05       	cpc	r27, r9
   1286a:	59 f5       	brne	.+86     	; 0x128c2 <realloc+0x190>
   1286c:	6c 01       	movw	r12, r24
   1286e:	42 e0       	ldi	r20, 0x02	; 2
   12870:	c4 0e       	add	r12, r20
   12872:	d1 1c       	adc	r13, r1
   12874:	ca 14       	cp	r12, r10
   12876:	db 04       	cpc	r13, r11
   12878:	20 f1       	brcs	.+72     	; 0x128c2 <realloc+0x190>
   1287a:	ac 01       	movw	r20, r24
   1287c:	4a 19       	sub	r20, r10
   1287e:	5b 09       	sbc	r21, r11
   12880:	da 01       	movw	r26, r20
   12882:	12 96       	adiw	r26, 0x02	; 2
   12884:	15 97       	sbiw	r26, 0x05	; 5
   12886:	80 f0       	brcs	.+32     	; 0x128a8 <realloc+0x176>
   12888:	62 82       	std	Z+2, r6	; 0x02
   1288a:	73 82       	std	Z+3, r7	; 0x03
   1288c:	51 83       	std	Z+1, r21	; 0x01
   1288e:	40 83       	st	Z, r20
   12890:	d9 01       	movw	r26, r18
   12892:	6d 93       	st	X+, r22
   12894:	7c 93       	st	X, r23
   12896:	e1 14       	cp	r14, r1
   12898:	f1 04       	cpc	r15, r1
   1289a:	71 f0       	breq	.+28     	; 0x128b8 <realloc+0x186>
   1289c:	d7 01       	movw	r26, r14
   1289e:	13 96       	adiw	r26, 0x03	; 3
   128a0:	fc 93       	st	X, r31
   128a2:	ee 93       	st	-X, r30
   128a4:	12 97       	sbiw	r26, 0x02	; 2
   128a6:	8e cf       	rjmp	.-228    	; 0x127c4 <realloc+0x92>
   128a8:	22 96       	adiw	r28, 0x02	; 2
   128aa:	8c 0f       	add	r24, r28
   128ac:	9d 1f       	adc	r25, r29
   128ae:	f9 01       	movw	r30, r18
   128b0:	91 83       	std	Z+1, r25	; 0x01
   128b2:	80 83       	st	Z, r24
   128b4:	f3 01       	movw	r30, r6
   128b6:	ef cf       	rjmp	.-34     	; 0x12896 <realloc+0x164>
   128b8:	f0 93 2e 17 	sts	0x172E, r31	; 0x80172e <__flp+0x1>
   128bc:	e0 93 2d 17 	sts	0x172D, r30	; 0x80172d <__flp>
   128c0:	81 cf       	rjmp	.-254    	; 0x127c4 <realloc+0x92>
   128c2:	48 16       	cp	r4, r24
   128c4:	59 06       	cpc	r5, r25
   128c6:	08 f4       	brcc	.+2      	; 0x128ca <realloc+0x198>
   128c8:	2c 01       	movw	r4, r24
   128ca:	7d 01       	movw	r14, r26
   128cc:	d3 01       	movw	r26, r6
   128ce:	9a cf       	rjmp	.-204    	; 0x12804 <realloc+0xd2>
   128d0:	cb 01       	movw	r24, r22
   128d2:	0e 94 74 92 	call	0x124e8	; 0x124e8 <malloc>
   128d6:	7c 01       	movw	r14, r24
   128d8:	00 97       	sbiw	r24, 0x00	; 0
   128da:	49 f0       	breq	.+18     	; 0x128ee <realloc+0x1bc>
   128dc:	ae 01       	movw	r20, r28
   128de:	b8 01       	movw	r22, r16
   128e0:	0e 94 1a 95 	call	0x12a34	; 0x12a34 <memcpy>
   128e4:	c8 01       	movw	r24, r16
   128e6:	0e 94 10 93 	call	0x12620	; 0x12620 <free>
   128ea:	87 01       	movw	r16, r14
   128ec:	6b cf       	rjmp	.-298    	; 0x127c4 <realloc+0x92>
   128ee:	10 e0       	ldi	r17, 0x00	; 0
   128f0:	00 e0       	ldi	r16, 0x00	; 0
   128f2:	68 cf       	rjmp	.-304    	; 0x127c4 <realloc+0x92>

000128f4 <abort>:
abort():
   128f4:	81 e0       	ldi	r24, 0x01	; 1
   128f6:	90 e0       	ldi	r25, 0x00	; 0
   128f8:	f8 94       	cli
   128fa:	0c 94 43 9d 	jmp	0x13a86	; 0x13a86 <_exit>

000128fe <atof>:
atof():
   128fe:	66 27       	eor	r22, r22
   12900:	77 27       	eor	r23, r23
   12902:	0c 94 05 9a 	jmp	0x1340a	; 0x1340a <strtod>

00012906 <atoi>:
atoi():
   12906:	fc 01       	movw	r30, r24
   12908:	88 27       	eor	r24, r24
   1290a:	99 27       	eor	r25, r25
   1290c:	e8 94       	clt
   1290e:	21 91       	ld	r18, Z+
   12910:	20 32       	cpi	r18, 0x20	; 32
   12912:	e9 f3       	breq	.-6      	; 0x1290e <atoi+0x8>
   12914:	29 30       	cpi	r18, 0x09	; 9
   12916:	10 f0       	brcs	.+4      	; 0x1291c <atoi+0x16>
   12918:	2e 30       	cpi	r18, 0x0E	; 14
   1291a:	c8 f3       	brcs	.-14     	; 0x1290e <atoi+0x8>
   1291c:	2b 32       	cpi	r18, 0x2B	; 43
   1291e:	41 f0       	breq	.+16     	; 0x12930 <atoi+0x2a>
   12920:	2d 32       	cpi	r18, 0x2D	; 45
   12922:	39 f4       	brne	.+14     	; 0x12932 <atoi+0x2c>
   12924:	68 94       	set
   12926:	04 c0       	rjmp	.+8      	; 0x12930 <atoi+0x2a>
   12928:	0e 94 6d 95 	call	0x12ada	; 0x12ada <__mulhi_const_10>
   1292c:	82 0f       	add	r24, r18
   1292e:	91 1d       	adc	r25, r1
   12930:	21 91       	ld	r18, Z+
   12932:	20 53       	subi	r18, 0x30	; 48
   12934:	2a 30       	cpi	r18, 0x0A	; 10
   12936:	c0 f3       	brcs	.-16     	; 0x12928 <atoi+0x22>
   12938:	1e f4       	brtc	.+6      	; 0x12940 <atoi+0x3a>
   1293a:	90 95       	com	r25
   1293c:	81 95       	neg	r24
   1293e:	9f 4f       	sbci	r25, 0xFF	; 255
   12940:	08 95       	ret

00012942 <atol>:
atol():
   12942:	1f 93       	push	r17
   12944:	fc 01       	movw	r30, r24
   12946:	99 27       	eor	r25, r25
   12948:	88 27       	eor	r24, r24
   1294a:	bc 01       	movw	r22, r24
   1294c:	e8 94       	clt
   1294e:	11 91       	ld	r17, Z+
   12950:	10 32       	cpi	r17, 0x20	; 32
   12952:	e9 f3       	breq	.-6      	; 0x1294e <atol+0xc>
   12954:	19 30       	cpi	r17, 0x09	; 9
   12956:	10 f0       	brcs	.+4      	; 0x1295c <atol+0x1a>
   12958:	1e 30       	cpi	r17, 0x0E	; 14
   1295a:	c8 f3       	brcs	.-14     	; 0x1294e <atol+0xc>
   1295c:	1b 32       	cpi	r17, 0x2B	; 43
   1295e:	51 f0       	breq	.+20     	; 0x12974 <atol+0x32>
   12960:	1d 32       	cpi	r17, 0x2D	; 45
   12962:	49 f4       	brne	.+18     	; 0x12976 <atol+0x34>
   12964:	68 94       	set
   12966:	06 c0       	rjmp	.+12     	; 0x12974 <atol+0x32>
   12968:	0e 94 58 95 	call	0x12ab0	; 0x12ab0 <__mulsi_const_10>
   1296c:	61 0f       	add	r22, r17
   1296e:	71 1d       	adc	r23, r1
   12970:	81 1d       	adc	r24, r1
   12972:	91 1d       	adc	r25, r1
   12974:	11 91       	ld	r17, Z+
   12976:	10 53       	subi	r17, 0x30	; 48
   12978:	1a 30       	cpi	r17, 0x0A	; 10
   1297a:	b0 f3       	brcs	.-20     	; 0x12968 <atol+0x26>
   1297c:	3e f4       	brtc	.+14     	; 0x1298c <atol+0x4a>
   1297e:	90 95       	com	r25
   12980:	80 95       	com	r24
   12982:	70 95       	com	r23
   12984:	61 95       	neg	r22
   12986:	7f 4f       	sbci	r23, 0xFF	; 255
   12988:	8f 4f       	sbci	r24, 0xFF	; 255
   1298a:	9f 4f       	sbci	r25, 0xFF	; 255
   1298c:	1f 91       	pop	r17
   1298e:	08 95       	ret

00012990 <isspace>:
isspace():
   12990:	91 11       	cpse	r25, r1
   12992:	0c 94 3b 9c 	jmp	0x13876	; 0x13876 <__ctype_isfalse>
   12996:	80 32       	cpi	r24, 0x20	; 32
   12998:	19 f0       	breq	.+6      	; 0x129a0 <isspace+0x10>
   1299a:	89 50       	subi	r24, 0x09	; 9
   1299c:	85 50       	subi	r24, 0x05	; 5
   1299e:	c8 f7       	brcc	.-14     	; 0x12992 <isspace+0x2>
   129a0:	08 95       	ret

000129a2 <memcpy_P>:
memcpy_P():
   129a2:	fb 01       	movw	r30, r22
   129a4:	dc 01       	movw	r26, r24
   129a6:	02 c0       	rjmp	.+4      	; 0x129ac <memcpy_P+0xa>
   129a8:	05 90       	lpm	r0, Z+
   129aa:	0d 92       	st	X+, r0
   129ac:	41 50       	subi	r20, 0x01	; 1
   129ae:	50 40       	sbci	r21, 0x00	; 0
   129b0:	d8 f7       	brcc	.-10     	; 0x129a8 <memcpy_P+0x6>
   129b2:	08 95       	ret

000129b4 <strcat_P>:
strcat_P():
   129b4:	fb 01       	movw	r30, r22
   129b6:	dc 01       	movw	r26, r24
   129b8:	0d 90       	ld	r0, X+
   129ba:	00 20       	and	r0, r0
   129bc:	e9 f7       	brne	.-6      	; 0x129b8 <strcat_P+0x4>
   129be:	11 97       	sbiw	r26, 0x01	; 1
   129c0:	05 90       	lpm	r0, Z+
   129c2:	0d 92       	st	X+, r0
   129c4:	00 20       	and	r0, r0
   129c6:	e1 f7       	brne	.-8      	; 0x129c0 <strcat_P+0xc>
   129c8:	08 95       	ret

000129ca <strcmp_P>:
strcmp_P():
   129ca:	fb 01       	movw	r30, r22
   129cc:	dc 01       	movw	r26, r24
   129ce:	8d 91       	ld	r24, X+
   129d0:	05 90       	lpm	r0, Z+
   129d2:	80 19       	sub	r24, r0
   129d4:	01 10       	cpse	r0, r1
   129d6:	d9 f3       	breq	.-10     	; 0x129ce <strcmp_P+0x4>
   129d8:	99 0b       	sbc	r25, r25
   129da:	08 95       	ret

000129dc <strcpy_P>:
strcpy_P():
   129dc:	fb 01       	movw	r30, r22
   129de:	dc 01       	movw	r26, r24
   129e0:	05 90       	lpm	r0, Z+
   129e2:	0d 92       	st	X+, r0
   129e4:	00 20       	and	r0, r0
   129e6:	e1 f7       	brne	.-8      	; 0x129e0 <strcpy_P+0x4>
   129e8:	08 95       	ret

000129ea <__strlen_P>:
__strlen_P():
   129ea:	fc 01       	movw	r30, r24
   129ec:	05 90       	lpm	r0, Z+
   129ee:	00 20       	and	r0, r0
   129f0:	e9 f7       	brne	.-6      	; 0x129ec <__strlen_P+0x2>
   129f2:	80 95       	com	r24
   129f4:	90 95       	com	r25
   129f6:	8e 0f       	add	r24, r30
   129f8:	9f 1f       	adc	r25, r31
   129fa:	08 95       	ret

000129fc <strncpy_P>:
strncpy_P():
   129fc:	fb 01       	movw	r30, r22
   129fe:	dc 01       	movw	r26, r24
   12a00:	41 50       	subi	r20, 0x01	; 1
   12a02:	50 40       	sbci	r21, 0x00	; 0
   12a04:	48 f0       	brcs	.+18     	; 0x12a18 <strncpy_P+0x1c>
   12a06:	05 90       	lpm	r0, Z+
   12a08:	0d 92       	st	X+, r0
   12a0a:	00 20       	and	r0, r0
   12a0c:	c9 f7       	brne	.-14     	; 0x12a00 <strncpy_P+0x4>
   12a0e:	01 c0       	rjmp	.+2      	; 0x12a12 <strncpy_P+0x16>
   12a10:	1d 92       	st	X+, r1
   12a12:	41 50       	subi	r20, 0x01	; 1
   12a14:	50 40       	sbci	r21, 0x00	; 0
   12a16:	e0 f7       	brcc	.-8      	; 0x12a10 <strncpy_P+0x14>
   12a18:	08 95       	ret

00012a1a <memcmp>:
memcmp():
   12a1a:	fb 01       	movw	r30, r22
   12a1c:	dc 01       	movw	r26, r24
   12a1e:	04 c0       	rjmp	.+8      	; 0x12a28 <memcmp+0xe>
   12a20:	8d 91       	ld	r24, X+
   12a22:	01 90       	ld	r0, Z+
   12a24:	80 19       	sub	r24, r0
   12a26:	21 f4       	brne	.+8      	; 0x12a30 <memcmp+0x16>
   12a28:	41 50       	subi	r20, 0x01	; 1
   12a2a:	50 40       	sbci	r21, 0x00	; 0
   12a2c:	c8 f7       	brcc	.-14     	; 0x12a20 <memcmp+0x6>
   12a2e:	88 1b       	sub	r24, r24
   12a30:	99 0b       	sbc	r25, r25
   12a32:	08 95       	ret

00012a34 <memcpy>:
memcpy():
   12a34:	fb 01       	movw	r30, r22
   12a36:	dc 01       	movw	r26, r24
   12a38:	02 c0       	rjmp	.+4      	; 0x12a3e <memcpy+0xa>
   12a3a:	01 90       	ld	r0, Z+
   12a3c:	0d 92       	st	X+, r0
   12a3e:	41 50       	subi	r20, 0x01	; 1
   12a40:	50 40       	sbci	r21, 0x00	; 0
   12a42:	d8 f7       	brcc	.-10     	; 0x12a3a <memcpy+0x6>
   12a44:	08 95       	ret

00012a46 <strcat>:
strcat():
   12a46:	fb 01       	movw	r30, r22
   12a48:	dc 01       	movw	r26, r24
   12a4a:	0d 90       	ld	r0, X+
   12a4c:	00 20       	and	r0, r0
   12a4e:	e9 f7       	brne	.-6      	; 0x12a4a <strcat+0x4>
   12a50:	11 97       	sbiw	r26, 0x01	; 1
   12a52:	01 90       	ld	r0, Z+
   12a54:	0d 92       	st	X+, r0
   12a56:	00 20       	and	r0, r0
   12a58:	e1 f7       	brne	.-8      	; 0x12a52 <strcat+0xc>
   12a5a:	08 95       	ret

00012a5c <strcmp>:
strcmp():
   12a5c:	fb 01       	movw	r30, r22
   12a5e:	dc 01       	movw	r26, r24
   12a60:	8d 91       	ld	r24, X+
   12a62:	01 90       	ld	r0, Z+
   12a64:	80 19       	sub	r24, r0
   12a66:	01 10       	cpse	r0, r1
   12a68:	d9 f3       	breq	.-10     	; 0x12a60 <strcmp+0x4>
   12a6a:	99 0b       	sbc	r25, r25
   12a6c:	08 95       	ret

00012a6e <strcpy>:
strcpy():
   12a6e:	fb 01       	movw	r30, r22
   12a70:	dc 01       	movw	r26, r24
   12a72:	01 90       	ld	r0, Z+
   12a74:	0d 92       	st	X+, r0
   12a76:	00 20       	and	r0, r0
   12a78:	e1 f7       	brne	.-8      	; 0x12a72 <strcpy+0x4>
   12a7a:	08 95       	ret

00012a7c <strncpy>:
strncpy():
   12a7c:	fb 01       	movw	r30, r22
   12a7e:	dc 01       	movw	r26, r24
   12a80:	41 50       	subi	r20, 0x01	; 1
   12a82:	50 40       	sbci	r21, 0x00	; 0
   12a84:	48 f0       	brcs	.+18     	; 0x12a98 <strncpy+0x1c>
   12a86:	01 90       	ld	r0, Z+
   12a88:	0d 92       	st	X+, r0
   12a8a:	00 20       	and	r0, r0
   12a8c:	c9 f7       	brne	.-14     	; 0x12a80 <strncpy+0x4>
   12a8e:	01 c0       	rjmp	.+2      	; 0x12a92 <strncpy+0x16>
   12a90:	1d 92       	st	X+, r1
   12a92:	41 50       	subi	r20, 0x01	; 1
   12a94:	50 40       	sbci	r21, 0x00	; 0
   12a96:	e0 f7       	brcc	.-8      	; 0x12a90 <strncpy+0x14>
   12a98:	08 95       	ret

00012a9a <__itoa_ncheck>:
__itoa_ncheck():
   12a9a:	bb 27       	eor	r27, r27
   12a9c:	4a 30       	cpi	r20, 0x0A	; 10
   12a9e:	31 f4       	brne	.+12     	; 0x12aac <__itoa_ncheck+0x12>
   12aa0:	99 23       	and	r25, r25
   12aa2:	22 f4       	brpl	.+8      	; 0x12aac <__itoa_ncheck+0x12>
   12aa4:	bd e2       	ldi	r27, 0x2D	; 45
   12aa6:	90 95       	com	r25
   12aa8:	81 95       	neg	r24
   12aaa:	9f 4f       	sbci	r25, 0xFF	; 255
   12aac:	0c 94 76 95 	jmp	0x12aec	; 0x12aec <__utoa_common>

00012ab0 <__mulsi_const_10>:
__mulsi_const_10():
   12ab0:	59 2f       	mov	r21, r25
   12ab2:	48 2f       	mov	r20, r24
   12ab4:	37 2f       	mov	r19, r23
   12ab6:	26 2f       	mov	r18, r22
   12ab8:	66 0f       	add	r22, r22
   12aba:	77 1f       	adc	r23, r23
   12abc:	88 1f       	adc	r24, r24
   12abe:	99 1f       	adc	r25, r25
   12ac0:	66 0f       	add	r22, r22
   12ac2:	77 1f       	adc	r23, r23
   12ac4:	88 1f       	adc	r24, r24
   12ac6:	99 1f       	adc	r25, r25
   12ac8:	62 0f       	add	r22, r18
   12aca:	73 1f       	adc	r23, r19
   12acc:	84 1f       	adc	r24, r20
   12ace:	95 1f       	adc	r25, r21
   12ad0:	66 0f       	add	r22, r22
   12ad2:	77 1f       	adc	r23, r23
   12ad4:	88 1f       	adc	r24, r24
   12ad6:	99 1f       	adc	r25, r25
   12ad8:	08 95       	ret

00012ada <__mulhi_const_10>:
__mulhi_const_10():
   12ada:	7a e0       	ldi	r23, 0x0A	; 10
   12adc:	97 9f       	mul	r25, r23
   12ade:	90 2d       	mov	r25, r0
   12ae0:	87 9f       	mul	r24, r23
   12ae2:	80 2d       	mov	r24, r0
   12ae4:	91 0d       	add	r25, r1
   12ae6:	11 24       	eor	r1, r1
   12ae8:	08 95       	ret

00012aea <__utoa_ncheck>:
__utoa_ncheck():
   12aea:	bb 27       	eor	r27, r27

00012aec <__utoa_common>:
   12aec:	fb 01       	movw	r30, r22
   12aee:	55 27       	eor	r21, r21
   12af0:	aa 27       	eor	r26, r26
   12af2:	88 0f       	add	r24, r24
   12af4:	99 1f       	adc	r25, r25
   12af6:	aa 1f       	adc	r26, r26
   12af8:	a4 17       	cp	r26, r20
   12afa:	10 f0       	brcs	.+4      	; 0x12b00 <__utoa_common+0x14>
   12afc:	a4 1b       	sub	r26, r20
   12afe:	83 95       	inc	r24
   12b00:	50 51       	subi	r21, 0x10	; 16
   12b02:	b9 f7       	brne	.-18     	; 0x12af2 <__utoa_common+0x6>
   12b04:	a0 5d       	subi	r26, 0xD0	; 208
   12b06:	aa 33       	cpi	r26, 0x3A	; 58
   12b08:	08 f0       	brcs	.+2      	; 0x12b0c <__utoa_common+0x20>
   12b0a:	a9 5d       	subi	r26, 0xD9	; 217
   12b0c:	a1 93       	st	Z+, r26
   12b0e:	00 97       	sbiw	r24, 0x00	; 0
   12b10:	79 f7       	brne	.-34     	; 0x12af0 <__utoa_common+0x4>
   12b12:	b1 11       	cpse	r27, r1
   12b14:	b1 93       	st	Z+, r27
   12b16:	11 92       	st	Z+, r1
   12b18:	cb 01       	movw	r24, r22
   12b1a:	0c 94 73 9c 	jmp	0x138e6	; 0x138e6 <strrev>

00012b1e <fdevopen>:
fdevopen():
   12b1e:	0f 93       	push	r16
   12b20:	1f 93       	push	r17
   12b22:	cf 93       	push	r28
   12b24:	df 93       	push	r29
   12b26:	00 97       	sbiw	r24, 0x00	; 0
   12b28:	59 f4       	brne	.+22     	; 0x12b40 <fdevopen+0x22>
   12b2a:	61 15       	cp	r22, r1
   12b2c:	71 05       	cpc	r23, r1
   12b2e:	41 f4       	brne	.+16     	; 0x12b40 <fdevopen+0x22>
   12b30:	f0 e0       	ldi	r31, 0x00	; 0
   12b32:	e0 e0       	ldi	r30, 0x00	; 0
   12b34:	cf 01       	movw	r24, r30
   12b36:	df 91       	pop	r29
   12b38:	cf 91       	pop	r28
   12b3a:	1f 91       	pop	r17
   12b3c:	0f 91       	pop	r16
   12b3e:	08 95       	ret
   12b40:	8b 01       	movw	r16, r22
   12b42:	ec 01       	movw	r28, r24
   12b44:	6e e0       	ldi	r22, 0x0E	; 14
   12b46:	70 e0       	ldi	r23, 0x00	; 0
   12b48:	81 e0       	ldi	r24, 0x01	; 1
   12b4a:	90 e0       	ldi	r25, 0x00	; 0
   12b4c:	0e 94 70 98 	call	0x130e0	; 0x130e0 <calloc>
   12b50:	fc 01       	movw	r30, r24
   12b52:	89 2b       	or	r24, r25
   12b54:	69 f3       	breq	.-38     	; 0x12b30 <fdevopen+0x12>
   12b56:	80 e8       	ldi	r24, 0x80	; 128
   12b58:	83 83       	std	Z+3, r24	; 0x03
   12b5a:	01 15       	cp	r16, r1
   12b5c:	11 05       	cpc	r17, r1
   12b5e:	71 f0       	breq	.+28     	; 0x12b7c <fdevopen+0x5e>
   12b60:	13 87       	std	Z+11, r17	; 0x0b
   12b62:	02 87       	std	Z+10, r16	; 0x0a
   12b64:	81 e8       	ldi	r24, 0x81	; 129
   12b66:	83 83       	std	Z+3, r24	; 0x03
   12b68:	80 91 2f 17 	lds	r24, 0x172F	; 0x80172f <__iob>
   12b6c:	90 91 30 17 	lds	r25, 0x1730	; 0x801730 <__iob+0x1>
   12b70:	89 2b       	or	r24, r25
   12b72:	21 f4       	brne	.+8      	; 0x12b7c <fdevopen+0x5e>
   12b74:	f0 93 30 17 	sts	0x1730, r31	; 0x801730 <__iob+0x1>
   12b78:	e0 93 2f 17 	sts	0x172F, r30	; 0x80172f <__iob>
   12b7c:	20 97       	sbiw	r28, 0x00	; 0
   12b7e:	d1 f2       	breq	.-76     	; 0x12b34 <fdevopen+0x16>
   12b80:	d1 87       	std	Z+9, r29	; 0x09
   12b82:	c0 87       	std	Z+8, r28	; 0x08
   12b84:	83 81       	ldd	r24, Z+3	; 0x03
   12b86:	82 60       	ori	r24, 0x02	; 2
   12b88:	83 83       	std	Z+3, r24	; 0x03
   12b8a:	80 91 31 17 	lds	r24, 0x1731	; 0x801731 <__iob+0x2>
   12b8e:	90 91 32 17 	lds	r25, 0x1732	; 0x801732 <__iob+0x3>
   12b92:	89 2b       	or	r24, r25
   12b94:	79 f6       	brne	.-98     	; 0x12b34 <fdevopen+0x16>
   12b96:	f0 93 32 17 	sts	0x1732, r31	; 0x801732 <__iob+0x3>
   12b9a:	e0 93 31 17 	sts	0x1731, r30	; 0x801731 <__iob+0x2>
   12b9e:	80 91 33 17 	lds	r24, 0x1733	; 0x801733 <__iob+0x4>
   12ba2:	90 91 34 17 	lds	r25, 0x1734	; 0x801734 <__iob+0x5>
   12ba6:	89 2b       	or	r24, r25
   12ba8:	29 f6       	brne	.-118    	; 0x12b34 <fdevopen+0x16>
   12baa:	f0 93 34 17 	sts	0x1734, r31	; 0x801734 <__iob+0x5>
   12bae:	e0 93 33 17 	sts	0x1733, r30	; 0x801733 <__iob+0x4>
   12bb2:	c0 cf       	rjmp	.-128    	; 0x12b34 <fdevopen+0x16>

00012bb4 <printf_P>:
printf_P():
   12bb4:	0f 93       	push	r16
   12bb6:	1f 93       	push	r17
   12bb8:	cf 93       	push	r28
   12bba:	df 93       	push	r29
   12bbc:	cd b7       	in	r28, 0x3d	; 61
   12bbe:	de b7       	in	r29, 0x3e	; 62
   12bc0:	ae 01       	movw	r20, r28
   12bc2:	48 5f       	subi	r20, 0xF8	; 248
   12bc4:	5f 4f       	sbci	r21, 0xFF	; 255
   12bc6:	da 01       	movw	r26, r20
   12bc8:	6d 91       	ld	r22, X+
   12bca:	7d 91       	ld	r23, X+
   12bcc:	ad 01       	movw	r20, r26
   12bce:	0f e2       	ldi	r16, 0x2F	; 47
   12bd0:	17 e1       	ldi	r17, 0x17	; 23
   12bd2:	f8 01       	movw	r30, r16
   12bd4:	82 81       	ldd	r24, Z+2	; 0x02
   12bd6:	93 81       	ldd	r25, Z+3	; 0x03
   12bd8:	dc 01       	movw	r26, r24
   12bda:	13 96       	adiw	r26, 0x03	; 3
   12bdc:	2c 91       	ld	r18, X
   12bde:	13 97       	sbiw	r26, 0x03	; 3
   12be0:	28 60       	ori	r18, 0x08	; 8
   12be2:	13 96       	adiw	r26, 0x03	; 3
   12be4:	2c 93       	st	X, r18
   12be6:	0e 94 6e 96 	call	0x12cdc	; 0x12cdc <vfprintf>
   12bea:	d8 01       	movw	r26, r16
   12bec:	12 96       	adiw	r26, 0x02	; 2
   12bee:	ed 91       	ld	r30, X+
   12bf0:	fc 91       	ld	r31, X
   12bf2:	23 81       	ldd	r18, Z+3	; 0x03
   12bf4:	27 7f       	andi	r18, 0xF7	; 247
   12bf6:	23 83       	std	Z+3, r18	; 0x03
   12bf8:	df 91       	pop	r29
   12bfa:	cf 91       	pop	r28
   12bfc:	1f 91       	pop	r17
   12bfe:	0f 91       	pop	r16
   12c00:	08 95       	ret

00012c02 <snprintf>:
snprintf():
   12c02:	0f 93       	push	r16
   12c04:	1f 93       	push	r17
   12c06:	cf 93       	push	r28
   12c08:	df 93       	push	r29
   12c0a:	cd b7       	in	r28, 0x3d	; 61
   12c0c:	de b7       	in	r29, 0x3e	; 62
   12c0e:	2e 97       	sbiw	r28, 0x0e	; 14
   12c10:	0f b6       	in	r0, 0x3f	; 63
   12c12:	f8 94       	cli
   12c14:	de bf       	out	0x3e, r29	; 62
   12c16:	0f be       	out	0x3f, r0	; 63
   12c18:	cd bf       	out	0x3d, r28	; 61
   12c1a:	0e 89       	ldd	r16, Y+22	; 0x16
   12c1c:	1f 89       	ldd	r17, Y+23	; 0x17
   12c1e:	88 8d       	ldd	r24, Y+24	; 0x18
   12c20:	99 8d       	ldd	r25, Y+25	; 0x19
   12c22:	26 e0       	ldi	r18, 0x06	; 6
   12c24:	2c 83       	std	Y+4, r18	; 0x04
   12c26:	1a 83       	std	Y+2, r17	; 0x02
   12c28:	09 83       	std	Y+1, r16	; 0x01
   12c2a:	97 ff       	sbrs	r25, 7
   12c2c:	02 c0       	rjmp	.+4      	; 0x12c32 <snprintf+0x30>
   12c2e:	80 e0       	ldi	r24, 0x00	; 0
   12c30:	90 e8       	ldi	r25, 0x80	; 128
   12c32:	01 97       	sbiw	r24, 0x01	; 1
   12c34:	9e 83       	std	Y+6, r25	; 0x06
   12c36:	8d 83       	std	Y+5, r24	; 0x05
   12c38:	ae 01       	movw	r20, r28
   12c3a:	44 5e       	subi	r20, 0xE4	; 228
   12c3c:	5f 4f       	sbci	r21, 0xFF	; 255
   12c3e:	6a 8d       	ldd	r22, Y+26	; 0x1a
   12c40:	7b 8d       	ldd	r23, Y+27	; 0x1b
   12c42:	ce 01       	movw	r24, r28
   12c44:	01 96       	adiw	r24, 0x01	; 1
   12c46:	0e 94 6e 96 	call	0x12cdc	; 0x12cdc <vfprintf>
   12c4a:	4d 81       	ldd	r20, Y+5	; 0x05
   12c4c:	5e 81       	ldd	r21, Y+6	; 0x06
   12c4e:	57 fd       	sbrc	r21, 7
   12c50:	0a c0       	rjmp	.+20     	; 0x12c66 <snprintf+0x64>
   12c52:	2f 81       	ldd	r18, Y+7	; 0x07
   12c54:	38 85       	ldd	r19, Y+8	; 0x08
   12c56:	42 17       	cp	r20, r18
   12c58:	53 07       	cpc	r21, r19
   12c5a:	0c f4       	brge	.+2      	; 0x12c5e <snprintf+0x5c>
   12c5c:	9a 01       	movw	r18, r20
   12c5e:	02 0f       	add	r16, r18
   12c60:	13 1f       	adc	r17, r19
   12c62:	f8 01       	movw	r30, r16
   12c64:	10 82       	st	Z, r1
   12c66:	2e 96       	adiw	r28, 0x0e	; 14
   12c68:	0f b6       	in	r0, 0x3f	; 63
   12c6a:	f8 94       	cli
   12c6c:	de bf       	out	0x3e, r29	; 62
   12c6e:	0f be       	out	0x3f, r0	; 63
   12c70:	cd bf       	out	0x3d, r28	; 61
   12c72:	df 91       	pop	r29
   12c74:	cf 91       	pop	r28
   12c76:	1f 91       	pop	r17
   12c78:	0f 91       	pop	r16
   12c7a:	08 95       	ret

00012c7c <sprintf>:
sprintf():
   12c7c:	0f 93       	push	r16
   12c7e:	1f 93       	push	r17
   12c80:	cf 93       	push	r28
   12c82:	df 93       	push	r29
   12c84:	cd b7       	in	r28, 0x3d	; 61
   12c86:	de b7       	in	r29, 0x3e	; 62
   12c88:	2e 97       	sbiw	r28, 0x0e	; 14
   12c8a:	0f b6       	in	r0, 0x3f	; 63
   12c8c:	f8 94       	cli
   12c8e:	de bf       	out	0x3e, r29	; 62
   12c90:	0f be       	out	0x3f, r0	; 63
   12c92:	cd bf       	out	0x3d, r28	; 61
   12c94:	0e 89       	ldd	r16, Y+22	; 0x16
   12c96:	1f 89       	ldd	r17, Y+23	; 0x17
   12c98:	86 e0       	ldi	r24, 0x06	; 6
   12c9a:	8c 83       	std	Y+4, r24	; 0x04
   12c9c:	1a 83       	std	Y+2, r17	; 0x02
   12c9e:	09 83       	std	Y+1, r16	; 0x01
   12ca0:	8f ef       	ldi	r24, 0xFF	; 255
   12ca2:	9f e7       	ldi	r25, 0x7F	; 127
   12ca4:	9e 83       	std	Y+6, r25	; 0x06
   12ca6:	8d 83       	std	Y+5, r24	; 0x05
   12ca8:	ae 01       	movw	r20, r28
   12caa:	46 5e       	subi	r20, 0xE6	; 230
   12cac:	5f 4f       	sbci	r21, 0xFF	; 255
   12cae:	68 8d       	ldd	r22, Y+24	; 0x18
   12cb0:	79 8d       	ldd	r23, Y+25	; 0x19
   12cb2:	ce 01       	movw	r24, r28
   12cb4:	01 96       	adiw	r24, 0x01	; 1
   12cb6:	0e 94 6e 96 	call	0x12cdc	; 0x12cdc <vfprintf>
   12cba:	2f 81       	ldd	r18, Y+7	; 0x07
   12cbc:	38 85       	ldd	r19, Y+8	; 0x08
   12cbe:	02 0f       	add	r16, r18
   12cc0:	13 1f       	adc	r17, r19
   12cc2:	f8 01       	movw	r30, r16
   12cc4:	10 82       	st	Z, r1
   12cc6:	2e 96       	adiw	r28, 0x0e	; 14
   12cc8:	0f b6       	in	r0, 0x3f	; 63
   12cca:	f8 94       	cli
   12ccc:	de bf       	out	0x3e, r29	; 62
   12cce:	0f be       	out	0x3f, r0	; 63
   12cd0:	cd bf       	out	0x3d, r28	; 61
   12cd2:	df 91       	pop	r29
   12cd4:	cf 91       	pop	r28
   12cd6:	1f 91       	pop	r17
   12cd8:	0f 91       	pop	r16
   12cda:	08 95       	ret

00012cdc <vfprintf>:
vfprintf():
   12cdc:	2f 92       	push	r2
   12cde:	3f 92       	push	r3
   12ce0:	4f 92       	push	r4
   12ce2:	5f 92       	push	r5
   12ce4:	6f 92       	push	r6
   12ce6:	7f 92       	push	r7
   12ce8:	8f 92       	push	r8
   12cea:	9f 92       	push	r9
   12cec:	af 92       	push	r10
   12cee:	bf 92       	push	r11
   12cf0:	cf 92       	push	r12
   12cf2:	df 92       	push	r13
   12cf4:	ef 92       	push	r14
   12cf6:	ff 92       	push	r15
   12cf8:	0f 93       	push	r16
   12cfa:	1f 93       	push	r17
   12cfc:	cf 93       	push	r28
   12cfe:	df 93       	push	r29
   12d00:	00 d0       	rcall	.+0      	; 0x12d02 <vfprintf+0x26>
   12d02:	00 d0       	rcall	.+0      	; 0x12d04 <vfprintf+0x28>
   12d04:	00 d0       	rcall	.+0      	; 0x12d06 <vfprintf+0x2a>
   12d06:	1f 92       	push	r1
   12d08:	1f 92       	push	r1
   12d0a:	cd b7       	in	r28, 0x3d	; 61
   12d0c:	de b7       	in	r29, 0x3e	; 62
   12d0e:	7c 01       	movw	r14, r24
   12d10:	3b 01       	movw	r6, r22
   12d12:	8a 01       	movw	r16, r20
   12d14:	fc 01       	movw	r30, r24
   12d16:	17 82       	std	Z+7, r1	; 0x07
   12d18:	16 82       	std	Z+6, r1	; 0x06
   12d1a:	83 81       	ldd	r24, Z+3	; 0x03
   12d1c:	81 ff       	sbrs	r24, 1
   12d1e:	dd c1       	rjmp	.+954    	; 0x130da <vfprintf+0x3fe>
   12d20:	ce 01       	movw	r24, r28
   12d22:	01 96       	adiw	r24, 0x01	; 1
   12d24:	5c 01       	movw	r10, r24
   12d26:	f7 01       	movw	r30, r14
   12d28:	93 81       	ldd	r25, Z+3	; 0x03
   12d2a:	f3 01       	movw	r30, r6
   12d2c:	93 fd       	sbrc	r25, 3
   12d2e:	85 91       	lpm	r24, Z+
   12d30:	93 ff       	sbrs	r25, 3
   12d32:	81 91       	ld	r24, Z+
   12d34:	3f 01       	movw	r6, r30
   12d36:	88 23       	and	r24, r24
   12d38:	09 f4       	brne	.+2      	; 0x12d3c <vfprintf+0x60>
   12d3a:	53 c1       	rjmp	.+678    	; 0x12fe2 <vfprintf+0x306>
   12d3c:	85 32       	cpi	r24, 0x25	; 37
   12d3e:	39 f4       	brne	.+14     	; 0x12d4e <vfprintf+0x72>
   12d40:	93 fd       	sbrc	r25, 3
   12d42:	85 91       	lpm	r24, Z+
   12d44:	93 ff       	sbrs	r25, 3
   12d46:	81 91       	ld	r24, Z+
   12d48:	3f 01       	movw	r6, r30
   12d4a:	85 32       	cpi	r24, 0x25	; 37
   12d4c:	29 f4       	brne	.+10     	; 0x12d58 <vfprintf+0x7c>
   12d4e:	b7 01       	movw	r22, r14
   12d50:	90 e0       	ldi	r25, 0x00	; 0
   12d52:	0e 94 83 9c 	call	0x13906	; 0x13906 <fputc>
   12d56:	e7 cf       	rjmp	.-50     	; 0x12d26 <vfprintf+0x4a>
   12d58:	91 2c       	mov	r9, r1
   12d5a:	21 2c       	mov	r2, r1
   12d5c:	31 2c       	mov	r3, r1
   12d5e:	ff e1       	ldi	r31, 0x1F	; 31
   12d60:	f3 15       	cp	r31, r3
   12d62:	38 f0       	brcs	.+14     	; 0x12d72 <vfprintf+0x96>
   12d64:	8b 32       	cpi	r24, 0x2B	; 43
   12d66:	11 f1       	breq	.+68     	; 0x12dac <vfprintf+0xd0>
   12d68:	90 f4       	brcc	.+36     	; 0x12d8e <vfprintf+0xb2>
   12d6a:	80 32       	cpi	r24, 0x20	; 32
   12d6c:	09 f1       	breq	.+66     	; 0x12db0 <vfprintf+0xd4>
   12d6e:	83 32       	cpi	r24, 0x23	; 35
   12d70:	29 f1       	breq	.+74     	; 0x12dbc <vfprintf+0xe0>
   12d72:	37 fc       	sbrc	r3, 7
   12d74:	3c c0       	rjmp	.+120    	; 0x12dee <vfprintf+0x112>
   12d76:	20 ed       	ldi	r18, 0xD0	; 208
   12d78:	28 0f       	add	r18, r24
   12d7a:	2a 30       	cpi	r18, 0x0A	; 10
   12d7c:	50 f5       	brcc	.+84     	; 0x12dd2 <vfprintf+0xf6>
   12d7e:	36 fe       	sbrs	r3, 6
   12d80:	20 c0       	rjmp	.+64     	; 0x12dc2 <vfprintf+0xe6>
   12d82:	8a e0       	ldi	r24, 0x0A	; 10
   12d84:	98 9e       	mul	r9, r24
   12d86:	20 0d       	add	r18, r0
   12d88:	11 24       	eor	r1, r1
   12d8a:	92 2e       	mov	r9, r18
   12d8c:	06 c0       	rjmp	.+12     	; 0x12d9a <vfprintf+0xbe>
   12d8e:	8d 32       	cpi	r24, 0x2D	; 45
   12d90:	91 f0       	breq	.+36     	; 0x12db6 <vfprintf+0xda>
   12d92:	80 33       	cpi	r24, 0x30	; 48
   12d94:	71 f7       	brne	.-36     	; 0x12d72 <vfprintf+0x96>
   12d96:	68 94       	set
   12d98:	30 f8       	bld	r3, 0
   12d9a:	f3 01       	movw	r30, r6
   12d9c:	93 fd       	sbrc	r25, 3
   12d9e:	85 91       	lpm	r24, Z+
   12da0:	93 ff       	sbrs	r25, 3
   12da2:	81 91       	ld	r24, Z+
   12da4:	3f 01       	movw	r6, r30
   12da6:	81 11       	cpse	r24, r1
   12da8:	da cf       	rjmp	.-76     	; 0x12d5e <vfprintf+0x82>
   12daa:	21 c0       	rjmp	.+66     	; 0x12dee <vfprintf+0x112>
   12dac:	68 94       	set
   12dae:	31 f8       	bld	r3, 1
   12db0:	68 94       	set
   12db2:	32 f8       	bld	r3, 2
   12db4:	f2 cf       	rjmp	.-28     	; 0x12d9a <vfprintf+0xbe>
   12db6:	68 94       	set
   12db8:	33 f8       	bld	r3, 3
   12dba:	ef cf       	rjmp	.-34     	; 0x12d9a <vfprintf+0xbe>
   12dbc:	68 94       	set
   12dbe:	34 f8       	bld	r3, 4
   12dc0:	ec cf       	rjmp	.-40     	; 0x12d9a <vfprintf+0xbe>
   12dc2:	ea e0       	ldi	r30, 0x0A	; 10
   12dc4:	2e 9e       	mul	r2, r30
   12dc6:	20 0d       	add	r18, r0
   12dc8:	11 24       	eor	r1, r1
   12dca:	22 2e       	mov	r2, r18
   12dcc:	68 94       	set
   12dce:	35 f8       	bld	r3, 5
   12dd0:	e4 cf       	rjmp	.-56     	; 0x12d9a <vfprintf+0xbe>
   12dd2:	8e 32       	cpi	r24, 0x2E	; 46
   12dd4:	29 f4       	brne	.+10     	; 0x12de0 <vfprintf+0x104>
   12dd6:	36 fc       	sbrc	r3, 6
   12dd8:	04 c1       	rjmp	.+520    	; 0x12fe2 <vfprintf+0x306>
   12dda:	68 94       	set
   12ddc:	36 f8       	bld	r3, 6
   12dde:	dd cf       	rjmp	.-70     	; 0x12d9a <vfprintf+0xbe>
   12de0:	8c 36       	cpi	r24, 0x6C	; 108
   12de2:	19 f4       	brne	.+6      	; 0x12dea <vfprintf+0x10e>
   12de4:	68 94       	set
   12de6:	37 f8       	bld	r3, 7
   12de8:	d8 cf       	rjmp	.-80     	; 0x12d9a <vfprintf+0xbe>
   12dea:	88 36       	cpi	r24, 0x68	; 104
   12dec:	b1 f2       	breq	.-84     	; 0x12d9a <vfprintf+0xbe>
   12dee:	98 2f       	mov	r25, r24
   12df0:	9f 7d       	andi	r25, 0xDF	; 223
   12df2:	95 54       	subi	r25, 0x45	; 69
   12df4:	93 30       	cpi	r25, 0x03	; 3
   12df6:	e0 f0       	brcs	.+56     	; 0x12e30 <vfprintf+0x154>
   12df8:	83 36       	cpi	r24, 0x63	; 99
   12dfa:	a1 f1       	breq	.+104    	; 0x12e64 <vfprintf+0x188>
   12dfc:	83 37       	cpi	r24, 0x73	; 115
   12dfe:	c1 f1       	breq	.+112    	; 0x12e70 <vfprintf+0x194>
   12e00:	83 35       	cpi	r24, 0x53	; 83
   12e02:	09 f0       	breq	.+2      	; 0x12e06 <vfprintf+0x12a>
   12e04:	63 c0       	rjmp	.+198    	; 0x12ecc <vfprintf+0x1f0>
   12e06:	28 01       	movw	r4, r16
   12e08:	f2 e0       	ldi	r31, 0x02	; 2
   12e0a:	4f 0e       	add	r4, r31
   12e0c:	51 1c       	adc	r5, r1
   12e0e:	f8 01       	movw	r30, r16
   12e10:	c0 80       	ld	r12, Z
   12e12:	d1 80       	ldd	r13, Z+1	; 0x01
   12e14:	69 2d       	mov	r22, r9
   12e16:	70 e0       	ldi	r23, 0x00	; 0
   12e18:	36 fc       	sbrc	r3, 6
   12e1a:	02 c0       	rjmp	.+4      	; 0x12e20 <vfprintf+0x144>
   12e1c:	6f ef       	ldi	r22, 0xFF	; 255
   12e1e:	7f ef       	ldi	r23, 0xFF	; 255
   12e20:	c6 01       	movw	r24, r12
   12e22:	0e 94 56 9c 	call	0x138ac	; 0x138ac <strnlen_P>
   12e26:	4c 01       	movw	r8, r24
   12e28:	68 94       	set
   12e2a:	37 f8       	bld	r3, 7
   12e2c:	82 01       	movw	r16, r4
   12e2e:	0a c0       	rjmp	.+20     	; 0x12e44 <vfprintf+0x168>
   12e30:	0c 5f       	subi	r16, 0xFC	; 252
   12e32:	1f 4f       	sbci	r17, 0xFF	; 255
   12e34:	ff e3       	ldi	r31, 0x3F	; 63
   12e36:	f9 83       	std	Y+1, r31	; 0x01
   12e38:	88 24       	eor	r8, r8
   12e3a:	83 94       	inc	r8
   12e3c:	91 2c       	mov	r9, r1
   12e3e:	65 01       	movw	r12, r10
   12e40:	e8 94       	clt
   12e42:	37 f8       	bld	r3, 7
   12e44:	33 fe       	sbrs	r3, 3
   12e46:	2d c0       	rjmp	.+90     	; 0x12ea2 <vfprintf+0x1c6>
   12e48:	52 2c       	mov	r5, r2
   12e4a:	81 14       	cp	r8, r1
   12e4c:	91 04       	cpc	r9, r1
   12e4e:	71 f5       	brne	.+92     	; 0x12eac <vfprintf+0x1d0>
   12e50:	55 20       	and	r5, r5
   12e52:	09 f4       	brne	.+2      	; 0x12e56 <vfprintf+0x17a>
   12e54:	68 cf       	rjmp	.-304    	; 0x12d26 <vfprintf+0x4a>
   12e56:	b7 01       	movw	r22, r14
   12e58:	80 e2       	ldi	r24, 0x20	; 32
   12e5a:	90 e0       	ldi	r25, 0x00	; 0
   12e5c:	0e 94 83 9c 	call	0x13906	; 0x13906 <fputc>
   12e60:	5a 94       	dec	r5
   12e62:	f6 cf       	rjmp	.-20     	; 0x12e50 <vfprintf+0x174>
   12e64:	f8 01       	movw	r30, r16
   12e66:	80 81       	ld	r24, Z
   12e68:	89 83       	std	Y+1, r24	; 0x01
   12e6a:	0e 5f       	subi	r16, 0xFE	; 254
   12e6c:	1f 4f       	sbci	r17, 0xFF	; 255
   12e6e:	e4 cf       	rjmp	.-56     	; 0x12e38 <vfprintf+0x15c>
   12e70:	28 01       	movw	r4, r16
   12e72:	f2 e0       	ldi	r31, 0x02	; 2
   12e74:	4f 0e       	add	r4, r31
   12e76:	51 1c       	adc	r5, r1
   12e78:	f8 01       	movw	r30, r16
   12e7a:	c0 80       	ld	r12, Z
   12e7c:	d1 80       	ldd	r13, Z+1	; 0x01
   12e7e:	69 2d       	mov	r22, r9
   12e80:	70 e0       	ldi	r23, 0x00	; 0
   12e82:	36 fc       	sbrc	r3, 6
   12e84:	02 c0       	rjmp	.+4      	; 0x12e8a <vfprintf+0x1ae>
   12e86:	6f ef       	ldi	r22, 0xFF	; 255
   12e88:	7f ef       	ldi	r23, 0xFF	; 255
   12e8a:	c6 01       	movw	r24, r12
   12e8c:	0e 94 68 9c 	call	0x138d0	; 0x138d0 <strnlen>
   12e90:	4c 01       	movw	r8, r24
   12e92:	82 01       	movw	r16, r4
   12e94:	d5 cf       	rjmp	.-86     	; 0x12e40 <vfprintf+0x164>
   12e96:	b7 01       	movw	r22, r14
   12e98:	80 e2       	ldi	r24, 0x20	; 32
   12e9a:	90 e0       	ldi	r25, 0x00	; 0
   12e9c:	0e 94 83 9c 	call	0x13906	; 0x13906 <fputc>
   12ea0:	2a 94       	dec	r2
   12ea2:	28 14       	cp	r2, r8
   12ea4:	19 04       	cpc	r1, r9
   12ea6:	09 f0       	breq	.+2      	; 0x12eaa <vfprintf+0x1ce>
   12ea8:	b0 f7       	brcc	.-20     	; 0x12e96 <vfprintf+0x1ba>
   12eaa:	ce cf       	rjmp	.-100    	; 0x12e48 <vfprintf+0x16c>
   12eac:	f6 01       	movw	r30, r12
   12eae:	37 fc       	sbrc	r3, 7
   12eb0:	85 91       	lpm	r24, Z+
   12eb2:	37 fe       	sbrs	r3, 7
   12eb4:	81 91       	ld	r24, Z+
   12eb6:	6f 01       	movw	r12, r30
   12eb8:	b7 01       	movw	r22, r14
   12eba:	90 e0       	ldi	r25, 0x00	; 0
   12ebc:	0e 94 83 9c 	call	0x13906	; 0x13906 <fputc>
   12ec0:	51 10       	cpse	r5, r1
   12ec2:	5a 94       	dec	r5
   12ec4:	f1 e0       	ldi	r31, 0x01	; 1
   12ec6:	8f 1a       	sub	r8, r31
   12ec8:	91 08       	sbc	r9, r1
   12eca:	bf cf       	rjmp	.-130    	; 0x12e4a <vfprintf+0x16e>
   12ecc:	84 36       	cpi	r24, 0x64	; 100
   12ece:	19 f0       	breq	.+6      	; 0x12ed6 <vfprintf+0x1fa>
   12ed0:	89 36       	cpi	r24, 0x69	; 105
   12ed2:	09 f0       	breq	.+2      	; 0x12ed6 <vfprintf+0x1fa>
   12ed4:	77 c0       	rjmp	.+238    	; 0x12fc4 <vfprintf+0x2e8>
   12ed6:	f8 01       	movw	r30, r16
   12ed8:	37 fe       	sbrs	r3, 7
   12eda:	6b c0       	rjmp	.+214    	; 0x12fb2 <vfprintf+0x2d6>
   12edc:	60 81       	ld	r22, Z
   12ede:	71 81       	ldd	r23, Z+1	; 0x01
   12ee0:	82 81       	ldd	r24, Z+2	; 0x02
   12ee2:	93 81       	ldd	r25, Z+3	; 0x03
   12ee4:	0c 5f       	subi	r16, 0xFC	; 252
   12ee6:	1f 4f       	sbci	r17, 0xFF	; 255
   12ee8:	f3 2d       	mov	r31, r3
   12eea:	ff 76       	andi	r31, 0x6F	; 111
   12eec:	3f 2e       	mov	r3, r31
   12eee:	97 ff       	sbrs	r25, 7
   12ef0:	09 c0       	rjmp	.+18     	; 0x12f04 <vfprintf+0x228>
   12ef2:	90 95       	com	r25
   12ef4:	80 95       	com	r24
   12ef6:	70 95       	com	r23
   12ef8:	61 95       	neg	r22
   12efa:	7f 4f       	sbci	r23, 0xFF	; 255
   12efc:	8f 4f       	sbci	r24, 0xFF	; 255
   12efe:	9f 4f       	sbci	r25, 0xFF	; 255
   12f00:	68 94       	set
   12f02:	37 f8       	bld	r3, 7
   12f04:	2a e0       	ldi	r18, 0x0A	; 10
   12f06:	30 e0       	ldi	r19, 0x00	; 0
   12f08:	a5 01       	movw	r20, r10
   12f0a:	0e 94 b3 9c 	call	0x13966	; 0x13966 <__ultoa_invert>
   12f0e:	c8 2e       	mov	r12, r24
   12f10:	ca 18       	sub	r12, r10
   12f12:	8c 2c       	mov	r8, r12
   12f14:	43 2c       	mov	r4, r3
   12f16:	36 fe       	sbrs	r3, 6
   12f18:	0c c0       	rjmp	.+24     	; 0x12f32 <vfprintf+0x256>
   12f1a:	e8 94       	clt
   12f1c:	40 f8       	bld	r4, 0
   12f1e:	c9 14       	cp	r12, r9
   12f20:	40 f4       	brcc	.+16     	; 0x12f32 <vfprintf+0x256>
   12f22:	34 fe       	sbrs	r3, 4
   12f24:	05 c0       	rjmp	.+10     	; 0x12f30 <vfprintf+0x254>
   12f26:	32 fc       	sbrc	r3, 2
   12f28:	03 c0       	rjmp	.+6      	; 0x12f30 <vfprintf+0x254>
   12f2a:	f3 2d       	mov	r31, r3
   12f2c:	fe 7e       	andi	r31, 0xEE	; 238
   12f2e:	4f 2e       	mov	r4, r31
   12f30:	89 2c       	mov	r8, r9
   12f32:	44 fe       	sbrs	r4, 4
   12f34:	aa c0       	rjmp	.+340    	; 0x1308a <vfprintf+0x3ae>
   12f36:	fe 01       	movw	r30, r28
   12f38:	ec 0d       	add	r30, r12
   12f3a:	f1 1d       	adc	r31, r1
   12f3c:	80 81       	ld	r24, Z
   12f3e:	80 33       	cpi	r24, 0x30	; 48
   12f40:	09 f0       	breq	.+2      	; 0x12f44 <vfprintf+0x268>
   12f42:	9c c0       	rjmp	.+312    	; 0x1307c <vfprintf+0x3a0>
   12f44:	24 2d       	mov	r18, r4
   12f46:	29 7e       	andi	r18, 0xE9	; 233
   12f48:	42 2e       	mov	r4, r18
   12f4a:	84 2d       	mov	r24, r4
   12f4c:	88 70       	andi	r24, 0x08	; 8
   12f4e:	58 2e       	mov	r5, r24
   12f50:	43 fc       	sbrc	r4, 3
   12f52:	aa c0       	rjmp	.+340    	; 0x130a8 <vfprintf+0x3cc>
   12f54:	40 fe       	sbrs	r4, 0
   12f56:	a4 c0       	rjmp	.+328    	; 0x130a0 <vfprintf+0x3c4>
   12f58:	9c 2c       	mov	r9, r12
   12f5a:	82 14       	cp	r8, r2
   12f5c:	18 f4       	brcc	.+6      	; 0x12f64 <vfprintf+0x288>
   12f5e:	2c 0c       	add	r2, r12
   12f60:	92 2c       	mov	r9, r2
   12f62:	98 18       	sub	r9, r8
   12f64:	44 fe       	sbrs	r4, 4
   12f66:	a6 c0       	rjmp	.+332    	; 0x130b4 <vfprintf+0x3d8>
   12f68:	b7 01       	movw	r22, r14
   12f6a:	80 e3       	ldi	r24, 0x30	; 48
   12f6c:	90 e0       	ldi	r25, 0x00	; 0
   12f6e:	0e 94 83 9c 	call	0x13906	; 0x13906 <fputc>
   12f72:	42 fe       	sbrs	r4, 2
   12f74:	09 c0       	rjmp	.+18     	; 0x12f88 <vfprintf+0x2ac>
   12f76:	88 e7       	ldi	r24, 0x78	; 120
   12f78:	90 e0       	ldi	r25, 0x00	; 0
   12f7a:	41 fe       	sbrs	r4, 1
   12f7c:	02 c0       	rjmp	.+4      	; 0x12f82 <vfprintf+0x2a6>
   12f7e:	88 e5       	ldi	r24, 0x58	; 88
   12f80:	90 e0       	ldi	r25, 0x00	; 0
   12f82:	b7 01       	movw	r22, r14
   12f84:	0e 94 83 9c 	call	0x13906	; 0x13906 <fputc>
   12f88:	c9 14       	cp	r12, r9
   12f8a:	08 f4       	brcc	.+2      	; 0x12f8e <vfprintf+0x2b2>
   12f8c:	9f c0       	rjmp	.+318    	; 0x130cc <vfprintf+0x3f0>
   12f8e:	ca 94       	dec	r12
   12f90:	d1 2c       	mov	r13, r1
   12f92:	9f ef       	ldi	r25, 0xFF	; 255
   12f94:	c9 1a       	sub	r12, r25
   12f96:	d9 0a       	sbc	r13, r25
   12f98:	ca 0c       	add	r12, r10
   12f9a:	db 1c       	adc	r13, r11
   12f9c:	f6 01       	movw	r30, r12
   12f9e:	82 91       	ld	r24, -Z
   12fa0:	6f 01       	movw	r12, r30
   12fa2:	b7 01       	movw	r22, r14
   12fa4:	90 e0       	ldi	r25, 0x00	; 0
   12fa6:	0e 94 83 9c 	call	0x13906	; 0x13906 <fputc>
   12faa:	ac 14       	cp	r10, r12
   12fac:	bd 04       	cpc	r11, r13
   12fae:	b1 f7       	brne	.-20     	; 0x12f9c <vfprintf+0x2c0>
   12fb0:	4f cf       	rjmp	.-354    	; 0x12e50 <vfprintf+0x174>
   12fb2:	60 81       	ld	r22, Z
   12fb4:	71 81       	ldd	r23, Z+1	; 0x01
   12fb6:	07 2e       	mov	r0, r23
   12fb8:	00 0c       	add	r0, r0
   12fba:	88 0b       	sbc	r24, r24
   12fbc:	99 0b       	sbc	r25, r25
   12fbe:	0e 5f       	subi	r16, 0xFE	; 254
   12fc0:	1f 4f       	sbci	r17, 0xFF	; 255
   12fc2:	92 cf       	rjmp	.-220    	; 0x12ee8 <vfprintf+0x20c>
   12fc4:	d3 2c       	mov	r13, r3
   12fc6:	e8 94       	clt
   12fc8:	d4 f8       	bld	r13, 4
   12fca:	2a e0       	ldi	r18, 0x0A	; 10
   12fcc:	30 e0       	ldi	r19, 0x00	; 0
   12fce:	85 37       	cpi	r24, 0x75	; 117
   12fd0:	e1 f1       	breq	.+120    	; 0x1304a <vfprintf+0x36e>
   12fd2:	23 2d       	mov	r18, r3
   12fd4:	29 7f       	andi	r18, 0xF9	; 249
   12fd6:	d2 2e       	mov	r13, r18
   12fd8:	8f 36       	cpi	r24, 0x6F	; 111
   12fda:	a9 f1       	breq	.+106    	; 0x13046 <vfprintf+0x36a>
   12fdc:	f0 f4       	brcc	.+60     	; 0x1301a <vfprintf+0x33e>
   12fde:	88 35       	cpi	r24, 0x58	; 88
   12fe0:	51 f1       	breq	.+84     	; 0x13036 <vfprintf+0x35a>
   12fe2:	f7 01       	movw	r30, r14
   12fe4:	86 81       	ldd	r24, Z+6	; 0x06
   12fe6:	97 81       	ldd	r25, Z+7	; 0x07
   12fe8:	2b 96       	adiw	r28, 0x0b	; 11
   12fea:	0f b6       	in	r0, 0x3f	; 63
   12fec:	f8 94       	cli
   12fee:	de bf       	out	0x3e, r29	; 62
   12ff0:	0f be       	out	0x3f, r0	; 63
   12ff2:	cd bf       	out	0x3d, r28	; 61
   12ff4:	df 91       	pop	r29
   12ff6:	cf 91       	pop	r28
   12ff8:	1f 91       	pop	r17
   12ffa:	0f 91       	pop	r16
   12ffc:	ff 90       	pop	r15
   12ffe:	ef 90       	pop	r14
   13000:	df 90       	pop	r13
   13002:	cf 90       	pop	r12
   13004:	bf 90       	pop	r11
   13006:	af 90       	pop	r10
   13008:	9f 90       	pop	r9
   1300a:	8f 90       	pop	r8
   1300c:	7f 90       	pop	r7
   1300e:	6f 90       	pop	r6
   13010:	5f 90       	pop	r5
   13012:	4f 90       	pop	r4
   13014:	3f 90       	pop	r3
   13016:	2f 90       	pop	r2
   13018:	08 95       	ret
   1301a:	80 37       	cpi	r24, 0x70	; 112
   1301c:	49 f0       	breq	.+18     	; 0x13030 <vfprintf+0x354>
   1301e:	88 37       	cpi	r24, 0x78	; 120
   13020:	01 f7       	brne	.-64     	; 0x12fe2 <vfprintf+0x306>
   13022:	d4 fe       	sbrs	r13, 4
   13024:	02 c0       	rjmp	.+4      	; 0x1302a <vfprintf+0x34e>
   13026:	68 94       	set
   13028:	d2 f8       	bld	r13, 2
   1302a:	20 e1       	ldi	r18, 0x10	; 16
   1302c:	30 e0       	ldi	r19, 0x00	; 0
   1302e:	0d c0       	rjmp	.+26     	; 0x1304a <vfprintf+0x36e>
   13030:	68 94       	set
   13032:	d4 f8       	bld	r13, 4
   13034:	f6 cf       	rjmp	.-20     	; 0x13022 <vfprintf+0x346>
   13036:	34 fe       	sbrs	r3, 4
   13038:	03 c0       	rjmp	.+6      	; 0x13040 <vfprintf+0x364>
   1303a:	82 2f       	mov	r24, r18
   1303c:	86 60       	ori	r24, 0x06	; 6
   1303e:	d8 2e       	mov	r13, r24
   13040:	20 e1       	ldi	r18, 0x10	; 16
   13042:	32 e0       	ldi	r19, 0x02	; 2
   13044:	02 c0       	rjmp	.+4      	; 0x1304a <vfprintf+0x36e>
   13046:	28 e0       	ldi	r18, 0x08	; 8
   13048:	30 e0       	ldi	r19, 0x00	; 0
   1304a:	f8 01       	movw	r30, r16
   1304c:	d7 fe       	sbrs	r13, 7
   1304e:	0f c0       	rjmp	.+30     	; 0x1306e <vfprintf+0x392>
   13050:	60 81       	ld	r22, Z
   13052:	71 81       	ldd	r23, Z+1	; 0x01
   13054:	82 81       	ldd	r24, Z+2	; 0x02
   13056:	93 81       	ldd	r25, Z+3	; 0x03
   13058:	0c 5f       	subi	r16, 0xFC	; 252
   1305a:	1f 4f       	sbci	r17, 0xFF	; 255
   1305c:	a5 01       	movw	r20, r10
   1305e:	0e 94 b3 9c 	call	0x13966	; 0x13966 <__ultoa_invert>
   13062:	c8 2e       	mov	r12, r24
   13064:	ca 18       	sub	r12, r10
   13066:	3d 2c       	mov	r3, r13
   13068:	e8 94       	clt
   1306a:	37 f8       	bld	r3, 7
   1306c:	52 cf       	rjmp	.-348    	; 0x12f12 <vfprintf+0x236>
   1306e:	60 81       	ld	r22, Z
   13070:	71 81       	ldd	r23, Z+1	; 0x01
   13072:	90 e0       	ldi	r25, 0x00	; 0
   13074:	80 e0       	ldi	r24, 0x00	; 0
   13076:	0e 5f       	subi	r16, 0xFE	; 254
   13078:	1f 4f       	sbci	r17, 0xFF	; 255
   1307a:	f0 cf       	rjmp	.-32     	; 0x1305c <vfprintf+0x380>
   1307c:	42 fc       	sbrc	r4, 2
   1307e:	02 c0       	rjmp	.+4      	; 0x13084 <vfprintf+0x3a8>
   13080:	83 94       	inc	r8
   13082:	63 cf       	rjmp	.-314    	; 0x12f4a <vfprintf+0x26e>
   13084:	83 94       	inc	r8
   13086:	83 94       	inc	r8
   13088:	60 cf       	rjmp	.-320    	; 0x12f4a <vfprintf+0x26e>
   1308a:	84 2d       	mov	r24, r4
   1308c:	86 78       	andi	r24, 0x86	; 134
   1308e:	09 f4       	brne	.+2      	; 0x13092 <vfprintf+0x3b6>
   13090:	5c cf       	rjmp	.-328    	; 0x12f4a <vfprintf+0x26e>
   13092:	f6 cf       	rjmp	.-20     	; 0x13080 <vfprintf+0x3a4>
   13094:	b7 01       	movw	r22, r14
   13096:	80 e2       	ldi	r24, 0x20	; 32
   13098:	90 e0       	ldi	r25, 0x00	; 0
   1309a:	0e 94 83 9c 	call	0x13906	; 0x13906 <fputc>
   1309e:	83 94       	inc	r8
   130a0:	82 14       	cp	r8, r2
   130a2:	c0 f3       	brcs	.-16     	; 0x13094 <vfprintf+0x3b8>
   130a4:	51 2c       	mov	r5, r1
   130a6:	5e cf       	rjmp	.-324    	; 0x12f64 <vfprintf+0x288>
   130a8:	52 2c       	mov	r5, r2
   130aa:	58 18       	sub	r5, r8
   130ac:	82 14       	cp	r8, r2
   130ae:	08 f4       	brcc	.+2      	; 0x130b2 <vfprintf+0x3d6>
   130b0:	59 cf       	rjmp	.-334    	; 0x12f64 <vfprintf+0x288>
   130b2:	f8 cf       	rjmp	.-16     	; 0x130a4 <vfprintf+0x3c8>
   130b4:	84 2d       	mov	r24, r4
   130b6:	86 78       	andi	r24, 0x86	; 134
   130b8:	09 f4       	brne	.+2      	; 0x130bc <vfprintf+0x3e0>
   130ba:	66 cf       	rjmp	.-308    	; 0x12f88 <vfprintf+0x2ac>
   130bc:	8b e2       	ldi	r24, 0x2B	; 43
   130be:	41 fe       	sbrs	r4, 1
   130c0:	80 e2       	ldi	r24, 0x20	; 32
   130c2:	47 fc       	sbrc	r4, 7
   130c4:	8d e2       	ldi	r24, 0x2D	; 45
   130c6:	b7 01       	movw	r22, r14
   130c8:	90 e0       	ldi	r25, 0x00	; 0
   130ca:	5c cf       	rjmp	.-328    	; 0x12f84 <vfprintf+0x2a8>
   130cc:	b7 01       	movw	r22, r14
   130ce:	80 e3       	ldi	r24, 0x30	; 48
   130d0:	90 e0       	ldi	r25, 0x00	; 0
   130d2:	0e 94 83 9c 	call	0x13906	; 0x13906 <fputc>
   130d6:	9a 94       	dec	r9
   130d8:	57 cf       	rjmp	.-338    	; 0x12f88 <vfprintf+0x2ac>
   130da:	8f ef       	ldi	r24, 0xFF	; 255
   130dc:	9f ef       	ldi	r25, 0xFF	; 255
   130de:	84 cf       	rjmp	.-248    	; 0x12fe8 <vfprintf+0x30c>

000130e0 <calloc>:
calloc():
   130e0:	0f 93       	push	r16
   130e2:	1f 93       	push	r17
   130e4:	cf 93       	push	r28
   130e6:	df 93       	push	r29
   130e8:	86 9f       	mul	r24, r22
   130ea:	80 01       	movw	r16, r0
   130ec:	87 9f       	mul	r24, r23
   130ee:	10 0d       	add	r17, r0
   130f0:	96 9f       	mul	r25, r22
   130f2:	10 0d       	add	r17, r0
   130f4:	11 24       	eor	r1, r1
   130f6:	c8 01       	movw	r24, r16
   130f8:	0e 94 74 92 	call	0x124e8	; 0x124e8 <malloc>
   130fc:	ec 01       	movw	r28, r24
   130fe:	00 97       	sbiw	r24, 0x00	; 0
   13100:	29 f0       	breq	.+10     	; 0x1310c <calloc+0x2c>
   13102:	a8 01       	movw	r20, r16
   13104:	70 e0       	ldi	r23, 0x00	; 0
   13106:	60 e0       	ldi	r22, 0x00	; 0
   13108:	0e 94 61 9c 	call	0x138c2	; 0x138c2 <memset>
   1310c:	ce 01       	movw	r24, r28
   1310e:	df 91       	pop	r29
   13110:	cf 91       	pop	r28
   13112:	1f 91       	pop	r17
   13114:	0f 91       	pop	r16
   13116:	08 95       	ret

00013118 <dtoa_prf>:
dtoa_prf():
   13118:	8f 92       	push	r8
   1311a:	9f 92       	push	r9
   1311c:	af 92       	push	r10
   1311e:	bf 92       	push	r11
   13120:	cf 92       	push	r12
   13122:	df 92       	push	r13
   13124:	ef 92       	push	r14
   13126:	ff 92       	push	r15
   13128:	0f 93       	push	r16
   1312a:	1f 93       	push	r17
   1312c:	cf 93       	push	r28
   1312e:	df 93       	push	r29
   13130:	00 d0       	rcall	.+0      	; 0x13132 <dtoa_prf+0x1a>
   13132:	00 d0       	rcall	.+0      	; 0x13134 <dtoa_prf+0x1c>
   13134:	00 d0       	rcall	.+0      	; 0x13136 <dtoa_prf+0x1e>
   13136:	cd b7       	in	r28, 0x3d	; 61
   13138:	de b7       	in	r29, 0x3e	; 62
   1313a:	6a 01       	movw	r12, r20
   1313c:	f2 2e       	mov	r15, r18
   1313e:	b0 2e       	mov	r11, r16
   13140:	10 2f       	mov	r17, r16
   13142:	fb e3       	ldi	r31, 0x3B	; 59
   13144:	af 2e       	mov	r10, r31
   13146:	a0 16       	cp	r10, r16
   13148:	08 f4       	brcc	.+2      	; 0x1314c <dtoa_prf+0x34>
   1314a:	1b e3       	ldi	r17, 0x3B	; 59
   1314c:	1f 5f       	subi	r17, 0xFF	; 255
   1314e:	01 2f       	mov	r16, r17
   13150:	27 e0       	ldi	r18, 0x07	; 7
   13152:	ae 01       	movw	r20, r28
   13154:	4f 5f       	subi	r20, 0xFF	; 255
   13156:	5f 4f       	sbci	r21, 0xFF	; 255
   13158:	0e 94 63 9b 	call	0x136c6	; 0x136c6 <__ftoa_engine>
   1315c:	bc 01       	movw	r22, r24
   1315e:	89 81       	ldd	r24, Y+1	; 0x01
   13160:	98 2f       	mov	r25, r24
   13162:	99 70       	andi	r25, 0x09	; 9
   13164:	91 30       	cpi	r25, 0x01	; 1
   13166:	09 f4       	brne	.+2      	; 0x1316a <dtoa_prf+0x52>
   13168:	4e c0       	rjmp	.+156    	; 0x13206 <dtoa_prf+0xee>
   1316a:	9b e2       	ldi	r25, 0x2B	; 43
   1316c:	e1 fc       	sbrc	r14, 1
   1316e:	04 c0       	rjmp	.+8      	; 0x13178 <dtoa_prf+0x60>
   13170:	9e 2d       	mov	r25, r14
   13172:	91 70       	andi	r25, 0x01	; 1
   13174:	e0 fc       	sbrc	r14, 0
   13176:	49 c0       	rjmp	.+146    	; 0x1320a <dtoa_prf+0xf2>
   13178:	5e 2d       	mov	r21, r14
   1317a:	50 71       	andi	r21, 0x10	; 16
   1317c:	e8 2f       	mov	r30, r24
   1317e:	e8 70       	andi	r30, 0x08	; 8
   13180:	83 ff       	sbrs	r24, 3
   13182:	55 c0       	rjmp	.+170    	; 0x1322e <dtoa_prf+0x116>
   13184:	84 e0       	ldi	r24, 0x04	; 4
   13186:	91 11       	cpse	r25, r1
   13188:	01 c0       	rjmp	.+2      	; 0x1318c <dtoa_prf+0x74>
   1318a:	83 e0       	ldi	r24, 0x03	; 3
   1318c:	ef 2d       	mov	r30, r15
   1318e:	e8 1b       	sub	r30, r24
   13190:	8f 15       	cp	r24, r15
   13192:	08 f0       	brcs	.+2      	; 0x13196 <dtoa_prf+0x7e>
   13194:	e0 e0       	ldi	r30, 0x00	; 0
   13196:	d6 01       	movw	r26, r12
   13198:	8e 2f       	mov	r24, r30
   1319a:	20 e2       	ldi	r18, 0x20	; 32
   1319c:	55 23       	and	r21, r21
   1319e:	c9 f1       	breq	.+114    	; 0x13212 <dtoa_prf+0xfa>
   131a0:	99 23       	and	r25, r25
   131a2:	29 f0       	breq	.+10     	; 0x131ae <dtoa_prf+0x96>
   131a4:	d6 01       	movw	r26, r12
   131a6:	9c 93       	st	X, r25
   131a8:	c6 01       	movw	r24, r12
   131aa:	01 96       	adiw	r24, 0x01	; 1
   131ac:	6c 01       	movw	r12, r24
   131ae:	96 01       	movw	r18, r12
   131b0:	2d 5f       	subi	r18, 0xFD	; 253
   131b2:	3f 4f       	sbci	r19, 0xFF	; 255
   131b4:	e2 fe       	sbrs	r14, 2
   131b6:	33 c0       	rjmp	.+102    	; 0x1321e <dtoa_prf+0x106>
   131b8:	8e e4       	ldi	r24, 0x4E	; 78
   131ba:	d6 01       	movw	r26, r12
   131bc:	8c 93       	st	X, r24
   131be:	91 e4       	ldi	r25, 0x41	; 65
   131c0:	11 96       	adiw	r26, 0x01	; 1
   131c2:	9c 93       	st	X, r25
   131c4:	11 97       	sbiw	r26, 0x01	; 1
   131c6:	12 96       	adiw	r26, 0x02	; 2
   131c8:	8c 93       	st	X, r24
   131ca:	d9 01       	movw	r26, r18
   131cc:	8e 2f       	mov	r24, r30
   131ce:	90 e2       	ldi	r25, 0x20	; 32
   131d0:	81 11       	cpse	r24, r1
   131d2:	2a c0       	rjmp	.+84     	; 0x13228 <dtoa_prf+0x110>
   131d4:	e2 0f       	add	r30, r18
   131d6:	f3 2f       	mov	r31, r19
   131d8:	f1 1d       	adc	r31, r1
   131da:	10 82       	st	Z, r1
   131dc:	8e ef       	ldi	r24, 0xFE	; 254
   131de:	9f ef       	ldi	r25, 0xFF	; 255
   131e0:	29 96       	adiw	r28, 0x09	; 9
   131e2:	0f b6       	in	r0, 0x3f	; 63
   131e4:	f8 94       	cli
   131e6:	de bf       	out	0x3e, r29	; 62
   131e8:	0f be       	out	0x3f, r0	; 63
   131ea:	cd bf       	out	0x3d, r28	; 61
   131ec:	df 91       	pop	r29
   131ee:	cf 91       	pop	r28
   131f0:	1f 91       	pop	r17
   131f2:	0f 91       	pop	r16
   131f4:	ff 90       	pop	r15
   131f6:	ef 90       	pop	r14
   131f8:	df 90       	pop	r13
   131fa:	cf 90       	pop	r12
   131fc:	bf 90       	pop	r11
   131fe:	af 90       	pop	r10
   13200:	9f 90       	pop	r9
   13202:	8f 90       	pop	r8
   13204:	08 95       	ret
   13206:	9d e2       	ldi	r25, 0x2D	; 45
   13208:	b7 cf       	rjmp	.-146    	; 0x13178 <dtoa_prf+0x60>
   1320a:	90 e2       	ldi	r25, 0x20	; 32
   1320c:	b5 cf       	rjmp	.-150    	; 0x13178 <dtoa_prf+0x60>
   1320e:	2d 93       	st	X+, r18
   13210:	81 50       	subi	r24, 0x01	; 1
   13212:	81 11       	cpse	r24, r1
   13214:	fc cf       	rjmp	.-8      	; 0x1320e <dtoa_prf+0xf6>
   13216:	ce 0e       	add	r12, r30
   13218:	d1 1c       	adc	r13, r1
   1321a:	e0 e0       	ldi	r30, 0x00	; 0
   1321c:	c1 cf       	rjmp	.-126    	; 0x131a0 <dtoa_prf+0x88>
   1321e:	8e e6       	ldi	r24, 0x6E	; 110
   13220:	d6 01       	movw	r26, r12
   13222:	8c 93       	st	X, r24
   13224:	91 e6       	ldi	r25, 0x61	; 97
   13226:	cc cf       	rjmp	.-104    	; 0x131c0 <dtoa_prf+0xa8>
   13228:	9d 93       	st	X+, r25
   1322a:	81 50       	subi	r24, 0x01	; 1
   1322c:	d1 cf       	rjmp	.-94     	; 0x131d0 <dtoa_prf+0xb8>
   1322e:	48 2f       	mov	r20, r24
   13230:	44 70       	andi	r20, 0x04	; 4
   13232:	82 ff       	sbrs	r24, 2
   13234:	3d c0       	rjmp	.+122    	; 0x132b0 <dtoa_prf+0x198>
   13236:	84 e0       	ldi	r24, 0x04	; 4
   13238:	91 11       	cpse	r25, r1
   1323a:	01 c0       	rjmp	.+2      	; 0x1323e <dtoa_prf+0x126>
   1323c:	83 e0       	ldi	r24, 0x03	; 3
   1323e:	8f 15       	cp	r24, r15
   13240:	10 f4       	brcc	.+4      	; 0x13246 <dtoa_prf+0x12e>
   13242:	ef 2d       	mov	r30, r15
   13244:	e8 1b       	sub	r30, r24
   13246:	d6 01       	movw	r26, r12
   13248:	8e 2f       	mov	r24, r30
   1324a:	20 e2       	ldi	r18, 0x20	; 32
   1324c:	55 23       	and	r21, r21
   1324e:	09 f1       	breq	.+66     	; 0x13292 <dtoa_prf+0x17a>
   13250:	99 23       	and	r25, r25
   13252:	29 f0       	breq	.+10     	; 0x1325e <dtoa_prf+0x146>
   13254:	d6 01       	movw	r26, r12
   13256:	9c 93       	st	X, r25
   13258:	c6 01       	movw	r24, r12
   1325a:	01 96       	adiw	r24, 0x01	; 1
   1325c:	6c 01       	movw	r12, r24
   1325e:	96 01       	movw	r18, r12
   13260:	2d 5f       	subi	r18, 0xFD	; 253
   13262:	3f 4f       	sbci	r19, 0xFF	; 255
   13264:	e2 fe       	sbrs	r14, 2
   13266:	1b c0       	rjmp	.+54     	; 0x1329e <dtoa_prf+0x186>
   13268:	89 e4       	ldi	r24, 0x49	; 73
   1326a:	d6 01       	movw	r26, r12
   1326c:	8c 93       	st	X, r24
   1326e:	8e e4       	ldi	r24, 0x4E	; 78
   13270:	11 96       	adiw	r26, 0x01	; 1
   13272:	8c 93       	st	X, r24
   13274:	11 97       	sbiw	r26, 0x01	; 1
   13276:	86 e4       	ldi	r24, 0x46	; 70
   13278:	12 96       	adiw	r26, 0x02	; 2
   1327a:	8c 93       	st	X, r24
   1327c:	d9 01       	movw	r26, r18
   1327e:	8e 2f       	mov	r24, r30
   13280:	90 e2       	ldi	r25, 0x20	; 32
   13282:	88 23       	and	r24, r24
   13284:	09 f4       	brne	.+2      	; 0x13288 <dtoa_prf+0x170>
   13286:	a6 cf       	rjmp	.-180    	; 0x131d4 <dtoa_prf+0xbc>
   13288:	9d 93       	st	X+, r25
   1328a:	81 50       	subi	r24, 0x01	; 1
   1328c:	fa cf       	rjmp	.-12     	; 0x13282 <dtoa_prf+0x16a>
   1328e:	2d 93       	st	X+, r18
   13290:	81 50       	subi	r24, 0x01	; 1
   13292:	81 11       	cpse	r24, r1
   13294:	fc cf       	rjmp	.-8      	; 0x1328e <dtoa_prf+0x176>
   13296:	ce 0e       	add	r12, r30
   13298:	d1 1c       	adc	r13, r1
   1329a:	e0 e0       	ldi	r30, 0x00	; 0
   1329c:	d9 cf       	rjmp	.-78     	; 0x13250 <dtoa_prf+0x138>
   1329e:	89 e6       	ldi	r24, 0x69	; 105
   132a0:	d6 01       	movw	r26, r12
   132a2:	8c 93       	st	X, r24
   132a4:	8e e6       	ldi	r24, 0x6E	; 110
   132a6:	11 96       	adiw	r26, 0x01	; 1
   132a8:	8c 93       	st	X, r24
   132aa:	11 97       	sbiw	r26, 0x01	; 1
   132ac:	86 e6       	ldi	r24, 0x66	; 102
   132ae:	e4 cf       	rjmp	.-56     	; 0x13278 <dtoa_prf+0x160>
   132b0:	9b 01       	movw	r18, r22
   132b2:	77 ff       	sbrs	r23, 7
   132b4:	02 c0       	rjmp	.+4      	; 0x132ba <dtoa_prf+0x1a2>
   132b6:	30 e0       	ldi	r19, 0x00	; 0
   132b8:	20 e0       	ldi	r18, 0x00	; 0
   132ba:	a1 e0       	ldi	r26, 0x01	; 1
   132bc:	b0 e0       	ldi	r27, 0x00	; 0
   132be:	91 11       	cpse	r25, r1
   132c0:	02 c0       	rjmp	.+4      	; 0x132c6 <dtoa_prf+0x1ae>
   132c2:	b0 e0       	ldi	r27, 0x00	; 0
   132c4:	a0 e0       	ldi	r26, 0x00	; 0
   132c6:	f9 01       	movw	r30, r18
   132c8:	31 96       	adiw	r30, 0x01	; 1
   132ca:	ae 0f       	add	r26, r30
   132cc:	bf 1f       	adc	r27, r31
   132ce:	8b 2c       	mov	r8, r11
   132d0:	91 2c       	mov	r9, r1
   132d2:	bb 20       	and	r11, r11
   132d4:	09 f4       	brne	.+2      	; 0x132d8 <dtoa_prf+0x1c0>
   132d6:	61 c0       	rjmp	.+194    	; 0x1339a <dtoa_prf+0x282>
   132d8:	54 01       	movw	r10, r8
   132da:	ef ef       	ldi	r30, 0xFF	; 255
   132dc:	ae 1a       	sub	r10, r30
   132de:	be 0a       	sbc	r11, r30
   132e0:	aa 0d       	add	r26, r10
   132e2:	bb 1d       	adc	r27, r11
   132e4:	fa 16       	cp	r15, r26
   132e6:	1b 06       	cpc	r1, r27
   132e8:	19 f0       	breq	.+6      	; 0x132f0 <dtoa_prf+0x1d8>
   132ea:	14 f0       	brlt	.+4      	; 0x132f0 <dtoa_prf+0x1d8>
   132ec:	4f 2d       	mov	r20, r15
   132ee:	4a 1b       	sub	r20, r26
   132f0:	51 11       	cpse	r21, r1
   132f2:	88 c0       	rjmp	.+272    	; 0x13404 <dtoa_prf+0x2ec>
   132f4:	e3 fc       	sbrc	r14, 3
   132f6:	59 c0       	rjmp	.+178    	; 0x133aa <dtoa_prf+0x292>
   132f8:	76 01       	movw	r14, r12
   132fa:	a4 2f       	mov	r26, r20
   132fc:	b0 e2       	ldi	r27, 0x20	; 32
   132fe:	a1 11       	cpse	r26, r1
   13300:	4f c0       	rjmp	.+158    	; 0x133a0 <dtoa_prf+0x288>
   13302:	c4 0e       	add	r12, r20
   13304:	d1 1c       	adc	r13, r1
   13306:	99 23       	and	r25, r25
   13308:	09 f4       	brne	.+2      	; 0x1330c <dtoa_prf+0x1f4>
   1330a:	5b c0       	rjmp	.+182    	; 0x133c2 <dtoa_prf+0x2aa>
   1330c:	40 e0       	ldi	r20, 0x00	; 0
   1330e:	d6 01       	movw	r26, r12
   13310:	11 96       	adiw	r26, 0x01	; 1
   13312:	f6 01       	movw	r30, r12
   13314:	90 83       	st	Z, r25
   13316:	6d 01       	movw	r12, r26
   13318:	55 23       	and	r21, r21
   1331a:	09 f4       	brne	.+2      	; 0x1331e <dtoa_prf+0x206>
   1331c:	48 c0       	rjmp	.+144    	; 0x133ae <dtoa_prf+0x296>
   1331e:	01 2f       	mov	r16, r17
   13320:	06 0f       	add	r16, r22
   13322:	9a 81       	ldd	r25, Y+2	; 0x02
   13324:	58 2f       	mov	r21, r24
   13326:	50 71       	andi	r21, 0x10	; 16
   13328:	84 ff       	sbrs	r24, 4
   1332a:	03 c0       	rjmp	.+6      	; 0x13332 <dtoa_prf+0x21a>
   1332c:	91 33       	cpi	r25, 0x31	; 49
   1332e:	09 f4       	brne	.+2      	; 0x13332 <dtoa_prf+0x21a>
   13330:	01 50       	subi	r16, 0x01	; 1
   13332:	10 16       	cp	r1, r16
   13334:	0c f0       	brlt	.+2      	; 0x13338 <dtoa_prf+0x220>
   13336:	47 c0       	rjmp	.+142    	; 0x133c6 <dtoa_prf+0x2ae>
   13338:	09 30       	cpi	r16, 0x09	; 9
   1333a:	08 f0       	brcs	.+2      	; 0x1333e <dtoa_prf+0x226>
   1333c:	08 e0       	ldi	r16, 0x08	; 8
   1333e:	ee e2       	ldi	r30, 0x2E	; 46
   13340:	fe 2e       	mov	r15, r30
   13342:	5b 01       	movw	r10, r22
   13344:	a0 1a       	sub	r10, r16
   13346:	b1 08       	sbc	r11, r1
   13348:	85 01       	movw	r16, r10
   1334a:	91 94       	neg	r9
   1334c:	81 94       	neg	r8
   1334e:	91 08       	sbc	r9, r1
   13350:	2f 3f       	cpi	r18, 0xFF	; 255
   13352:	32 07       	cpc	r19, r18
   13354:	29 f4       	brne	.+10     	; 0x13360 <dtoa_prf+0x248>
   13356:	d6 01       	movw	r26, r12
   13358:	fc 92       	st	X, r15
   1335a:	f6 01       	movw	r30, r12
   1335c:	31 96       	adiw	r30, 0x01	; 1
   1335e:	6f 01       	movw	r12, r30
   13360:	62 17       	cp	r22, r18
   13362:	73 07       	cpc	r23, r19
   13364:	94 f1       	brlt	.+100    	; 0x133ca <dtoa_prf+0x2b2>
   13366:	02 17       	cp	r16, r18
   13368:	13 07       	cpc	r17, r19
   1336a:	7c f5       	brge	.+94     	; 0x133ca <dtoa_prf+0x2b2>
   1336c:	db 01       	movw	r26, r22
   1336e:	a2 1b       	sub	r26, r18
   13370:	b3 0b       	sbc	r27, r19
   13372:	aa 24       	eor	r10, r10
   13374:	a3 94       	inc	r10
   13376:	b1 2c       	mov	r11, r1
   13378:	ac 0e       	add	r10, r28
   1337a:	bd 1e       	adc	r11, r29
   1337c:	aa 0d       	add	r26, r10
   1337e:	bb 1d       	adc	r27, r11
   13380:	11 96       	adiw	r26, 0x01	; 1
   13382:	8c 91       	ld	r24, X
   13384:	21 50       	subi	r18, 0x01	; 1
   13386:	31 09       	sbc	r19, r1
   13388:	d6 01       	movw	r26, r12
   1338a:	11 96       	adiw	r26, 0x01	; 1
   1338c:	28 15       	cp	r18, r8
   1338e:	39 05       	cpc	r19, r9
   13390:	f4 f0       	brlt	.+60     	; 0x133ce <dtoa_prf+0x2b6>
   13392:	f6 01       	movw	r30, r12
   13394:	80 83       	st	Z, r24
   13396:	6d 01       	movw	r12, r26
   13398:	db cf       	rjmp	.-74     	; 0x13350 <dtoa_prf+0x238>
   1339a:	b1 2c       	mov	r11, r1
   1339c:	a1 2c       	mov	r10, r1
   1339e:	a0 cf       	rjmp	.-192    	; 0x132e0 <dtoa_prf+0x1c8>
   133a0:	f7 01       	movw	r30, r14
   133a2:	b1 93       	st	Z+, r27
   133a4:	7f 01       	movw	r14, r30
   133a6:	a1 50       	subi	r26, 0x01	; 1
   133a8:	aa cf       	rjmp	.-172    	; 0x132fe <dtoa_prf+0x1e6>
   133aa:	91 11       	cpse	r25, r1
   133ac:	b0 cf       	rjmp	.-160    	; 0x1330e <dtoa_prf+0x1f6>
   133ae:	d6 01       	movw	r26, r12
   133b0:	94 2f       	mov	r25, r20
   133b2:	50 e3       	ldi	r21, 0x30	; 48
   133b4:	02 c0       	rjmp	.+4      	; 0x133ba <dtoa_prf+0x2a2>
   133b6:	5d 93       	st	X+, r21
   133b8:	91 50       	subi	r25, 0x01	; 1
   133ba:	91 11       	cpse	r25, r1
   133bc:	fc cf       	rjmp	.-8      	; 0x133b6 <dtoa_prf+0x29e>
   133be:	c4 0e       	add	r12, r20
   133c0:	d1 1c       	adc	r13, r1
   133c2:	40 e0       	ldi	r20, 0x00	; 0
   133c4:	ac cf       	rjmp	.-168    	; 0x1331e <dtoa_prf+0x206>
   133c6:	01 e0       	ldi	r16, 0x01	; 1
   133c8:	ba cf       	rjmp	.-140    	; 0x1333e <dtoa_prf+0x226>
   133ca:	80 e3       	ldi	r24, 0x30	; 48
   133cc:	db cf       	rjmp	.-74     	; 0x13384 <dtoa_prf+0x26c>
   133ce:	62 17       	cp	r22, r18
   133d0:	73 07       	cpc	r23, r19
   133d2:	31 f4       	brne	.+12     	; 0x133e0 <dtoa_prf+0x2c8>
   133d4:	96 33       	cpi	r25, 0x36	; 54
   133d6:	88 f4       	brcc	.+34     	; 0x133fa <dtoa_prf+0x2e2>
   133d8:	95 33       	cpi	r25, 0x35	; 53
   133da:	11 f4       	brne	.+4      	; 0x133e0 <dtoa_prf+0x2c8>
   133dc:	55 23       	and	r21, r21
   133de:	69 f0       	breq	.+26     	; 0x133fa <dtoa_prf+0x2e2>
   133e0:	f6 01       	movw	r30, r12
   133e2:	80 83       	st	Z, r24
   133e4:	fd 01       	movw	r30, r26
   133e6:	84 2f       	mov	r24, r20
   133e8:	90 e2       	ldi	r25, 0x20	; 32
   133ea:	81 11       	cpse	r24, r1
   133ec:	08 c0       	rjmp	.+16     	; 0x133fe <dtoa_prf+0x2e6>
   133ee:	a4 0f       	add	r26, r20
   133f0:	b1 1d       	adc	r27, r1
   133f2:	1c 92       	st	X, r1
   133f4:	90 e0       	ldi	r25, 0x00	; 0
   133f6:	80 e0       	ldi	r24, 0x00	; 0
   133f8:	f3 ce       	rjmp	.-538    	; 0x131e0 <dtoa_prf+0xc8>
   133fa:	81 e3       	ldi	r24, 0x31	; 49
   133fc:	f1 cf       	rjmp	.-30     	; 0x133e0 <dtoa_prf+0x2c8>
   133fe:	91 93       	st	Z+, r25
   13400:	81 50       	subi	r24, 0x01	; 1
   13402:	f3 cf       	rjmp	.-26     	; 0x133ea <dtoa_prf+0x2d2>
   13404:	91 11       	cpse	r25, r1
   13406:	83 cf       	rjmp	.-250    	; 0x1330e <dtoa_prf+0x1f6>
   13408:	8a cf       	rjmp	.-236    	; 0x1331e <dtoa_prf+0x206>

0001340a <strtod>:
strtod():
   1340a:	8f 92       	push	r8
   1340c:	9f 92       	push	r9
   1340e:	af 92       	push	r10
   13410:	bf 92       	push	r11
   13412:	cf 92       	push	r12
   13414:	df 92       	push	r13
   13416:	ef 92       	push	r14
   13418:	ff 92       	push	r15
   1341a:	0f 93       	push	r16
   1341c:	1f 93       	push	r17
   1341e:	cf 93       	push	r28
   13420:	df 93       	push	r29
   13422:	5c 01       	movw	r10, r24
   13424:	7b 01       	movw	r14, r22
   13426:	61 15       	cp	r22, r1
   13428:	71 05       	cpc	r23, r1
   1342a:	19 f0       	breq	.+6      	; 0x13432 <strtod+0x28>
   1342c:	db 01       	movw	r26, r22
   1342e:	8d 93       	st	X+, r24
   13430:	9c 93       	st	X, r25
   13432:	85 01       	movw	r16, r10
   13434:	0f 5f       	subi	r16, 0xFF	; 255
   13436:	1f 4f       	sbci	r17, 0xFF	; 255
   13438:	f5 01       	movw	r30, r10
   1343a:	d0 81       	ld	r29, Z
   1343c:	8d 2f       	mov	r24, r29
   1343e:	90 e0       	ldi	r25, 0x00	; 0
   13440:	0e 94 c8 94 	call	0x12990	; 0x12990 <isspace>
   13444:	6c 01       	movw	r12, r24
   13446:	89 2b       	or	r24, r25
   13448:	b9 f5       	brne	.+110    	; 0x134b8 <strtod+0xae>
   1344a:	dd 32       	cpi	r29, 0x2D	; 45
   1344c:	b9 f5       	brne	.+110    	; 0x134bc <strtod+0xb2>
   1344e:	0f 5f       	subi	r16, 0xFF	; 255
   13450:	1f 4f       	sbci	r17, 0xFF	; 255
   13452:	d5 01       	movw	r26, r10
   13454:	11 96       	adiw	r26, 0x01	; 1
   13456:	dc 91       	ld	r29, X
   13458:	c1 e0       	ldi	r28, 0x01	; 1
   1345a:	58 01       	movw	r10, r16
   1345c:	f1 e0       	ldi	r31, 0x01	; 1
   1345e:	af 1a       	sub	r10, r31
   13460:	b1 08       	sbc	r11, r1
   13462:	43 e0       	ldi	r20, 0x03	; 3
   13464:	50 e0       	ldi	r21, 0x00	; 0
   13466:	6c e3       	ldi	r22, 0x3C	; 60
   13468:	74 e0       	ldi	r23, 0x04	; 4
   1346a:	c5 01       	movw	r24, r10
   1346c:	0e 94 3e 9c 	call	0x1387c	; 0x1387c <strncasecmp_P>
   13470:	89 2b       	or	r24, r25
   13472:	69 f5       	brne	.+90     	; 0x134ce <strtod+0xc4>
   13474:	68 01       	movw	r12, r16
   13476:	82 e0       	ldi	r24, 0x02	; 2
   13478:	c8 0e       	add	r12, r24
   1347a:	d1 1c       	adc	r13, r1
   1347c:	45 e0       	ldi	r20, 0x05	; 5
   1347e:	50 e0       	ldi	r21, 0x00	; 0
   13480:	67 e3       	ldi	r22, 0x37	; 55
   13482:	74 e0       	ldi	r23, 0x04	; 4
   13484:	c6 01       	movw	r24, r12
   13486:	0e 94 3e 9c 	call	0x1387c	; 0x1387c <strncasecmp_P>
   1348a:	89 2b       	or	r24, r25
   1348c:	21 f4       	brne	.+8      	; 0x13496 <strtod+0x8c>
   1348e:	68 01       	movw	r12, r16
   13490:	97 e0       	ldi	r25, 0x07	; 7
   13492:	c9 0e       	add	r12, r25
   13494:	d1 1c       	adc	r13, r1
   13496:	e1 14       	cp	r14, r1
   13498:	f1 04       	cpc	r15, r1
   1349a:	19 f0       	breq	.+6      	; 0x134a2 <strtod+0x98>
   1349c:	d7 01       	movw	r26, r14
   1349e:	cd 92       	st	X+, r12
   134a0:	dc 92       	st	X, r13
   134a2:	60 e0       	ldi	r22, 0x00	; 0
   134a4:	70 e0       	ldi	r23, 0x00	; 0
   134a6:	80 e8       	ldi	r24, 0x80	; 128
   134a8:	9f ef       	ldi	r25, 0xFF	; 255
   134aa:	c1 11       	cpse	r28, r1
   134ac:	ff c0       	rjmp	.+510    	; 0x136ac <strtod+0x2a2>
   134ae:	60 e0       	ldi	r22, 0x00	; 0
   134b0:	70 e0       	ldi	r23, 0x00	; 0
   134b2:	80 e8       	ldi	r24, 0x80	; 128
   134b4:	9f e7       	ldi	r25, 0x7F	; 127
   134b6:	fa c0       	rjmp	.+500    	; 0x136ac <strtod+0x2a2>
   134b8:	58 01       	movw	r10, r16
   134ba:	bb cf       	rjmp	.-138    	; 0x13432 <strtod+0x28>
   134bc:	db 32       	cpi	r29, 0x2B	; 43
   134be:	29 f4       	brne	.+10     	; 0x134ca <strtod+0xc0>
   134c0:	85 01       	movw	r16, r10
   134c2:	0e 5f       	subi	r16, 0xFE	; 254
   134c4:	1f 4f       	sbci	r17, 0xFF	; 255
   134c6:	f5 01       	movw	r30, r10
   134c8:	d1 81       	ldd	r29, Z+1	; 0x01
   134ca:	c0 e0       	ldi	r28, 0x00	; 0
   134cc:	c6 cf       	rjmp	.-116    	; 0x1345a <strtod+0x50>
   134ce:	43 e0       	ldi	r20, 0x03	; 3
   134d0:	50 e0       	ldi	r21, 0x00	; 0
   134d2:	64 e3       	ldi	r22, 0x34	; 52
   134d4:	74 e0       	ldi	r23, 0x04	; 4
   134d6:	c5 01       	movw	r24, r10
   134d8:	0e 94 3e 9c 	call	0x1387c	; 0x1387c <strncasecmp_P>
   134dc:	89 2b       	or	r24, r25
   134de:	e9 f0       	breq	.+58     	; 0x1351a <strtod+0x110>
   134e0:	f8 01       	movw	r30, r16
   134e2:	10 e0       	ldi	r17, 0x00	; 0
   134e4:	00 e0       	ldi	r16, 0x00	; 0
   134e6:	20 e0       	ldi	r18, 0x00	; 0
   134e8:	30 e0       	ldi	r19, 0x00	; 0
   134ea:	a9 01       	movw	r20, r18
   134ec:	5f 01       	movw	r10, r30
   134ee:	b0 ed       	ldi	r27, 0xD0	; 208
   134f0:	8b 2e       	mov	r8, r27
   134f2:	8d 0e       	add	r8, r29
   134f4:	89 e0       	ldi	r24, 0x09	; 9
   134f6:	88 15       	cp	r24, r8
   134f8:	c8 f1       	brcs	.+114    	; 0x1356c <strtod+0x162>
   134fa:	9c 2e       	mov	r9, r28
   134fc:	68 94       	set
   134fe:	91 f8       	bld	r9, 1
   13500:	8c 2f       	mov	r24, r28
   13502:	88 70       	andi	r24, 0x08	; 8
   13504:	c2 ff       	sbrs	r28, 2
   13506:	16 c0       	rjmp	.+44     	; 0x13534 <strtod+0x12a>
   13508:	81 11       	cpse	r24, r1
   1350a:	02 c0       	rjmp	.+4      	; 0x13510 <strtod+0x106>
   1350c:	0f 5f       	subi	r16, 0xFF	; 255
   1350e:	1f 4f       	sbci	r17, 0xFF	; 255
   13510:	31 96       	adiw	r30, 0x01	; 1
   13512:	d5 01       	movw	r26, r10
   13514:	dc 91       	ld	r29, X
   13516:	c9 2d       	mov	r28, r9
   13518:	e9 cf       	rjmp	.-46     	; 0x134ec <strtod+0xe2>
   1351a:	e1 14       	cp	r14, r1
   1351c:	f1 04       	cpc	r15, r1
   1351e:	29 f0       	breq	.+10     	; 0x1352a <strtod+0x120>
   13520:	0e 5f       	subi	r16, 0xFE	; 254
   13522:	1f 4f       	sbci	r17, 0xFF	; 255
   13524:	f7 01       	movw	r30, r14
   13526:	11 83       	std	Z+1, r17	; 0x01
   13528:	00 83       	st	Z, r16
   1352a:	60 e0       	ldi	r22, 0x00	; 0
   1352c:	70 e0       	ldi	r23, 0x00	; 0
   1352e:	80 ec       	ldi	r24, 0xC0	; 192
   13530:	9f e7       	ldi	r25, 0x7F	; 127
   13532:	bc c0       	rjmp	.+376    	; 0x136ac <strtod+0x2a2>
   13534:	88 23       	and	r24, r24
   13536:	11 f0       	breq	.+4      	; 0x1353c <strtod+0x132>
   13538:	01 50       	subi	r16, 0x01	; 1
   1353a:	11 09       	sbc	r17, r1
   1353c:	a5 e0       	ldi	r26, 0x05	; 5
   1353e:	b0 e0       	ldi	r27, 0x00	; 0
   13540:	0e 94 42 92 	call	0x12484	; 0x12484 <__muluhisi3>
   13544:	9b 01       	movw	r18, r22
   13546:	ac 01       	movw	r20, r24
   13548:	22 0f       	add	r18, r18
   1354a:	33 1f       	adc	r19, r19
   1354c:	44 1f       	adc	r20, r20
   1354e:	55 1f       	adc	r21, r21
   13550:	28 0d       	add	r18, r8
   13552:	31 1d       	adc	r19, r1
   13554:	41 1d       	adc	r20, r1
   13556:	51 1d       	adc	r21, r1
   13558:	28 39       	cpi	r18, 0x98	; 152
   1355a:	99 e9       	ldi	r25, 0x99	; 153
   1355c:	39 07       	cpc	r19, r25
   1355e:	49 07       	cpc	r20, r25
   13560:	99 e1       	ldi	r25, 0x19	; 25
   13562:	59 07       	cpc	r21, r25
   13564:	a8 f2       	brcs	.-86     	; 0x13510 <strtod+0x106>
   13566:	c6 60       	ori	r28, 0x06	; 6
   13568:	9c 2e       	mov	r9, r28
   1356a:	d2 cf       	rjmp	.-92     	; 0x13510 <strtod+0x106>
   1356c:	ae ef       	ldi	r26, 0xFE	; 254
   1356e:	8a 12       	cpse	r8, r26
   13570:	06 c0       	rjmp	.+12     	; 0x1357e <strtod+0x174>
   13572:	c3 fd       	sbrc	r28, 3
   13574:	3c c0       	rjmp	.+120    	; 0x135ee <strtod+0x1e4>
   13576:	9c 2e       	mov	r9, r28
   13578:	68 94       	set
   1357a:	93 f8       	bld	r9, 3
   1357c:	c9 cf       	rjmp	.-110    	; 0x13510 <strtod+0x106>
   1357e:	df 7d       	andi	r29, 0xDF	; 223
   13580:	d5 34       	cpi	r29, 0x45	; 69
   13582:	a9 f5       	brne	.+106    	; 0x135ee <strtod+0x1e4>
   13584:	80 81       	ld	r24, Z
   13586:	8d 32       	cpi	r24, 0x2D	; 45
   13588:	39 f4       	brne	.+14     	; 0x13598 <strtod+0x18e>
   1358a:	c0 61       	ori	r28, 0x10	; 16
   1358c:	df 01       	movw	r26, r30
   1358e:	12 96       	adiw	r26, 0x02	; 2
   13590:	81 81       	ldd	r24, Z+1	; 0x01
   13592:	62 e0       	ldi	r22, 0x02	; 2
   13594:	70 e0       	ldi	r23, 0x00	; 0
   13596:	06 c0       	rjmp	.+12     	; 0x135a4 <strtod+0x19a>
   13598:	df 01       	movw	r26, r30
   1359a:	8b 32       	cpi	r24, 0x2B	; 43
   1359c:	c1 f3       	breq	.-16     	; 0x1358e <strtod+0x184>
   1359e:	11 96       	adiw	r26, 0x01	; 1
   135a0:	61 e0       	ldi	r22, 0x01	; 1
   135a2:	70 e0       	ldi	r23, 0x00	; 0
   135a4:	80 53       	subi	r24, 0x30	; 48
   135a6:	5d 01       	movw	r10, r26
   135a8:	a6 1a       	sub	r10, r22
   135aa:	b7 0a       	sbc	r11, r23
   135ac:	8a 30       	cpi	r24, 0x0A	; 10
   135ae:	f8 f4       	brcc	.+62     	; 0x135ee <strtod+0x1e4>
   135b0:	e0 e8       	ldi	r30, 0x80	; 128
   135b2:	ce 16       	cp	r12, r30
   135b4:	ec e0       	ldi	r30, 0x0C	; 12
   135b6:	de 06       	cpc	r13, r30
   135b8:	5c f4       	brge	.+22     	; 0x135d0 <strtod+0x1c6>
   135ba:	b6 01       	movw	r22, r12
   135bc:	66 0f       	add	r22, r22
   135be:	77 1f       	adc	r23, r23
   135c0:	66 0f       	add	r22, r22
   135c2:	77 1f       	adc	r23, r23
   135c4:	c6 0e       	add	r12, r22
   135c6:	d7 1e       	adc	r13, r23
   135c8:	cc 0c       	add	r12, r12
   135ca:	dd 1c       	adc	r13, r13
   135cc:	c8 0e       	add	r12, r24
   135ce:	d1 1c       	adc	r13, r1
   135d0:	5d 01       	movw	r10, r26
   135d2:	ff ef       	ldi	r31, 0xFF	; 255
   135d4:	af 1a       	sub	r10, r31
   135d6:	bf 0a       	sbc	r11, r31
   135d8:	8c 91       	ld	r24, X
   135da:	80 53       	subi	r24, 0x30	; 48
   135dc:	8a 30       	cpi	r24, 0x0A	; 10
   135de:	a8 f1       	brcs	.+106    	; 0x1364a <strtod+0x240>
   135e0:	c4 ff       	sbrs	r28, 4
   135e2:	03 c0       	rjmp	.+6      	; 0x135ea <strtod+0x1e0>
   135e4:	d1 94       	neg	r13
   135e6:	c1 94       	neg	r12
   135e8:	d1 08       	sbc	r13, r1
   135ea:	0c 0d       	add	r16, r12
   135ec:	1d 1d       	adc	r17, r13
   135ee:	c1 ff       	sbrs	r28, 1
   135f0:	09 c0       	rjmp	.+18     	; 0x13604 <strtod+0x1fa>
   135f2:	e1 14       	cp	r14, r1
   135f4:	f1 04       	cpc	r15, r1
   135f6:	31 f0       	breq	.+12     	; 0x13604 <strtod+0x1fa>
   135f8:	81 e0       	ldi	r24, 0x01	; 1
   135fa:	a8 1a       	sub	r10, r24
   135fc:	b1 08       	sbc	r11, r1
   135fe:	d7 01       	movw	r26, r14
   13600:	ad 92       	st	X+, r10
   13602:	bc 92       	st	X, r11
   13604:	ca 01       	movw	r24, r20
   13606:	b9 01       	movw	r22, r18
   13608:	0e 94 89 90 	call	0x12112	; 0x12112 <__floatunsisf>
   1360c:	c3 70       	andi	r28, 0x03	; 3
   1360e:	c3 30       	cpi	r28, 0x03	; 3
   13610:	09 f4       	brne	.+2      	; 0x13614 <strtod+0x20a>
   13612:	90 58       	subi	r25, 0x80	; 128
   13614:	4b 01       	movw	r8, r22
   13616:	5c 01       	movw	r10, r24
   13618:	20 e0       	ldi	r18, 0x00	; 0
   1361a:	30 e0       	ldi	r19, 0x00	; 0
   1361c:	a9 01       	movw	r20, r18
   1361e:	0e 94 dc 8f 	call	0x11fb8	; 0x11fb8 <__cmpsf2>
   13622:	88 23       	and	r24, r24
   13624:	09 f4       	brne	.+2      	; 0x13628 <strtod+0x21e>
   13626:	40 c0       	rjmp	.+128    	; 0x136a8 <strtod+0x29e>
   13628:	cb e6       	ldi	r28, 0x6B	; 107
   1362a:	d4 e0       	ldi	r29, 0x04	; 4
   1362c:	17 ff       	sbrs	r17, 7
   1362e:	05 c0       	rjmp	.+10     	; 0x1363a <strtod+0x230>
   13630:	11 95       	neg	r17
   13632:	01 95       	neg	r16
   13634:	11 09       	sbc	r17, r1
   13636:	c3 e5       	ldi	r28, 0x53	; 83
   13638:	d4 e0       	ldi	r29, 0x04	; 4
   1363a:	6e 01       	movw	r12, r28
   1363c:	b8 e1       	ldi	r27, 0x18	; 24
   1363e:	cb 1a       	sub	r12, r27
   13640:	d1 08       	sbc	r13, r1
   13642:	80 e2       	ldi	r24, 0x20	; 32
   13644:	e8 2e       	mov	r14, r24
   13646:	f1 2c       	mov	r15, r1
   13648:	0f c0       	rjmp	.+30     	; 0x13668 <strtod+0x25e>
   1364a:	d5 01       	movw	r26, r10
   1364c:	b1 cf       	rjmp	.-158    	; 0x135b0 <strtod+0x1a6>
   1364e:	fe 01       	movw	r30, r28
   13650:	25 91       	lpm	r18, Z+
   13652:	35 91       	lpm	r19, Z+
   13654:	45 91       	lpm	r20, Z+
   13656:	54 91       	lpm	r21, Z
   13658:	0e 19       	sub	r16, r14
   1365a:	1f 09       	sbc	r17, r15
   1365c:	c5 01       	movw	r24, r10
   1365e:	b4 01       	movw	r22, r8
   13660:	0e 94 40 91 	call	0x12280	; 0x12280 <__mulsf3>
   13664:	4b 01       	movw	r8, r22
   13666:	5c 01       	movw	r10, r24
   13668:	d5 01       	movw	r26, r10
   1366a:	c4 01       	movw	r24, r8
   1366c:	0e 15       	cp	r16, r14
   1366e:	1f 05       	cpc	r17, r15
   13670:	74 f7       	brge	.-36     	; 0x1364e <strtod+0x244>
   13672:	24 97       	sbiw	r28, 0x04	; 4
   13674:	f5 94       	asr	r15
   13676:	e7 94       	ror	r14
   13678:	cc 16       	cp	r12, r28
   1367a:	dd 06       	cpc	r13, r29
   1367c:	a9 f7       	brne	.-22     	; 0x13668 <strtod+0x25e>
   1367e:	8a 2f       	mov	r24, r26
   13680:	88 0f       	add	r24, r24
   13682:	8b 2f       	mov	r24, r27
   13684:	88 1f       	adc	r24, r24
   13686:	8f 3f       	cpi	r24, 0xFF	; 255
   13688:	49 f0       	breq	.+18     	; 0x1369c <strtod+0x292>
   1368a:	20 e0       	ldi	r18, 0x00	; 0
   1368c:	30 e0       	ldi	r19, 0x00	; 0
   1368e:	a9 01       	movw	r20, r18
   13690:	c5 01       	movw	r24, r10
   13692:	b4 01       	movw	r22, r8
   13694:	0e 94 dc 8f 	call	0x11fb8	; 0x11fb8 <__cmpsf2>
   13698:	81 11       	cpse	r24, r1
   1369a:	06 c0       	rjmp	.+12     	; 0x136a8 <strtod+0x29e>
   1369c:	82 e2       	ldi	r24, 0x22	; 34
   1369e:	90 e0       	ldi	r25, 0x00	; 0
   136a0:	90 93 36 17 	sts	0x1736, r25	; 0x801736 <errno+0x1>
   136a4:	80 93 35 17 	sts	0x1735, r24	; 0x801735 <errno>
   136a8:	c5 01       	movw	r24, r10
   136aa:	b4 01       	movw	r22, r8
   136ac:	df 91       	pop	r29
   136ae:	cf 91       	pop	r28
   136b0:	1f 91       	pop	r17
   136b2:	0f 91       	pop	r16
   136b4:	ff 90       	pop	r15
   136b6:	ef 90       	pop	r14
   136b8:	df 90       	pop	r13
   136ba:	cf 90       	pop	r12
   136bc:	bf 90       	pop	r11
   136be:	af 90       	pop	r10
   136c0:	9f 90       	pop	r9
   136c2:	8f 90       	pop	r8
   136c4:	08 95       	ret

000136c6 <__ftoa_engine>:
__ftoa_engine():
   136c6:	28 30       	cpi	r18, 0x08	; 8
   136c8:	08 f0       	brcs	.+2      	; 0x136cc <__ftoa_engine+0x6>
   136ca:	27 e0       	ldi	r18, 0x07	; 7
   136cc:	33 27       	eor	r19, r19
   136ce:	da 01       	movw	r26, r20
   136d0:	99 0f       	add	r25, r25
   136d2:	31 1d       	adc	r19, r1
   136d4:	87 fd       	sbrc	r24, 7
   136d6:	91 60       	ori	r25, 0x01	; 1
   136d8:	00 96       	adiw	r24, 0x00	; 0
   136da:	61 05       	cpc	r22, r1
   136dc:	71 05       	cpc	r23, r1
   136de:	39 f4       	brne	.+14     	; 0x136ee <__ftoa_engine+0x28>
   136e0:	32 60       	ori	r19, 0x02	; 2
   136e2:	2e 5f       	subi	r18, 0xFE	; 254
   136e4:	3d 93       	st	X+, r19
   136e6:	30 e3       	ldi	r19, 0x30	; 48
   136e8:	2a 95       	dec	r18
   136ea:	e1 f7       	brne	.-8      	; 0x136e4 <__ftoa_engine+0x1e>
   136ec:	08 95       	ret
   136ee:	9f 3f       	cpi	r25, 0xFF	; 255
   136f0:	30 f0       	brcs	.+12     	; 0x136fe <__ftoa_engine+0x38>
   136f2:	80 38       	cpi	r24, 0x80	; 128
   136f4:	71 05       	cpc	r23, r1
   136f6:	61 05       	cpc	r22, r1
   136f8:	09 f0       	breq	.+2      	; 0x136fc <__ftoa_engine+0x36>
   136fa:	3c 5f       	subi	r19, 0xFC	; 252
   136fc:	3c 5f       	subi	r19, 0xFC	; 252
   136fe:	3d 93       	st	X+, r19
   13700:	91 30       	cpi	r25, 0x01	; 1
   13702:	08 f0       	brcs	.+2      	; 0x13706 <__ftoa_engine+0x40>
   13704:	80 68       	ori	r24, 0x80	; 128
   13706:	91 1d       	adc	r25, r1
   13708:	df 93       	push	r29
   1370a:	cf 93       	push	r28
   1370c:	1f 93       	push	r17
   1370e:	0f 93       	push	r16
   13710:	ff 92       	push	r15
   13712:	ef 92       	push	r14
   13714:	19 2f       	mov	r17, r25
   13716:	98 7f       	andi	r25, 0xF8	; 248
   13718:	96 95       	lsr	r25
   1371a:	e9 2f       	mov	r30, r25
   1371c:	96 95       	lsr	r25
   1371e:	96 95       	lsr	r25
   13720:	e9 0f       	add	r30, r25
   13722:	ff 27       	eor	r31, r31
   13724:	e7 53       	subi	r30, 0x37	; 55
   13726:	fb 4f       	sbci	r31, 0xFB	; 251
   13728:	99 27       	eor	r25, r25
   1372a:	33 27       	eor	r19, r19
   1372c:	ee 24       	eor	r14, r14
   1372e:	ff 24       	eor	r15, r15
   13730:	a7 01       	movw	r20, r14
   13732:	e7 01       	movw	r28, r14
   13734:	05 90       	lpm	r0, Z+
   13736:	08 94       	sec
   13738:	07 94       	ror	r0
   1373a:	28 f4       	brcc	.+10     	; 0x13746 <__ftoa_engine+0x80>
   1373c:	36 0f       	add	r19, r22
   1373e:	e7 1e       	adc	r14, r23
   13740:	f8 1e       	adc	r15, r24
   13742:	49 1f       	adc	r20, r25
   13744:	51 1d       	adc	r21, r1
   13746:	66 0f       	add	r22, r22
   13748:	77 1f       	adc	r23, r23
   1374a:	88 1f       	adc	r24, r24
   1374c:	99 1f       	adc	r25, r25
   1374e:	06 94       	lsr	r0
   13750:	a1 f7       	brne	.-24     	; 0x1373a <__ftoa_engine+0x74>
   13752:	05 90       	lpm	r0, Z+
   13754:	07 94       	ror	r0
   13756:	28 f4       	brcc	.+10     	; 0x13762 <__ftoa_engine+0x9c>
   13758:	e7 0e       	add	r14, r23
   1375a:	f8 1e       	adc	r15, r24
   1375c:	49 1f       	adc	r20, r25
   1375e:	56 1f       	adc	r21, r22
   13760:	c1 1d       	adc	r28, r1
   13762:	77 0f       	add	r23, r23
   13764:	88 1f       	adc	r24, r24
   13766:	99 1f       	adc	r25, r25
   13768:	66 1f       	adc	r22, r22
   1376a:	06 94       	lsr	r0
   1376c:	a1 f7       	brne	.-24     	; 0x13756 <__ftoa_engine+0x90>
   1376e:	05 90       	lpm	r0, Z+
   13770:	07 94       	ror	r0
   13772:	28 f4       	brcc	.+10     	; 0x1377e <__ftoa_engine+0xb8>
   13774:	f8 0e       	add	r15, r24
   13776:	49 1f       	adc	r20, r25
   13778:	56 1f       	adc	r21, r22
   1377a:	c7 1f       	adc	r28, r23
   1377c:	d1 1d       	adc	r29, r1
   1377e:	88 0f       	add	r24, r24
   13780:	99 1f       	adc	r25, r25
   13782:	66 1f       	adc	r22, r22
   13784:	77 1f       	adc	r23, r23
   13786:	06 94       	lsr	r0
   13788:	a1 f7       	brne	.-24     	; 0x13772 <__ftoa_engine+0xac>
   1378a:	05 90       	lpm	r0, Z+
   1378c:	07 94       	ror	r0
   1378e:	20 f4       	brcc	.+8      	; 0x13798 <__ftoa_engine+0xd2>
   13790:	49 0f       	add	r20, r25
   13792:	56 1f       	adc	r21, r22
   13794:	c7 1f       	adc	r28, r23
   13796:	d8 1f       	adc	r29, r24
   13798:	99 0f       	add	r25, r25
   1379a:	66 1f       	adc	r22, r22
   1379c:	77 1f       	adc	r23, r23
   1379e:	88 1f       	adc	r24, r24
   137a0:	06 94       	lsr	r0
   137a2:	a9 f7       	brne	.-22     	; 0x1378e <__ftoa_engine+0xc8>
   137a4:	84 91       	lpm	r24, Z
   137a6:	10 95       	com	r17
   137a8:	17 70       	andi	r17, 0x07	; 7
   137aa:	41 f0       	breq	.+16     	; 0x137bc <__ftoa_engine+0xf6>
   137ac:	d6 95       	lsr	r29
   137ae:	c7 95       	ror	r28
   137b0:	57 95       	ror	r21
   137b2:	47 95       	ror	r20
   137b4:	f7 94       	ror	r15
   137b6:	e7 94       	ror	r14
   137b8:	1a 95       	dec	r17
   137ba:	c1 f7       	brne	.-16     	; 0x137ac <__ftoa_engine+0xe6>
   137bc:	ef e6       	ldi	r30, 0x6F	; 111
   137be:	f4 e0       	ldi	r31, 0x04	; 4
   137c0:	68 94       	set
   137c2:	15 90       	lpm	r1, Z+
   137c4:	15 91       	lpm	r17, Z+
   137c6:	35 91       	lpm	r19, Z+
   137c8:	65 91       	lpm	r22, Z+
   137ca:	95 91       	lpm	r25, Z+
   137cc:	05 90       	lpm	r0, Z+
   137ce:	7f e2       	ldi	r23, 0x2F	; 47
   137d0:	73 95       	inc	r23
   137d2:	e1 18       	sub	r14, r1
   137d4:	f1 0a       	sbc	r15, r17
   137d6:	43 0b       	sbc	r20, r19
   137d8:	56 0b       	sbc	r21, r22
   137da:	c9 0b       	sbc	r28, r25
   137dc:	d0 09       	sbc	r29, r0
   137de:	c0 f7       	brcc	.-16     	; 0x137d0 <__ftoa_engine+0x10a>
   137e0:	e1 0c       	add	r14, r1
   137e2:	f1 1e       	adc	r15, r17
   137e4:	43 1f       	adc	r20, r19
   137e6:	56 1f       	adc	r21, r22
   137e8:	c9 1f       	adc	r28, r25
   137ea:	d0 1d       	adc	r29, r0
   137ec:	7e f4       	brtc	.+30     	; 0x1380c <__ftoa_engine+0x146>
   137ee:	70 33       	cpi	r23, 0x30	; 48
   137f0:	11 f4       	brne	.+4      	; 0x137f6 <__ftoa_engine+0x130>
   137f2:	8a 95       	dec	r24
   137f4:	e6 cf       	rjmp	.-52     	; 0x137c2 <__ftoa_engine+0xfc>
   137f6:	e8 94       	clt
   137f8:	01 50       	subi	r16, 0x01	; 1
   137fa:	30 f0       	brcs	.+12     	; 0x13808 <__ftoa_engine+0x142>
   137fc:	08 0f       	add	r16, r24
   137fe:	0a f4       	brpl	.+2      	; 0x13802 <__ftoa_engine+0x13c>
   13800:	00 27       	eor	r16, r16
   13802:	02 17       	cp	r16, r18
   13804:	08 f4       	brcc	.+2      	; 0x13808 <__ftoa_engine+0x142>
   13806:	20 2f       	mov	r18, r16
   13808:	23 95       	inc	r18
   1380a:	02 2f       	mov	r16, r18
   1380c:	7a 33       	cpi	r23, 0x3A	; 58
   1380e:	28 f0       	brcs	.+10     	; 0x1381a <__ftoa_engine+0x154>
   13810:	79 e3       	ldi	r23, 0x39	; 57
   13812:	7d 93       	st	X+, r23
   13814:	2a 95       	dec	r18
   13816:	e9 f7       	brne	.-6      	; 0x13812 <__ftoa_engine+0x14c>
   13818:	10 c0       	rjmp	.+32     	; 0x1383a <__ftoa_engine+0x174>
   1381a:	7d 93       	st	X+, r23
   1381c:	2a 95       	dec	r18
   1381e:	89 f6       	brne	.-94     	; 0x137c2 <__ftoa_engine+0xfc>
   13820:	06 94       	lsr	r0
   13822:	97 95       	ror	r25
   13824:	67 95       	ror	r22
   13826:	37 95       	ror	r19
   13828:	17 95       	ror	r17
   1382a:	17 94       	ror	r1
   1382c:	e1 18       	sub	r14, r1
   1382e:	f1 0a       	sbc	r15, r17
   13830:	43 0b       	sbc	r20, r19
   13832:	56 0b       	sbc	r21, r22
   13834:	c9 0b       	sbc	r28, r25
   13836:	d0 09       	sbc	r29, r0
   13838:	98 f0       	brcs	.+38     	; 0x13860 <__ftoa_engine+0x19a>
   1383a:	23 95       	inc	r18
   1383c:	7e 91       	ld	r23, -X
   1383e:	73 95       	inc	r23
   13840:	7a 33       	cpi	r23, 0x3A	; 58
   13842:	08 f0       	brcs	.+2      	; 0x13846 <__ftoa_engine+0x180>
   13844:	70 e3       	ldi	r23, 0x30	; 48
   13846:	7c 93       	st	X, r23
   13848:	20 13       	cpse	r18, r16
   1384a:	b8 f7       	brcc	.-18     	; 0x1383a <__ftoa_engine+0x174>
   1384c:	7e 91       	ld	r23, -X
   1384e:	70 61       	ori	r23, 0x10	; 16
   13850:	7d 93       	st	X+, r23
   13852:	30 f0       	brcs	.+12     	; 0x13860 <__ftoa_engine+0x19a>
   13854:	83 95       	inc	r24
   13856:	71 e3       	ldi	r23, 0x31	; 49
   13858:	7d 93       	st	X+, r23
   1385a:	70 e3       	ldi	r23, 0x30	; 48
   1385c:	2a 95       	dec	r18
   1385e:	e1 f7       	brne	.-8      	; 0x13858 <__ftoa_engine+0x192>
   13860:	11 24       	eor	r1, r1
   13862:	ef 90       	pop	r14
   13864:	ff 90       	pop	r15
   13866:	0f 91       	pop	r16
   13868:	1f 91       	pop	r17
   1386a:	cf 91       	pop	r28
   1386c:	df 91       	pop	r29
   1386e:	99 27       	eor	r25, r25
   13870:	87 fd       	sbrc	r24, 7
   13872:	90 95       	com	r25
   13874:	08 95       	ret

00013876 <__ctype_isfalse>:
__ctype_isfalse():
   13876:	99 27       	eor	r25, r25
   13878:	88 27       	eor	r24, r24

0001387a <__ctype_istrue>:
__ctype_istrue():
   1387a:	08 95       	ret

0001387c <strncasecmp_P>:
strncasecmp_P():
   1387c:	fb 01       	movw	r30, r22
   1387e:	dc 01       	movw	r26, r24
   13880:	41 50       	subi	r20, 0x01	; 1
   13882:	50 40       	sbci	r21, 0x00	; 0
   13884:	88 f0       	brcs	.+34     	; 0x138a8 <strncasecmp_P+0x2c>
   13886:	8d 91       	ld	r24, X+
   13888:	81 34       	cpi	r24, 0x41	; 65
   1388a:	1c f0       	brlt	.+6      	; 0x13892 <strncasecmp_P+0x16>
   1388c:	8b 35       	cpi	r24, 0x5B	; 91
   1388e:	0c f4       	brge	.+2      	; 0x13892 <strncasecmp_P+0x16>
   13890:	80 5e       	subi	r24, 0xE0	; 224
   13892:	65 91       	lpm	r22, Z+
   13894:	61 34       	cpi	r22, 0x41	; 65
   13896:	1c f0       	brlt	.+6      	; 0x1389e <strncasecmp_P+0x22>
   13898:	6b 35       	cpi	r22, 0x5B	; 91
   1389a:	0c f4       	brge	.+2      	; 0x1389e <strncasecmp_P+0x22>
   1389c:	60 5e       	subi	r22, 0xE0	; 224
   1389e:	86 1b       	sub	r24, r22
   138a0:	61 11       	cpse	r22, r1
   138a2:	71 f3       	breq	.-36     	; 0x13880 <strncasecmp_P+0x4>
   138a4:	99 0b       	sbc	r25, r25
   138a6:	08 95       	ret
   138a8:	88 1b       	sub	r24, r24
   138aa:	fc cf       	rjmp	.-8      	; 0x138a4 <strncasecmp_P+0x28>

000138ac <strnlen_P>:
strnlen_P():
   138ac:	fc 01       	movw	r30, r24
   138ae:	05 90       	lpm	r0, Z+
   138b0:	61 50       	subi	r22, 0x01	; 1
   138b2:	70 40       	sbci	r23, 0x00	; 0
   138b4:	01 10       	cpse	r0, r1
   138b6:	d8 f7       	brcc	.-10     	; 0x138ae <strnlen_P+0x2>
   138b8:	80 95       	com	r24
   138ba:	90 95       	com	r25
   138bc:	8e 0f       	add	r24, r30
   138be:	9f 1f       	adc	r25, r31
   138c0:	08 95       	ret

000138c2 <memset>:
memset():
   138c2:	dc 01       	movw	r26, r24
   138c4:	01 c0       	rjmp	.+2      	; 0x138c8 <memset+0x6>
   138c6:	6d 93       	st	X+, r22
   138c8:	41 50       	subi	r20, 0x01	; 1
   138ca:	50 40       	sbci	r21, 0x00	; 0
   138cc:	e0 f7       	brcc	.-8      	; 0x138c6 <memset+0x4>
   138ce:	08 95       	ret

000138d0 <strnlen>:
strnlen():
   138d0:	fc 01       	movw	r30, r24
   138d2:	61 50       	subi	r22, 0x01	; 1
   138d4:	70 40       	sbci	r23, 0x00	; 0
   138d6:	01 90       	ld	r0, Z+
   138d8:	01 10       	cpse	r0, r1
   138da:	d8 f7       	brcc	.-10     	; 0x138d2 <strnlen+0x2>
   138dc:	80 95       	com	r24
   138de:	90 95       	com	r25
   138e0:	8e 0f       	add	r24, r30
   138e2:	9f 1f       	adc	r25, r31
   138e4:	08 95       	ret

000138e6 <strrev>:
strrev():
   138e6:	dc 01       	movw	r26, r24
   138e8:	fc 01       	movw	r30, r24
   138ea:	67 2f       	mov	r22, r23
   138ec:	71 91       	ld	r23, Z+
   138ee:	77 23       	and	r23, r23
   138f0:	e1 f7       	brne	.-8      	; 0x138ea <strrev+0x4>
   138f2:	32 97       	sbiw	r30, 0x02	; 2
   138f4:	04 c0       	rjmp	.+8      	; 0x138fe <strrev+0x18>
   138f6:	7c 91       	ld	r23, X
   138f8:	6d 93       	st	X+, r22
   138fa:	70 83       	st	Z, r23
   138fc:	62 91       	ld	r22, -Z
   138fe:	ae 17       	cp	r26, r30
   13900:	bf 07       	cpc	r27, r31
   13902:	c8 f3       	brcs	.-14     	; 0x138f6 <strrev+0x10>
   13904:	08 95       	ret

00013906 <fputc>:
fputc():
   13906:	0f 93       	push	r16
   13908:	1f 93       	push	r17
   1390a:	cf 93       	push	r28
   1390c:	df 93       	push	r29
   1390e:	18 2f       	mov	r17, r24
   13910:	09 2f       	mov	r16, r25
   13912:	eb 01       	movw	r28, r22
   13914:	8b 81       	ldd	r24, Y+3	; 0x03
   13916:	81 fd       	sbrc	r24, 1
   13918:	09 c0       	rjmp	.+18     	; 0x1392c <fputc+0x26>
   1391a:	1f ef       	ldi	r17, 0xFF	; 255
   1391c:	0f ef       	ldi	r16, 0xFF	; 255
   1391e:	81 2f       	mov	r24, r17
   13920:	90 2f       	mov	r25, r16
   13922:	df 91       	pop	r29
   13924:	cf 91       	pop	r28
   13926:	1f 91       	pop	r17
   13928:	0f 91       	pop	r16
   1392a:	08 95       	ret
   1392c:	82 ff       	sbrs	r24, 2
   1392e:	14 c0       	rjmp	.+40     	; 0x13958 <fputc+0x52>
   13930:	2e 81       	ldd	r18, Y+6	; 0x06
   13932:	3f 81       	ldd	r19, Y+7	; 0x07
   13934:	8c 81       	ldd	r24, Y+4	; 0x04
   13936:	9d 81       	ldd	r25, Y+5	; 0x05
   13938:	28 17       	cp	r18, r24
   1393a:	39 07       	cpc	r19, r25
   1393c:	3c f4       	brge	.+14     	; 0x1394c <fputc+0x46>
   1393e:	e8 81       	ld	r30, Y
   13940:	f9 81       	ldd	r31, Y+1	; 0x01
   13942:	cf 01       	movw	r24, r30
   13944:	01 96       	adiw	r24, 0x01	; 1
   13946:	99 83       	std	Y+1, r25	; 0x01
   13948:	88 83       	st	Y, r24
   1394a:	10 83       	st	Z, r17
   1394c:	8e 81       	ldd	r24, Y+6	; 0x06
   1394e:	9f 81       	ldd	r25, Y+7	; 0x07
   13950:	01 96       	adiw	r24, 0x01	; 1
   13952:	9f 83       	std	Y+7, r25	; 0x07
   13954:	8e 83       	std	Y+6, r24	; 0x06
   13956:	e3 cf       	rjmp	.-58     	; 0x1391e <fputc+0x18>
   13958:	e8 85       	ldd	r30, Y+8	; 0x08
   1395a:	f9 85       	ldd	r31, Y+9	; 0x09
   1395c:	81 2f       	mov	r24, r17
   1395e:	19 95       	eicall
   13960:	89 2b       	or	r24, r25
   13962:	a1 f3       	breq	.-24     	; 0x1394c <fputc+0x46>
   13964:	da cf       	rjmp	.-76     	; 0x1391a <fputc+0x14>

00013966 <__ultoa_invert>:
__ultoa_invert():
   13966:	fa 01       	movw	r30, r20
   13968:	aa 27       	eor	r26, r26
   1396a:	28 30       	cpi	r18, 0x08	; 8
   1396c:	51 f1       	breq	.+84     	; 0x139c2 <__ultoa_invert+0x5c>
   1396e:	20 31       	cpi	r18, 0x10	; 16
   13970:	81 f1       	breq	.+96     	; 0x139d2 <__ultoa_invert+0x6c>
   13972:	e8 94       	clt
   13974:	6f 93       	push	r22
   13976:	6e 7f       	andi	r22, 0xFE	; 254
   13978:	6e 5f       	subi	r22, 0xFE	; 254
   1397a:	7f 4f       	sbci	r23, 0xFF	; 255
   1397c:	8f 4f       	sbci	r24, 0xFF	; 255
   1397e:	9f 4f       	sbci	r25, 0xFF	; 255
   13980:	af 4f       	sbci	r26, 0xFF	; 255
   13982:	b1 e0       	ldi	r27, 0x01	; 1
   13984:	3e d0       	rcall	.+124    	; 0x13a02 <__ultoa_invert+0x9c>
   13986:	b4 e0       	ldi	r27, 0x04	; 4
   13988:	3c d0       	rcall	.+120    	; 0x13a02 <__ultoa_invert+0x9c>
   1398a:	67 0f       	add	r22, r23
   1398c:	78 1f       	adc	r23, r24
   1398e:	89 1f       	adc	r24, r25
   13990:	9a 1f       	adc	r25, r26
   13992:	a1 1d       	adc	r26, r1
   13994:	68 0f       	add	r22, r24
   13996:	79 1f       	adc	r23, r25
   13998:	8a 1f       	adc	r24, r26
   1399a:	91 1d       	adc	r25, r1
   1399c:	a1 1d       	adc	r26, r1
   1399e:	6a 0f       	add	r22, r26
   139a0:	71 1d       	adc	r23, r1
   139a2:	81 1d       	adc	r24, r1
   139a4:	91 1d       	adc	r25, r1
   139a6:	a1 1d       	adc	r26, r1
   139a8:	20 d0       	rcall	.+64     	; 0x139ea <__ultoa_invert+0x84>
   139aa:	09 f4       	brne	.+2      	; 0x139ae <__ultoa_invert+0x48>
   139ac:	68 94       	set
   139ae:	3f 91       	pop	r19
   139b0:	2a e0       	ldi	r18, 0x0A	; 10
   139b2:	26 9f       	mul	r18, r22
   139b4:	11 24       	eor	r1, r1
   139b6:	30 19       	sub	r19, r0
   139b8:	30 5d       	subi	r19, 0xD0	; 208
   139ba:	31 93       	st	Z+, r19
   139bc:	de f6       	brtc	.-74     	; 0x13974 <__ultoa_invert+0xe>
   139be:	cf 01       	movw	r24, r30
   139c0:	08 95       	ret
   139c2:	46 2f       	mov	r20, r22
   139c4:	47 70       	andi	r20, 0x07	; 7
   139c6:	40 5d       	subi	r20, 0xD0	; 208
   139c8:	41 93       	st	Z+, r20
   139ca:	b3 e0       	ldi	r27, 0x03	; 3
   139cc:	0f d0       	rcall	.+30     	; 0x139ec <__ultoa_invert+0x86>
   139ce:	c9 f7       	brne	.-14     	; 0x139c2 <__ultoa_invert+0x5c>
   139d0:	f6 cf       	rjmp	.-20     	; 0x139be <__ultoa_invert+0x58>
   139d2:	46 2f       	mov	r20, r22
   139d4:	4f 70       	andi	r20, 0x0F	; 15
   139d6:	40 5d       	subi	r20, 0xD0	; 208
   139d8:	4a 33       	cpi	r20, 0x3A	; 58
   139da:	18 f0       	brcs	.+6      	; 0x139e2 <__ultoa_invert+0x7c>
   139dc:	49 5d       	subi	r20, 0xD9	; 217
   139de:	31 fd       	sbrc	r19, 1
   139e0:	40 52       	subi	r20, 0x20	; 32
   139e2:	41 93       	st	Z+, r20
   139e4:	02 d0       	rcall	.+4      	; 0x139ea <__ultoa_invert+0x84>
   139e6:	a9 f7       	brne	.-22     	; 0x139d2 <__ultoa_invert+0x6c>
   139e8:	ea cf       	rjmp	.-44     	; 0x139be <__ultoa_invert+0x58>
   139ea:	b4 e0       	ldi	r27, 0x04	; 4
   139ec:	a6 95       	lsr	r26
   139ee:	97 95       	ror	r25
   139f0:	87 95       	ror	r24
   139f2:	77 95       	ror	r23
   139f4:	67 95       	ror	r22
   139f6:	ba 95       	dec	r27
   139f8:	c9 f7       	brne	.-14     	; 0x139ec <__ultoa_invert+0x86>
   139fa:	00 97       	sbiw	r24, 0x00	; 0
   139fc:	61 05       	cpc	r22, r1
   139fe:	71 05       	cpc	r23, r1
   13a00:	08 95       	ret
   13a02:	9b 01       	movw	r18, r22
   13a04:	ac 01       	movw	r20, r24
   13a06:	0a 2e       	mov	r0, r26
   13a08:	06 94       	lsr	r0
   13a0a:	57 95       	ror	r21
   13a0c:	47 95       	ror	r20
   13a0e:	37 95       	ror	r19
   13a10:	27 95       	ror	r18
   13a12:	ba 95       	dec	r27
   13a14:	c9 f7       	brne	.-14     	; 0x13a08 <__ultoa_invert+0xa2>
   13a16:	62 0f       	add	r22, r18
   13a18:	73 1f       	adc	r23, r19
   13a1a:	84 1f       	adc	r24, r20
   13a1c:	95 1f       	adc	r25, r21
   13a1e:	a0 1d       	adc	r26, r0
   13a20:	08 95       	ret

00013a22 <eeprom_read_block>:
eeprom_read_block():
   13a22:	dc 01       	movw	r26, r24
   13a24:	cb 01       	movw	r24, r22

00013a26 <eeprom_read_blraw>:
   13a26:	fc 01       	movw	r30, r24
   13a28:	f9 99       	sbic	0x1f, 1	; 31
   13a2a:	fe cf       	rjmp	.-4      	; 0x13a28 <eeprom_read_blraw+0x2>
   13a2c:	06 c0       	rjmp	.+12     	; 0x13a3a <eeprom_read_blraw+0x14>
   13a2e:	f2 bd       	out	0x22, r31	; 34
   13a30:	e1 bd       	out	0x21, r30	; 33
   13a32:	f8 9a       	sbi	0x1f, 0	; 31
   13a34:	31 96       	adiw	r30, 0x01	; 1
   13a36:	00 b4       	in	r0, 0x20	; 32
   13a38:	0d 92       	st	X+, r0
   13a3a:	41 50       	subi	r20, 0x01	; 1
   13a3c:	50 40       	sbci	r21, 0x00	; 0
   13a3e:	b8 f7       	brcc	.-18     	; 0x13a2e <eeprom_read_blraw+0x8>
   13a40:	08 95       	ret

00013a42 <eeprom_update_block>:
eeprom_update_block():
   13a42:	dc 01       	movw	r26, r24
   13a44:	a4 0f       	add	r26, r20
   13a46:	b5 1f       	adc	r27, r21
   13a48:	41 50       	subi	r20, 0x01	; 1
   13a4a:	50 40       	sbci	r21, 0x00	; 0
   13a4c:	48 f0       	brcs	.+18     	; 0x13a60 <eeprom_update_block+0x1e>
   13a4e:	cb 01       	movw	r24, r22
   13a50:	84 0f       	add	r24, r20
   13a52:	95 1f       	adc	r25, r21
   13a54:	2e 91       	ld	r18, -X
   13a56:	0e 94 32 9d 	call	0x13a64	; 0x13a64 <eeprom_update_r18>
   13a5a:	41 50       	subi	r20, 0x01	; 1
   13a5c:	50 40       	sbci	r21, 0x00	; 0
   13a5e:	d0 f7       	brcc	.-12     	; 0x13a54 <eeprom_update_block+0x12>
   13a60:	08 95       	ret

00013a62 <eeprom_update_byte>:
eeprom_update_byte():
   13a62:	26 2f       	mov	r18, r22

00013a64 <eeprom_update_r18>:
   13a64:	f9 99       	sbic	0x1f, 1	; 31
   13a66:	fe cf       	rjmp	.-4      	; 0x13a64 <eeprom_update_r18>
   13a68:	92 bd       	out	0x22, r25	; 34
   13a6a:	81 bd       	out	0x21, r24	; 33
   13a6c:	f8 9a       	sbi	0x1f, 0	; 31
   13a6e:	01 97       	sbiw	r24, 0x01	; 1
   13a70:	00 b4       	in	r0, 0x20	; 32
   13a72:	02 16       	cp	r0, r18
   13a74:	39 f0       	breq	.+14     	; 0x13a84 <eeprom_update_r18+0x20>
   13a76:	1f ba       	out	0x1f, r1	; 31
   13a78:	20 bd       	out	0x20, r18	; 32
   13a7a:	0f b6       	in	r0, 0x3f	; 63
   13a7c:	f8 94       	cli
   13a7e:	fa 9a       	sbi	0x1f, 2	; 31
   13a80:	f9 9a       	sbi	0x1f, 1	; 31
   13a82:	0f be       	out	0x3f, r0	; 63
   13a84:	08 95       	ret

00013a86 <_exit>:
_exit():
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2278
   13a86:	f8 94       	cli

00013a88 <__stop_program>:
__stop_program():
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2280
   13a88:	ff cf       	rjmp	.-2      	; 0x13a88 <__stop_program>
